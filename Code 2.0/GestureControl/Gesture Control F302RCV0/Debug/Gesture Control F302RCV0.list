
Gesture Control F302RCV0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08014c20  08014c20  00024c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d0c  08014d0c  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  08014d0c  08014d0c  00024d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d14  08014d14  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014d14  08014d14  00024d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d18  08014d18  00024d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08014d1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  2000009c  08014db8  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08014db8  0003047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005cce6  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000590a  00000000  00000000  0008cdb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a8  00000000  00000000  000926c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001780  00000000  00000000  00094068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026862  00000000  00000000  000957e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002665c  00000000  00000000  000bc04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5c12  00000000  00000000  000e26a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b82b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000736c  00000000  00000000  001b830c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014c08 	.word	0x08014c08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08014c08 	.word	0x08014c08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800028e:	f000 b9b9 	b.w	8000604 <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f84d 	bl	8000340 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f840 	bl	8000340 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f82f 	bl	8000340 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f821 	bl	8000340 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <BSP_I2C1_Init+0x70>)
 8000614:	4a19      	ldr	r2, [pc, #100]	; (800067c <BSP_I2C1_Init+0x74>)
 8000616:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000618:	4b19      	ldr	r3, [pc, #100]	; (8000680 <BSP_I2C1_Init+0x78>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	1c5a      	adds	r2, r3, #1
 800061e:	4918      	ldr	r1, [pc, #96]	; (8000680 <BSP_I2C1_Init+0x78>)
 8000620:	600a      	str	r2, [r1, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d122      	bne.n	800066c <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000626:	4814      	ldr	r0, [pc, #80]	; (8000678 <BSP_I2C1_Init+0x70>)
 8000628:	f011 f96c 	bl	8011904 <HAL_I2C_GetState>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d11c      	bne.n	800066c <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000632:	4811      	ldr	r0, [pc, #68]	; (8000678 <BSP_I2C1_Init+0x70>)
 8000634:	f000 f8ee 	bl	8000814 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d116      	bne.n	800066c <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800063e:	480e      	ldr	r0, [pc, #56]	; (8000678 <BSP_I2C1_Init+0x70>)
 8000640:	f000 f8a4 	bl	800078c <MX_I2C1_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d003      	beq.n	8000652 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800064a:	f06f 0307 	mvn.w	r3, #7
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	e00c      	b.n	800066c <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000652:	2100      	movs	r1, #0
 8000654:	4808      	ldr	r0, [pc, #32]	; (8000678 <BSP_I2C1_Init+0x70>)
 8000656:	f011 fb5f 	bl	8011d18 <HAL_I2CEx_ConfigAnalogFilter>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000660:	f06f 0307 	mvn.w	r3, #7
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	e001      	b.n	800066c <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800066c:	687b      	ldr	r3, [r7, #4]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000c8 	.word	0x200000c8
 800067c:	40005400 	.word	0x40005400
 8000680:	200000b8 	.word	0x200000b8

08000684 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <BSP_I2C1_DeInit+0x48>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d014      	beq.n	80006c0 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <BSP_I2C1_DeInit+0x48>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	3b01      	subs	r3, #1
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <BSP_I2C1_DeInit+0x48>)
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <BSP_I2C1_DeInit+0x48>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d10b      	bne.n	80006c0 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80006a8:	4809      	ldr	r0, [pc, #36]	; (80006d0 <BSP_I2C1_DeInit+0x4c>)
 80006aa:	f000 f8f9 	bl	80008a0 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80006ae:	4808      	ldr	r0, [pc, #32]	; (80006d0 <BSP_I2C1_DeInit+0x4c>)
 80006b0:	f010 ff0e 	bl	80114d0 <HAL_I2C_DeInit>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d002      	beq.n	80006c0 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80006ba:	f06f 0307 	mvn.w	r3, #7
 80006be:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80006c0:	687b      	ldr	r3, [r7, #4]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000b8 	.word	0x200000b8
 80006d0:	200000c8 	.word	0x200000c8

080006d4 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af02      	add	r7, sp, #8
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	80fb      	strh	r3, [r7, #6]
 80006e0:	4613      	mov	r3, r2
 80006e2:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80006e8:	88bb      	ldrh	r3, [r7, #4]
 80006ea:	88f9      	ldrh	r1, [r7, #6]
 80006ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006f0:	9200      	str	r2, [sp, #0]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <BSP_I2C1_Send+0x50>)
 80006f6:	f010 ff1b 	bl	8011530 <HAL_I2C_Master_Transmit>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d00c      	beq.n	800071a <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000700:	4808      	ldr	r0, [pc, #32]	; (8000724 <BSP_I2C1_Send+0x50>)
 8000702:	f011 f90d 	bl	8011920 <HAL_I2C_GetError>
 8000706:	4603      	mov	r3, r0
 8000708:	2b04      	cmp	r3, #4
 800070a:	d003      	beq.n	8000714 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800070c:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e002      	b.n	800071a <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000714:	f06f 0303 	mvn.w	r3, #3
 8000718:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800071a:	68fb      	ldr	r3, [r7, #12]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200000c8 	.word	0x200000c8

08000728 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af02      	add	r7, sp, #8
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	80fb      	strh	r3, [r7, #6]
 8000734:	4613      	mov	r3, r2
 8000736:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800073c:	88bb      	ldrh	r3, [r7, #4]
 800073e:	88f9      	ldrh	r1, [r7, #6]
 8000740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000744:	9200      	str	r2, [sp, #0]
 8000746:	683a      	ldr	r2, [r7, #0]
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <BSP_I2C1_Recv+0x50>)
 800074a:	f010 ffe5 	bl	8011718 <HAL_I2C_Master_Receive>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d00c      	beq.n	800076e <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000754:	4808      	ldr	r0, [pc, #32]	; (8000778 <BSP_I2C1_Recv+0x50>)
 8000756:	f011 f8e3 	bl	8011920 <HAL_I2C_GetError>
 800075a:	4603      	mov	r3, r0
 800075c:	2b04      	cmp	r3, #4
 800075e:	d003      	beq.n	8000768 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000760:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e002      	b.n	800076e <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000768:	f06f 0303 	mvn.w	r3, #3
 800076c:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800076e:	68fb      	ldr	r3, [r7, #12]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000c8 	.word	0x200000c8

0800077c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000780:	f010 fa44 	bl	8010c0c <HAL_GetTick>
 8000784:	4603      	mov	r3, r0
}
 8000786:	4618      	mov	r0, r3
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000794:	2300      	movs	r3, #0
 8000796:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <MX_I2C1_Init+0x80>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x2000090E;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <MX_I2C1_Init+0x84>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2201      	movs	r2, #1
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f010 fdef 	bl	80113b2 <HAL_I2C_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007de:	2100      	movs	r1, #0
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f011 fa99 	bl	8011d18 <HAL_I2CEx_ConfigAnalogFilter>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80007ec:	2301      	movs	r3, #1
 80007ee:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80007f0:	2100      	movs	r1, #0
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f011 fadb 	bl	8011dae <HAL_I2CEx_ConfigDigitalFilter>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000802:	7bfb      	ldrb	r3, [r7, #15]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40005400 	.word	0x40005400
 8000810:	2000090e 	.word	0x2000090e

08000814 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <I2C1_MspInit+0x84>)
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	4a1d      	ldr	r2, [pc, #116]	; (8000898 <I2C1_MspInit+0x84>)
 8000822:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000826:	6153      	str	r3, [r2, #20]
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <I2C1_MspInit+0x84>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083a:	2312      	movs	r3, #18
 800083c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000846:	2304      	movs	r3, #4
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4812      	ldr	r0, [pc, #72]	; (800089c <I2C1_MspInit+0x88>)
 8000852:	f010 fb1d 	bl	8010e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800085a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800085c:	2312      	movs	r3, #18
 800085e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000868:	2304      	movs	r3, #4
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	480a      	ldr	r0, [pc, #40]	; (800089c <I2C1_MspInit+0x88>)
 8000874:	f010 fb0c 	bl	8010e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <I2C1_MspInit+0x84>)
 800087a:	69db      	ldr	r3, [r3, #28]
 800087c:	4a06      	ldr	r2, [pc, #24]	; (8000898 <I2C1_MspInit+0x84>)
 800087e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000882:	61d3      	str	r3, [r2, #28]
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <I2C1_MspInit+0x84>)
 8000886:	69db      	ldr	r3, [r3, #28]
 8000888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	48000400 	.word	0x48000400

080008a0 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
 80008a8:	f107 0318 	add.w	r3, r7, #24
 80008ac:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <I2C1_MspDeInit+0x38>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <I2C1_MspDeInit+0x38>)
 80008b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80008b8:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80008ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008be:	4807      	ldr	r0, [pc, #28]	; (80008dc <I2C1_MspDeInit+0x3c>)
 80008c0:	f010 fc60 	bl	8011184 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80008c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <I2C1_MspDeInit+0x3c>)
 80008ca:	f010 fc5b 	bl	8011184 <HAL_GPIO_DeInit>

    HAL_StatusTypeDef I2C_Init(void){
    	return MX_I2C1_Init(&hi2c1);
    }
  /* USER CODE END I2C1_MspDeInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000
 80008dc:	48000400 	.word	0x48000400

080008e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b59      	ldr	r3, [pc, #356]	; (8000a5c <MX_GPIO_Init+0x17c>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a58      	ldr	r2, [pc, #352]	; (8000a5c <MX_GPIO_Init+0x17c>)
 80008fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	4b56      	ldr	r3, [pc, #344]	; (8000a5c <MX_GPIO_Init+0x17c>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090e:	4b53      	ldr	r3, [pc, #332]	; (8000a5c <MX_GPIO_Init+0x17c>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	4a52      	ldr	r2, [pc, #328]	; (8000a5c <MX_GPIO_Init+0x17c>)
 8000914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000918:	6153      	str	r3, [r2, #20]
 800091a:	4b50      	ldr	r3, [pc, #320]	; (8000a5c <MX_GPIO_Init+0x17c>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b4d      	ldr	r3, [pc, #308]	; (8000a5c <MX_GPIO_Init+0x17c>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	4a4c      	ldr	r2, [pc, #304]	; (8000a5c <MX_GPIO_Init+0x17c>)
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	6153      	str	r3, [r2, #20]
 8000932:	4b4a      	ldr	r3, [pc, #296]	; (8000a5c <MX_GPIO_Init+0x17c>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b47      	ldr	r3, [pc, #284]	; (8000a5c <MX_GPIO_Init+0x17c>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4a46      	ldr	r2, [pc, #280]	; (8000a5c <MX_GPIO_Init+0x17c>)
 8000944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000948:	6153      	str	r3, [r2, #20]
 800094a:	4b44      	ldr	r3, [pc, #272]	; (8000a5c <MX_GPIO_Init+0x17c>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, XSHUT_0_Pin|XSHUT_1_Pin|XSHUT_2_Pin|XSHUT_3_Pin
 8000956:	2200      	movs	r2, #0
 8000958:	211f      	movs	r1, #31
 800095a:	4841      	ldr	r0, [pc, #260]	; (8000a60 <MX_GPIO_Init+0x180>)
 800095c:	f010 fcee 	bl	801133c <HAL_GPIO_WritePin>
                          |XSHUT_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	21c2      	movs	r1, #194	; 0xc2
 8000964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000968:	f010 fce8 	bl	801133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2101      	movs	r1, #1
 8000970:	483c      	ldr	r0, [pc, #240]	; (8000a64 <MX_GPIO_Init+0x184>)
 8000972:	f010 fce3 	bl	801133c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = XSHUT_0_Pin|XSHUT_1_Pin|XSHUT_2_Pin|XSHUT_3_Pin
 8000976:	231f      	movs	r3, #31
 8000978:	617b      	str	r3, [r7, #20]
                          |XSHUT_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4834      	ldr	r0, [pc, #208]	; (8000a60 <MX_GPIO_Init+0x180>)
 800098e:	f010 fa7f 	bl	8010e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_0_Pin;
 8000992:	2301      	movs	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_0_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a8:	f010 fa72 	bl	8010e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 80009ac:	23c2      	movs	r3, #194	; 0xc2
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c6:	f010 fa63 	bl	8010e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_4_Pin;
 80009ca:	2301      	movs	r3, #1
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_4_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4820      	ldr	r0, [pc, #128]	; (8000a64 <MX_GPIO_Init+0x184>)
 80009e2:	f010 fa55 	bl	8010e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin;
 80009e6:	2306      	movs	r3, #6
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	481a      	ldr	r0, [pc, #104]	; (8000a64 <MX_GPIO_Init+0x184>)
 80009fa:	f010 fa49 	bl	8010e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GPIOI_0_Pin|GPIOI_1_Pin|GPIOI_2_Pin|GPIOI_3_Pin;
 80009fe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4813      	ldr	r0, [pc, #76]	; (8000a64 <MX_GPIO_Init+0x184>)
 8000a16:	f010 fa3b 	bl	8010e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIOI_4_Pin;
 8000a1a:	2340      	movs	r3, #64	; 0x40
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOI_4_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480c      	ldr	r0, [pc, #48]	; (8000a60 <MX_GPIO_Init+0x180>)
 8000a30:	f010 fa2e 	bl	8010e90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2017      	movs	r0, #23
 8000a3a:	f010 f9f2 	bl	8010e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a3e:	2017      	movs	r0, #23
 8000a40:	f010 fa0b 	bl	8010e5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	2028      	movs	r0, #40	; 0x28
 8000a4a:	f010 f9ea 	bl	8010e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a4e:	2028      	movs	r0, #40	; 0x28
 8000a50:	f010 fa03 	bl	8010e5a <HAL_NVIC_EnableIRQ>

}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	; 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	48000800 	.word	0x48000800
 8000a64:	48000400 	.word	0x48000400

08000a68 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_I2C2_Init+0x74>)
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <MX_I2C2_Init+0x78>)
 8000a70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_I2C2_Init+0x74>)
 8000a74:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <MX_I2C2_Init+0x7c>)
 8000a76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_I2C2_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_I2C2_Init+0x74>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_I2C2_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_I2C2_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_I2C2_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_I2C2_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_I2C2_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aa2:	480e      	ldr	r0, [pc, #56]	; (8000adc <MX_I2C2_Init+0x74>)
 8000aa4:	f010 fc85 	bl	80113b2 <HAL_I2C_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000aae:	f000 f9d3 	bl	8000e58 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <MX_I2C2_Init+0x74>)
 8000ab6:	f011 f92f 	bl	8011d18 <HAL_I2CEx_ConfigAnalogFilter>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ac0:	f000 f9ca 	bl	8000e58 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_I2C2_Init+0x74>)
 8000ac8:	f011 f971 	bl	8011dae <HAL_I2CEx_ConfigDigitalFilter>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ad2:	f000 f9c1 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000114 	.word	0x20000114
 8000ae0:	40005800 	.word	0x40005800
 8000ae4:	2000090e 	.word	0x2000090e

08000ae8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <HAL_I2C_MspInit+0x80>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d129      	bne.n	8000b5e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_I2C_MspInit+0x84>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <HAL_I2C_MspInit+0x84>)
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b14:	6153      	str	r3, [r2, #20]
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_I2C_MspInit+0x84>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b28:	2312      	movs	r3, #18
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b34:	2304      	movs	r3, #4
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f010 f9a5 	bl	8010e90 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_I2C_MspInit+0x84>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_I2C_MspInit+0x84>)
 8000b4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b50:	61d3      	str	r3, [r2, #28]
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_I2C_MspInit+0x84>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40005800 	.word	0x40005800
 8000b6c:	40021000 	.word	0x40021000

08000b70 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0c      	ldr	r2, [pc, #48]	; (8000bb0 <HAL_I2C_MspDeInit+0x40>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d111      	bne.n	8000ba6 <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_I2C_MspDeInit+0x44>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <HAL_I2C_MspDeInit+0x44>)
 8000b88:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000b8c:	61d3      	str	r3, [r2, #28]

    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 8000b8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b96:	f010 faf5 	bl	8011184 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8000b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f010 faef 	bl	8011184 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40005800 	.word	0x40005800
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	f5ad 5d15 	sub.w	sp, sp, #9536	; 0x2540
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc2:	f00f ffc9 	bl	8010b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc6:	f000 f8c7 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bca:	f7ff fe89 	bl	80008e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bce:	f000 fa7b 	bl	80010c8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000bd2:	f7ff ff49 	bl	8000a68 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000bd6:	f000 fa47 	bl	8001068 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  VL53L3CX_Object_t sensor;

  sensor.IO.DeInit = CUSTOM_VL53L3CX_I2C_DeInit;
 8000bda:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000bde:	3b30      	subs	r3, #48	; 0x30
 8000be0:	4a56      	ldr	r2, [pc, #344]	; (8000d3c <main+0x184>)
 8000be2:	605a      	str	r2, [r3, #4]
  sensor.IO.Init = CUSTOM_VL53L3CX_I2C_Init;
 8000be4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000be8:	3b30      	subs	r3, #48	; 0x30
 8000bea:	4a55      	ldr	r2, [pc, #340]	; (8000d40 <main+0x188>)
 8000bec:	601a      	str	r2, [r3, #0]
  sensor.IO.ReadReg = CUSTOM_VL53L3CX_I2C_ReadReg;
 8000bee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000bf2:	3b30      	subs	r3, #48	; 0x30
 8000bf4:	4a53      	ldr	r2, [pc, #332]	; (8000d44 <main+0x18c>)
 8000bf6:	611a      	str	r2, [r3, #16]
  sensor.IO.WriteReg = CUSTOM_VL53L3CX_I2C_WriteReg;
 8000bf8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000bfc:	3b30      	subs	r3, #48	; 0x30
 8000bfe:	4a52      	ldr	r2, [pc, #328]	; (8000d48 <main+0x190>)
 8000c00:	60da      	str	r2, [r3, #12]
  sensor.IO.GetTick = CUSTOM_VL53L3CX_I2C_GetTick;
 8000c02:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c06:	3b30      	subs	r3, #48	; 0x30
 8000c08:	4a50      	ldr	r2, [pc, #320]	; (8000d4c <main+0x194>)
 8000c0a:	615a      	str	r2, [r3, #20]
  sensor.IO.Address = 0x52;
 8000c0c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c10:	3b30      	subs	r3, #48	; 0x30
 8000c12:	2252      	movs	r2, #82	; 0x52
 8000c14:	811a      	strh	r2, [r3, #8]

  HAL_GPIO_WritePin(XSHUT_0_GPIO_Port, XSHUT_0_Pin, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2101      	movs	r1, #1
 8000c1a:	484d      	ldr	r0, [pc, #308]	; (8000d50 <main+0x198>)
 8000c1c:	f010 fb8e 	bl	801133c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XSHUT_1_GPIO_Port, XSHUT_1_Pin, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2102      	movs	r1, #2
 8000c24:	484a      	ldr	r0, [pc, #296]	; (8000d50 <main+0x198>)
 8000c26:	f010 fb89 	bl	801133c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XSHUT_2_GPIO_Port, XSHUT_2_Pin, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	4848      	ldr	r0, [pc, #288]	; (8000d50 <main+0x198>)
 8000c30:	f010 fb84 	bl	801133c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XSHUT_3_GPIO_Port, XSHUT_3_Pin, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2108      	movs	r1, #8
 8000c38:	4845      	ldr	r0, [pc, #276]	; (8000d50 <main+0x198>)
 8000c3a:	f010 fb7f 	bl	801133c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XSHUT_4_GPIO_Port, XSHUT_4_Pin, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2110      	movs	r1, #16
 8000c42:	4843      	ldr	r0, [pc, #268]	; (8000d50 <main+0x198>)
 8000c44:	f010 fb7a 	bl	801133c <HAL_GPIO_WritePin>

  sensor.IsInitialized = 0;
 8000c48:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c4c:	3b30      	subs	r3, #48	; 0x30
 8000c4e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8000c52:	3328      	adds	r3, #40	; 0x28
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(XSHUT_0_GPIO_Port, XSHUT_0_Pin, 1);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	483c      	ldr	r0, [pc, #240]	; (8000d50 <main+0x198>)
 8000c5e:	f010 fb6d 	bl	801133c <HAL_GPIO_WritePin>
  CUSTOM_VL53L3CX_I2C_Init();
 8000c62:	f7ff fcd1 	bl	8000608 <BSP_I2C1_Init>
  VL53L3CX_Init(&sensor);
 8000c66:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c6a:	3b30      	subs	r3, #48	; 0x30
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f00f fc63 	bl	8010538 <VL53L3CX_Init>
  VL53L3CX_SetAddress(&sensor, 0x53);
 8000c72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c76:	3b30      	subs	r3, #48	; 0x30
 8000c78:	2153      	movs	r1, #83	; 0x53
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f00f fdda 	bl	8010834 <VL53L3CX_SetAddress>
  sensor.IO.Address = 0x53;
 8000c80:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c84:	3b30      	subs	r3, #48	; 0x30
 8000c86:	2253      	movs	r2, #83	; 0x53
 8000c88:	811a      	strh	r2, [r3, #8]

  //Config profile
  VL53L3CX_ProfileConfig_t Profile;

  Profile.RangingProfile = VL53LX_DISTANCEMODE_MEDIUM;
 8000c8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	2202      	movs	r2, #2
 8000c92:	701a      	strb	r2, [r3, #0]
  Profile.TimingBudget = 100; /* 16 ms < TimingBudget < 500 ms */
 8000c94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c98:	3b04      	subs	r3, #4
 8000c9a:	2264      	movs	r2, #100	; 0x64
 8000c9c:	605a      	str	r2, [r3, #4]
  Profile.Frequency = 0;      /* not necessary in simple ranging */
 8000c9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 1;  /* Enable: 1, Disable: 0 */
 8000ca8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cac:	3b04      	subs	r3, #4
 8000cae:	2201      	movs	r2, #1
 8000cb0:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 1;   /* Enable: 1, Disable: 0 */
 8000cb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cb6:	3b04      	subs	r3, #4
 8000cb8:	2201      	movs	r2, #1
 8000cba:	611a      	str	r2, [r3, #16]

  VL53L3CX_ConfigProfile(&sensor, &Profile);
 8000cbc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000cc0:	3a04      	subs	r2, #4
 8000cc2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000cc6:	3b30      	subs	r3, #48	; 0x30
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f00f fc8c 	bl	80105e8 <VL53L3CX_ConfigProfile>


  //Starten
  VL53L3CX_Start(&sensor, VL53L3CX_MODE_BLOCKING_CONTINUOUS);
 8000cd0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f00f fd31 	bl	8010740 <VL53L3CX_Start>

  VL53L3CX_Result_t results;

  VL53L3CX_GetDistance(&sensor, &results);
 8000cde:	f107 0210 	add.w	r2, r7, #16
 8000ce2:	3a0c      	subs	r2, #12
 8000ce4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ce8:	3b30      	subs	r3, #48	; 0x30
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f00f fcd8 	bl	80106a2 <VL53L3CX_GetDistance>
  HAL_Delay(1000);
 8000cf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf6:	f00f ff95 	bl	8010c24 <HAL_Delay>
  VL53L3CX_GetDistance(&sensor, &results);
 8000cfa:	f107 0210 	add.w	r2, r7, #16
 8000cfe:	3a0c      	subs	r2, #12
 8000d00:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000d04:	3b30      	subs	r3, #48	; 0x30
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f00f fcca 	bl	80106a2 <VL53L3CX_GetDistance>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  VL53L3CX_GetDistance(&sensor, &results);
 8000d0e:	f107 0210 	add.w	r2, r7, #16
 8000d12:	3a0c      	subs	r2, #12
 8000d14:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000d18:	3b30      	subs	r3, #48	; 0x30
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f00f fcc0 	bl	80106a2 <VL53L3CX_GetDistance>
	  printf("distance: %4d\r\n", results.ZoneResult[0].Distance[0]);
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	3b0c      	subs	r3, #12
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <main+0x19c>)
 8000d2e:	f013 f801 	bl	8013d34 <iprintf>
	  HAL_Delay(1000);
 8000d32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d36:	f00f ff75 	bl	8010c24 <HAL_Delay>
	  VL53L3CX_GetDistance(&sensor, &results);
 8000d3a:	e7e8      	b.n	8000d0e <main+0x156>
 8000d3c:	08000685 	.word	0x08000685
 8000d40:	08000609 	.word	0x08000609
 8000d44:	08000729 	.word	0x08000729
 8000d48:	080006d5 	.word	0x080006d5
 8000d4c:	0800077d 	.word	0x0800077d
 8000d50:	48000800 	.word	0x48000800
 8000d54:	08014c20 	.word	0x08014c20

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b09c      	sub	sp, #112	; 0x70
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d62:	2228      	movs	r2, #40	; 0x28
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f012 ffdc 	bl	8013d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	2234      	movs	r2, #52	; 0x34
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f012 ffce 	bl	8013d24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d90:	2310      	movs	r3, #16
 8000d92:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f011 f853 	bl	8011e48 <HAL_RCC_OscConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000da8:	f000 f856 	bl	8000e58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dac:	230f      	movs	r3, #15
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000db0:	2300      	movs	r3, #0
 8000db2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f011 ff46 	bl	8012c58 <HAL_RCC_ClockConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000dd2:	f000 f841 	bl	8000e58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000dd6:	2363      	movs	r3, #99	; 0x63
 8000dd8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	4618      	mov	r0, r3
 8000dee:	f012 f969 	bl	80130c4 <HAL_RCCEx_PeriphCLKConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000df8:	f000 f82e 	bl	8000e58 <Error_Handler>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3770      	adds	r7, #112	; 0x70
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *data, int len)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d00a      	beq.n	8000e2c <_write+0x28>
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d007      	beq.n	8000e2c <_write+0x28>
  {
    errno = EBADF;
 8000e1c:	f012 ff4a 	bl	8013cb4 <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2209      	movs	r2, #9
 8000e24:	601a      	str	r2, [r3, #0]
    return -1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e2a:	e00f      	b.n	8000e4c <_write+0x48>
  }

  // arbitrary timeout 1000
  HAL_StatusTypeDef status =
      HAL_UART_Transmit(&huart2, (uint8_t *)data, len, 1000);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	4807      	ldr	r0, [pc, #28]	; (8000e54 <_write+0x50>)
 8000e38:	f012 fb24 	bl	8013484 <HAL_UART_Transmit>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	75fb      	strb	r3, [r7, #23]

  // return # of bytes written - as best we can tell
  return (status == HAL_OK ? len : 0);
 8000e40:	7dfb      	ldrb	r3, [r7, #23]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <_write+0x46>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	e000      	b.n	8000e4c <_write+0x48>
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200001e4 	.word	0x200001e4

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <Error_Handler+0x8>
	...

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6193      	str	r3, [r2, #24]
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler+0x4>

08000ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef8:	f00f fe74 	bl	8010be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LED_2_Pin);
 8000f04:	2040      	movs	r0, #64	; 0x40
 8000f06:	f010 fa31 	bl	801136c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIOI_0_Pin);
 8000f12:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f16:	f010 fa29 	bl	801136c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIOI_1_Pin);
 8000f1a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f1e:	f010 fa25 	bl	801136c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIOI_2_Pin);
 8000f22:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f26:	f010 fa21 	bl	801136c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIOI_3_Pin);
 8000f2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f2e:	f010 fa1d 	bl	801136c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	e00a      	b.n	8000f5e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f48:	f3af 8000 	nop.w
 8000f4c:	4601      	mov	r1, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	60ba      	str	r2, [r7, #8]
 8000f54:	b2ca      	uxtb	r2, r1
 8000f56:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	dbf0      	blt.n	8000f48 <_read+0x12>
	}

return len;
 8000f66:	687b      	ldr	r3, [r7, #4]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	return -1;
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f98:	605a      	str	r2, [r3, #4]
	return 0;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <_isatty>:

int _isatty(int file)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	return 1;
 8000fb0:	2301      	movs	r3, #1
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b085      	sub	sp, #20
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
	return 0;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f012 fe54 	bl	8013cb4 <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000a000 	.word	0x2000a000
 8001038:	00000400 	.word	0x00000400
 800103c:	200000bc 	.word	0x200000bc
 8001040:	20000480 	.word	0x20000480

08001044 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_USART1_UART_Init+0x58>)
 800106e:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <MX_USART1_UART_Init+0x5c>)
 8001070:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <MX_USART1_UART_Init+0x58>)
 8001074:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001078:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_USART1_UART_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_USART1_UART_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_USART1_UART_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_USART1_UART_Init+0x58>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_USART1_UART_Init+0x58>)
 8001094:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001098:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_USART1_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <MX_USART1_UART_Init+0x58>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_USART1_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_USART1_UART_Init+0x58>)
 80010ae:	f012 f99b 	bl	80133e8 <HAL_UART_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80010b8:	f7ff fece 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000160 	.word	0x20000160
 80010c4:	40013800 	.word	0x40013800

080010c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010ce:	4a15      	ldr	r2, [pc, #84]	; (8001124 <MX_USART2_UART_Init+0x5c>)
 80010d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010d4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80010d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <MX_USART2_UART_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_USART2_UART_Init+0x58>)
 8001106:	2200      	movs	r2, #0
 8001108:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_USART2_UART_Init+0x58>)
 800110c:	f012 f96c 	bl	80133e8 <HAL_UART_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001116:	f7ff fe9f 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001e4 	.word	0x200001e4
 8001124:	40004400 	.word	0x40004400

08001128 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	; 0x30
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a3d      	ldr	r2, [pc, #244]	; (800123c <HAL_UART_MspInit+0x114>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d146      	bne.n	80011d8 <HAL_UART_MspInit+0xb0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800114a:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <HAL_UART_MspInit+0x118>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	4a3c      	ldr	r2, [pc, #240]	; (8001240 <HAL_UART_MspInit+0x118>)
 8001150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001154:	6193      	str	r3, [r2, #24]
 8001156:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <HAL_UART_MspInit+0x118>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b37      	ldr	r3, [pc, #220]	; (8001240 <HAL_UART_MspInit+0x118>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	4a36      	ldr	r2, [pc, #216]	; (8001240 <HAL_UART_MspInit+0x118>)
 8001168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116c:	6153      	str	r3, [r2, #20]
 800116e:	4b34      	ldr	r3, [pc, #208]	; (8001240 <HAL_UART_MspInit+0x118>)
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <HAL_UART_MspInit+0x118>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	4a30      	ldr	r2, [pc, #192]	; (8001240 <HAL_UART_MspInit+0x118>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001184:	6153      	str	r3, [r2, #20]
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <HAL_UART_MspInit+0x118>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001192:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011a4:	2307      	movs	r3, #7
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b2:	f00f fe6d 	bl	8010e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011b6:	23c0      	movs	r3, #192	; 0xc0
 80011b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011c6:	2307      	movs	r3, #7
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	481c      	ldr	r0, [pc, #112]	; (8001244 <HAL_UART_MspInit+0x11c>)
 80011d2:	f00f fe5d 	bl	8010e90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011d6:	e02d      	b.n	8001234 <HAL_UART_MspInit+0x10c>
  else if(uartHandle->Instance==USART2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <HAL_UART_MspInit+0x120>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d128      	bne.n	8001234 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_UART_MspInit+0x118>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a16      	ldr	r2, [pc, #88]	; (8001240 <HAL_UART_MspInit+0x118>)
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ec:	61d3      	str	r3, [r2, #28]
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_UART_MspInit+0x118>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_UART_MspInit+0x118>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	4a10      	ldr	r2, [pc, #64]	; (8001240 <HAL_UART_MspInit+0x118>)
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	6153      	str	r3, [r2, #20]
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_UART_MspInit+0x118>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001212:	230c      	movs	r3, #12
 8001214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001222:	2307      	movs	r3, #7
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001230:	f00f fe2e 	bl	8010e90 <HAL_GPIO_Init>
}
 8001234:	bf00      	nop
 8001236:	3730      	adds	r7, #48	; 0x30
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40013800 	.word	0x40013800
 8001240:	40021000 	.word	0x40021000
 8001244:	48000400 	.word	0x48000400
 8001248:	40004400 	.word	0x40004400

0800124c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800124c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001284 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <LoopForever+0x6>)
  ldr r1, =_edata
 8001252:	490e      	ldr	r1, [pc, #56]	; (800128c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001254:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <LoopForever+0xe>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001268:	4c0b      	ldr	r4, [pc, #44]	; (8001298 <LoopForever+0x16>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001276:	f7ff fee5 	bl	8001044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800127a:	f012 fd21 	bl	8013cc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800127e:	f7ff fc9b 	bl	8000bb8 <main>

08001282 <LoopForever>:

LoopForever:
    b LoopForever
 8001282:	e7fe      	b.n	8001282 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001284:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001290:	08014d1c 	.word	0x08014d1c
  ldr r2, =_sbss
 8001294:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001298:	2000047c 	.word	0x2000047c

0800129c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC1_2_IRQHandler>

0800129e <VL53LX_SetDeviceAddress>:
}



VL53LX_Error VL53LX_SetDeviceAddress(VL53LX_DEV Dev, uint8_t DeviceAddress)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	460b      	mov	r3, r1
 80012a8:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3318      	adds	r3, #24
 80012b2:	613b      	str	r3, [r7, #16]
	VL53LX_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80012ba:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53LX_WrByte(Dev, VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	085b      	lsrs	r3, r3, #1
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	2101      	movs	r1, #1
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f00d f826 	bl	800e318 <VL53LX_WrByte>
 80012cc:	4603      	mov	r3, r0
 80012ce:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	085b      	lsrs	r3, r3, #1
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80012e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <VL53LX_DataInit>:


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 80012f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d105      	bne.n	800130c <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 8001300:	2101      	movs	r1, #1
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f001 fbdc 	bl	8002ac0 <VL53LX_data_init>
 8001308:	4603      	mov	r3, r0
 800130a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 800130c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d107      	bne.n	8001324 <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 8001314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001318:	2102      	movs	r1, #2
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f886 	bl	800142c <SetPresetModeL3CX>
 8001320:	4603      	mov	r3, r0
 8001322:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 8001324:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d106      	bne.n	800133a <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800132c:	f248 2135 	movw	r1, #33333	; 0x8235
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f959 	bl	80015e8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8001336:	4603      	mov	r3, r0
 8001338:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 800133a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10a      	bne.n	8001358 <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3318      	adds	r3, #24
 8001346:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800134e:	220c      	movs	r2, #12
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f012 fce6 	bl	8013d24 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d105      	bne.n	800136c <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 8001360:	2102      	movs	r1, #2
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f003 fc21 	bl	8004baa <VL53LX_set_dmax_mode>
 8001368:	4603      	mov	r3, r0
 800136a:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 800136c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d105      	bne.n	8001380 <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 8001374:	2100      	movs	r1, #0
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 fe98 	bl	80020ac <VL53LX_SmudgeCorrectionEnable>
 800137c:	4603      	mov	r3, r0
 800137e:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001380:	2320      	movs	r3, #32
 8001382:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	76da      	strb	r2, [r3, #27]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8001390:	3320      	adds	r3, #32
 8001392:	2202      	movs	r2, #2
 8001394:	701a      	strb	r2, [r3, #0]
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 8001396:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 80013ae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f00e fd99 	bl	800feea <VL53LX_poll_for_boot_completion>
 80013b8:	4603      	mov	r3, r0
 80013ba:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 80013bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 80013d8:	4a13      	ldr	r2, [pc, #76]	; (8001428 <ComputeDevicePresetMode+0x60>)
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	4611      	mov	r1, r2
 80013e2:	8019      	strh	r1, [r3, #0]
 80013e4:	3302      	adds	r3, #2
 80013e6:	0c12      	lsrs	r2, r2, #16
 80013e8:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d002      	beq.n	80013f6 <ComputeDevicePresetMode+0x2e>
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d003      	beq.n	80013fc <ComputeDevicePresetMode+0x34>
 80013f4:	e005      	b.n	8001402 <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]
		break;
 80013fa:	e004      	b.n	8001406 <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80013fc:	2301      	movs	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
		break;
 8001400:	e001      	b.n	8001406 <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 8001402:	2302      	movs	r3, #2
 8001404:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	f107 0210 	add.w	r2, r7, #16
 800140c:	4413      	add	r3, r2
 800140e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	701a      	strb	r2, [r3, #0]

	return Status;
 8001416:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	08014c30 	.word	0x08014c30

0800142c <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 800142c:	b5b0      	push	{r4, r5, r7, lr}
 800142e:	b08e      	sub	sp, #56	; 0x38
 8001430:	af04      	add	r7, sp, #16
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	460b      	mov	r3, r1
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800143a:	2300      	movs	r3, #0
 800143c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001450:	2320      	movs	r3, #32
 8001452:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 8001456:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800145a:	7afb      	ldrb	r3, [r7, #11]
 800145c:	4611      	mov	r1, r2
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ffb2 	bl	80013c8 <ComputeDevicePresetMode>
 8001464:	4603      	mov	r3, r0
 8001466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 800146a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800146e:	2b00      	cmp	r3, #0
 8001470:	d112      	bne.n	8001498 <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 8001472:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001476:	f107 001c 	add.w	r0, r7, #28
 800147a:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	f107 0318 	add.w	r3, r7, #24
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	4603      	mov	r3, r0
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f001 ff1a 	bl	80032c6 <VL53LX_get_preset_mode_timing_cfg>
 8001492:	4603      	mov	r3, r0
 8001494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 8001498:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800149c:	2b00      	cmp	r3, #0
 800149e:	d112      	bne.n	80014c6 <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 80014a0:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80014a4:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 80014a6:	69fd      	ldr	r5, [r7, #28]
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	9102      	str	r1, [sp, #8]
 80014b0:	9201      	str	r2, [sp, #4]
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	462b      	mov	r3, r5
 80014b6:	4622      	mov	r2, r4
 80014b8:	4601      	mov	r1, r0
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f001 ff64 	bl	8003388 <VL53LX_set_preset_mode>
 80014c0:	4603      	mov	r3, r0
 80014c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 80014c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d103      	bne.n	80014d6 <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014d4:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 80014d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bdb0      	pop	{r4, r5, r7, pc}

080014e2 <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b085      	sub	sp, #20
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3318      	adds	r3, #24
 80014f2:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	f893 3393 	ldrb.w	r3, [r3, #915]	; 0x393
 80014fa:	2baa      	cmp	r3, #170	; 0xaa
 80014fc:	d106      	bne.n	800150c <IsL4+0x2a>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	f893 3392 	ldrb.w	r3, [r3, #914]	; 0x392
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001504:	2beb      	cmp	r3, #235	; 0xeb
 8001506:	d101      	bne.n	800150c <IsL4+0x2a>
		devL4 = 1;
 8001508:	2301      	movs	r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
	return devL4;
 800150c:	68fb      	ldr	r3, [r7, #12]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <VL53LX_SetDistanceMode>:
}


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b088      	sub	sp, #32
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001526:	2300      	movs	r3, #0
 8001528:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d008      	beq.n	800154e <VL53LX_SetDistanceMode+0x34>
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d005      	beq.n	800154e <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	2b03      	cmp	r3, #3
 8001546:	d002      	beq.n	800154e <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 8001548:	f06f 0303 	mvn.w	r3, #3
 800154c:	e048      	b.n	80015e0 <VL53LX_SetDistanceMode+0xc6>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffc7 	bl	80014e2 <IsL4>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <VL53LX_SetDistanceMode+0x4c>
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d102      	bne.n	8001566 <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 8001560:	f06f 0303 	mvn.w	r3, #3
 8001564:	e03c      	b.n	80015e0 <VL53LX_SetDistanceMode+0xc6>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 800156c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10a      	bne.n	800158a <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	f107 0210 	add.w	r2, r7, #16
 800157c:	f107 010c 	add.w	r1, r7, #12
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f001 fddb 	bl	800313c <VL53LX_get_timeouts_us>
 8001586:	4603      	mov	r3, r0
 8001588:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 800158a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d107      	bne.n	80015a2 <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 8001592:	78fb      	ldrb	r3, [r7, #3]
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4619      	mov	r1, r3
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ff47 	bl	800142c <SetPresetModeL3CX>
 800159e:	4603      	mov	r3, r0
 80015a0:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 80015a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d105      	bne.n	80015b6 <VL53LX_SetDistanceMode+0x9c>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80015b0:	3320      	adds	r3, #32
 80015b2:	78fa      	ldrb	r2, [r7, #3]
 80015b4:	701a      	strb	r2, [r3, #0]
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 80015b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10e      	bne.n	80015dc <VL53LX_SetDistanceMode+0xc2>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80015be:	68f9      	ldr	r1, [r7, #12]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f001 fd80 	bl	80030ca <VL53LX_set_timeouts_us>
 80015ca:	4603      	mov	r3, r0
 80015cc:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 80015ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d102      	bne.n	80015dc <VL53LX_SetDistanceMode+0xc2>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80015dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001604:	4b31      	ldr	r3, [pc, #196]	; (80016cc <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 8001606:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	4a31      	ldr	r2, [pc, #196]	; (80016d0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d902      	bls.n	8001616 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001610:	23fc      	movs	r3, #252	; 0xfc
 8001612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53LX_ERROR_NONE)
 8001616:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10b      	bne.n	8001636 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	f107 0210 	add.w	r2, r7, #16
 8001626:	f107 010c 	add.w	r1, r7, #12
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f001 fd86 	bl	800313c <VL53LX_get_timeouts_us>
 8001630:	4603      	mov	r3, r0
 8001632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 8001636:	f240 63a4 	movw	r3, #1700	; 0x6a4
 800163a:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 800163c:	2306      	movs	r3, #6
 800163e:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff4e 	bl	80014e2 <IsL4>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 800164c:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 800164e:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	429a      	cmp	r2, r3
 8001656:	d803      	bhi.n	8001660 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001658:	23fc      	movs	r3, #252	; 0xfc
 800165a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800165e:	e003      	b.n	8001668 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8001666:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001668:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800166c:	2b00      	cmp	r3, #0
 800166e:	d11c      	bne.n	80016aa <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	6a3a      	ldr	r2, [r7, #32]
 8001674:	429a      	cmp	r2, r3
 8001676:	d203      	bcs.n	8001680 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 8001678:	23fc      	movs	r3, #252	; 0xfc
 800167a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800167e:	e00d      	b.n	800169c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	fbb2 f3f3 	udiv	r3, r2, r3
 8001688:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 800168a:	68f9      	ldr	r1, [r7, #12]
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f001 fd1a 	bl	80030ca <VL53LX_set_timeouts_us>
 8001696:	4603      	mov	r3, r0
 8001698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 800169c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 80016aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d105      	bne.n	80016be <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd6>
		VL53LXDevDataSet(Dev,
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80016b8:	3324      	adds	r3, #36	; 0x24
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	601a      	str	r2, [r3, #0]
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80016be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3728      	adds	r7, #40	; 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	00086470 	.word	0x00086470
 80016d0:	00989680 	.word	0x00989680
 80016d4:	00030d40 	.word	0x00030d40

080016d8 <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3318      	adds	r3, #24
 80016e8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f001 f8f8 	bl	80028e0 <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80016f0:	2300      	movs	r3, #0
 80016f2:	75bb      	strb	r3, [r7, #22]
 80016f4:	e01a      	b.n	800172c <VL53LX_StartMeasurement+0x54>
		pdev->PreviousRangeMilliMeter[i] = 0;
 80016f6:	7dbb      	ldrb	r3, [r7, #22]
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80016fe:	3308      	adds	r3, #8
 8001700:	2100      	movs	r1, #0
 8001702:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8001706:	7dbb      	ldrb	r3, [r7, #22]
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4413      	add	r3, r2
 800170c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001710:	3318      	adds	r3, #24
 8001712:	22ff      	movs	r2, #255	; 0xff
 8001714:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8001716:	7dbb      	ldrb	r3, [r7, #22]
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4413      	add	r3, r2
 800171c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001720:	331c      	adds	r3, #28
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001726:	7dbb      	ldrb	r3, [r7, #22]
 8001728:	3301      	adds	r3, #1
 800172a:	75bb      	strb	r3, [r7, #22]
 800172c:	7dbb      	ldrb	r3, [r7, #22]
 800172e:	2b03      	cmp	r3, #3
 8001730:	d9e1      	bls.n	80016f6 <VL53LX_StartMeasurement+0x1e>
	}
	pdev->PreviousStreamCount = 0;
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001738:	3321      	adds	r3, #33	; 0x21
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = 0;
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001744:	3320      	adds	r3, #32
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	7edb      	ldrb	r3, [r3, #27]
 800174e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 8001750:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d107      	bne.n	8001768 <VL53LX_StartMeasurement+0x90>
		Status = VL53LX_init_and_start_range(
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	2206      	movs	r2, #6
 800175c:	4619      	mov	r1, r3
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f001 fed6 	bl	8003510 <VL53LX_init_and_start_range>
 8001764:	4603      	mov	r3, r0
 8001766:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 8001768:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <VL53LX_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7edb      	ldrb	r3, [r3, #27]
 8001784:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 8001786:	7bbb      	ldrb	r3, [r7, #14]
 8001788:	4619      	mov	r1, r3
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f002 fdf6 	bl	800437c <VL53LX_clear_interrupt_and_enable_next_range>
 8001790:	4603      	mov	r3, r0
 8001792:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8001794:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 80017ae:	6839      	ldr	r1, [r7, #0]
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f00e fb60 	bl	800fe76 <VL53LX_is_new_data_ready>
 80017b6:	4603      	mov	r3, r0
 80017b8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <ConvertStatusHisto>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	3b05      	subs	r3, #5
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d840      	bhi.n	800185c <ConvertStatusHisto+0x94>
 80017da:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <ConvertStatusHisto+0x18>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	0800182d 	.word	0x0800182d
 80017e4:	08001833 	.word	0x08001833
 80017e8:	0800183f 	.word	0x0800183f
 80017ec:	0800185d 	.word	0x0800185d
 80017f0:	08001857 	.word	0x08001857
 80017f4:	0800185d 	.word	0x0800185d
 80017f8:	0800185d 	.word	0x0800185d
 80017fc:	0800185d 	.word	0x0800185d
 8001800:	0800185d 	.word	0x0800185d
 8001804:	0800185d 	.word	0x0800185d
 8001808:	0800185d 	.word	0x0800185d
 800180c:	0800185d 	.word	0x0800185d
 8001810:	0800185d 	.word	0x0800185d
 8001814:	0800185d 	.word	0x0800185d
 8001818:	08001839 	.word	0x08001839
 800181c:	0800184b 	.word	0x0800184b
 8001820:	0800185d 	.word	0x0800185d
 8001824:	08001851 	.word	0x08001851
 8001828:	08001845 	.word	0x08001845
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800182c:	2304      	movs	r3, #4
 800182e:	73fb      	strb	r3, [r7, #15]
		break;
 8001830:	e016      	b.n	8001860 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 8001832:	2301      	movs	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
		break;
 8001836:	e013      	b.n	8001860 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 8001838:	2306      	movs	r3, #6
 800183a:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 800183c:	e010      	b.n	8001860 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 800183e:	2307      	movs	r3, #7
 8001840:	73fb      	strb	r3, [r7, #15]
		break;
 8001842:	e00d      	b.n	8001860 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8001844:	230c      	movs	r3, #12
 8001846:	73fb      	strb	r3, [r7, #15]
		break;
 8001848:	e00a      	b.n	8001860 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 800184a:	2307      	movs	r3, #7
 800184c:	73fb      	strb	r3, [r7, #15]
		break;
 800184e:	e007      	b.n	8001860 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8001850:	230b      	movs	r3, #11
 8001852:	73fb      	strb	r3, [r7, #15]
		break;
 8001854:	e004      	b.n	8001860 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 8001856:	2300      	movs	r3, #0
 8001858:	73fb      	strb	r3, [r7, #15]
		break;
 800185a:	e001      	b.n	8001860 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 800185c:	23ff      	movs	r3, #255	; 0xff
 800185e:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8001860:	7bfb      	ldrb	r3, [r7, #15]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop

08001870 <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08e      	sub	sp, #56	; 0x38
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	4608      	mov	r0, r1
 800187a:	4611      	mov	r1, r2
 800187c:	461a      	mov	r2, r3
 800187e:	4603      	mov	r3, r0
 8001880:	70fb      	strb	r3, [r7, #3]
 8001882:	460b      	mov	r3, r1
 8001884:	70bb      	strb	r3, [r7, #2]
 8001886:	4613      	mov	r3, r2
 8001888:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	VL53LX_LLDriverData_t *pdev =
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3318      	adds	r3, #24
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 8001896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001898:	33f8      	adds	r3, #248	; 0xf8
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 80018a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018a2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80018ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018b0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80018b2:	025b      	lsls	r3, r3, #9
 80018b4:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 80018b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018b8:	6a3a      	ldr	r2, [r7, #32]
 80018ba:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80018bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018be:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80018c0:	025b      	lsls	r3, r3, #9
 80018c2:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 80018c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80018ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80018ce:	025b      	lsls	r3, r3, #9
 80018d0:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 80018d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80018d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018da:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80018de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018e0:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 80018e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e4:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80018e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018ea:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 80018ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ee:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 80018f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018f4:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 80018f6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80018fa:	2b11      	cmp	r3, #17
 80018fc:	d009      	beq.n	8001912 <SetTargetData+0xa2>
 80018fe:	2b11      	cmp	r3, #17
 8001900:	dc0f      	bgt.n	8001922 <SetTargetData+0xb2>
 8001902:	2b03      	cmp	r3, #3
 8001904:	dc02      	bgt.n	800190c <SetTargetData+0x9c>
 8001906:	2b00      	cmp	r3, #0
 8001908:	dc03      	bgt.n	8001912 <SetTargetData+0xa2>
 800190a:	e00a      	b.n	8001922 <SetTargetData+0xb2>
 800190c:	2b0d      	cmp	r3, #13
 800190e:	d004      	beq.n	800191a <SetTargetData+0xaa>
 8001910:	e007      	b.n	8001922 <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 8001912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001914:	2205      	movs	r2, #5
 8001916:	749a      	strb	r2, [r3, #18]
		break;
 8001918:	e006      	b.n	8001928 <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 800191a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800191c:	220d      	movs	r2, #13
 800191e:	749a      	strb	r2, [r3, #18]
		break;
 8001920:	e002      	b.n	8001928 <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 8001922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001924:	2200      	movs	r2, #0
 8001926:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8001928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800192a:	7c9b      	ldrb	r3, [r3, #18]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d117      	bne.n	8001960 <SetTargetData+0xf0>
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d114      	bne.n	8001960 <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 8001936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001938:	22ff      	movs	r2, #255	; 0xff
 800193a:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 800193c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800193e:	2200      	movs	r2, #0
 8001940:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 8001942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 8001948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800194a:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800194e:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 8001950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001952:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001956:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 8001958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800195a:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800195e:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 8001960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001962:	7c9b      	ldrb	r3, [r3, #18]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d108      	bne.n	800197a <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 8001968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff2b 	bl	80017c8 <ConvertStatusHisto>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 8001976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001978:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	461a      	mov	r2, r3
 8001980:	f248 0191 	movw	r1, #32913	; 0x8091
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f003 f951 	bl	8004c2c <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 800198a:	78bb      	ldrb	r3, [r7, #2]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8001998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800199a:	8a1b      	ldrh	r3, [r3, #16]
 800199c:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	86bb      	strh	r3, [r7, #52]	; 0x34

	pRangeData->ExtendedRange = 0;
 80019a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019a4:	2200      	movs	r2, #0
 80019a6:	74da      	strb	r2, [r3, #19]

	if ((active_results != 1) ||
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d106      	bne.n	80019bc <SetTargetData+0x14c>
		(pdev->PreviousRangeActiveResults != 1))
 80019ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80019b4:	3320      	adds	r3, #32
 80019b6:	781b      	ldrb	r3, [r3, #0]
	if ((active_results != 1) ||
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d001      	beq.n	80019c0 <SetTargetData+0x150>
		ExtendedRangeEnabled = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 81dc 	beq.w	8001d80 <SetTargetData+0x510>
		(pRangeData->RangeStatus ==
 80019c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019ca:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 80019cc:	2b07      	cmp	r3, #7
 80019ce:	d004      	beq.n	80019da <SetTargetData+0x16a>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 80019d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019d2:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	f040 81d3 	bne.w	8001d80 <SetTargetData+0x510>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 80019da:	787b      	ldrb	r3, [r7, #1]
 80019dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019de:	4413      	add	r3, r2
 80019e0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80019e4:	3318      	adds	r3, #24
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b07      	cmp	r3, #7
 80019ea:	d01c      	beq.n	8001a26 <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 80019ec:	787b      	ldrb	r3, [r7, #1]
 80019ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f0:	4413      	add	r3, r2
 80019f2:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80019f6:	3318      	adds	r3, #24
 80019f8:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d013      	beq.n	8001a26 <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 80019fe:	787b      	ldrb	r3, [r7, #1]
 8001a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001a08:	3318      	adds	r3, #24
 8001a0a:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f040 81b7 	bne.w	8001d80 <SetTargetData+0x510>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 8001a12:	787b      	ldrb	r3, [r7, #1]
 8001a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a16:	4413      	add	r3, r2
 8001a18:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001a1c:	331c      	adds	r3, #28
 8001a1e:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	f040 81ad 	bne.w	8001d80 <SetTargetData+0x510>
	{
		if (((pdev->PreviousStreamCount) ==
 8001a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a28:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001a2c:	3321      	adds	r3, #33	; 0x21
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 8001a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a34:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8001a38:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d00c      	beq.n	8001a58 <SetTargetData+0x1e8>
		|| ((pdev->PreviousStreamCount) ==
 8001a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a40:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001a44:	3321      	adds	r3, #33	; 0x21
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8001a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4c:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8001a50:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8001a52:	429a      	cmp	r2, r3
 8001a54:	f040 816b 	bne.w	8001d2e <SetTargetData+0x4be>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8001a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a5a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a5e:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8001a60:	787b      	ldrb	r3, [r7, #1]
 8001a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a64:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001a68:	3308      	adds	r3, #8
 8001a6a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001a6e:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 8001a76:	2301      	movs	r3, #1
 8001a78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		switch (pdev->preset_mode) {
 8001a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	2b21      	cmp	r3, #33	; 0x21
 8001a82:	d008      	beq.n	8001a96 <SetTargetData+0x226>
 8001a84:	2b21      	cmp	r3, #33	; 0x21
 8001a86:	f300 814e 	bgt.w	8001d26 <SetTargetData+0x4b6>
 8001a8a:	2b1b      	cmp	r3, #27
 8001a8c:	f000 80d7 	beq.w	8001c3e <SetTargetData+0x3ce>
 8001a90:	2b1e      	cmp	r3, #30
 8001a92:	d004      	beq.n	8001a9e <SetTargetData+0x22e>
 8001a94:	e147      	b.n	8001d26 <SetTargetData+0x4b6>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8001a9c:	e148      	b.n	8001d30 <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8001a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa0:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8001aa4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dd0e      	ble.n	8001aca <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8001aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aae:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8001ab2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	da07      	bge.n	8001aca <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d104      	bne.n	8001aca <SetTargetData+0x25a>
					sequency == 1) {
					AddOffset =
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001ac6:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001ac8:	e0b8      	b.n	8001c3c <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8001aca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad0:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8001ad4:	425b      	negs	r3, r3
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	da0f      	bge.n	8001afa <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8001ada:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae0:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 8001ae4:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	dd07      	ble.n	8001afa <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8001aea:	7dfb      	ldrb	r3, [r7, #23]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d104      	bne.n	8001afa <SetTargetData+0x28a>
					sequency == 0) {
					AddOffset =
 8001af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af2:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8001af6:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001af8:	e0a0      	b.n	8001c3c <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8001afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afc:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8001b00:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dd0e      	ble.n	8001b26 <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8001b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0a:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8001b0e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	da07      	bge.n	8001b26 <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d104      	bne.n	8001b26 <SetTargetData+0x2b6>
					sequency == 0) {
					AddOffset =
 8001b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8001b22:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001b24:	e08a      	b.n	8001c3c <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8001b26:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2c:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8001b30:	425b      	negs	r3, r3
 8001b32:	429a      	cmp	r2, r3
 8001b34:	da0f      	bge.n	8001b56 <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8001b36:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3c:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8001b40:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8001b42:	429a      	cmp	r2, r3
 8001b44:	dd07      	ble.n	8001b56 <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d104      	bne.n	8001b56 <SetTargetData+0x2e6>
					sequency == 1) {
					AddOffset =
 8001b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8001b52:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001b54:	e072      	b.n	8001c3c <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8001b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b58:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8001b5c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dd0e      	ble.n	8001b82 <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8001b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b66:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8001b6a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	da07      	bge.n	8001b82 <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d104      	bne.n	8001b82 <SetTargetData+0x312>
					sequency == 1) {
					AddOffset =
 8001b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8001b7e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001b80:	e05c      	b.n	8001c3c <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8001b82:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b88:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	da0f      	bge.n	8001bb2 <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8001b92:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b98:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8001b9c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dd07      	ble.n	8001bb2 <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d104      	bne.n	8001bb2 <SetTargetData+0x342>
					sequency == 0) {
					AddOffset =
 8001ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001baa:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001bae:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001bb0:	e044      	b.n	8001c3c <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8001bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb4:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8001bb8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dd0e      	ble.n	8001bde <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8001bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc2:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8001bc6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	da07      	bge.n	8001bde <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d104      	bne.n	8001bde <SetTargetData+0x36e>
					sequency == 0) {
					AddOffset =
 8001bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd6:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8001bda:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001bdc:	e02e      	b.n	8001c3c <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8001bde:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be4:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8001be8:	425b      	negs	r3, r3
 8001bea:	429a      	cmp	r2, r3
 8001bec:	da0f      	bge.n	8001c0e <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8001bee:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf4:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8001bf8:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	dd07      	ble.n	8001c0e <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d104      	bne.n	8001c0e <SetTargetData+0x39e>
					sequency == 1) {
					AddOffset =
 8001c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c06:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8001c0a:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001c0c:	e016      	b.n	8001c3c <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8001c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c10:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8001c14:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	da0b      	bge.n	8001c34 <SetTargetData+0x3c4>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8001c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1e:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8001c22:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	dd04      	ble.n	8001c34 <SetTargetData+0x3c4>
					AddOffset =
 8001c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2c:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8001c30:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001c32:	e003      	b.n	8001c3c <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8001c3a:	e079      	b.n	8001d30 <SetTargetData+0x4c0>
 8001c3c:	e078      	b.n	8001d30 <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8001c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c40:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8001c44:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	dd0e      	ble.n	8001c6a <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8001c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4e:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8001c52:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	da07      	bge.n	8001c6a <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d104      	bne.n	8001c6a <SetTargetData+0x3fa>
					sequency == 0) {
					AddOffset =
 8001c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c62:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8001c66:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001c68:	e05c      	b.n	8001d24 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8001c6a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c70:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8001c74:	425b      	negs	r3, r3
 8001c76:	429a      	cmp	r2, r3
 8001c78:	da0f      	bge.n	8001c9a <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8001c7a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8001c84:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dd07      	ble.n	8001c9a <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d104      	bne.n	8001c9a <SetTargetData+0x42a>
					sequency == 1) {
					AddOffset =
 8001c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c92:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8001c96:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001c98:	e044      	b.n	8001d24 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8001c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9c:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8001ca0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	dd0e      	ble.n	8001cc6 <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8001ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001caa:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8001cae:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	da07      	bge.n	8001cc6 <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8001cb6:	7dfb      	ldrb	r3, [r7, #23]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d104      	bne.n	8001cc6 <SetTargetData+0x456>
					sequency == 1) {
					AddOffset =
 8001cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cbe:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8001cc2:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001cc4:	e02e      	b.n	8001d24 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8001cc6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ccc:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8001cd0:	425b      	negs	r3, r3
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	da0f      	bge.n	8001cf6 <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8001cd6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cdc:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 8001ce0:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	dd07      	ble.n	8001cf6 <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8001ce6:	7dfb      	ldrb	r3, [r7, #23]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d104      	bne.n	8001cf6 <SetTargetData+0x486>
					sequency == 0) {
					AddOffset =
 8001cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cee:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 8001cf2:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001cf4:	e016      	b.n	8001d24 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8001cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf8:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8001cfc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	da0b      	bge.n	8001d1c <SetTargetData+0x4ac>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8001d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d06:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8001d0a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	dd04      	ble.n	8001d1c <SetTargetData+0x4ac>
					AddOffset =
 8001d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d14:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8001d18:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001d1a:	e003      	b.n	8001d24 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8001d22:	e005      	b.n	8001d30 <SetTargetData+0x4c0>
 8001d24:	e004      	b.n	8001d30 <SetTargetData+0x4c0>

			default:
				uwr_status = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8001d2c:	e000      	b.n	8001d30 <SetTargetData+0x4c0>
			}
		}
 8001d2e:	bf00      	nop

		if (uwr_status) {
 8001d30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d023      	beq.n	8001d80 <SetTargetData+0x510>
			pRangeData->RangeMilliMeter += AddOffset;
 8001d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d3a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001d42:	4413      	add	r3, r2
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	b21a      	sxth	r2, r3
 8001d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d4a:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8001d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001d56:	4413      	add	r3, r2
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d5e:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8001d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001d6a:	4413      	add	r3, r2
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	b21a      	sxth	r2, r3
 8001d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d72:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 8001d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d76:	2201      	movs	r2, #1
 8001d78:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 8001d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8001d80:	787b      	ldrb	r3, [r7, #1]
 8001d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d84:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001d88:	3308      	adds	r3, #8
 8001d8a:	8ab9      	ldrh	r1, [r7, #20]
 8001d8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8001d90:	787b      	ldrb	r3, [r7, #1]
 8001d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d94:	7c91      	ldrb	r1, [r2, #18]
 8001d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001d9e:	3318      	adds	r3, #24
 8001da0:	460a      	mov	r2, r1
 8001da2:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001da8:	7cd1      	ldrb	r1, [r2, #19]
 8001daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001db2:	331c      	adds	r3, #28
 8001db4:	460a      	mov	r2, r1
 8001db6:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8001db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dba:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001dbe:	3320      	adds	r3, #32
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	701a      	strb	r2, [r3, #0]

	Range = pRangeData->RangeMilliMeter;
 8001dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dc6:	8a1b      	ldrh	r3, [r3, #16]
 8001dc8:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8001dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dcc:	7c9b      	ldrb	r3, [r3, #18]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d110      	bne.n	8001df4 <SetTargetData+0x584>
 8001dd2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	da0c      	bge.n	8001df4 <SetTargetData+0x584>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 8001dda:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <SetTargetData+0x590>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	da03      	bge.n	8001dee <SetTargetData+0x57e>
			pRangeData->RangeStatus =
 8001de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001de8:	220e      	movs	r2, #14
 8001dea:	749a      	strb	r2, [r3, #18]
 8001dec:	e002      	b.n	8001df4 <SetTargetData+0x584>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8001dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001df0:	2200      	movs	r2, #0
 8001df2:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 8001df4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3738      	adds	r7, #56	; 0x38
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000004 	.word	0x20000004

08001e04 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b08f      	sub	sp, #60	; 0x3c
 8001e08:	af04      	add	r7, sp, #16
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	3318      	adds	r3, #24
 8001e14:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	7c9a      	ldrb	r2, [r3, #18]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


	pMultiRangingData->TimeStamp = 0;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	78da      	ldrb	r2, [r3, #3]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	7c9b      	ldrb	r3, [r3, #18]
 8001e42:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 8001e44:	7ffb      	ldrb	r3, [r7, #31]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d103      	bne.n	8001e52 <SetMeasurementData+0x4e>

		iteration = 1;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001e50:	e002      	b.n	8001e58 <SetMeasurementData+0x54>
	else
		iteration = ActiveResults;
 8001e52:	7ffb      	ldrb	r3, [r7, #31]
 8001e54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (i = 0; i < iteration; i++) {
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e5e:	e035      	b.n	8001ecc <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 8001e60:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	3308      	adds	r3, #8
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 8001e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e78:	224c      	movs	r2, #76	; 0x4c
 8001e7a:	fb02 f303 	mul.w	r3, r2, r3
 8001e7e:	3310      	adds	r3, #16
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	4413      	add	r3, r2
 8001e84:	3304      	adds	r3, #4
 8001e86:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 8001e88:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d113      	bne.n	8001eb8 <SetMeasurementData+0xb4>
			Status = SetTargetData(Dev, ActiveResults,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7918      	ldrb	r0, [r3, #4]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	7c1b      	ldrb	r3, [r3, #16]
 8001e98:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8001e9c:	7ff9      	ldrb	r1, [r7, #31]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	9202      	str	r2, [sp, #8]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	9201      	str	r2, [sp, #4]
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	4623      	mov	r3, r4
 8001eaa:	4602      	mov	r2, r0
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f7ff fcdf 	bl	8001870 <SetTargetData>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	for (i = 0; i < iteration; i++) {
 8001ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ecc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001ed0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d3c3      	bcc.n	8001e60 <SetMeasurementData+0x5c>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	f893 243f 	ldrb.w	r2, [r3, #1087]	; 0x43f
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001ee4:	3321      	adds	r3, #33	; 0x21
 8001ee6:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001ee8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ef0:	e01f      	b.n	8001f32 <SetMeasurementData+0x12e>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8001ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ef6:	6a3a      	ldr	r2, [r7, #32]
 8001ef8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001efc:	3308      	adds	r3, #8
 8001efe:	2100      	movs	r1, #0
 8001f00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8001f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f08:	6a3a      	ldr	r2, [r7, #32]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001f10:	3318      	adds	r3, #24
 8001f12:	22ff      	movs	r2, #255	; 0xff
 8001f14:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8001f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f1a:	6a3a      	ldr	r2, [r7, #32]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001f22:	331c      	adds	r3, #28
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d9db      	bls.n	8001ef2 <SetMeasurementData+0xee>
	}

	return Status;
 8001f3a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	372c      	adds	r7, #44	; 0x2c
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd90      	pop	{r4, r7, pc}

08001f46 <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3318      	adds	r3, #24
 8001f58:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001f60:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8001f62:	225c      	movs	r2, #92	; 0x5c
 8001f64:	21ff      	movs	r1, #255	; 0xff
 8001f66:	6838      	ldr	r0, [r7, #0]
 8001f68:	f011 fedc 	bl	8013d24 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	2102      	movs	r1, #2
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f001 fe01 	bl	8003b78 <VL53LX_get_device_results>
 8001f76:	4603      	mov	r3, r0
 8001f78:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	68f9      	ldr	r1, [r7, #12]
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ff40 	bl	8001e04 <SetMeasurementData>
 8001f84:	4603      	mov	r3, r0
 8001f86:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 8001f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <VL53LX_PerformRefSpadManagement>:
	return Status;
}


VL53LX_Error VL53LX_PerformRefSpadManagement(VL53LX_DEV Dev)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b090      	sub	sp, #64	; 0x40
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8001fa2:	f240 3305 	movw	r3, #773	; 0x305
 8001fa6:	81bb      	strh	r3, [r7, #12]
	VL53LX_customer_nvm_managed_t *pc;
	VL53LX_DistanceModes DistanceMode;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3318      	adds	r3, #24
 8001fac:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 8001fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb0:	3348      	adds	r3, #72	; 0x48
 8001fb2:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53LX_ERROR_NONE) {
 8001fb4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d11c      	bne.n	8001ff6 <VL53LX_PerformRefSpadManagement+0x62>
		DistanceMode = VL53LXDevDataGet(Dev,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8001fc2:	3320      	adds	r3, #32
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.DistanceMode);
		Status = VL53LX_run_ref_spad_char(Dev, &RawStatus);
 8001fca:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f8e3 	bl	800219c <VL53LX_run_ref_spad_char>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53LX_ERROR_NONE)
 8001fdc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d108      	bne.n	8001ff6 <VL53LX_PerformRefSpadManagement+0x62>
			Status = VL53LX_SetDistanceMode(Dev, DistanceMode);
 8001fe4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fe8:	4619      	mov	r1, r3
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fa95 	bl	800151a <VL53LX_SetDistanceMode>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8001ff6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001ffa:	f113 0f1d 	cmn.w	r3, #29
 8001ffe:	d14e      	bne.n	800209e <VL53LX_PerformRefSpadManagement+0x10a>

		Status = VL53LX_read_nvm_raw_data(Dev,
 8002000:	f107 0310 	add.w	r3, r7, #16
 8002004:	2206      	movs	r2, #6
 8002006:	2128      	movs	r1, #40	; 0x28
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f00c f82b 	bl	800e064 <VL53LX_read_nvm_raw_data>
 800200e:	4603      	mov	r3, r0
 8002010:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53LX_ERROR_NONE)
 8002014:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002018:	2b00      	cmp	r3, #0
 800201a:	d109      	bne.n	8002030 <VL53LX_PerformRefSpadManagement+0x9c>
			Status = VL53LX_WriteMulti(Dev,
 800201c:	f107 020c 	add.w	r2, r7, #12
 8002020:	2302      	movs	r3, #2
 8002022:	2114      	movs	r1, #20
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f00c f90b 	bl	800e240 <VL53LX_WriteMulti>
 800202a:	4603      	mov	r3, r0
 800202c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53LX_ERROR_NONE) {
 8002030:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <VL53LX_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8002038:	7b3a      	ldrb	r2, [r7, #12]
 800203a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203c:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 800203e:	7b7a      	ldrb	r2, [r7, #13]
 8002040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002042:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8002044:	f107 0310 	add.w	r3, r7, #16
 8002048:	3310      	adds	r3, #16
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c



		if (Status == VL53LX_ERROR_NONE)
 800204c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002050:	2b00      	cmp	r3, #0
 8002052:	d108      	bne.n	8002066 <VL53LX_PerformRefSpadManagement+0xd2>
			Status = VL53LX_WriteMulti(Dev,
 8002054:	2306      	movs	r3, #6
 8002056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002058:	210d      	movs	r1, #13
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f00c f8f0 	bl	800e240 <VL53LX_WriteMulti>
 8002060:	4603      	mov	r3, r0
 8002062:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53LX_ERROR_NONE) {
 8002066:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800206a:	2b00      	cmp	r3, #0
 800206c:	d117      	bne.n	800209e <VL53LX_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 800206e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002074:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8002076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002078:	785a      	ldrb	r2, [r3, #1]
 800207a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207c:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002080:	789a      	ldrb	r2, [r3, #2]
 8002082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002084:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8002086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002088:	78da      	ldrb	r2, [r3, #3]
 800208a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800208c:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 800208e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002090:	791a      	ldrb	r2, [r3, #4]
 8002092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002094:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8002096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002098:	795a      	ldrb	r2, [r3, #5]
 800209a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209c:	715a      	strb	r2, [r3, #5]
		}

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800209e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3740      	adds	r7, #64	; 0x40
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <VL53LX_SmudgeCorrectionEnable>:


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 80020bc:	2300      	movs	r3, #0
 80020be:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d84a      	bhi.n	8002164 <VL53LX_SmudgeCorrectionEnable+0xb8>
 80020ce:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <VL53LX_SmudgeCorrectionEnable+0x28>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	080020e5 	.word	0x080020e5
 80020d8:	08002105 	.word	0x08002105
 80020dc:	08002125 	.word	0x08002125
 80020e0:	08002145 	.word	0x08002145
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f003 fcac 	bl	8005a42 <VL53LX_dynamic_xtalk_correction_disable>
 80020ea:	4603      	mov	r3, r0
 80020ec:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f003 fcbe 	bl	8005a70 <VL53LX_dynamic_xtalk_correction_apply_disable>
 80020f4:	4603      	mov	r3, r0
 80020f6:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f003 fce7 	bl	8005acc <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 80020fe:	4603      	mov	r3, r0
 8002100:	733b      	strb	r3, [r7, #12]
		break;
 8002102:	e032      	b.n	800216a <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f003 fc85 	bl	8005a14 <VL53LX_dynamic_xtalk_correction_enable>
 800210a:	4603      	mov	r3, r0
 800210c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f003 fcf3 	bl	8005afa <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002114:	4603      	mov	r3, r0
 8002116:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f003 fcd7 	bl	8005acc <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 800211e:	4603      	mov	r3, r0
 8002120:	733b      	strb	r3, [r7, #12]
		break;
 8002122:	e022      	b.n	800216a <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f003 fc75 	bl	8005a14 <VL53LX_dynamic_xtalk_correction_enable>
 800212a:	4603      	mov	r3, r0
 800212c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f003 fce3 	bl	8005afa <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002134:	4603      	mov	r3, r0
 8002136:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f003 fcb0 	bl	8005a9e <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 800213e:	4603      	mov	r3, r0
 8002140:	733b      	strb	r3, [r7, #12]
		break;
 8002142:	e012      	b.n	800216a <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f003 fc65 	bl	8005a14 <VL53LX_dynamic_xtalk_correction_enable>
 800214a:	4603      	mov	r3, r0
 800214c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f003 fc8e 	bl	8005a70 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8002154:	4603      	mov	r3, r0
 8002156:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f003 fcb7 	bl	8005acc <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 800215e:	4603      	mov	r3, r0
 8002160:	733b      	strb	r3, [r7, #12]
		break;
 8002162:	e002      	b.n	800216a <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002164:	23fc      	movs	r3, #252	; 0xfc
 8002166:	73fb      	strb	r3, [r7, #15]
		break;
 8002168:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 800216a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10d      	bne.n	800218e <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8002172:	7bbb      	ldrb	r3, [r7, #14]
 8002174:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 800217e:	7b7b      	ldrb	r3, [r7, #13]
 8002180:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 800218a:	7b3b      	ldrb	r3, [r7, #12]
 800218c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800218e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop

0800219c <VL53LX_run_ref_spad_char>:


VL53LX_Error VL53LX_run_ref_spad_char(
	VL53LX_DEV        Dev,
	VL53LX_Error     *pcal_status)
{
 800219c:	b5b0      	push	{r4, r5, r7, lr}
 800219e:	b08c      	sub	sp, #48	; 0x30
 80021a0:	af04      	add	r7, sp, #16
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3318      	adds	r3, #24
 80021ae:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53LX_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021b6:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 80021b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d104      	bne.n	80021ca <VL53LX_run_ref_spad_char+0x2e>
		status = VL53LX_enable_powerforce(Dev);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f005 fc47 	bl	8007a54 <VL53LX_enable_powerforce>
 80021c6:	4603      	mov	r3, r0
 80021c8:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 80021ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d117      	bne.n	8002202 <VL53LX_run_ref_spad_char+0x66>
		status =
		VL53LX_set_ref_spad_char_config(
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	7858      	ldrb	r0, [r3, #1]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	685c      	ldr	r4, [r3, #4]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	891d      	ldrh	r5, [r3, #8]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	899b      	ldrh	r3, [r3, #12]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	8952      	ldrh	r2, [r2, #10]
 80021e6:	69b9      	ldr	r1, [r7, #24]
 80021e8:	f8b1 12de 	ldrh.w	r1, [r1, #734]	; 0x2de
 80021ec:	9102      	str	r1, [sp, #8]
 80021ee:	9201      	str	r2, [sp, #4]
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	462b      	mov	r3, r5
 80021f4:	4622      	mov	r2, r4
 80021f6:	4601      	mov	r1, r0
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f007 fa55 	bl	80096a8 <VL53LX_set_ref_spad_char_config>
 80021fe:	4603      	mov	r3, r0
 8002200:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53LX_ERROR_NONE)
 8002202:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d107      	bne.n	800221a <VL53LX_run_ref_spad_char+0x7e>
		status = VL53LX_run_device_test(
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	4619      	mov	r1, r3
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f890 	bl	8002336 <VL53LX_run_device_test>
 8002216:	4603      	mov	r3, r0
 8002218:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53LX_ERROR_NONE)
 800221a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d108      	bne.n	8002234 <VL53LX_run_ref_spad_char+0x98>
		status =
		VL53LX_ReadMulti(
 8002222:	f107 020c 	add.w	r2, r7, #12
 8002226:	2302      	movs	r3, #2
 8002228:	21d9      	movs	r1, #217	; 0xd9
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f00c f83e 	bl	800e2ac <VL53LX_ReadMulti>
 8002230:	4603      	mov	r3, r0
 8002232:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53LX_ERROR_NONE) {
 8002234:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10a      	bne.n	8002252 <VL53LX_run_ref_spad_char+0xb6>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 800223c:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8002244:	331f      	adds	r3, #31
 8002246:	701a      	strb	r2, [r3, #0]
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8002248:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8002250:	701a      	strb	r2, [r3, #0]
	}



	if (status == VL53LX_ERROR_NONE)
 8002252:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d108      	bne.n	800226c <VL53LX_run_ref_spad_char+0xd0>
		status =
			VL53LX_WriteMulti(
 800225a:	f107 020c 	add.w	r2, r7, #12
 800225e:	2302      	movs	r3, #2
 8002260:	2114      	movs	r1, #20
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f00b ffec 	bl	800e240 <VL53LX_WriteMulti>
 8002268:	4603      	mov	r3, r0
 800226a:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 800226c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d107      	bne.n	8002284 <VL53LX_run_ref_spad_char+0xe8>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8002274:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 800227c:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53LX_ERROR_NONE)
 8002284:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d108      	bne.n	800229e <VL53LX_run_ref_spad_char+0x102>
		status =
			VL53LX_ReadMulti(
 800228c:	f107 020c 	add.w	r2, r7, #12
 8002290:	2306      	movs	r3, #6
 8002292:	21ac      	movs	r1, #172	; 0xac
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f00c f809 	bl	800e2ac <VL53LX_ReadMulti>
 800229a:	4603      	mov	r3, r0
 800229c:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53LX_ERROR_NONE)
 800229e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d108      	bne.n	80022b8 <VL53LX_run_ref_spad_char+0x11c>
		status =
			VL53LX_WriteMulti(
 80022a6:	f107 020c 	add.w	r2, r7, #12
 80022aa:	2306      	movs	r3, #6
 80022ac:	210d      	movs	r1, #13
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f00b ffc6 	bl	800e240 <VL53LX_WriteMulti>
 80022b4:	4603      	mov	r3, r0
 80022b6:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53LX_ERROR_NONE) {
 80022b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d117      	bne.n	80022f0 <VL53LX_run_ref_spad_char+0x154>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 80022c0:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 80022c8:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 80022d0:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 80022d8:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 80022e0:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 80022e8:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53LX_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53LX_ERROR_NONE) {
 80022f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d114      	bne.n	8002322 <VL53LX_run_ref_spad_char+0x186>

		switch (pdev->sys_results.result__range_status) {
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 80022fe:	2b10      	cmp	r3, #16
 8002300:	d00c      	beq.n	800231c <VL53LX_run_ref_spad_char+0x180>
 8002302:	2b10      	cmp	r3, #16
 8002304:	dc0e      	bgt.n	8002324 <VL53LX_run_ref_spad_char+0x188>
 8002306:	2b0e      	cmp	r3, #14
 8002308:	d002      	beq.n	8002310 <VL53LX_run_ref_spad_char+0x174>
 800230a:	2b0f      	cmp	r3, #15
 800230c:	d003      	beq.n	8002316 <VL53LX_run_ref_spad_char+0x17a>
 800230e:	e009      	b.n	8002324 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53LX_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8002310:	23e4      	movs	r3, #228	; 0xe4
 8002312:	77fb      	strb	r3, [r7, #31]
			break;
 8002314:	e006      	b.n	8002324 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8002316:	23e3      	movs	r3, #227	; 0xe3
 8002318:	77fb      	strb	r3, [r7, #31]
			break;
 800231a:	e003      	b.n	8002324 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 800231c:	23e2      	movs	r3, #226	; 0xe2
 800231e:	77fb      	strb	r3, [r7, #31]
			break;
 8002320:	e000      	b.n	8002324 <VL53LX_run_ref_spad_char+0x188>
		}
	}
 8002322:	bf00      	nop



	*pcal_status = status;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	7ffa      	ldrb	r2, [r7, #31]
 8002328:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 800232a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bdb0      	pop	{r4, r5, r7, pc}

08002336 <VL53LX_run_device_test>:


VL53LX_Error VL53LX_run_device_test(
	VL53LX_DEV             Dev,
	VL53LX_DeviceTestMode  device_test_mode)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002342:	2300      	movs	r3, #0
 8002344:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3318      	adds	r3, #24
 800234a:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002350:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d108      	bne.n	800236a <VL53LX_run_device_test+0x34>
		status =
			VL53LX_RdByte(
 8002358:	f107 030b 	add.w	r3, r7, #11
 800235c:	461a      	mov	r2, r3
 800235e:	2130      	movs	r1, #48	; 0x30
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f00c f835 	bl	800e3d0 <VL53LX_RdByte>
 8002366:	4603      	mov	r3, r0
 8002368:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53LX_ERROR_NONE)
 800236a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d103      	bne.n	800237a <VL53LX_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8002372:	7afa      	ldrb	r2, [r7, #11]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a


	if (status == VL53LX_ERROR_NONE)
 800237a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <VL53LX_run_device_test+0x5a>
		status = VL53LX_start_test(
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	4619      	mov	r1, r3
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f005 fae8 	bl	800795c <VL53LX_start_test>
 800238c:	4603      	mov	r3, r0
 800238e:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53LX_ERROR_NONE)
 8002390:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d104      	bne.n	80023a2 <VL53LX_run_device_test+0x6c>
		status = VL53LX_wait_for_test_completion(Dev);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f00d fd33 	bl	800fe04 <VL53LX_wait_for_test_completion>
 800239e:	4603      	mov	r3, r0
 80023a0:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 80023a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d108      	bne.n	80023bc <VL53LX_run_device_test+0x86>
		status =
			VL53LX_ReadMulti(
 80023aa:	f107 020c 	add.w	r2, r7, #12
 80023ae:	2302      	movs	r3, #2
 80023b0:	2189      	movs	r1, #137	; 0x89
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f00b ff7a 	bl	800e2ac <VL53LX_ReadMulti>
 80023b8:	4603      	mov	r3, r0
 80023ba:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 80023bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <VL53LX_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 80023c4:	7b3a      	ldrb	r2, [r7, #12]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		pdev->sys_results.result__report_status = comms_buffer[1];
 80023cc:	7b7a      	ldrb	r2, [r7, #13]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
	}



	pdev->sys_results.result__range_status &=
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53LX_ERROR_NONE) {
 80023e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d108      	bne.n	8002400 <VL53LX_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53LX_ERROR_NONE)
 80023ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d104      	bne.n	8002400 <VL53LX_run_device_test+0xca>
			status = VL53LX_clear_interrupt(Dev);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f005 fb50 	bl	8007a9c <VL53LX_clear_interrupt>
 80023fc:	4603      	mov	r3, r0
 80023fe:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53LX_ERROR_NONE)
 8002400:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <VL53LX_run_device_test+0xde>
		status =
			VL53LX_start_test(
 8002408:	2100      	movs	r1, #0
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f005 faa6 	bl	800795c <VL53LX_start_test>
 8002410:	4603      	mov	r3, r0
 8002412:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8002414:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 800242a:	2300      	movs	r3, #0
 800242c:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	785b      	ldrb	r3, [r3, #1]
 8002432:	2b21      	cmp	r3, #33	; 0x21
 8002434:	d006      	beq.n	8002444 <select_offset_per_vcsel+0x24>
 8002436:	2b21      	cmp	r3, #33	; 0x21
 8002438:	dc2a      	bgt.n	8002490 <select_offset_per_vcsel+0x70>
 800243a:	2b1b      	cmp	r3, #27
 800243c:	d01b      	beq.n	8002476 <select_offset_per_vcsel+0x56>
 800243e:	2b1e      	cmp	r3, #30
 8002440:	d00c      	beq.n	800245c <select_offset_per_vcsel+0x3c>
 8002442:	e025      	b.n	8002490 <select_offset_per_vcsel+0x70>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002454:	3302      	adds	r3, #2
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	817b      	strh	r3, [r7, #10]
		break;
 800245a:	e02b      	b.n	80024b4 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002462:	3304      	adds	r3, #4
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800246e:	3306      	adds	r3, #6
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	817b      	strh	r3, [r7, #10]
		break;
 8002474:	e01e      	b.n	80024b4 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800247c:	3308      	adds	r3, #8
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002488:	330a      	adds	r3, #10
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	817b      	strh	r3, [r7, #10]
		break;
 800248e:	e011      	b.n	80024b4 <select_offset_per_vcsel+0x94>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002496:	3308      	adds	r3, #8
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80024a2:	330a      	adds	r3, #10
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 80024a8:	23fc      	movs	r3, #252	; 0xfc
 80024aa:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2200      	movs	r2, #0
 80024b0:	801a      	strh	r2, [r3, #0]
		break;
 80024b2:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80024ba:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 80024bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10b      	bne.n	80024dc <select_offset_per_vcsel+0xbc>
		*poffset = (isc & 0x01) ? tA : tB;
 80024c4:	7a7b      	ldrb	r3, [r7, #9]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <select_offset_per_vcsel+0xb4>
 80024ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024d2:	e001      	b.n	80024d8 <select_offset_per_vcsel+0xb8>
 80024d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	8013      	strh	r3, [r2, #0]

	return status;
 80024dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 80024ec:	b490      	push	{r4, r7}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	4611      	mov	r1, r2
 80024f8:	461a      	mov	r2, r3
 80024fa:	460b      	mov	r3, r1
 80024fc:	71fb      	strb	r3, [r7, #7]
 80024fe:	4613      	mov	r3, r2
 8002500:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	b29b      	uxth	r3, r3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800251e:	e021      	b.n	8002564 <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8002520:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	461a      	mov	r2, r3
 800252c:	0052      	lsls	r2, r2, #1
 800252e:	441a      	add	r2, r3
 8002530:	00d3      	lsls	r3, r2, #3
 8002532:	461a      	mov	r2, r3
 8002534:	460b      	mov	r3, r1
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	440b      	add	r3, r1
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	4413      	add	r3, r2
 800253e:	4423      	add	r3, r4
 8002540:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8002544:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8002548:	6a3a      	ldr	r2, [r7, #32]
 800254a:	4413      	add	r3, r2
 800254c:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 800254e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	3206      	adds	r2, #6
 8002554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	4413      	add	r3, r2
 800255c:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 800255e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002560:	3301      	adds	r3, #1
 8002562:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002564:	79bb      	ldrb	r3, [r7, #6]
 8002566:	b29b      	uxth	r3, r3
 8002568:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800256a:	429a      	cmp	r2, r3
 800256c:	d3d8      	bcc.n	8002520 <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d047      	beq.n	8002604 <vl53lx_diff_histo_stddev+0x118>
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d044      	beq.n	8002604 <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	b29b      	uxth	r3, r3
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002582:	e03a      	b.n	80025fa <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8002584:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	461a      	mov	r2, r3
 8002590:	0052      	lsls	r2, r2, #1
 8002592:	441a      	add	r2, r3
 8002594:	00d3      	lsls	r3, r2, #3
 8002596:	461a      	mov	r2, r3
 8002598:	460b      	mov	r3, r1
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	440b      	add	r3, r1
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	4413      	add	r3, r2
 80025a2:	4423      	add	r3, r4
 80025a4:	f203 7304 	addw	r3, r3, #1796	; 0x704
 80025a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80025ac:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025b4:	fb02 f203 	mul.w	r2, r2, r3
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80025be:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 80025c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	3206      	adds	r2, #6
 80025c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025ce:	fb02 f203 	mul.w	r2, r2, r3
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80025d8:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 80025da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	69b9      	ldr	r1, [r7, #24]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 80025e4:	69b8      	ldr	r0, [r7, #24]
 80025e6:	6979      	ldr	r1, [r7, #20]
 80025e8:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 80025ea:	fb01 f303 	mul.w	r3, r1, r3
 80025ee:	441a      	add	r2, r3
 80025f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f2:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 80025f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025f6:	3301      	adds	r3, #1
 80025f8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80025fa:	79bb      	ldrb	r3, [r7, #6]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002600:	429a      	cmp	r2, r3
 8002602:	d3bf      	bcc.n	8002584 <vl53lx_diff_histo_stddev+0x98>
	}
}
 8002604:	bf00      	nop
 8002606:	3728      	adds	r7, #40	; 0x28
 8002608:	46bd      	mov	sp, r7
 800260a:	bc90      	pop	{r4, r7}
 800260c:	4770      	bx	lr

0800260e <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 800260e:	b5b0      	push	{r4, r5, r7, lr}
 8002610:	b08c      	sub	sp, #48	; 0x30
 8002612:	af02      	add	r7, sp, #8
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3318      	adds	r3, #24
 800261c:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 800262c:	2300      	movs	r3, #0
 800262e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 8002632:	2300      	movs	r3, #0
 8002634:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800263e:	2318      	movs	r3, #24
 8002640:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	461a      	mov	r2, r3
 8002648:	f248 018f 	movw	r1, #32911	; 0x808f
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f002 faed 	bl	8004c2c <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8002652:	f107 0310 	add.w	r3, r7, #16
 8002656:	461a      	mov	r2, r3
 8002658:	f248 018e 	movw	r1, #32910	; 0x808e
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f002 fae5 	bl	8004c2c <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002668:	330d      	adds	r3, #13
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f040 811a 	bne.w	80028a6 <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 800268c:	7efb      	ldrb	r3, [r7, #27]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	b2db      	uxtb	r3, r3
 8002692:	7eba      	ldrb	r2, [r7, #26]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800269e:	330c      	adds	r3, #12
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d008      	beq.n	80026b8 <vl53lx_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80026ac:	330c      	adds	r3, #12
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026b6:	e004      	b.n	80026c2 <vl53lx_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	3b01      	subs	r3, #1
 80026be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 80026c2:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80026c6:	7efb      	ldrb	r3, [r7, #27]
 80026c8:	69f8      	ldr	r0, [r7, #28]
 80026ca:	461a      	mov	r2, r3
 80026cc:	0052      	lsls	r2, r2, #1
 80026ce:	441a      	add	r2, r3
 80026d0:	0153      	lsls	r3, r2, #5
 80026d2:	461a      	mov	r2, r3
 80026d4:	460b      	mov	r3, r1
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	440b      	add	r3, r1
 80026da:	019b      	lsls	r3, r3, #6
 80026dc:	4413      	add	r3, r2
 80026de:	4403      	add	r3, r0
 80026e0:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	dd0c      	ble.n	8002704 <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 80026ea:	7e79      	ldrb	r1, [r7, #25]
 80026ec:	7efa      	ldrb	r2, [r7, #27]
 80026ee:	f107 030c 	add.w	r3, r7, #12
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	460b      	mov	r3, r1
 80026fc:	6839      	ldr	r1, [r7, #0]
 80026fe:	69f8      	ldr	r0, [r7, #28]
 8002700:	f7ff fef4 	bl	80024ec <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	429a      	cmp	r2, r3
 800270a:	db23      	blt.n	8002754 <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002712:	3310      	adds	r3, #16
 8002714:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f011 fb02 	bl	8013d24 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002726:	330c      	adds	r3, #12
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]

			recom_been_reset = 1;
 800272c:	2301      	movs	r3, #1
 800272e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8002732:	7efb      	ldrb	r3, [r7, #27]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d106      	bne.n	8002746 <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800273e:	330d      	adds	r3, #13
 8002740:	2206      	movs	r2, #6
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	e034      	b.n	80027b0 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800274c:	330d      	adds	r3, #13
 800274e:	2207      	movs	r2, #7
 8002750:	701a      	strb	r2, [r3, #0]
 8002752:	e02d      	b.n	80027b0 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800275a:	330c      	adds	r3, #12
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8002760:	2300      	movs	r3, #0
 8002762:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002766:	e01e      	b.n	80027a6 <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8002768:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 800276c:	7e39      	ldrb	r1, [r7, #24]
 800276e:	7efb      	ldrb	r3, [r7, #27]
 8002770:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	3006      	adds	r0, #6
 8002778:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 800277c:	69f8      	ldr	r0, [r7, #28]
 800277e:	461a      	mov	r2, r3
 8002780:	0052      	lsls	r2, r2, #1
 8002782:	441a      	add	r2, r3
 8002784:	00d3      	lsls	r3, r2, #3
 8002786:	461a      	mov	r2, r3
 8002788:	460b      	mov	r3, r1
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	440b      	add	r3, r1
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	4413      	add	r3, r2
 8002792:	442b      	add	r3, r5
 8002794:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8002798:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 800279c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80027a0:	3301      	adds	r3, #1
 80027a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80027a6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80027aa:	7ebb      	ldrb	r3, [r7, #26]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d3db      	bcc.n	8002768 <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80027b6:	330c      	adds	r3, #12
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	3b01      	subs	r3, #1
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d109      	bne.n	80027d8 <vl53lx_histo_merge+0x1ca>
 80027c4:	7efb      	ldrb	r3, [r7, #27]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d106      	bne.n	80027d8 <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80027d0:	330c      	adds	r3, #12
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e00e      	b.n	80027f6 <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 80027d8:	7efb      	ldrb	r3, [r7, #27]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d10b      	bne.n	80027f6 <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80027e4:	330c      	adds	r3, #12
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80027f2:	330c      	adds	r3, #12
 80027f4:	701a      	strb	r2, [r3, #0]

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 80027f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d102      	bne.n	8002804 <vl53lx_histo_merge+0x1f6>
 80027fe:	7efb      	ldrb	r3, [r7, #27]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d069      	beq.n	80028d8 <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800280a:	330d      	adds	r3, #13
 800280c:	781b      	ldrb	r3, [r3, #0]
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 800280e:	2b00      	cmp	r3, #0
 8002810:	d162      	bne.n	80028d8 <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 8002812:	2300      	movs	r3, #0
 8002814:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002816:	e008      	b.n	800282a <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 8002818:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	3206      	adds	r2, #6
 800281e:	2100      	movs	r1, #0
 8002820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8002824:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002826:	3301      	adds	r3, #1
 8002828:	84fb      	strh	r3, [r7, #38]	; 0x26
 800282a:	7ebb      	ldrb	r3, [r7, #26]
 800282c:	b29b      	uxth	r3, r3
 800282e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002830:	429a      	cmp	r2, r3
 8002832:	d3f1      	bcc.n	8002818 <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 8002834:	2300      	movs	r3, #0
 8002836:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002838:	e02f      	b.n	800289a <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 800283a:	2300      	movs	r3, #0
 800283c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002840:	e023      	b.n	800288a <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 8002842:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	3206      	adds	r2, #6
 8002848:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 800284c:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002850:	7efb      	ldrb	r3, [r7, #27]
 8002852:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8002854:	69fc      	ldr	r4, [r7, #28]
 8002856:	461a      	mov	r2, r3
 8002858:	0052      	lsls	r2, r2, #1
 800285a:	441a      	add	r2, r3
 800285c:	00d3      	lsls	r3, r2, #3
 800285e:	461a      	mov	r2, r3
 8002860:	460b      	mov	r3, r1
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	440b      	add	r3, r1
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	4413      	add	r3, r2
 800286a:	442b      	add	r3, r5
 800286c:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8002870:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8002874:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002876:	18c1      	adds	r1, r0, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	3206      	adds	r2, #6
 800287c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8002880:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002884:	3301      	adds	r3, #1
 8002886:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800288a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	429a      	cmp	r2, r3
 8002892:	dbd6      	blt.n	8002842 <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 8002894:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002896:	3301      	adds	r3, #1
 8002898:	84fb      	strh	r3, [r7, #38]	; 0x26
 800289a:	7ebb      	ldrb	r3, [r7, #26]
 800289c:	b29b      	uxth	r3, r3
 800289e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d3ca      	bcc.n	800283a <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 80028a4:	e018      	b.n	80028d8 <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80028ac:	330d      	adds	r3, #13
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80028ba:	330d      	adds	r3, #13
 80028bc:	701a      	strb	r2, [r3, #0]
		if (pdev->pos_before_next_recom == 255)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80028c4:	330d      	adds	r3, #13
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2bff      	cmp	r3, #255	; 0xff
 80028ca:	d105      	bne.n	80028d8 <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80028d2:	330d      	adds	r3, #13
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
}
 80028d8:	bf00      	nop
 80028da:	3728      	adds	r7, #40	; 0x28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bdb0      	pop	{r4, r5, r7, pc}

080028e0 <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b0c6      	sub	sp, #280	; 0x118
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	1d3b      	adds	r3, r7, #4
 80028e8:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80028f6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d108      	bne.n	8002910 <VL53LX_load_patch+0x30>
		status = VL53LX_WrByte(Dev,
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	2200      	movs	r2, #0
 8002902:	2185      	movs	r1, #133	; 0x85
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	f00b fd07 	bl	800e318 <VL53LX_WrByte>
 800290a:	4603      	mov	r3, r0
 800290c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8002910:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8002914:	2b00      	cmp	r3, #0
 8002916:	d103      	bne.n	8002920 <VL53LX_load_patch+0x40>
		VL53LX_enable_powerforce(Dev);
 8002918:	1d3b      	adds	r3, r7, #4
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	f005 f89a 	bl	8007a54 <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 8002920:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	f248 018c 	movw	r1, #32908	; 0x808c
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	f002 f97e 	bl	8004c2c <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8002930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002934:	2b03      	cmp	r3, #3
 8002936:	d81b      	bhi.n	8002970 <VL53LX_load_patch+0x90>
 8002938:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <VL53LX_load_patch+0x60>)
 800293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293e:	bf00      	nop
 8002940:	08002951 	.word	0x08002951
 8002944:	08002959 	.word	0x08002959
 8002948:	08002961 	.word	0x08002961
 800294c:	08002969 	.word	0x08002969
	case 0:
		patch_power = 0x00;
 8002950:	2300      	movs	r3, #0
 8002952:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8002956:	e00e      	b.n	8002976 <VL53LX_load_patch+0x96>
	case 1:
		patch_power = 0x10;
 8002958:	2310      	movs	r3, #16
 800295a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800295e:	e00a      	b.n	8002976 <VL53LX_load_patch+0x96>
	case 2:
		patch_power = 0x20;
 8002960:	2320      	movs	r3, #32
 8002962:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8002966:	e006      	b.n	8002976 <VL53LX_load_patch+0x96>
	case 3:
		patch_power = 0x40;
 8002968:	2340      	movs	r3, #64	; 0x40
 800296a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800296e:	e002      	b.n	8002976 <VL53LX_load_patch+0x96>
	default:
		patch_power = 0x00;
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 8002976:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800297a:	2b00      	cmp	r3, #0
 800297c:	d125      	bne.n	80029ca <VL53LX_load_patch+0xea>

		comms_buffer[0] = 0x29;
 800297e:	f107 030c 	add.w	r3, r7, #12
 8002982:	2229      	movs	r2, #41	; 0x29
 8002984:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8002986:	f107 030c 	add.w	r3, r7, #12
 800298a:	22c9      	movs	r2, #201	; 0xc9
 800298c:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800298e:	f107 030c 	add.w	r3, r7, #12
 8002992:	220e      	movs	r2, #14
 8002994:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8002996:	f107 030c 	add.w	r3, r7, #12
 800299a:	2240      	movs	r2, #64	; 0x40
 800299c:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800299e:	f107 030c 	add.w	r3, r7, #12
 80029a2:	2228      	movs	r2, #40	; 0x28
 80029a4:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 80029a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	f107 030c 	add.w	r3, r7, #12
 80029b0:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 80029b2:	f107 020c 	add.w	r2, r7, #12
 80029b6:	1d38      	adds	r0, r7, #4
 80029b8:	2306      	movs	r3, #6
 80029ba:	f240 4176 	movw	r1, #1142	; 0x476
 80029be:	6800      	ldr	r0, [r0, #0]
 80029c0:	f00b fc3e 	bl	800e240 <VL53LX_WriteMulti>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 80029ca:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d123      	bne.n	8002a1a <VL53LX_load_patch+0x13a>
		comms_buffer[0] = 0x03;
 80029d2:	f107 030c 	add.w	r3, r7, #12
 80029d6:	2203      	movs	r2, #3
 80029d8:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 80029da:	f107 030c 	add.w	r3, r7, #12
 80029de:	226d      	movs	r2, #109	; 0x6d
 80029e0:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 80029e2:	f107 030c 	add.w	r3, r7, #12
 80029e6:	2203      	movs	r2, #3
 80029e8:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 80029ea:	f107 030c 	add.w	r3, r7, #12
 80029ee:	226f      	movs	r2, #111	; 0x6f
 80029f0:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 80029f2:	f107 030c 	add.w	r3, r7, #12
 80029f6:	2207      	movs	r2, #7
 80029f8:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 80029fa:	f107 030c 	add.w	r3, r7, #12
 80029fe:	2229      	movs	r2, #41	; 0x29
 8002a00:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 8002a02:	f107 020c 	add.w	r2, r7, #12
 8002a06:	1d38      	adds	r0, r7, #4
 8002a08:	2306      	movs	r3, #6
 8002a0a:	f240 4196 	movw	r1, #1174	; 0x496
 8002a0e:	6800      	ldr	r0, [r0, #0]
 8002a10:	f00b fc16 	bl	800e240 <VL53LX_WriteMulti>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8002a1a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d113      	bne.n	8002a4a <VL53LX_load_patch+0x16a>
		comms_buffer[0] = 0x00;
 8002a22:	f107 030c 	add.w	r3, r7, #12
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8002a2a:	f107 030c 	add.w	r3, r7, #12
 8002a2e:	2207      	movs	r2, #7
 8002a30:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8002a32:	f107 020c 	add.w	r2, r7, #12
 8002a36:	1d38      	adds	r0, r7, #4
 8002a38:	2302      	movs	r3, #2
 8002a3a:	f240 4172 	movw	r1, #1138	; 0x472
 8002a3e:	6800      	ldr	r0, [r0, #0]
 8002a40:	f00b fbfe 	bl	800e240 <VL53LX_WriteMulti>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 8002a4a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d113      	bne.n	8002a7a <VL53LX_load_patch+0x19a>
		comms_buffer[0] = 0x00;
 8002a52:	f107 030c 	add.w	r3, r7, #12
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8002a5a:	f107 030c 	add.w	r3, r7, #12
 8002a5e:	2207      	movs	r2, #7
 8002a60:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8002a62:	f107 020c 	add.w	r2, r7, #12
 8002a66:	1d38      	adds	r0, r7, #4
 8002a68:	2302      	movs	r3, #2
 8002a6a:	f240 4174 	movw	r1, #1140	; 0x474
 8002a6e:	6800      	ldr	r0, [r0, #0]
 8002a70:	f00b fbe6 	bl	800e240 <VL53LX_WriteMulti>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 8002a7a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <VL53LX_load_patch+0x1b6>
		status = VL53LX_WrByte(Dev,
 8002a82:	1d3b      	adds	r3, r7, #4
 8002a84:	2201      	movs	r2, #1
 8002a86:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	f00b fc44 	bl	800e318 <VL53LX_WrByte>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 8002a96:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d108      	bne.n	8002ab0 <VL53LX_load_patch+0x1d0>
		status = VL53LX_WrByte(Dev,
 8002a9e:	1d3b      	adds	r3, r7, #4
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	2185      	movs	r1, #133	; 0x85
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	f00b fc37 	bl	800e318 <VL53LX_WrByte>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8002ab0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop

08002ac0 <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8002ac0:	b5b0      	push	{r4, r5, r7, lr}
 8002ac2:	b08a      	sub	sp, #40	; 0x28
 8002ac4:	af04      	add	r7, sp, #16
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3318      	adds	r3, #24
 8002ad4:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002adc:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 8002ae2:	2162      	movs	r1, #98	; 0x62
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f004 f86f 	bl	8006bc8 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2204      	movs	r2, #4
 8002aee:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2205      	movs	r2, #5
 8002afa:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	pres->zone_results.active_zones    = 0;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8002b06:	2300      	movs	r3, #0
 8002b08:	75bb      	strb	r3, [r7, #22]
 8002b0a:	e01b      	b.n	8002b44 <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 8002b0c:	7dba      	ldrb	r2, [r7, #22]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3308      	adds	r3, #8
 8002b20:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2200      	movs	r2, #0
 8002b26:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8002b3e:	7dbb      	ldrb	r3, [r7, #22]
 8002b40:	3301      	adds	r3, #1
 8002b42:	75bb      	strb	r3, [r7, #22]
 8002b44:	7dbb      	ldrb	r3, [r7, #22]
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d9e0      	bls.n	8002b0c <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2205      	movs	r2, #5
 8002b4e:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
	pres->zone_hists.active_zones      = 0;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2205      	movs	r2, #5
 8002b5e:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
	pres->zone_cal.active_zones        = 0;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	75bb      	strb	r3, [r7, #22]
 8002b6e:	e039      	b.n	8002be4 <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 8002b70:	7dba      	ldrb	r2, [r7, #22]
 8002b72:	68f9      	ldr	r1, [r7, #12]
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 8002b86:	7dba      	ldrb	r2, [r7, #22]
 8002b88:	68f9      	ldr	r1, [r7, #12]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 8002b9c:	7dba      	ldrb	r2, [r7, #22]
 8002b9e:	68f9      	ldr	r1, [r7, #12]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 8002bb2:	7dba      	ldrb	r2, [r7, #22]
 8002bb4:	68f9      	ldr	r1, [r7, #12]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 8002bc8:	7dba      	ldrb	r2, [r7, #22]
 8002bca:	68f9      	ldr	r1, [r7, #12]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8002bde:	7dbb      	ldrb	r3, [r7, #22]
 8002be0:	3301      	adds	r3, #1
 8002be2:	75bb      	strb	r3, [r7, #22]
 8002be4:	7dbb      	ldrb	r3, [r7, #22]
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d9c2      	bls.n	8002b70 <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	221e      	movs	r2, #30
 8002bf4:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2201      	movs	r2, #1
 8002c06:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2201      	movs	r2, #1
 8002c12:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c1a:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002c22:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8002c2a:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	2264      	movs	r2, #100	; 0x64
 8002c30:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002c38:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002c48:	3302      	adds	r3, #2
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	701a      	strb	r2, [r3, #0]
	pdev->offset_results.active_results = 0;
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002c54:	3303      	adds	r3, #3
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]



	pdev->gain_cal.standard_ranging_gain_factor =
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f240 72db 	movw	r2, #2011	; 0x7db
 8002c60:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8002c6a:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f003 ff8e 	bl	8006b90 <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002c7a:	3310      	adds	r3, #16
 8002c7c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8002c80:	2100      	movs	r1, #0
 8002c82:	4618      	mov	r0, r3
 8002c84:	f011 f84e 	bl	8013d24 <memset>
	pdev->bin_rec_pos = 0;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002c8e:	330c      	adds	r3, #12
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
	pdev->pos_before_next_recom = 0;
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002c9a:	330d      	adds	r3, #13
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <VL53LX_data_init+0x1f8>
 8002ca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d104      	bne.n	8002cb8 <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f8b7 	bl	8002e22 <VL53LX_read_p2p_data>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8002cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f002 ff2e 	bl	8005b28 <VL53LX_init_refspadchar_config_struct>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 8002cd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d107      	bne.n	8002ce8 <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f002 ff46 	bl	8005b70 <VL53LX_init_ssc_config_struct>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 8002ce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10b      	bne.n	8002d08 <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f002 ff57 	bl	8005bb2 <VL53LX_init_xtalk_config_struct>
 8002d04:	4603      	mov	r3, r0
 8002d06:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 8002d08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8002d16:	4618      	mov	r0, r3
 8002d18:	f002 ffbe 	bl	8005c98 <VL53LX_init_xtalk_extract_config_struct>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 8002d20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d107      	bne.n	8002d38 <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f002 ffe1 	bl	8005cf6 <VL53LX_init_offset_cal_config_struct>
 8002d34:	4603      	mov	r3, r0
 8002d36:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8002d38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d107      	bne.n	8002d50 <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002d46:	4618      	mov	r0, r3
 8002d48:	f002 fffc 	bl	8005d44 <VL53LX_init_zone_cal_config_struct>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8002d50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10b      	bne.n	8002d70 <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d64:	4619      	mov	r1, r3
 8002d66:	4610      	mov	r0, r2
 8002d68:	f003 f810 	bl	8005d8c <VL53LX_init_hist_post_process_config_struct>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 8002d70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d107      	bne.n	8002d88 <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f003 fa0f 	bl	80061a2 <VL53LX_init_hist_gen3_dmax_config_struct>
 8002d84:	4603      	mov	r3, r0
 8002d86:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 8002d88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d106      	bne.n	8002d9e <VL53LX_data_init+0x2de>
		status = VL53LX_init_tuning_parm_storage_struct(
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	33f8      	adds	r3, #248	; 0xf8
 8002d94:	4618      	mov	r0, r3
 8002d96:	f003 f868 	bl	8005e6a <VL53LX_init_tuning_parm_storage_struct>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 8002d9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d116      	bne.n	8002dd4 <VL53LX_data_init+0x314>
		status = VL53LX_set_preset_mode(
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	7858      	ldrb	r0, [r3, #1]
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	8b1c      	ldrh	r4, [r3, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	689d      	ldr	r5, [r3, #8]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	6912      	ldr	r2, [r2, #16]
 8002dba:	6939      	ldr	r1, [r7, #16]
 8002dbc:	6949      	ldr	r1, [r1, #20]
 8002dbe:	9102      	str	r1, [sp, #8]
 8002dc0:	9201      	str	r2, [sp, #4]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	462b      	mov	r3, r5
 8002dc6:	4622      	mov	r2, r4
 8002dc8:	4601      	mov	r1, r0
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fadc 	bl	8003388 <VL53LX_set_preset_mode>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dda:	461a      	mov	r2, r3
 8002ddc:	2118      	movs	r1, #24
 8002dde:	2000      	movs	r0, #0
 8002de0:	f008 f8ff 	bl	800afe2 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8002dea:	461a      	mov	r2, r3
 8002dec:	2118      	movs	r1, #24
 8002dee:	2000      	movs	r0, #0
 8002df0:	f008 f8f7 	bl	800afe2 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	210c      	movs	r1, #12
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f004 fc4d 	bl	800769e <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f007 fb3d 	bl	800a484 <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f007 fa54 	bl	800a2b8 <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f007 fb60 	bl	800a4d6 <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8002e16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bdb0      	pop	{r4, r5, r7, pc}

08002e22 <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 8002e22:	b590      	push	{r4, r7, lr}
 8002e24:	b091      	sub	sp, #68	; 0x44
 8002e26:	af04      	add	r7, sp, #16
 8002e28:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3318      	adds	r3, #24
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	3348      	adds	r3, #72	; 0x48
 8002e42:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	339c      	adds	r3, #156	; 0x9c
 8002e48:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8002e4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <VL53LX_read_p2p_data+0x44>
		status = VL53LX_get_static_nvm_managed(
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e54:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f00b fcf2 	bl	800e844 <VL53LX_get_static_nvm_managed>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 8002e66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d108      	bne.n	8002e80 <VL53LX_read_p2p_data+0x5e>
		status = VL53LX_get_customer_nvm_managed(
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	3348      	adds	r3, #72	; 0x48
 8002e72:	4619      	mov	r1, r3
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f00b fe23 	bl	800eac0 <VL53LX_get_customer_nvm_managed>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 8002e80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d117      	bne.n	8002eb8 <VL53LX_read_p2p_data+0x96>

		status = VL53LX_get_nvm_copy_data(
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	f203 3392 	addw	r3, r3, #914	; 0x392
 8002e8e:	4619      	mov	r1, r3
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f00c fcf8 	bl	800f886 <VL53LX_get_nvm_copy_data>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 8002e9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <VL53LX_read_p2p_data+0x96>
			VL53LX_copy_rtn_good_spads_to_buffer(
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	f203 3292 	addw	r2, r3, #914	; 0x392
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f004 f97e 	bl	80071b4 <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 8002eb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10e      	bne.n	8002ede <VL53LX_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	895b      	ldrh	r3, [r3, #10]
 8002ec4:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 8002ede:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d108      	bne.n	8002ef8 <VL53LX_read_p2p_data+0xd6>
		status =
			VL53LX_read_nvm_optical_centre(
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	33c0      	adds	r3, #192	; 0xc0
 8002eea:	4619      	mov	r1, r3
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f00b f8ea 	bl	800e0c6 <VL53LX_read_nvm_optical_centre>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 8002ef8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d108      	bne.n	8002f12 <VL53LX_read_p2p_data+0xf0>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	3360      	adds	r3, #96	; 0x60
 8002f04:	4619      	mov	r1, r3
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f00b f900 	bl	800e10c <VL53LX_read_nvm_cal_peak_rate_map>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 8002f12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d12d      	bne.n	8002f76 <VL53LX_read_p2p_data+0x154>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	339c      	adds	r3, #156	; 0x9c
 8002f1e:	4619      	mov	r1, r3
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f00b f919 	bl	800e158 <VL53LX_read_nvm_additional_offset_cal_data>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	889b      	ldrh	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d120      	bne.n	8002f76 <VL53LX_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d11c      	bne.n	8002f76 <VL53LX_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	2280      	movs	r2, #128	; 0x80
 8002f40:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002f48:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 8002f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4c:	f893 03c2 	ldrb.w	r0, [r3, #962]	; 0x3c2
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	f893 43c3 	ldrb.w	r4, [r3, #963]	; 0x3c3
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	69f9      	ldr	r1, [r7, #28]
 8002f60:	3102      	adds	r1, #2
 8002f62:	9103      	str	r1, [sp, #12]
 8002f64:	9202      	str	r2, [sp, #8]
 8002f66:	2238      	movs	r2, #56	; 0x38
 8002f68:	9201      	str	r2, [sp, #4]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	23ff      	movs	r3, #255	; 0xff
 8002f6e:	22c7      	movs	r2, #199	; 0xc7
 8002f70:	4621      	mov	r1, r4
 8002f72:	f006 f893 	bl	800909c <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 8002f76:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d12f      	bne.n	8002fde <VL53LX_read_p2p_data+0x1bc>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 8002f7e:	f107 030c 	add.w	r3, r7, #12
 8002f82:	461a      	mov	r2, r3
 8002f84:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f00b f908 	bl	800e19e <VL53LX_read_nvm_fmt_range_results_data>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 8002f94:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d120      	bne.n	8002fde <VL53LX_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8002f9c:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8002fa4:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8002fac:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8002fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8002fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d006      	beq.n	8002fcc <VL53LX_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8002fca:	e003      	b.n	8002fd4 <VL53LX_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fce:	2214      	movs	r2, #20
 8002fd0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8002fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fda:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 8002fde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10b      	bne.n	8002ffe <VL53LX_read_p2p_data+0x1dc>
		status =
			VL53LX_RdWord(
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8002fec:	3304      	adds	r3, #4
 8002fee:	461a      	mov	r2, r3
 8002ff0:	21de      	movs	r1, #222	; 0xde
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f00b fa20 	bl	800e438 <VL53LX_RdWord>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8003004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003008:	d204      	bcs.n	8003014 <VL53LX_read_p2p_data+0x1f2>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8003010:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
	}



	if (status == VL53LX_ERROR_NONE)
 8003014:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003018:	2b00      	cmp	r3, #0
 800301a:	d108      	bne.n	800302e <VL53LX_read_p2p_data+0x20c>
		status =
			VL53LX_get_mode_mitigation_roi(
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	33bc      	adds	r3, #188	; 0xbc
 8003020:	4619      	mov	r1, r3
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f91a 	bl	800325c <VL53LX_get_mode_mitigation_roi>
 8003028:	4603      	mov	r3, r0
 800302a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d114      	bne.n	8003062 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10f      	bne.n	8003062 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8003062:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003066:	4618      	mov	r0, r3
 8003068:	3734      	adds	r7, #52	; 0x34
 800306a:	46bd      	mov	sp, r7
 800306c:	bd90      	pop	{r4, r7, pc}

0800306e <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800306e:	b480      	push	{r7}
 8003070:	b085      	sub	sp, #20
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003078:	2300      	movs	r3, #0
 800307a:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3318      	adds	r3, #24
 8003080:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003088:	3304      	adds	r3, #4
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <VL53LX_set_inter_measurement_period_ms+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003090:	23f1      	movs	r3, #241	; 0xf1
 8003092:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 8003094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10e      	bne.n	80030ba <VL53LX_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80030a8:	3304      	adds	r3, #4
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	}

	LOG_FUNCTION_END(status);

	return status;
 80030ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b088      	sub	sp, #32
 80030ce:	af02      	add	r7, sp, #8
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030d8:	2300      	movs	r3, #0
 80030da:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	3318      	adds	r3, #24
 80030e0:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <VL53LX_set_timeouts_us+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80030ec:	23f1      	movs	r3, #241	; 0xf1
 80030ee:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 80030f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d11b      	bne.n	8003130 <VL53LX_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f8b3 12de 	ldrh.w	r1, [r3, #734]	; 0x2de
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	f502 724d 	add.w	r2, r2, #820	; 0x334
 800311c:	9201      	str	r2, [sp, #4]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	460b      	mov	r3, r1
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	68b8      	ldr	r0, [r7, #8]
 8003128:	f004 fe5b 	bl	8007de2 <VL53LX_calc_timeout_register_values>
 800312c:	4603      	mov	r3, r0
 800312e:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8003130:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800314a:	2300      	movs	r3, #0
 800314c:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	3318      	adds	r3, #24
 8003152:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <VL53LX_get_timeouts_us+0x2e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003166:	23f1      	movs	r3, #241	; 0xf1
 8003168:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800316a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d14a      	bne.n	8003208 <VL53LX_get_timeouts_us+0xcc>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f8b3 22de 	ldrh.w	r2, [r3, #734]	; 0x2de
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800317e:	4619      	mov	r1, r3
 8003180:	4610      	mov	r0, r2
 8003182:	f004 fca8 	bl	8007ad6 <VL53LX_calc_macro_period_us>
 8003186:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
			VL53LX_calc_timeout_us(
 800318e:	6979      	ldr	r1, [r7, #20]
 8003190:	4618      	mov	r0, r3
 8003192:	f004 fd66 	bl	8007c62 <VL53LX_calc_timeout_us>
 8003196:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		timeout_encoded =
 80031a2:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80031a4:	8a7b      	ldrh	r3, [r7, #18]
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80031b0:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 80031b2:	4413      	add	r3, r2
 80031b4:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 80031b6:	8a7b      	ldrh	r3, [r7, #18]
 80031b8:	6979      	ldr	r1, [r7, #20]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f004 fdb6 	bl	8007d2c <VL53LX_calc_decoded_timeout_us>
 80031c0:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
		timeout_encoded =
 80031cc:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80031ce:	8a7b      	ldrh	r3, [r7, #18]
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80031da:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 80031dc:	4413      	add	r3, r2
 80031de:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 80031e0:	8a7b      	ldrh	r3, [r7, #18]
 80031e2:	6979      	ldr	r1, [r7, #20]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f004 fda1 	bl	8007d2c <VL53LX_calc_decoded_timeout_us>
 80031ea:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8003208:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3720      	adds	r7, #32
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3318      	adds	r3, #24
 8003226:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	7858      	ldrb	r0, [r3, #1]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	7819      	ldrb	r1, [r3, #0]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f203 335b 	addw	r3, r3, #859	; 0x35b
 8003236:	461a      	mov	r2, r3
 8003238:	f005 fdad 	bl	8008d96 <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	7898      	ldrb	r0, [r3, #2]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	78d9      	ldrb	r1, [r3, #3]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 800324a:	461a      	mov	r2, r3
 800324c:	f005 fde2 	bl	8008e14 <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8003250:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003266:	2300      	movs	r3, #0
 8003268:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3318      	adds	r3, #24
 800326e:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f893 33c2 	ldrb.w	r3, [r3, #962]	; 0x3c2
 8003282:	f107 020e 	add.w	r2, r7, #14
 8003286:	f107 010d 	add.w	r1, r7, #13
 800328a:	4618      	mov	r0, r3
 800328c:	f007 ff52 	bl	800b134 <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8003290:	7bba      	ldrb	r2, [r7, #14]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8003296:	7b7a      	ldrb	r2, [r7, #13]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f893 33c3 	ldrb.w	r3, [r3, #963]	; 0x3c3
 80032a2:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 80032ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b087      	sub	sp, #28
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	460b      	mov	r3, r1
 80032d4:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	3318      	adds	r3, #24
 80032de:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 80032e0:	7afb      	ldrb	r3, [r7, #11]
 80032e2:	2b21      	cmp	r3, #33	; 0x21
 80032e4:	d030      	beq.n	8003348 <VL53LX_get_preset_mode_timing_cfg+0x82>
 80032e6:	2b21      	cmp	r3, #33	; 0x21
 80032e8:	dc43      	bgt.n	8003372 <VL53LX_get_preset_mode_timing_cfg+0xac>
 80032ea:	2b1b      	cmp	r3, #27
 80032ec:	d002      	beq.n	80032f4 <VL53LX_get_preset_mode_timing_cfg+0x2e>
 80032ee:	2b1e      	cmp	r3, #30
 80032f0:	d015      	beq.n	800331e <VL53LX_get_preset_mode_timing_cfg+0x58>
 80032f2:	e03e      	b.n	8003372 <VL53LX_get_preset_mode_timing_cfg+0xac>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
		*pphasecal_config_timeout_us =
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	601a      	str	r2, [r3, #0]

	break;
 800331c:	e02c      	b.n	8003378 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
		*pphasecal_config_timeout_us =
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	601a      	str	r2, [r3, #0]
	break;
 8003346:	e017      	b.n	8003378 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
		*pphasecal_config_timeout_us =
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	601a      	str	r2, [r3, #0]
	break;
 8003370:	e002      	b.n	8003378 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003372:	23fc      	movs	r3, #252	; 0xfc
 8003374:	75fb      	strb	r3, [r7, #23]
		break;
 8003376:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8003378:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800337c:	4618      	mov	r0, r3
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b096      	sub	sp, #88	; 0x58
 800338c:	af06      	add	r7, sp, #24
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	460b      	mov	r3, r1
 8003394:	72fb      	strb	r3, [r7, #11]
 8003396:	4613      	mov	r3, r2
 8003398:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800339a:	2300      	movs	r3, #0
 800339c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_LLDriverData_t *pdev =
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3318      	adds	r3, #24
 80033a4:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80033ac:	637b      	str	r3, [r7, #52]	; 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 80033ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033b4:	633b      	str	r3, [r7, #48]	; 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80033b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b8:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80033c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c8:	f203 331e 	addw	r3, r3, #798	; 0x31e
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d0:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80033d4:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80033d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80033dc:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80033de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80033e4:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	33c2      	adds	r3, #194	; 0xc2
 80033ea:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 80033ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ee:	33f8      	adds	r3, #248	; 0xf8
 80033f0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 80033f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f4:	7afa      	ldrb	r2, [r7, #11]
 80033f6:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 80033f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033fc:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 80033fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003400:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003402:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003406:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003408:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 800340a:	2103      	movs	r1, #3
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f003 fbdb 	bl	8006bc8 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8003412:	7afb      	ldrb	r3, [r7, #11]
 8003414:	2b21      	cmp	r3, #33	; 0x21
 8003416:	d02e      	beq.n	8003476 <VL53LX_set_preset_mode+0xee>
 8003418:	2b21      	cmp	r3, #33	; 0x21
 800341a:	dc40      	bgt.n	800349e <VL53LX_set_preset_mode+0x116>
 800341c:	2b1b      	cmp	r3, #27
 800341e:	d002      	beq.n	8003426 <VL53LX_set_preset_mode+0x9e>
 8003420:	2b1e      	cmp	r3, #30
 8003422:	d014      	beq.n	800344e <VL53LX_set_preset_mode+0xc6>
 8003424:	e03b      	b.n	800349e <VL53LX_set_preset_mode+0x116>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	9304      	str	r3, [sp, #16]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	9303      	str	r3, [sp, #12]
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	9302      	str	r3, [sp, #8]
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800343e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003442:	f003 f8f2 	bl	800662a <VL53LX_preset_mode_histogram_long_range>
 8003446:	4603      	mov	r3, r0
 8003448:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800344c:	e02b      	b.n	80034a6 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	9304      	str	r3, [sp, #16]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	9303      	str	r3, [sp, #12]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	9302      	str	r3, [sp, #8]
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800346a:	f003 f97c 	bl	8006766 <VL53LX_preset_mode_histogram_medium_range>
 800346e:	4603      	mov	r3, r0
 8003470:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003474:	e017      	b.n	80034a6 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	9304      	str	r3, [sp, #16]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	9303      	str	r3, [sp, #12]
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	9302      	str	r3, [sp, #8]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800348e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003492:	f003 fa06 	bl	80068a2 <VL53LX_preset_mode_histogram_short_range>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800349c:	e003      	b.n	80034a6 <VL53LX_set_preset_mode+0x11e>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 800349e:	23fc      	movs	r3, #252	; 0xfc
 80034a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 80034a4:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 80034a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d105      	bne.n	80034ba <VL53LX_set_preset_mode+0x132>

		pstatic->dss_config__target_total_rate_mcps =
 80034ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b0:	893a      	ldrh	r2, [r7, #8]
 80034b2:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 80034b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b6:	893a      	ldrh	r2, [r7, #8]
 80034b8:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 80034ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d108      	bne.n	80034d4 <VL53LX_set_preset_mode+0x14c>
		status =
			VL53LX_set_timeouts_us(
 80034c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f7ff fdfe 	bl	80030ca <VL53LX_set_timeouts_us>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 80034d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d106      	bne.n	80034ea <VL53LX_set_preset_mode+0x162>
		status =
			VL53LX_set_inter_measurement_period_ms(
 80034dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f7ff fdc5 	bl	800306e <VL53LX_set_inter_measurement_period_ms>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80034ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ec:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 80034f0:	3301      	adds	r3, #1
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f6:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80034fa:	4619      	mov	r1, r3
 80034fc:	4610      	mov	r0, r2
 80034fe:	f003 ff79 	bl	80073f4 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8003502:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003506:	4618      	mov	r0, r3
 8003508:	3740      	adds	r7, #64	; 0x40
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b0d2      	sub	sp, #328	; 0x148
 8003514:	af00      	add	r7, sp, #0
 8003516:	1d3b      	adds	r3, r7, #4
 8003518:	6018      	str	r0, [r3, #0]
 800351a:	4608      	mov	r0, r1
 800351c:	4611      	mov	r1, r2
 800351e:	1cfb      	adds	r3, r7, #3
 8003520:	4602      	mov	r2, r0
 8003522:	701a      	strb	r2, [r3, #0]
 8003524:	1cbb      	adds	r3, r7, #2
 8003526:	460a      	mov	r2, r1
 8003528:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800352a:	2300      	movs	r3, #0
 800352c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003530:	1d3b      	adds	r3, r7, #4
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3318      	adds	r3, #24
 8003536:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53LX_LLDriverResults_t  *pres =
 800353a:	1d3b      	adds	r3, r7, #4
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003542:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8003546:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800354a:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800354e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8003552:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003556:	3348      	adds	r3, #72	; 0x48
 8003558:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800355c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003560:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003564:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003568:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800356c:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8003570:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003574:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003578:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800357c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003580:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003584:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8003588:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800358c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003590:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003594:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8003598:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800359c:	332c      	adds	r3, #44	; 0x2c
 800359e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 80035a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80035a6:	3348      	adds	r3, #72	; 0x48
 80035a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 80035ac:	f107 030c 	add.w	r3, r7, #12
 80035b0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 80035cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80035d0:	1cfa      	adds	r2, r7, #3
 80035d2:	7812      	ldrb	r2, [r2, #0]
 80035d4:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 80035d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80035da:	791b      	ldrb	r3, [r3, #4]
 80035dc:	b25b      	sxtb	r3, r3
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80035e4:	1cfb      	adds	r3, r7, #3
 80035e6:	f993 3000 	ldrsb.w	r3, [r3]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	b25b      	sxtb	r3, r3
 80035ee:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 80035f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80035f4:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 80035f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80035fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53LX_set_user_zone(
 80035fe:	3336      	adds	r3, #54	; 0x36
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8003606:	4413      	add	r3, r2
 8003608:	1d9a      	adds	r2, r3, #6
 800360a:	1d3b      	adds	r3, r7, #4
 800360c:	4611      	mov	r1, r2
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	f7ff fe00 	bl	8003214 <VL53LX_set_user_zone>
 8003614:	4603      	mov	r3, r0
 8003616:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 800361a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800361e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d016      	beq.n	8003654 <VL53LX_init_and_start_range+0x144>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 8003626:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800362a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800362e:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800363c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003640:	4413      	add	r3, r2
 8003642:	1c9a      	adds	r2, r3, #2
 8003644:	1d3b      	adds	r3, r7, #4
 8003646:	4611      	mov	r1, r2
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	f001 fa87 	bl	8004b5c <VL53LX_set_zone_dss_config>
 800364e:	4603      	mov	r3, r0
 8003650:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8003654:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003658:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10d      	bne.n	8003680 <VL53LX_init_and_start_range+0x170>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8003664:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 800366c:	2b01      	cmp	r3, #1
 800366e:	d107      	bne.n	8003680 <VL53LX_init_and_start_range+0x170>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8003670:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003674:	f8b3 22a4 	ldrh.w	r2, [r3, #676]	; 0x2a4
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8003678:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800367c:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8003680:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003684:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8003688:	3312      	adds	r3, #18
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2bff      	cmp	r3, #255	; 0xff
 800368e:	d106      	bne.n	800369e <VL53LX_init_and_start_range+0x18e>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8003690:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003694:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8003698:	3312      	adds	r3, #18
 800369a:	2200      	movs	r2, #0
 800369c:	701a      	strb	r2, [r3, #0]


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800369e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80036a2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80036a6:	3311      	adds	r3, #17
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d133      	bne.n	8003716 <VL53LX_init_and_start_range+0x206>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80036ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80036b2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80036b6:	3312      	adds	r3, #18
 80036b8:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d12b      	bne.n	8003716 <VL53LX_init_and_start_range+0x206>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 80036be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80036c2:	f893 2320 	ldrb.w	r2, [r3, #800]	; 0x320
		pdev->low_power_auto_data.saved_interrupt_config =
 80036c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80036ca:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80036ce:	3313      	adds	r3, #19
 80036d0:	701a      	strb	r2, [r3, #0]

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 80036d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		if ((pdev->dyn_cfg.system__sequence_config & (
 80036dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80036e0:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
 80036e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <VL53LX_init_and_start_range+0x1f0>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 80036ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80036f0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80036f4:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 80036f6:	b21a      	sxth	r2, r3
 80036f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80036fc:	825a      	strh	r2, [r3, #18]
 80036fe:	e003      	b.n	8003708 <VL53LX_init_and_start_range+0x1f8>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8003700:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003704:	2200      	movs	r2, #0
 8003706:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8003708:	1cbb      	adds	r3, r7, #2
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b04      	cmp	r3, #4
 800370e:	d802      	bhi.n	8003716 <VL53LX_init_and_start_range+0x206>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8003710:	1cbb      	adds	r3, r7, #2
 8003712:	2205      	movs	r2, #5
 8003714:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003716:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800371a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800371e:	3311      	adds	r3, #17
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d114      	bne.n	8003750 <VL53LX_init_and_start_range+0x240>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8003726:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800372a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800372e:	3312      	adds	r3, #18
 8003730:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003732:	2b01      	cmp	r3, #1
 8003734:	d10c      	bne.n	8003750 <VL53LX_init_and_start_range+0x240>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8003736:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800373a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800373e:	3313      	adds	r3, #19
 8003740:	781a      	ldrb	r2, [r3, #0]
		pdev->gen_cfg.system__interrupt_config_gpio =
 8003742:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003746:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 800374a:	1cbb      	adds	r3, r7, #2
 800374c:	2206      	movs	r2, #6
 800374e:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 8003750:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <VL53LX_init_and_start_range+0x256>
		status = VL53LX_save_cfg_data(Dev);
 8003758:	1d3b      	adds	r3, r7, #4
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	f005 fe08 	bl	8009370 <VL53LX_save_cfg_data>
 8003760:	4603      	mov	r3, r0
 8003762:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8003766:	1cbb      	adds	r3, r7, #2
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	3b01      	subs	r3, #1
 800376c:	2b05      	cmp	r3, #5
 800376e:	d827      	bhi.n	80037c0 <VL53LX_init_and_start_range+0x2b0>
 8003770:	a201      	add	r2, pc, #4	; (adr r2, 8003778 <VL53LX_init_and_start_range+0x268>)
 8003772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003776:	bf00      	nop
 8003778:	080037b9 	.word	0x080037b9
 800377c:	080037b1 	.word	0x080037b1
 8003780:	080037a9 	.word	0x080037a9
 8003784:	080037a1 	.word	0x080037a1
 8003788:	08003799 	.word	0x08003799
 800378c:	08003791 	.word	0x08003791
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 8003790:	2301      	movs	r3, #1
 8003792:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8003796:	e017      	b.n	80037c8 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8003798:	230d      	movs	r3, #13
 800379a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800379e:	e013      	b.n	80037c8 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 80037a0:	2324      	movs	r3, #36	; 0x24
 80037a2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80037a6:	e00f      	b.n	80037c8 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 80037a8:	2344      	movs	r3, #68	; 0x44
 80037aa:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80037ae:	e00b      	b.n	80037c8 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 80037b0:	235a      	movs	r3, #90	; 0x5a
 80037b2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80037b6:	e007      	b.n	80037c8 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 80037b8:	2371      	movs	r3, #113	; 0x71
 80037ba:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80037be:	e003      	b.n	80037c8 <VL53LX_init_and_start_range+0x2b8>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 80037c0:	2383      	movs	r3, #131	; 0x83
 80037c2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80037c6:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 80037c8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80037cc:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 80037d0:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 80037d4:	f107 030c 	add.w	r3, r7, #12
 80037d8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 80037dc:	2300      	movs	r3, #0
 80037de:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80037e2:	e00b      	b.n	80037fc <VL53LX_init_and_start_range+0x2ec>
		*pbuffer++ = 0;
 80037e4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 80037ee:	2200      	movs	r2, #0
 80037f0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 80037f2:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80037f6:	3301      	adds	r3, #1
 80037f8:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80037fc:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8003800:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8003804:	429a      	cmp	r2, r3
 8003806:	d3ed      	bcc.n	80037e4 <VL53LX_init_and_start_range+0x2d4>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 8003808:	1cbb      	adds	r3, r7, #2
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b05      	cmp	r3, #5
 800380e:	d917      	bls.n	8003840 <VL53LX_init_and_start_range+0x330>
 8003810:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8003814:	2b00      	cmp	r3, #0
 8003816:	d113      	bne.n	8003840 <VL53LX_init_and_start_range+0x330>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003818:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800381c:	f1c3 0301 	rsb	r3, r3, #1
 8003820:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003824:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 8003828:	f107 020c 	add.w	r2, r7, #12
 800382c:	4413      	add	r3, r2
 800382e:	461a      	mov	r2, r3
 8003830:	210b      	movs	r1, #11
 8003832:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8003836:	f00a ff50 	bl	800e6da <VL53LX_i2c_encode_static_nvm_managed>
 800383a:	4603      	mov	r3, r0
 800383c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8003840:	1cbb      	adds	r3, r7, #2
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b04      	cmp	r3, #4
 8003846:	d917      	bls.n	8003878 <VL53LX_init_and_start_range+0x368>
 8003848:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800384c:	2b00      	cmp	r3, #0
 800384e:	d113      	bne.n	8003878 <VL53LX_init_and_start_range+0x368>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003850:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8003854:	f1c3 030d 	rsb	r3, r3, #13
 8003858:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800385c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 8003860:	f107 020c 	add.w	r2, r7, #12
 8003864:	4413      	add	r3, r2
 8003866:	461a      	mov	r2, r3
 8003868:	2117      	movs	r1, #23
 800386a:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800386e:	f00b f810 	bl	800e892 <VL53LX_i2c_encode_customer_nvm_managed>
 8003872:	4603      	mov	r3, r0
 8003874:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8003878:	1cbb      	adds	r3, r7, #2
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b03      	cmp	r3, #3
 800387e:	d917      	bls.n	80038b0 <VL53LX_init_and_start_range+0x3a0>
 8003880:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8003884:	2b00      	cmp	r3, #0
 8003886:	d113      	bne.n	80038b0 <VL53LX_init_and_start_range+0x3a0>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003888:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800388c:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8003890:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003894:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_config(
 8003898:	f107 020c 	add.w	r2, r7, #12
 800389c:	4413      	add	r3, r2
 800389e:	461a      	mov	r2, r3
 80038a0:	2120      	movs	r1, #32
 80038a2:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80038a6:	f00b f956 	bl	800eb56 <VL53LX_i2c_encode_static_config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80038b0:	1cbb      	adds	r3, r7, #2
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d917      	bls.n	80038e8 <VL53LX_init_and_start_range+0x3d8>
 80038b8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d113      	bne.n	80038e8 <VL53LX_init_and_start_range+0x3d8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80038c0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80038c4:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 80038c8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80038cc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_general_config(
 80038d0:	f107 020c 	add.w	r2, r7, #12
 80038d4:	4413      	add	r3, r2
 80038d6:	461a      	mov	r2, r3
 80038d8:	2116      	movs	r1, #22
 80038da:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80038de:	f00b fa1d 	bl	800ed1c <VL53LX_i2c_encode_general_config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80038e8:	1cbb      	adds	r3, r7, #2
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d917      	bls.n	8003920 <VL53LX_init_and_start_range+0x410>
 80038f0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d113      	bne.n	8003920 <VL53LX_init_and_start_range+0x410>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80038f8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80038fc:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8003900:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003904:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_timing_config(
 8003908:	f107 020c 	add.w	r2, r7, #12
 800390c:	4413      	add	r3, r2
 800390e:	461a      	mov	r2, r3
 8003910:	2117      	movs	r1, #23
 8003912:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8003916:	f00b fa85 	bl	800ee24 <VL53LX_i2c_encode_timing_config>
 800391a:	4603      	mov	r3, r0
 800391c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8003920:	1cbb      	adds	r3, r7, #2
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d036      	beq.n	8003996 <VL53LX_init_and_start_range+0x486>
 8003928:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800392c:	2b00      	cmp	r3, #0
 800392e:	d132      	bne.n	8003996 <VL53LX_init_and_start_range+0x486>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003930:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8003934:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8003938:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 800393c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003940:	791b      	ldrb	r3, [r3, #4]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d017      	beq.n	800397a <VL53LX_init_and_start_range+0x46a>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 800394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800394e:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	b2da      	uxtb	r2, r3
 8003956:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800395a:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 800395c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003960:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	b2da      	uxtb	r2, r3
 8003968:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800396c:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 800396e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003972:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8003974:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003978:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800397a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_dynamic_config(
 800397e:	f107 020c 	add.w	r2, r7, #12
 8003982:	4413      	add	r3, r2
 8003984:	461a      	mov	r2, r3
 8003986:	2112      	movs	r1, #18
 8003988:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800398c:	f00b facc 	bl	800ef28 <VL53LX_i2c_encode_dynamic_config>
 8003990:	4603      	mov	r3, r0
 8003992:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 8003996:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800399a:	2b00      	cmp	r3, #0
 800399c:	d113      	bne.n	80039c6 <VL53LX_init_and_start_range+0x4b6>

		i2c_buffer_offset_bytes =
 800399e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80039a2:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 80039a6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80039aa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_system_control(
 80039ae:	f107 020c 	add.w	r2, r7, #12
 80039b2:	4413      	add	r3, r2
 80039b4:	461a      	mov	r2, r3
 80039b6:	2105      	movs	r1, #5
 80039b8:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80039bc:	f00b fb39 	bl	800f032 <VL53LX_i2c_encode_system_control>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 80039c6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10c      	bne.n	80039e8 <VL53LX_init_and_start_range+0x4d8>
		status =
			VL53LX_WriteMulti(
 80039ce:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80039d2:	f107 020c 	add.w	r2, r7, #12
 80039d6:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 80039da:	1d38      	adds	r0, r7, #4
 80039dc:	6800      	ldr	r0, [r0, #0]
 80039de:	f00a fc2f 	bl	800e240 <VL53LX_WriteMulti>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 80039e8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <VL53LX_init_and_start_range+0x4ee>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 80039f0:	1d3b      	adds	r3, r7, #4
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	f003 f918 	bl	8006c28 <VL53LX_update_ll_driver_rd_state>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53LX_ERROR_NONE)
 80039fe:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <VL53LX_init_and_start_range+0x504>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 8003a06:	1d3b      	adds	r3, r7, #4
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	f003 faad 	bl	8006f68 <VL53LX_update_ll_driver_cfg_state>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8003a14:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop

08003a24 <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b0c8      	sub	sp, #288	; 0x120
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	1d3b      	adds	r3, r7, #4
 8003a2c:	6018      	str	r0, [r3, #0]
 8003a2e:	460a      	mov	r2, r1
 8003a30:	1cfb      	adds	r3, r7, #3
 8003a32:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003a34:	2300      	movs	r3, #0
 8003a36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003a3a:	1d3b      	adds	r3, r7, #4
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3318      	adds	r3, #24
 8003a40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 8003a44:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003a48:	f203 3366 	addw	r3, r3, #870	; 0x366
 8003a4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 8003a50:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003a54:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8003a58:	3318      	adds	r3, #24
 8003a5a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8003a5e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003a62:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8003a66:	331c      	adds	r3, #28
 8003a68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 8003a6c:	2388      	movs	r3, #136	; 0x88
 8003a6e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8003a7e:	1cfb      	adds	r3, r7, #3
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d008      	beq.n	8003a98 <VL53LX_get_measurement_results+0x74>
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d10d      	bne.n	8003aa6 <VL53LX_get_measurement_results+0x82>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8003a8a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8003a8e:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8003a92:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8003a96:	e00a      	b.n	8003aae <VL53LX_get_measurement_results+0x8a>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8003a98:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8003a9c:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8003aa0:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8003aa4:	e003      	b.n	8003aae <VL53LX_get_measurement_results+0x8a>
	default:
		i2c_buffer_size_bytes =
 8003aa6:	232c      	movs	r3, #44	; 0x2c
 8003aa8:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8003aac:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 8003aae:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10c      	bne.n	8003ad0 <VL53LX_get_measurement_results+0xac>
		status =
			VL53LX_ReadMulti(
 8003ab6:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8003aba:	f107 0208 	add.w	r2, r7, #8
 8003abe:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8003ac2:	1d38      	adds	r0, r7, #4
 8003ac4:	6800      	ldr	r0, [r0, #0]
 8003ac6:	f00a fbf1 	bl	800e2ac <VL53LX_ReadMulti>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 8003ad0:	1cfb      	adds	r3, r7, #3
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d917      	bls.n	8003b08 <VL53LX_get_measurement_results+0xe4>
 8003ad8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d113      	bne.n	8003b08 <VL53LX_get_measurement_results+0xe4>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003ae0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8003ae4:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8003ae8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8003aec:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_debug_results(
 8003af0:	f107 0208 	add.w	r2, r7, #8
 8003af4:	4413      	add	r3, r2
 8003af6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003afa:	4619      	mov	r1, r3
 8003afc:	2038      	movs	r0, #56	; 0x38
 8003afe:	f00b fc2a 	bl	800f356 <VL53LX_i2c_decode_debug_results>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 8003b08:	1cfb      	adds	r3, r7, #3
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d017      	beq.n	8003b40 <VL53LX_get_measurement_results+0x11c>
 8003b10:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d113      	bne.n	8003b40 <VL53LX_get_measurement_results+0x11c>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003b18:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8003b1c:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8003b20:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8003b24:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_core_results(
 8003b28:	f107 0208 	add.w	r2, r7, #8
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8003b32:	4619      	mov	r1, r3
 8003b34:	2021      	movs	r0, #33	; 0x21
 8003b36:	f00b fbad 	bl	800f294 <VL53LX_i2c_decode_core_results>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 8003b40:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d110      	bne.n	8003b6a <VL53LX_get_measurement_results+0x146>

		i2c_buffer_offset_bytes = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8003b4e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_system_results(
 8003b52:	f107 0208 	add.w	r2, r7, #8
 8003b56:	4413      	add	r3, r2
 8003b58:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	202c      	movs	r0, #44	; 0x2c
 8003b60:	f00b faa2 	bl	800f0a8 <VL53LX_i2c_decode_system_results>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8003b6a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 8003b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b7c:	b0a0      	sub	sp, #128	; 0x80
 8003b7e:	af06      	add	r7, sp, #24
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	460b      	mov	r3, r1
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53LX_LLDriverData_t *pdev =
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3318      	adds	r3, #24
 8003b92:	663b      	str	r3, [r7, #96]	; 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 8003b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b9e:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 8003ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ba2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003ba6:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 8003ba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003baa:	332c      	adds	r3, #44	; 0x2c
 8003bac:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 8003bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bb0:	33c2      	adds	r3, #194	; 0xc2
 8003bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 8003bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb6:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8003bba:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8003bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bc4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003bc8:	643b      	str	r3, [r7, #64]	; 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8003bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bcc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 8003bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bd4:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8003bd8:	3310      	adds	r3, #16
 8003bda:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8003bdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003be2:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8003be4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003be6:	3348      	adds	r3, #72	; 0x48
 8003be8:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 8003bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bec:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 8003bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bf4:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8003bf8:	331c      	adds	r3, #28
 8003bfa:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 8003bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bfe:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 8290 	beq.w	800412c <VL53LX_get_device_results+0x5b4>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 8003c0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c12:	4619      	mov	r1, r3
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 fbcb 	bl	80043b0 <VL53LX_get_histogram_bin_data>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 8003c20:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d118      	bne.n	8003c5a <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 8003c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2a:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d114      	bne.n	8003c5a <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 8003c30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 8003c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c42:	4413      	add	r3, r2
 8003c44:	1d1a      	adds	r2, r3, #4
 8003c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f004 f940 	bl	8007ed4 <VL53LX_hist_copy_and_scale_ambient_info>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 8003c5a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f040 8206 	bne.w	8004070 <VL53LX_get_device_results+0x4f8>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8003c64:	f107 0313 	add.w	r3, r7, #19
 8003c68:	4619      	mov	r1, r3
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f006 fd54 	bl	800a718 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8003c70:	7cfb      	ldrb	r3, [r7, #19]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 8003c76:	2301      	movs	r3, #1
 8003c78:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 8003c7a:	7cfb      	ldrb	r3, [r7, #19]
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 8003c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c84:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d107      	bne.n	8003c9c <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8003c8c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c92:	3202      	adds	r2, #2
 8003c94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8003c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9a:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8003c9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c9e:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 8003ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca4:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 8003ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	f004 f814 	bl	8007ce0 <VL53LX_calc_crosstalk_plane_offset_with_margin>
 8003cb8:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8003cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cbc:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8003cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8003cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc6:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8003cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cca:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8003cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd0:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 8003cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd4:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 8003cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cd8:	f883 2255 	strb.w	r2, [r3, #597]	; 0x255
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8003cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cde:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8003ce0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ce2:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8003ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce8:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8003cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cec:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8003cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cf2:	f8b3 22fe 	ldrh.w	r2, [r3, #766]	; 0x2fe
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8003cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cf8:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8003cfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cfe:	f893 2331 	ldrb.w	r2, [r3, #817]	; 0x331
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8003d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d04:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8003d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d0a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8003d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d10:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8003d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d14:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8003d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1a:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8003d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d1e:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8003d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d22:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 8003d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d26:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8003d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2a:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 8003d2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d2e:	f203 3292 	addw	r2, r3, #914	; 0x392
 8003d32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d34:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	f003 fa3a 	bl	80071b4 <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8003d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d42:	795b      	ldrb	r3, [r3, #5]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d002      	beq.n	8003d4e <VL53LX_get_device_results+0x1d6>
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d02e      	beq.n	8003daa <VL53LX_get_device_results+0x232>
 8003d4c:	e03d      	b.n	8003dca <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8003d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d50:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8003d54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8003d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d66:	f893 e3c2 	ldrb.w	lr, [r3, #962]	; 0x3c2
 8003d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d6c:	f893 83c3 	ldrb.w	r8, [r3, #963]	; 0x3c3
 8003d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d72:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8003d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d78:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 8003d7c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003d7e:	319c      	adds	r1, #156	; 0x9c
 8003d80:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003d82:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 8003d86:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 8003d8a:	b2a4      	uxth	r4, r4
 8003d8c:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8003d8e:	351c      	adds	r5, #28
 8003d90:	9505      	str	r5, [sp, #20]
 8003d92:	9404      	str	r4, [sp, #16]
 8003d94:	9003      	str	r0, [sp, #12]
 8003d96:	9102      	str	r1, [sp, #8]
 8003d98:	9201      	str	r2, [sp, #4]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	4643      	mov	r3, r8
 8003d9e:	4672      	mov	r2, lr
 8003da0:	4661      	mov	r1, ip
 8003da2:	4630      	mov	r0, r6
 8003da4:	f004 ff47 	bl	8008c36 <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8003da8:	e013      	b.n	8003dd2 <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8003daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dac:	331c      	adds	r3, #28
 8003dae:	4619      	mov	r1, r3
 8003db0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003db2:	f7fe fb35 	bl	8002420 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 8003db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	b21a      	sxth	r2, r3
 8003dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc6:	839a      	strh	r2, [r3, #28]
		break;
 8003dc8:	e003      	b.n	8003dd2 <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 8003dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dcc:	2200      	movs	r2, #0
 8003dce:	839a      	strh	r2, [r3, #28]
		break;
 8003dd0:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 8003dd2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f040 814c 	bne.w	8004074 <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 8003ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dde:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 8003de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de4:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 8003de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dea:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8003dee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003df0:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		VL53LX_calc_max_effective_spads(
 8003df4:	b29c      	uxth	r4, r3
 8003df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003df8:	f203 236a 	addw	r3, r3, #618	; 0x26a
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	4623      	mov	r3, r4
 8003e00:	f005 f8be 	bl	8008f80 <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 8003e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e06:	799b      	ldrb	r3, [r3, #6]
 8003e08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 fee2 	bl	8004bd6 <VL53LX_get_dmax_calibration_data>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 8003e18:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f040 812b 	bne.w	8004078 <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 8003e22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e24:	f503 7515 	add.w	r5, r3, #596	; 0x254
 8003e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e2a:	f503 7605 	add.w	r6, r3, #532	; 0x214
 8003e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e36:	f202 521c 	addw	r2, r2, #1308	; 0x51c
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8003e3a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003e3c:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
				pdev->wArea2,
 8003e40:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003e42:	f500 50d0 	add.w	r0, r0, #6656	; 0x1a00
		status = VL53LX_ipp_hist_process_data(
 8003e46:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003e48:	9405      	str	r4, [sp, #20]
 8003e4a:	f107 0413 	add.w	r4, r7, #19
 8003e4e:	9404      	str	r4, [sp, #16]
 8003e50:	9003      	str	r0, [sp, #12]
 8003e52:	9102      	str	r1, [sp, #8]
 8003e54:	9201      	str	r2, [sp, #4]
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	4633      	mov	r3, r6
 8003e5a:	462a      	mov	r2, r5
 8003e5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f00a fc1a 	bl	800e698 <VL53LX_ipp_hist_process_data>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8003e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e6c:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d150      	bne.n	8003f16 <VL53LX_get_device_results+0x39e>
			(histo_merge_nb > 1))
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d94d      	bls.n	8003f16 <VL53LX_get_device_results+0x39e>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8003e80:	e045      	b.n	8003f0e <VL53LX_get_device_results+0x396>
			pdata = &(presults->VL53LX_p_003[i]);
 8003e82:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003e86:	224c      	movs	r2, #76	; 0x4c
 8003e88:	fb02 f303 	mul.w	r3, r2, r3
 8003e8c:	3310      	adds	r3, #16
 8003e8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e90:	4413      	add	r3, r2
 8003e92:	3304      	adds	r3, #4
 8003e94:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	7cfa      	ldrb	r2, [r7, #19]
 8003e9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	7cfa      	ldrb	r2, [r7, #19]
 8003eaa:	fbb3 f2f2 	udiv	r2, r3, r2
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	7cfa      	ldrb	r2, [r7, #19]
 8003eb8:	fb93 f2f2 	sdiv	r2, r3, r2
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	7cfb      	ldrb	r3, [r7, #19]
 8003ec8:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	7cfb      	ldrb	r3, [r7, #19]
 8003eda:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003ee8:	461a      	mov	r2, r3
 8003eea:	7cfb      	ldrb	r3, [r7, #19]
 8003eec:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	7cfa      	ldrb	r2, [r7, #19]
 8003efc:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8003f04:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003f08:	3301      	adds	r3, #1
 8003f0a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8003f0e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d9b5      	bls.n	8003e82 <VL53LX_get_device_results+0x30a>
		}


		if (status != VL53LX_ERROR_NONE)
 8003f16:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f040 80ae 	bne.w	800407c <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 8003f20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f22:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8003f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f28:	f503 7171 	add.w	r1, r3, #964	; 0x3c4
 8003f2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f2e:	330e      	adds	r3, #14
 8003f30:	461a      	mov	r2, r3
 8003f32:	f004 fe4a 	bl	8008bca <VL53LX_hist_wrap_dmax>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 8003f3c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f040 809d 	bne.w	8004080 <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8003f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8003f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f58:	4413      	add	r3, r2
 8003f5a:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8003f5c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 8003f60:	4613      	mov	r3, r2
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8003f6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f6e:	4413      	add	r3, r2
 8003f70:	f103 0208 	add.w	r2, r3, #8
 8003f74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f004 f9da 	bl	8008330 <VL53LX_hist_phase_consistency_check>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 8003f82:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d17c      	bne.n	8004084 <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8003f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8003f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f9c:	4413      	add	r3, r2
 8003f9e:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8003fa0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8003fb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f103 0208 	add.w	r2, r3, #8
 8003fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f004 fdab 	bl	8008b1a <VL53LX_hist_xmonitor_consistency_check>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 8003fca:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d15a      	bne.n	8004088 <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 8003fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	2205      	movs	r2, #5
 8003fe0:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 8003fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fe4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8003fe8:	3301      	adds	r3, #1
 8003fea:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8003fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fee:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8003ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003ff6:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8003ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ffa:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
		if (zid <
 8003ffe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004002:	429a      	cmp	r2, r3
 8004004:	d222      	bcs.n	800404c <VL53LX_get_device_results+0x4d4>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 8004006:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			phist_info =
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800400e:	4413      	add	r3, r2
 8004010:	3304      	adds	r3, #4
 8004012:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8004014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004016:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8004018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401a:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 800401c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401e:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8004020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004022:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8004024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004026:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 800402a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800402c:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 800402e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004030:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53LX_p_005 =
 8004034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004036:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8004038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 800403e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004040:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8004042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004044:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 8004048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800404a:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 800404c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004050:	2b00      	cmp	r3, #0
 8004052:	d11b      	bne.n	800408c <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 8004054:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004056:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 800405a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800405c:	f203 3266 	addw	r2, r3, #870	; 0x366
 8004060:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004062:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8004066:	3318      	adds	r3, #24
 8004068:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800406a:	f005 f8e6 	bl	800923a <VL53LX_hist_copy_results_to_sys_and_core>
 800406e:	e00e      	b.n	800408e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004070:	bf00      	nop
 8004072:	e00c      	b.n	800408e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004074:	bf00      	nop
 8004076:	e00a      	b.n	800408e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004078:	bf00      	nop
 800407a:	e008      	b.n	800408e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 800407c:	bf00      	nop
 800407e:	e006      	b.n	800408e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004080:	bf00      	nop
 8004082:	e004      	b.n	800408e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004084:	bf00      	nop
 8004086:	e002      	b.n	800408e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004088:	bf00      	nop
 800408a:	e000      	b.n	800408e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 800408c:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 800408e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004090:	785b      	ldrb	r3, [r3, #1]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d036      	beq.n	8004104 <VL53LX_get_device_results+0x58c>
			if (pstate->rd_device_state !=
 8004096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004098:	79db      	ldrb	r3, [r3, #7]
 800409a:	2b06      	cmp	r3, #6
 800409c:	d00a      	beq.n	80040b4 <VL53LX_get_device_results+0x53c>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 800409e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d106      	bne.n	80040b4 <VL53LX_get_device_results+0x53c>
					status = VL53LX_dynamic_zone_update(
 80040a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f005 f99a 	bl	80093e2 <VL53LX_dynamic_zone_update>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80040b4:	2300      	movs	r3, #0
 80040b6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80040ba:	e015      	b.n	80040e8 <VL53LX_get_device_results+0x570>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 80040bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040be:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 80040c2:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <VL53LX_get_device_results+0x556>
 80040ca:	2103      	movs	r1, #3
 80040cc:	e000      	b.n	80040d0 <VL53LX_get_device_results+0x558>
 80040ce:	2101      	movs	r1, #1
 80040d0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80040d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040d6:	4413      	add	r3, r2
 80040d8:	460a      	mov	r2, r1
 80040da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80040de:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80040e2:	3301      	adds	r3, #1
 80040e4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80040e8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d9e5      	bls.n	80040bc <VL53LX_get_device_results+0x544>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 80040f0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d105      	bne.n	8004104 <VL53LX_get_device_results+0x58c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f005 f9ec 	bl	80094d6 <VL53LX_multizone_hist_bins_update>
 80040fe:	4603      	mov	r3, r0
 8004100:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 8004104:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004108:	2b00      	cmp	r3, #0
 800410a:	d105      	bne.n	8004118 <VL53LX_get_device_results+0x5a0>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f005 fe43 	bl	8009d98 <VL53LX_dynamic_xtalk_correction_corrector>
 8004112:	4603      	mov	r3, r0
 8004114:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (pdev->tuning_parms.tp_hist_merge == 1)
 8004118:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800411a:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800411e:	2b01      	cmp	r3, #1
 8004120:	d151      	bne.n	80041c6 <VL53LX_get_device_results+0x64e>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8004126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e04c      	b.n	80041c6 <VL53LX_get_device_results+0x64e>
	} else {

		if (status == VL53LX_ERROR_NONE)
 800412c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004130:	2b00      	cmp	r3, #0
 8004132:	d107      	bne.n	8004144 <VL53LX_get_device_results+0x5cc>
			status = VL53LX_get_measurement_results(
 8004134:	7afb      	ldrb	r3, [r7, #11]
 8004136:	4619      	mov	r1, r3
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f7ff fc73 	bl	8003a24 <VL53LX_get_measurement_results>
 800413e:	4603      	mov	r3, r0
 8004140:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 8004144:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10d      	bne.n	8004168 <VL53LX_get_device_results+0x5f0>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800414c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800414e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 8004152:	4618      	mov	r0, r3
 8004154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004156:	f203 3166 	addw	r1, r3, #870	; 0x366
 800415a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800415c:	f503 5299 	add.w	r2, r3, #4896	; 0x1320
 8004160:	3218      	adds	r2, #24
 8004162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004164:	f000 fb86 	bl	8004874 <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8004168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416a:	785b      	ldrb	r3, [r3, #1]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d12a      	bne.n	80041c6 <VL53LX_get_device_results+0x64e>

			if ((status == VL53LX_ERROR_NONE) &&
 8004170:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10d      	bne.n	8004194 <VL53LX_get_device_results+0x61c>
				(pL->low_power_auto_range_count == 0)) {
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <VL53LX_get_device_results+0x61c>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f006 f9ef 	bl	800a564 <VL53LX_low_power_auto_setup_manual_calibration>
 8004186:	4603      	mov	r3, r0
 8004188:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 800418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418e:	2201      	movs	r2, #1
 8004190:	709a      	strb	r2, [r3, #2]
 8004192:	e00a      	b.n	80041aa <VL53LX_get_device_results+0x632>
			} else if ((status == VL53LX_ERROR_NONE) &&
 8004194:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004198:	2b00      	cmp	r3, #0
 800419a:	d106      	bne.n	80041aa <VL53LX_get_device_results+0x632>
				(pL->low_power_auto_range_count == 1)) {
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d102      	bne.n	80041aa <VL53LX_get_device_results+0x632>
				pL->low_power_auto_range_count = 2;
 80041a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a6:	2202      	movs	r2, #2
 80041a8:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	789b      	ldrb	r3, [r3, #2]
 80041ae:	2bff      	cmp	r3, #255	; 0xff
 80041b0:	d009      	beq.n	80041c6 <VL53LX_get_device_results+0x64e>
 80041b2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d105      	bne.n	80041c6 <VL53LX_get_device_results+0x64e>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f006 fa24 	bl	800a608 <VL53LX_low_power_auto_update_DSS>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80041c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041c8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80041cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041ce:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80041d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041d2:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80041d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041d8:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 80041da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041dc:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80041e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041e2:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 80041e4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f040 80b0 	bne.w	800434e <VL53LX_get_device_results+0x7d6>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 80041ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041f0:	2205      	movs	r2, #5
 80041f2:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 80041f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80041fc:	3301      	adds	r3, #1
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004202:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
		zid = pdev->ll_state.rd_zone_id;
 8004206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004208:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800420c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (zid < pres->zone_results.max_zones) {
 8004210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004212:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8004216:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800421a:	429a      	cmp	r2, r3
 800421c:	f080 8097 	bcs.w	800434e <VL53LX_get_device_results+0x7d6>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 8004220:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
			pobjects =
 8004224:	4613      	mov	r3, r2
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004230:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004232:	4413      	add	r3, r2
 8004234:	3308      	adds	r3, #8
 8004236:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8004238:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800423a:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 800423c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800423e:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8004240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004242:	785a      	ldrb	r2, [r3, #1]
 8004244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004246:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8004248:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800424a:	789a      	ldrb	r2, [r3, #2]
 800424c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800424e:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8004250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004252:	78da      	ldrb	r2, [r3, #3]
 8004254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004256:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 8004258:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800425a:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 800425e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004260:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 8004262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004264:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 8004268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800426a:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 800426c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800426e:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 8004272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004274:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8004278:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800427a:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 800427e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 8004284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004286:	7c5a      	ldrb	r2, [r3, #17]
 8004288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428a:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 800428c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800428e:	7c9a      	ldrb	r2, [r3, #18]
 8004290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004292:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8004294:	2300      	movs	r3, #0
 8004296:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800429a:	e052      	b.n	8004342 <VL53LX_get_device_results+0x7ca>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 800429c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 80042a0:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 80042a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042a6:	204c      	movs	r0, #76	; 0x4c
 80042a8:	fb00 f303 	mul.w	r3, r0, r3
 80042ac:	440b      	add	r3, r1
 80042ae:	3338      	adds	r3, #56	; 0x38
 80042b0:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 80042b2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80042b4:	4613      	mov	r3, r2
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4403      	add	r3, r0
 80042be:	3308      	adds	r3, #8
 80042c0:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 80042c2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 80042c6:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 80042ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042cc:	204c      	movs	r0, #76	; 0x4c
 80042ce:	fb00 f303 	mul.w	r3, r0, r3
 80042d2:	440b      	add	r3, r1
 80042d4:	333c      	adds	r3, #60	; 0x3c
 80042d6:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 80042d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80042da:	4613      	mov	r3, r2
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	4413      	add	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4403      	add	r3, r0
 80042e4:	330c      	adds	r3, #12
 80042e6:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 80042e8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 80042ec:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 80042f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042f2:	204c      	movs	r0, #76	; 0x4c
 80042f4:	fb00 f303 	mul.w	r3, r0, r3
 80042f8:	440b      	add	r3, r1
 80042fa:	3354      	adds	r3, #84	; 0x54
 80042fc:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 80042fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004300:	4613      	mov	r3, r2
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	3310      	adds	r3, #16
 800430c:	4602      	mov	r2, r0
 800430e:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8004310:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].range_status =
 8004314:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].range_status;
 8004318:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800431a:	204c      	movs	r0, #76	; 0x4c
 800431c:	fb00 f303 	mul.w	r3, r0, r3
 8004320:	440b      	add	r3, r1
 8004322:	335e      	adds	r3, #94	; 0x5e
 8004324:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 8004326:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004328:	4613      	mov	r3, r2
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	3312      	adds	r3, #18
 8004334:	4602      	mov	r2, r0
 8004336:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8004338:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800433c:	3301      	adds	r3, #1
 800433e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004344:	7c9b      	ldrb	r3, [r3, #18]
 8004346:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800434a:	429a      	cmp	r2, r3
 800434c:	d3a6      	bcc.n	800429c <VL53LX_get_device_results+0x724>
		}
	}



	memcpy(
 800434e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8004352:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f00f fcd7 	bl	8013d08 <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 800435a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800435e:	2b00      	cmp	r3, #0
 8004360:	d105      	bne.n	800436e <VL53LX_get_device_results+0x7f6>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f002 fd4e 	bl	8006e04 <VL53LX_check_ll_driver_rd_state>
 8004368:	4603      	mov	r3, r0
 800436a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800436e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8004372:	4618      	mov	r0, r3
 8004374:	3768      	adds	r7, #104	; 0x68
 8004376:	46bd      	mov	sp, r7
 8004378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800437c <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004388:	2300      	movs	r3, #0
 800438a:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 800438c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d107      	bne.n	80043a4 <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	2203      	movs	r2, #3
 8004398:	4619      	mov	r1, r3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff f8b8 	bl	8003510 <VL53LX_init_and_start_range>
 80043a0:	4603      	mov	r3, r0
 80043a2:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 80043a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b0d2      	sub	sp, #328	; 0x148
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	1d3b      	adds	r3, r7, #4
 80043b8:	6018      	str	r0, [r3, #0]
 80043ba:	463b      	mov	r3, r7
 80043bc:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80043be:	2300      	movs	r3, #0
 80043c0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev =
 80043c4:	1d3b      	adds	r3, r7, #4
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3318      	adds	r3, #24
 80043ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80043ce:	1d3b      	adds	r3, r7, #4
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80043d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 80043da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80043de:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80043e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 80043e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80043ea:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80043ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 80043f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80043f6:	f203 331e 	addw	r3, r3, #798	; 0x31e
 80043fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 80043fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004402:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8004406:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 800440a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800440e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8004412:	f107 030c 	add.w	r3, r7, #12
 8004416:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 800441a:	2300      	movs	r3, #0
 800441c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8004426:	2300      	movs	r3, #0
 8004428:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c

	uint32_t   pll_period_us            = 0;
 8004432:	2300      	movs	r3, #0
 8004434:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8004438:	2300      	movs	r3, #0
 800443a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t    i                        = 0;
 800443e:	2300      	movs	r3, #0
 8004440:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b

	int32_t    hist_merge				= 0;
 8004444:	f107 0308 	add.w	r3, r7, #8
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800444c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <VL53LX_get_histogram_bin_data+0xba>
		status = VL53LX_ReadMulti(
 8004454:	1d38      	adds	r0, r7, #4
 8004456:	2353      	movs	r3, #83	; 0x53
 8004458:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800445c:	2188      	movs	r1, #136	; 0x88
 800445e:	6800      	ldr	r0, [r0, #0]
 8004460:	f009 ff24 	bl	800e2ac <VL53LX_ReadMulti>
 8004464:	4603      	mov	r3, r0
 8004466:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 800446a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800446e:	781a      	ldrb	r2, [r3, #0]
 8004470:	463b      	mov	r3, r7
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8004478:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800447c:	785a      	ldrb	r2, [r3, #1]
 800447e:	463b      	mov	r3, r7
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8004486:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800448a:	789a      	ldrb	r2, [r3, #2]
 800448c:	463b      	mov	r3, r7
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8004494:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004498:	78da      	ldrb	r2, [r3, #3]
 800449a:	463b      	mov	r3, r7
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 80044a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80044a6:	3304      	adds	r3, #4
 80044a8:	4619      	mov	r1, r3
 80044aa:	2002      	movs	r0, #2
 80044ac:	f003 f975 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 80044b0:	4603      	mov	r3, r0
 80044b2:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 80044b4:	463b      	mov	r3, r7
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 80044bc:	234e      	movs	r3, #78	; 0x4e
 80044be:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 80044c2:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80044c6:	f107 020c 	add.w	r2, r7, #12
 80044ca:	4413      	add	r3, r2
 80044cc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 80044d0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80044d4:	2002      	movs	r0, #2
 80044d6:	f003 f960 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 80044da:	4603      	mov	r3, r0
 80044dc:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80044de:	463b      	mov	r3, r7
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 80044e6:	2350      	movs	r3, #80	; 0x50
 80044e8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 80044ec:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80044f0:	f107 020c 	add.w	r2, r7, #12
 80044f4:	5cd2      	ldrb	r2, [r2, r3]
 80044f6:	463b      	mov	r3, r7
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 80044fe:	463b      	mov	r3, r7
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8004506:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800450a:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 800450e:	331c      	adds	r3, #28
 8004510:	801a      	strh	r2, [r3, #0]
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8004512:	463b      	mov	r3, r7
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 800451a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800451e:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8004522:	331e      	adds	r3, #30
 8004524:	701a      	strb	r2, [r3, #0]



	i2c_buffer_offset_bytes =
 8004526:	2351      	movs	r3, #81	; 0x51
 8004528:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 800452c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004530:	f107 020c 	add.w	r2, r7, #12
 8004534:	5cd3      	ldrb	r3, [r2, r3]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 800453c:	2352      	movs	r3, #82	; 0x52
 800453e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8004542:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004546:	f107 020c 	add.w	r2, r7, #12
 800454a:	5cd2      	ldrb	r2, [r2, r3]
 800454c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8004550:	4413      	add	r3, r2
 8004552:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8004556:	234d      	movs	r3, #77	; 0x4d
 8004558:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 800455c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004560:	f107 020c 	add.w	r2, r7, #12
 8004564:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8004568:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 800456a:	2306      	movs	r3, #6
 800456c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8004570:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004574:	f107 020c 	add.w	r2, r7, #12
 8004578:	4413      	add	r3, r2
 800457a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 800457e:	2300      	movs	r3, #0
 8004580:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8004584:	e017      	b.n	80045b6 <VL53LX_get_histogram_bin_data+0x206>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8004586:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800458a:	2003      	movs	r0, #3
 800458c:	f003 f9a4 	bl	80078d8 <VL53LX_i2c_decode_uint32_t>
 8004590:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8004592:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8004596:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8004598:	463b      	mov	r3, r7
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3206      	adds	r2, #6
 800459e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 80045a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80045a6:	3303      	adds	r3, #3
 80045a8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 80045ac:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80045b0:	3301      	adds	r3, #1
 80045b2:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80045b6:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80045ba:	2b17      	cmp	r3, #23
 80045bc:	d9e3      	bls.n	8004586 <VL53LX_get_histogram_bin_data+0x1d6>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 80045be:	f107 0208 	add.w	r2, r7, #8
 80045c2:	1d3b      	adds	r3, r7, #4
 80045c4:	f248 018d 	movw	r1, #32909	; 0x808d
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	f000 fb2f 	bl	8004c2c <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 80045ce:	463b      	mov	r3, r7
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d118      	bne.n	800460c <VL53LX_get_histogram_bin_data+0x25c>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80045da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80045de:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80045e2:	3310      	adds	r3, #16
 80045e4:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f00f fb9a 	bl	8013d24 <memset>
		pdev->bin_rec_pos = 0;
 80045f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80045f4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80045f8:	330c      	adds	r3, #12
 80045fa:	2200      	movs	r2, #0
 80045fc:	701a      	strb	r2, [r3, #0]
		pdev->pos_before_next_recom = 0;
 80045fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004602:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8004606:	330d      	adds	r3, #13
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
	}

	if (hist_merge == 1)
 800460c:	f107 0308 	add.w	r3, r7, #8
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d105      	bne.n	8004622 <VL53LX_get_histogram_bin_data+0x272>
		vl53lx_histo_merge(Dev, pdata);
 8004616:	463a      	mov	r2, r7
 8004618:	1d3b      	adds	r3, r7, #4
 800461a:	6811      	ldr	r1, [r2, #0]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	f7fd fff6 	bl	800260e <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8004622:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004626:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800462a:	463b      	mov	r3, r7
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 8004630:	463b      	mov	r3, r7
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2200      	movs	r2, #0
 8004636:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8004638:	463b      	mov	r3, r7
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2218      	movs	r2, #24
 800463e:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8004640:	463b      	mov	r3, r7
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2218      	movs	r2, #24
 8004646:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8004648:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800464c:	78da      	ldrb	r2, [r3, #3]
 800464e:	463b      	mov	r3, r7
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8004656:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800465a:	799b      	ldrb	r3, [r3, #6]
 800465c:	b29b      	uxth	r3, r3
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8004662:	463b      	mov	r3, r7
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 800466a:	463b      	mov	r3, r7
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8004672:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004676:	7c1b      	ldrb	r3, [r3, #16]
 8004678:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 800467a:	4413      	add	r3, r2
 800467c:	b29a      	uxth	r2, r3
 800467e:	463b      	mov	r3, r7
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8004686:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800468a:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 800468c:	463b      	mov	r3, r7
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 8004694:	463a      	mov	r2, r7
 8004696:	1d3b      	adds	r3, r7, #4
 8004698:	6811      	ldr	r1, [r2, #0]
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	f003 fcea 	bl	8008074 <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 80046a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80046a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d114      	bne.n	80046d6 <VL53LX_get_histogram_bin_data+0x326>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 80046ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046b0:	791b      	ldrb	r3, [r3, #4]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	021b      	lsls	r3, r3, #8
 80046b6:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 80046b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046bc:	795b      	ldrb	r3, [r3, #5]
 80046be:	b29b      	uxth	r3, r3
		encoded_timeout =
 80046c0:	4413      	add	r3, r2
 80046c2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 80046c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046ca:	799a      	ldrb	r2, [r3, #6]
 80046cc:	463b      	mov	r3, r7
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80046d4:	e013      	b.n	80046fe <VL53LX_get_histogram_bin_data+0x34e>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 80046d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046da:	79db      	ldrb	r3, [r3, #7]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	021b      	lsls	r3, r3, #8
 80046e0:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 80046e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046e6:	7a1b      	ldrb	r3, [r3, #8]
 80046e8:	b29b      	uxth	r3, r3
		encoded_timeout =
 80046ea:	4413      	add	r3, r2
 80046ec:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 80046f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046f4:	7a5a      	ldrb	r2, [r3, #9]
 80046f6:	463b      	mov	r3, r7
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 80046fe:	463b      	mov	r3, r7
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8004706:	2300      	movs	r3, #0
 8004708:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 800470c:	e016      	b.n	800473c <VL53LX_get_histogram_bin_data+0x38c>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 800470e:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8004712:	463a      	mov	r2, r7
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	4413      	add	r3, r2
 8004718:	7b1b      	ldrb	r3, [r3, #12]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	2b07      	cmp	r3, #7
 8004720:	d107      	bne.n	8004732 <VL53LX_get_histogram_bin_data+0x382>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8004722:	463b      	mov	r3, r7
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	7adb      	ldrb	r3, [r3, #11]
 8004728:	3304      	adds	r3, #4
 800472a:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 800472c:	463b      	mov	r3, r7
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8004732:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8004736:	3301      	adds	r3, #1
 8004738:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 800473c:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8004740:	2b05      	cmp	r3, #5
 8004742:	d9e4      	bls.n	800470e <VL53LX_get_histogram_bin_data+0x35e>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 8004744:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004748:	4618      	mov	r0, r3
 800474a:	f003 fb34 	bl	8007db6 <VL53LX_decode_timeout>
 800474e:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8004750:	463b      	mov	r3, r7
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 8004758:	463b      	mov	r3, r7
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8004760:	4618      	mov	r0, r3
 8004762:	f006 f819 	bl	800a798 <VL53LX_calc_pll_period_us>
 8004766:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 800476a:	463b      	mov	r3, r7
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	3301      	adds	r3, #1
 8004774:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8004778:	463b      	mov	r3, r7
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53LX_duration_maths(
 8004780:	4619      	mov	r1, r3
 8004782:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800478a:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800478e:	f006 f81a 	bl	800a7c6 <VL53LX_duration_maths>
 8004792:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8004794:	463b      	mov	r3, r7
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 800479c:	463b      	mov	r3, r7
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 80047a6:	463b      	mov	r3, r7
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	f006 f923 	bl	800a9f4 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 80047ae:	463b      	mov	r3, r7
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	f006 fd30 	bl	800b216 <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 80047b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80047ba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80047be:	463b      	mov	r3, r7
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 80047c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80047c8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80047cc:	463b      	mov	r3, r7
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 80047d2:	463b      	mov	r3, r7
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	789b      	ldrb	r3, [r3, #2]
 80047d8:	461a      	mov	r2, r3
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80047e6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80047ea:	4413      	add	r3, r2
 80047ec:	3302      	adds	r3, #2
 80047ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 80047f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f6:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 80047f8:	463b      	mov	r3, r7
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8004800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004804:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8004806:	463b      	mov	r3, r7
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 800480e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004812:	2200      	movs	r2, #0
 8004814:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8004816:	463b      	mov	r3, r7
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	2b11      	cmp	r3, #17
 8004824:	bf8c      	ite	hi
 8004826:	2201      	movhi	r2, #1
 8004828:	2200      	movls	r2, #0
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	2a00      	cmp	r2, #0
 800482e:	d118      	bne.n	8004862 <VL53LX_get_histogram_bin_data+0x4b2>
 8004830:	2201      	movs	r2, #1
 8004832:	409a      	lsls	r2, r3
 8004834:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <VL53LX_get_histogram_bin_data+0x4c0>)
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	bf14      	ite	ne
 800483c:	2301      	movne	r3, #1
 800483e:	2300      	moveq	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00d      	beq.n	8004862 <VL53LX_get_histogram_bin_data+0x4b2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8004846:	463b      	mov	r3, r7
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	b2da      	uxtb	r2, r3
 8004854:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004858:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 800485a:	23fa      	movs	r3, #250	; 0xfa
 800485c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8004860:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8004862:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8004866:	4618      	mov	r0, r3
 8004868:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	0002200e 	.word	0x0002200e

08004874 <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 8004874:	b480      	push	{r7}
 8004876:	b08b      	sub	sp, #44	; 0x2c
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8004882:	2300      	movs	r3, #0
 8004884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2200      	movs	r2, #0
 8004894:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	78da      	ldrb	r2, [r3, #3]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2200      	movs	r2, #0
 80048a2:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2204      	movs	r2, #4
 80048a8:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2201      	movs	r2, #1
 80048ae:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	8a1b      	ldrh	r3, [r3, #16]
 80048b4:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	8a9b      	ldrh	r3, [r3, #20]
 80048ba:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	8a5b      	ldrh	r3, [r3, #18]
 80048c0:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 80048c2:	2300      	movs	r3, #0
 80048c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048c8:	e00b      	b.n	80048e2 <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 80048ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	4413      	add	r3, r2
 80048d4:	2200      	movs	r2, #0
 80048d6:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 80048d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048dc:	3301      	adds	r3, #1
 80048de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d9ef      	bls.n	80048ca <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	3314      	adds	r3, #20
 80048ee:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 80048f0:	2300      	movs	r3, #0
 80048f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048f6:	e0fe      	b.n	8004af6 <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80048fe:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	2200      	movs	r2, #0
 8004904:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	78db      	ldrb	r3, [r3, #3]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	785b      	ldrb	r3, [r3, #1]
 8004912:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8004916:	2b09      	cmp	r3, #9
 8004918:	d104      	bne.n	8004924 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	2213      	movs	r2, #19
 800491e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8004922:	e007      	b.n	8004934 <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	785b      	ldrb	r3, [r3, #1]
 8004928:	f003 031f 	and.w	r3, r3, #31
 800492c:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	2200      	movs	r2, #0
 8004938:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	2200      	movs	r2, #0
 800493e:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	2200      	movs	r2, #0
 8004944:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	2200      	movs	r2, #0
 800494a:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	2200      	movs	r2, #0
 8004950:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	2200      	movs	r2, #0
 8004956:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8004958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 8004960:	2b01      	cmp	r3, #1
 8004962:	d05c      	beq.n	8004a1e <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 8004964:	e0a8      	b.n	8004ab8 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	789b      	ldrb	r3, [r3, #2]
 800496a:	2b07      	cmp	r3, #7
 800496c:	d103      	bne.n	8004976 <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	8a7a      	ldrh	r2, [r7, #18]
 8004972:	82da      	strh	r2, [r3, #22]
 8004974:	e00b      	b.n	800498e <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	789b      	ldrb	r3, [r3, #2]
 800497a:	2b08      	cmp	r3, #8
 800497c:	d103      	bne.n	8004986 <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	8aba      	ldrh	r2, [r7, #20]
 8004982:	82da      	strh	r2, [r3, #22]
 8004984:	e003      	b.n	800498e <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	8afa      	ldrh	r2, [r7, #22]
 8004992:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	895b      	ldrh	r3, [r3, #10]
 80049a8:	015b      	lsls	r3, r3, #5
 80049aa:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b2:	d302      	bcc.n	80049ba <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 80049b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049b8:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	b29a      	uxth	r2, r3
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 80049d0:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	fb02 f303 	mul.w	r3, r2, r3
 80049da:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049e2:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	da01      	bge.n	80049ee <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 80049ea:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80049ee:	12db      	asrs	r3, r3, #11
 80049f0:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	b21a      	sxth	r2, r3
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8004a1c:	e04c      	b.n	8004ab8 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a34:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	8bdb      	ldrh	r3, [r3, #30]
 8004a42:	015b      	lsls	r3, r3, #5
 8004a44:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4c:	d302      	bcc.n	8004a54 <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 8004a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a52:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 8004a6a:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	fb02 f303 	mul.w	r3, r2, r3
 8004a74:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a7c:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	da01      	bge.n	8004a88 <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 8004a84:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8004a88:	12db      	asrs	r3, r3, #11
 8004a8a:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	b21a      	sxth	r2, r3
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8004ab6:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	334c      	adds	r3, #76	; 0x4c
 8004aea:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8004aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004af0:	3301      	adds	r3, #1
 8004af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	f67f aefc 	bls.w	80048f8 <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2200      	movs	r2, #0
 8004b04:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	785b      	ldrb	r3, [r3, #1]
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	2b11      	cmp	r3, #17
 8004b10:	bf8c      	ite	hi
 8004b12:	2201      	movhi	r2, #1
 8004b14:	2200      	movls	r2, #0
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	2a00      	cmp	r2, #0
 8004b1a:	d116      	bne.n	8004b4a <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bf14      	ite	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	2300      	moveq	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00b      	beq.n	8004b4a <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	f003 031f 	and.w	r3, r3, #31
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 8004b48:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8004b4a:	bf00      	nop
 8004b4c:	372c      	adds	r7, #44	; 0x2c
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	0002200e 	.word	0x0002200e

08004b5c <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004b66:	2300      	movs	r3, #0
 8004b68:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3318      	adds	r3, #24
 8004b6e:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	332c      	adds	r3, #44	; 0x2c
 8004b74:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b05      	cmp	r3, #5
 8004b7c:	d109      	bne.n	8004b92 <VL53LX_set_zone_dss_config+0x36>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2202      	movs	r2, #2
 8004b82:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
 8004b90:	e003      	b.n	8004b9a <VL53LX_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 8004b9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b085      	sub	sp, #20
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3318      	adds	r3, #24
 8004bbe:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	78fa      	ldrb	r2, [r7, #3]
 8004bc4:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8004bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b086      	sub	sp, #24
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	460b      	mov	r3, r1
 8004be0:	607a      	str	r2, [r7, #4]
 8004be2:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004be4:	2300      	movs	r3, #0
 8004be6:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	3318      	adds	r3, #24
 8004bec:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8004bee:	7afb      	ldrb	r3, [r7, #11]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d009      	beq.n	8004c08 <VL53LX_get_dmax_calibration_data+0x32>
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d10f      	bne.n	8004c18 <VL53LX_get_dmax_calibration_data+0x42>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8004bfc:	220a      	movs	r2, #10
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f00f f881 	bl	8013d08 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 8004c06:	e00a      	b.n	8004c1e <VL53LX_get_dmax_calibration_data+0x48>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8004c0c:	220a      	movs	r2, #10
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f00f f879 	bl	8013d08 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 8004c16:	e002      	b.n	8004c1e <VL53LX_get_dmax_calibration_data+0x48>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8004c18:	23fc      	movs	r3, #252	; 0xfc
 8004c1a:	75fb      	strb	r3, [r7, #23]
	break;
 8004c1c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8004c1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b089      	sub	sp, #36	; 0x24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	460b      	mov	r3, r1
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3318      	adds	r3, #24
 8004c42:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004c4a:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8004c52:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8004c54:	897b      	ldrh	r3, [r7, #10]
 8004c56:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8004c5a:	2bb9      	cmp	r3, #185	; 0xb9
 8004c5c:	f200 86ca 	bhi.w	80059f4 <VL53LX_get_tuning_parm+0xdc8>
 8004c60:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <VL53LX_get_tuning_parm+0x3c>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004f51 	.word	0x08004f51
 8004c6c:	08004f61 	.word	0x08004f61
 8004c70:	08004f71 	.word	0x08004f71
 8004c74:	08004f81 	.word	0x08004f81
 8004c78:	08004f8f 	.word	0x08004f8f
 8004c7c:	08004f9d 	.word	0x08004f9d
 8004c80:	08004fab 	.word	0x08004fab
 8004c84:	08004fb9 	.word	0x08004fb9
 8004c88:	08004fc7 	.word	0x08004fc7
 8004c8c:	08004fd5 	.word	0x08004fd5
 8004c90:	08004fe3 	.word	0x08004fe3
 8004c94:	08004fef 	.word	0x08004fef
 8004c98:	08004ffd 	.word	0x08004ffd
 8004c9c:	0800500b 	.word	0x0800500b
 8004ca0:	08005017 	.word	0x08005017
 8004ca4:	08005025 	.word	0x08005025
 8004ca8:	08005033 	.word	0x08005033
 8004cac:	08005043 	.word	0x08005043
 8004cb0:	08005053 	.word	0x08005053
 8004cb4:	08005061 	.word	0x08005061
 8004cb8:	08005071 	.word	0x08005071
 8004cbc:	0800507f 	.word	0x0800507f
 8004cc0:	0800508f 	.word	0x0800508f
 8004cc4:	0800509f 	.word	0x0800509f
 8004cc8:	080050af 	.word	0x080050af
 8004ccc:	080050bf 	.word	0x080050bf
 8004cd0:	080050cf 	.word	0x080050cf
 8004cd4:	080050df 	.word	0x080050df
 8004cd8:	080050ef 	.word	0x080050ef
 8004cdc:	080050ff 	.word	0x080050ff
 8004ce0:	0800510f 	.word	0x0800510f
 8004ce4:	0800511d 	.word	0x0800511d
 8004ce8:	0800512d 	.word	0x0800512d
 8004cec:	0800513d 	.word	0x0800513d
 8004cf0:	0800514d 	.word	0x0800514d
 8004cf4:	0800515d 	.word	0x0800515d
 8004cf8:	0800516d 	.word	0x0800516d
 8004cfc:	0800517d 	.word	0x0800517d
 8004d00:	0800518d 	.word	0x0800518d
 8004d04:	0800519d 	.word	0x0800519d
 8004d08:	080051ad 	.word	0x080051ad
 8004d0c:	080051bd 	.word	0x080051bd
 8004d10:	080051cd 	.word	0x080051cd
 8004d14:	080051dd 	.word	0x080051dd
 8004d18:	080051ed 	.word	0x080051ed
 8004d1c:	080051fd 	.word	0x080051fd
 8004d20:	0800520b 	.word	0x0800520b
 8004d24:	08005219 	.word	0x08005219
 8004d28:	08005227 	.word	0x08005227
 8004d2c:	08005235 	.word	0x08005235
 8004d30:	08005243 	.word	0x08005243
 8004d34:	08005251 	.word	0x08005251
 8004d38:	0800525f 	.word	0x0800525f
 8004d3c:	0800526d 	.word	0x0800526d
 8004d40:	0800527b 	.word	0x0800527b
 8004d44:	08005289 	.word	0x08005289
 8004d48:	08005297 	.word	0x08005297
 8004d4c:	080052a5 	.word	0x080052a5
 8004d50:	080052b3 	.word	0x080052b3
 8004d54:	080052c1 	.word	0x080052c1
 8004d58:	080052cf 	.word	0x080052cf
 8004d5c:	080052dd 	.word	0x080052dd
 8004d60:	080052eb 	.word	0x080052eb
 8004d64:	080052f9 	.word	0x080052f9
 8004d68:	08005307 	.word	0x08005307
 8004d6c:	08005315 	.word	0x08005315
 8004d70:	08005323 	.word	0x08005323
 8004d74:	08005331 	.word	0x08005331
 8004d78:	0800533f 	.word	0x0800533f
 8004d7c:	0800534d 	.word	0x0800534d
 8004d80:	0800535b 	.word	0x0800535b
 8004d84:	08005369 	.word	0x08005369
 8004d88:	08005377 	.word	0x08005377
 8004d8c:	08005385 	.word	0x08005385
 8004d90:	08005391 	.word	0x08005391
 8004d94:	0800539f 	.word	0x0800539f
 8004d98:	080053ad 	.word	0x080053ad
 8004d9c:	080053b9 	.word	0x080053b9
 8004da0:	080053c5 	.word	0x080053c5
 8004da4:	080053d1 	.word	0x080053d1
 8004da8:	080053dd 	.word	0x080053dd
 8004dac:	080053e9 	.word	0x080053e9
 8004db0:	080053f5 	.word	0x080053f5
 8004db4:	08005403 	.word	0x08005403
 8004db8:	08005411 	.word	0x08005411
 8004dbc:	0800541f 	.word	0x0800541f
 8004dc0:	0800542d 	.word	0x0800542d
 8004dc4:	0800543b 	.word	0x0800543b
 8004dc8:	08005449 	.word	0x08005449
 8004dcc:	08005457 	.word	0x08005457
 8004dd0:	08005465 	.word	0x08005465
 8004dd4:	08005473 	.word	0x08005473
 8004dd8:	08005481 	.word	0x08005481
 8004ddc:	0800548f 	.word	0x0800548f
 8004de0:	0800549d 	.word	0x0800549d
 8004de4:	080054ab 	.word	0x080054ab
 8004de8:	080054b9 	.word	0x080054b9
 8004dec:	080054c7 	.word	0x080054c7
 8004df0:	080054d5 	.word	0x080054d5
 8004df4:	080054e3 	.word	0x080054e3
 8004df8:	080054f1 	.word	0x080054f1
 8004dfc:	080054ff 	.word	0x080054ff
 8004e00:	0800550d 	.word	0x0800550d
 8004e04:	0800551b 	.word	0x0800551b
 8004e08:	08005529 	.word	0x08005529
 8004e0c:	08005537 	.word	0x08005537
 8004e10:	08005545 	.word	0x08005545
 8004e14:	08005553 	.word	0x08005553
 8004e18:	08005561 	.word	0x08005561
 8004e1c:	0800556f 	.word	0x0800556f
 8004e20:	0800557d 	.word	0x0800557d
 8004e24:	0800558b 	.word	0x0800558b
 8004e28:	08005599 	.word	0x08005599
 8004e2c:	080055a7 	.word	0x080055a7
 8004e30:	080055b5 	.word	0x080055b5
 8004e34:	080055c3 	.word	0x080055c3
 8004e38:	080055d1 	.word	0x080055d1
 8004e3c:	080055df 	.word	0x080055df
 8004e40:	080055ed 	.word	0x080055ed
 8004e44:	080055ff 	.word	0x080055ff
 8004e48:	08005611 	.word	0x08005611
 8004e4c:	08005621 	.word	0x08005621
 8004e50:	08005633 	.word	0x08005633
 8004e54:	08005645 	.word	0x08005645
 8004e58:	08005657 	.word	0x08005657
 8004e5c:	08005669 	.word	0x08005669
 8004e60:	0800567b 	.word	0x0800567b
 8004e64:	0800568d 	.word	0x0800568d
 8004e68:	080056a1 	.word	0x080056a1
 8004e6c:	080056b3 	.word	0x080056b3
 8004e70:	080056c5 	.word	0x080056c5
 8004e74:	080056d7 	.word	0x080056d7
 8004e78:	080056e9 	.word	0x080056e9
 8004e7c:	080056fb 	.word	0x080056fb
 8004e80:	0800570d 	.word	0x0800570d
 8004e84:	0800571f 	.word	0x0800571f
 8004e88:	08005731 	.word	0x08005731
 8004e8c:	08005743 	.word	0x08005743
 8004e90:	08005751 	.word	0x08005751
 8004e94:	0800575f 	.word	0x0800575f
 8004e98:	0800576d 	.word	0x0800576d
 8004e9c:	0800577b 	.word	0x0800577b
 8004ea0:	08005789 	.word	0x08005789
 8004ea4:	08005797 	.word	0x08005797
 8004ea8:	080057a5 	.word	0x080057a5
 8004eac:	080057b7 	.word	0x080057b7
 8004eb0:	080057c5 	.word	0x080057c5
 8004eb4:	080057d3 	.word	0x080057d3
 8004eb8:	080057e1 	.word	0x080057e1
 8004ebc:	080057ef 	.word	0x080057ef
 8004ec0:	080057fd 	.word	0x080057fd
 8004ec4:	0800580b 	.word	0x0800580b
 8004ec8:	08005819 	.word	0x08005819
 8004ecc:	08005827 	.word	0x08005827
 8004ed0:	08005835 	.word	0x08005835
 8004ed4:	08005843 	.word	0x08005843
 8004ed8:	08005851 	.word	0x08005851
 8004edc:	0800585f 	.word	0x0800585f
 8004ee0:	0800586d 	.word	0x0800586d
 8004ee4:	0800587b 	.word	0x0800587b
 8004ee8:	08005889 	.word	0x08005889
 8004eec:	08005897 	.word	0x08005897
 8004ef0:	080058a5 	.word	0x080058a5
 8004ef4:	080058b3 	.word	0x080058b3
 8004ef8:	080058c1 	.word	0x080058c1
 8004efc:	080058cf 	.word	0x080058cf
 8004f00:	080058dd 	.word	0x080058dd
 8004f04:	080058eb 	.word	0x080058eb
 8004f08:	080058f9 	.word	0x080058f9
 8004f0c:	08005907 	.word	0x08005907
 8004f10:	08005915 	.word	0x08005915
 8004f14:	08005923 	.word	0x08005923
 8004f18:	08005931 	.word	0x08005931
 8004f1c:	0800593f 	.word	0x0800593f
 8004f20:	0800594d 	.word	0x0800594d
 8004f24:	0800595b 	.word	0x0800595b
 8004f28:	08005969 	.word	0x08005969
 8004f2c:	08005977 	.word	0x08005977
 8004f30:	08005985 	.word	0x08005985
 8004f34:	08005993 	.word	0x08005993
 8004f38:	080059a1 	.word	0x080059a1
 8004f3c:	080059af 	.word	0x080059af
 8004f40:	080059bd 	.word	0x080059bd
 8004f44:	080059cb 	.word	0x080059cb
 8004f48:	080059d9 	.word	0x080059d9
 8004f4c:	080059e7 	.word	0x080059e7

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004f56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	601a      	str	r2, [r3, #0]
	break;
 8004f5c:	f000 bd51 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 8004f66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	601a      	str	r2, [r3, #0]
	break;
 8004f6c:	f000 bd49 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8004f76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	601a      	str	r2, [r3, #0]
	break;
 8004f7c:	f000 bd41 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	601a      	str	r2, [r3, #0]
	break;
 8004f8a:	f000 bd3a 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	785b      	ldrb	r3, [r3, #1]
 8004f92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	601a      	str	r2, [r3, #0]
	break;
 8004f98:	f000 bd33 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	789b      	ldrb	r3, [r3, #2]
 8004fa0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]
	break;
 8004fa6:	f000 bd2c 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	78db      	ldrb	r3, [r3, #3]
 8004fae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	601a      	str	r2, [r3, #0]
	break;
 8004fb4:	f000 bd25 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	791b      	ldrb	r3, [r3, #4]
 8004fbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	601a      	str	r2, [r3, #0]
	break;
 8004fc2:	f000 bd1e 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	795b      	ldrb	r3, [r3, #5]
 8004fca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	601a      	str	r2, [r3, #0]
	break;
 8004fd0:	f000 bd17 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	799b      	ldrb	r3, [r3, #6]
 8004fd8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	601a      	str	r2, [r3, #0]
	break;
 8004fde:	f000 bd10 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	601a      	str	r2, [r3, #0]
	break;
 8004fea:	f000 bd0a 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	891b      	ldrh	r3, [r3, #8]
 8004ff2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	601a      	str	r2, [r3, #0]
	break;
 8004ff8:	f000 bd03 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	8a1b      	ldrh	r3, [r3, #16]
 8005000:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	601a      	str	r2, [r3, #0]
	break;
 8005006:	f000 bcfc 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	601a      	str	r2, [r3, #0]
	break;
 8005012:	f000 bcf6 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	7e1b      	ldrb	r3, [r3, #24]
 800501a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	601a      	str	r2, [r3, #0]
	break;
 8005020:	f000 bcef 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	8b5b      	ldrh	r3, [r3, #26]
 8005028:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	601a      	str	r2, [r3, #0]
	break;
 800502e:	f000 bce8 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8005038:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	601a      	str	r2, [r3, #0]
	break;
 800503e:	f000 bce0 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005048:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	601a      	str	r2, [r3, #0]
	break;
 800504e:	f000 bcd8 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005056:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	601a      	str	r2, [r3, #0]
	break;
 800505c:	f000 bcd1 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005066:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	601a      	str	r2, [r3, #0]
	break;
 800506c:	f000 bcc9 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005074:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	601a      	str	r2, [r3, #0]
	break;
 800507a:	f000 bcc2 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8005084:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	601a      	str	r2, [r3, #0]
	break;
 800508a:	f000 bcba 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8005094:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
	break;
 800509a:	f000 bcb2 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80050a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	601a      	str	r2, [r3, #0]
	break;
 80050aa:	f000 bcaa 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80050b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	601a      	str	r2, [r3, #0]
	break;
 80050ba:	f000 bca2 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80050c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	601a      	str	r2, [r3, #0]
	break;
 80050ca:	f000 bc9a 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 80050d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	601a      	str	r2, [r3, #0]
	break;
 80050da:	f000 bc92 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	f9b3 32a6 	ldrsh.w	r3, [r3, #678]	; 0x2a6
		*ptuning_parm_value = (int32_t)(
 80050e4:	461a      	mov	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	601a      	str	r2, [r3, #0]
	break;
 80050ea:	f000 bc8a 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	f9b3 32a8 	ldrsh.w	r3, [r3, #680]	; 0x2a8
		*ptuning_parm_value = (int32_t)(
 80050f4:	461a      	mov	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	601a      	str	r2, [r3, #0]
	break;
 80050fa:	f000 bc82 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8005104:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	601a      	str	r2, [r3, #0]
	break;
 800510a:	f000 bc7a 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005112:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	601a      	str	r2, [r3, #0]
	break;
 8005118:	f000 bc73 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
		*ptuning_parm_value = (int32_t)(
 8005122:	461a      	mov	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	601a      	str	r2, [r3, #0]
	break;
 8005128:	f000 bc6b 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005132:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	601a      	str	r2, [r3, #0]
	break;
 8005138:	f000 bc63 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	f9b3 329e 	ldrsh.w	r3, [r3, #670]	; 0x29e
 8005142:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	601a      	str	r2, [r3, #0]
	break;
 8005148:	f000 bc5b 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8005152:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	601a      	str	r2, [r3, #0]
	break;
 8005158:	f000 bc53 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005162:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	601a      	str	r2, [r3, #0]
	break;
 8005168:	f000 bc4b 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8005172:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	601a      	str	r2, [r3, #0]
	break;
 8005178:	f000 bc43 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8005182:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	601a      	str	r2, [r3, #0]
	break;
 8005188:	f000 bc3b 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8005192:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	601a      	str	r2, [r3, #0]
	break;
 8005198:	f000 bc33 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 80051a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]
	break;
 80051a8:	f000 bc2b 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80051b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	601a      	str	r2, [r3, #0]
	break;
 80051b8:	f000 bc23 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 80051c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	601a      	str	r2, [r3, #0]
	break;
 80051c8:	f000 bc1b 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
		*ptuning_parm_value = (int32_t)(
 80051d2:	461a      	mov	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	601a      	str	r2, [r3, #0]
	break;
 80051d8:	f000 bc13 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80051e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	601a      	str	r2, [r3, #0]
	break;
 80051e8:	f000 bc0b 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
		*ptuning_parm_value = (int32_t)(
 80051f2:	461a      	mov	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	601a      	str	r2, [r3, #0]
	break;
 80051f8:	f000 bc03 	b.w	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8005202:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	601a      	str	r2, [r3, #0]
	break;
 8005208:	e3fb      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8005210:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	601a      	str	r2, [r3, #0]
	break;
 8005216:	e3f4      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 800521e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	601a      	str	r2, [r3, #0]
	break;
 8005224:	e3ed      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800522c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	601a      	str	r2, [r3, #0]
	break;
 8005232:	e3e6      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800523a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	601a      	str	r2, [r3, #0]
	break;
 8005240:	e3df      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8005248:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	601a      	str	r2, [r3, #0]
	break;
 800524e:	e3d8      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8005256:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	601a      	str	r2, [r3, #0]
	break;
 800525c:	e3d1      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	f9b3 32a0 	ldrsh.w	r3, [r3, #672]	; 0x2a0
 8005264:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	601a      	str	r2, [r3, #0]
	break;
 800526a:	e3ca      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8005272:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	601a      	str	r2, [r3, #0]
	break;
 8005278:	e3c3      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8005280:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	601a      	str	r2, [r3, #0]
	break;
 8005286:	e3bc      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800528e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	601a      	str	r2, [r3, #0]
	break;
 8005294:	e3b5      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800529c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	601a      	str	r2, [r3, #0]
	break;
 80052a2:	e3ae      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80052aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	601a      	str	r2, [r3, #0]
	break;
 80052b0:	e3a7      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 80052b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	601a      	str	r2, [r3, #0]
	break;
 80052be:	e3a0      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80052c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	601a      	str	r2, [r3, #0]
	break;
 80052cc:	e399      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	f893 3254 	ldrb.w	r3, [r3, #596]	; 0x254
 80052d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	601a      	str	r2, [r3, #0]
	break;
 80052da:	e392      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	f8b3 3260 	ldrh.w	r3, [r3, #608]	; 0x260
 80052e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	601a      	str	r2, [r3, #0]
	break;
 80052e8:	e38b      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	f8b3 3262 	ldrh.w	r3, [r3, #610]	; 0x262
 80052f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	601a      	str	r2, [r3, #0]
	break;
 80052f6:	e384      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80052fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	601a      	str	r2, [r3, #0]
	break;
 8005304:	e37d      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	f8b3 3266 	ldrh.w	r3, [r3, #614]	; 0x266
 800530c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	601a      	str	r2, [r3, #0]
	break;
 8005312:	e376      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 800531a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	601a      	str	r2, [r3, #0]
	break;
 8005320:	e36f      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005328:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	601a      	str	r2, [r3, #0]
	break;
 800532e:	e368      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8005336:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	601a      	str	r2, [r3, #0]
	break;
 800533c:	e361      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8005344:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	601a      	str	r2, [r3, #0]
	break;
 800534a:	e35a      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8005352:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	601a      	str	r2, [r3, #0]
	break;
 8005358:	e353      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8005360:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	601a      	str	r2, [r3, #0]
	break;
 8005366:	e34c      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800536e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	601a      	str	r2, [r3, #0]
	break;
 8005374:	e345      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800537c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	601a      	str	r2, [r3, #0]
	break;
 8005382:	e33e      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	7c1b      	ldrb	r3, [r3, #16]
 8005388:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	601a      	str	r2, [r3, #0]
	break;
 800538e:	e338      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005396:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	601a      	str	r2, [r3, #0]
	break;
 800539c:	e331      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80053a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	601a      	str	r2, [r3, #0]
	break;
 80053aa:	e32a      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	601a      	str	r2, [r3, #0]
	break;
 80053b6:	e324      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	601a      	str	r2, [r3, #0]
	break;
 80053c2:	e31e      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	8adb      	ldrh	r3, [r3, #22]
 80053c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	601a      	str	r2, [r3, #0]
	break;
 80053ce:	e318      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	8b1b      	ldrh	r3, [r3, #24]
 80053d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	601a      	str	r2, [r3, #0]
	break;
 80053da:	e312      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	601a      	str	r2, [r3, #0]
	break;
 80053e6:	e30c      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	601a      	str	r2, [r3, #0]
	break;
 80053f2:	e306      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80053fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	601a      	str	r2, [r3, #0]
	break;
 8005400:	e2ff      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005408:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	601a      	str	r2, [r3, #0]
	break;
 800540e:	e2f8      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005416:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	601a      	str	r2, [r3, #0]
	break;
 800541c:	e2f1      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005424:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	601a      	str	r2, [r3, #0]
	break;
 800542a:	e2ea      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	f893 32c0 	ldrb.w	r3, [r3, #704]	; 0x2c0
 8005432:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	601a      	str	r2, [r3, #0]
	break;
 8005438:	e2e3      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 8005440:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	601a      	str	r2, [r3, #0]
	break;
 8005446:	e2dc      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
 800544e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	601a      	str	r2, [r3, #0]
	break;
 8005454:	e2d5      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	; 0x2c4
 800545c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	601a      	str	r2, [r3, #0]
	break;
 8005462:	e2ce      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800546a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	601a      	str	r2, [r3, #0]
	break;
 8005470:	e2c7      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005478:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	601a      	str	r2, [r3, #0]
	break;
 800547e:	e2c0      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	; 0x2d4
 8005486:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	601a      	str	r2, [r3, #0]
	break;
 800548c:	e2b9      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8005494:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	601a      	str	r2, [r3, #0]
	break;
 800549a:	e2b2      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	; 0x2d6
 80054a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	601a      	str	r2, [r3, #0]
	break;
 80054a8:	e2ab      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 80054b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	601a      	str	r2, [r3, #0]
	break;
 80054b6:	e2a4      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 80054be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	601a      	str	r2, [r3, #0]
	break;
 80054c4:	e29d      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80054cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	601a      	str	r2, [r3, #0]
	break;
 80054d2:	e296      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 80054da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	601a      	str	r2, [r3, #0]
	break;
 80054e0:	e28f      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 80054e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	601a      	str	r2, [r3, #0]
	break;
 80054ee:	e288      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 80054f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	601a      	str	r2, [r3, #0]
	break;
 80054fc:	e281      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8005504:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	601a      	str	r2, [r3, #0]
	break;
 800550a:	e27a      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8005512:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	601a      	str	r2, [r3, #0]
	break;
 8005518:	e273      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8005520:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	601a      	str	r2, [r3, #0]
	break;
 8005526:	e26c      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800552e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	601a      	str	r2, [r3, #0]
	break;
 8005534:	e265      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800553c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	601a      	str	r2, [r3, #0]
	break;
 8005542:	e25e      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800554a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	601a      	str	r2, [r3, #0]
	break;
 8005550:	e257      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8005558:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	601a      	str	r2, [r3, #0]
	break;
 800555e:	e250      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005566:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	601a      	str	r2, [r3, #0]
	break;
 800556c:	e249      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005574:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	601a      	str	r2, [r3, #0]
	break;
 800557a:	e242      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8005582:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	601a      	str	r2, [r3, #0]
	break;
 8005588:	e23b      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005590:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	601a      	str	r2, [r3, #0]
	break;
 8005596:	e234      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800559e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	601a      	str	r2, [r3, #0]
	break;
 80055a4:	e22d      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80055ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	601a      	str	r2, [r3, #0]
	break;
 80055b2:	e226      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80055ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	601a      	str	r2, [r3, #0]
	break;
 80055c0:	e21f      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80055c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	601a      	str	r2, [r3, #0]
	break;
 80055ce:	e218      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80055d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	601a      	str	r2, [r3, #0]
	break;
 80055dc:	e211      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80055e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	601a      	str	r2, [r3, #0]
	break;
 80055ea:	e20a      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80055f2:	3318      	adds	r3, #24
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	601a      	str	r2, [r3, #0]
	break;
 80055fc:	e201      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005604:	331c      	adds	r3, #28
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	601a      	str	r2, [r3, #0]
	break;
 800560e:	e1f8      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	601a      	str	r2, [r3, #0]
	break;
 800561e:	e1f0      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005626:	3304      	adds	r3, #4
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	601a      	str	r2, [r3, #0]
	break;
 8005630:	e1e7      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005638:	3308      	adds	r3, #8
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	601a      	str	r2, [r3, #0]
	break;
 8005642:	e1de      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800564a:	330c      	adds	r3, #12
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	601a      	str	r2, [r3, #0]
	break;
 8005654:	e1d5      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800565c:	3310      	adds	r3, #16
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
	break;
 8005666:	e1cc      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800566e:	3314      	adds	r3, #20
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	601a      	str	r2, [r3, #0]
	break;
 8005678:	e1c3      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005680:	331c      	adds	r3, #28
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	601a      	str	r2, [r3, #0]
	break;
 800568a:	e1ba      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005692:	331e      	adds	r3, #30
 8005694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005698:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	601a      	str	r2, [r3, #0]
	break;
 800569e:	e1b0      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80056a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	601a      	str	r2, [r3, #0]
	break;
 80056b0:	e1a7      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80056b8:	3302      	adds	r3, #2
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	601a      	str	r2, [r3, #0]
	break;
 80056c2:	e19e      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80056ca:	3316      	adds	r3, #22
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	601a      	str	r2, [r3, #0]
	break;
 80056d4:	e195      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80056dc:	3318      	adds	r3, #24
 80056de:	681b      	ldr	r3, [r3, #0]
		*ptuning_parm_value = (int32_t)(
 80056e0:	461a      	mov	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	601a      	str	r2, [r3, #0]
	break;
 80056e6:	e18c      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80056ee:	3304      	adds	r3, #4
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	601a      	str	r2, [r3, #0]
	break;
 80056f8:	e183      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8005700:	3308      	adds	r3, #8
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	601a      	str	r2, [r3, #0]
	break;
 800570a:	e17a      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8005712:	330c      	adds	r3, #12
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	601a      	str	r2, [r3, #0]
	break;
 800571c:	e171      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8005724:	3310      	adds	r3, #16
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	601a      	str	r2, [r3, #0]
	break;
 800572e:	e168      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8005736:	3310      	adds	r3, #16
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	601a      	str	r2, [r3, #0]
	break;
 8005740:	e15f      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005748:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	601a      	str	r2, [r3, #0]
	break;
 800574e:	e158      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8005756:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	601a      	str	r2, [r3, #0]
	break;
 800575c:	e151      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 8005764:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	601a      	str	r2, [r3, #0]
	break;
 800576a:	e14a      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8005772:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	601a      	str	r2, [r3, #0]
	break;
 8005778:	e143      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8005780:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	601a      	str	r2, [r3, #0]
	break;
 8005786:	e13c      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800578e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	601a      	str	r2, [r3, #0]
	break;
 8005794:	e135      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800579c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	601a      	str	r2, [r3, #0]
	break;
 80057a2:	e12e      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80057aa:	3314      	adds	r3, #20
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	601a      	str	r2, [r3, #0]
	break;
 80057b4:	e125      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 80057bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	601a      	str	r2, [r3, #0]
	break;
 80057c2:	e11e      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	; 0x186
 80057ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	601a      	str	r2, [r3, #0]
	break;
 80057d0:	e117      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	; 0x188
 80057d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	601a      	str	r2, [r3, #0]
	break;
 80057de:	e110      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	; 0x18a
 80057e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	601a      	str	r2, [r3, #0]
	break;
 80057ec:	e109      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	; 0x18c
 80057f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	601a      	str	r2, [r3, #0]
	break;
 80057fa:	e102      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	; 0x18e
 8005802:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	601a      	str	r2, [r3, #0]
	break;
 8005808:	e0fb      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	; 0x190
 8005810:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	601a      	str	r2, [r3, #0]
	break;
 8005816:	e0f4      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 800581e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	601a      	str	r2, [r3, #0]
	break;
 8005824:	e0ed      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	; 0x194
 800582c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	601a      	str	r2, [r3, #0]
	break;
 8005832:	e0e6      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	f9b3 3196 	ldrsh.w	r3, [r3, #406]	; 0x196
 800583a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	601a      	str	r2, [r3, #0]
	break;
 8005840:	e0df      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	f9b3 3198 	ldrsh.w	r3, [r3, #408]	; 0x198
 8005848:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	601a      	str	r2, [r3, #0]
	break;
 800584e:	e0d8      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	; 0x19a
 8005856:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	601a      	str	r2, [r3, #0]
	break;
 800585c:	e0d1      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	; 0x19c
 8005864:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	601a      	str	r2, [r3, #0]
	break;
 800586a:	e0ca      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	; 0x19e
 8005872:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	601a      	str	r2, [r3, #0]
	break;
 8005878:	e0c3      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	; 0x1a0
 8005880:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	601a      	str	r2, [r3, #0]
	break;
 8005886:	e0bc      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	f9b3 31a2 	ldrsh.w	r3, [r3, #418]	; 0x1a2
 800588e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	601a      	str	r2, [r3, #0]
	break;
 8005894:	e0b5      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	f9b3 31a4 	ldrsh.w	r3, [r3, #420]	; 0x1a4
 800589c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	601a      	str	r2, [r3, #0]
	break;
 80058a2:	e0ae      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	f9b3 31a6 	ldrsh.w	r3, [r3, #422]	; 0x1a6
 80058aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	601a      	str	r2, [r3, #0]
	break;
 80058b0:	e0a7      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	; 0x1a8
 80058b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	601a      	str	r2, [r3, #0]
	break;
 80058be:	e0a0      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f9b3 31aa 	ldrsh.w	r3, [r3, #426]	; 0x1aa
 80058c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	601a      	str	r2, [r3, #0]
	break;
 80058cc:	e099      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	; 0x1ac
 80058d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	601a      	str	r2, [r3, #0]
	break;
 80058da:	e092      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	; 0x1ae
 80058e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
	break;
 80058e8:	e08b      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	f9b3 31b0 	ldrsh.w	r3, [r3, #432]	; 0x1b0
 80058f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	601a      	str	r2, [r3, #0]
	break;
 80058f6:	e084      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	; 0x1b2
 80058fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	601a      	str	r2, [r3, #0]
	break;
 8005904:	e07d      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	f9b3 31b4 	ldrsh.w	r3, [r3, #436]	; 0x1b4
 800590c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	601a      	str	r2, [r3, #0]
	break;
 8005912:	e076      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	f9b3 31b6 	ldrsh.w	r3, [r3, #438]	; 0x1b6
 800591a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	601a      	str	r2, [r3, #0]
	break;
 8005920:	e06f      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	f9b3 31b8 	ldrsh.w	r3, [r3, #440]	; 0x1b8
 8005928:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	601a      	str	r2, [r3, #0]
	break;
 800592e:	e068      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	; 0x1ba
 8005936:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	601a      	str	r2, [r3, #0]
	break;
 800593c:	e061      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	f9b3 31bc 	ldrsh.w	r3, [r3, #444]	; 0x1bc
 8005944:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	601a      	str	r2, [r3, #0]
	break;
 800594a:	e05a      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 8005952:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	601a      	str	r2, [r3, #0]
	break;
 8005958:	e053      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 8005960:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	601a      	str	r2, [r3, #0]
	break;
 8005966:	e04c      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 800596e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	601a      	str	r2, [r3, #0]
	break;
 8005974:	e045      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 800597c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	601a      	str	r2, [r3, #0]
	break;
 8005982:	e03e      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 800598a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	601a      	str	r2, [r3, #0]
	break;
 8005990:	e037      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 8005998:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	601a      	str	r2, [r3, #0]
	break;
 800599e:	e030      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 80059a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	601a      	str	r2, [r3, #0]
	break;
 80059ac:	e029      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 80059b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	601a      	str	r2, [r3, #0]
	break;
 80059ba:	e022      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 80059c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	601a      	str	r2, [r3, #0]
	break;
 80059c8:	e01b      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 80059d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	601a      	str	r2, [r3, #0]
	break;
 80059d6:	e014      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 80059de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	601a      	str	r2, [r3, #0]
	break;
 80059e4:	e00d      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 80059ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	601a      	str	r2, [r3, #0]
	break;
 80059f2:	e006      	b.n	8005a02 <VL53LX_get_tuning_parm+0xdd6>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80059fa:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 80059fc:	23fc      	movs	r3, #252	; 0xfc
 80059fe:	77fb      	strb	r3, [r7, #31]
	break;
 8005a00:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005a02:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3724      	adds	r7, #36	; 0x24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop

08005a14 <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3318      	adds	r3, #24
 8005a24:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005a2c:	3314      	adds	r3, #20
 8005a2e:	2201      	movs	r2, #1
 8005a30:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3318      	adds	r3, #24
 8005a52:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005a5a:	3314      	adds	r3, #20
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3318      	adds	r3, #24
 8005a80:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005a88:	3315      	adds	r3, #21
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	3318      	adds	r3, #24
 8005aae:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005ab6:	3316      	adds	r3, #22
 8005ab8:	2201      	movs	r2, #1
 8005aba:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3318      	adds	r3, #24
 8005adc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005ae4:	3316      	adds	r3, #22
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b085      	sub	sp, #20
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005b02:	2300      	movs	r3, #0
 8005b04:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3318      	adds	r3, #24
 8005b0a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005b12:	3315      	adds	r3, #21
 8005b14:	2201      	movs	r2, #1
 8005b16:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005b30:	2300      	movs	r3, #0
 8005b32:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2208      	movs	r2, #8
 8005b38:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	220b      	movs	r2, #11
 8005b3e:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b46:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005b4e:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8005b56:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8005b5e:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8005b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2212      	movs	r2, #18
 8005b86:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	220f      	movs	r2, #15
 8005b8c:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8005b9a:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	220c      	movs	r2, #12
 8005ba0:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8005ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b084      	sub	sp, #16
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	895b      	ldrh	r3, [r3, #10]
 8005bc4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	895b      	ldrh	r3, [r3, #10]
 8005be2:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2200      	movs	r2, #0
 8005c06:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2240      	movs	r2, #64	; 0x40
 8005c0c:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10d      	bne.n	8005c32 <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d108      	bne.n	8005c32 <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d103      	bne.n	8005c32 <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	741a      	strb	r2, [r3, #16]
 8005c30:	e002      	b.n	8005c38 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2201      	movs	r2, #1
 8005c36:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 8005c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d114      	bne.n	8005c6a <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d110      	bne.n	8005c6a <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	7d9b      	ldrb	r3, [r3, #22]
 8005c5c:	f001 ff6a 	bl	8007b34 <VL53LX_calc_range_ignore_threshold>
 8005c60:	4603      	mov	r3, r0
 8005c62:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	831a      	strh	r2, [r3, #24]
 8005c68:	e002      	b.n	8005c70 <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8005c76:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2232      	movs	r2, #50	; 0x32
 8005c7c:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005c84:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	228c      	movs	r2, #140	; 0x8c
 8005c8a:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8005c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8005caa:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005cb2:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2207      	movs	r2, #7
 8005cb8:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f643 2298 	movw	r2, #15000	; 0x3a98
 8005cc0:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f242 7210 	movw	r2, #10000	; 0x2710
 8005cc8:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f64f 72ba 	movw	r2, #65466	; 0xffba
 8005cd0:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2246      	movs	r2, #70	; 0x46
 8005cd6:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005cde:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	228c      	movs	r2, #140	; 0x8c
 8005ce4:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8005ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005d08:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8005d10:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8005d18:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8005d20:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2208      	movs	r2, #8
 8005d26:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2228      	movs	r2, #40	; 0x28
 8005d2c:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2209      	movs	r2, #9
 8005d32:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8005d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8005d56:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f643 2298 	movw	r2, #15000	; 0x3a98
 8005d5e:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d66:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005d6e:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2210      	movs	r2, #16
 8005d74:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2208      	movs	r2, #8
 8005d7a:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8005d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	4603      	mov	r3, r0
 8005d94:	6039      	str	r1, [r7, #0]
 8005d96:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2204      	movs	r2, #4
 8005da0:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2201      	movs	r2, #1
 8005da6:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2201      	movs	r2, #1
 8005dac:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2202      	movs	r2, #2
 8005db2:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2201      	movs	r2, #1
 8005db8:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2250      	movs	r2, #80	; 0x50
 8005dbe:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2264      	movs	r2, #100	; 0x64
 8005dc4:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	f241 023d 	movw	r2, #4157	; 0x103d
 8005dcc:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2210      	movs	r2, #16
 8005dd2:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2232      	movs	r2, #50	; 0x32
 8005dd8:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2264      	movs	r2, #100	; 0x64
 8005dde:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2201      	movs	r2, #1
 8005de4:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	22b4      	movs	r2, #180	; 0xb4
 8005dea:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2200      	movs	r2, #0
 8005df0:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8005df8:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2208      	movs	r2, #8
 8005dfe:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2288      	movs	r2, #136	; 0x88
 8005e06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2208      	movs	r2, #8
 8005e0e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e20:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2200      	movs	r2, #0
 8005e26:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	79fa      	ldrb	r2, [r7, #7]
 8005e2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8005e36:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2232      	movs	r2, #50	; 0x32
 8005e3c:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005e44:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	228c      	movs	r2, #140	; 0x8c
 8005e4a:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2250      	movs	r2, #80	; 0x50
 8005e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2232      	movs	r2, #50	; 0x32
 8005e58:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 8005e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005e72:	2300      	movs	r3, #0
 8005e74:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	221e      	movs	r2, #30
 8005e7a:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	220e      	movs	r2, #14
 8005e80:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f642 7294 	movw	r2, #12180	; 0x2f94
 8005e88:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	220e      	movs	r2, #14
 8005e8e:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	220a      	movs	r2, #10
 8005e94:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2206      	movs	r2, #6
 8005e9a:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	220e      	movs	r2, #14
 8005ea0:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	220a      	movs	r2, #10
 8005ea6:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2206      	movs	r2, #6
 8005eac:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2209      	movs	r2, #9
 8005eb2:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2205      	movs	r2, #5
 8005eb8:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2203      	movs	r2, #3
 8005ebe:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2206      	movs	r2, #6
 8005ec4:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2206      	movs	r2, #6
 8005eca:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2206      	movs	r2, #6
 8005ed0:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2221      	movs	r2, #33	; 0x21
 8005edc:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	223c      	movs	r2, #60	; 0x3c
 8005eee:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	223c      	movs	r2, #60	; 0x3c
 8005ef4:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	223c      	movs	r2, #60	; 0x3c
 8005efa:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2280      	movs	r2, #128	; 0x80
 8005f00:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2280      	movs	r2, #128	; 0x80
 8005f06:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2280      	movs	r2, #128	; 0x80
 8005f0c:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2208      	movs	r2, #8
 8005f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2210      	movs	r2, #16
 8005f1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f54:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f640 22be 	movw	r2, #2750	; 0xabe
 8005f5e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	22fa      	movs	r2, #250	; 0xfa
 8005f66:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f70:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8005f7a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8005f84:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8005f8e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8005f98:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f64f 7238 	movw	r2, #65336	; 0xff38
 8005fa2:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	22c8      	movs	r2, #200	; 0xc8
 8005faa:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8005fb4:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8005fc6:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f640 32ea 	movw	r2, #3050	; 0xbea
 8005fd0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8005fda:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f640 32ea 	movw	r2, #3050	; 0xbea
 8005fe4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8005fee:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f641 0238 	movw	r2, #6200	; 0x1838
 8005ff8:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	22fa      	movs	r2, #250	; 0xfa
 8006010:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800601a:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8006024:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f241 1294 	movw	r2, #4500	; 0x1194
 800602e:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f64f 7238 	movw	r2, #65336	; 0xff38
 8006038:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	22c8      	movs	r2, #200	; 0xc8
 8006040:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f640 720a 	movw	r2, #3850	; 0xf0a
 800606a:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006074:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f640 720a 	movw	r2, #3850	; 0xf0a
 800607e:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80060c0:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80060c8:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80060d0:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80060d8:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80060e0:	639a      	str	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f643 2298 	movw	r2, #15000	; 0x3a98
 80060e8:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f242 3228 	movw	r2, #9000	; 0x2328
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f241 7270 	movw	r2, #6000	; 0x1770
 80060f8:	645a      	str	r2, [r3, #68]	; 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006100:	649a      	str	r2, [r3, #72]	; 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f242 3228 	movw	r2, #9000	; 0x2328
 8006108:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f241 7270 	movw	r2, #6000	; 0x1770
 8006110:	651a      	str	r2, [r3, #80]	; 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006118:	655a      	str	r2, [r3, #84]	; 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006120:	659a      	str	r2, [r3, #88]	; 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006128:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006130:	661a      	str	r2, [r3, #96]	; 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006138:	665a      	str	r2, [r3, #100]	; 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f24f 6218 	movw	r2, #63000	; 0xf618
 8006140:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006148:	671a      	str	r2, [r3, #112]	; 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006150:	675a      	str	r2, [r3, #116]	; 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006158:	679a      	str	r2, [r3, #120]	; 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	669a      	str	r2, [r3, #104]	; 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006166:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800616e:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2206      	movs	r2, #6
 800618e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006192:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b085      	sub	sp, #20
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80061aa:	2300      	movs	r3, #0
 80061ac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80061b4:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2238      	movs	r2, #56	; 0x38
 80061ba:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2220      	movs	r2, #32
 80061c0:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2270      	movs	r2, #112	; 0x70
 80061c6:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2210      	movs	r2, #16
 80061cc:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2264      	movs	r2, #100	; 0x64
 80061d2:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061da:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	220f      	movs	r2, #15
 80061e0:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2234      	movs	r2, #52	; 0x34
 80061e6:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	22c8      	movs	r2, #200	; 0xc8
 80061ec:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80061f4:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80061fc:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80061fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 800620e:	b480      	push	{r7}
 8006210:	b087      	sub	sp, #28
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	607a      	str	r2, [r7, #4]
 800621a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800621c:	2300      	movs	r3, #0
 800621e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006226:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2211      	movs	r2, #17
 8006268:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2202      	movs	r2, #2
 800626e:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2202      	movs	r2, #2
 800627a:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2208      	movs	r2, #8
 8006280:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	22ff      	movs	r2, #255	; 0xff
 80062c2:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	220b      	movs	r2, #11
 80062fc:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2202      	movs	r2, #2
 800630a:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	220d      	movs	r2, #13
 8006310:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8006338:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2238      	movs	r2, #56	; 0x38
 8006344:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	22ff      	movs	r2, #255	; 0xff
 800634a:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2200      	movs	r2, #0
 8006356:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	221a      	movs	r2, #26
 800635c:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2200      	movs	r2, #0
 8006362:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2220      	movs	r2, #32
 8006368:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2201      	movs	r2, #1
 800636e:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	22cc      	movs	r2, #204	; 0xcc
 8006374:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	220b      	movs	r2, #11
 800637a:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2201      	movs	r2, #1
 8006380:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	22f5      	movs	r2, #245	; 0xf5
 8006386:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2209      	movs	r2, #9
 800638c:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006390:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006398:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2208      	movs	r2, #8
 80063a2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2278      	movs	r2, #120	; 0x78
 80063a8:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2200      	movs	r2, #0
 80063ae:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2200      	movs	r2, #0
 80063b4:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2207      	movs	r2, #7
 80063ba:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2221      	movs	r2, #33	; 0x21
 80063c0:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2243      	movs	r2, #67	; 0x43
 80063c6:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2210      	movs	r2, #16
 80063cc:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2232      	movs	r2, #50	; 0x32
 80063d2:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2254      	movs	r2, #84	; 0x54
 80063d8:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2207      	movs	r2, #7
 80063de:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2221      	movs	r2, #33	; 0x21
 80063e4:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2243      	movs	r2, #67	; 0x43
 80063ea:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2210      	movs	r2, #16
 80063f0:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2202      	movs	r2, #2
 80063f6:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2243      	movs	r2, #67	; 0x43
 80063fc:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2205      	movs	r2, #5
 8006402:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2200      	movs	r2, #0
 8006408:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2207      	movs	r2, #7
 800640e:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2221      	movs	r2, #33	; 0x21
 8006414:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2243      	movs	r2, #67	; 0x43
 800641a:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2210      	movs	r2, #16
 8006420:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2232      	movs	r2, #50	; 0x32
 8006426:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2254      	movs	r2, #84	; 0x54
 800642c:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006434:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800643c:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8006444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006446:	2205      	movs	r2, #5
 8006448:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 800644a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644c:	2200      	movs	r2, #0
 800644e:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8006450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006452:	220f      	movs	r2, #15
 8006454:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	220f      	movs	r2, #15
 800645a:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	2208      	movs	r2, #8
 8006460:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	2208      	movs	r2, #8
 8006466:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	2201      	movs	r2, #1
 800646c:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	2200      	movs	r2, #0
 8006472:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	2200      	movs	r2, #0
 8006478:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	2200      	movs	r2, #0
 800647e:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	220b      	movs	r2, #11
 800648e:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	2209      	movs	r2, #9
 8006494:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006498:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	2201      	movs	r2, #1
 80064aa:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	22c7      	movs	r2, #199	; 0xc7
 80064c4:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	22ff      	movs	r2, #255	; 0xff
 80064ca:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	22db      	movs	r2, #219	; 0xdb
 80064d0:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	2202      	movs	r2, #2
 80064d6:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	2200      	movs	r2, #0
 80064dc:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	2201      	movs	r2, #1
 80064e2:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	2201      	movs	r2, #1
 80064e8:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	2221      	movs	r2, #33	; 0x21
 80064ee:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 80064f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	371c      	adds	r7, #28
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b090      	sub	sp, #64	; 0x40
 8006504:	af0a      	add	r7, sp, #40	; 0x28
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800650e:	2300      	movs	r3, #0
 8006510:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 8006512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006514:	9303      	str	r3, [sp, #12]
 8006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006518:	9302      	str	r3, [sp, #8]
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	68b8      	ldr	r0, [r7, #8]
 800652a:	f7ff fe70 	bl	800620e <VL53LX_preset_mode_standard_ranging>
 800652e:	4603      	mov	r3, r0
 8006530:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8006532:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d171      	bne.n	800661e <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006540:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	9308      	str	r3, [sp, #32]
 8006546:	2305      	movs	r3, #5
 8006548:	9307      	str	r3, [sp, #28]
 800654a:	2304      	movs	r3, #4
 800654c:	9306      	str	r3, [sp, #24]
 800654e:	2303      	movs	r3, #3
 8006550:	9305      	str	r3, [sp, #20]
 8006552:	2302      	movs	r3, #2
 8006554:	9304      	str	r3, [sp, #16]
 8006556:	2301      	movs	r3, #1
 8006558:	9303      	str	r3, [sp, #12]
 800655a:	2300      	movs	r3, #0
 800655c:	9302      	str	r3, [sp, #8]
 800655e:	2304      	movs	r3, #4
 8006560:	9301      	str	r3, [sp, #4]
 8006562:	2303      	movs	r3, #3
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	2302      	movs	r3, #2
 8006568:	2201      	movs	r2, #1
 800656a:	2100      	movs	r1, #0
 800656c:	2007      	movs	r0, #7
 800656e:	f000 ff76 	bl	800745e <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	3302      	adds	r3, #2
 8006576:	9308      	str	r3, [sp, #32]
 8006578:	2305      	movs	r3, #5
 800657a:	9307      	str	r3, [sp, #28]
 800657c:	2304      	movs	r3, #4
 800657e:	9306      	str	r3, [sp, #24]
 8006580:	2303      	movs	r3, #3
 8006582:	9305      	str	r3, [sp, #20]
 8006584:	2302      	movs	r3, #2
 8006586:	9304      	str	r3, [sp, #16]
 8006588:	2301      	movs	r3, #1
 800658a:	9303      	str	r3, [sp, #12]
 800658c:	2300      	movs	r3, #0
 800658e:	9302      	str	r3, [sp, #8]
 8006590:	2304      	movs	r3, #4
 8006592:	9301      	str	r3, [sp, #4]
 8006594:	2303      	movs	r3, #3
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	2302      	movs	r3, #2
 800659a:	2201      	movs	r2, #1
 800659c:	2100      	movs	r1, #0
 800659e:	2007      	movs	r0, #7
 80065a0:	f000 ffed 	bl	800757e <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	2209      	movs	r2, #9
 80065a8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	220b      	movs	r2, #11
 80065ae:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	2209      	movs	r2, #9
 80065b4:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	220b      	movs	r2, #11
 80065ba:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	2200      	movs	r2, #0
 80065c0:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	2220      	movs	r2, #32
 80065c6:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	2200      	movs	r2, #0
 80065cc:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	221a      	movs	r2, #26
 80065d2:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	2200      	movs	r2, #0
 80065d8:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	2228      	movs	r2, #40	; 0x28
 80065de:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	2200      	movs	r2, #0
 80065e4:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	2221      	movs	r2, #33	; 0x21
 80065ea:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	22f5      	movs	r2, #245	; 0xf5
 80065f0:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2208      	movs	r2, #8
 80065f6:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2288      	movs	r2, #136	; 0x88
 80065fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f9e6 	bl	80069de <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	229b      	movs	r2, #155	; 0x9b
 8006616:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	2226      	movs	r2, #38	; 0x26
 800661c:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800661e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b090      	sub	sp, #64	; 0x40
 800662e:	af0a      	add	r7, sp, #40	; 0x28
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	607a      	str	r2, [r7, #4]
 8006636:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006638:	2300      	movs	r3, #0
 800663a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	9304      	str	r3, [sp, #16]
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	9303      	str	r3, [sp, #12]
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	9302      	str	r3, [sp, #8]
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	9301      	str	r3, [sp, #4]
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f7ff ff52 	bl	8006500 <VL53LX_preset_mode_histogram_ranging>
 800665c:	4603      	mov	r3, r0
 800665e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8006660:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d178      	bne.n	800675a <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	9308      	str	r3, [sp, #32]
 800666c:	2305      	movs	r3, #5
 800666e:	9307      	str	r3, [sp, #28]
 8006670:	2304      	movs	r3, #4
 8006672:	9306      	str	r3, [sp, #24]
 8006674:	2303      	movs	r3, #3
 8006676:	9305      	str	r3, [sp, #20]
 8006678:	2302      	movs	r3, #2
 800667a:	9304      	str	r3, [sp, #16]
 800667c:	2301      	movs	r3, #1
 800667e:	9303      	str	r3, [sp, #12]
 8006680:	2300      	movs	r3, #0
 8006682:	9302      	str	r3, [sp, #8]
 8006684:	2304      	movs	r3, #4
 8006686:	9301      	str	r3, [sp, #4]
 8006688:	2303      	movs	r3, #3
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	2302      	movs	r3, #2
 800668e:	2201      	movs	r2, #1
 8006690:	2100      	movs	r1, #0
 8006692:	2007      	movs	r0, #7
 8006694:	f000 fee3 	bl	800745e <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	3302      	adds	r3, #2
 800669c:	9308      	str	r3, [sp, #32]
 800669e:	2305      	movs	r3, #5
 80066a0:	9307      	str	r3, [sp, #28]
 80066a2:	2304      	movs	r3, #4
 80066a4:	9306      	str	r3, [sp, #24]
 80066a6:	2303      	movs	r3, #3
 80066a8:	9305      	str	r3, [sp, #20]
 80066aa:	2302      	movs	r3, #2
 80066ac:	9304      	str	r3, [sp, #16]
 80066ae:	2301      	movs	r3, #1
 80066b0:	9303      	str	r3, [sp, #12]
 80066b2:	2300      	movs	r3, #0
 80066b4:	9302      	str	r3, [sp, #8]
 80066b6:	2304      	movs	r3, #4
 80066b8:	9301      	str	r3, [sp, #4]
 80066ba:	2303      	movs	r3, #3
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	2302      	movs	r3, #2
 80066c0:	2201      	movs	r2, #1
 80066c2:	2100      	movs	r1, #0
 80066c4:	2007      	movs	r0, #7
 80066c6:	f000 ff5a 	bl	800757e <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f982 	bl	80069de <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	2209      	movs	r2, #9
 80066de:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	220b      	movs	r2, #11
 80066e4:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	2200      	movs	r2, #0
 80066ea:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	2221      	movs	r2, #33	; 0x21
 80066f0:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	2200      	movs	r2, #0
 80066f6:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	221b      	movs	r2, #27
 80066fc:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	2200      	movs	r2, #0
 8006702:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	2229      	movs	r2, #41	; 0x29
 8006708:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	2200      	movs	r2, #0
 800670e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	2222      	movs	r2, #34	; 0x22
 8006714:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2209      	movs	r2, #9
 800671a:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	22f5      	movs	r2, #245	; 0xf5
 8006720:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	2209      	movs	r2, #9
 8006726:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	220b      	movs	r2, #11
 800672c:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 800672e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006730:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 8006736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006738:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2208      	movs	r2, #8
 8006742:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2288      	movs	r2, #136	; 0x88
 800674a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	229b      	movs	r2, #155	; 0x9b
 8006752:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	2226      	movs	r2, #38	; 0x26
 8006758:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800675a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b090      	sub	sp, #64	; 0x40
 800676a:	af0a      	add	r7, sp, #40	; 0x28
 800676c:	60f8      	str	r0, [r7, #12]
 800676e:	60b9      	str	r1, [r7, #8]
 8006770:	607a      	str	r2, [r7, #4]
 8006772:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006774:	2300      	movs	r3, #0
 8006776:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	9304      	str	r3, [sp, #16]
 800677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677e:	9303      	str	r3, [sp, #12]
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	9302      	str	r3, [sp, #8]
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	9301      	str	r3, [sp, #4]
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff feb4 	bl	8006500 <VL53LX_preset_mode_histogram_ranging>
 8006798:	4603      	mov	r3, r0
 800679a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 800679c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d178      	bne.n	8006896 <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	9308      	str	r3, [sp, #32]
 80067a8:	2303      	movs	r3, #3
 80067aa:	9307      	str	r3, [sp, #28]
 80067ac:	2302      	movs	r3, #2
 80067ae:	9306      	str	r3, [sp, #24]
 80067b0:	2301      	movs	r3, #1
 80067b2:	9305      	str	r3, [sp, #20]
 80067b4:	2302      	movs	r3, #2
 80067b6:	9304      	str	r3, [sp, #16]
 80067b8:	2301      	movs	r3, #1
 80067ba:	9303      	str	r3, [sp, #12]
 80067bc:	2300      	movs	r3, #0
 80067be:	9302      	str	r3, [sp, #8]
 80067c0:	2302      	movs	r3, #2
 80067c2:	9301      	str	r3, [sp, #4]
 80067c4:	2302      	movs	r3, #2
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	2301      	movs	r3, #1
 80067ca:	2201      	movs	r2, #1
 80067cc:	2100      	movs	r1, #0
 80067ce:	2007      	movs	r0, #7
 80067d0:	f000 fe45 	bl	800745e <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	3302      	adds	r3, #2
 80067d8:	9308      	str	r3, [sp, #32]
 80067da:	2303      	movs	r3, #3
 80067dc:	9307      	str	r3, [sp, #28]
 80067de:	2302      	movs	r3, #2
 80067e0:	9306      	str	r3, [sp, #24]
 80067e2:	2301      	movs	r3, #1
 80067e4:	9305      	str	r3, [sp, #20]
 80067e6:	2302      	movs	r3, #2
 80067e8:	9304      	str	r3, [sp, #16]
 80067ea:	2301      	movs	r3, #1
 80067ec:	9303      	str	r3, [sp, #12]
 80067ee:	2300      	movs	r3, #0
 80067f0:	9302      	str	r3, [sp, #8]
 80067f2:	2302      	movs	r3, #2
 80067f4:	9301      	str	r3, [sp, #4]
 80067f6:	2302      	movs	r3, #2
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	2301      	movs	r3, #1
 80067fc:	2201      	movs	r2, #1
 80067fe:	2100      	movs	r1, #0
 8006800:	2007      	movs	r0, #7
 8006802:	f000 febc 	bl	800757e <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f8e4 	bl	80069de <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	2205      	movs	r2, #5
 800681a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	2207      	movs	r2, #7
 8006820:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	2200      	movs	r2, #0
 8006826:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	2236      	movs	r2, #54	; 0x36
 800682c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	2200      	movs	r2, #0
 8006832:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	2228      	movs	r2, #40	; 0x28
 8006838:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	2200      	movs	r2, #0
 800683e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	2244      	movs	r2, #68	; 0x44
 8006844:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	2200      	movs	r2, #0
 800684a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	2233      	movs	r2, #51	; 0x33
 8006850:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2205      	movs	r2, #5
 8006856:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	22f5      	movs	r2, #245	; 0xf5
 800685c:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	2205      	movs	r2, #5
 8006862:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	2207      	movs	r2, #7
 8006868:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 800686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686c:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2208      	movs	r2, #8
 800687e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2248      	movs	r2, #72	; 0x48
 8006886:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	229b      	movs	r2, #155	; 0x9b
 800688e:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8006890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006892:	2226      	movs	r2, #38	; 0x26
 8006894:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8006896:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b090      	sub	sp, #64	; 0x40
 80068a6:	af0a      	add	r7, sp, #40	; 0x28
 80068a8:	60f8      	str	r0, [r7, #12]
 80068aa:	60b9      	str	r1, [r7, #8]
 80068ac:	607a      	str	r2, [r7, #4]
 80068ae:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80068b0:	2300      	movs	r3, #0
 80068b2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	9304      	str	r3, [sp, #16]
 80068b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ba:	9303      	str	r3, [sp, #12]
 80068bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068be:	9302      	str	r3, [sp, #8]
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	9301      	str	r3, [sp, #4]
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	68b9      	ldr	r1, [r7, #8]
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f7ff fe16 	bl	8006500 <VL53LX_preset_mode_histogram_ranging>
 80068d4:	4603      	mov	r3, r0
 80068d6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80068d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d178      	bne.n	80069d2 <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	9308      	str	r3, [sp, #32]
 80068e4:	2302      	movs	r3, #2
 80068e6:	9307      	str	r3, [sp, #28]
 80068e8:	2302      	movs	r3, #2
 80068ea:	9306      	str	r3, [sp, #24]
 80068ec:	2301      	movs	r3, #1
 80068ee:	9305      	str	r3, [sp, #20]
 80068f0:	2301      	movs	r3, #1
 80068f2:	9304      	str	r3, [sp, #16]
 80068f4:	2301      	movs	r3, #1
 80068f6:	9303      	str	r3, [sp, #12]
 80068f8:	2300      	movs	r3, #0
 80068fa:	9302      	str	r3, [sp, #8]
 80068fc:	2301      	movs	r3, #1
 80068fe:	9301      	str	r3, [sp, #4]
 8006900:	2301      	movs	r3, #1
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	2301      	movs	r3, #1
 8006906:	2200      	movs	r2, #0
 8006908:	2107      	movs	r1, #7
 800690a:	2007      	movs	r0, #7
 800690c:	f000 fda7 	bl	800745e <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	3302      	adds	r3, #2
 8006914:	9308      	str	r3, [sp, #32]
 8006916:	2302      	movs	r3, #2
 8006918:	9307      	str	r3, [sp, #28]
 800691a:	2302      	movs	r3, #2
 800691c:	9306      	str	r3, [sp, #24]
 800691e:	2301      	movs	r3, #1
 8006920:	9305      	str	r3, [sp, #20]
 8006922:	2301      	movs	r3, #1
 8006924:	9304      	str	r3, [sp, #16]
 8006926:	2301      	movs	r3, #1
 8006928:	9303      	str	r3, [sp, #12]
 800692a:	2300      	movs	r3, #0
 800692c:	9302      	str	r3, [sp, #8]
 800692e:	2301      	movs	r3, #1
 8006930:	9301      	str	r3, [sp, #4]
 8006932:	2301      	movs	r3, #1
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	2301      	movs	r3, #1
 8006938:	2200      	movs	r2, #0
 800693a:	2107      	movs	r1, #7
 800693c:	2007      	movs	r0, #7
 800693e:	f000 fe1e 	bl	800757e <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	68b9      	ldr	r1, [r7, #8]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f846 	bl	80069de <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	2203      	movs	r2, #3
 8006956:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	2205      	movs	r2, #5
 800695c:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	2200      	movs	r2, #0
 8006962:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	2252      	movs	r2, #82	; 0x52
 8006968:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	2200      	movs	r2, #0
 800696e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	2237      	movs	r2, #55	; 0x37
 8006974:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	2200      	movs	r2, #0
 800697a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	2266      	movs	r2, #102	; 0x66
 8006980:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	2200      	movs	r2, #0
 8006986:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	2244      	movs	r2, #68	; 0x44
 800698c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2203      	movs	r2, #3
 8006992:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	22f5      	movs	r2, #245	; 0xf5
 8006998:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	2203      	movs	r2, #3
 800699e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	2205      	movs	r2, #5
 80069a4:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 80069ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b0:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2208      	movs	r2, #8
 80069ba:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2228      	movs	r2, #40	; 0x28
 80069c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	22bb      	movs	r2, #187	; 0xbb
 80069ca:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	2226      	movs	r2, #38	; 0x26
 80069d0:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80069d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 80069de:	b480      	push	{r7}
 80069e0:	b085      	sub	sp, #20
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	607a      	str	r2, [r7, #4]
 80069ea:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	79db      	ldrb	r3, [r3, #7]
 8006a20:	b29b      	uxth	r3, r3
				<< 8)
 8006a22:	021b      	lsls	r3, r3, #8
 8006a24:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	7a1b      	ldrb	r3, [r3, #8]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	4413      	add	r3, r2
 8006a2e:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	785b      	ldrb	r3, [r3, #1]
 8006a68:	b29b      	uxth	r3, r3
				<< 8)
 8006a6a:	021b      	lsls	r3, r3, #8
 8006a6c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	789b      	ldrb	r3, [r3, #2]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	4413      	add	r3, r2
 8006a76:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	78db      	ldrb	r3, [r3, #3]
 8006a80:	b29b      	uxth	r3, r3
				<< 8)
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	791b      	ldrb	r3, [r3, #4]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	4413      	add	r3, r2
 8006a8e:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 8006abc:	bf00      	nop
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	79db      	ldrb	r3, [r3, #7]
 8006b08:	b29b      	uxth	r3, r3
				<< 8)
 8006b0a:	021b      	lsls	r3, r3, #8
 8006b0c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	7a1b      	ldrb	r3, [r3, #8]
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	4413      	add	r3, r2
 8006b16:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	785b      	ldrb	r3, [r3, #1]
 8006b48:	b29b      	uxth	r3, r3
				<< 8)
 8006b4a:	021b      	lsls	r3, r3, #8
 8006b4c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	789b      	ldrb	r3, [r3, #2]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	4413      	add	r3, r2
 8006b56:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	78db      	ldrb	r3, [r3, #3]
 8006b60:	b29b      	uxth	r3, r3
				<< 8)
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	791b      	ldrb	r3, [r3, #4]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	4413      	add	r3, r2
 8006b6e:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 8006b84:	bf00      	nop
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3318      	adds	r3, #24
 8006b9c:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006bbc:	bf00      	nop
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	3318      	adds	r3, #24
 8006bd8:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	332c      	adds	r3, #44	; 0x2c
 8006bde:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	78fa      	ldrb	r2, [r7, #3]
 8006be4:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2200      	movs	r2, #0
 8006bea:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	78fa      	ldrb	r2, [r7, #3]
 8006c02:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2200      	movs	r2, #0
 8006c08:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2200      	movs	r2, #0
 8006c14:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	735a      	strb	r2, [r3, #13]

}
 8006c1c:	bf00      	nop
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 8006c30:	2300      	movs	r3, #0
 8006c32:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3318      	adds	r3, #24
 8006c38:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	332c      	adds	r3, #44	; 0x2c
 8006c3e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8006c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d115      	bne.n	8006c7a <VL53LX_update_ll_driver_rd_state+0x52>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2203      	movs	r2, #3
 8006c52:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2202      	movs	r2, #2
 8006c6a:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	735a      	strb	r2, [r3, #13]
 8006c78:	e0be      	b.n	8006df8 <VL53LX_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	7a1b      	ldrb	r3, [r3, #8]
 8006c7e:	2bff      	cmp	r3, #255	; 0xff
 8006c80:	d103      	bne.n	8006c8a <VL53LX_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2280      	movs	r2, #128	; 0x80
 8006c86:	721a      	strb	r2, [r3, #8]
 8006c88:	e005      	b.n	8006c96 <VL53LX_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	7a1b      	ldrb	r3, [r3, #8]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	7a19      	ldrb	r1, [r3, #8]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f103 0209 	add.w	r2, r3, #9
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	330a      	adds	r3, #10
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f002 fcc0 	bl	800962a <VL53LX_update_internal_stream_counters>
 8006caa:	4603      	mov	r3, r0
 8006cac:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	7adb      	ldrb	r3, [r3, #11]
 8006cb2:	f083 0302 	eor.w	r3, r3, #2
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	79db      	ldrb	r3, [r3, #7]
 8006cc0:	3b03      	subs	r3, #3
 8006cc2:	2b05      	cmp	r3, #5
 8006cc4:	f200 8082 	bhi.w	8006dcc <VL53LX_update_ll_driver_rd_state+0x1a4>
 8006cc8:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <VL53LX_update_ll_driver_rd_state+0xa8>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006ce9 	.word	0x08006ce9
 8006cd4:	08006dcd 	.word	0x08006dcd
 8006cd8:	08006dcd 	.word	0x08006dcd
 8006cdc:	08006d3b 	.word	0x08006d3b
 8006ce0:	08006d71 	.word	0x08006d71
 8006ce4:	08006d9b 	.word	0x08006d9b

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f893 335e 	ldrb.w	r3, [r3, #862]	; 0x35e
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	dd03      	ble.n	8006cfe <VL53LX_update_ll_driver_rd_state+0xd6>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2206      	movs	r2, #6
 8006cfa:	71da      	strb	r2, [r3, #7]
 8006cfc:	e00d      	b.n	8006d1a <VL53LX_update_ll_driver_rd_state+0xf2>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d303      	bcc.n	8006d14 <VL53LX_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2208      	movs	r2, #8
 8006d10:	71da      	strb	r2, [r3, #7]
 8006d12:	e002      	b.n	8006d1a <VL53LX_update_ll_driver_rd_state+0xf2>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2207      	movs	r2, #7
 8006d18:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	735a      	strb	r2, [r3, #13]

			break;
 8006d38:	e05e      	b.n	8006df8 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d303      	bcc.n	8006d68 <VL53LX_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2208      	movs	r2, #8
 8006d64:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8006d66:	e047      	b.n	8006df8 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2207      	movs	r2, #7
 8006d6c:	71da      	strb	r2, [r3, #7]
			break;
 8006d6e:	e043      	b.n	8006df8 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	7b5b      	ldrb	r3, [r3, #13]
 8006d74:	3301      	adds	r3, #1
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d303      	bcc.n	8006d92 <VL53LX_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2208      	movs	r2, #8
 8006d8e:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8006d90:	e032      	b.n	8006df8 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2207      	movs	r2, #7
 8006d96:	71da      	strb	r2, [r3, #7]
			break;
 8006d98:	e02e      	b.n	8006df8 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	7b1b      	ldrb	r3, [r3, #12]
 8006da4:	f083 0301 	eor.w	r3, r3, #1
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d303      	bcc.n	8006dc4 <VL53LX_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2208      	movs	r2, #8
 8006dc0:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 8006dc2:	e019      	b.n	8006df8 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2207      	movs	r2, #7
 8006dc8:	71da      	strb	r2, [r3, #7]
			break;
 8006dca:	e015      	b.n	8006df8 <VL53LX_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2203      	movs	r2, #3
 8006dd0:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2202      	movs	r2, #2
 8006de8:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	735a      	strb	r2, [r3, #13]
			break;
 8006df6:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 8006df8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b08d      	sub	sp, #52	; 0x34
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t  *pdev =
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3318      	adds	r3, #24
 8006e16:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8006e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e22:	332c      	adds	r3, #44	; 0x2c
 8006e24:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 8006e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e28:	f203 3366 	addw	r3, r3, #870	; 0x366
 8006e2c:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e34:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006e3c:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 8006e42:	2300      	movs	r3, #0
 8006e44:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 8006e46:	2300      	movs	r3, #0
 8006e48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 8006e54:	2300      	movs	r3, #0
 8006e56:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8006e5c:	f003 031f 	and.w	r3, r3, #31
 8006e60:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	78db      	ldrb	r3, [r3, #3]
 8006e66:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 8006e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6a:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8006e6e:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	bf14      	ite	ne
 8006e76:	2301      	movne	r3, #1
 8006e78:	2300      	moveq	r3, #0
 8006e7a:	b2db      	uxtb	r3, r3
	histogram_mode =
 8006e7c:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8006e82:	111b      	asrs	r3, r3, #4
 8006e84:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 8006e8e:	7c7b      	ldrb	r3, [r7, #17]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d008      	beq.n	8006ea6 <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8006e9a:	111b      	asrs	r3, r3, #4
 8006e9c:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8006eac:	f003 0320 	and.w	r3, r3, #32
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d04e      	beq.n	8006f52 <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	79db      	ldrb	r3, [r3, #7]
 8006eb8:	2b06      	cmp	r3, #6
 8006eba:	d109      	bne.n	8006ed0 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 8006ebc:	7c7b      	ldrb	r3, [r7, #17]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d14a      	bne.n	8006f58 <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 8006ec2:	7cfb      	ldrb	r3, [r7, #19]
 8006ec4:	2b12      	cmp	r3, #18
 8006ec6:	d047      	beq.n	8006f58 <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8006ec8:	23ef      	movs	r3, #239	; 0xef
 8006eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006ece:	e043      	b.n	8006f58 <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	7a1b      	ldrb	r3, [r3, #8]
 8006ed4:	7cba      	ldrb	r2, [r7, #18]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d002      	beq.n	8006ee0 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 8006eda:	23ee      	movs	r3, #238	; 0xee
 8006edc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	7adb      	ldrb	r3, [r3, #11]
 8006ee4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d002      	beq.n	8006ef2 <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8006eec:	23ed      	movs	r3, #237	; 0xed
 8006eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	7b5b      	ldrb	r3, [r3, #13]
 8006ef6:	4619      	mov	r1, r3
		expected_stream_count =
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	460b      	mov	r3, r1
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	440b      	add	r3, r1
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	4413      	add	r3, r2
 8006f04:	3302      	adds	r3, #2
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	7b5b      	ldrb	r3, [r3, #13]
 8006f0e:	4619      	mov	r1, r3
		expected_gph_id =
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	460b      	mov	r3, r1
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	440b      	add	r3, r1
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	4413      	add	r3, r2
 8006f1c:	3303      	adds	r3, #3
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 8006f22:	7c3a      	ldrb	r2, [r7, #16]
 8006f24:	7cbb      	ldrb	r3, [r7, #18]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d00a      	beq.n	8006f40 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d102      	bne.n	8006f3a <VL53LX_check_ll_driver_rd_state+0x136>
 8006f34:	7cbb      	ldrb	r3, [r7, #18]
 8006f36:	2bff      	cmp	r3, #255	; 0xff
 8006f38:	d002      	beq.n	8006f40 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 8006f3a:	23ec      	movs	r3, #236	; 0xec
 8006f3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 8006f40:	7bfa      	ldrb	r2, [r7, #15]
 8006f42:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d005      	beq.n	8006f56 <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 8006f4a:	23eb      	movs	r3, #235	; 0xeb
 8006f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006f50:	e002      	b.n	8006f58 <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 8006f52:	bf00      	nop
 8006f54:	e000      	b.n	8006f58 <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 8006f56:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8006f58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3734      	adds	r7, #52	; 0x34
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b088      	sub	sp, #32
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8006f70:	2300      	movs	r3, #0
 8006f72:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3318      	adds	r3, #24
 8006f78:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8006f80:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	332c      	adds	r3, #44	; 0x2c
 8006f86:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006f8e:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8006f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d11b      	bne.n	8006fd6 <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	2203      	movs	r2, #3
 8006fa2:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	2200      	movs	r2, #0
 8006fae:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	773b      	strb	r3, [r7, #28]
 8006fd4:	e0b1      	b.n	800713a <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	791b      	ldrb	r3, [r3, #4]
 8006fda:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	799b      	ldrb	r3, [r3, #6]
 8006fe0:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	785b      	ldrb	r3, [r3, #1]
 8006fec:	2bff      	cmp	r3, #255	; 0xff
 8006fee:	d103      	bne.n	8006ff8 <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	2280      	movs	r2, #128	; 0x80
 8006ff4:	705a      	strb	r2, [r3, #1]
 8006ff6:	e005      	b.n	8007004 <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	785b      	ldrb	r3, [r3, #1]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	7859      	ldrb	r1, [r3, #1]
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	1c9a      	adds	r2, r3, #2
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	3303      	adds	r3, #3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f002 fb0a 	bl	800962a <VL53LX_update_internal_stream_counters>
 8007016:	4603      	mov	r3, r0
 8007018:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	791b      	ldrb	r3, [r3, #4]
 800701e:	f083 0302 	eor.w	r3, r3, #2
 8007022:	b2da      	uxtb	r2, r3
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b05      	cmp	r3, #5
 800702e:	d053      	beq.n	80070d8 <VL53LX_update_ll_driver_cfg_state+0x170>
 8007030:	2b05      	cmp	r3, #5
 8007032:	dc69      	bgt.n	8007108 <VL53LX_update_ll_driver_cfg_state+0x1a0>
 8007034:	2b03      	cmp	r3, #3
 8007036:	d002      	beq.n	800703e <VL53LX_update_ll_driver_cfg_state+0xd6>
 8007038:	2b04      	cmp	r3, #4
 800703a:	d02d      	beq.n	8007098 <VL53LX_update_ll_driver_cfg_state+0x130>
 800703c:	e064      	b.n	8007108 <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	2201      	movs	r2, #1
 8007042:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800704e:	429a      	cmp	r2, r3
 8007050:	d909      	bls.n	8007066 <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2200      	movs	r2, #0
 8007056:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	795b      	ldrb	r3, [r3, #5]
 800705c:	f083 0301 	eor.w	r3, r3, #1
 8007060:	b2da      	uxtb	r2, r3
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	2201      	movs	r2, #1
 800706a:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007072:	2b00      	cmp	r3, #0
 8007074:	d106      	bne.n	8007084 <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2201      	movs	r2, #1
 800707a:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	2200      	movs	r2, #0
 8007080:	70da      	strb	r2, [r3, #3]
 8007082:	e005      	b.n	8007090 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	2200      	movs	r2, #0
 8007088:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2201      	movs	r2, #1
 800708e:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	2204      	movs	r2, #4
 8007094:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 8007096:	e050      	b.n	800713a <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	799b      	ldrb	r3, [r3, #6]
 800709c:	3301      	adds	r3, #1
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d940      	bls.n	8007134 <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2200      	movs	r2, #0
 80070b6:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	795b      	ldrb	r3, [r3, #5]
 80070bc:	f083 0301 	eor.w	r3, r3, #1
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d031      	beq.n	8007134 <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	2205      	movs	r2, #5
 80070d4:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 80070d6:	e02d      	b.n	8007134 <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	799b      	ldrb	r3, [r3, #6]
 80070dc:	3301      	adds	r3, #1
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d922      	bls.n	8007138 <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	2200      	movs	r2, #0
 80070f6:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	795b      	ldrb	r3, [r3, #5]
 80070fc:	f083 0301 	eor.w	r3, r3, #1
 8007100:	b2da      	uxtb	r2, r3
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	715a      	strb	r2, [r3, #5]
			}
			break;
 8007106:	e017      	b.n	8007138 <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2203      	movs	r2, #3
 800710c:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	2200      	movs	r2, #0
 8007112:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	2200      	movs	r2, #0
 8007118:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2200      	movs	r2, #0
 800711e:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	2202      	movs	r2, #2
 8007124:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2200      	movs	r2, #0
 800712a:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	2200      	movs	r2, #0
 8007130:	719a      	strb	r2, [r3, #6]
			break;
 8007132:	e002      	b.n	800713a <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007134:	bf00      	nop
 8007136:	e000      	b.n	800713a <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007138:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d11d      	bne.n	8007180 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007144:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 8007146:	7f3b      	ldrb	r3, [r7, #28]
 8007148:	3b01      	subs	r3, #1
 800714a:	b2d8      	uxtb	r0, r3
 800714c:	68f9      	ldr	r1, [r7, #12]
 800714e:	4613      	mov	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	440b      	add	r3, r1
 8007158:	3302      	adds	r3, #2
 800715a:	4602      	mov	r2, r0
 800715c:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	7b5b      	ldrb	r3, [r3, #13]
 8007162:	4619      	mov	r1, r3
 8007164:	7f7b      	ldrb	r3, [r7, #29]
 8007166:	f083 0302 	eor.w	r3, r3, #2
 800716a:	b2d8      	uxtb	r0, r3
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	460b      	mov	r3, r1
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	440b      	add	r3, r1
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	4413      	add	r3, r2
 8007178:	3303      	adds	r3, #3
 800717a:	4602      	mov	r2, r0
 800717c:	701a      	strb	r2, [r3, #0]
 800717e:	e013      	b.n	80071a8 <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007180:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 8007182:	68f9      	ldr	r1, [r7, #12]
 8007184:	4613      	mov	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	440b      	add	r3, r1
 800718e:	3302      	adds	r3, #2
 8007190:	7f3a      	ldrb	r2, [r7, #28]
 8007192:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 8007194:	7fba      	ldrb	r2, [r7, #30]
 8007196:	68f9      	ldr	r1, [r7, #12]
 8007198:	4613      	mov	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	005b      	lsls	r3, r3, #1
 80071a0:	440b      	add	r3, r1
 80071a2:	3303      	adds	r3, #3
 80071a4:	7f7a      	ldrb	r2, [r7, #29]
 80071a6:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 80071a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3720      	adds	r7, #32
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	7c1a      	ldrb	r2, [r3, #16]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	3301      	adds	r3, #1
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	7c52      	ldrb	r2, [r2, #17]
 80071ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	3302      	adds	r3, #2
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	7c92      	ldrb	r2, [r2, #18]
 80071d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	3303      	adds	r3, #3
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	7cd2      	ldrb	r2, [r2, #19]
 80071e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	3304      	adds	r3, #4
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	7d12      	ldrb	r2, [r2, #20]
 80071ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	3305      	adds	r3, #5
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	7d52      	ldrb	r2, [r2, #21]
 80071f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	3306      	adds	r3, #6
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	7d92      	ldrb	r2, [r2, #22]
 8007200:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	3307      	adds	r3, #7
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	7dd2      	ldrb	r2, [r2, #23]
 800720a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	3308      	adds	r3, #8
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	7e12      	ldrb	r2, [r2, #24]
 8007214:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	3309      	adds	r3, #9
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	7e52      	ldrb	r2, [r2, #25]
 800721e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	330a      	adds	r3, #10
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	7e92      	ldrb	r2, [r2, #26]
 8007228:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	330b      	adds	r3, #11
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	7ed2      	ldrb	r2, [r2, #27]
 8007232:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	330c      	adds	r3, #12
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	7f12      	ldrb	r2, [r2, #28]
 800723c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	330d      	adds	r3, #13
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	7f52      	ldrb	r2, [r2, #29]
 8007246:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	330e      	adds	r3, #14
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	7f92      	ldrb	r2, [r2, #30]
 8007250:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	330f      	adds	r3, #15
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	7fd2      	ldrb	r2, [r2, #31]
 800725a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	3310      	adds	r3, #16
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007266:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	3311      	adds	r3, #17
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007272:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	3312      	adds	r3, #18
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800727e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	3313      	adds	r3, #19
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800728a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	3314      	adds	r3, #20
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007296:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	3315      	adds	r3, #21
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80072a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	3316      	adds	r3, #22
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 80072ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	3317      	adds	r3, #23
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80072ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	3318      	adds	r3, #24
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80072c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	3319      	adds	r3, #25
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 80072d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	331a      	adds	r3, #26
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 80072de:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	331b      	adds	r3, #27
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 80072ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	331c      	adds	r3, #28
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80072f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	331d      	adds	r3, #29
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007302:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	331e      	adds	r3, #30
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800730e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	331f      	adds	r3, #31
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800731a:	701a      	strb	r2, [r3, #0]
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	22ff      	movs	r2, #255	; 0xff
 8007334:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	22ff      	movs	r2, #255	; 0xff
 800733a:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	22ff      	movs	r2, #255	; 0xff
 8007340:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	22ff      	movs	r2, #255	; 0xff
 8007346:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800734e:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007356:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800735e:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007366:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800736e:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007376:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800737e:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007386:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800738e:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007396:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800739e:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073a6:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073ae:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073b6:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073be:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073c6:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073ce:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073d6:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073de:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	22ff      	movs	r2, #255	; 0xff
 80073e4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	6039      	str	r1, [r7, #0]
 80073fe:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 8007400:	2300      	movs	r3, #0
 8007402:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2205      	movs	r2, #5
 8007408:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	79fa      	ldrb	r2, [r7, #7]
 800740e:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8007410:	2300      	movs	r3, #0
 8007412:	73fb      	strb	r3, [r7, #15]
 8007414:	e017      	b.n	8007446 <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 8007416:	7bfa      	ldrb	r2, [r7, #15]
 8007418:	4613      	mov	r3, r2
 800741a:	011b      	lsls	r3, r3, #4
 800741c:	4413      	add	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	4413      	add	r3, r2
 8007424:	3304      	adds	r3, #4
 8007426:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2203      	movs	r2, #3
 800742c:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2203      	movs	r2, #3
 8007432:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2204      	movs	r2, #4
 8007438:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2200      	movs	r2, #0
 800743e:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	3301      	adds	r3, #1
 8007444:	73fb      	strb	r3, [r7, #15]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	7bfa      	ldrb	r2, [r7, #15]
 800744c:	429a      	cmp	r2, r3
 800744e:	d3e2      	bcc.n	8007416 <V53L1_init_zone_results_structure+0x22>
	}
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 800745e:	b490      	push	{r4, r7}
 8007460:	b082      	sub	sp, #8
 8007462:	af00      	add	r7, sp, #0
 8007464:	4604      	mov	r4, r0
 8007466:	4608      	mov	r0, r1
 8007468:	4611      	mov	r1, r2
 800746a:	461a      	mov	r2, r3
 800746c:	4623      	mov	r3, r4
 800746e:	71fb      	strb	r3, [r7, #7]
 8007470:	4603      	mov	r3, r0
 8007472:	71bb      	strb	r3, [r7, #6]
 8007474:	460b      	mov	r3, r1
 8007476:	717b      	strb	r3, [r7, #5]
 8007478:	4613      	mov	r3, r2
 800747a:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800747c:	79bb      	ldrb	r3, [r7, #6]
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	b2da      	uxtb	r2, r3
 8007482:	79fb      	ldrb	r3, [r7, #7]
 8007484:	4413      	add	r3, r2
 8007486:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800748c:	793b      	ldrb	r3, [r7, #4]
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	b2da      	uxtb	r2, r3
 8007492:	797b      	ldrb	r3, [r7, #5]
 8007494:	4413      	add	r3, r2
 8007496:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8007498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749a:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800749c:	7d3b      	ldrb	r3, [r7, #20]
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	7c3b      	ldrb	r3, [r7, #16]
 80074a4:	4413      	add	r3, r2
 80074a6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 80074ac:	7f3b      	ldrb	r3, [r7, #28]
 80074ae:	011b      	lsls	r3, r3, #4
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	7e3b      	ldrb	r3, [r7, #24]
 80074b4:	4413      	add	r3, r2
 80074b6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 80074b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ba:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 80074bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80074c8:	4413      	add	r3, r2
 80074ca:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 80074d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074d4:	011b      	lsls	r3, r3, #4
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80074dc:	4413      	add	r3, r2
 80074de:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 80074e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e2:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 80074f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f2:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 8007500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007502:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8007504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007506:	f897 2020 	ldrb.w	r2, [r7, #32]
 800750a:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800750c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007510:	011b      	lsls	r3, r3, #4
 8007512:	b2da      	uxtb	r2, r3
 8007514:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007518:	4413      	add	r3, r2
 800751a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007526:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8007528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752a:	2200      	movs	r2, #0
 800752c:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 8007556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007558:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007564:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800756c:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	2200      	movs	r2, #0
 8007572:	701a      	strb	r2, [r3, #0]

}
 8007574:	bf00      	nop
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bc90      	pop	{r4, r7}
 800757c:	4770      	bx	lr

0800757e <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 800757e:	b490      	push	{r4, r7}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	4604      	mov	r4, r0
 8007586:	4608      	mov	r0, r1
 8007588:	4611      	mov	r1, r2
 800758a:	461a      	mov	r2, r3
 800758c:	4623      	mov	r3, r4
 800758e:	71fb      	strb	r3, [r7, #7]
 8007590:	4603      	mov	r3, r0
 8007592:	71bb      	strb	r3, [r7, #6]
 8007594:	460b      	mov	r3, r1
 8007596:	717b      	strb	r3, [r7, #5]
 8007598:	4613      	mov	r3, r2
 800759a:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800759c:	79bb      	ldrb	r3, [r7, #6]
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	79fb      	ldrb	r3, [r7, #7]
 80075a4:	4413      	add	r3, r2
 80075a6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 80075ac:	793b      	ldrb	r3, [r7, #4]
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	797b      	ldrb	r3, [r7, #5]
 80075b4:	4413      	add	r3, r2
 80075b6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 80075bc:	7d3b      	ldrb	r3, [r7, #20]
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	7c3b      	ldrb	r3, [r7, #16]
 80075c4:	4413      	add	r3, r2
 80075c6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 80075c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ca:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	789a      	ldrb	r2, [r3, #2]
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075da:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 80075dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075de:	78da      	ldrb	r2, [r3, #3]
 80075e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e2:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 80075ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ee:	789a      	ldrb	r2, [r3, #2]
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 80075f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f6:	78da      	ldrb	r2, [r3, #3]
 80075f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fa:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 80075fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fe:	791a      	ldrb	r2, [r3, #4]
 8007600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007602:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8007604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007606:	f897 2020 	ldrb.w	r2, [r7, #32]
 800760a:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800760c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007610:	011b      	lsls	r3, r3, #4
 8007612:	b2da      	uxtb	r2, r3
 8007614:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007618:	4413      	add	r3, r2
 800761a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761e:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007626:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8007628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762a:	2200      	movs	r2, #0
 800762c:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800762e:	7f3b      	ldrb	r3, [r7, #28]
 8007630:	011b      	lsls	r3, r3, #4
 8007632:	b2da      	uxtb	r2, r3
 8007634:	7e3b      	ldrb	r3, [r7, #24]
 8007636:	4413      	add	r3, r2
 8007638:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800763e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	b2da      	uxtb	r2, r3
 8007646:	f897 3020 	ldrb.w	r3, [r7, #32]
 800764a:	4413      	add	r3, r2
 800764c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 8007652:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	b2da      	uxtb	r2, r3
 800765a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800765e:	4413      	add	r3, r2
 8007660:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	7bda      	ldrb	r2, [r3, #15]
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	7c1a      	ldrb	r2, [r3, #16]
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 8007676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007678:	7c5a      	ldrb	r2, [r3, #17]
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007684:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800768c:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	2200      	movs	r2, #0
 8007692:	701a      	strb	r2, [r3, #0]
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bc90      	pop	{r4, r7}
 800769c:	4770      	bx	lr

0800769e <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 800769e:	b480      	push	{r7}
 80076a0:	b087      	sub	sp, #28
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	460b      	mov	r3, r1
 80076a8:	607a      	str	r2, [r7, #4]
 80076aa:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 80076ac:	2300      	movs	r3, #0
 80076ae:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	220c      	movs	r2, #12
 80076c6:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 80076c8:	897b      	ldrh	r3, [r7, #10]
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_015                = 0;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 80076fe:	2300      	movs	r3, #0
 8007700:	82fb      	strh	r3, [r7, #22]
 8007702:	e015      	b.n	8007730 <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 8007704:	8afa      	ldrh	r2, [r7, #22]
 8007706:	897b      	ldrh	r3, [r7, #10]
 8007708:	429a      	cmp	r2, r3
 800770a:	d207      	bcs.n	800771c <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800770c:	8afb      	ldrh	r3, [r7, #22]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	3302      	adds	r3, #2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	605a      	str	r2, [r3, #4]
 800771a:	e006      	b.n	800772a <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800771c:	8afb      	ldrh	r3, [r7, #22]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	3302      	adds	r3, #2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	2200      	movs	r2, #0
 8007728:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 800772a:	8afb      	ldrh	r3, [r7, #22]
 800772c:	3301      	adds	r3, #1
 800772e:	82fb      	strh	r3, [r7, #22]
 8007730:	8afb      	ldrh	r3, [r7, #22]
 8007732:	2b0b      	cmp	r3, #11
 8007734:	d9e6      	bls.n	8007704 <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 8007736:	bf00      	nop
 8007738:	bf00      	nop
 800773a:	371c      	adds	r7, #28
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	4603      	mov	r3, r0
 800774c:	603a      	str	r2, [r7, #0]
 800774e:	80fb      	strh	r3, [r7, #6]
 8007750:	460b      	mov	r3, r1
 8007752:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8007754:	2300      	movs	r3, #0
 8007756:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 800775c:	88fb      	ldrh	r3, [r7, #6]
 800775e:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8007760:	2300      	movs	r3, #0
 8007762:	81fb      	strh	r3, [r7, #14]
 8007764:	e00e      	b.n	8007784 <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8007766:	88ba      	ldrh	r2, [r7, #4]
 8007768:	89fb      	ldrh	r3, [r7, #14]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	3b01      	subs	r3, #1
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	4413      	add	r3, r2
 8007772:	89ba      	ldrh	r2, [r7, #12]
 8007774:	b2d2      	uxtb	r2, r2
 8007776:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8007778:	89bb      	ldrh	r3, [r7, #12]
 800777a:	0a1b      	lsrs	r3, r3, #8
 800777c:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800777e:	89fb      	ldrh	r3, [r7, #14]
 8007780:	3301      	adds	r3, #1
 8007782:	81fb      	strh	r3, [r7, #14]
 8007784:	89fa      	ldrh	r2, [r7, #14]
 8007786:	88bb      	ldrh	r3, [r7, #4]
 8007788:	429a      	cmp	r2, r3
 800778a:	d3ec      	bcc.n	8007766 <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 800778c:	bf00      	nop
 800778e:	bf00      	nop
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800779a:	b480      	push	{r7}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	4603      	mov	r3, r0
 80077a2:	6039      	str	r1, [r7, #0]
 80077a4:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 80077a6:	2300      	movs	r3, #0
 80077a8:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 80077aa:	e00a      	b.n	80077c2 <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 80077ac:	89fb      	ldrh	r3, [r7, #14]
 80077ae:	021b      	lsls	r3, r3, #8
 80077b0:	b21a      	sxth	r2, r3
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	1c59      	adds	r1, r3, #1
 80077b6:	6039      	str	r1, [r7, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	b21b      	sxth	r3, r3
 80077bc:	4313      	orrs	r3, r2
 80077be:	b21b      	sxth	r3, r3
 80077c0:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 80077c2:	88fb      	ldrh	r3, [r7, #6]
 80077c4:	1e5a      	subs	r2, r3, #1
 80077c6:	80fa      	strh	r2, [r7, #6]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1ef      	bne.n	80077ac <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 80077cc:	89fb      	ldrh	r3, [r7, #14]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80077da:	b480      	push	{r7}
 80077dc:	b085      	sub	sp, #20
 80077de:	af00      	add	r7, sp, #0
 80077e0:	4603      	mov	r3, r0
 80077e2:	603a      	str	r2, [r7, #0]
 80077e4:	80fb      	strh	r3, [r7, #6]
 80077e6:	460b      	mov	r3, r1
 80077e8:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 80077f2:	88fb      	ldrh	r3, [r7, #6]
 80077f4:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 80077f6:	2300      	movs	r3, #0
 80077f8:	81fb      	strh	r3, [r7, #14]
 80077fa:	e00f      	b.n	800781c <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80077fc:	88ba      	ldrh	r2, [r7, #4]
 80077fe:	89fb      	ldrh	r3, [r7, #14]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	3b01      	subs	r3, #1
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	4413      	add	r3, r2
 8007808:	89ba      	ldrh	r2, [r7, #12]
 800780a:	b2d2      	uxtb	r2, r2
 800780c:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 800780e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007812:	121b      	asrs	r3, r3, #8
 8007814:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8007816:	89fb      	ldrh	r3, [r7, #14]
 8007818:	3301      	adds	r3, #1
 800781a:	81fb      	strh	r3, [r7, #14]
 800781c:	89fa      	ldrh	r2, [r7, #14]
 800781e:	88bb      	ldrh	r3, [r7, #4]
 8007820:	429a      	cmp	r2, r3
 8007822:	d3eb      	bcc.n	80077fc <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007832:	b480      	push	{r7}
 8007834:	b085      	sub	sp, #20
 8007836:	af00      	add	r7, sp, #0
 8007838:	4603      	mov	r3, r0
 800783a:	6039      	str	r1, [r7, #0]
 800783c:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800783e:	2300      	movs	r3, #0
 8007840:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	b25b      	sxtb	r3, r3
 8007848:	2b00      	cmp	r3, #0
 800784a:	da0e      	bge.n	800786a <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800784c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007850:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8007852:	e00a      	b.n	800786a <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8007854:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007858:	021b      	lsls	r3, r3, #8
 800785a:	b21a      	sxth	r2, r3
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	1c59      	adds	r1, r3, #1
 8007860:	6039      	str	r1, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	b21b      	sxth	r3, r3
 8007866:	4313      	orrs	r3, r2
 8007868:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800786a:	88fb      	ldrh	r3, [r7, #6]
 800786c:	1e5a      	subs	r2, r3, #1
 800786e:	80fa      	strh	r2, [r7, #6]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1ef      	bne.n	8007854 <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 8007874:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	460b      	mov	r3, r1
 800788e:	607a      	str	r2, [r7, #4]
 8007890:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 8007896:	2300      	movs	r3, #0
 8007898:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800789e:	2300      	movs	r3, #0
 80078a0:	82fb      	strh	r3, [r7, #22]
 80078a2:	e00e      	b.n	80078c2 <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80078a4:	897a      	ldrh	r2, [r7, #10]
 80078a6:	8afb      	ldrh	r3, [r7, #22]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	4413      	add	r3, r2
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	b2d2      	uxtb	r2, r2
 80078b4:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	0a1b      	lsrs	r3, r3, #8
 80078ba:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 80078bc:	8afb      	ldrh	r3, [r7, #22]
 80078be:	3301      	adds	r3, #1
 80078c0:	82fb      	strh	r3, [r7, #22]
 80078c2:	8afa      	ldrh	r2, [r7, #22]
 80078c4:	897b      	ldrh	r3, [r7, #10]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d3ec      	bcc.n	80078a4 <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 80078ca:	bf00      	nop
 80078cc:	bf00      	nop
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4603      	mov	r3, r0
 80078e0:	6039      	str	r1, [r7, #0]
 80078e2:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 80078e4:	2300      	movs	r3, #0
 80078e6:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 80078e8:	e007      	b.n	80078fa <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	021a      	lsls	r2, r3, #8
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	1c59      	adds	r1, r3, #1
 80078f2:	6039      	str	r1, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 80078fa:	88fb      	ldrh	r3, [r7, #6]
 80078fc:	1e5a      	subs	r2, r3, #1
 80078fe:	80fa      	strh	r2, [r7, #6]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1f2      	bne.n	80078ea <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 8007904:	68fb      	ldr	r3, [r7, #12]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007912:	b480      	push	{r7}
 8007914:	b085      	sub	sp, #20
 8007916:	af00      	add	r7, sp, #0
 8007918:	4603      	mov	r3, r0
 800791a:	6039      	str	r1, [r7, #0]
 800791c:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800791e:	2300      	movs	r3, #0
 8007920:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	b25b      	sxtb	r3, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	da0b      	bge.n	8007944 <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800792c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007930:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8007932:	e007      	b.n	8007944 <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	021a      	lsls	r2, r3, #8
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	1c59      	adds	r1, r3, #1
 800793c:	6039      	str	r1, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	4313      	orrs	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 8007944:	88fb      	ldrh	r3, [r7, #6]
 8007946:	1e5a      	subs	r2, r3, #1
 8007948:	80fa      	strh	r2, [r7, #6]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1f2      	bne.n	8007934 <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 800794e:	68fb      	ldr	r3, [r7, #12]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <VL53LX_start_test>:


VL53LX_Error VL53LX_start_test(
	VL53LX_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	460b      	mov	r3, r1
 8007966:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8007968:	2300      	movs	r3, #0
 800796a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE) {
 800796c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d107      	bne.n	8007984 <VL53LX_start_test+0x28>
		status = VL53LX_WrByte(
 8007974:	78fb      	ldrb	r3, [r7, #3]
 8007976:	461a      	mov	r2, r3
 8007978:	2127      	movs	r1, #39	; 0x27
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f006 fccc 	bl	800e318 <VL53LX_WrByte>
 8007980:	4603      	mov	r3, r0
 8007982:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 8007984:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	460b      	mov	r3, r1
 800799a:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 800799c:	2300      	movs	r3, #0
 800799e:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3318      	adds	r3, #24
 80079a4:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	78fa      	ldrb	r2, [r7, #3]
 80079aa:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362

	status = VL53LX_WrByte(
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	f893 3362 	ldrb.w	r3, [r3, #866]	; 0x362
 80079b4:	461a      	mov	r2, r3
 80079b6:	2185      	movs	r1, #133	; 0x85
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f006 fcad 	bl	800e318 <VL53LX_WrByte>
 80079be:	4603      	mov	r3, r0
 80079c0:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 80079c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80079d6:	2300      	movs	r3, #0
 80079d8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 80079da:	2101      	movs	r1, #1
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff ffd7 	bl	8007990 <VL53LX_set_firmware_enable_register>
 80079e2:	4603      	mov	r3, r0
 80079e4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80079e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b084      	sub	sp, #16
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80079fa:	2300      	movs	r3, #0
 80079fc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 80079fe:	2100      	movs	r1, #0
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7ff ffc5 	bl	8007990 <VL53LX_set_firmware_enable_register>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8007a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3318      	adds	r3, #24
 8007a2a:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	78fa      	ldrb	r2, [r7, #3]
 8007a30:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360

	status = VL53LX_WrByte(
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f893 3360 	ldrb.w	r3, [r3, #864]	; 0x360
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	2183      	movs	r1, #131	; 0x83
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f006 fc6a 	bl	800e318 <VL53LX_WrByte>
 8007a44:	4603      	mov	r3, r0
 8007a46:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 8007a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 8007a60:	2101      	movs	r1, #1
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff ffd7 	bl	8007a16 <VL53LX_set_powerforce_register>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8007a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 8007a84:	2100      	movs	r1, #0
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7ff ffc5 	bl	8007a16 <VL53LX_set_powerforce_register>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8007a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <VL53LX_clear_interrupt>:


VL53LX_Error VL53LX_clear_interrupt(
	VL53LX_DEV    Dev)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3318      	adds	r3, #24
 8007aac:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53LX_CLEAR_RANGE_INT;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363

	status = VL53LX_WrByte(
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 8007abc:	461a      	mov	r2, r3
 8007abe:	2186      	movs	r1, #134	; 0x86
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f006 fc29 	bl	800e318 <VL53LX_WrByte>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	73fb      	strb	r3, [r7, #15]
				VL53LX_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 8007aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b086      	sub	sp, #24
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	4603      	mov	r3, r0
 8007ade:	460a      	mov	r2, r1
 8007ae0:	80fb      	strh	r3, [r7, #6]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 8007aea:	2300      	movs	r3, #0
 8007aec:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 8007af2:	88fb      	ldrh	r3, [r7, #6]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f002 fe4f 	bl	800a798 <VL53LX_calc_pll_period_us>
 8007afa:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 8007afc:	797b      	ldrb	r3, [r7, #5]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f003 fa1e 	bl	800af40 <VL53LX_decode_vcsel_period>
 8007b04:	4603      	mov	r3, r0
 8007b06:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	4413      	add	r3, r2
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	099b      	lsrs	r3, r3, #6
 8007b18:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 8007b1a:	7cfa      	ldrb	r2, [r7, #19]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	fb02 f303 	mul.w	r3, r2, r3
 8007b22:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	099b      	lsrs	r3, r3, #6
 8007b28:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b089      	sub	sp, #36	; 0x24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	4608      	mov	r0, r1
 8007b3e:	4611      	mov	r1, r2
 8007b40:	461a      	mov	r2, r3
 8007b42:	4603      	mov	r3, r0
 8007b44:	817b      	strh	r3, [r7, #10]
 8007b46:	460b      	mov	r3, r1
 8007b48:	813b      	strh	r3, [r7, #8]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 8007b56:	2300      	movs	r3, #0
 8007b58:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	011b      	lsls	r3, r3, #4
 8007b66:	4a23      	ldr	r2, [pc, #140]	; (8007bf4 <VL53LX_calc_range_ignore_threshold+0xc0>)
 8007b68:	fb82 1203 	smull	r1, r2, r2, r3
 8007b6c:	1192      	asrs	r2, r2, #6
 8007b6e:	17db      	asrs	r3, r3, #31
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 8007b74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	da03      	bge.n	8007b84 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8007b7c:	897b      	ldrh	r3, [r7, #10]
 8007b7e:	425b      	negs	r3, r3
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 8007b84:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	da03      	bge.n	8007b94 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8007b8c:	893b      	ldrh	r3, [r7, #8]
 8007b8e:	425b      	negs	r3, r3
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 8007b94:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8007b98:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	015b      	lsls	r3, r3, #5
 8007ba0:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	4a13      	ldr	r2, [pc, #76]	; (8007bf4 <VL53LX_calc_range_ignore_threshold+0xc0>)
 8007ba6:	fb82 1203 	smull	r1, r2, r2, r3
 8007baa:	1192      	asrs	r2, r2, #6
 8007bac:	17db      	asrs	r3, r3, #31
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8007bba:	79fa      	ldrb	r2, [r7, #7]
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	fb02 f303 	mul.w	r3, r2, r3
 8007bc2:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	3310      	adds	r3, #16
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	da00      	bge.n	8007bce <VL53LX_calc_range_ignore_threshold+0x9a>
 8007bcc:	331f      	adds	r3, #31
 8007bce:	115b      	asrs	r3, r3, #5
 8007bd0:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd8:	db03      	blt.n	8007be2 <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8007bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007bde:	83fb      	strh	r3, [r7, #30]
 8007be0:	e001      	b.n	8007be6 <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8007be6:	8bfb      	ldrh	r3, [r7, #30]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3724      	adds	r7, #36	; 0x24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	10624dd3 	.word	0x10624dd3

08007bf8 <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d102      	bne.n	8007c12 <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	e008      	b.n	8007c24 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	031a      	lsls	r2, r3, #12
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	085b      	lsrs	r3, r3, #1
 8007c1a:	441a      	add	r2, r3
		timeout_mclks   =
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c22:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8007c24:	68fb      	ldr	r3, [r7, #12]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8007c40:	2300      	movs	r3, #0
 8007c42:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7ff ffd6 	bl	8007bf8 <VL53LX_calc_timeout_mclks>
 8007c4c:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 f885 	bl	8007d5e <VL53LX_encode_timeout>
 8007c54:	4603      	mov	r3, r0
 8007c56:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8007c58:	897b      	ldrh	r3, [r7, #10]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8007c62:	b4f0      	push	{r4, r5, r6, r7}
 8007c64:	b086      	sub	sp, #24
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 8007c70:	f04f 0200 	mov.w	r2, #0
 8007c74:	f04f 0300 	mov.w	r3, #0
 8007c78:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f04f 0100 	mov.w	r1, #0
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	f04f 0300 	mov.w	r3, #0
 8007c8c:	fb02 fc01 	mul.w	ip, r2, r1
 8007c90:	fb00 f603 	mul.w	r6, r0, r3
 8007c94:	4466      	add	r6, ip
 8007c96:	fba0 2302 	umull	r2, r3, r0, r2
 8007c9a:	18f1      	adds	r1, r6, r3
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8007ca2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8007ca6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007caa:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 8007cae:	f143 0500 	adc.w	r5, r3, #0
 8007cb2:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 8007cb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007cba:	f04f 0200 	mov.w	r2, #0
 8007cbe:	f04f 0300 	mov.w	r3, #0
 8007cc2:	0b02      	lsrs	r2, r0, #12
 8007cc4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007cc8:	0b0b      	lsrs	r3, r1, #12
 8007cca:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 8007cd2:	697b      	ldr	r3, [r7, #20]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bcf0      	pop	{r4, r5, r6, r7}
 8007cdc:	4770      	bx	lr
	...

08007ce0 <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 8007cec:	2300      	movs	r3, #0
 8007cee:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 8007cf4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 8007cf8:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 8007cfa:	4413      	add	r3, r2
 8007cfc:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	da02      	bge.n	8007d0a <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 8007d04:	2300      	movs	r3, #0
 8007d06:	60fb      	str	r3, [r7, #12]
 8007d08:	e005      	b.n	8007d16 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d10:	db01      	blt.n	8007d16 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 8007d12:	4b05      	ldr	r3, [pc, #20]	; (8007d28 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 8007d14:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 8007d1a:	68bb      	ldr	r3, [r7, #8]

}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	0003ffff 	.word	0x0003ffff

08007d2c <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	4603      	mov	r3, r0
 8007d34:	6039      	str	r1, [r7, #0]
 8007d36:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 8007d40:	88fb      	ldrh	r3, [r7, #6]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 f837 	bl	8007db6 <VL53LX_decode_timeout>
 8007d48:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7ff ff88 	bl	8007c62 <VL53LX_calc_timeout_us>
 8007d52:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8007d54:	68bb      	ldr	r3, [r7, #8]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b087      	sub	sp, #28
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d017      	beq.n	8007da8 <VL53LX_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007d7e:	e005      	b.n	8007d8c <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	085b      	lsrs	r3, r3, #1
 8007d84:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007d86:	89fb      	ldrh	r3, [r7, #14]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1f4      	bne.n	8007d80 <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007d96:	89fb      	ldrh	r3, [r7, #14]
 8007d98:	021b      	lsls	r3, r3, #8
 8007d9a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007da4:	4413      	add	r3, r2
 8007da6:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007da8:	8afb      	ldrh	r3, [r7, #22]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b085      	sub	sp, #20
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007dc4:	88fb      	ldrh	r3, [r7, #6]
 8007dc6:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007dc8:	88fa      	ldrh	r2, [r7, #6]
 8007dca:	0a12      	lsrs	r2, r2, #8
 8007dcc:	b292      	uxth	r2, r2
 8007dce:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b088      	sub	sp, #32
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	60f8      	str	r0, [r7, #12]
 8007dea:	60b9      	str	r1, [r7, #8]
 8007dec:	607a      	str	r2, [r7, #4]
 8007dee:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8007df0:	2300      	movs	r3, #0
 8007df2:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8007df4:	2300      	movs	r3, #0
 8007df6:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8007e00:	887b      	ldrh	r3, [r7, #2]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d102      	bne.n	8007e0c <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8007e06:	23f1      	movs	r3, #241	; 0xf1
 8007e08:	77fb      	strb	r3, [r7, #31]
 8007e0a:	e05d      	b.n	8007ec8 <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 8007e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0e:	799a      	ldrb	r2, [r3, #6]
 8007e10:	887b      	ldrh	r3, [r7, #2]
 8007e12:	4611      	mov	r1, r2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7ff fe5e 	bl	8007ad6 <VL53LX_calc_macro_period_us>
 8007e1a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 8007e1c:	6979      	ldr	r1, [r7, #20]
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7ff feea 	bl	8007bf8 <VL53LX_calc_timeout_mclks>
 8007e24:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	2bff      	cmp	r3, #255	; 0xff
 8007e2a:	d901      	bls.n	8007e30 <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8007e2c:	23ff      	movs	r3, #255	; 0xff
 8007e2e:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8007e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e36:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8007e38:	6979      	ldr	r1, [r7, #20]
 8007e3a:	68b8      	ldr	r0, [r7, #8]
 8007e3c:	f7ff fef9 	bl	8007c32 <VL53LX_calc_encoded_timeout>
 8007e40:	4603      	mov	r3, r0
 8007e42:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8007e44:	8a7b      	ldrh	r3, [r7, #18]
 8007e46:	0a1b      	lsrs	r3, r3, #8
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8007e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007e50:	8a7b      	ldrh	r3, [r7, #18]
 8007e52:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8007e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e56:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8007e58:	6979      	ldr	r1, [r7, #20]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7ff fee9 	bl	8007c32 <VL53LX_calc_encoded_timeout>
 8007e60:	4603      	mov	r3, r0
 8007e62:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8007e64:	8a7b      	ldrh	r3, [r7, #18]
 8007e66:	0a1b      	lsrs	r3, r3, #8
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8007e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007e70:	8a7b      	ldrh	r3, [r7, #18]
 8007e72:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8007e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e76:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 8007e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7a:	7a5a      	ldrb	r2, [r3, #9]
 8007e7c:	887b      	ldrh	r3, [r7, #2]
 8007e7e:	4611      	mov	r1, r2
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7ff fe28 	bl	8007ad6 <VL53LX_calc_macro_period_us>
 8007e86:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 8007e88:	6979      	ldr	r1, [r7, #20]
 8007e8a:	68b8      	ldr	r0, [r7, #8]
 8007e8c:	f7ff fed1 	bl	8007c32 <VL53LX_calc_encoded_timeout>
 8007e90:	4603      	mov	r3, r0
 8007e92:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8007e94:	8a7b      	ldrh	r3, [r7, #18]
 8007e96:	0a1b      	lsrs	r3, r3, #8
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8007e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007ea0:	8a7b      	ldrh	r3, [r7, #18]
 8007ea2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8007ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea6:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 8007ea8:	6979      	ldr	r1, [r7, #20]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7ff fec1 	bl	8007c32 <VL53LX_calc_encoded_timeout>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8007eb4:	8a7b      	ldrh	r3, [r7, #18]
 8007eb6:	0a1b      	lsrs	r3, r3, #8
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebe:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007ec0:	8a7b      	ldrh	r3, [r7, #18]
 8007ec2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8007ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec6:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8007ec8:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3720      	adds	r7, #32
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 8007ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed8:	b08b      	sub	sp, #44	; 0x2c
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27

	int64_t  evts              = 0;
 8007ee6:	f04f 0000 	mov.w	r0, #0
 8007eea:	f04f 0100 	mov.w	r1, #0
 8007eee:	e9c7 0106 	strd	r0, r1, [r7, #24]
	int64_t  tmpi              = 0;
 8007ef2:	f04f 0000 	mov.w	r0, #0
 8007ef6:	f04f 0100 	mov.w	r1, #0
 8007efa:	e9c7 0104 	strd	r0, r1, [r7, #16]
	int64_t  tmpo              = 0;
 8007efe:	f04f 0000 	mov.w	r0, #0
 8007f02:	f04f 0100 	mov.w	r1, #0
 8007f06:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	8849      	ldrh	r1, [r1, #2]
 8007f0e:	2900      	cmp	r1, #0
 8007f10:	d103      	bne.n	8007f1a <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8007f12:	23f1      	movs	r3, #241	; 0xf1
 8007f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f18:	e0a5      	b.n	8008066 <VL53LX_hist_copy_and_scale_ambient_info+0x192>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	7849      	ldrb	r1, [r1, #1]
 8007f1e:	2900      	cmp	r1, #0
 8007f20:	f000 80a1 	beq.w	8008066 <VL53LX_hist_copy_and_scale_ambient_info+0x192>
			podata->number_of_ambient_bins == 0) {
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	7ac9      	ldrb	r1, [r1, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 8007f28:	2900      	cmp	r1, #0
 8007f2a:	f040 809c 	bne.w	8008066 <VL53LX_hist_copy_and_scale_ambient_info+0x192>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	f8d1 1088 	ldr.w	r1, [r1, #136]	; 0x88
 8007f34:	4608      	mov	r0, r1
 8007f36:	f04f 0100 	mov.w	r1, #0
 8007f3a:	f110 0a01 	adds.w	sl, r0, #1
 8007f3e:	f141 0b00 	adc.w	fp, r1, #0
 8007f42:	e9c7 ab02 	strd	sl, fp, [r7, #8]
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
 8007f4c:	b288      	uxth	r0, r1
 8007f4e:	f04f 0100 	mov.w	r1, #0
			tmpo   *=
 8007f52:	68fe      	ldr	r6, [r7, #12]
 8007f54:	fb00 fc06 	mul.w	ip, r0, r6
 8007f58:	68be      	ldr	r6, [r7, #8]
 8007f5a:	fb01 f606 	mul.w	r6, r1, r6
 8007f5e:	44b4      	add	ip, r6
 8007f60:	68be      	ldr	r6, [r7, #8]
 8007f62:	fba6 0100 	umull	r0, r1, r6, r0
 8007f66:	eb0c 0601 	add.w	r6, ip, r1
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007f70:	e9c7 0102 	strd	r0, r1, [r7, #8]

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8007f74:	6879      	ldr	r1, [r7, #4]
 8007f76:	6889      	ldr	r1, [r1, #8]
 8007f78:	4608      	mov	r0, r1
 8007f7a:	f04f 0100 	mov.w	r1, #0
 8007f7e:	1c44      	adds	r4, r0, #1
 8007f80:	f141 0500 	adc.w	r5, r1, #0
 8007f84:	e9c7 4504 	strd	r4, r5, [r7, #16]
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 8007f88:	6879      	ldr	r1, [r7, #4]
 8007f8a:	8849      	ldrh	r1, [r1, #2]
 8007f8c:	b288      	uxth	r0, r1
 8007f8e:	f04f 0100 	mov.w	r1, #0
			tmpi   *=
 8007f92:	697c      	ldr	r4, [r7, #20]
 8007f94:	fb00 f504 	mul.w	r5, r0, r4
 8007f98:	693c      	ldr	r4, [r7, #16]
 8007f9a:	fb01 f404 	mul.w	r4, r1, r4
 8007f9e:	442c      	add	r4, r5
 8007fa0:	693d      	ldr	r5, [r7, #16]
 8007fa2:	fba5 0100 	umull	r0, r1, r5, r0
 8007fa6:	440c      	add	r4, r1
 8007fa8:	4621      	mov	r1, r4
 8007faa:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8007fae:	e9c7 0104 	strd	r0, r1, [r7, #16]

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	68c9      	ldr	r1, [r1, #12]
 8007fb6:	4608      	mov	r0, r1
 8007fb8:	ea4f 71e0 	mov.w	r1, r0, asr #31
			evts  = tmpo *
 8007fbc:	68fc      	ldr	r4, [r7, #12]
 8007fbe:	fb00 f504 	mul.w	r5, r0, r4
 8007fc2:	68bc      	ldr	r4, [r7, #8]
 8007fc4:	fb01 f404 	mul.w	r4, r1, r4
 8007fc8:	442c      	add	r4, r5
 8007fca:	68bd      	ldr	r5, [r7, #8]
 8007fcc:	fba5 0100 	umull	r0, r1, r5, r0
 8007fd0:	440c      	add	r4, r1
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8007fd8:	e9c7 0106 	strd	r0, r1, [r7, #24]
			evts += (tmpi/2);
 8007fdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007fe0:	0fcc      	lsrs	r4, r1, #31
 8007fe2:	f04f 0500 	mov.w	r5, #0
 8007fe6:	1822      	adds	r2, r4, r0
 8007fe8:	eb45 0301 	adc.w	r3, r5, r1
 8007fec:	f04f 0000 	mov.w	r0, #0
 8007ff0:	f04f 0100 	mov.w	r1, #0
 8007ff4:	0850      	lsrs	r0, r2, #1
 8007ff6:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8007ffa:	1059      	asrs	r1, r3, #1
 8007ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008000:	eb12 0800 	adds.w	r8, r2, r0
 8008004:	eb43 0901 	adc.w	r9, r3, r1
 8008008:	e9c7 8906 	strd	r8, r9, [r7, #24]


			if (tmpi != 0)
 800800c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008010:	4313      	orrs	r3, r2
 8008012:	d009      	beq.n	8008028 <VL53LX_hist_copy_and_scale_ambient_info+0x154>
				evts = do_division_s(evts, tmpi);
 8008014:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008018:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800801c:	f7f8 f928 	bl	8000270 <__aeabi_ldivmod>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	e9c7 2306 	strd	r2, r3, [r7, #24]

			podata->ambient_events_sum = (int32_t)evts;
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53LX_p_028 =
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 +=
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	7852      	ldrb	r2, [r2, #1]
 8008046:	0852      	lsrs	r2, r2, #1
 8008048:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 800804a:	441a      	add	r2, r3
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 /=
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 800805c:	fb93 f2f2 	sdiv	r2, r3, r2
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 8008066:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800806a:	4618      	mov	r0, r3
 800806c:	372c      	adds	r7, #44	; 0x2c
 800806e:	46bd      	mov	sp, r7
 8008070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008074 <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8008074:	b480      	push	{r7}
 8008076:	b087      	sub	sp, #28
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	3318      	adds	r3, #24
 8008082:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 8008088:	2300      	movs	r3, #0
 800808a:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	; 0x2fa
	amb_thresh_low  = 1024 *
 8008096:	029b      	lsls	r3, r3, #10
 8008098:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
	amb_thresh_high = 1024 *
 80080a0:	029b      	lsls	r3, r3, #10
 80080a2:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f040 8095 	bne.w	80081de <VL53LX_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
		pdata->bin_seq[5] =
 80080ba:	091b      	lsrs	r3, r3, #4
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
 80080c8:	f003 030f 	and.w	r3, r3, #15
 80080cc:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
		pdata->bin_seq[3] =
 80080d8:	091b      	lsrs	r3, r3, #4
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
 80080e6:	f003 030f 	and.w	r3, r3, #15
 80080ea:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
		pdata->bin_seq[1] =
 80080f6:	091b      	lsrs	r3, r3, #4
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
 8008104:	f003 030f 	and.w	r3, r3, #15
 8008108:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	429a      	cmp	r2, r3
 8008118:	da2c      	bge.n	8008174 <VL53LX_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			pdata->bin_seq[5] =
 8008120:	091b      	lsrs	r3, r3, #4
 8008122:	b2da      	uxtb	r2, r3
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			& 0x0F;
 800812e:	f003 030f 	and.w	r3, r3, #15
 8008132:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			pdata->bin_seq[3] =
 800813e:	091b      	lsrs	r3, r3, #4
 8008140:	b2da      	uxtb	r2, r3
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			& 0x0F;
 800814c:	f003 030f 	and.w	r3, r3, #15
 8008150:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			pdata->bin_seq[1] =
 800815c:	091b      	lsrs	r3, r3, #4
 800815e:	b2da      	uxtb	r2, r3
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			& 0x0F;
 800816a:	f003 030f 	and.w	r3, r3, #15
 800816e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	429a      	cmp	r2, r3
 800817e:	f340 80c2 	ble.w	8008306 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			pdata->bin_seq[5] =
 8008188:	091b      	lsrs	r3, r3, #4
 800818a:	b2da      	uxtb	r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			& 0x0F;
 8008196:	f003 030f 	and.w	r3, r3, #15
 800819a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			pdata->bin_seq[3] =
 80081a6:	091b      	lsrs	r3, r3, #4
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			& 0x0F;
 80081b4:	f003 030f 	and.w	r3, r3, #15
 80081b8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			pdata->bin_seq[1] =
 80081c4:	091b      	lsrs	r3, r3, #4
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			& 0x0F;
 80081d2:	f003 030f 	and.w	r3, r3, #15
 80081d6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	731a      	strb	r2, [r3, #12]
 80081dc:	e093      	b.n	8008306 <VL53LX_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f893 32f1 	ldrb.w	r3, [r3, #753]	; 0x2f1
			& 0x0F;
 80081e4:	f003 030f 	and.w	r3, r3, #15
 80081e8:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
			& 0x0F;
 80081f4:	f003 030f 	and.w	r3, r3, #15
 80081f8:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
		pdata->bin_seq[3] =
 8008204:	091b      	lsrs	r3, r3, #4
 8008206:	b2da      	uxtb	r2, r3
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	f893 32ef 	ldrb.w	r3, [r3, #751]	; 0x2ef
 8008212:	f003 030f 	and.w	r3, r3, #15
 8008216:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
		pdata->bin_seq[1] =
 8008222:	091b      	lsrs	r3, r3, #4
 8008224:	b2da      	uxtb	r2, r3
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
			& 0x0F;
 8008230:	f003 030f 	and.w	r3, r3, #15
 8008234:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	429a      	cmp	r2, r3
 8008244:	da2c      	bge.n	80082a0 <VL53LX_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			pdata->bin_seq[5] =
 800824c:	091b      	lsrs	r3, r3, #4
 800824e:	b2da      	uxtb	r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			& 0x0F;
 800825a:	f003 030f 	and.w	r3, r3, #15
 800825e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			pdata->bin_seq[3] =
 800826a:	091b      	lsrs	r3, r3, #4
 800826c:	b2da      	uxtb	r2, r3
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			& 0x0F;
 8008278:	f003 030f 	and.w	r3, r3, #15
 800827c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			pdata->bin_seq[1] =
 8008288:	091b      	lsrs	r3, r3, #4
 800828a:	b2da      	uxtb	r2, r3
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			& 0x0F;
 8008296:	f003 030f 	and.w	r3, r3, #15
 800829a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	dd2c      	ble.n	8008306 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			pdata->bin_seq[5] =
 80082b2:	091b      	lsrs	r3, r3, #4
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			& 0x0F;
 80082c0:	f003 030f 	and.w	r3, r3, #15
 80082c4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			pdata->bin_seq[3] =
 80082d0:	091b      	lsrs	r3, r3, #4
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			& 0x0F;
 80082de:	f003 030f 	and.w	r3, r3, #15
 80082e2:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			pdata->bin_seq[1] =
 80082ee:	091b      	lsrs	r3, r3, #4
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			& 0x0F;
 80082fc:	f003 030f 	and.w	r3, r3, #15
 8008300:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8008306:	2300      	movs	r3, #0
 8008308:	75fb      	strb	r3, [r7, #23]
 800830a:	e007      	b.n	800831c <VL53LX_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800830c:	7dfb      	ldrb	r3, [r7, #23]
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	4413      	add	r3, r2
 8008312:	2201      	movs	r2, #1
 8008314:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	3301      	adds	r3, #1
 800831a:	75fb      	strb	r3, [r7, #23]
 800831c:	7dfb      	ldrb	r3, [r7, #23]
 800831e:	2b05      	cmp	r3, #5
 8008320:	d9f4      	bls.n	800830c <VL53LX_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 8008322:	bf00      	nop
 8008324:	bf00      	nop
 8008326:	371c      	adds	r7, #28
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 8008330:	b590      	push	{r4, r7, lr}
 8008332:	b093      	sub	sp, #76	; 0x4c
 8008334:	af04      	add	r7, sp, #16
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800833e:	2300      	movs	r3, #0
 8008340:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_LLDriverData_t *pdev =
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	3318      	adds	r3, #24
 8008348:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800834a:	2300      	movs	r3, #0
 800834c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 8008350:	2300      	movs	r3, #0
 8008352:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 8008356:	2300      	movs	r3, #0
 8008358:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800835a:	2300      	movs	r3, #0
 800835c:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 8008366:	2300      	movs	r3, #0
 8008368:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8008370:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 8008374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008376:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 800837a:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 8008382:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 8008384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008386:	f893 3236 	ldrb.w	r3, [r3, #566]	; 0x236
 800838a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800838e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008392:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 8008394:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008396:	021b      	lsls	r3, r3, #8
 8008398:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	785b      	ldrb	r3, [r3, #1]
 800839e:	2b07      	cmp	r3, #7
 80083a0:	d006      	beq.n	80083b0 <VL53LX_hist_phase_consistency_check+0x80>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 80083a6:	2b08      	cmp	r3, #8
 80083a8:	d002      	beq.n	80083b0 <VL53LX_hist_phase_consistency_check+0x80>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 80083aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80083ae:	e0ec      	b.n	800858a <VL53LX_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 80083b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d102      	bne.n	80083bc <VL53LX_hist_phase_consistency_check+0x8c>
		return status;
 80083b6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80083ba:	e0e6      	b.n	800858a <VL53LX_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 80083bc:	2300      	movs	r3, #0
 80083be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80083c2:	e0d9      	b.n	8008578 <VL53LX_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 80083c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	214c      	movs	r1, #76	; 0x4c
 80083cc:	fb01 f303 	mul.w	r3, r1, r3
 80083d0:	4413      	add	r3, r2
 80083d2:	335e      	adds	r3, #94	; 0x5e
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	2b09      	cmp	r3, #9
 80083d8:	d00b      	beq.n	80083f2 <VL53LX_hist_phase_consistency_check+0xc2>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 80083da:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80083de:	683a      	ldr	r2, [r7, #0]
 80083e0:	214c      	movs	r1, #76	; 0x4c
 80083e2:	fb01 f303 	mul.w	r3, r1, r3
 80083e6:	4413      	add	r3, r2
 80083e8:	335e      	adds	r3, #94	; 0x5e
 80083ea:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 80083ec:	2b13      	cmp	r3, #19
 80083ee:	f040 80bd 	bne.w	800856c <VL53LX_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	795b      	ldrb	r3, [r3, #5]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10a      	bne.n	8008410 <VL53LX_hist_phase_consistency_check+0xe0>
			prange_curr->VL53LX_p_003[lc].range_status =
 80083fa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	214c      	movs	r1, #76	; 0x4c
 8008402:	fb01 f303 	mul.w	r3, r1, r3
 8008406:	4413      	add	r3, r2
 8008408:	335e      	adds	r3, #94	; 0x5e
 800840a:	2217      	movs	r2, #23
 800840c:	701a      	strb	r2, [r3, #0]
 800840e:	e009      	b.n	8008424 <VL53LX_hist_phase_consistency_check+0xf4>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 8008410:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	214c      	movs	r1, #76	; 0x4c
 8008418:	fb01 f303 	mul.w	r3, r1, r3
 800841c:	4413      	add	r3, r2
 800841e:	335e      	adds	r3, #94	; 0x5e
 8008420:	2207      	movs	r2, #7
 8008422:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 8008424:	2300      	movs	r3, #0
 8008426:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800842a:	e097      	b.n	800855c <VL53LX_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 800842c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	214c      	movs	r1, #76	; 0x4c
 8008434:	fb01 f303 	mul.w	r3, r1, r3
 8008438:	4413      	add	r3, r2
 800843a:	3354      	adds	r3, #84	; 0x54
 800843c:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 800843e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	4613      	mov	r3, r2
 8008446:	005b      	lsls	r3, r3, #1
 8008448:	4413      	add	r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4403      	add	r3, r0
 800844e:	3310      	adds	r3, #16
 8008450:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8008452:	4299      	cmp	r1, r3
 8008454:	d915      	bls.n	8008482 <VL53LX_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 8008456:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	214c      	movs	r1, #76	; 0x4c
 800845e:	fb01 f303 	mul.w	r3, r1, r3
 8008462:	4413      	add	r3, r2
 8008464:	3354      	adds	r3, #84	; 0x54
 8008466:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 8008468:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	4613      	mov	r3, r2
 8008470:	005b      	lsls	r3, r3, #1
 8008472:	4413      	add	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4403      	add	r3, r0
 8008478:	3310      	adds	r3, #16
 800847a:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800847c:	1acb      	subs	r3, r1, r3
 800847e:	867b      	strh	r3, [r7, #50]	; 0x32
 8008480:	e014      	b.n	80084ac <VL53LX_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 8008482:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008486:	6879      	ldr	r1, [r7, #4]
 8008488:	4613      	mov	r3, r2
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	4413      	add	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	440b      	add	r3, r1
 8008492:	3310      	adds	r3, #16
 8008494:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 8008496:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	204c      	movs	r0, #76	; 0x4c
 800849e:	fb00 f303 	mul.w	r3, r0, r3
 80084a2:	440b      	add	r3, r1
 80084a4:	3354      	adds	r3, #84	; 0x54
 80084a6:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 80084ac:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80084ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d24e      	bcs.n	8008552 <VL53LX_hist_phase_consistency_check+0x222>





				if (status == VL53LX_ERROR_NONE)
 80084b4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d125      	bne.n	8008508 <VL53LX_hist_phase_consistency_check+0x1d8>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 80084bc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53LX_hist_events_consistency_check(
 80084c0:	4613      	mov	r3, r2
 80084c2:	005b      	lsls	r3, r3, #1
 80084c4:	4413      	add	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	3308      	adds	r3, #8
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 80084ce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_events_consistency_check(
 80084d2:	224c      	movs	r2, #76	; 0x4c
 80084d4:	fb02 f303 	mul.w	r3, r2, r3
 80084d8:	3310      	adds	r3, #16
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	4413      	add	r3, r2
 80084de:	3304      	adds	r3, #4
 80084e0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80084e2:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 80084e6:	f107 0217 	add.w	r2, r7, #23
 80084ea:	9203      	str	r2, [sp, #12]
 80084ec:	f107 021c 	add.w	r2, r7, #28
 80084f0:	9202      	str	r2, [sp, #8]
 80084f2:	f107 0218 	add.w	r2, r7, #24
 80084f6:	9201      	str	r2, [sp, #4]
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	4623      	mov	r3, r4
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	f000 f848 	bl	8008592 <VL53LX_hist_events_consistency_check>
 8008502:	4603      	mov	r3, r0
 8008504:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 8008508:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800850c:	2b00      	cmp	r3, #0
 800850e:	d115      	bne.n	800853c <VL53LX_hist_phase_consistency_check+0x20c>
					range_status ==
 8008510:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 8008512:	2b09      	cmp	r3, #9
 8008514:	d112      	bne.n	800853c <VL53LX_hist_phase_consistency_check+0x20c>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 8008516:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 800851a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_merged_pulse_check(
 800851e:	224c      	movs	r2, #76	; 0x4c
 8008520:	fb02 f303 	mul.w	r3, r2, r3
 8008524:	3310      	adds	r3, #16
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	4413      	add	r3, r2
 800852a:	3304      	adds	r3, #4
 800852c:	f107 0217 	add.w	r2, r7, #23
 8008530:	4619      	mov	r1, r3
 8008532:	f000 faaf 	bl	8008a94 <VL53LX_hist_merged_pulse_check>
 8008536:	4603      	mov	r3, r0
 8008538:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 800853c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008540:	7df8      	ldrb	r0, [r7, #23]
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	214c      	movs	r1, #76	; 0x4c
 8008546:	fb01 f303 	mul.w	r3, r1, r3
 800854a:	4413      	add	r3, r2
 800854c:	335e      	adds	r3, #94	; 0x5e
 800854e:	4602      	mov	r2, r0
 8008550:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 8008552:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008556:	3301      	adds	r3, #1
 8008558:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	795b      	ldrb	r3, [r3, #5]
 8008560:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008564:	429a      	cmp	r2, r3
 8008566:	f4ff af61 	bcc.w	800842c <VL53LX_hist_phase_consistency_check+0xfc>
 800856a:	e000      	b.n	800856e <VL53LX_hist_phase_consistency_check+0x23e>
			continue;
 800856c:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800856e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008572:	3301      	adds	r3, #1
 8008574:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	7c9b      	ldrb	r3, [r3, #18]
 800857c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8008580:	429a      	cmp	r2, r3
 8008582:	f4ff af1f 	bcc.w	80083c4 <VL53LX_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 8008586:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800858a:	4618      	mov	r0, r3
 800858c:	373c      	adds	r7, #60	; 0x3c
 800858e:	46bd      	mov	sp, r7
 8008590:	bd90      	pop	{r4, r7, pc}

08008592 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 8008592:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008596:	b0a8      	sub	sp, #160	; 0xa0
 8008598:	af00      	add	r7, sp, #0
 800859a:	64ba      	str	r2, [r7, #72]	; 0x48
 800859c:	647b      	str	r3, [r7, #68]	; 0x44
 800859e:	4603      	mov	r3, r0
 80085a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80085a4:	460b      	mov	r3, r1
 80085a6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80085aa:	2300      	movs	r3, #0
 80085ac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	int64_t   tmpp                   = 0;
 80085b0:	f04f 0200 	mov.w	r2, #0
 80085b4:	f04f 0300 	mov.w	r3, #0
 80085b8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	int64_t   tmpc                   = 0;
 80085bc:	f04f 0200 	mov.w	r2, #0
 80085c0:	f04f 0300 	mov.w	r3, #0
 80085c4:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	int64_t   events_scaler          = 0;
 80085c8:	f04f 0200 	mov.w	r2, #0
 80085cc:	f04f 0300 	mov.w	r3, #0
 80085d0:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	int64_t   events_scaler_sq       = 0;
 80085d4:	f04f 0200 	mov.w	r2, #0
 80085d8:	f04f 0300 	mov.w	r3, #0
 80085dc:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t   c_signal_events        = 0;
 80085e0:	f04f 0200 	mov.w	r2, #0
 80085e4:	f04f 0300 	mov.w	r3, #0
 80085e8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	int64_t   c_sig_noise_sq         = 0;
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	f04f 0300 	mov.w	r3, #0
 80085f4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t   c_amb_noise_sq         = 0;
 80085f8:	f04f 0200 	mov.w	r2, #0
 80085fc:	f04f 0300 	mov.w	r3, #0
 8008600:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t   p_amb_noise_sq         = 0;
 8008604:	f04f 0200 	mov.w	r2, #0
 8008608:	f04f 0300 	mov.w	r3, #0
 800860c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	int32_t   p_signal_events        = 0;
 8008610:	2300      	movs	r3, #0
 8008612:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t  noise_sq_sum           = 0;
 8008614:	2300      	movs	r3, #0
 8008616:	653b      	str	r3, [r7, #80]	; 0x50



	if (event_sigma == 0) {
 8008618:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800861c:	2b00      	cmp	r3, #0
 800861e:	d106      	bne.n	800862e <VL53LX_hist_events_consistency_check+0x9c>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8008620:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008624:	2209      	movs	r2, #9
 8008626:	701a      	strb	r2, [r3, #0]
		return status;
 8008628:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 800862c:	e22d      	b.n	8008a8a <VL53LX_hist_events_consistency_check+0x4f8>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800862e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	461a      	mov	r2, r3
 8008634:	f04f 0300 	mov.w	r3, #0
 8008638:	f112 0801 	adds.w	r8, r2, #1
 800863c:	f143 0900 	adc.w	r9, r3, #0
 8008640:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 8008644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008646:	885b      	ldrh	r3, [r3, #2]
 8008648:	b29a      	uxth	r2, r3
 800864a:	f04f 0300 	mov.w	r3, #0
 800864e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008652:	fb02 f001 	mul.w	r0, r2, r1
 8008656:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800865a:	fb03 f101 	mul.w	r1, r3, r1
 800865e:	4408      	add	r0, r1
 8008660:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8008664:	fba1 2302 	umull	r2, r3, r1, r2
 8008668:	18c1      	adds	r1, r0, r3
 800866a:	460b      	mov	r3, r1
 800866c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8008670:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 8008674:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	461a      	mov	r2, r3
 800867c:	f04f 0300 	mov.w	r3, #0
 8008680:	f112 0a01 	adds.w	sl, r2, #1
 8008684:	f143 0b00 	adc.w	fp, r3, #0
 8008688:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 800868c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008690:	8adb      	ldrh	r3, [r3, #22]
 8008692:	b29a      	uxth	r2, r3
 8008694:	f04f 0300 	mov.w	r3, #0
 8008698:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800869c:	fb02 f001 	mul.w	r0, r2, r1
 80086a0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80086a4:	fb03 f101 	mul.w	r1, r3, r1
 80086a8:	4408      	add	r0, r1
 80086aa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80086ae:	fba1 2302 	umull	r2, r3, r1, r2
 80086b2:	18c1      	adds	r1, r0, r3
 80086b4:	460b      	mov	r3, r1
 80086b6:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 80086ba:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80



	events_scaler  = tmpp * 4096;
 80086be:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80086c2:	f04f 0000 	mov.w	r0, #0
 80086c6:	f04f 0100 	mov.w	r1, #0
 80086ca:	0319      	lsls	r1, r3, #12
 80086cc:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 80086d0:	0310      	lsls	r0, r2, #12
 80086d2:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
	if (tmpc != 0) {
 80086d6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80086da:	4313      	orrs	r3, r2
 80086dc:	d026      	beq.n	800872c <VL53LX_hist_events_consistency_check+0x19a>
		events_scaler += (tmpc/2);
 80086de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80086e2:	0fcb      	lsrs	r3, r1, #31
 80086e4:	461a      	mov	r2, r3
 80086e6:	f04f 0300 	mov.w	r3, #0
 80086ea:	1814      	adds	r4, r2, r0
 80086ec:	eb43 0501 	adc.w	r5, r3, r1
 80086f0:	f04f 0200 	mov.w	r2, #0
 80086f4:	f04f 0300 	mov.w	r3, #0
 80086f8:	0862      	lsrs	r2, r4, #1
 80086fa:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 80086fe:	106b      	asrs	r3, r5, #1
 8008700:	4610      	mov	r0, r2
 8008702:	4619      	mov	r1, r3
 8008704:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8008708:	1814      	adds	r4, r2, r0
 800870a:	63bc      	str	r4, [r7, #56]	; 0x38
 800870c:	414b      	adcs	r3, r1
 800870e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008710:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8008714:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		events_scaler  = do_division_s(events_scaler, tmpc);
 8008718:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800871c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008720:	f7f7 fda6 	bl	8000270 <__aeabi_ldivmod>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	}

	events_scaler_sq  = events_scaler * events_scaler;
 800872c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008734:	fb03 f102 	mul.w	r1, r3, r2
 8008738:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800873c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008740:	fb03 f302 	mul.w	r3, r3, r2
 8008744:	4419      	add	r1, r3
 8008746:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800874a:	fba3 2303 	umull	r2, r3, r3, r3
 800874e:	4419      	add	r1, r3
 8008750:	460b      	mov	r3, r1
 8008752:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8008756:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	events_scaler_sq += 2048;
 800875a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800875e:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8008762:	6339      	str	r1, [r7, #48]	; 0x30
 8008764:	f143 0300 	adc.w	r3, r3, #0
 8008768:	637b      	str	r3, [r7, #52]	; 0x34
 800876a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800876e:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	events_scaler_sq /= 4096;
 8008772:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008776:	4610      	mov	r0, r2
 8008778:	4619      	mov	r1, r3
 800877a:	2800      	cmp	r0, #0
 800877c:	f171 0300 	sbcs.w	r3, r1, #0
 8008780:	da06      	bge.n	8008790 <VL53LX_hist_events_consistency_check+0x1fe>
 8008782:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008786:	f04f 0300 	mov.w	r3, #0
 800878a:	1880      	adds	r0, r0, r2
 800878c:	eb43 0101 	adc.w	r1, r3, r1
 8008790:	f04f 0200 	mov.w	r2, #0
 8008794:	f04f 0300 	mov.w	r3, #0
 8008798:	0b02      	lsrs	r2, r0, #12
 800879a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800879e:	130b      	asrs	r3, r1, #12
 80087a0:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 80087a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087aa:	461a      	mov	r2, r3
 80087ac:	f04f 0300 	mov.w	r3, #0
 80087b0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 80087b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	4618      	mov	r0, r3
 80087bc:	f04f 0100 	mov.w	r1, #0
 80087c0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80087c4:	1a14      	subs	r4, r2, r0
 80087c6:	62bc      	str	r4, [r7, #40]	; 0x28
 80087c8:	eb63 0301 	sbc.w	r3, r3, r1
 80087cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087ce:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80087d2:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events *= (int64_t)events_scaler;
 80087d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087d8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80087dc:	fb02 f203 	mul.w	r2, r2, r3
 80087e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087e4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80087e6:	fb01 f303 	mul.w	r3, r1, r3
 80087ea:	18d1      	adds	r1, r2, r3
 80087ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80087ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087f2:	fba2 2303 	umull	r2, r3, r2, r3
 80087f6:	4419      	add	r1, r3
 80087f8:	460b      	mov	r3, r1
 80087fa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80087fe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events += 2048;
 8008802:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008806:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800880a:	6239      	str	r1, [r7, #32]
 800880c:	f143 0300 	adc.w	r3, r3, #0
 8008810:	627b      	str	r3, [r7, #36]	; 0x24
 8008812:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008816:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events /= 4096;
 800881a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800881e:	2a00      	cmp	r2, #0
 8008820:	f173 0100 	sbcs.w	r1, r3, #0
 8008824:	da06      	bge.n	8008834 <VL53LX_hist_events_consistency_check+0x2a2>
 8008826:	f640 70ff 	movw	r0, #4095	; 0xfff
 800882a:	f04f 0100 	mov.w	r1, #0
 800882e:	1812      	adds	r2, r2, r0
 8008830:	eb41 0303 	adc.w	r3, r1, r3
 8008834:	f04f 0000 	mov.w	r0, #0
 8008838:	f04f 0100 	mov.w	r1, #0
 800883c:	0b10      	lsrs	r0, r2, #12
 800883e:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8008842:	1319      	asrs	r1, r3, #12
 8008844:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 8008848:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800884c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 8008850:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008856:	461a      	mov	r2, r3
 8008858:	f04f 0300 	mov.w	r3, #0
 800885c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800885e:	fb02 f001 	mul.w	r0, r2, r1
 8008862:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008864:	fb03 f101 	mul.w	r1, r3, r1
 8008868:	4401      	add	r1, r0
 800886a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800886c:	fba0 2302 	umull	r2, r3, r0, r2
 8008870:	4419      	add	r1, r3
 8008872:	460b      	mov	r3, r1
 8008874:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8008878:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq += 2048;
 800887c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008880:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8008884:	61b9      	str	r1, [r7, #24]
 8008886:	f143 0300 	adc.w	r3, r3, #0
 800888a:	61fb      	str	r3, [r7, #28]
 800888c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008890:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	c_sig_noise_sq /= 4096;
 8008894:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008898:	2a00      	cmp	r2, #0
 800889a:	f173 0100 	sbcs.w	r1, r3, #0
 800889e:	da06      	bge.n	80088ae <VL53LX_hist_events_consistency_check+0x31c>
 80088a0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80088a4:	f04f 0100 	mov.w	r1, #0
 80088a8:	1812      	adds	r2, r2, r0
 80088aa:	eb41 0303 	adc.w	r3, r1, r3
 80088ae:	f04f 0000 	mov.w	r0, #0
 80088b2:	f04f 0100 	mov.w	r1, #0
 80088b6:	0b10      	lsrs	r0, r2, #12
 80088b8:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80088bc:	1319      	asrs	r1, r3, #12
 80088be:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 80088c2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80088c6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 80088ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	461a      	mov	r2, r3
 80088d2:	f04f 0300 	mov.w	r3, #0
 80088d6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80088d8:	fb02 f001 	mul.w	r0, r2, r1
 80088dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80088de:	fb03 f101 	mul.w	r1, r3, r1
 80088e2:	4401      	add	r1, r0
 80088e4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80088e6:	fba0 2302 	umull	r2, r3, r0, r2
 80088ea:	4419      	add	r1, r3
 80088ec:	460b      	mov	r3, r1
 80088ee:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80088f2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq += 2048;
 80088f6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80088fa:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 80088fe:	6139      	str	r1, [r7, #16]
 8008900:	f143 0300 	adc.w	r3, r3, #0
 8008904:	617b      	str	r3, [r7, #20]
 8008906:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800890a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4096;
 800890e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008912:	2a00      	cmp	r2, #0
 8008914:	f173 0100 	sbcs.w	r1, r3, #0
 8008918:	da06      	bge.n	8008928 <VL53LX_hist_events_consistency_check+0x396>
 800891a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800891e:	f04f 0100 	mov.w	r1, #0
 8008922:	1812      	adds	r2, r2, r0
 8008924:	eb41 0303 	adc.w	r3, r1, r3
 8008928:	f04f 0000 	mov.w	r0, #0
 800892c:	f04f 0100 	mov.w	r1, #0
 8008930:	0b10      	lsrs	r0, r2, #12
 8008932:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8008936:	1319      	asrs	r1, r3, #12
 8008938:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60


	c_amb_noise_sq += 2;
 800893c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008940:	1c91      	adds	r1, r2, #2
 8008942:	60b9      	str	r1, [r7, #8]
 8008944:	f143 0300 	adc.w	r3, r3, #0
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800894e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4;
 8008952:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008956:	2a00      	cmp	r2, #0
 8008958:	f173 0100 	sbcs.w	r1, r3, #0
 800895c:	da02      	bge.n	8008964 <VL53LX_hist_events_consistency_check+0x3d2>
 800895e:	3203      	adds	r2, #3
 8008960:	f143 0300 	adc.w	r3, r3, #0
 8008964:	f04f 0000 	mov.w	r0, #0
 8008968:	f04f 0100 	mov.w	r1, #0
 800896c:	0890      	lsrs	r0, r2, #2
 800896e:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8008972:	1099      	asrs	r1, r3, #2
 8008974:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 8008978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800897a:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800897c:	461a      	mov	r2, r3
 800897e:	f04f 0300 	mov.w	r3, #0
 8008982:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	p_amb_noise_sq += 2;
 8008986:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800898a:	1c91      	adds	r1, r2, #2
 800898c:	6039      	str	r1, [r7, #0]
 800898e:	f143 0300 	adc.w	r3, r3, #0
 8008992:	607b      	str	r3, [r7, #4]
 8008994:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008998:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	p_amb_noise_sq /= 4;
 800899c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80089a0:	2a00      	cmp	r2, #0
 80089a2:	f173 0100 	sbcs.w	r1, r3, #0
 80089a6:	da02      	bge.n	80089ae <VL53LX_hist_events_consistency_check+0x41c>
 80089a8:	3203      	adds	r2, #3
 80089aa:	f143 0300 	adc.w	r3, r3, #0
 80089ae:	f04f 0000 	mov.w	r0, #0
 80089b2:	f04f 0100 	mov.w	r1, #0
 80089b6:	0890      	lsrs	r0, r2, #2
 80089b8:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80089bc:	1099      	asrs	r1, r3, #2
 80089be:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 80089c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089c4:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 80089c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
		(uint32_t)prange_prev->VL53LX_p_017 +
 80089c8:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 80089ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		(uint32_t)c_sig_noise_sq +
 80089cc:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 80089ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	noise_sq_sum =
 80089d0:	4413      	add	r3, r2
 80089d2:	653b      	str	r3, [r7, #80]	; 0x50

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 80089d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089d6:	011b      	lsls	r3, r3, #4
 80089d8:	4618      	mov	r0, r3
 80089da:	f001 ffd7 	bl	800a98c <VL53LX_isqrt>
 80089de:	4603      	mov	r3, r0
 80089e0:	461a      	mov	r2, r3
	*pevents_tolerance =
 80089e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80089e6:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 80089e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80089f2:	fb02 f203 	mul.w	r2, r2, r3
 80089f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80089fa:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 80089fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f103 0220 	add.w	r2, r3, #32
 8008a06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a0a:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 8008a0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	da00      	bge.n	8008a18 <VL53LX_hist_events_consistency_check+0x486>
 8008a16:	333f      	adds	r3, #63	; 0x3f
 8008a18:	119b      	asrs	r3, r3, #6
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a20:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 8008a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	657b      	str	r3, [r7, #84]	; 0x54
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 8008a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a30:	1a9b      	subs	r3, r3, r2
 8008a32:	657b      	str	r3, [r7, #84]	; 0x54

	if ((int32_t)c_signal_events > p_signal_events)
 8008a34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	da06      	bge.n	8008a4a <VL53LX_hist_events_consistency_check+0x4b8>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 8008a3c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a40:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 8008a42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a46:	601a      	str	r2, [r3, #0]
 8008a48:	e005      	b.n	8008a56 <VL53LX_hist_events_consistency_check+0x4c4>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 8008a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a4e:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 8008a50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a54:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 8008a56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	dd0b      	ble.n	8008a7e <VL53LX_hist_events_consistency_check+0x4ec>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 8008a66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008a6a:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 8008a6c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d204      	bcs.n	8008a7e <VL53LX_hist_events_consistency_check+0x4ec>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 8008a74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a78:	2214      	movs	r2, #20
 8008a7a:	701a      	strb	r2, [r3, #0]
 8008a7c:	e003      	b.n	8008a86 <VL53LX_hist_events_consistency_check+0x4f4>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8008a7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a82:	2209      	movs	r2, #9
 8008a84:	701a      	strb	r2, [r3, #0]





	return status;
 8008a86:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	37a0      	adds	r7, #160	; 0xa0
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008a94 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b087      	sub	sp, #28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
 8008aa0:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	dd0b      	ble.n	8008ad2 <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	b29b      	uxth	r3, r3
		delta_mm =
 8008ace:	82fb      	strh	r3, [r7, #22]
 8008ad0:	e00a      	b.n	8008ae8 <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	b29b      	uxth	r3, r3
		delta_mm =
 8008ae6:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 8008ae8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	dd09      	ble.n	8008b04 <VL53LX_hist_merged_pulse_check+0x70>
 8008af0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008af4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	dd03      	ble.n	8008b04 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2216      	movs	r2, #22
 8008b00:	701a      	strb	r2, [r3, #0]
 8008b02:	e002      	b.n	8008b0a <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2209      	movs	r2, #9
 8008b08:	701a      	strb	r2, [r3, #0]

	return status;
 8008b0a:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	371c      	adds	r7, #28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b08e      	sub	sp, #56	; 0x38
 8008b1e:	af04      	add	r7, sp, #16
 8008b20:	60f8      	str	r0, [r7, #12]
 8008b22:	60b9      	str	r1, [r7, #8]
 8008b24:	607a      	str	r2, [r7, #4]
 8008b26:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev =
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3318      	adds	r3, #24
 8008b32:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 8008b34:	2300      	movs	r3, #0
 8008b36:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 8008b42:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 8008b4a:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8008b52:	2b09      	cmp	r3, #9
 8008b54:	d009      	beq.n	8008b6a <VL53LX_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8008b5c:	2b13      	cmp	r3, #19
 8008b5e:	d004      	beq.n	8008b6a <VL53LX_hist_xmonitor_consistency_check+0x50>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 8008b66:	2b14      	cmp	r3, #20
 8008b68:	d129      	bne.n	8008bbe <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b70:	2b09      	cmp	r3, #9
 8008b72:	d009      	beq.n	8008b88 <VL53LX_hist_xmonitor_consistency_check+0x6e>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8008b7a:	2b13      	cmp	r3, #19
 8008b7c:	d004      	beq.n	8008b88 <VL53LX_hist_xmonitor_consistency_check+0x6e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 8008b84:	2b14      	cmp	r3, #20
 8008b86:	d11a      	bne.n	8008bbe <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2209      	movs	r2, #9
 8008b8c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	334a      	adds	r3, #74	; 0x4a
				VL53LX_hist_events_consistency_check(
 8008b9a:	8bb9      	ldrh	r1, [r7, #28]
 8008b9c:	7ff8      	ldrb	r0, [r7, #31]
 8008b9e:	9303      	str	r3, [sp, #12]
 8008ba0:	f107 0318 	add.w	r3, r7, #24
 8008ba4:	9302      	str	r3, [sp, #8]
 8008ba6:	f107 0314 	add.w	r3, r7, #20
 8008baa:	9301      	str	r3, [sp, #4]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	f7ff fced 	bl	8008592 <VL53LX_hist_events_consistency_check>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 8008bbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3728      	adds	r7, #40	; 0x28
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b088      	sub	sp, #32
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	60f8      	str	r0, [r7, #12]
 8008bd2:	60b9      	str	r1, [r7, #8]
 8008bd4:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 8008bde:	2300      	movs	r3, #0
 8008be0:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d019      	beq.n	8008c2a <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f002 f82c 	bl	800ac5a <VL53LX_calc_pll_period_mm>
 8008c02:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 8008c0a:	021b      	lsls	r3, r3, #8
 8008c0c:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	fb02 f303 	mul.w	r3, r2, r3
 8008c16:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008c1e:	0bdb      	lsrs	r3, r3, #15
 8008c20:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	b21a      	sxth	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008c2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3720      	adds	r7, #32
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 8008c36:	b590      	push	{r4, r7, lr}
 8008c38:	b08d      	sub	sp, #52	; 0x34
 8008c3a:	af04      	add	r7, sp, #16
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	4608      	mov	r0, r1
 8008c40:	4611      	mov	r1, r2
 8008c42:	461a      	mov	r2, r3
 8008c44:	4623      	mov	r3, r4
 8008c46:	80fb      	strh	r3, [r7, #6]
 8008c48:	4603      	mov	r3, r0
 8008c4a:	80bb      	strh	r3, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
 8008c50:	4613      	mov	r3, r2
 8008c52:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 8008c70:	2300      	movs	r3, #0
 8008c72:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 8008c74:	78b9      	ldrb	r1, [r7, #2]
 8008c76:	78f8      	ldrb	r0, [r7, #3]
 8008c78:	f107 030c 	add.w	r3, r7, #12
 8008c7c:	9303      	str	r3, [sp, #12]
 8008c7e:	f107 030e 	add.w	r3, r7, #14
 8008c82:	9302      	str	r3, [sp, #8]
 8008c84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	23ff      	movs	r3, #255	; 0xff
 8008c90:	22c7      	movs	r2, #199	; 0xc7
 8008c92:	f000 fa03 	bl	800909c <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 8008c96:	89fb      	ldrh	r3, [r7, #14]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d050      	beq.n	8008d3e <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 8008c9c:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d04d      	beq.n	8008d3e <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 8008ca2:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 8008ca6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8008caa:	78b9      	ldrb	r1, [r7, #2]
 8008cac:	78f8      	ldrb	r0, [r7, #3]
 8008cae:	f107 0308 	add.w	r3, r7, #8
 8008cb2:	9303      	str	r3, [sp, #12]
 8008cb4:	f107 030a 	add.w	r3, r7, #10
 8008cb8:	9302      	str	r3, [sp, #8]
 8008cba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	4623      	mov	r3, r4
 8008cc6:	f000 f9e9 	bl	800909c <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 8008cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ccc:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 8008cce:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 8008cd0:	897b      	ldrh	r3, [r7, #10]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	fb02 f303 	mul.w	r3, r2, r3
 8008cda:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 8008cdc:	89fb      	ldrh	r3, [r7, #14]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ce6:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cea:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 8008cec:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 8008cee:	893b      	ldrh	r3, [r7, #8]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	fb02 f303 	mul.w	r3, r2, r3
 8008cf8:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 8008cfa:	89bb      	ldrh	r3, [r7, #12]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d04:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 8008d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	fb02 f303 	mul.w	r3, r2, r3
 8008d10:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 8008d12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	fb02 f303 	mul.w	r3, r2, r3
 8008d1c:	69fa      	ldr	r2, [r7, #28]
 8008d1e:	4413      	add	r3, r2
 8008d20:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8008d22:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 8008d24:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8008d26:	4413      	add	r3, r2
 8008d28:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d008      	beq.n	8008d42 <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	009a      	lsls	r2, r3, #2
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	fb92 f3f3 	sdiv	r3, r2, r3
 8008d3a:	61fb      	str	r3, [r7, #28]
 8008d3c:	e002      	b.n	8008d44 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 8008d3e:	bf00      	nop
 8008d40:	e000      	b.n	8008d44 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 8008d42:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	b21a      	sxth	r2, r3
 8008d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d4a:	801a      	strh	r2, [r3, #0]

}
 8008d4c:	bf00      	nop
 8008d4e:	3724      	adds	r7, #36	; 0x24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd90      	pop	{r4, r7, pc}

08008d54 <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60b9      	str	r1, [r7, #8]
 8008d5c:	607a      	str	r2, [r7, #4]
 8008d5e:	603b      	str	r3, [r7, #0]
 8008d60:	4603      	mov	r3, r0
 8008d62:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
 8008d66:	08db      	lsrs	r3, r3, #3
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
 8008d70:	f003 0307 	and.w	r3, r3, #7
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	2301      	movs	r3, #1
 8008d82:	4093      	lsls	r3, r2
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	701a      	strb	r2, [r3, #0]

}
 8008d8a:	bf00      	nop
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b083      	sub	sp, #12
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	603a      	str	r2, [r7, #0]
 8008da0:	71fb      	strb	r3, [r7, #7]
 8008da2:	460b      	mov	r3, r1
 8008da4:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	2b07      	cmp	r3, #7
 8008daa:	d90a      	bls.n	8008dc2 <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8008dac:	79bb      	ldrb	r3, [r7, #6]
 8008dae:	00db      	lsls	r3, r3, #3
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	79fb      	ldrb	r3, [r7, #7]
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	3b71      	subs	r3, #113	; 0x71
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 8008dc0:	e00a      	b.n	8008dd8 <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8008dc2:	79bb      	ldrb	r3, [r7, #6]
 8008dc4:	f1c3 030f 	rsb	r3, r3, #15
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	00db      	lsls	r3, r3, #3
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	79fb      	ldrb	r3, [r7, #7]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	701a      	strb	r2, [r3, #0]
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	4603      	mov	r3, r0
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	091b      	lsrs	r3, r3, #4
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
 8008dfe:	f003 030f 	and.w	r3, r3, #15
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	701a      	strb	r2, [r3, #0]

}
 8008e08:	bf00      	nop
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	603a      	str	r2, [r7, #0]
 8008e1e:	71fb      	strb	r3, [r7, #7]
 8008e20:	460b      	mov	r3, r1
 8008e22:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 8008e24:	79bb      	ldrb	r3, [r7, #6]
 8008e26:	011b      	lsls	r3, r3, #4
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	79fb      	ldrb	r3, [r7, #7]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	701a      	strb	r2, [r3, #0]

}
 8008e34:	bf00      	nop
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60ba      	str	r2, [r7, #8]
 8008e48:	607b      	str	r3, [r7, #4]
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	73fb      	strb	r3, [r7, #15]
 8008e4e:	460b      	mov	r3, r1
 8008e50:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 8008e52:	2300      	movs	r3, #0
 8008e54:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 8008e62:	f107 0217 	add.w	r2, r7, #23
 8008e66:	f107 0116 	add.w	r1, r7, #22
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f002 f961 	bl	800b134 <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 8008e72:	f107 0214 	add.w	r2, r7, #20
 8008e76:	f107 0115 	add.w	r1, r7, #21
 8008e7a:	7bbb      	ldrb	r3, [r7, #14]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7ff ffb1 	bl	8008de4 <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 8008e82:	7dfb      	ldrb	r3, [r7, #23]
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	7d7b      	ldrb	r3, [r7, #21]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	0fd9      	lsrs	r1, r3, #31
 8008e8c:	440b      	add	r3, r1
 8008e8e:	105b      	asrs	r3, r3, #1
 8008e90:	425b      	negs	r3, r3
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	4413      	add	r3, r2
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	b21a      	sxth	r2, r3
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	da02      	bge.n	8008eae <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	7d7b      	ldrb	r3, [r7, #21]
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	4413      	add	r3, r2
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	b21a      	sxth	r2, r3
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008eca:	2b0f      	cmp	r3, #15
 8008ecc:	dd02      	ble.n	8008ed4 <VL53LX_decode_zone_limits+0x94>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	220f      	movs	r2, #15
 8008ed2:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 8008ed4:	7dbb      	ldrb	r3, [r7, #22]
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	7d3b      	ldrb	r3, [r7, #20]
 8008eda:	3301      	adds	r3, #1
 8008edc:	0fd9      	lsrs	r1, r3, #31
 8008ede:	440b      	add	r3, r1
 8008ee0:	105b      	asrs	r3, r3, #1
 8008ee2:	425b      	negs	r3, r3
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	4413      	add	r3, r2
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	b21a      	sxth	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	da02      	bge.n	8008f00 <VL53LX_decode_zone_limits+0xc0>
		*py_ll = 0;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	7d3b      	ldrb	r3, [r7, #20]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	4413      	add	r3, r2
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	b21a      	sxth	r2, r3
 8008f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f14:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f1c:	2b0f      	cmp	r3, #15
 8008f1e:	dd02      	ble.n	8008f26 <VL53LX_decode_zone_limits+0xe6>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	220f      	movs	r2, #15
 8008f24:	801a      	strh	r2, [r3, #0]
}
 8008f26:	bf00      	nop
 8008f28:	3718      	adds	r7, #24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b085      	sub	sp, #20
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	4603      	mov	r3, r0
 8008f36:	460a      	mov	r2, r1
 8008f38:	71fb      	strb	r3, [r7, #7]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 8008f42:	79fb      	ldrb	r3, [r7, #7]
 8008f44:	f003 0303 	and.w	r3, r3, #3
 8008f48:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 8008f4a:	79bb      	ldrb	r3, [r7, #6]
 8008f4c:	f003 0303 	and.w	r3, r3, #3
 8008f50:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 8008f52:	7bbb      	ldrb	r3, [r7, #14]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d104      	bne.n	8008f62 <VL53LX_is_aperture_location+0x34>
 8008f58:	7b7b      	ldrb	r3, [r7, #13]
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d101      	bne.n	8008f62 <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 8008f62:	7bbb      	ldrb	r3, [r7, #14]
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d104      	bne.n	8008f72 <VL53LX_is_aperture_location+0x44>
 8008f68:	7b7b      	ldrb	r3, [r7, #13]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d101      	bne.n	8008f72 <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 8008f80:	b590      	push	{r4, r7, lr}
 8008f82:	b08b      	sub	sp, #44	; 0x2c
 8008f84:	af02      	add	r7, sp, #8
 8008f86:	603a      	str	r2, [r7, #0]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	71fb      	strb	r3, [r7, #7]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	71bb      	strb	r3, [r7, #6]
 8008f92:	4613      	mov	r3, r2
 8008f94:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 8008f96:	2300      	movs	r3, #0
 8008f98:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 8008fc2:	f107 0416 	add.w	r4, r7, #22
 8008fc6:	f107 0218 	add.w	r2, r7, #24
 8008fca:	79b9      	ldrb	r1, [r7, #6]
 8008fcc:	79f8      	ldrb	r0, [r7, #7]
 8008fce:	f107 0312 	add.w	r3, r7, #18
 8008fd2:	9301      	str	r3, [sp, #4]
 8008fd4:	f107 0314 	add.w	r3, r7, #20
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	4623      	mov	r3, r4
 8008fdc:	f7ff ff30 	bl	8008e40 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 8008fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8008fe6:	8afb      	ldrh	r3, [r7, #22]
 8008fe8:	83bb      	strh	r3, [r7, #28]
 8008fea:	e04c      	b.n	8009086 <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8008fec:	8b3b      	ldrh	r3, [r7, #24]
 8008fee:	83fb      	strh	r3, [r7, #30]
 8008ff0:	e03d      	b.n	800906e <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 8008ff2:	8bbb      	ldrh	r3, [r7, #28]
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	8bfa      	ldrh	r2, [r7, #30]
 8008ff8:	b2d1      	uxtb	r1, r2
 8008ffa:	f107 0211 	add.w	r2, r7, #17
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7ff fec9 	bl	8008d96 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009004:	7c78      	ldrb	r0, [r7, #17]
 8009006:	f107 030e 	add.w	r3, r7, #14
 800900a:	f107 020f 	add.w	r2, r7, #15
 800900e:	f107 0110 	add.w	r1, r7, #16
 8009012:	f7ff fe9f 	bl	8008d54 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009016:	7c3b      	ldrb	r3, [r7, #16]
 8009018:	461a      	mov	r2, r3
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	4413      	add	r3, r2
 800901e:	781a      	ldrb	r2, [r3, #0]
 8009020:	7bbb      	ldrb	r3, [r7, #14]
 8009022:	4013      	ands	r3, r2
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d01b      	beq.n	8009062 <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 800902a:	8bbb      	ldrh	r3, [r7, #28]
 800902c:	b2db      	uxtb	r3, r3
 800902e:	8bfa      	ldrh	r2, [r7, #30]
 8009030:	b2d2      	uxtb	r2, r2
 8009032:	4611      	mov	r1, r2
 8009034:	4618      	mov	r0, r3
 8009036:	f7ff ff7a 	bl	8008f2e <VL53LX_is_aperture_location>
 800903a:	4603      	mov	r3, r0
 800903c:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800903e:	7efb      	ldrb	r3, [r7, #27]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d007      	beq.n	8009054 <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 8009044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009046:	881a      	ldrh	r2, [r3, #0]
 8009048:	88bb      	ldrh	r3, [r7, #4]
 800904a:	4413      	add	r3, r2
 800904c:	b29a      	uxth	r2, r3
 800904e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009050:	801a      	strh	r2, [r3, #0]
 8009052:	e006      	b.n	8009062 <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 8009054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009056:	881b      	ldrh	r3, [r3, #0]
 8009058:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800905c:	b29a      	uxth	r2, r3
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009062:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009066:	b29b      	uxth	r3, r3
 8009068:	3301      	adds	r3, #1
 800906a:	b29b      	uxth	r3, r3
 800906c:	83fb      	strh	r3, [r7, #30]
 800906e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009072:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009076:	429a      	cmp	r2, r3
 8009078:	ddbb      	ble.n	8008ff2 <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800907a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800907e:	b29b      	uxth	r3, r3
 8009080:	3301      	adds	r3, #1
 8009082:	b29b      	uxth	r3, r3
 8009084:	83bb      	strh	r3, [r7, #28]
 8009086:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800908a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800908e:	429a      	cmp	r2, r3
 8009090:	ddac      	ble.n	8008fec <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 8009092:	bf00      	nop
 8009094:	bf00      	nop
 8009096:	3724      	adds	r7, #36	; 0x24
 8009098:	46bd      	mov	sp, r7
 800909a:	bd90      	pop	{r4, r7, pc}

0800909c <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800909c:	b590      	push	{r4, r7, lr}
 800909e:	b08d      	sub	sp, #52	; 0x34
 80090a0:	af02      	add	r7, sp, #8
 80090a2:	4604      	mov	r4, r0
 80090a4:	4608      	mov	r0, r1
 80090a6:	4611      	mov	r1, r2
 80090a8:	461a      	mov	r2, r3
 80090aa:	4623      	mov	r3, r4
 80090ac:	71fb      	strb	r3, [r7, #7]
 80090ae:	4603      	mov	r3, r0
 80090b0:	71bb      	strb	r3, [r7, #6]
 80090b2:	460b      	mov	r3, r1
 80090b4:	717b      	strb	r3, [r7, #5]
 80090b6:	4613      	mov	r3, r2
 80090b8:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 80090be:	2300      	movs	r3, #0
 80090c0:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 80090c2:	2300      	movs	r3, #0
 80090c4:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 80090c6:	2300      	movs	r3, #0
 80090c8:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 80090ca:	2300      	movs	r3, #0
 80090cc:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 80090d2:	2300      	movs	r3, #0
 80090d4:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 80090da:	2300      	movs	r3, #0
 80090dc:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 80090de:	2300      	movs	r3, #0
 80090e0:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 80090ea:	2300      	movs	r3, #0
 80090ec:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53LX_decode_zone_limits(
 80090fc:	f107 041c 	add.w	r4, r7, #28
 8009100:	f107 021e 	add.w	r2, r7, #30
 8009104:	79b9      	ldrb	r1, [r7, #6]
 8009106:	79f8      	ldrb	r0, [r7, #7]
 8009108:	f107 0318 	add.w	r3, r7, #24
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	f107 031a 	add.w	r3, r7, #26
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	4623      	mov	r3, r4
 8009116:	f7ff fe93 	bl	8008e40 <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 800911a:	f107 0414 	add.w	r4, r7, #20
 800911e:	f107 0216 	add.w	r2, r7, #22
 8009122:	7939      	ldrb	r1, [r7, #4]
 8009124:	7978      	ldrb	r0, [r7, #5]
 8009126:	f107 0310 	add.w	r3, r7, #16
 800912a:	9301      	str	r3, [sp, #4]
 800912c:	f107 0312 	add.w	r3, r7, #18
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	4623      	mov	r3, r4
 8009134:	f7ff fe84 	bl	8008e40 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 8009138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800913a:	2200      	movs	r2, #0
 800913c:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800913e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009140:	2200      	movs	r2, #0
 8009142:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009144:	8abb      	ldrh	r3, [r7, #20]
 8009146:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009148:	e06c      	b.n	8009224 <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800914a:	8afb      	ldrh	r3, [r7, #22]
 800914c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800914e:	e05d      	b.n	800920c <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 8009150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009152:	b2db      	uxtb	r3, r3
 8009154:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009156:	b2d1      	uxtb	r1, r2
 8009158:	f107 020f 	add.w	r2, r7, #15
 800915c:	4618      	mov	r0, r3
 800915e:	f7ff fe1a 	bl	8008d96 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009162:	7bf8      	ldrb	r0, [r7, #15]
 8009164:	f107 030c 	add.w	r3, r7, #12
 8009168:	f107 020d 	add.w	r2, r7, #13
 800916c:	f107 010e 	add.w	r1, r7, #14
 8009170:	f7ff fdf0 	bl	8008d54 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009174:	7bbb      	ldrb	r3, [r7, #14]
 8009176:	461a      	mov	r2, r3
 8009178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917a:	4413      	add	r3, r2
 800917c:	781a      	ldrb	r2, [r3, #0]
 800917e:	7b3b      	ldrb	r3, [r7, #12]
 8009180:	4013      	ands	r3, r2
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b00      	cmp	r3, #0
 8009186:	d03b      	beq.n	8009200 <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 8009188:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800918a:	b2db      	uxtb	r3, r3
 800918c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800918e:	b2d2      	uxtb	r2, r2
 8009190:	4611      	mov	r1, r2
 8009192:	4618      	mov	r0, r3
 8009194:	f7ff fecb 	bl	8008f2e <VL53LX_is_aperture_location>
 8009198:	4603      	mov	r3, r0
 800919a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800919e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 80091a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80091a8:	847b      	strh	r3, [r7, #34]	; 0x22
 80091aa:	e002      	b.n	80091b2 <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 80091ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091b0:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 80091b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80091b6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80091ba:	429a      	cmp	r2, r3
 80091bc:	db19      	blt.n	80091f2 <VL53LX_calc_mm_effective_spads+0x156>
 80091be:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80091c2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80091c6:	429a      	cmp	r2, r3
 80091c8:	dc13      	bgt.n	80091f2 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 80091ca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 80091ce:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80091d2:	429a      	cmp	r2, r3
 80091d4:	db0d      	blt.n	80091f2 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 80091d6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80091da:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80091de:	429a      	cmp	r2, r3
 80091e0:	dc07      	bgt.n	80091f2 <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 80091e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091e4:	881a      	ldrh	r2, [r3, #0]
 80091e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091e8:	4413      	add	r3, r2
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ee:	801a      	strh	r2, [r3, #0]
 80091f0:	e006      	b.n	8009200 <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 80091f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091f4:	881a      	ldrh	r2, [r3, #0]
 80091f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091f8:	4413      	add	r3, r2
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091fe:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009200:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009204:	b29b      	uxth	r3, r3
 8009206:	3301      	adds	r3, #1
 8009208:	b29b      	uxth	r3, r3
 800920a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800920c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009210:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009214:	429a      	cmp	r2, r3
 8009216:	dd9b      	ble.n	8009150 <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009218:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800921c:	b29b      	uxth	r3, r3
 800921e:	3301      	adds	r3, #1
 8009220:	b29b      	uxth	r3, r3
 8009222:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009224:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009228:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800922c:	429a      	cmp	r2, r3
 800922e:	dd8c      	ble.n	800914a <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 8009230:	bf00      	nop
 8009232:	bf00      	nop
 8009234:	372c      	adds	r7, #44	; 0x2c
 8009236:	46bd      	mov	sp, r7
 8009238:	bd90      	pop	{r4, r7, pc}

0800923a <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b086      	sub	sp, #24
 800923e:	af00      	add	r7, sp, #0
 8009240:	60f8      	str	r0, [r7, #12]
 8009242:	60b9      	str	r1, [r7, #8]
 8009244:	607a      	str	r2, [r7, #4]
 8009246:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7fe f86b 	bl	8007328 <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	7c9a      	ldrb	r2, [r3, #18]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	3314      	adds	r3, #20
 800927c:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800927e:	2300      	movs	r3, #0
 8009280:	75fb      	strb	r3, [r7, #23]
 8009282:	e06b      	b.n	800935c <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 8009284:	7dfb      	ldrb	r3, [r7, #23]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d002      	beq.n	8009290 <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 800928a:	2b01      	cmp	r3, #1
 800928c:	d034      	beq.n	80092f8 <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 800928e:	e05f      	b.n	8009350 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80092c8:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	8a9a      	ldrh	r2, [r3, #20]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	601a      	str	r2, [r3, #0]

			break;
 80092f6:	e02b      	b.n	8009350 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8009328:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	611a      	str	r2, [r3, #16]
			break;
 800934e:	bf00      	nop
		}

		pdata++;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	334c      	adds	r3, #76	; 0x4c
 8009354:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 8009356:	7dfb      	ldrb	r3, [r7, #23]
 8009358:	3301      	adds	r3, #1
 800935a:	75fb      	strb	r3, [r7, #23]
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	7c9b      	ldrb	r3, [r3, #18]
 8009360:	7dfa      	ldrb	r2, [r7, #23]
 8009362:	429a      	cmp	r2, r3
 8009364:	d38e      	bcc.n	8009284 <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 8009366:	bf00      	nop
 8009368:	bf00      	nop
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 8009370:	b480      	push	{r7}
 8009372:	b089      	sub	sp, #36	; 0x24
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009378:	2300      	movs	r3, #0
 800937a:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3318      	adds	r3, #24
 8009380:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8009388:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8009390:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009398:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800939a:	4613      	mov	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	4413      	add	r3, r2
 80093aa:	3302      	adds	r3, #2
 80093ac:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 80093d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3724      	adds	r7, #36	; 0x24
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b08b      	sub	sp, #44	; 0x2c
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80093ec:	2300      	movs	r3, #0
 80093ee:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	3318      	adds	r3, #24
 80093f4:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80093fc:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009404:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800940c:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8009414:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 8009416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800941a:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 800941c:	7bfa      	ldrb	r2, [r7, #15]
 800941e:	6939      	ldr	r1, [r7, #16]
 8009420:	4613      	mov	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4413      	add	r3, r2
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	440b      	add	r3, r1
 800942a:	3306      	adds	r3, #6
 800942c:	2200      	movs	r2, #0
 800942e:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009436:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 8009438:	2301      	movs	r3, #1
 800943a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800943e:	e01a      	b.n	8009476 <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 8009440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	214c      	movs	r1, #76	; 0x4c
 8009448:	fb01 f303 	mul.w	r3, r1, r3
 800944c:	4413      	add	r3, r2
 800944e:	334a      	adds	r3, #74	; 0x4a
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009454:	429a      	cmp	r2, r3
 8009456:	d209      	bcs.n	800946c <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 8009458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	214c      	movs	r1, #76	; 0x4c
 8009460:	fb01 f303 	mul.w	r3, r1, r3
 8009464:	4413      	add	r3, r2
 8009466:	334a      	adds	r3, #74	; 0x4a
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800946c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009470:	3301      	adds	r3, #1
 8009472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	7c9b      	ldrb	r3, [r3, #18]
 800947a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800947e:	429a      	cmp	r2, r3
 8009480:	d3de      	bcc.n	8009440 <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 8009482:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009484:	2b00      	cmp	r3, #0
 8009486:	d103      	bne.n	8009490 <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 8009488:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800948c:	623b      	str	r3, [r7, #32]
 800948e:	e00e      	b.n	80094ae <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 8009490:	89bb      	ldrh	r3, [r7, #12]
 8009492:	039b      	lsls	r3, r3, #14
 8009494:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 8009496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009498:	6a3a      	ldr	r2, [r7, #32]
 800949a:	fbb2 f3f3 	udiv	r3, r2, r3
 800949e:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094a6:	d302      	bcc.n	80094ae <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 80094a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094ac:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 80094ae:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 80094b0:	6a3b      	ldr	r3, [r7, #32]
 80094b2:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 80094b4:	6939      	ldr	r1, [r7, #16]
 80094b6:	4613      	mov	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	005b      	lsls	r3, r3, #1
 80094be:	440b      	add	r3, r1
 80094c0:	3306      	adds	r3, #6
 80094c2:	4602      	mov	r2, r0
 80094c4:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 80094c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	372c      	adds	r7, #44	; 0x2c
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b08a      	sub	sp, #40	; 0x28
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80094de:	2300      	movs	r3, #0
 80094e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	3318      	adds	r3, #24
 80094e8:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	332c      	adds	r3, #44	; 0x2c
 80094ee:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 80094f0:	6a3b      	ldr	r3, [r7, #32]
 80094f2:	33c2      	adds	r3, #194	; 0xc2
 80094f4:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 80094fc:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	3302      	adds	r3, #2
 8009502:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	785b      	ldrb	r3, [r3, #1]
 8009508:	f003 0301 	and.w	r3, r3, #1
 800950c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009514:	461a      	mov	r2, r3
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	4413      	add	r3, r2
 800951a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800951e:	2b01      	cmp	r3, #1
 8009520:	d11e      	bne.n	8009560 <VL53LX_multizone_hist_bins_update+0x8a>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 8009522:	7bfb      	ldrb	r3, [r7, #15]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10b      	bne.n	8009540 <VL53LX_multizone_hist_bins_update+0x6a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 8009540:	7bfb      	ldrb	r3, [r7, #15]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d05d      	beq.n	8009602 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	719a      	strb	r2, [r3, #6]
 800955e:	e050      	b.n	8009602 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 8009560:	6a3b      	ldr	r3, [r7, #32]
 8009562:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009566:	461a      	mov	r2, r3
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	4413      	add	r3, r2
 800956c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009570:	2b02      	cmp	r3, #2
 8009572:	d11e      	bne.n	80095b2 <VL53LX_multizone_hist_bins_update+0xdc>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 8009574:	7bfb      	ldrb	r3, [r7, #15]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10b      	bne.n	8009592 <VL53LX_multizone_hist_bins_update+0xbc>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d034      	beq.n	8009602 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	719a      	strb	r2, [r3, #6]
 80095b0:	e027      	b.n	8009602 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 80095b2:	6a3b      	ldr	r3, [r7, #32]
 80095b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80095b8:	461a      	mov	r2, r3
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	4413      	add	r3, r2
 80095be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d11d      	bne.n	8009602 <VL53LX_multizone_hist_bins_update+0x12c>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10b      	bne.n	80095e4 <VL53LX_multizone_hist_bins_update+0x10e>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00b      	beq.n	8009602 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 8009602:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009606:	2b00      	cmp	r3, #0
 8009608:	d109      	bne.n	800961e <VL53LX_multizone_hist_bins_update+0x148>
		VL53LX_copy_hist_bins_to_static_cfg(
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	f203 21fe 	addw	r1, r3, #766	; 0x2fe
 8009610:	6a3b      	ldr	r3, [r7, #32]
 8009612:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8009616:	461a      	mov	r2, r3
 8009618:	6978      	ldr	r0, [r7, #20]
 800961a:	f7fd fa55 	bl	8006ac8 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800961e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009622:	4618      	mov	r0, r3
 8009624:	3728      	adds	r7, #40	; 0x28
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800962a:	b480      	push	{r7}
 800962c:	b089      	sub	sp, #36	; 0x24
 800962e:	af00      	add	r7, sp, #0
 8009630:	60f8      	str	r0, [r7, #12]
 8009632:	607a      	str	r2, [r7, #4]
 8009634:	603b      	str	r3, [r7, #0]
 8009636:	460b      	mov	r3, r1
 8009638:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800963a:	2300      	movs	r3, #0
 800963c:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3318      	adds	r3, #24
 8009642:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800964a:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800964c:	7dfb      	ldrb	r3, [r7, #23]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d103      	bne.n	800965a <VL53LX_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	7afa      	ldrb	r2, [r7, #11]
 8009656:	701a      	strb	r2, [r3, #0]
 8009658:	e01e      	b.n	8009698 <VL53LX_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	7dfb      	ldrb	r3, [r7, #23]
 8009662:	3b01      	subs	r3, #1
 8009664:	429a      	cmp	r2, r3
 8009666:	d111      	bne.n	800968c <VL53LX_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	2bff      	cmp	r3, #255	; 0xff
 800966e:	d103      	bne.n	8009678 <VL53LX_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2280      	movs	r2, #128	; 0x80
 8009674:	701a      	strb	r2, [r3, #0]
 8009676:	e005      	b.n	8009684 <VL53LX_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	3301      	adds	r3, #1
 800967e:	b2da      	uxtb	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	2200      	movs	r2, #0
 8009688:	701a      	strb	r2, [r3, #0]
 800968a:	e005      	b.n	8009698 <VL53LX_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	3301      	adds	r3, #1
 8009692:	b2da      	uxtb	r2, r3
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 8009698:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3724      	adds	r7, #36	; 0x24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <VL53LX_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08a      	sub	sp, #40	; 0x28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	607a      	str	r2, [r7, #4]
 80096b2:	461a      	mov	r2, r3
 80096b4:	460b      	mov	r3, r1
 80096b6:	72fb      	strb	r3, [r7, #11]
 80096b8:	4613      	mov	r3, r2
 80096ba:	813b      	strh	r3, [r7, #8]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80096bc:	2300      	movs	r3, #0
 80096be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3318      	adds	r3, #24
 80096c6:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 80096c8:	2300      	movs	r3, #0
 80096ca:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 80096cc:	2300      	movs	r3, #0
 80096ce:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53LX_calc_macro_period_us(
 80096d0:	7afa      	ldrb	r2, [r7, #11]
 80096d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80096d4:	4611      	mov	r1, r2
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fe f9fd 	bl	8007ad6 <VL53LX_calc_macro_period_us>
 80096dc:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <VL53LX_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 80096e4:	2301      	movs	r3, #1
 80096e6:	623b      	str	r3, [r7, #32]


	timeout_mclks = phasecal_timeout_us << 12;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	031b      	lsls	r3, r3, #12
 80096ec:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 80096ee:	6a3b      	ldr	r3, [r7, #32]
 80096f0:	085b      	lsrs	r3, r3, #1
 80096f2:	69ba      	ldr	r2, [r7, #24]
 80096f4:	4413      	add	r3, r2
 80096f6:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 80096f8:	69ba      	ldr	r2, [r7, #24]
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009700:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	2bff      	cmp	r3, #255	; 0xff
 8009706:	d904      	bls.n	8009712 <VL53LX_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	22ff      	movs	r2, #255	; 0xff
 800970c:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
 8009710:	e004      	b.n	800971c <VL53LX_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	7afa      	ldrb	r2, [r7, #11]
 8009720:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a



	if (status == VL53LX_ERROR_NONE)
 8009724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10a      	bne.n	8009742 <VL53LX_set_ref_spad_char_config+0x9a>
		status =
			VL53LX_WrByte(
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
 8009732:	461a      	mov	r2, r3
 8009734:	214b      	movs	r1, #75	; 0x4b
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f004 fdee 	bl	800e318 <VL53LX_WrByte>
 800973c:	4603      	mov	r3, r0
 800973e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53LX_ERROR_NONE)
 8009742:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10a      	bne.n	8009760 <VL53LX_set_ref_spad_char_config+0xb8>
		status =
			VL53LX_WrByte(
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 8009750:	461a      	mov	r2, r3
 8009752:	2160      	movs	r1, #96	; 0x60
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f004 fddf 	bl	800e318 <VL53LX_WrByte>
 800975a:	4603      	mov	r3, r0
 800975c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 8009766:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800976e:	757b      	strb	r3, [r7, #21]

	if (status == VL53LX_ERROR_NONE)
 8009770:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009774:	2b00      	cmp	r3, #0
 8009776:	d109      	bne.n	800978c <VL53LX_set_ref_spad_char_config+0xe4>
		status =
			VL53LX_WriteMulti(
 8009778:	f107 0214 	add.w	r2, r7, #20
 800977c:	2302      	movs	r3, #2
 800977e:	2178      	movs	r1, #120	; 0x78
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f004 fd5d 	bl	800e240 <VL53LX_WriteMulti>
 8009786:	4603      	mov	r3, r0
 8009788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	893a      	ldrh	r2, [r7, #8]
 8009790:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53LX_ERROR_NONE)
 8009794:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009798:	2b00      	cmp	r3, #0
 800979a:	d108      	bne.n	80097ae <VL53LX_set_ref_spad_char_config+0x106>
		status =
			VL53LX_WrWord(
 800979c:	893b      	ldrh	r3, [r7, #8]
 800979e:	461a      	mov	r2, r3
 80097a0:	211c      	movs	r1, #28
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f004 fde2 	bl	800e36c <VL53LX_WrWord>
 80097a8:	4603      	mov	r3, r0
 80097aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53LX_ERROR_NONE)
 80097ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d108      	bne.n	80097c8 <VL53LX_set_ref_spad_char_config+0x120>
		status =
			VL53LX_WrWord(
 80097b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80097b8:	461a      	mov	r2, r3
 80097ba:	2164      	movs	r1, #100	; 0x64
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f004 fdd5 	bl	800e36c <VL53LX_WrWord>
 80097c2:	4603      	mov	r3, r0
 80097c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53LX_ERROR_NONE)
 80097c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d108      	bne.n	80097e2 <VL53LX_set_ref_spad_char_config+0x13a>
		status =
			VL53LX_WrWord(
 80097d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80097d2:	461a      	mov	r2, r3
 80097d4:	2166      	movs	r1, #102	; 0x66
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f004 fdc8 	bl	800e36c <VL53LX_WrWord>
 80097dc:	4603      	mov	r3, r0
 80097de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 80097e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3728      	adds	r7, #40	; 0x28
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 80097ee:	b5b0      	push	{r4, r5, r7, lr}
 80097f0:	b090      	sub	sp, #64	; 0x40
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80097f6:	2300      	movs	r3, #0
 80097f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3318      	adds	r3, #24
 8009800:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8009808:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_smudge_corrector_config_t *pconfig =
 800980a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009810:	3314      	adds	r3, #20
 8009812:	623b      	str	r3, [r7, #32]
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800981a:	3318      	adds	r3, #24
 800981c:	61fb      	str	r3, [r7, #28]
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009820:	61bb      	str	r3, [r7, #24]
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009828:	617b      	str	r3, [r7, #20]

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53LX_p_016;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 8009838:	4413      	add	r3, r2
 800983a:	461a      	mov	r2, r3
 800983c:	f04f 0300 	mov.w	r3, #0
 8009840:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (peak_duration_us == 0)
 8009844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009846:	2b00      	cmp	r3, #0
 8009848:	d102      	bne.n	8009850 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x62>
		peak_duration_us = 1000;
 800984a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800984e:	63fb      	str	r3, [r7, #60]	; 0x3c
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 8009850:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	f04f 0400 	mov.w	r4, #0
 800985c:	f04f 0500 	mov.w	r5, #0
 8009860:	015d      	lsls	r5, r3, #5
 8009862:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8009866:	0154      	lsls	r4, r2, #5
 8009868:	4622      	mov	r2, r4
 800986a:	462b      	mov	r3, r5
 800986c:	1a12      	subs	r2, r2, r0
 800986e:	eb63 0301 	sbc.w	r3, r3, r1
 8009872:	f04f 0400 	mov.w	r4, #0
 8009876:	f04f 0500 	mov.w	r5, #0
 800987a:	009d      	lsls	r5, r3, #2
 800987c:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8009880:	0094      	lsls	r4, r2, #2
 8009882:	4622      	mov	r2, r4
 8009884:	462b      	mov	r3, r5
 8009886:	1812      	adds	r2, r2, r0
 8009888:	eb41 0303 	adc.w	r3, r1, r3
 800988c:	f04f 0000 	mov.w	r0, #0
 8009890:	f04f 0100 	mov.w	r1, #0
 8009894:	00d9      	lsls	r1, r3, #3
 8009896:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800989a:	00d0      	lsls	r0, r2, #3
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	4610      	mov	r0, r2
 80098a2:	4619      	mov	r1, r3
 80098a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098a6:	461a      	mov	r2, r3
 80098a8:	f04f 0300 	mov.w	r3, #0
 80098ac:	f7f6 fd30 	bl	8000310 <__aeabi_uldivmod>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 80098b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	f04f 0400 	mov.w	r4, #0
 80098c4:	f04f 0500 	mov.w	r5, #0
 80098c8:	015d      	lsls	r5, r3, #5
 80098ca:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80098ce:	0154      	lsls	r4, r2, #5
 80098d0:	4622      	mov	r2, r4
 80098d2:	462b      	mov	r3, r5
 80098d4:	1a12      	subs	r2, r2, r0
 80098d6:	eb63 0301 	sbc.w	r3, r3, r1
 80098da:	f04f 0400 	mov.w	r4, #0
 80098de:	f04f 0500 	mov.w	r5, #0
 80098e2:	009d      	lsls	r5, r3, #2
 80098e4:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80098e8:	0094      	lsls	r4, r2, #2
 80098ea:	4622      	mov	r2, r4
 80098ec:	462b      	mov	r3, r5
 80098ee:	1812      	adds	r2, r2, r0
 80098f0:	eb41 0303 	adc.w	r3, r1, r3
 80098f4:	f04f 0000 	mov.w	r0, #0
 80098f8:	f04f 0100 	mov.w	r1, #0
 80098fc:	00d9      	lsls	r1, r3, #3
 80098fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009902:	00d0      	lsls	r0, r2, #3
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4610      	mov	r0, r2
 800990a:	4619      	mov	r1, r3
 800990c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800990e:	461a      	mov	r2, r3
 8009910:	f04f 0300 	mov.w	r3, #0
 8009914:	f7f6 fcfc 	bl	8000310 <__aeabi_uldivmod>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	8ad2      	ldrh	r2, [r2, #22]
 8009928:	fb02 f303 	mul.w	r3, r2, r3
 800992c:	461a      	mov	r2, r3
 800992e:	f04f 0300 	mov.w	r3, #0
 8009932:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (temp64z == 0)
 8009936:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800993a:	4313      	orrs	r3, r2
 800993c:	d105      	bne.n	800994a <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x15c>
		temp64z = 1;
 800993e:	f04f 0201 	mov.w	r2, #1
 8009942:	f04f 0300 	mov.w	r3, #0
 8009946:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	temp64a = temp64a * 1000 * 256;
 800994a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800994e:	4602      	mov	r2, r0
 8009950:	460b      	mov	r3, r1
 8009952:	f04f 0400 	mov.w	r4, #0
 8009956:	f04f 0500 	mov.w	r5, #0
 800995a:	015d      	lsls	r5, r3, #5
 800995c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8009960:	0154      	lsls	r4, r2, #5
 8009962:	4622      	mov	r2, r4
 8009964:	462b      	mov	r3, r5
 8009966:	1a12      	subs	r2, r2, r0
 8009968:	eb63 0301 	sbc.w	r3, r3, r1
 800996c:	f04f 0400 	mov.w	r4, #0
 8009970:	f04f 0500 	mov.w	r5, #0
 8009974:	009d      	lsls	r5, r3, #2
 8009976:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800997a:	0094      	lsls	r4, r2, #2
 800997c:	4622      	mov	r2, r4
 800997e:	462b      	mov	r3, r5
 8009980:	1812      	adds	r2, r2, r0
 8009982:	eb41 0303 	adc.w	r3, r1, r3
 8009986:	f04f 0000 	mov.w	r0, #0
 800998a:	f04f 0100 	mov.w	r1, #0
 800998e:	02d9      	lsls	r1, r3, #11
 8009990:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 8009994:	02d0      	lsls	r0, r2, #11
 8009996:	4602      	mov	r2, r0
 8009998:	460b      	mov	r3, r1
 800999a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800999e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80099a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80099a6:	f7f6 fcb3 	bl	8000310 <__aeabi_uldivmod>
 80099aa:	4602      	mov	r2, r0
 80099ac:	460b      	mov	r3, r1
 80099ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = temp64a * 1000 * 256;
 80099b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	f04f 0400 	mov.w	r4, #0
 80099be:	f04f 0500 	mov.w	r5, #0
 80099c2:	015d      	lsls	r5, r3, #5
 80099c4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80099c8:	0154      	lsls	r4, r2, #5
 80099ca:	4622      	mov	r2, r4
 80099cc:	462b      	mov	r3, r5
 80099ce:	1a12      	subs	r2, r2, r0
 80099d0:	eb63 0301 	sbc.w	r3, r3, r1
 80099d4:	f04f 0400 	mov.w	r4, #0
 80099d8:	f04f 0500 	mov.w	r5, #0
 80099dc:	009d      	lsls	r5, r3, #2
 80099de:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80099e2:	0094      	lsls	r4, r2, #2
 80099e4:	4622      	mov	r2, r4
 80099e6:	462b      	mov	r3, r5
 80099e8:	1812      	adds	r2, r2, r0
 80099ea:	eb41 0303 	adc.w	r3, r1, r3
 80099ee:	f04f 0000 	mov.w	r0, #0
 80099f2:	f04f 0100 	mov.w	r1, #0
 80099f6:	02d9      	lsls	r1, r3, #11
 80099f8:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 80099fc:	02d0      	lsls	r0, r2, #11
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 8009a06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009a0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a0e:	f7f6 fc7f 	bl	8000310 <__aeabi_uldivmod>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pint->required_samples = (uint32_t)temp64a;
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d802      	bhi.n	8009a2e <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x240>
		pint->required_samples = 2;
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 8009a2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3740      	adds	r7, #64	; 0x40
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009a3c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b096      	sub	sp, #88	; 0x58
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
 8009a48:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3318      	adds	r3, #24
 8009a54:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 8009a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a58:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009a5c:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 8009a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a60:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8009a64:	331c      	adds	r3, #28
 8009a66:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 8009a68:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d107      	bne.n	8009a80 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	889b      	ldrh	r3, [r3, #4]
 8009a74:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	609a      	str	r2, [r3, #8]
 8009a7e:	e002      	b.n	8009a86 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	68ba      	ldr	r2, [r7, #8]
 8009a84:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 8009a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8e:	899b      	ldrh	r3, [r3, #12]
 8009a90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 8009a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a96:	89db      	ldrh	r3, [r3, #14]
 8009a98:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d004      	beq.n	8009ab0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x74>
		(pconfig->scaler_calc_method == 1)) &&
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d126      	bne.n	8009afe <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 8009ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab2:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d022      	beq.n	8009afe <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8009ab8:	f107 0317 	add.w	r3, r7, #23
 8009abc:	4619      	mov	r1, r3
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 fe2a 	bl	800a718 <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d101      	bne.n	8009ace <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
			histo_merge_nb = 1;
 8009aca:	2301      	movs	r3, #1
 8009acc:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 8009ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad0:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d003      	beq.n	8009ae0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa4>
			orig_xtalk_offset =
 8009ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	653b      	str	r3, [r7, #80]	; 0x50
 8009ade:	e006      	b.n	8009aee <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 8009ae0:	7dfb      	ldrb	r3, [r7, #23]
 8009ae2:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 8009ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae6:	3202      	adds	r2, #2
 8009ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aec:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 8009aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af0:	889b      	ldrh	r3, [r3, #4]
 8009af2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 8009af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af8:	88db      	ldrh	r3, [r3, #6]
 8009afa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10a      	bne.n	8009b1e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
 8009b08:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d106      	bne.n	8009b1e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
		pout->gradient_zero_flag |= 0x01;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	795b      	ldrb	r3, [r3, #5]
 8009b14:	f043 0301 	orr.w	r3, r3, #1
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10a      	bne.n	8009b3e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
 8009b28:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d106      	bne.n	8009b3e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		pout->gradient_zero_flag |= 0x02;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	795b      	ldrb	r3, [r3, #5]
 8009b34:	f043 0302 	orr.w	r3, r3, #2
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 8009b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d101      	bne.n	8009b48 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
		orig_xtalk_offset = 1;
 8009b44:	2301      	movs	r3, #1
 8009b46:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d108      	bne.n	8009b64 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x128>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b56:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b5e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8009b62:	e019      	b.n	8009b98 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x15c>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 8009b64:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009b68:	019b      	lsls	r3, r3, #6
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b72:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8009b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 8009b7e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8009b82:	019b      	lsls	r3, r3, #6
 8009b84:	461a      	mov	r2, r3
 8009b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b8c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009b96:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d12a      	bne.n	8009bf8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1bc>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8009baa:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 8009bae:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 8009bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb2:	119b      	asrs	r3, r3, #6
 8009bb4:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 8009bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bbc:	db02      	blt.n	8009bc4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x188>
			itemp32 = 0xFFFF;
 8009bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009bc2:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 8009bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bc6:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 8009bd4:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 8009bd8:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 8009bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bdc:	119b      	asrs	r3, r3, #6
 8009bde:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 8009be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009be6:	db02      	blt.n	8009bee <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b2>
			itemp32 = 0xFFFF;
 8009be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009bec:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 8009bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bf0:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	81da      	strh	r2, [r3, #14]
 8009bf6:	e042      	b.n	8009c7e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>
	} else if (pconfig->scaler_calc_method == 1) {
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d13d      	bne.n	8009c7e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 8009c06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 8009c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	da00      	bge.n	8009c14 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d8>
 8009c12:	330f      	adds	r3, #15
 8009c14:	111b      	asrs	r3, r3, #4
 8009c16:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 8009c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 8009c1e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009c22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c24:	4413      	add	r3, r2
 8009c26:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 8009c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c2e:	db02      	blt.n	8009c36 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1fa>
			itemp32 = 0xFFFF;
 8009c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c34:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 8009c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c38:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 8009c42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 8009c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c4a:	4a52      	ldr	r2, [pc, #328]	; (8009d94 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x358>)
 8009c4c:	fb82 1203 	smull	r1, r2, r2, r3
 8009c50:	1152      	asrs	r2, r2, #5
 8009c52:	17db      	asrs	r3, r3, #31
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 8009c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 8009c5e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8009c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c64:	4413      	add	r3, r2
 8009c66:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 8009c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c6e:	db02      	blt.n	8009c76 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23a>
			itemp32 = 0xFFFF;
 8009c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c74:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 8009c76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c78:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	785b      	ldrb	r3, [r3, #1]
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d178      	bne.n	8009d78 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
 8009c86:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d074      	beq.n	8009d78 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	2201      	movs	r2, #1
 8009c92:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	62bb      	str	r3, [r7, #40]	; 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8009c9a:	f107 0317 	add.w	r3, r7, #23
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 fd39 	bl	800a718 <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 8009ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca8:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8009cac:	627b      	str	r3, [r7, #36]	; 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 8009cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb0:	3308      	adds	r3, #8
 8009cb2:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) &&
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d042      	beq.n	8009d40 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 8009cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cbc:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		if ((histo_merge_nb > 0) &&
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d13d      	bne.n	8009d40 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 8009cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d03a      	beq.n	8009d40 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(nXtalk != 0)) {
			cXtalk =
 8009cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 8009cd0:	6a3b      	ldr	r3, [r7, #32]
 8009cd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009cd6:	fb02 f203 	mul.w	r2, r2, r3
 8009cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce0:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d004      	beq.n	8009cf2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b6>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 8009cec:	69fa      	ldr	r2, [r7, #28]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d303      	bcc.n	8009cfa <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2be>
				pout->new_xtalk_applied_flag = 0;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	719a      	strb	r2, [r3, #6]
 8009cf8:	e022      	b.n	8009d40 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			else {
				incXtalk = nXtalk / max;
 8009cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d02:	61bb      	str	r3, [r7, #24]
				cval = 0;
 8009d04:	2300      	movs	r3, #0
 8009d06:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8009d0e:	e00e      	b.n	8009d2e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2f2>
					cval += incXtalk;
 8009d10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	4413      	add	r3, r2
 8009d16:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 8009d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d1c:	601a      	str	r2, [r3, #0]
					pcpo++;
 8009d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d20:	3304      	adds	r3, #4
 8009d22:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 8009d24:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8009d28:	3301      	adds	r3, #1
 8009d2a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8009d2e:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8009d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d34:	3b01      	subs	r3, #1
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d3ea      	bcc.n	8009d10 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d4>
				}
				*pcpo = nXtalk;
 8009d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d3e:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	799b      	ldrb	r3, [r3, #6]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d017      	beq.n	8009d78 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4e:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8009d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d62:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	789b      	ldrb	r3, [r3, #2]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d105      	bne.n	8009d78 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

			pconfig->smudge_corr_apply_enabled = 0;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 8009d78:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d002      	beq.n	8009d86 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x34a>
		pout->smudge_corr_valid = 1;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	2201      	movs	r2, #1
 8009d84:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8009d86:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3758      	adds	r7, #88	; 0x58
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	66666667 	.word	0x66666667

08009d98 <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 8009d98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009d9c:	b09a      	sub	sp, #104	; 0x68
 8009d9e:	af02      	add	r7, sp, #8
 8009da0:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009da2:	2300      	movs	r3, #0
 8009da4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	3318      	adds	r3, #24
 8009dac:	64bb      	str	r3, [r7, #72]	; 0x48
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8009db4:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_smudge_corrector_config_t *pconfig =
 8009db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009db8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009dbc:	3314      	adds	r3, #20
 8009dbe:	643b      	str	r3, [r7, #64]	; 0x40
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 8009dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dc2:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8009dc6:	3318      	adds	r3, #24
 8009dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 8009dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dcc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009dd0:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 8009dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dd4:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 8009dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dd8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009ddc:	633b      	str	r3, [r7, #48]	; 0x30

	uint8_t	run_smudge_detection = 0;
 8009dde:	2300      	movs	r3, #0
 8009de0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t merging_complete = 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t	run_nodetect = 0;
 8009dea:	2300      	movs	r3, #0
 8009dec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t ambient_check = 0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	int32_t itemp32 = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	65bb      	str	r3, [r7, #88]	; 0x58
	uint64_t utemp64 = 0;
 8009dfa:	f04f 0200 	mov.w	r2, #0
 8009dfe:	f04f 0300 	mov.w	r3, #0
 8009e02:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t continue_processing = CONT_CONTINUE;
 8009e06:	2300      	movs	r3, #0
 8009e08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t xtalk_offset_out = 0;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t xtalk_offset_in = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	61fb      	str	r3, [r7, #28]
	uint32_t current_xtalk = 0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	61bb      	str	r3, [r7, #24]
	uint32_t smudge_margin_adjusted = 0;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	617b      	str	r3, [r7, #20]
	uint8_t i = 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t nodetect_index = 0;
 8009e22:	2300      	movs	r3, #0
 8009e24:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8009e28:	f107 030b 	add.w	r3, r7, #11
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fc72 	bl	800a718 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 8009e34:	7afb      	ldrb	r3, [r7, #11]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d004      	beq.n	8009e44 <VL53LX_dynamic_xtalk_correction_corrector+0xac>
		(pdev->tuning_parms.tp_hist_merge != 1))
 8009e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e3c:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	if ((histo_merge_nb == 0) ||
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d001      	beq.n	8009e48 <VL53LX_dynamic_xtalk_correction_corrector+0xb0>
		histo_merge_nb = 1;
 8009e44:	2301      	movs	r3, #1
 8009e46:	72fb      	strb	r3, [r7, #11]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 8009e48:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009e4a:	f000 faeb 	bl	800a424 <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 8009e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d009      	beq.n	8009e6a <VL53LX_dynamic_xtalk_correction_corrector+0xd2>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 8009e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5a:	7afa      	ldrb	r2, [r7, #11]
 8009e5c:	fb02 f303 	mul.w	r3, r2, r3
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 8009e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e62:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d901      	bls.n	8009e6e <VL53LX_dynamic_xtalk_correction_corrector+0xd6>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e000      	b.n	8009e70 <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 8009e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e76:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d105      	bne.n	8009e8a <VL53LX_dynamic_xtalk_correction_corrector+0xf2>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 8009e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e80:	f893 2184 	ldrb.w	r2, [r3, #388]	; 0x184
 8009e84:	7afb      	ldrb	r3, [r7, #11]
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d101      	bne.n	8009e8e <VL53LX_dynamic_xtalk_correction_corrector+0xf6>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e000      	b.n	8009e90 <VL53LX_dynamic_xtalk_correction_corrector+0xf8>
 8009e8e:	2300      	movs	r3, #0
	merging_complete =
 8009e90:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 8009e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e96:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d10e      	bne.n	8009eba <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pconfig->smudge_corr_enabled == 1) &&
 8009e9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00a      	beq.n	8009eba <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pR->xmonitor.range_status
 8009ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea6:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 8009eaa:	2b09      	cmp	r3, #9
 8009eac:	d105      	bne.n	8009eba <VL53LX_dynamic_xtalk_correction_corrector+0x122>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 8009eae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d001      	beq.n	8009eba <VL53LX_dynamic_xtalk_correction_corrector+0x122>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e000      	b.n	8009ebc <VL53LX_dynamic_xtalk_correction_corrector+0x124>
 8009eba:	2300      	movs	r3, #0
	run_smudge_detection =
 8009ebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		merging_complete;


	if ((pR->xmonitor.range_status
 8009ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec2:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 8009ec6:	2b09      	cmp	r3, #9
 8009ec8:	f000 809e 	beq.w	800a008 <VL53LX_dynamic_xtalk_correction_corrector+0x270>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 8009ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ece:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	f040 8099 	bne.w	800a008 <VL53LX_dynamic_xtalk_correction_corrector+0x270>

		run_nodetect = 2;
 8009ed6:	2302      	movs	r3, #2
 8009ed8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		for (i = 0; i < pR->active_results; i++) {
 8009edc:	2300      	movs	r3, #0
 8009ede:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009ee2:	e02d      	b.n	8009f40 <VL53LX_dynamic_xtalk_correction_corrector+0x1a8>
			if (pR->VL53LX_p_003[i].range_status ==
 8009ee4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009eea:	214c      	movs	r1, #76	; 0x4c
 8009eec:	fb01 f303 	mul.w	r3, r1, r3
 8009ef0:	4413      	add	r3, r2
 8009ef2:	335e      	adds	r3, #94	; 0x5e
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	2b09      	cmp	r3, #9
 8009ef8:	d11d      	bne.n	8009f36 <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 8009efa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f00:	214c      	movs	r1, #76	; 0x4c
 8009f02:	fb01 f303 	mul.w	r3, r1, r3
 8009f06:	4413      	add	r3, r2
 8009f08:	335a      	adds	r3, #90	; 0x5a
 8009f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f0e:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 8009f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f12:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 8009f14:	429a      	cmp	r2, r3
 8009f16:	dc03      	bgt.n	8009f20 <VL53LX_dynamic_xtalk_correction_corrector+0x188>
					run_nodetect = 0;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009f1e:	e00a      	b.n	8009f36 <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				} else {
					if (run_nodetect == 2) {
 8009f20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d106      	bne.n	8009f36 <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
						run_nodetect = 1;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						nodetect_index = i;
 8009f2e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009f32:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		for (i = 0; i < pR->active_results; i++) {
 8009f36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f42:	7c9b      	ldrb	r3, [r3, #18]
 8009f44:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d3cb      	bcc.n	8009ee4 <VL53LX_dynamic_xtalk_correction_corrector+0x14c>
					}
				}
			}
		}

		if (run_nodetect == 2)
 8009f4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	d102      	bne.n	8009f5a <VL53LX_dynamic_xtalk_correction_corrector+0x1c2>

			run_nodetect = 0;
 8009f54:	2300      	movs	r3, #0
 8009f56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 8009f5a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
		amr =
 8009f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f60:	214c      	movs	r1, #76	; 0x4c
 8009f62:	fb01 f303 	mul.w	r3, r1, r3
 8009f66:	4413      	add	r3, r2
 8009f68:	3348      	adds	r3, #72	; 0x48
 8009f6a:	881b      	ldrh	r3, [r3, #0]
 8009f6c:	827b      	strh	r3, [r7, #18]

		if (run_nodetect == 1) {
 8009f6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d148      	bne.n	800a008 <VL53LX_dynamic_xtalk_correction_corrector+0x270>




			utemp64 = 1000 * ((uint64_t)amr);
 8009f76:	8a78      	ldrh	r0, [r7, #18]
 8009f78:	f04f 0100 	mov.w	r1, #0
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	f04f 0400 	mov.w	r4, #0
 8009f84:	f04f 0500 	mov.w	r5, #0
 8009f88:	015d      	lsls	r5, r3, #5
 8009f8a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8009f8e:	0154      	lsls	r4, r2, #5
 8009f90:	4622      	mov	r2, r4
 8009f92:	462b      	mov	r3, r5
 8009f94:	1a12      	subs	r2, r2, r0
 8009f96:	eb63 0301 	sbc.w	r3, r3, r1
 8009f9a:	f04f 0400 	mov.w	r4, #0
 8009f9e:	f04f 0500 	mov.w	r5, #0
 8009fa2:	009d      	lsls	r5, r3, #2
 8009fa4:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8009fa8:	0094      	lsls	r4, r2, #2
 8009faa:	4622      	mov	r2, r4
 8009fac:	462b      	mov	r3, r5
 8009fae:	1812      	adds	r2, r2, r0
 8009fb0:	eb41 0303 	adc.w	r3, r1, r3
 8009fb4:	f04f 0000 	mov.w	r0, #0
 8009fb8:	f04f 0100 	mov.w	r1, #0
 8009fbc:	00d9      	lsls	r1, r3, #3
 8009fbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009fc2:	00d0      	lsls	r0, r2, #3
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	e9c7 2308 	strd	r2, r3, [r7, #32]


			utemp64 = utemp64 << 9;
 8009fcc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009fd0:	f04f 0200 	mov.w	r2, #0
 8009fd4:	f04f 0300 	mov.w	r3, #0
 8009fd8:	024b      	lsls	r3, r1, #9
 8009fda:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8009fde:	0242      	lsls	r2, r0, #9
 8009fe0:	e9c7 2308 	strd	r2, r3, [r7, #32]


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 8009fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe8:	461a      	mov	r2, r3
 8009fea:	f04f 0300 	mov.w	r3, #0
 8009fee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009ff2:	4299      	cmp	r1, r3
 8009ff4:	bf08      	it	eq
 8009ff6:	4290      	cmpeq	r0, r2
 8009ff8:	d203      	bcs.n	800a002 <VL53LX_dynamic_xtalk_correction_corrector+0x26a>
				run_nodetect = 1;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a000:	e002      	b.n	800a008 <VL53LX_dynamic_xtalk_correction_corrector+0x270>
			else
				run_nodetect = 0;
 800a002:	2300      	movs	r3, #0
 800a004:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		}
	}


	if (run_smudge_detection) {
 800a008:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f000 8101 	beq.w	800a214 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>

		pint->nodetect_counter = 0;
 800a012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a014:	2200      	movs	r2, #0
 800a016:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f7ff fbe8 	bl	80097ee <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800a01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a020:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800a024:	61fb      	str	r3, [r7, #28]
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800a026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	60fb      	str	r3, [r7, #12]
		current_xtalk = ((uint32_t)cco) << 2;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	61bb      	str	r3, [r7, #24]


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800a032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a034:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	617b      	str	r3, [r7, #20]


		itemp32 = xtalk_offset_in - current_xtalk +
 800a03a:	69fa      	ldr	r2, [r7, #28]
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	1ad2      	subs	r2, r2, r3
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	4413      	add	r3, r2
 800a044:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800a046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a048:	2b00      	cmp	r3, #0
 800a04a:	da02      	bge.n	800a052 <VL53LX_dynamic_xtalk_correction_corrector+0x2ba>
			itemp32 = itemp32 * (-1);
 800a04c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a04e:	425b      	negs	r3, r3
 800a050:	65bb      	str	r3, [r7, #88]	; 0x58


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800a052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	461a      	mov	r2, r3
 800a058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a05a:	4293      	cmp	r3, r2
 800a05c:	dd0c      	ble.n	800a078 <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800a05e:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted)) {
 800a060:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800a062:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	429a      	cmp	r2, r3
 800a068:	da03      	bge.n	800a072 <VL53LX_dynamic_xtalk_correction_corrector+0x2da>
				pout->single_xtalk_delta_flag = 1;
 800a06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06c:	2201      	movs	r2, #1
 800a06e:	709a      	strb	r2, [r3, #2]
 800a070:	e002      	b.n	800a078 <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800a072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a074:	2202      	movs	r2, #2
 800a076:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800a078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	1c5a      	adds	r2, r3, #1
 800a07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a080:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800a082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d906      	bls.n	800a09c <VL53LX_dynamic_xtalk_correction_corrector+0x304>
			pout->sample_limit_exceeded_flag = 1;
 800a08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a090:	2201      	movs	r2, #1
 800a092:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800a094:	2302      	movs	r3, #2
 800a096:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800a09a:	e00d      	b.n	800a0b8 <VL53LX_dynamic_xtalk_correction_corrector+0x320>
		} else {
			pint->accumulator = pint->accumulator +
 800a09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a09e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	f04f 0300 	mov.w	r3, #0
 800a0aa:	eb10 0802 	adds.w	r8, r0, r2
 800a0ae:	eb41 0903 	adc.w	r9, r1, r3
 800a0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b4:	e9c3 8902 	strd	r8, r9, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800a0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d202      	bcs.n	800a0ca <VL53LX_dynamic_xtalk_correction_corrector+0x332>
			continue_processing = CONT_NEXT_LOOP;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800a0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0cc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a0d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	f04f 0300 	mov.w	r3, #0
 800a0da:	f7f6 f919 	bl	8000310 <__aeabi_uldivmod>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
		xtalk_offset_out =
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	653b      	str	r3, [r7, #80]	; 0x50
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800a0e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	1ad2      	subs	r2, r2, r3
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800a0f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	da02      	bge.n	800a0fe <VL53LX_dynamic_xtalk_correction_corrector+0x366>
			itemp32 = itemp32 * (-1);
 800a0f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0fa:	425b      	negs	r3, r3
 800a0fc:	65bb      	str	r3, [r7, #88]	; 0x58

		if (continue_processing == CONT_CONTINUE &&
 800a0fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a102:	2b00      	cmp	r3, #0
 800a104:	d112      	bne.n	800a12c <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800a106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a108:	69db      	ldr	r3, [r3, #28]
 800a10a:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800a10c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a10e:	4293      	cmp	r3, r2
 800a110:	db0c      	blt.n	800a12c <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800a112:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted))
 800a114:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800a116:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800a118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a11a:	429a      	cmp	r2, r3
 800a11c:	da03      	bge.n	800a126 <VL53LX_dynamic_xtalk_correction_corrector+0x38e>
				pout->averaged_xtalk_delta_flag = 1;
 800a11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a120:	2201      	movs	r2, #1
 800a122:	70da      	strb	r2, [r3, #3]
 800a124:	e002      	b.n	800a12c <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800a126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a128:	2202      	movs	r2, #2
 800a12a:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800a12c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a130:	2b00      	cmp	r3, #0
 800a132:	d108      	bne.n	800a146 <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800a134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a136:	69db      	ldr	r3, [r3, #28]
 800a138:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800a13a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a13c:	4293      	cmp	r3, r2
 800a13e:	da02      	bge.n	800a146 <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			)

			continue_processing = CONT_RESET;
 800a140:	2302      	movs	r3, #2
 800a142:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



		pout->smudge_corr_clipped = 0;
 800a146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a148:	2200      	movs	r2, #0
 800a14a:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800a14c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a150:	2b00      	cmp	r3, #0
 800a152:	d111      	bne.n	800a178 <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800a154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a156:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00d      	beq.n	800a178 <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800a15c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a15e:	6a1b      	ldr	r3, [r3, #32]
 800a160:	7afa      	ldrb	r2, [r7, #11]
 800a162:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800a166:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a168:	429a      	cmp	r2, r3
 800a16a:	d905      	bls.n	800a178 <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
				pout->smudge_corr_clipped = 1;
 800a16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16e:	2201      	movs	r2, #1
 800a170:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800a172:	2302      	movs	r3, #2
 800a174:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800a178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a17a:	7c1b      	ldrb	r3, [r3, #16]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d007      	beq.n	800a190 <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800a180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a182:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800a184:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a186:	429a      	cmp	r2, r3
 800a188:	d902      	bls.n	800a190 <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			xtalk_offset_out =
 800a18a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800a190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a192:	7c1b      	ldrb	r3, [r3, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d107      	bne.n	800a1a8 <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800a198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a19a:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800a19c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d202      	bcs.n	800a1a8 <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			xtalk_offset_out =
 800a1a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800a1a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1aa:	089b      	lsrs	r3, r3, #2
 800a1ac:	653b      	str	r3, [r7, #80]	; 0x50
		if (xtalk_offset_out > 0x3FFFF)
 800a1ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a1b4:	d301      	bcc.n	800a1ba <VL53LX_dynamic_xtalk_correction_corrector+0x422>
			xtalk_offset_out = 0x3FFFF;
 800a1b6:	4b3f      	ldr	r3, [pc, #252]	; (800a2b4 <VL53LX_dynamic_xtalk_correction_corrector+0x51c>)
 800a1b8:	653b      	str	r3, [r7, #80]	; 0x50


		if (continue_processing == CONT_CONTINUE) {
 800a1ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10d      	bne.n	800a1de <VL53LX_dynamic_xtalk_correction_corrector+0x446>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	9301      	str	r3, [sp, #4]
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f7ff fc33 	bl	8009a3c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800a1d6:	2302      	movs	r3, #2
 800a1d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800a1dc:	e009      	b.n	800a1f2 <VL53LX_dynamic_xtalk_correction_corrector+0x45a>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800a1de:	2301      	movs	r3, #1
 800a1e0:	9301      	str	r3, [sp, #4]
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7ff fc25 	bl	8009a3c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800a1f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d10c      	bne.n	800a214 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>
			pint->accumulator = 0;
 800a1fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1fc:	f04f 0200 	mov.w	r2, #0
 800a200:	f04f 0300 	mov.w	r3, #0
 800a204:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800a208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a20a:	2200      	movs	r2, #0
 800a20c:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800a20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a210:	2200      	movs	r2, #0
 800a212:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800a214:	2300      	movs	r3, #0
 800a216:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (run_nodetect == 1) {
 800a21a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d140      	bne.n	800a2a4 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>

		pint->nodetect_counter += 1;
 800a222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a224:	691b      	ldr	r3, [r3, #16]
 800a226:	1c5a      	adds	r2, r3, #1
 800a228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a22a:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800a22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a22e:	691a      	ldr	r2, [r3, #16]
 800a230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a234:	429a      	cmp	r2, r3
 800a236:	d202      	bcs.n	800a23e <VL53LX_dynamic_xtalk_correction_corrector+0x4a6>
			continue_processing = CONT_NEXT_LOOP;
 800a238:	2301      	movs	r3, #1
 800a23a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800a23e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a242:	653b      	str	r3, [r7, #80]	; 0x50

		if (continue_processing == CONT_CONTINUE) {
 800a244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d110      	bne.n	800a26e <VL53LX_dynamic_xtalk_correction_corrector+0x4d6>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800a24c:	2300      	movs	r3, #0
 800a24e:	9301      	str	r3, [sp, #4]
 800a250:	2300      	movs	r3, #0
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a256:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a258:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7ff fbee 	bl	8009a3c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800a260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a262:	2202      	movs	r2, #2
 800a264:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800a266:	2302      	movs	r3, #2
 800a268:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800a26c:	e009      	b.n	800a282 <VL53LX_dynamic_xtalk_correction_corrector+0x4ea>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800a26e:	2301      	movs	r3, #1
 800a270:	9301      	str	r3, [sp, #4]
 800a272:	2300      	movs	r3, #0
 800a274:	9300      	str	r3, [sp, #0]
 800a276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a278:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a27a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7ff fbdd 	bl	8009a3c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800a282:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a286:	2b02      	cmp	r3, #2
 800a288:	d10c      	bne.n	800a2a4 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>
			pint->accumulator = 0;
 800a28a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a28c:	f04f 0200 	mov.w	r2, #0
 800a290:	f04f 0300 	mov.w	r3, #0
 800a294:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800a298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a29a:	2200      	movs	r2, #0
 800a29c:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800a29e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800a2a4:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3760      	adds	r7, #96	; 0x60
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a2b2:	bf00      	nop
 800a2b4:	0003ffff 	.word	0x0003ffff

0800a2b8 <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	3318      	adds	r3, #24
 800a2c8:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a2d0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a2d8:	3314      	adds	r3, #20
 800a2da:	2201      	movs	r2, #1
 800a2dc:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a2e4:	3315      	adds	r3, #21
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a2f0:	3316      	adds	r3, #22
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a2fc:	3318      	adds	r3, #24
 800a2fe:	2200      	movs	r2, #0
 800a300:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a308:	331c      	adds	r3, #28
 800a30a:	2264      	movs	r2, #100	; 0x64
 800a30c:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800a314:	2200      	movs	r2, #0
 800a316:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800a31e:	3304      	adds	r3, #4
 800a320:	2200      	movs	r2, #0
 800a322:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800a32a:	3308      	adds	r3, #8
 800a32c:	22c8      	movs	r2, #200	; 0xc8
 800a32e:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800a336:	330c      	adds	r3, #12
 800a338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a33c:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800a344:	3310      	adds	r3, #16
 800a346:	f44f 729a 	mov.w	r2, #308	; 0x134
 800a34a:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800a352:	3314      	adds	r3, #20
 800a354:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a358:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800a360:	3318      	adds	r3, #24
 800a362:	2280      	movs	r2, #128	; 0x80
 800a364:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800a36c:	331c      	adds	r3, #28
 800a36e:	2200      	movs	r2, #0
 800a370:	701a      	strb	r2, [r3, #0]
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800a378:	331e      	adds	r3, #30
 800a37a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a37e:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a38a:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a392:	3302      	adds	r3, #2
 800a394:	2200      	movs	r2, #0
 800a396:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a39e:	3304      	adds	r3, #4
 800a3a0:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
 800a3a4:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	2228      	movs	r2, #40	; 0x28
 800a3b0:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a3b8:	330c      	adds	r3, #12
 800a3ba:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800a3be:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a3c6:	3310      	adds	r3, #16
 800a3c8:	f44f 7261 	mov.w	r2, #900	; 0x384
 800a3cc:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a3d4:	3314      	adds	r3, #20
 800a3d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a3da:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a3e2:	3318      	adds	r3, #24
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.required_samples = 0;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a3ee:	331c      	adds	r3, #28
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.accumulator = 0;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	f503 519f 	add.w	r1, r3, #5088	; 0x13e0
 800a3fa:	f04f 0200 	mov.w	r2, #0
 800a3fe:	f04f 0300 	mov.w	r3, #0
 800a402:	e9c1 2300 	strd	r2, r3, [r1]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a40c:	3308      	adds	r3, #8
 800a40e:	2200      	movs	r2, #0
 800a410:	601a      	str	r2, [r3, #0]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f000 f806 	bl	800a424 <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800a418:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3718      	adds	r7, #24
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a42c:	2300      	movs	r3, #0
 800a42e:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a436:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2200      	movs	r2, #0
 800a43c:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	2200      	movs	r2, #0
 800a442:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	2200      	movs	r2, #0
 800a448:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2200      	movs	r2, #0
 800a44e:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	2200      	movs	r2, #0
 800a454:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	2200      	movs	r2, #0
 800a45a:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2200      	movs	r2, #0
 800a460:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2200      	movs	r2, #0
 800a466:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	2200      	movs	r2, #0
 800a46c:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	2200      	movs	r2, #0
 800a472:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800a474:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3714      	adds	r7, #20
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a48c:	2300      	movs	r3, #0
 800a48e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	3318      	adds	r3, #24
 800a494:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800a49c:	331c      	adds	r3, #28
 800a49e:	2200      	movs	r2, #0
 800a4a0:	601a      	str	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	801a      	strh	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800a4b2:	3302      	adds	r3, #2
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	801a      	strh	r2, [r3, #0]
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800a4be:	3304      	adds	r3, #4
 800a4c0:	2218      	movs	r2, #24
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f009 fc2d 	bl	8013d24 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800a4ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b085      	sub	sp, #20
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	3318      	adds	r3, #24
 800a4e6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a4ee:	3310      	adds	r3, #16
 800a4f0:	2203      	movs	r2, #3
 800a4f2:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a4fa:	3311      	adds	r3, #17
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a506:	3312      	adds	r3, #18
 800a508:	2200      	movs	r2, #0
 800a50a:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a512:	3313      	adds	r3, #19
 800a514:	2200      	movs	r2, #0
 800a516:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a51e:	3314      	adds	r3, #20
 800a520:	2200      	movs	r2, #0
 800a522:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a52a:	3315      	adds	r3, #21
 800a52c:	2200      	movs	r2, #0
 800a52e:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a536:	3316      	adds	r3, #22
 800a538:	2200      	movs	r2, #0
 800a53a:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a542:	3318      	adds	r3, #24
 800a544:	2200      	movs	r2, #0
 800a546:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a54e:	331c      	adds	r3, #28
 800a550:	2200      	movs	r2, #0
 800a552:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a554:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3714      	adds	r7, #20
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	3318      	adds	r3, #24
 800a570:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a572:	2300      	movs	r3, #0
 800a574:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f893 22e3 	ldrb.w	r2, [r3, #739]	; 0x2e3
	pdev->low_power_auto_data.saved_vhv_init =
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a582:	3314      	adds	r3, #20
 800a584:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
	pdev->low_power_auto_data.saved_vhv_timeout =
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a592:	3315      	adds	r3, #21
 800a594:	701a      	strb	r2, [r3, #0]


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f893 32e3 	ldrb.w	r3, [r3, #739]	; 0x2e3
 800a59c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800a5ae:	f003 0303 	and.w	r3, r3, #3
 800a5b2:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a5ba:	3310      	adds	r3, #16
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800a5c2:	4413      	add	r3, r2
 800a5c4:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 800a5da:	331e      	adds	r3, #30
 800a5dc:	781a      	ldrb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result =
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a5e4:	3316      	adds	r3, #22
 800a5e6:	701a      	strb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a5ee:	3316      	adds	r3, #22
 800a5f0:	781a      	ldrb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

	LOG_FUNCTION_END(status);

	return status;
 800a5f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3714      	adds	r7, #20
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800a608:	b480      	push	{r7}
 800a60a:	b087      	sub	sp, #28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	3318      	adds	r3, #24
 800a614:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f203 3366 	addw	r3, r3, #870	; 0x366
 800a61c:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a61e:	2300      	movs	r3, #0
 800a620:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	8a1b      	ldrh	r3, [r3, #16]
 800a626:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	891b      	ldrh	r3, [r3, #8]
 800a62c:	4413      	add	r3, r2
	utemp32a =
 800a62e:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a636:	d302      	bcc.n	800a63e <VL53LX_low_power_auto_update_DSS+0x36>
		utemp32a = 0xFFFF;
 800a638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a63c:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	041b      	lsls	r3, r3, #16
 800a642:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d102      	bne.n	800a654 <VL53LX_low_power_auto_update_DSS+0x4c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800a64e:	23f1      	movs	r3, #241	; 0xf1
 800a650:	75fb      	strb	r3, [r7, #23]
 800a652:	e03f      	b.n	800a6d4 <VL53LX_low_power_auto_update_DSS+0xcc>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800a65a:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a662:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a66a:	3318      	adds	r3, #24
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	601a      	str	r2, [r3, #0]
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800a676:	041b      	lsls	r3, r3, #16
 800a678:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a680:	3318      	adds	r3, #24
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d102      	bne.n	800a68e <VL53LX_low_power_auto_update_DSS+0x86>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800a688:	23f1      	movs	r3, #241	; 0xf1
 800a68a:	75fb      	strb	r3, [r7, #23]
 800a68c:	e022      	b.n	800a6d4 <VL53LX_low_power_auto_update_DSS+0xcc>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a694:	3318      	adds	r3, #24
 800a696:	681b      	ldr	r3, [r3, #0]
			utemp32a = utemp32a /
 800a698:	693a      	ldr	r2, [r7, #16]
 800a69a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a69e:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6a6:	d302      	bcc.n	800a6ae <VL53LX_low_power_auto_update_DSS+0xa6>
				utemp32a = 0xFFFF;
 800a6a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a6ac:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a6b8:	331c      	adds	r3, #28
 800a6ba:	801a      	strh	r2, [r3, #0]


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a6c2:	331c      	adds	r3, #28
 800a6c4:	881a      	ldrh	r2, [r3, #0]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
			pdev->gen_cfg.dss_config__roi_mode_control =
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2202      	movs	r2, #2
 800a6d0:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800a6d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a6d8:	f113 0f0f 	cmn.w	r3, #15
 800a6dc:	d114      	bne.n	800a708 <VL53LX_low_power_auto_update_DSS+0x100>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a6e4:	331c      	adds	r3, #28
 800a6e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a6ea:	801a      	strh	r2, [r3, #0]


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800a6f2:	331c      	adds	r3, #28
 800a6f4:	881a      	ldrh	r2, [r3, #0]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
		pdev->gen_cfg.dss_config__roi_mode_control =
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2202      	movs	r2, #2
 800a700:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800a704:	2300      	movs	r3, #0
 800a706:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800a708:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	371c      	adds	r7, #28
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	3318      	adds	r3, #24
 800a726:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a728:	2300      	movs	r3, #0
 800a72a:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800a72c:	2300      	movs	r3, #0
 800a72e:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800a736:	2b07      	cmp	r3, #7
 800a738:	bf0c      	ite	eq
 800a73a:	2301      	moveq	r3, #1
 800a73c:	2300      	movne	r3, #0
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800a742:	2300      	movs	r3, #0
 800a744:	75fb      	strb	r3, [r7, #23]
 800a746:	e019      	b.n	800a77c <VL53LX_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800a748:	7df9      	ldrb	r1, [r7, #23]
 800a74a:	7bbb      	ldrb	r3, [r7, #14]
 800a74c:	6938      	ldr	r0, [r7, #16]
 800a74e:	461a      	mov	r2, r3
 800a750:	0052      	lsls	r2, r2, #1
 800a752:	441a      	add	r2, r3
 800a754:	0153      	lsls	r3, r2, #5
 800a756:	461a      	mov	r2, r3
 800a758:	460b      	mov	r3, r1
 800a75a:	005b      	lsls	r3, r3, #1
 800a75c:	440b      	add	r3, r1
 800a75e:	019b      	lsls	r3, r3, #6
 800a760:	4413      	add	r3, r2
 800a762:	4403      	add	r3, r0
 800a764:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800a768:	330c      	adds	r3, #12
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	dd02      	ble.n	800a776 <VL53LX_compute_histo_merge_nb+0x5e>
			sum++;
 800a770:	7dbb      	ldrb	r3, [r7, #22]
 800a772:	3301      	adds	r3, #1
 800a774:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800a776:	7dfb      	ldrb	r3, [r7, #23]
 800a778:	3301      	adds	r3, #1
 800a77a:	75fb      	strb	r3, [r7, #23]
 800a77c:	7dfb      	ldrb	r3, [r7, #23]
 800a77e:	2b05      	cmp	r3, #5
 800a780:	d9e2      	bls.n	800a748 <VL53LX_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	7dba      	ldrb	r2, [r7, #22]
 800a786:	701a      	strb	r2, [r3, #0]

	return status;
 800a788:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	371c      	adds	r7, #28
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	4603      	mov	r3, r0
 800a7a0:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800a7a6:	88fb      	ldrh	r3, [r7, #6]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d005      	beq.n	800a7b8 <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800a7ac:	88fb      	ldrh	r3, [r7, #6]
 800a7ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a7b2:	fb92 f3f3 	sdiv	r3, r2, r3
 800a7b6:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b089      	sub	sp, #36	; 0x24
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	60f8      	str	r0, [r7, #12]
 800a7ce:	60b9      	str	r1, [r7, #8]
 800a7d0:	607a      	str	r2, [r7, #4]
 800a7d2:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800a7d4:	f04f 0200 	mov.w	r2, #0
 800a7d8:	f04f 0300 	mov.w	r3, #0
 800a7dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	fb02 f303 	mul.w	r3, r2, r3
 800a7ec:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	0b1b      	lsrs	r3, r3, #12
 800a7f2:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	f04f 0300 	mov.w	r3, #0
 800a7fc:	e9c7 2306 	strd	r2, r3, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	fb02 f303 	mul.w	r3, r2, r3
 800a808:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	091b      	lsrs	r3, r3, #4
 800a80e:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	461a      	mov	r2, r3
 800a814:	f04f 0300 	mov.w	r3, #0
 800a818:	69f9      	ldr	r1, [r7, #28]
 800a81a:	fb02 f001 	mul.w	r0, r2, r1
 800a81e:	69b9      	ldr	r1, [r7, #24]
 800a820:	fb03 f101 	mul.w	r1, r3, r1
 800a824:	4401      	add	r1, r0
 800a826:	69b8      	ldr	r0, [r7, #24]
 800a828:	fba0 2302 	umull	r2, r3, r0, r2
 800a82c:	4419      	add	r1, r3
 800a82e:	460b      	mov	r3, r1
 800a830:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800a834:	e9c7 2306 	strd	r2, r3, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800a838:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a83c:	f04f 0200 	mov.w	r2, #0
 800a840:	f04f 0300 	mov.w	r3, #0
 800a844:	0b02      	lsrs	r2, r0, #12
 800a846:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800a84a:	0b0b      	lsrs	r3, r1, #12
 800a84c:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800a850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a854:	2b01      	cmp	r3, #1
 800a856:	bf08      	it	eq
 800a858:	2a00      	cmpeq	r2, #0
 800a85a:	d305      	bcc.n	800a868 <VL53LX_duration_maths+0xa2>
		tmp_long_int = 0xFFFFFFFF;
 800a85c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a860:	f04f 0300 	mov.w	r3, #0
 800a864:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	617b      	str	r3, [r7, #20]

	return duration_us;
 800a86c:	697b      	ldr	r3, [r7, #20]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3724      	adds	r7, #36	; 0x24
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800a87a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a87e:	b08e      	sub	sp, #56	; 0x38
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	460b      	mov	r3, r1
 800a886:	607a      	str	r2, [r7, #4]
 800a888:	817b      	strh	r3, [r7, #10]
	uint64_t total_hist_counts  = 0;
 800a88a:	f04f 0200 	mov.w	r2, #0
 800a88e:	f04f 0300 	mov.w	r3, #0
 800a892:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint64_t xtalk_per_spad     = 0;
 800a896:	f04f 0200 	mov.w	r2, #0
 800a89a:	f04f 0300 	mov.w	r3, #0
 800a89e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint32_t rate_per_spad_kcps = 0;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	627b      	str	r3, [r7, #36]	; 0x24





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	f04f 0400 	mov.w	r4, #0
 800a8b6:	f04f 0500 	mov.w	r5, #0
 800a8ba:	015d      	lsls	r5, r3, #5
 800a8bc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a8c0:	0154      	lsls	r4, r2, #5
 800a8c2:	4622      	mov	r2, r4
 800a8c4:	462b      	mov	r3, r5
 800a8c6:	1a12      	subs	r2, r2, r0
 800a8c8:	eb63 0301 	sbc.w	r3, r3, r1
 800a8cc:	f04f 0400 	mov.w	r4, #0
 800a8d0:	f04f 0500 	mov.w	r5, #0
 800a8d4:	009d      	lsls	r5, r3, #2
 800a8d6:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a8da:	0094      	lsls	r4, r2, #2
 800a8dc:	4622      	mov	r2, r4
 800a8de:	462b      	mov	r3, r5
 800a8e0:	1812      	adds	r2, r2, r0
 800a8e2:	eb41 0303 	adc.w	r3, r1, r3
 800a8e6:	f04f 0000 	mov.w	r0, #0
 800a8ea:	f04f 0100 	mov.w	r1, #0
 800a8ee:	02d9      	lsls	r1, r3, #11
 800a8f0:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800a8f4:	02d0      	lsls	r0, r2, #11
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
			* 1000 * 256);

	if (num_spads != 0)
 800a8fe:	897b      	ldrh	r3, [r7, #10]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00a      	beq.n	800a91a <VL53LX_events_per_spad_maths+0xa0>
		total_hist_counts = do_division_u(
 800a904:	897a      	ldrh	r2, [r7, #10]
 800a906:	f04f 0300 	mov.w	r3, #0
 800a90a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a90e:	f7f5 fcff 	bl	8000310 <__aeabi_uldivmod>
 800a912:	4602      	mov	r2, r0
 800a914:	460b      	mov	r3, r1
 800a916:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d021      	beq.n	800a964 <VL53LX_events_per_spad_maths+0xea>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800a920:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a924:	f04f 0200 	mov.w	r2, #0
 800a928:	f04f 0300 	mov.w	r3, #0
 800a92c:	02cb      	lsls	r3, r1, #11
 800a92e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800a932:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800a934:	6879      	ldr	r1, [r7, #4]
 800a936:	0849      	lsrs	r1, r1, #1
 800a938:	4608      	mov	r0, r1
 800a93a:	f04f 0100 	mov.w	r1, #0
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800a93e:	eb12 0800 	adds.w	r8, r2, r0
 800a942:	eb43 0901 	adc.w	r9, r3, r1
 800a946:	e9c7 8904 	strd	r8, r9, [r7, #16]

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	461a      	mov	r2, r3
 800a94e:	f04f 0300 	mov.w	r3, #0
 800a952:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a956:	f7f5 fcdb 	bl	8000310 <__aeabi_uldivmod>
 800a95a:	4602      	mov	r2, r0
 800a95c:	460b      	mov	r3, r1
 800a95e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800a962:	e00b      	b.n	800a97c <VL53LX_events_per_spad_maths+0x102>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800a964:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a968:	f04f 0200 	mov.w	r2, #0
 800a96c:	f04f 0300 	mov.w	r3, #0
 800a970:	02cb      	lsls	r3, r1, #11
 800a972:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800a976:	02c2      	lsls	r2, r0, #11
 800a978:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97e:	627b      	str	r3, [r7, #36]	; 0x24

	return rate_per_spad_kcps;
 800a980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a982:	4618      	mov	r0, r3
 800a984:	3738      	adds	r7, #56	; 0x38
 800a986:	46bd      	mov	sp, r7
 800a988:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800a98c <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800a994:	2300      	movs	r3, #0
 800a996:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800a998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a99c:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800a99e:	e002      	b.n	800a9a6 <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	089b      	lsrs	r3, r3, #2
 800a9a4:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d8f8      	bhi.n	800a9a0 <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800a9ae:	e017      	b.n	800a9e0 <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d30b      	bcc.n	800a9d4 <VL53LX_isqrt+0x48>
			num -= res + bit;
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	085b      	lsrs	r3, r3, #1
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	60fb      	str	r3, [r7, #12]
 800a9d2:	e002      	b.n	800a9da <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	085b      	lsrs	r3, r3, #1
 800a9d8:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	089b      	lsrs	r3, r3, #2
 800a9de:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1e4      	bne.n	800a9b0 <VL53LX_isqrt+0x24>
	}

	return res;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3714      	adds	r7, #20
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 fa98 	bl	800af40 <VL53LX_decode_vcsel_period>
 800aa10:	4603      	mov	r3, r0
	period = 2048 *
 800aa12:	02db      	lsls	r3, r3, #11
 800aa14:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800aa20:	461a      	mov	r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4413      	add	r3, r2
 800aa26:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa2e:	02db      	lsls	r3, r3, #11
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	4413      	add	r3, r2
 800aa34:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aa3c:	02db      	lsls	r3, r3, #11
 800aa3e:	68fa      	ldr	r2, [r7, #12]
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d009      	beq.n	800aa5e <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa52:	68b9      	ldr	r1, [r7, #8]
 800aa54:	fb01 f202 	mul.w	r2, r1, r2
 800aa58:	1a9b      	subs	r3, r3, r2
 800aa5a:	60fb      	str	r3, [r7, #12]
 800aa5c:	e001      	b.n	800aa62 <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800aa6c:	bf00      	nop
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800aa86:	6838      	ldr	r0, [r7, #0]
 800aa88:	f000 fb83 	bl	800b192 <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7ff ff7a 	bl	800a98c <VL53LX_isqrt>
 800aa98:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800aa9a:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	fb02 f303 	mul.w	r3, r2, r3
 800aaa4:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	3307      	adds	r3, #7
 800aaaa:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	111b      	asrs	r3, r3, #4
 800aab0:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	4413      	add	r3, r2
 800aabc:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800aace:	2300      	movs	r3, #0
 800aad0:	73fb      	strb	r3, [r7, #15]
 800aad2:	e01e      	b.n	800ab12 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800aad4:	7bfa      	ldrb	r2, [r7, #15]
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	3206      	adds	r2, #6
 800aada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aade:	68ba      	ldr	r2, [r7, #8]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	dd13      	ble.n	800ab0c <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800aaea:	7bf9      	ldrb	r1, [r7, #15]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	3106      	adds	r1, #6
 800aaf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aaf4:	441a      	add	r2, r3
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ab02:	3301      	adds	r3, #1
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	73fb      	strb	r3, [r7, #15]
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	7a9b      	ldrb	r3, [r3, #10]
 800ab16:	7bfa      	ldrb	r2, [r7, #15]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d3db      	bcc.n	800aad4 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d01c      	beq.n	800ab60 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53LX_p_028 =
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800ab3e:	0852      	lsrs	r2, r2, #1
 800ab40:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800ab42:	441a      	add	r2, r3
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800ab50:	683a      	ldr	r2, [r7, #0]
 800ab52:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53LX_p_028 /=
 800ab56:	fb93 f2f2 	sdiv	r2, r3, r2
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800ab60:	bf00      	nop
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800ab70:	2300      	movs	r3, #0
 800ab72:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800ab74:	2300      	movs	r3, #0
 800ab76:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	7b1b      	ldrb	r3, [r3, #12]
 800ab80:	f003 0307 	and.w	r3, r3, #7
 800ab84:	2b07      	cmp	r3, #7
 800ab86:	d13a      	bne.n	800abfe <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	73bb      	strb	r3, [r7, #14]
 800ab90:	e01f      	b.n	800abd2 <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	4413      	add	r3, r2
 800ab98:	7b1b      	ldrb	r3, [r3, #12]
 800ab9a:	f003 0307 	and.w	r3, r3, #7
 800ab9e:	2b07      	cmp	r3, #7
 800aba0:	d014      	beq.n	800abcc <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800aba2:	7bba      	ldrb	r2, [r7, #14]
 800aba4:	7b7b      	ldrb	r3, [r7, #13]
 800aba6:	6879      	ldr	r1, [r7, #4]
 800aba8:	440a      	add	r2, r1
 800abaa:	7b11      	ldrb	r1, [r2, #12]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	4413      	add	r3, r2
 800abb0:	460a      	mov	r2, r1
 800abb2:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800abb4:	7bba      	ldrb	r2, [r7, #14]
 800abb6:	7b7b      	ldrb	r3, [r7, #13]
 800abb8:	6879      	ldr	r1, [r7, #4]
 800abba:	440a      	add	r2, r1
 800abbc:	7c91      	ldrb	r1, [r2, #18]
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	4413      	add	r3, r2
 800abc2:	460a      	mov	r2, r1
 800abc4:	749a      	strb	r2, [r3, #18]
				i++;
 800abc6:	7b7b      	ldrb	r3, [r7, #13]
 800abc8:	3301      	adds	r3, #1
 800abca:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800abcc:	7bbb      	ldrb	r3, [r7, #14]
 800abce:	3301      	adds	r3, #1
 800abd0:	73bb      	strb	r3, [r7, #14]
 800abd2:	7bbb      	ldrb	r3, [r7, #14]
 800abd4:	2b05      	cmp	r3, #5
 800abd6:	d9dc      	bls.n	800ab92 <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800abd8:	7b7b      	ldrb	r3, [r7, #13]
 800abda:	73bb      	strb	r3, [r7, #14]
 800abdc:	e00c      	b.n	800abf8 <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800abde:	7bbb      	ldrb	r3, [r7, #14]
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	4413      	add	r3, r2
 800abe4:	2210      	movs	r2, #16
 800abe6:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800abe8:	7bbb      	ldrb	r3, [r7, #14]
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	4413      	add	r3, r2
 800abee:	2200      	movs	r2, #0
 800abf0:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800abf2:	7bbb      	ldrb	r3, [r7, #14]
 800abf4:	3301      	adds	r3, #1
 800abf6:	73bb      	strb	r3, [r7, #14]
 800abf8:	7bbb      	ldrb	r3, [r7, #14]
 800abfa:	2b05      	cmp	r3, #5
 800abfc:	d9ef      	bls.n	800abde <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	7adb      	ldrb	r3, [r3, #11]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d023      	beq.n	800ac4e <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	7adb      	ldrb	r3, [r3, #11]
 800ac0a:	73fb      	strb	r3, [r7, #15]
 800ac0c:	e00f      	b.n	800ac2e <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800ac0e:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800ac10:	7bfb      	ldrb	r3, [r7, #15]
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	7ad2      	ldrb	r2, [r2, #11]
 800ac16:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	3106      	adds	r1, #6
 800ac1c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	3206      	adds	r2, #6
 800ac24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	73fb      	strb	r3, [r7, #15]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800ac32:	7bfa      	ldrb	r2, [r7, #15]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d3ea      	bcc.n	800ac0e <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800ac40:	1ad3      	subs	r3, r2, r3
 800ac42:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	72da      	strb	r2, [r3, #11]
	}
}
 800ac4e:	bf00      	nop
 800ac50:	3714      	adds	r7, #20
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	4603      	mov	r3, r0
 800ac62:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800ac6c:	88fb      	ldrh	r3, [r7, #6]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7ff fd92 	bl	800a798 <VL53LX_calc_pll_period_us>
 800ac74:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800ac7a:	f249 2257 	movw	r2, #37463	; 0x9257
 800ac7e:	fb02 f303 	mul.w	r3, r2, r3
 800ac82:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ac8a:	0c1b      	lsrs	r3, r3, #16
 800ac8c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800ac8e:	68bb      	ldr	r3, [r7, #8]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b087      	sub	sp, #28
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800aca2:	2300      	movs	r3, #0
 800aca4:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800aca6:	2307      	movs	r3, #7
 800aca8:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800acaa:	2300      	movs	r3, #0
 800acac:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acb4:	db03      	blt.n	800acbe <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800acb6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800acba:	617b      	str	r3, [r7, #20]
 800acbc:	e004      	b.n	800acc8 <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	dd01      	ble.n	800acc8 <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800acce:	dd02      	ble.n	800acd6 <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800acd0:	2303      	movs	r3, #3
 800acd2:	613b      	str	r3, [r7, #16]
 800acd4:	e001      	b.n	800acda <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800acd6:	2307      	movs	r3, #7
 800acd8:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d009      	beq.n	800acf4 <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800ace0:	697a      	ldr	r2, [r7, #20]
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	409a      	lsls	r2, r3
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	085b      	lsrs	r3, r3, #1
 800acea:	441a      	add	r2, r3
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	fbb2 f3f3 	udiv	r3, r2, r3
 800acf2:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800acfa:	dd02      	ble.n	800ad02 <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	011b      	lsls	r3, r3, #4
 800ad00:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad08:	d302      	bcc.n	800ad10 <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800ad0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad0e:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800ad14:	89fb      	ldrh	r3, [r7, #14]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	371c      	adds	r7, #28
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800ad22:	b480      	push	{r7}
 800ad24:	b087      	sub	sp, #28
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	60f8      	str	r0, [r7, #12]
 800ad2a:	60b9      	str	r1, [r7, #8]
 800ad2c:	603b      	str	r3, [r7, #0]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800ad32:	2300      	movs	r3, #0
 800ad34:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800ad36:	2300      	movs	r3, #0
 800ad38:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800ad3a:	88fb      	ldrh	r3, [r7, #6]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d010      	beq.n	800ad62 <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	021a      	lsls	r2, r3, #8
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	fa02 f303 	lsl.w	r3, r2, r3
 800ad4a:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800ad4c:	88fb      	ldrh	r3, [r7, #6]
 800ad4e:	085b      	lsrs	r3, r3, #1
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800ad58:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800ad5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad5e:	617b      	str	r3, [r7, #20]
 800ad60:	e004      	b.n	800ad6c <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800ad62:	68ba      	ldr	r2, [r7, #8]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	fa02 f303 	lsl.w	r3, r2, r3
 800ad6a:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800ad6c:	697a      	ldr	r2, [r7, #20]
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d901      	bls.n	800ad78 <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800ad7c:	8a7b      	ldrh	r3, [r7, #18]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	371c      	adds	r7, #28
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr
	...

0800ad8c <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800ad8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad8e:	b089      	sub	sp, #36	; 0x24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	4606      	mov	r6, r0
 800ad94:	4608      	mov	r0, r1
 800ad96:	4611      	mov	r1, r2
 800ad98:	461a      	mov	r2, r3
 800ad9a:	4633      	mov	r3, r6
 800ad9c:	80fb      	strh	r3, [r7, #6]
 800ad9e:	4603      	mov	r3, r0
 800ada0:	80bb      	strh	r3, [r7, #4]
 800ada2:	460b      	mov	r3, r1
 800ada4:	807b      	strh	r3, [r7, #2]
 800ada6:	4613      	mov	r3, r2
 800ada8:	707b      	strb	r3, [r7, #1]


	uint32_t    pll_period_us = 0;
 800adaa:	2300      	movs	r3, #0
 800adac:	61bb      	str	r3, [r7, #24]
	int64_t     tmp_long_int  = 0;
 800adae:	f04f 0200 	mov.w	r2, #0
 800adb2:	f04f 0300 	mov.w	r3, #0
 800adb6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int32_t     range_mm      = 0;
 800adba:	2300      	movs	r3, #0
 800adbc:	61fb      	str	r3, [r7, #28]
	int32_t     range_mm_10   = 0;
 800adbe:	2300      	movs	r3, #0
 800adc0:	60fb      	str	r3, [r7, #12]



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800adc2:	88fb      	ldrh	r3, [r7, #6]
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7ff fce7 	bl	800a798 <VL53LX_calc_pll_period_us>
 800adca:	61b8      	str	r0, [r7, #24]



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800adcc:	88b8      	ldrh	r0, [r7, #4]
 800adce:	f04f 0100 	mov.w	r1, #0
 800add2:	887a      	ldrh	r2, [r7, #2]
 800add4:	f04f 0300 	mov.w	r3, #0
 800add8:	1a84      	subs	r4, r0, r2
 800adda:	eb61 0503 	sbc.w	r5, r1, r3
 800adde:	e9c7 4504 	strd	r4, r5, [r7, #16]



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	461a      	mov	r2, r3
 800ade6:	f04f 0300 	mov.w	r3, #0
 800adea:	6979      	ldr	r1, [r7, #20]
 800adec:	fb02 f001 	mul.w	r0, r2, r1
 800adf0:	6939      	ldr	r1, [r7, #16]
 800adf2:	fb03 f101 	mul.w	r1, r3, r1
 800adf6:	4401      	add	r1, r0
 800adf8:	6938      	ldr	r0, [r7, #16]
 800adfa:	fba0 2302 	umull	r2, r3, r0, r2
 800adfe:	4419      	add	r1, r3
 800ae00:	460b      	mov	r3, r1
 800ae02:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800ae06:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800ae0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ae0e:	2a00      	cmp	r2, #0
 800ae10:	f173 0100 	sbcs.w	r1, r3, #0
 800ae14:	da06      	bge.n	800ae24 <VL53LX_range_maths+0x98>
 800ae16:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ae1a:	f04f 0100 	mov.w	r1, #0
 800ae1e:	1812      	adds	r2, r2, r0
 800ae20:	eb41 0303 	adc.w	r3, r1, r3
 800ae24:	f04f 0000 	mov.w	r0, #0
 800ae28:	f04f 0100 	mov.w	r1, #0
 800ae2c:	0a50      	lsrs	r0, r2, #9
 800ae2e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800ae32:	1259      	asrs	r1, r3, #9
 800ae34:	e9c7 0104 	strd	r0, r1, [r7, #16]



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	f249 2257 	movw	r2, #37463	; 0x9257
 800ae3e:	fb02 f203 	mul.w	r2, r2, r3
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	2100      	movs	r1, #0
 800ae46:	fb01 f303 	mul.w	r3, r1, r3
 800ae4a:	18d1      	adds	r1, r2, r3
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	f249 2257 	movw	r2, #37463	; 0x9257
 800ae52:	fba3 2302 	umull	r2, r3, r3, r2
 800ae56:	4419      	add	r1, r3
 800ae58:	460b      	mov	r3, r1
 800ae5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800ae5e:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800ae62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ae66:	2a00      	cmp	r2, #0
 800ae68:	f173 0100 	sbcs.w	r1, r3, #0
 800ae6c:	da05      	bge.n	800ae7a <VL53LX_range_maths+0xee>
 800ae6e:	4832      	ldr	r0, [pc, #200]	; (800af38 <VL53LX_range_maths+0x1ac>)
 800ae70:	f04f 0100 	mov.w	r1, #0
 800ae74:	1812      	adds	r2, r2, r0
 800ae76:	eb41 0303 	adc.w	r3, r1, r3
 800ae7a:	f04f 0000 	mov.w	r0, #0
 800ae7e:	f04f 0100 	mov.w	r1, #0
 800ae82:	0d90      	lsrs	r0, r2, #22
 800ae84:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800ae88:	1599      	asrs	r1, r3, #22
 800ae8a:	e9c7 0104 	strd	r0, r1, [r7, #16]


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae92:	4413      	add	r3, r2
 800ae94:	61fb      	str	r3, [r7, #28]


	range_mm *= gain_factor;
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae9a:	fb02 f303 	mul.w	r3, r2, r3
 800ae9e:	61fb      	str	r3, [r7, #28]
	range_mm += 0x0400;
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aea6:	61fb      	str	r3, [r7, #28]
	range_mm /= 0x0800;
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	da01      	bge.n	800aeb2 <VL53LX_range_maths+0x126>
 800aeae:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800aeb2:	12db      	asrs	r3, r3, #11
 800aeb4:	61fb      	str	r3, [r7, #28]


	if (fractional_bits == 0) {
 800aeb6:	787b      	ldrb	r3, [r7, #1]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d130      	bne.n	800af1e <VL53LX_range_maths+0x192>
		range_mm_10 = range_mm * 10;
 800aebc:	69fa      	ldr	r2, [r7, #28]
 800aebe:	4613      	mov	r3, r2
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	4413      	add	r3, r2
 800aec4:	005b      	lsls	r3, r3, #1
 800aec6:	60fb      	str	r3, [r7, #12]
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	da00      	bge.n	800aed0 <VL53LX_range_maths+0x144>
 800aece:	3303      	adds	r3, #3
 800aed0:	109b      	asrs	r3, r3, #2
 800aed2:	60fb      	str	r3, [r7, #12]
		if ((range_mm_10 % 10) < 5)
 800aed4:	68f9      	ldr	r1, [r7, #12]
 800aed6:	4b19      	ldr	r3, [pc, #100]	; (800af3c <VL53LX_range_maths+0x1b0>)
 800aed8:	fb83 2301 	smull	r2, r3, r3, r1
 800aedc:	109a      	asrs	r2, r3, #2
 800aede:	17cb      	asrs	r3, r1, #31
 800aee0:	1ad2      	subs	r2, r2, r3
 800aee2:	4613      	mov	r3, r2
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	4413      	add	r3, r2
 800aee8:	005b      	lsls	r3, r3, #1
 800aeea:	1aca      	subs	r2, r1, r3
 800aeec:	2a04      	cmp	r2, #4
 800aeee:	dc09      	bgt.n	800af04 <VL53LX_range_maths+0x178>
			range_mm = (int16_t)(range_mm_10 / 10);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	4a12      	ldr	r2, [pc, #72]	; (800af3c <VL53LX_range_maths+0x1b0>)
 800aef4:	fb82 1203 	smull	r1, r2, r2, r3
 800aef8:	1092      	asrs	r2, r2, #2
 800aefa:	17db      	asrs	r3, r3, #31
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	b21b      	sxth	r3, r3
 800af00:	61fb      	str	r3, [r7, #28]
 800af02:	e014      	b.n	800af2e <VL53LX_range_maths+0x1a2>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	4a0d      	ldr	r2, [pc, #52]	; (800af3c <VL53LX_range_maths+0x1b0>)
 800af08:	fb82 1203 	smull	r1, r2, r2, r3
 800af0c:	1092      	asrs	r2, r2, #2
 800af0e:	17db      	asrs	r3, r3, #31
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	b29b      	uxth	r3, r3
 800af14:	3301      	adds	r3, #1
 800af16:	b29b      	uxth	r3, r3
 800af18:	b21b      	sxth	r3, r3
 800af1a:	61fb      	str	r3, [r7, #28]
 800af1c:	e007      	b.n	800af2e <VL53LX_range_maths+0x1a2>
	} else if (fractional_bits == 1)
 800af1e:	787b      	ldrb	r3, [r7, #1]
 800af20:	2b01      	cmp	r3, #1
 800af22:	d104      	bne.n	800af2e <VL53LX_range_maths+0x1a2>
		range_mm = range_mm / (0x01 << 1);
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	0fda      	lsrs	r2, r3, #31
 800af28:	4413      	add	r3, r2
 800af2a:	105b      	asrs	r3, r3, #1
 800af2c:	61fb      	str	r3, [r7, #28]

	return range_mm;
 800af2e:	69fb      	ldr	r3, [r7, #28]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3724      	adds	r7, #36	; 0x24
 800af34:	46bd      	mov	sp, r7
 800af36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af38:	003fffff 	.word	0x003fffff
 800af3c:	66666667 	.word	0x66666667

0800af40 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	4603      	mov	r3, r0
 800af48:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800af4a:	2300      	movs	r3, #0
 800af4c:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800af4e:	79fb      	ldrb	r3, [r7, #7]
 800af50:	3301      	adds	r3, #1
 800af52:	b2db      	uxtb	r3, r3
 800af54:	005b      	lsls	r3, r3, #1
 800af56:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800af58:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr

0800af66 <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800af66:	b480      	push	{r7}
 800af68:	b083      	sub	sp, #12
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53LX_p_015 =
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	781a      	ldrb	r2, [r3, #0]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	7a5a      	ldrb	r2, [r3, #9]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	685a      	ldr	r2, [r3, #4]
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	605a      	str	r2, [r3, #4]
}
 800afd6:	bf00      	nop
 800afd8:	370c      	adds	r7, #12
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr

0800afe2 <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800afe2:	b480      	push	{r7}
 800afe4:	b087      	sub	sp, #28
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	60f8      	str	r0, [r7, #12]
 800afea:	460b      	mov	r3, r1
 800afec:	607a      	str	r2, [r7, #4]
 800afee:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2203      	movs	r2, #3
 800aff8:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2203      	movs	r2, #3
 800affe:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2218      	movs	r2, #24
 800b016:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800b018:	897b      	ldrh	r3, [r7, #10]
 800b01a:	b2da      	uxtb	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53LX_p_005                       = 0;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53LX_p_015                = 0;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53LX_p_028             = 0;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	82fb      	strh	r3, [r7, #22]
 800b0ba:	e009      	b.n	800b0d0 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800b0bc:	8afb      	ldrh	r3, [r7, #22]
 800b0be:	8afa      	ldrh	r2, [r7, #22]
 800b0c0:	b2d1      	uxtb	r1, r2
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	460a      	mov	r2, r1
 800b0c8:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800b0ca:	8afb      	ldrh	r3, [r7, #22]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	82fb      	strh	r3, [r7, #22]
 800b0d0:	8afb      	ldrh	r3, [r7, #22]
 800b0d2:	2b05      	cmp	r3, #5
 800b0d4:	d9f2      	bls.n	800b0bc <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	82fb      	strh	r3, [r7, #22]
 800b0da:	e007      	b.n	800b0ec <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800b0dc:	8afb      	ldrh	r3, [r7, #22]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800b0e6:	8afb      	ldrh	r3, [r7, #22]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	82fb      	strh	r3, [r7, #22]
 800b0ec:	8afb      	ldrh	r3, [r7, #22]
 800b0ee:	2b05      	cmp	r3, #5
 800b0f0:	d9f4      	bls.n	800b0dc <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	82fb      	strh	r3, [r7, #22]
 800b0f6:	e013      	b.n	800b120 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800b0f8:	8afa      	ldrh	r2, [r7, #22]
 800b0fa:	897b      	ldrh	r3, [r7, #10]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d206      	bcs.n	800b10e <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800b100:	8afa      	ldrh	r2, [r7, #22]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	3206      	adds	r2, #6
 800b106:	68f9      	ldr	r1, [r7, #12]
 800b108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b10c:	e005      	b.n	800b11a <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800b10e:	8afa      	ldrh	r2, [r7, #22]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	3206      	adds	r2, #6
 800b114:	2100      	movs	r1, #0
 800b116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800b11a:	8afb      	ldrh	r3, [r7, #22]
 800b11c:	3301      	adds	r3, #1
 800b11e:	82fb      	strh	r3, [r7, #22]
 800b120:	8afb      	ldrh	r3, [r7, #22]
 800b122:	2b17      	cmp	r3, #23
 800b124:	d9e8      	bls.n	800b0f8 <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800b126:	bf00      	nop
 800b128:	bf00      	nop
 800b12a:	371c      	adds	r7, #28
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	4603      	mov	r3, r0
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
 800b140:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800b142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b146:	2b00      	cmp	r3, #0
 800b148:	da10      	bge.n	800b16c <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800b14a:	7bfb      	ldrb	r3, [r7, #15]
 800b14c:	43db      	mvns	r3, r3
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	f003 0307 	and.w	r3, r3, #7
 800b154:	b2db      	uxtb	r3, r3
 800b156:	3308      	adds	r3, #8
 800b158:	b2da      	uxtb	r2, r3
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800b15e:	7bfb      	ldrb	r3, [r7, #15]
 800b160:	3b80      	subs	r3, #128	; 0x80
 800b162:	10db      	asrs	r3, r3, #3
 800b164:	b2da      	uxtb	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800b16a:	e00c      	b.n	800b186 <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800b16c:	7bfb      	ldrb	r3, [r7, #15]
 800b16e:	f003 0307 	and.w	r3, r3, #7
 800b172:	b2da      	uxtb	r2, r3
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800b178:	7bfb      	ldrb	r3, [r7, #15]
 800b17a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800b17e:	10db      	asrs	r3, r3, #3
 800b180:	b2da      	uxtb	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	701a      	strb	r2, [r3, #0]
}
 800b186:	bf00      	nop
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b192:	b480      	push	{r7}
 800b194:	b085      	sub	sp, #20
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800b19a:	2300      	movs	r3, #0
 800b19c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800b19e:	2300      	movs	r3, #0
 800b1a0:	73fb      	strb	r3, [r7, #15]
 800b1a2:	e02c      	b.n	800b1fe <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d009      	beq.n	800b1be <VL53LX_hist_find_min_max_bin_values+0x2c>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b1b0:	7bf9      	ldrb	r1, [r7, #15]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	3106      	adds	r1, #6
 800b1b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	db07      	blt.n	800b1ce <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800b1be:	7bfa      	ldrb	r2, [r7, #15]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	3206      	adds	r2, #6
 800b1c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d009      	beq.n	800b1e8 <VL53LX_hist_find_min_max_bin_values+0x56>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b1da:	7bf9      	ldrb	r1, [r7, #15]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	3106      	adds	r1, #6
 800b1e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	dc07      	bgt.n	800b1f8 <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800b1e8:	7bfa      	ldrb	r2, [r7, #15]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	3206      	adds	r2, #6
 800b1ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800b1f8:	7bfb      	ldrb	r3, [r7, #15]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	73fb      	strb	r3, [r7, #15]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	7a9b      	ldrb	r3, [r3, #10]
 800b202:	7bfa      	ldrb	r2, [r7, #15]
 800b204:	429a      	cmp	r2, r3
 800b206:	d3cd      	bcc.n	800b1a4 <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800b208:	bf00      	nop
 800b20a:	bf00      	nop
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr

0800b216 <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b216:	b480      	push	{r7}
 800b218:	b085      	sub	sp, #20
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800b21e:	2300      	movs	r3, #0
 800b220:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	7adb      	ldrb	r3, [r3, #11]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d03a      	beq.n	800b2a0 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800b23c:	2300      	movs	r3, #0
 800b23e:	73fb      	strb	r3, [r7, #15]
 800b240:	e00e      	b.n	800b260 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800b248:	7bf9      	ldrb	r1, [r7, #15]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	3106      	adds	r1, #6
 800b24e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b252:	441a      	add	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
 800b25c:	3301      	adds	r3, #1
 800b25e:	73fb      	strb	r3, [r7, #15]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	7adb      	ldrb	r3, [r3, #11]
 800b264:	7bfa      	ldrb	r2, [r7, #15]
 800b266:	429a      	cmp	r2, r3
 800b268:	d3eb      	bcc.n	800b242 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	7ad2      	ldrb	r2, [r2, #11]
 800b280:	0852      	lsrs	r2, r2, #1
 800b282:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800b284:	441a      	add	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800b296:	fb93 f2f2 	sdiv	r2, r3, r2
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800b2a0:	bf00      	nop
 800b2a2:	3714      	adds	r7, #20
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800b2ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2b0:	b096      	sub	sp, #88	; 0x58
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6339      	str	r1, [r7, #48]	; 0x30
 800b2b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	86fb      	strh	r3, [r7, #54]	; 0x36



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	uint32_t    pll_period_us       = 0;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t    periods_elapsed     = 0;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint32_t    tmp32               = 0;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	657b      	str	r3, [r7, #84]	; 0x54
	uint64_t    tmp64               = 0;
 800b2d0:	f04f 0200 	mov.w	r2, #0
 800b2d4:	f04f 0300 	mov.w	r3, #0
 800b2d8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint32_t    amb_thres_delta     = 0;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	63bb      	str	r3, [r7, #56]	; 0x38

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800b2e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800b2e6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800b2ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800b2f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800b2f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800b2fe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b300:	2300      	movs	r3, #0
 800b302:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800b304:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b306:	2300      	movs	r3, #0
 800b308:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53LX_p_022            = 0;
 800b30a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b30c:	2300      	movs	r3, #0
 800b30e:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800b310:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b312:	2300      	movs	r3, #0
 800b314:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800b316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b318:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f000 80ab 	beq.w	800b478 <VL53LX_f_001+0x1cc>
		(pbins->total_periods_elapsed      != 0)) {
 800b322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800b328:	2b00      	cmp	r3, #0
 800b32a:	f000 80a5 	beq.w	800b478 <VL53LX_f_001+0x1cc>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800b32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b330:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b334:	4618      	mov	r0, r3
 800b336:	f7ff fa2f 	bl	800a798 <VL53LX_calc_pll_period_us>
 800b33a:	6438      	str	r0, [r7, #64]	; 0x40



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800b33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b342:	3301      	adds	r3, #1
 800b344:	63fb      	str	r3, [r7, #60]	; 0x3c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800b346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b34c:	2110      	movs	r1, #16
 800b34e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b350:	f7ff fa39 	bl	800a7c6 <VL53LX_duration_maths>
 800b354:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800b356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b358:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800b35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4619      	mov	r1, r3
 800b366:	4610      	mov	r0, r2
 800b368:	f7ff fc96 	bl	800ac98 <VL53LX_rate_maths>
 800b36c:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800b36e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b370:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800b372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b374:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800b378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37a:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800b37e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	461a      	mov	r2, r3
 800b384:	f7ff fa79 	bl	800a87a <VL53LX_events_per_spad_maths>
 800b388:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800b38a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b38c:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800b38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b390:	8adb      	ldrh	r3, [r3, #22]
 800b392:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b394:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800b396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b398:	8adb      	ldrh	r3, [r3, #22]
 800b39a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b39c:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800b39e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d068      	beq.n	800b478 <VL53LX_f_001+0x1cc>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800b3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a8:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	f04f 0300 	mov.w	r3, #0
 800b3b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64  *= 1000;
 800b3b4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800b3b8:	4622      	mov	r2, r4
 800b3ba:	462b      	mov	r3, r5
 800b3bc:	f04f 0000 	mov.w	r0, #0
 800b3c0:	f04f 0100 	mov.w	r1, #0
 800b3c4:	0159      	lsls	r1, r3, #5
 800b3c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b3ca:	0150      	lsls	r0, r2, #5
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	1b12      	subs	r2, r2, r4
 800b3d2:	eb63 0305 	sbc.w	r3, r3, r5
 800b3d6:	f04f 0000 	mov.w	r0, #0
 800b3da:	f04f 0100 	mov.w	r1, #0
 800b3de:	0099      	lsls	r1, r3, #2
 800b3e0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800b3e4:	0090      	lsls	r0, r2, #2
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	1912      	adds	r2, r2, r4
 800b3ec:	eb45 0303 	adc.w	r3, r5, r3
 800b3f0:	f04f 0000 	mov.w	r0, #0
 800b3f4:	f04f 0100 	mov.w	r1, #0
 800b3f8:	00d9      	lsls	r1, r3, #3
 800b3fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b3fe:	00d0      	lsls	r0, r2, #3
 800b400:	4602      	mov	r2, r0
 800b402:	460b      	mov	r3, r1
 800b404:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64 <<= (11+1);
 800b408:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b40c:	f04f 0000 	mov.w	r0, #0
 800b410:	f04f 0100 	mov.w	r1, #0
 800b414:	0319      	lsls	r1, r3, #12
 800b416:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800b41a:	0310      	lsls	r0, r2, #12
 800b41c:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
			tmp32 = pdata->VL53LX_p_033/2;
 800b420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b422:	695b      	ldr	r3, [r3, #20]
 800b424:	085b      	lsrs	r3, r3, #1
 800b426:	657b      	str	r3, [r7, #84]	; 0x54
			tmp64 += (uint64_t)tmp32;
 800b428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b42a:	4618      	mov	r0, r3
 800b42c:	f04f 0100 	mov.w	r1, #0
 800b430:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b434:	eb12 0800 	adds.w	r8, r2, r0
 800b438:	eb43 0901 	adc.w	r9, r3, r1
 800b43c:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
			tmp64 = do_division_u(tmp64,
 800b440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b442:	695b      	ldr	r3, [r3, #20]
 800b444:	461a      	mov	r2, r3
 800b446:	f04f 0300 	mov.w	r3, #0
 800b44a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b44e:	f7f4 ff5f 	bl	8000310 <__aeabi_uldivmod>
 800b452:	4602      	mov	r2, r0
 800b454:	460b      	mov	r3, r1
 800b456:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800b45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45c:	8adb      	ldrh	r3, [r3, #22]
 800b45e:	b298      	uxth	r0, r3
 800b460:	f04f 0100 	mov.w	r1, #0
 800b464:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b468:	428b      	cmp	r3, r1
 800b46a:	bf08      	it	eq
 800b46c:	4282      	cmpeq	r2, r0
 800b46e:	d203      	bcs.n	800b478 <VL53LX_f_001+0x1cc>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800b470:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b474:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b476:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800b478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47a:	881b      	ldrh	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f000 8203 	beq.w	800b888 <VL53LX_f_001+0x5dc>
		(pbins->VL53LX_p_015        != 0) &&
 800b482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b484:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f000 81fd 	beq.w	800b888 <VL53LX_f_001+0x5dc>
		(pcal->ref_reflectance_pc          != 0) &&
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800b492:	2b00      	cmp	r3, #0
 800b494:	f000 81f8 	beq.w	800b888 <VL53LX_f_001+0x5dc>
		(pbins->total_periods_elapsed      != 0)) {
 800b498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f000 81f2 	beq.w	800b888 <VL53LX_f_001+0x5dc>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a6:	885b      	ldrh	r3, [r3, #2]
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	f04f 0300 	mov.w	r3, #0
 800b4ae:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64 *= (1000 * 256);
 800b4b2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	462b      	mov	r3, r5
 800b4ba:	f04f 0000 	mov.w	r0, #0
 800b4be:	f04f 0100 	mov.w	r1, #0
 800b4c2:	0159      	lsls	r1, r3, #5
 800b4c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b4c8:	0150      	lsls	r0, r2, #5
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	1b12      	subs	r2, r2, r4
 800b4d0:	eb63 0305 	sbc.w	r3, r3, r5
 800b4d4:	f04f 0000 	mov.w	r0, #0
 800b4d8:	f04f 0100 	mov.w	r1, #0
 800b4dc:	0099      	lsls	r1, r3, #2
 800b4de:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800b4e2:	0090      	lsls	r0, r2, #2
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	1912      	adds	r2, r2, r4
 800b4ea:	eb45 0303 	adc.w	r3, r5, r3
 800b4ee:	f04f 0000 	mov.w	r0, #0
 800b4f2:	f04f 0100 	mov.w	r1, #0
 800b4f6:	02d9      	lsls	r1, r3, #11
 800b4f8:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800b4fc:	02d0      	lsls	r0, r2, #11
 800b4fe:	4602      	mov	r2, r0
 800b500:	460b      	mov	r3, r1
 800b502:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp32  = pcal->ref__actual_effective_spads/2;
 800b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b508:	881b      	ldrh	r3, [r3, #0]
 800b50a:	085b      	lsrs	r3, r3, #1
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	657b      	str	r3, [r7, #84]	; 0x54
		tmp64 += (uint64_t)tmp32;
 800b510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b512:	4618      	mov	r0, r3
 800b514:	f04f 0100 	mov.w	r1, #0
 800b518:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b51c:	eb12 0a00 	adds.w	sl, r2, r0
 800b520:	eb43 0b01 	adc.w	fp, r3, r1
 800b524:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800b528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52a:	881b      	ldrh	r3, [r3, #0]
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	f04f 0300 	mov.w	r3, #0
 800b532:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b536:	f7f4 feeb 	bl	8000310 <__aeabi_uldivmod>
 800b53a:	4602      	mov	r2, r0
 800b53c:	460b      	mov	r3, r1
 800b53e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800b542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b546:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800b548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	011a      	lsls	r2, r3, #4
 800b54e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b550:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800b552:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	461a      	mov	r2, r3
 800b558:	f04f 0300 	mov.w	r3, #0
 800b55c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800b560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b562:	695b      	ldr	r3, [r3, #20]
 800b564:	461a      	mov	r2, r3
 800b566:	f04f 0300 	mov.w	r3, #0
 800b56a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b56c:	fb02 f001 	mul.w	r0, r2, r1
 800b570:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b572:	fb03 f101 	mul.w	r1, r3, r1
 800b576:	4401      	add	r1, r0
 800b578:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b57a:	fba0 2302 	umull	r2, r3, r0, r2
 800b57e:	4419      	add	r1, r3
 800b580:	460b      	mov	r3, r1
 800b582:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800b586:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800b58a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b58c:	8b5b      	ldrh	r3, [r3, #26]
 800b58e:	b29a      	uxth	r2, r3
 800b590:	f04f 0300 	mov.w	r3, #0
 800b594:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b596:	fb02 f001 	mul.w	r0, r2, r1
 800b59a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b59c:	fb03 f101 	mul.w	r1, r3, r1
 800b5a0:	4401      	add	r1, r0
 800b5a2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b5a4:	fba0 2302 	umull	r2, r3, r0, r2
 800b5a8:	4419      	add	r1, r3
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800b5b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800b5b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b5b8:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800b5bc:	6239      	str	r1, [r7, #32]
 800b5be:	f143 0300 	adc.w	r3, r3, #0
 800b5c2:	627b      	str	r3, [r7, #36]	; 0x24
 800b5c4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b5c8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800b5cc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b5d0:	f04f 0200 	mov.w	r2, #0
 800b5d4:	f04f 0300 	mov.w	r3, #0
 800b5d8:	0cc2      	lsrs	r2, r0, #19
 800b5da:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800b5de:	0ccb      	lsrs	r3, r1, #19
 800b5e0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  +=  500;
 800b5e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b5e8:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800b5ec:	61b9      	str	r1, [r7, #24]
 800b5ee:	f143 0300 	adc.w	r3, r3, #0
 800b5f2:	61fb      	str	r3, [r7, #28]
 800b5f4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b5f8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64   = do_division_u(tmp64, 1000);
 800b5fc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b604:	f04f 0300 	mov.w	r3, #0
 800b608:	f7f4 fe82 	bl	8000310 <__aeabi_uldivmod>
 800b60c:	4602      	mov	r2, r0
 800b60e:	460b      	mov	r3, r1
 800b610:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800b614:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b618:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800b61c:	f04f 0100 	mov.w	r1, #0
 800b620:	4299      	cmp	r1, r3
 800b622:	bf08      	it	eq
 800b624:	4290      	cmpeq	r0, r2
 800b626:	d205      	bcs.n	800b634 <VL53LX_f_001+0x388>
			tmp64 = 0x00FFFFFF;
 800b628:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800b62c:	f04f 0300 	mov.w	r3, #0
 800b630:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800b634:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b638:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800b63a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	461a      	mov	r2, r3
 800b640:	f04f 0300 	mov.w	r3, #0
 800b644:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800b648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	461a      	mov	r2, r3
 800b64e:	f04f 0300 	mov.w	r3, #0
 800b652:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b654:	fb02 f001 	mul.w	r0, r2, r1
 800b658:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b65a:	fb03 f101 	mul.w	r1, r3, r1
 800b65e:	4401      	add	r1, r0
 800b660:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b662:	fba0 2302 	umull	r2, r3, r0, r2
 800b666:	4419      	add	r1, r3
 800b668:	460b      	mov	r3, r1
 800b66a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800b66e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800b672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b674:	8b5b      	ldrh	r3, [r3, #26]
 800b676:	b29a      	uxth	r2, r3
 800b678:	f04f 0300 	mov.w	r3, #0
 800b67c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b67e:	fb02 f001 	mul.w	r0, r2, r1
 800b682:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b684:	fb03 f101 	mul.w	r1, r3, r1
 800b688:	4401      	add	r1, r0
 800b68a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b68c:	fba0 2302 	umull	r2, r3, r0, r2
 800b690:	4419      	add	r1, r3
 800b692:	460b      	mov	r3, r1
 800b694:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800b698:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800b69c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b6a0:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800b6a4:	6139      	str	r1, [r7, #16]
 800b6a6:	f143 0300 	adc.w	r3, r3, #0
 800b6aa:	617b      	str	r3, [r7, #20]
 800b6ac:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b6b0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800b6b4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b6b8:	f04f 0200 	mov.w	r2, #0
 800b6bc:	f04f 0300 	mov.w	r3, #0
 800b6c0:	0cc2      	lsrs	r2, r0, #19
 800b6c2:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800b6c6:	0ccb      	lsrs	r3, r1, #19
 800b6c8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48



		tmp64  *= ((uint64_t)target_reflectance *
 800b6cc:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 800b6ce:	f04f 0100 	mov.w	r1, #0
				   (uint64_t)pcal->coverglass_transmission);
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d4:	891b      	ldrh	r3, [r3, #8]
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	f04f 0300 	mov.w	r3, #0
		tmp64  *= ((uint64_t)target_reflectance *
 800b6dc:	fb02 f501 	mul.w	r5, r2, r1
 800b6e0:	fb00 f403 	mul.w	r4, r0, r3
 800b6e4:	442c      	add	r4, r5
 800b6e6:	fba0 2302 	umull	r2, r3, r0, r2
 800b6ea:	18e1      	adds	r1, r4, r3
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b6f0:	fb02 f001 	mul.w	r0, r2, r1
 800b6f4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b6f6:	fb03 f101 	mul.w	r1, r3, r1
 800b6fa:	4401      	add	r1, r0
 800b6fc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b6fe:	fba0 2302 	umull	r2, r3, r0, r2
 800b702:	4419      	add	r1, r3
 800b704:	460b      	mov	r3, r1
 800b706:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800b70a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	88db      	ldrh	r3, [r3, #6]
 800b712:	b298      	uxth	r0, r3
 800b714:	f04f 0100 	mov.w	r1, #0
 800b718:	f04f 0200 	mov.w	r2, #0
 800b71c:	f04f 0300 	mov.w	r3, #0
 800b720:	01cb      	lsls	r3, r1, #7
 800b722:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 800b726:	01c2      	lsls	r2, r0, #7
 800b728:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b72c:	1884      	adds	r4, r0, r2
 800b72e:	60bc      	str	r4, [r7, #8]
 800b730:	eb41 0303 	adc.w	r3, r1, r3
 800b734:	60fb      	str	r3, [r7, #12]
 800b736:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800b73a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b740:	88db      	ldrh	r3, [r3, #6]
 800b742:	b298      	uxth	r0, r3
 800b744:	f04f 0100 	mov.w	r1, #0
 800b748:	f04f 0200 	mov.w	r2, #0
 800b74c:	f04f 0300 	mov.w	r3, #0
 800b750:	020b      	lsls	r3, r1, #8
 800b752:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b756:	0202      	lsls	r2, r0, #8
 800b758:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b75c:	f7f4 fdd8 	bl	8000310 <__aeabi_uldivmod>
 800b760:	4602      	mov	r2, r0
 800b762:	460b      	mov	r3, r1
 800b764:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800b768:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b76c:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800b770:	6039      	str	r1, [r7, #0]
 800b772:	f143 0300 	adc.w	r3, r3, #0
 800b776:	607b      	str	r3, [r7, #4]
 800b778:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b77c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64, 1000);
 800b780:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b784:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b788:	f04f 0300 	mov.w	r3, #0
 800b78c:	f7f4 fdc0 	bl	8000310 <__aeabi_uldivmod>
 800b790:	4602      	mov	r2, r0
 800b792:	460b      	mov	r3, r1
 800b794:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800b798:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b79c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800b7a0:	f04f 0100 	mov.w	r1, #0
 800b7a4:	4299      	cmp	r1, r3
 800b7a6:	bf08      	it	eq
 800b7a8:	4290      	cmpeq	r0, r2
 800b7aa:	d205      	bcs.n	800b7b8 <VL53LX_f_001+0x50c>
			tmp64 = 0x00FFFFFF;
 800b7ac:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800b7b0:	f04f 0300 	mov.w	r3, #0
 800b7b4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800b7b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7bc:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800b7be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7c0:	69db      	ldr	r3, [r3, #28]
 800b7c2:	021b      	lsls	r3, r3, #8
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7ff f8e1 	bl	800a98c <VL53LX_isqrt>
 800b7ca:	6578      	str	r0, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ce:	785b      	ldrb	r3, [r3, #1]
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7d4:	fb02 f303 	mul.w	r3, r2, r3
 800b7d8:	657b      	str	r3, [r7, #84]	; 0x54



		if (pdata->VL53LX_p_028 <
 800b7da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7dc:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800b7de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7e0:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d20f      	bcs.n	800b806 <VL53LX_f_001+0x55a>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800b7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800b7ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7ee:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800b7f0:	1ad3      	subs	r3, r2, r3
 800b7f2:	63bb      	str	r3, [r7, #56]	; 0x38


			amb_thres_delta <<= 8;
 800b7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f6:	021b      	lsls	r3, r3, #8
 800b7f8:	63bb      	str	r3, [r7, #56]	; 0x38

			if (tmp32 < amb_thres_delta)
 800b7fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d201      	bcs.n	800b806 <VL53LX_f_001+0x55a>
				tmp32 = amb_thres_delta;
 800b802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b804:	657b      	str	r3, [r7, #84]	; 0x54
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800b806:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b808:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800b80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80c:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800b80e:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800b810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b812:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800b814:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b816:	f000 f83e 	bl	800b896 <VL53LX_f_002>
 800b81a:	4603      	mov	r3, r0
 800b81c:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800b81e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b820:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800b822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b824:	6a1b      	ldr	r3, [r3, #32]
 800b826:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800b828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800b82e:	461a      	mov	r2, r3
 800b830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b832:	fb02 f303 	mul.w	r3, r2, r3
 800b836:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 += (1 << 3);
 800b838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b83a:	3308      	adds	r3, #8
 800b83c:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 /= (1 << 4);
 800b83e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b840:	091b      	lsrs	r3, r3, #4
 800b842:	657b      	str	r3, [r7, #84]	; 0x54

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800b844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b846:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800b848:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800b84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84c:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800b84e:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800b850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b852:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800b854:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b856:	f000 f81e 	bl	800b896 <VL53LX_f_002>
 800b85a:	4603      	mov	r3, r0
 800b85c:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800b85e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b860:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800b862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b864:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800b868:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b86a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800b86e:	429a      	cmp	r2, r3
 800b870:	da05      	bge.n	800b87e <VL53LX_f_001+0x5d2>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800b872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b874:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800b878:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b87a:	801a      	strh	r2, [r3, #0]
 800b87c:	e004      	b.n	800b888 <VL53LX_f_001+0x5dc>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800b87e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b880:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800b884:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b886:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800b888:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47

}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3758      	adds	r7, #88	; 0x58
 800b890:	46bd      	mov	sp, r7
 800b892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b896 <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b086      	sub	sp, #24
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	60f8      	str	r0, [r7, #12]
 800b89e:	60b9      	str	r1, [r7, #8]
 800b8a0:	607a      	str	r2, [r7, #4]
 800b8a2:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	fb03 f303 	mul.w	r3, r3, r3
 800b8b8:	693a      	ldr	r2, [r7, #16]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800b8be:	6938      	ldr	r0, [r7, #16]
 800b8c0:	f7ff f864 	bl	800a98c <VL53LX_isqrt>
 800b8c4:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800b8c6:	693a      	ldr	r2, [r7, #16]
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	011b      	lsls	r3, r3, #4
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7ff f85a 	bl	800a98c <VL53LX_isqrt>
 800b8d8:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	fb02 f303 	mul.w	r3, r2, r3
 800b8e2:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d009      	beq.n	800b8fe <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	005b      	lsls	r3, r3, #1
 800b8f6:	697a      	ldr	r2, [r7, #20]
 800b8f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8fc:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800b8fe:	697b      	ldr	r3, [r7, #20]

}
 800b900:	4618      	mov	r0, r3
 800b902:	3718      	adds	r7, #24
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800b910:	2300      	movs	r3, #0
 800b912:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2218      	movs	r2, #24
 800b918:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	73fb      	strb	r3, [r7, #15]
 800b93e:	e01f      	b.n	800b980 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800b940:	7bfb      	ldrb	r3, [r7, #15]
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	4413      	add	r3, r2
 800b946:	2200      	movs	r2, #0
 800b948:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800b94a:	7bfb      	ldrb	r3, [r7, #15]
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	4413      	add	r3, r2
 800b950:	2200      	movs	r2, #0
 800b952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800b956:	7bfb      	ldrb	r3, [r7, #15]
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	4413      	add	r3, r2
 800b95c:	2200      	movs	r2, #0
 800b95e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800b962:	7bfa      	ldrb	r2, [r7, #15]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	322e      	adds	r2, #46	; 0x2e
 800b968:	2100      	movs	r1, #0
 800b96a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800b96e:	7bfa      	ldrb	r2, [r7, #15]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	3246      	adds	r2, #70	; 0x46
 800b974:	2100      	movs	r1, #0
 800b976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
 800b97c:	3301      	adds	r3, #1
 800b97e:	73fb      	strb	r3, [r7, #15]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	785b      	ldrb	r3, [r3, #1]
 800b984:	7bfa      	ldrb	r2, [r7, #15]
 800b986:	429a      	cmp	r2, r3
 800b988:	d3da      	bcc.n	800b940 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2208      	movs	r2, #8
 800b996:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53LX_p_046             = 0;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	2118      	movs	r1, #24
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	f7ff fb18 	bl	800afe2 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	2118      	movs	r1, #24
 800b9bc:	2000      	movs	r0, #0
 800b9be:	f7ff fb10 	bl	800afe2 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	2118      	movs	r1, #24
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	f7ff fb08 	bl	800afe2 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800b9d8:	461a      	mov	r2, r3
 800b9da:	2118      	movs	r1, #24
 800b9dc:	2000      	movs	r0, #0
 800b9de:	f7ff fb00 	bl	800afe2 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	2118      	movs	r1, #24
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	f7ff faf8 	bl	800afe2 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800b9f2:	bf00      	nop
 800b9f4:	3710      	adds	r7, #16
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800b9fa:	b5b0      	push	{r4, r5, r7, lr}
 800b9fc:	b08c      	sub	sp, #48	; 0x30
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
 800ba04:	461a      	mov	r2, r3
 800ba06:	4603      	mov	r3, r0
 800ba08:	81fb      	strh	r3, [r7, #14]
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	737b      	strb	r3, [r7, #13]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  lb            = 0;
 800ba14:	2300      	movs	r3, #0
 800ba16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t  VL53LX_p_001            = 0;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int64_t  tmp          = 0;
 800ba20:	f04f 0200 	mov.w	r2, #0
 800ba24:	f04f 0300 	mov.w	r3, #0
 800ba28:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int32_t  amb_events   = 0;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	617b      	str	r3, [r7, #20]
	int32_t  VL53LX_p_018       = 0;
 800ba30:	2300      	movs	r3, #0
 800ba32:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  samples      = 0;
 800ba34:	2300      	movs	r3, #0
 800ba36:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800ba38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba3a:	7a5a      	ldrb	r2, [r3, #9]
 800ba3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba3e:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800ba40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba42:	7a1a      	ldrb	r2, [r3, #8]
 800ba44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba46:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800ba48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba4a:	7a9a      	ldrb	r2, [r3, #10]
 800ba4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba4e:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800ba50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba52:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800ba56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba58:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800ba5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba5c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7ff fa6d 	bl	800af40 <VL53LX_decode_vcsel_period>
 800ba66:	4603      	mov	r3, r0
 800ba68:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800ba6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba6c:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800ba6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ba74:	461a      	mov	r2, r3
 800ba76:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ba7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800ba7e:	89fa      	ldrh	r2, [r7, #14]
 800ba80:	f04f 0300 	mov.w	r3, #0
 800ba84:	69f9      	ldr	r1, [r7, #28]
 800ba86:	fb02 f001 	mul.w	r0, r2, r1
 800ba8a:	69b9      	ldr	r1, [r7, #24]
 800ba8c:	fb03 f101 	mul.w	r1, r3, r1
 800ba90:	4401      	add	r1, r0
 800ba92:	69b8      	ldr	r0, [r7, #24]
 800ba94:	fba0 2302 	umull	r2, r3, r0, r2
 800ba98:	4419      	add	r1, r3
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800baa0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp += 2048;
 800baa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800baa8:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800baac:	f143 0500 	adc.w	r5, r3, #0
 800bab0:	e9c7 4506 	strd	r4, r5, [r7, #24]
	tmp = do_division_s(tmp, 4096);
 800bab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bab8:	2a00      	cmp	r2, #0
 800baba:	f173 0100 	sbcs.w	r1, r3, #0
 800babe:	da06      	bge.n	800bace <VL53LX_f_006+0xd4>
 800bac0:	f640 70ff 	movw	r0, #4095	; 0xfff
 800bac4:	f04f 0100 	mov.w	r1, #0
 800bac8:	1812      	adds	r2, r2, r0
 800baca:	eb41 0303 	adc.w	r3, r1, r3
 800bace:	f04f 0000 	mov.w	r0, #0
 800bad2:	f04f 0100 	mov.w	r1, #0
 800bad6:	0b10      	lsrs	r0, r2, #12
 800bad8:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800badc:	1319      	asrs	r1, r3, #12
 800bade:	e9c7 0106 	strd	r0, r1, [r7, #24]
	amb_events = (int32_t)tmp;
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	617b      	str	r3, [r7, #20]



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800bae6:	2300      	movs	r3, #0
 800bae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800baec:	e062      	b.n	800bbb4 <VL53LX_f_006+0x1ba>

		VL53LX_p_001 = lb >> 2;
 800baee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800baf2:	089b      	lsrs	r3, r3, #2
 800baf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800baf8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bafc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bafe:	4413      	add	r3, r2
 800bb00:	7c9b      	ldrb	r3, [r3, #18]
 800bb02:	613b      	str	r3, [r7, #16]

		if (samples > 0) {
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	dd4f      	ble.n	800bbaa <VL53LX_f_006+0x1b0>

			if (lb < pxtalk->VL53LX_p_021 &&
 800bb0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb0c:	7a9b      	ldrb	r3, [r3, #10]
 800bb0e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d20f      	bcs.n	800bb36 <VL53LX_f_006+0x13c>
 800bb16:	7b7b      	ldrb	r3, [r7, #13]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00c      	beq.n	800bb36 <VL53LX_f_006+0x13c>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800bb1c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bb20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb22:	3206      	adds	r2, #6
 800bb24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	441a      	add	r2, r3
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	fb02 f303 	mul.w	r3, r2, r3
 800bb32:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb34:	e004      	b.n	800bb40 <VL53LX_f_006+0x146>
			else
				VL53LX_p_018 = samples *  amb_events;
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	697a      	ldr	r2, [r7, #20]
 800bb3a:	fb02 f303 	mul.w	r3, r2, r3
 800bb3e:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800bb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fe ff22 	bl	800a98c <VL53LX_isqrt>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018 += (samples/2);
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	0fda      	lsrs	r2, r3, #31
 800bb50:	4413      	add	r3, r2
 800bb52:	105b      	asrs	r3, r3, #1
 800bb54:	461a      	mov	r2, r3
 800bb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb58:	4413      	add	r3, r2
 800bb5a:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= samples;
 800bb5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	fb92 f3f3 	sdiv	r3, r2, r3
 800bb64:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 *= ambient_threshold_sigma;
 800bb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb68:	68ba      	ldr	r2, [r7, #8]
 800bb6a:	fb02 f303 	mul.w	r3, r2, r3
 800bb6e:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += 8;
 800bb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb72:	3308      	adds	r3, #8
 800bb74:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= 16;
 800bb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	da00      	bge.n	800bb7e <VL53LX_f_006+0x184>
 800bb7c:	330f      	adds	r3, #15
 800bb7e:	111b      	asrs	r3, r3, #4
 800bb80:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += amb_events;
 800bb82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	4413      	add	r3, r2
 800bb88:	62bb      	str	r3, [r7, #40]	; 0x28

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800bb8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	da01      	bge.n	800bb96 <VL53LX_f_006+0x19c>
				VL53LX_p_018 = min_ambient_threshold_events;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	62bb      	str	r3, [r7, #40]	; 0x28

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800bb96:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bb9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb9c:	3216      	adds	r2, #22
 800bb9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800bba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bba8:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800bbaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbae:	3301      	adds	r3, #1
 800bbb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bbb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbb6:	7a9b      	ldrb	r3, [r3, #10]
 800bbb8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d396      	bcc.n	800baee <VL53LX_f_006+0xf4>

	}



	palgo->VL53LX_p_039 = 0;
 800bbc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800bbc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbc8:	7a1b      	ldrb	r3, [r3, #8]
 800bbca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bbce:	e033      	b.n	800bc38 <VL53LX_f_006+0x23e>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800bbd0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bbd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbd6:	3206      	adds	r2, #6
 800bbd8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bbdc:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800bbe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbe2:	3116      	adds	r1, #22
 800bbe4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	dd13      	ble.n	800bc14 <VL53LX_f_006+0x21a>
			palgo->VL53LX_p_040[lb]      = 1;
 800bbec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbf2:	4413      	add	r3, r2
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800bbf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbfe:	4413      	add	r3, r2
 800bc00:	2201      	movs	r2, #1
 800bc02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53LX_p_039++;
 800bc06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc08:	791b      	ldrb	r3, [r3, #4]
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	b2da      	uxtb	r2, r3
 800bc0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc10:	711a      	strb	r2, [r3, #4]
 800bc12:	e00c      	b.n	800bc2e <VL53LX_f_006+0x234>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800bc14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc1a:	4413      	add	r3, r2
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800bc20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc26:	4413      	add	r3, r2
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800bc2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc32:	3301      	adds	r3, #1
 800bc34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bc38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc3a:	7a9b      	ldrb	r3, [r3, #10]
 800bc3c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d3c5      	bcc.n	800bbd0 <VL53LX_f_006+0x1d6>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800bc44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3730      	adds	r7, #48	; 0x30
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bdb0      	pop	{r4, r5, r7, pc}

0800bc50 <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800bc60:	2300      	movs	r3, #0
 800bc62:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800bc64:	2300      	movs	r3, #0
 800bc66:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800bc70:	2300      	movs	r3, #0
 800bc72:	73fb      	strb	r3, [r7, #15]
 800bc74:	e02d      	b.n	800bcd2 <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800bc76:	7bfb      	ldrb	r3, [r7, #15]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	78d2      	ldrb	r2, [r2, #3]
 800bc7e:	fb93 f1f2 	sdiv	r1, r3, r2
 800bc82:	fb02 f201 	mul.w	r2, r2, r1
 800bc86:	1a9b      	subs	r3, r3, r2
 800bc88:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	789b      	ldrb	r3, [r3, #2]
 800bc8e:	7bfa      	ldrb	r2, [r7, #15]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d21b      	bcs.n	800bccc <VL53LX_f_007+0x7c>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	789b      	ldrb	r3, [r3, #2]
 800bc98:	7b3a      	ldrb	r2, [r7, #12]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d216      	bcs.n	800bccc <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800bc9e:	7bfb      	ldrb	r3, [r7, #15]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	4413      	add	r3, r2
 800bca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d10f      	bne.n	800bccc <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800bcac:	7b3b      	ldrb	r3, [r7, #12]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d108      	bne.n	800bccc <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800bcba:	7bbb      	ldrb	r3, [r7, #14]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d105      	bne.n	800bccc <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	7bfa      	ldrb	r2, [r7, #15]
 800bcc4:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	73fb      	strb	r3, [r7, #15]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	78db      	ldrb	r3, [r3, #3]
 800bcd6:	7bfa      	ldrb	r2, [r7, #15]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d3cc      	bcc.n	800bc76 <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800bcdc:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800bd00:	2300      	movs	r3, #0
 800bd02:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800bd0a:	73fb      	strb	r3, [r7, #15]
 800bd0c:	e05a      	b.n	800bdc4 <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	78da      	ldrb	r2, [r3, #3]
 800bd12:	7bfb      	ldrb	r3, [r7, #15]
 800bd14:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd18:	fb02 f201 	mul.w	r2, r2, r1
 800bd1c:	1a9b      	subs	r3, r3, r2
 800bd1e:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800bd20:	7bfb      	ldrb	r3, [r7, #15]
 800bd22:	3301      	adds	r3, #1
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	78d2      	ldrb	r2, [r2, #3]
 800bd28:	fb93 f1f2 	sdiv	r1, r3, r2
 800bd2c:	fb02 f201 	mul.w	r2, r2, r1
 800bd30:	1a9b      	subs	r3, r3, r2
 800bd32:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	789b      	ldrb	r3, [r3, #2]
 800bd38:	7b7a      	ldrb	r2, [r7, #13]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d23f      	bcs.n	800bdbe <VL53LX_f_008+0xd2>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	789b      	ldrb	r3, [r3, #2]
 800bd42:	7b3a      	ldrb	r2, [r7, #12]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d23a      	bcs.n	800bdbe <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800bd48:	7b7b      	ldrb	r3, [r7, #13]
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d10e      	bne.n	800bd74 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800bd56:	7b3b      	ldrb	r3, [r7, #12]
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d107      	bne.n	800bd74 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	b2da      	uxtb	r2, r3
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d905      	bls.n	800bd90 <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800bd90:	7b7b      	ldrb	r3, [r7, #13]
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	4413      	add	r3, r2
 800bd96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d009      	beq.n	800bdb2 <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800bd9e:	7b7b      	ldrb	r3, [r7, #13]
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	4413      	add	r3, r2
 800bdaa:	460a      	mov	r2, r1
 800bdac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bdb0:	e005      	b.n	800bdbe <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800bdb2:	7b7b      	ldrb	r3, [r7, #13]
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800bdbe:	7bfb      	ldrb	r3, [r7, #15]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800bdc4:	7bfa      	ldrb	r2, [r7, #15]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800bdcc:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800bdd2:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	db9a      	blt.n	800bd0e <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800bdd8:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3714      	adds	r7, #20
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b087      	sub	sp, #28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800be00:	2300      	movs	r3, #0
 800be02:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800be04:	2300      	movs	r3, #0
 800be06:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	78db      	ldrb	r3, [r3, #3]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800be10:	7cbb      	ldrb	r3, [r7, #18]
 800be12:	085b      	lsrs	r3, r3, #1
 800be14:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800be1c:	75fb      	strb	r3, [r7, #23]
 800be1e:	e0a2      	b.n	800bf66 <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	78da      	ldrb	r2, [r3, #3]
 800be24:	7dfb      	ldrb	r3, [r7, #23]
 800be26:	fbb3 f1f2 	udiv	r1, r3, r2
 800be2a:	fb02 f201 	mul.w	r2, r2, r1
 800be2e:	1a9b      	subs	r3, r3, r2
 800be30:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800be32:	7dfb      	ldrb	r3, [r7, #23]
 800be34:	3301      	adds	r3, #1
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	78d2      	ldrb	r2, [r2, #3]
 800be3a:	fb93 f1f2 	sdiv	r1, r3, r2
 800be3e:	fb02 f201 	mul.w	r2, r2, r1
 800be42:	1a9b      	subs	r3, r3, r2
 800be44:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	789b      	ldrb	r3, [r3, #2]
 800be4a:	7d7a      	ldrb	r2, [r7, #21]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	f080 8087 	bcs.w	800bf60 <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800be56:	7d3a      	ldrb	r2, [r7, #20]
 800be58:	429a      	cmp	r2, r3
 800be5a:	f080 8081 	bcs.w	800bf60 <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800be5e:	7d7b      	ldrb	r3, [r7, #21]
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	4413      	add	r3, r2
 800be64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d12f      	bne.n	800becc <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800be6c:	7d3b      	ldrb	r3, [r7, #20]
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	4413      	add	r3, r2
 800be72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800be76:	2b00      	cmp	r3, #0
 800be78:	d028      	beq.n	800becc <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800be7a:	7d3b      	ldrb	r3, [r7, #20]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	4413      	add	r3, r2
 800be80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be84:	3b01      	subs	r3, #1
 800be86:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800be8e:	7cfa      	ldrb	r2, [r7, #19]
 800be90:	429a      	cmp	r2, r3
 800be92:	d21b      	bcs.n	800becc <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800be94:	7cfa      	ldrb	r2, [r7, #19]
 800be96:	4613      	mov	r3, r2
 800be98:	00db      	lsls	r3, r3, #3
 800be9a:	4413      	add	r3, r2
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	4413      	add	r3, r2
 800bea6:	3304      	adds	r3, #4
 800bea8:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	7dfa      	ldrb	r2, [r7, #23]
 800beae:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800beb0:	7dfb      	ldrb	r3, [r7, #23]
 800beb2:	3301      	adds	r3, #1
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	22ff      	movs	r2, #255	; 0xff
 800bebe:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2200      	movs	r2, #0
 800bec4:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800becc:	7d7b      	ldrb	r3, [r7, #21]
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	4413      	add	r3, r2
 800bed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d042      	beq.n	800bf60 <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800beda:	7d3b      	ldrb	r3, [r7, #20]
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	4413      	add	r3, r2
 800bee0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d13b      	bne.n	800bf60 <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800bee8:	7d7b      	ldrb	r3, [r7, #21]
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	4413      	add	r3, r2
 800beee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bef2:	3b01      	subs	r3, #1
 800bef4:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800befc:	7cfa      	ldrb	r2, [r7, #19]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d22e      	bcs.n	800bf60 <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800bf02:	7cfa      	ldrb	r2, [r7, #19]
 800bf04:	4613      	mov	r3, r2
 800bf06:	00db      	lsls	r3, r3, #3
 800bf08:	4413      	add	r3, r2
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	4413      	add	r3, r2
 800bf14:	3304      	adds	r3, #4
 800bf16:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	7dfa      	ldrb	r2, [r7, #23]
 800bf1c:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800bf1e:	7dfb      	ldrb	r3, [r7, #23]
 800bf20:	3301      	adds	r3, #1
 800bf22:	b2da      	uxtb	r2, r3
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800bf30:	1ad3      	subs	r3, r2, r3
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	3301      	adds	r3, #1
 800bf36:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	3301      	adds	r3, #1
 800bf4a:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	799b      	ldrb	r3, [r3, #6]
 800bf54:	7cba      	ldrb	r2, [r7, #18]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d202      	bcs.n	800bf60 <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	7cba      	ldrb	r2, [r7, #18]
 800bf5e:	719a      	strb	r2, [r3, #6]
		blb++) {
 800bf60:	7dfb      	ldrb	r3, [r7, #23]
 800bf62:	3301      	adds	r3, #1
 800bf64:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800bf66:	7dfa      	ldrb	r2, [r7, #23]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800bf6e:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800bf74:	440b      	add	r3, r1
	for (blb = palgo->VL53LX_p_044;
 800bf76:	429a      	cmp	r2, r3
 800bf78:	f6ff af52 	blt.w	800be20 <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800bf7c:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800bf80:	4618      	mov	r0, r3
 800bf82:	371c      	adds	r7, #28
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b090      	sub	sp, #64	; 0x40
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	4603      	mov	r3, r0
 800bf94:	6039      	str	r1, [r7, #0]
 800bf96:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800bf9e:	f107 030c 	add.w	r3, r7, #12
 800bfa2:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d965      	bls.n	800c086 <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800bfba:	e05f      	b.n	800c07c <VL53LX_f_016+0xf0>

		swapped = 0;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800bfc8:	e051      	b.n	800c06e <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800bfca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bfce:	1e5a      	subs	r2, r3, #1
 800bfd0:	4613      	mov	r3, r2
 800bfd2:	00db      	lsls	r3, r3, #3
 800bfd4:	4413      	add	r3, r2
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	4413      	add	r3, r2
 800bfe0:	3304      	adds	r3, #4
 800bfe2:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800bfe4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800bfe8:	4613      	mov	r3, r2
 800bfea:	00db      	lsls	r3, r3, #3
 800bfec:	4413      	add	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800bff4:	683a      	ldr	r2, [r7, #0]
 800bff6:	4413      	add	r3, r2
 800bff8:	3304      	adds	r3, #4
 800bffa:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 800bffc:	79fb      	ldrb	r3, [r7, #7]
 800bffe:	2b02      	cmp	r3, #2
 800c000:	d118      	bne.n	800c034 <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800c002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c004:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800c00a:	429a      	cmp	r2, r3
 800c00c:	da2a      	bge.n	800c064 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800c00e:	2224      	movs	r2, #36	; 0x24
 800c010:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c012:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c014:	f007 fe78 	bl	8013d08 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800c018:	2224      	movs	r2, #36	; 0x24
 800c01a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c01c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c01e:	f007 fe73 	bl	8013d08 <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800c022:	2224      	movs	r2, #36	; 0x24
 800c024:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c026:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c028:	f007 fe6e 	bl	8013d08 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800c02c:	2301      	movs	r3, #1
 800c02e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800c032:	e017      	b.n	800c064 <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800c034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c036:	699a      	ldr	r2, [r3, #24]
 800c038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03a:	699b      	ldr	r3, [r3, #24]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d911      	bls.n	800c064 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800c040:	2224      	movs	r2, #36	; 0x24
 800c042:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c044:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c046:	f007 fe5f 	bl	8013d08 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800c04a:	2224      	movs	r2, #36	; 0x24
 800c04c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c04e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c050:	f007 fe5a 	bl	8013d08 <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800c054:	2224      	movs	r2, #36	; 0x24
 800c056:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c058:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c05a:	f007 fe55 	bl	8013d08 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800c05e:	2301      	movs	r3, #1
 800c060:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800c064:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c068:	3301      	adds	r3, #1
 800c06a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800c074:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c078:	429a      	cmp	r2, r3
 800c07a:	d3a6      	bcc.n	800bfca <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800c07c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800c080:	2b00      	cmp	r3, #0
 800c082:	d19b      	bne.n	800bfbc <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800c084:	e000      	b.n	800c088 <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800c086:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800c088:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3740      	adds	r7, #64	; 0x40
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c094:	b480      	push	{r7}
 800c096:	b087      	sub	sp, #28
 800c098:	af00      	add	r7, sp, #0
 800c09a:	4603      	mov	r3, r0
 800c09c:	60b9      	str	r1, [r7, #8]
 800c09e:	607a      	str	r2, [r7, #4]
 800c0a0:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800c0ae:	7bfa      	ldrb	r2, [r7, #15]
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	00db      	lsls	r3, r3, #3
 800c0b4:	4413      	add	r3, r2
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	4413      	add	r3, r2
 800c0c0:	3304      	adds	r3, #4
 800c0c2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	75fb      	strb	r3, [r7, #23]
 800c0d6:	e01c      	b.n	800c112 <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	78da      	ldrb	r2, [r3, #3]
 800c0dc:	7dfb      	ldrb	r3, [r7, #23]
 800c0de:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0e2:	fb02 f201 	mul.w	r2, r2, r1
 800c0e6:	1a9b      	subs	r3, r3, r2
 800c0e8:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	68da      	ldr	r2, [r3, #12]
 800c0ee:	7d79      	ldrb	r1, [r7, #21]
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	3106      	adds	r1, #6
 800c0f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c0f8:	441a      	add	r2, r3
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	689a      	ldr	r2, [r3, #8]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	441a      	add	r2, r3
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800c10c:	7dfb      	ldrb	r3, [r7, #23]
 800c10e:	3301      	adds	r3, #1
 800c110:	75fb      	strb	r3, [r7, #23]
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	791b      	ldrb	r3, [r3, #4]
 800c116:	7dfa      	ldrb	r2, [r7, #23]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d9dd      	bls.n	800c0d8 <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	68da      	ldr	r2, [r3, #12]
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800c12a:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	371c      	adds	r7, #28
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr

0800c13a <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c13a:	b590      	push	{r4, r7, lr}
 800c13c:	b08d      	sub	sp, #52	; 0x34
 800c13e:	af02      	add	r7, sp, #8
 800c140:	60ba      	str	r2, [r7, #8]
 800c142:	607b      	str	r3, [r7, #4]
 800c144:	4603      	mov	r3, r0
 800c146:	73fb      	strb	r3, [r7, #15]
 800c148:	460b      	mov	r3, r1
 800c14a:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c14c:	2300      	movs	r3, #0
 800c14e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 800c152:	2300      	movs	r3, #0
 800c154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53LX_p_012 = 0;
 800c158:	2300      	movs	r3, #0
 800c15a:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800c15c:	2300      	movs	r3, #0
 800c15e:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800c160:	2300      	movs	r3, #0
 800c162:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 800c164:	2300      	movs	r3, #0
 800c166:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800c168:	7bfa      	ldrb	r2, [r7, #15]
 800c16a:	4613      	mov	r3, r2
 800c16c:	00db      	lsls	r3, r3, #3
 800c16e:	4413      	add	r3, r2
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	4413      	add	r3, r2
 800c17a:	3304      	adds	r3, #4
 800c17c:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	789b      	ldrb	r3, [r3, #2]
 800c182:	2bff      	cmp	r3, #255	; 0xff
 800c184:	d102      	bne.n	800c18c <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	2201      	movs	r2, #1
 800c18a:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	789b      	ldrb	r3, [r3, #2]
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	78d2      	ldrb	r2, [r2, #3]
 800c194:	fbb3 f1f2 	udiv	r1, r3, r2
 800c198:	fb02 f201 	mul.w	r2, r2, r1
 800c19c:	1a9b      	subs	r3, r3, r2
 800c19e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53LX_p_012  = (int16_t)i;
 800c1a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c1a6:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	b29a      	uxth	r2, r3
 800c1ae:	8c3b      	ldrh	r3, [r7, #32]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800c1b6:	8c3a      	ldrh	r2, [r7, #32]
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	789b      	ldrb	r3, [r3, #2]
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800c1c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c1c8:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	791b      	ldrb	r3, [r3, #4]
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	8bfb      	ldrh	r3, [r7, #30]
 800c1d2:	4413      	add	r3, r2
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800c1d8:	8bfa      	ldrh	r2, [r7, #30]
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	789b      	ldrb	r3, [r3, #2]
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800c1e6:	8bfa      	ldrh	r2, [r7, #30]
 800c1e8:	8c3b      	ldrh	r3, [r7, #32]
 800c1ea:	1ad3      	subs	r3, r2, r3
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 800c1f0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c1f4:	2b03      	cmp	r3, #3
 800c1f6:	dd01      	ble.n	800c1fc <VL53LX_f_015+0xc2>
		window_width = 3;
 800c1f8:	2303      	movs	r3, #3
 800c1fa:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800c1fc:	8c3a      	ldrh	r2, [r7, #32]
 800c1fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c200:	4413      	add	r3, r2
 800c202:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800c204:	b219      	sxth	r1, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	78da      	ldrb	r2, [r3, #3]
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	3314      	adds	r3, #20
 800c20e:	7bbc      	ldrb	r4, [r7, #14]
 800c210:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800c214:	9301      	str	r3, [sp, #4]
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	4623      	mov	r3, r4
 800c21c:	f000 f846 	bl	800c2ac <VL53LX_f_020>
 800c220:	4603      	mov	r3, r0
 800c222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800c226:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d114      	bne.n	800c258 <VL53LX_f_015+0x11e>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800c22e:	8bfa      	ldrh	r2, [r7, #30]
 800c230:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c232:	1ad3      	subs	r3, r2, r3
 800c234:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800c236:	b218      	sxth	r0, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	78da      	ldrb	r2, [r3, #3]
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	331c      	adds	r3, #28
 800c240:	7bbc      	ldrb	r4, [r7, #14]
 800c242:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800c246:	9301      	str	r3, [sp, #4]
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	4623      	mov	r3, r4
 800c24e:	f000 f82d 	bl	800c2ac <VL53LX_f_020>
 800c252:	4603      	mov	r3, r0
 800c254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	695a      	ldr	r2, [r3, #20]
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	69db      	ldr	r3, [r3, #28]
 800c260:	429a      	cmp	r2, r3
 800c262:	d909      	bls.n	800c278 <VL53LX_f_015+0x13e>
		tmp_phase        = pdata->VL53LX_p_026;
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	695b      	ldr	r3, [r3, #20]
 800c268:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	69da      	ldr	r2, [r3, #28]
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	69ba      	ldr	r2, [r7, #24]
 800c276:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	699a      	ldr	r2, [r3, #24]
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	695b      	ldr	r3, [r3, #20]
 800c280:	429a      	cmp	r2, r3
 800c282:	d203      	bcs.n	800c28c <VL53LX_f_015+0x152>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	699a      	ldr	r2, [r3, #24]
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	699a      	ldr	r2, [r3, #24]
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	69db      	ldr	r3, [r3, #28]
 800c294:	429a      	cmp	r2, r3
 800c296:	d903      	bls.n	800c2a0 <VL53LX_f_015+0x166>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	699a      	ldr	r2, [r3, #24]
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800c2a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	372c      	adds	r7, #44	; 0x2c
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd90      	pop	{r4, r7, pc}

0800c2ac <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800c2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b0:	b093      	sub	sp, #76	; 0x4c
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	4616      	mov	r6, r2
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	83fb      	strh	r3, [r7, #30]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	83bb      	strh	r3, [r7, #28]
 800c2c0:	4633      	mov	r3, r6
 800c2c2:	76fb      	strb	r3, [r7, #27]
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	76bb      	strb	r3, [r7, #26]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	int16_t  i            = 0;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  lb            = 0;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	int64_t VL53LX_p_018        = 0;
 800c2da:	f04f 0200 	mov.w	r2, #0
 800c2de:	f04f 0300 	mov.w	r3, #0
 800c2e2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int64_t event_sum     = 0;
 800c2e6:	f04f 0200 	mov.w	r2, #0
 800c2ea:	f04f 0300 	mov.w	r3, #0
 800c2ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int64_t weighted_sum  = 0;
 800c2f2:	f04f 0200 	mov.w	r2, #0
 800c2f6:	f04f 0300 	mov.w	r3, #0
 800c2fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800c2fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c304:	601a      	str	r2, [r3, #0]

	if (VL53LX_p_030 != 0)
 800c306:	7efb      	ldrb	r3, [r7, #27]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	f000 808b 	beq.w	800c424 <VL53LX_f_020+0x178>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800c30e:	8bfb      	ldrh	r3, [r7, #30]
 800c310:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c314:	e07f      	b.n	800c416 <VL53LX_f_020+0x16a>

		if (lb < 0)
 800c316:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	da08      	bge.n	800c330 <VL53LX_f_020+0x84>
			i = lb + (int16_t)VL53LX_p_030;
 800c31e:	7efb      	ldrb	r3, [r7, #27]
 800c320:	b29a      	uxth	r2, r3
 800c322:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c326:	4413      	add	r3, r2
 800c328:	b29b      	uxth	r3, r3
 800c32a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c32e:	e009      	b.n	800c344 <VL53LX_f_020+0x98>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800c330:	f9b7 1044 	ldrsh.w	r1, [r7, #68]	; 0x44
 800c334:	7efa      	ldrb	r2, [r7, #27]
 800c336:	fb91 f3f2 	sdiv	r3, r1, r2
 800c33a:	fb02 f303 	mul.w	r3, r2, r3
 800c33e:	1acb      	subs	r3, r1, r3
 800c340:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800c344:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800c348:	2b00      	cmp	r3, #0
 800c34a:	db5d      	blt.n	800c408 <VL53LX_f_020+0x15c>
 800c34c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800c350:	2b17      	cmp	r3, #23
 800c352:	dc59      	bgt.n	800c408 <VL53LX_f_020+0x15c>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800c354:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800c358:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c35a:	3306      	adds	r3, #6
 800c35c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c360:	4618      	mov	r0, r3
 800c362:	ea4f 71e0 	mov.w	r1, r0, asr #31
				(int64_t)pbins->VL53LX_p_028;
 800c366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c368:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c36c:	461a      	mov	r2, r3
 800c36e:	ea4f 73e2 	mov.w	r3, r2, asr #31
			VL53LX_p_018 =
 800c372:	1a86      	subs	r6, r0, r2
 800c374:	613e      	str	r6, [r7, #16]
 800c376:	eb61 0303 	sbc.w	r3, r1, r3
 800c37a:	617b      	str	r3, [r7, #20]
 800c37c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c380:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800c384:	7ebb      	ldrb	r3, [r7, #26]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00b      	beq.n	800c3a2 <VL53LX_f_020+0xf6>
 800c38a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c38e:	2a00      	cmp	r2, #0
 800c390:	f173 0300 	sbcs.w	r3, r3, #0
 800c394:	da05      	bge.n	800c3a2 <VL53LX_f_020+0xf6>
				VL53LX_p_018 = 0;
 800c396:	f04f 0200 	mov.w	r2, #0
 800c39a:	f04f 0300 	mov.w	r3, #0
 800c39e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			event_sum += VL53LX_p_018;
 800c3a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800c3a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c3aa:	1886      	adds	r6, r0, r2
 800c3ac:	60be      	str	r6, [r7, #8]
 800c3ae:	eb41 0303 	adc.w	r3, r1, r3
 800c3b2:	60fb      	str	r3, [r7, #12]
 800c3b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c3b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800c3bc:	f9b7 0044 	ldrsh.w	r0, [r7, #68]	; 0x44
 800c3c0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800c3c4:	f04f 0200 	mov.w	r2, #0
 800c3c8:	f04f 0300 	mov.w	r3, #0
 800c3cc:	02cb      	lsls	r3, r1, #11
 800c3ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800c3d2:	02c2      	lsls	r2, r0, #11
 800c3d4:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 800c3d8:	f143 0900 	adc.w	r9, r3, #0
 800c3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3de:	fb09 f203 	mul.w	r2, r9, r3
 800c3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3e4:	fb08 f303 	mul.w	r3, r8, r3
 800c3e8:	441a      	add	r2, r3
 800c3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ec:	fba3 0108 	umull	r0, r1, r3, r8
 800c3f0:	1853      	adds	r3, r2, r1
 800c3f2:	4619      	mov	r1, r3
			weighted_sum +=
 800c3f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c3f8:	1816      	adds	r6, r2, r0
 800c3fa:	603e      	str	r6, [r7, #0]
 800c3fc:	414b      	adcs	r3, r1
 800c3fe:	607b      	str	r3, [r7, #4]
 800c400:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c404:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800c408:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	3301      	adds	r3, #1
 800c410:	b29b      	uxth	r3, r3
 800c412:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c416:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800c41a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c41e:	429a      	cmp	r2, r3
 800c420:	f77f af79 	ble.w	800c316 <VL53LX_f_020+0x6a>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800c424:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c428:	2a01      	cmp	r2, #1
 800c42a:	f173 0300 	sbcs.w	r3, r3, #0
 800c42e:	db33      	blt.n	800c498 <VL53LX_f_020+0x1ec>
		weighted_sum += do_division_s(event_sum, 2);
 800c430:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c434:	0fd9      	lsrs	r1, r3, #31
 800c436:	4608      	mov	r0, r1
 800c438:	f04f 0100 	mov.w	r1, #0
 800c43c:	1884      	adds	r4, r0, r2
 800c43e:	eb41 0503 	adc.w	r5, r1, r3
 800c442:	f04f 0200 	mov.w	r2, #0
 800c446:	f04f 0300 	mov.w	r3, #0
 800c44a:	0862      	lsrs	r2, r4, #1
 800c44c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800c450:	106b      	asrs	r3, r5, #1
 800c452:	4610      	mov	r0, r2
 800c454:	4619      	mov	r1, r3
 800c456:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c45a:	eb12 0a00 	adds.w	sl, r2, r0
 800c45e:	eb43 0b01 	adc.w	fp, r3, r1
 800c462:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800c466:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c46a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c46e:	f7f3 feff 	bl	8000270 <__aeabi_ldivmod>
 800c472:	4602      	mov	r2, r0
 800c474:	460b      	mov	r3, r1
 800c476:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		if (weighted_sum < 0)
 800c47a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c47e:	2a00      	cmp	r2, #0
 800c480:	f173 0300 	sbcs.w	r3, r3, #0
 800c484:	da05      	bge.n	800c492 <VL53LX_f_020+0x1e6>
			weighted_sum = 0;
 800c486:	f04f 0200 	mov.w	r2, #0
 800c48a:	f04f 0300 	mov.w	r3, #0
 800c48e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		*pphase = (uint32_t)weighted_sum;
 800c492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c496:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800c498:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	374c      	adds	r7, #76	; 0x4c
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c4a6 <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b086      	sub	sp, #24
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
 800c4b0:	603b      	str	r3, [r7, #0]
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800c4c2:	7bfa      	ldrb	r2, [r7, #15]
 800c4c4:	4613      	mov	r3, r2
 800c4c6:	00db      	lsls	r3, r3, #3
 800c4c8:	4413      	add	r3, r2
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	3304      	adds	r3, #4
 800c4d6:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800c4d8:	22ac      	movs	r2, #172	; 0xac
 800c4da:	68b9      	ldr	r1, [r7, #8]
 800c4dc:	6a38      	ldr	r0, [r7, #32]
 800c4de:	f007 fc13 	bl	8013d08 <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800c4e8:	75fb      	strb	r3, [r7, #23]
 800c4ea:	e020      	b.n	800c52e <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	7dfa      	ldrb	r2, [r7, #23]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d304      	bcc.n	800c500 <VL53LX_f_011+0x5a>
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	791b      	ldrb	r3, [r3, #4]
 800c4fa:	7dfa      	ldrb	r2, [r7, #23]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d913      	bls.n	800c528 <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	78da      	ldrb	r2, [r3, #3]
 800c504:	7dfb      	ldrb	r3, [r7, #23]
 800c506:	fbb3 f1f2 	udiv	r1, r3, r2
 800c50a:	fb02 f201 	mul.w	r2, r2, r1
 800c50e:	1a9b      	subs	r3, r3, r2
 800c510:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800c512:	6a3b      	ldr	r3, [r7, #32]
 800c514:	7a9b      	ldrb	r3, [r3, #10]
 800c516:	7d7a      	ldrb	r2, [r7, #21]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d205      	bcs.n	800c528 <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800c51c:	7d7a      	ldrb	r2, [r7, #21]
 800c51e:	6a3b      	ldr	r3, [r7, #32]
 800c520:	3206      	adds	r2, #6
 800c522:	6839      	ldr	r1, [r7, #0]
 800c524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800c528:	7dfb      	ldrb	r3, [r7, #23]
 800c52a:	3301      	adds	r3, #1
 800c52c:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800c52e:	7dfa      	ldrb	r2, [r7, #23]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800c536:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800c53c:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800c53e:	429a      	cmp	r2, r3
 800c540:	dbd4      	blt.n	800c4ec <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800c542:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800c546:	4618      	mov	r0, r3
 800c548:	3718      	adds	r7, #24
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}

0800c54e <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800c54e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c552:	b096      	sub	sp, #88	; 0x58
 800c554:	af08      	add	r7, sp, #32
 800c556:	4604      	mov	r4, r0
 800c558:	4608      	mov	r0, r1
 800c55a:	4611      	mov	r1, r2
 800c55c:	461a      	mov	r2, r3
 800c55e:	4623      	mov	r3, r4
 800c560:	73fb      	strb	r3, [r7, #15]
 800c562:	4603      	mov	r3, r0
 800c564:	73bb      	strb	r3, [r7, #14]
 800c566:	460b      	mov	r3, r1
 800c568:	737b      	strb	r3, [r7, #13]
 800c56a:	4613      	mov	r3, r2
 800c56c:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800c56e:	2300      	movs	r3, #0
 800c570:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800c574:	2300      	movs	r3, #0
 800c576:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 800c57a:	2300      	movs	r3, #0
 800c57c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53LX_p_007    = 0;
 800c580:	2300      	movs	r3, #0
 800c582:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53LX_p_032    = 0;
 800c584:	2300      	movs	r3, #0
 800c586:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53LX_p_001    = 0;
 800c588:	2300      	movs	r3, #0
 800c58a:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 800c590:	2300      	movs	r3, #0
 800c592:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800c594:	2300      	movs	r3, #0
 800c596:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800c598:	2300      	movs	r3, #0
 800c59a:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800c59c:	2300      	movs	r3, #0
 800c59e:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800c5a0:	7b7b      	ldrb	r3, [r7, #13]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d106      	bne.n	800c5b4 <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800c5a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5ac:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800c5ae:	f06f 030e 	mvn.w	r3, #14
 800c5b2:	e06f      	b.n	800c694 <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
 800c5b6:	7b7a      	ldrb	r2, [r7, #13]
 800c5b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5bc:	fb02 f201 	mul.w	r2, r2, r1
 800c5c0:	1a9b      	subs	r3, r3, r2
 800c5c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53LX_f_022(
 800c5c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c5ca:	7b39      	ldrb	r1, [r7, #12]
 800c5cc:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800c5d0:	f107 0320 	add.w	r3, r7, #32
 800c5d4:	9301      	str	r3, [sp, #4]
 800c5d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c5da:	9300      	str	r3, [sp, #0]
 800c5dc:	4613      	mov	r3, r2
 800c5de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5e0:	f000 fda8 	bl	800d134 <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800c5e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c5e8:	7b39      	ldrb	r1, [r7, #12]
 800c5ea:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800c5ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c5f2:	9301      	str	r3, [sp, #4]
 800c5f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c5fe:	f000 fd99 	bl	800d134 <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800c602:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00e      	beq.n	800c628 <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800c60a:	f107 021c 	add.w	r2, r7, #28
 800c60e:	7b39      	ldrb	r1, [r7, #12]
 800c610:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800c614:	f107 0314 	add.w	r3, r7, #20
 800c618:	9301      	str	r3, [sp, #4]
 800c61a:	f107 0318 	add.w	r3, r7, #24
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	4613      	mov	r3, r2
 800c622:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c624:	f000 fd86 	bl	800d134 <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800c628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62a:	469c      	mov	ip, r3
 800c62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62e:	469e      	mov	lr, r3
 800c630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c632:	4698      	mov	r8, r3
 800c634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c636:	4619      	mov	r1, r3
 800c638:	6a3b      	ldr	r3, [r7, #32]
 800c63a:	461c      	mov	r4, r3
 800c63c:	69bb      	ldr	r3, [r7, #24]
 800c63e:	461d      	mov	r5, r3
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	461e      	mov	r6, r3
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800c648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c64a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53LX_f_023(
 800c64e:	607b      	str	r3, [r7, #4]
 800c650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c652:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c656:	7bb8      	ldrb	r0, [r7, #14]
 800c658:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c65a:	9207      	str	r2, [sp, #28]
 800c65c:	9306      	str	r3, [sp, #24]
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	9205      	str	r2, [sp, #20]
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	9304      	str	r3, [sp, #16]
 800c666:	9603      	str	r6, [sp, #12]
 800c668:	9502      	str	r5, [sp, #8]
 800c66a:	9401      	str	r4, [sp, #4]
 800c66c:	9100      	str	r1, [sp, #0]
 800c66e:	4643      	mov	r3, r8
 800c670:	4672      	mov	r2, lr
 800c672:	4661      	mov	r1, ip
 800c674:	f003 f932 	bl	800f8dc <VL53LX_f_023>
 800c678:	4603      	mov	r3, r0
 800c67a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800c67e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800c682:	f113 0f0f 	cmn.w	r3, #15
 800c686:	d103      	bne.n	800c690 <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800c688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c68a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c68e:	801a      	strh	r2, [r3, #0]


	return status;
 800c690:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c694:	4618      	mov	r0, r3
 800c696:	3738      	adds	r7, #56	; 0x38
 800c698:	46bd      	mov	sp, r7
 800c69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c69e <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800c69e:	b490      	push	{r4, r7}
 800c6a0:	b084      	sub	sp, #16
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	4604      	mov	r4, r0
 800c6a6:	4608      	mov	r0, r1
 800c6a8:	4611      	mov	r1, r2
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	4623      	mov	r3, r4
 800c6ae:	71fb      	strb	r3, [r7, #7]
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	71bb      	strb	r3, [r7, #6]
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	717b      	strb	r3, [r7, #5]
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800c6c4:	6a3b      	ldr	r3, [r7, #32]
 800c6c6:	79fa      	ldrb	r2, [r7, #7]
 800c6c8:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800c6ca:	6a3b      	ldr	r3, [r7, #32]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	781a      	ldrb	r2, [r3, #0]
 800c6d4:	6a3b      	ldr	r3, [r7, #32]
 800c6d6:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	785a      	ldrb	r2, [r3, #1]
 800c6dc:	6a3b      	ldr	r3, [r7, #32]
 800c6de:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	789a      	ldrb	r2, [r3, #2]
 800c6e4:	6a3b      	ldr	r3, [r7, #32]
 800c6e6:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	78da      	ldrb	r2, [r3, #3]
 800c6ec:	6a3b      	ldr	r3, [r7, #32]
 800c6ee:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	791a      	ldrb	r2, [r3, #4]
 800c6f4:	6a3b      	ldr	r3, [r7, #32]
 800c6f6:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	795a      	ldrb	r2, [r3, #5]
 800c6fc:	6a3b      	ldr	r3, [r7, #32]
 800c6fe:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	791a      	ldrb	r2, [r3, #4]
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	1ad3      	subs	r3, r2, r3
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	3301      	adds	r3, #1
 800c70e:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800c710:	6a3b      	ldr	r3, [r7, #32]
 800c712:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800c714:	69bb      	ldr	r3, [r7, #24]
 800c716:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800c71a:	6a3b      	ldr	r3, [r7, #32]
 800c71c:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	8c1a      	ldrh	r2, [r3, #32]
 800c722:	6a3b      	ldr	r3, [r7, #32]
 800c724:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	695b      	ldr	r3, [r3, #20]
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	6a3b      	ldr	r3, [r7, #32]
 800c72e:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	699b      	ldr	r3, [r3, #24]
 800c734:	b29a      	uxth	r2, r3
 800c736:	6a3b      	ldr	r3, [r7, #32]
 800c738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	69db      	ldr	r3, [r3, #28]
 800c740:	b29a      	uxth	r2, r3
 800c742:	6a3b      	ldr	r3, [r7, #32]
 800c744:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	461a      	mov	r2, r3
 800c74e:	6a3b      	ldr	r3, [r7, #32]
 800c750:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	691a      	ldr	r2, [r3, #16]
 800c756:	6a3b      	ldr	r3, [r7, #32]
 800c758:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	689b      	ldr	r3, [r3, #8]
 800c75e:	461a      	mov	r2, r3
 800c760:	6a3b      	ldr	r3, [r7, #32]
 800c762:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c76a:	6a3b      	ldr	r3, [r7, #32]
 800c76c:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800c76e:	6a3b      	ldr	r3, [r7, #32]
 800c770:	2213      	movs	r2, #19
 800c772:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 800c776:	887b      	ldrh	r3, [r7, #2]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d00a      	beq.n	800c792 <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	8c1b      	ldrh	r3, [r3, #32]
 800c780:	461a      	mov	r2, r3
 800c782:	887b      	ldrh	r3, [r7, #2]
 800c784:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800c786:	429a      	cmp	r2, r3
 800c788:	d903      	bls.n	800c792 <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800c78a:	6a3b      	ldr	r3, [r7, #32]
 800c78c:	2206      	movs	r2, #6
 800c78e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800c792:	79bb      	ldrb	r3, [r7, #6]
 800c794:	b29b      	uxth	r3, r3
 800c796:	021b      	lsls	r3, r3, #8
 800c798:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800c79a:	6a3b      	ldr	r3, [r7, #32]
 800c79c:	8a9b      	ldrh	r3, [r3, #20]
 800c79e:	89fa      	ldrh	r2, [r7, #14]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d205      	bcs.n	800c7b0 <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800c7a4:	6a3b      	ldr	r3, [r7, #32]
 800c7a6:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800c7a8:	89fb      	ldrh	r3, [r7, #14]
 800c7aa:	1ad3      	subs	r3, r2, r3
 800c7ac:	81fb      	strh	r3, [r7, #14]
 800c7ae:	e001      	b.n	800c7b4 <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800c7b4:	797b      	ldrb	r3, [r7, #5]
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	021b      	lsls	r3, r3, #8
 800c7ba:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800c7c2:	89bb      	ldrh	r3, [r7, #12]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800c7c8:	6a3b      	ldr	r3, [r7, #32]
 800c7ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c7ce:	89fa      	ldrh	r2, [r7, #14]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d805      	bhi.n	800c7e0 <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800c7d4:	6a3b      	ldr	r3, [r7, #32]
 800c7d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800c7da:	89ba      	ldrh	r2, [r7, #12]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d203      	bcs.n	800c7e8 <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800c7e0:	6a3b      	ldr	r3, [r7, #32]
 800c7e2:	2205      	movs	r2, #5
 800c7e4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 800c7e8:	bf00      	nop
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bc90      	pop	{r4, r7}
 800c7f0:	4770      	bx	lr

0800c7f2 <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800c7f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7f4:	b08f      	sub	sp, #60	; 0x3c
 800c7f6:	af06      	add	r7, sp, #24
 800c7f8:	60f8      	str	r0, [r7, #12]
 800c7fa:	60b9      	str	r1, [r7, #8]
 800c7fc:	607a      	str	r2, [r7, #4]
 800c7fe:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c800:	2300      	movs	r3, #0
 800c802:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800c804:	2300      	movs	r3, #0
 800c806:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800c808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c80a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800c80e:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800c810:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c812:	f7ff f879 	bl	800b908 <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800c816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c818:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 800c81c:	22ac      	movs	r2, #172	; 0xac
 800c81e:	6839      	ldr	r1, [r7, #0]
 800c820:	4618      	mov	r0, r3
 800c822:	f007 fa71 	bl	8013d08 <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	781a      	ldrb	r2, [r3, #0]
 800c82a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c82c:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	785a      	ldrb	r2, [r3, #1]
 800c832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c834:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	789a      	ldrb	r2, [r3, #2]
 800c83a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c83c:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800c844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c846:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800c848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c84a:	2200      	movs	r2, #0
 800c84c:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800c84e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c850:	2204      	movs	r2, #4
 800c852:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800c854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c856:	2200      	movs	r2, #0
 800c858:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800c85a:	2300      	movs	r3, #0
 800c85c:	77bb      	strb	r3, [r7, #30]
 800c85e:	e008      	b.n	800c872 <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800c860:	7fbb      	ldrb	r3, [r7, #30]
 800c862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	4413      	add	r3, r2
 800c868:	2200      	movs	r2, #0
 800c86a:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800c86c:	7fbb      	ldrb	r3, [r7, #30]
 800c86e:	3301      	adds	r3, #1
 800c870:	77bb      	strb	r3, [r7, #30]
 800c872:	7fbb      	ldrb	r3, [r7, #30]
 800c874:	2b04      	cmp	r3, #4
 800c876:	d9f3      	bls.n	800c860 <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800c878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c87a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800c87e:	4618      	mov	r0, r3
 800c880:	f7fe f8b8 	bl	800a9f4 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800c888:	461a      	mov	r2, r3
 800c88a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c88c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800c890:	4619      	mov	r1, r3
 800c892:	4610      	mov	r0, r2
 800c894:	f7fe f8ee 	bl	800aa74 <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800c898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c89a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7fe fcb9 	bl	800b216 <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800c8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8a6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7fe f95c 	bl	800ab68 <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d009      	beq.n	800c8ce <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800c8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8bc:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800c8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8c2:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8ca:	f000 fd7b 	bl	800d3c4 <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	77bb      	strb	r3, [r7, #30]
 800c8da:	e01e      	b.n	800c91a <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800c8dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d117      	bne.n	800c914 <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800c8e4:	7fbb      	ldrb	r3, [r7, #30]
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	3304      	adds	r3, #4
 800c8ea:	005b      	lsls	r3, r3, #1
 800c8ec:	4413      	add	r3, r2
 800c8ee:	8898      	ldrh	r0, [r3, #4]
 800c8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8f2:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800c8f6:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800c8f8:	005b      	lsls	r3, r3, #1
 800c8fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8fc:	4413      	add	r3, r2
 800c8fe:	3304      	adds	r3, #4
 800c900:	9301      	str	r3, [sp, #4]
 800c902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c904:	9300      	str	r3, [sp, #0]
 800c906:	460b      	mov	r3, r1
 800c908:	68ba      	ldr	r2, [r7, #8]
 800c90a:	68f9      	ldr	r1, [r7, #12]
 800c90c:	f7fe fcce 	bl	800b2ac <VL53LX_f_001>
 800c910:	4603      	mov	r3, r0
 800c912:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800c914:	7fbb      	ldrb	r3, [r7, #30]
 800c916:	3301      	adds	r3, #1
 800c918:	77bb      	strb	r3, [r7, #30]
 800c91a:	7fbb      	ldrb	r3, [r7, #30]
 800c91c:	2b04      	cmp	r3, #4
 800c91e:	d9dd      	bls.n	800c8dc <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800c920:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d11a      	bne.n	800c95e <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800c930:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 800c93c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c93e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800c942:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c944:	f502 7252 	add.w	r2, r2, #840	; 0x348
 800c948:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c94a:	9102      	str	r1, [sp, #8]
 800c94c:	9201      	str	r2, [sp, #4]
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	462b      	mov	r3, r5
 800c952:	4622      	mov	r2, r4
 800c954:	4631      	mov	r1, r6
 800c956:	f7ff f850 	bl	800b9fa <VL53LX_f_006>
 800c95a:	4603      	mov	r3, r0
 800c95c:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800c95e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d104      	bne.n	800c970 <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800c966:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c968:	f7ff f972 	bl	800bc50 <VL53LX_f_007>
 800c96c:	4603      	mov	r3, r0
 800c96e:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800c970:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d104      	bne.n	800c982 <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800c978:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c97a:	f7ff f9b7 	bl	800bcec <VL53LX_f_008>
 800c97e:	4603      	mov	r3, r0
 800c980:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800c982:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d104      	bne.n	800c994 <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800c98a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c98c:	f7ff fa2c 	bl	800bde8 <VL53LX_f_009>
 800c990:	4603      	mov	r3, r0
 800c992:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800c994:	2300      	movs	r3, #0
 800c996:	77bb      	strb	r3, [r7, #30]
 800c998:	e0a6      	b.n	800cae8 <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800c99a:	7fba      	ldrb	r2, [r7, #30]
 800c99c:	4613      	mov	r3, r2
 800c99e:	00db      	lsls	r3, r3, #3
 800c9a0:	4413      	add	r3, r2
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800c9a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9aa:	4413      	add	r3, r2
 800c9ac:	3304      	adds	r3, #4
 800c9ae:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800c9b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d109      	bne.n	800c9cc <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800c9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9ba:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800c9be:	7fbb      	ldrb	r3, [r7, #30]
 800c9c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7ff fb66 	bl	800c094 <VL53LX_f_010>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800c9cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d110      	bne.n	800c9f6 <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800c9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9d6:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9e2:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800c9e6:	7fb8      	ldrb	r0, [r7, #30]
 800c9e8:	9300      	str	r3, [sp, #0]
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9ee:	f7ff fd5a 	bl	800c4a6 <VL53LX_f_011>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800c9f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10d      	bne.n	800ca1a <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800c9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca00:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800ca04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca06:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800ca0a:	7fb8      	ldrb	r0, [r7, #30]
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	2300      	movs	r3, #0
 800ca10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca12:	f7ff fd48 	bl	800c4a6 <VL53LX_f_011>
 800ca16:	4603      	mov	r3, r0
 800ca18:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800ca1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d10d      	bne.n	800ca3e <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800ca22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca24:	f503 7152 	add.w	r1, r3, #840	; 0x348
 800ca28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca2a:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800ca2e:	7fb8      	ldrb	r0, [r7, #30]
 800ca30:	9300      	str	r3, [sp, #0]
 800ca32:	2300      	movs	r3, #0
 800ca34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca36:	f7ff fd36 	bl	800c4a6 <VL53LX_f_011>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800ca3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d109      	bne.n	800ca5a <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800ca46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca48:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 800ca4c:	7fb8      	ldrb	r0, [r7, #30]
 800ca4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca52:	f000 f8dd 	bl	800cc10 <VL53LX_f_026>
 800ca56:	4603      	mov	r3, r0
 800ca58:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800ca5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d108      	bne.n	800ca74 <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	8a19      	ldrh	r1, [r3, #16]
 800ca66:	7fb8      	ldrb	r0, [r7, #30]
 800ca68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca6c:	f000 f95c 	bl	800cd28 <VL53LX_f_027>
 800ca70:	4603      	mov	r3, r0
 800ca72:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800ca74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d124      	bne.n	800cac6 <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	789d      	ldrb	r5, [r3, #2]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	7e1e      	ldrb	r6, [r3, #24]
 800ca84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca86:	f893 c003 	ldrb.w	ip, [r3, #3]
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	f893 e006 	ldrb.w	lr, [r3, #6]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca98:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 800ca9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ca9e:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 800caa2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800caa4:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 800caa8:	697c      	ldr	r4, [r7, #20]
 800caaa:	3420      	adds	r4, #32
 800caac:	9404      	str	r4, [sp, #16]
 800caae:	9003      	str	r0, [sp, #12]
 800cab0:	9102      	str	r1, [sp, #8]
 800cab2:	9201      	str	r2, [sp, #4]
 800cab4:	9300      	str	r3, [sp, #0]
 800cab6:	4673      	mov	r3, lr
 800cab8:	4662      	mov	r2, ip
 800caba:	4631      	mov	r1, r6
 800cabc:	4628      	mov	r0, r5
 800cabe:	f7ff fd46 	bl	800c54e <VL53LX_f_014>
 800cac2:	4603      	mov	r3, r0
 800cac4:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800cac6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d109      	bne.n	800cae2 <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800cace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cad0:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 800cad4:	7fb8      	ldrb	r0, [r7, #30]
 800cad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cad8:	2101      	movs	r1, #1
 800cada:	f7ff fb2e 	bl	800c13a <VL53LX_f_015>
 800cade:	4603      	mov	r3, r0
 800cae0:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800cae2:	7fbb      	ldrb	r3, [r7, #30]
 800cae4:	3301      	adds	r3, #1
 800cae6:	77bb      	strb	r3, [r7, #30]
 800cae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caea:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800caee:	7fba      	ldrb	r2, [r7, #30]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	f4ff af52 	bcc.w	800c99a <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800caf6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d107      	bne.n	800cb0e <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	785b      	ldrb	r3, [r3, #1]
 800cb02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7ff fa41 	bl	800bf8c <VL53LX_f_016>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800cb0e:	2300      	movs	r3, #0
 800cb10:	77bb      	strb	r3, [r7, #30]
 800cb12:	e071      	b.n	800cbf8 <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800cb14:	7fba      	ldrb	r2, [r7, #30]
 800cb16:	4613      	mov	r3, r2
 800cb18:	00db      	lsls	r3, r3, #3
 800cb1a:	4413      	add	r3, r2
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cb22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cb24:	4413      	add	r3, r2
 800cb26:	3304      	adds	r3, #4
 800cb28:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800cb2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb2c:	7c9a      	ldrb	r2, [r3, #18]
 800cb2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb30:	7c5b      	ldrb	r3, [r3, #17]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d25c      	bcs.n	800cbf0 <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	dd57      	ble.n	800cbf2 <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800cb46:	2bff      	cmp	r3, #255	; 0xff
 800cb48:	d053      	beq.n	800cbf2 <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800cb4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb4c:	7c9b      	ldrb	r3, [r3, #18]
 800cb4e:	461a      	mov	r2, r3
			prange_data =
 800cb50:	234c      	movs	r3, #76	; 0x4c
 800cb52:	fb03 f302 	mul.w	r3, r3, r2
 800cb56:	3310      	adds	r3, #16
 800cb58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb5a:	4413      	add	r3, r2
 800cb5c:	3304      	adds	r3, #4
 800cb5e:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800cb60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d115      	bne.n	800cb94 <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800cb68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb6a:	7c98      	ldrb	r0, [r3, #18]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f893 1020 	ldrb.w	r1, [r3, #32]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	8b5d      	ldrh	r5, [r3, #26]
 800cb7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb7e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800cb82:	693a      	ldr	r2, [r7, #16]
 800cb84:	9202      	str	r2, [sp, #8]
 800cb86:	697a      	ldr	r2, [r7, #20]
 800cb88:	9201      	str	r2, [sp, #4]
 800cb8a:	9300      	str	r3, [sp, #0]
 800cb8c:	462b      	mov	r3, r5
 800cb8e:	4622      	mov	r2, r4
 800cb90:	f7ff fd85 	bl	800c69e <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800cb94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d115      	bne.n	800cbc8 <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800cb9c:	69bb      	ldr	r3, [r7, #24]
 800cb9e:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 800cbb4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800cbb8:	9301      	str	r3, [sp, #4]
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	4623      	mov	r3, r4
 800cbc0:	f000 fb11 	bl	800d1e6 <VL53LX_f_018>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800cbc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d108      	bne.n	800cbe2 <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	8bd8      	ldrh	r0, [r3, #30]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800cbda:	693a      	ldr	r2, [r7, #16]
 800cbdc:	4619      	mov	r1, r3
 800cbde:	f000 fba7 	bl	800d330 <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800cbe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbe4:	7c9b      	ldrb	r3, [r3, #18]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	b2da      	uxtb	r2, r3
 800cbea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbec:	749a      	strb	r2, [r3, #18]
 800cbee:	e000      	b.n	800cbf2 <VL53LX_f_025+0x400>
			continue;
 800cbf0:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800cbf2:	7fbb      	ldrb	r3, [r7, #30]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	77bb      	strb	r3, [r7, #30]
 800cbf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbfa:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800cbfe:	7fba      	ldrb	r2, [r7, #30]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d387      	bcc.n	800cb14 <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800cc04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3724      	adds	r7, #36	; 0x24
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc10 <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b08c      	sub	sp, #48	; 0x30
 800cc14:	af02      	add	r7, sp, #8
 800cc16:	60b9      	str	r1, [r7, #8]
 800cc18:	607a      	str	r2, [r7, #4]
 800cc1a:	603b      	str	r3, [r7, #0]
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800cc20:	2300      	movs	r3, #0
 800cc22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800cc26:	7bfa      	ldrb	r2, [r7, #15]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	00db      	lsls	r3, r3, #3
 800cc2c:	4413      	add	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	4413      	add	r3, r2
 800cc38:	3304      	adds	r3, #4
 800cc3a:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 800cc42:	2300      	movs	r3, #0
 800cc44:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800cc46:	2300      	movs	r3, #0
 800cc48:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	785a      	ldrb	r2, [r3, #1]
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	781a      	ldrb	r2, [r3, #0]
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	789a      	ldrb	r2, [r3, #2]
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800cc6a:	6a3b      	ldr	r3, [r7, #32]
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc72:	e04d      	b.n	800cd10 <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	78da      	ldrb	r2, [r3, #3]
 800cc78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc7c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc80:	fb02 f201 	mul.w	r2, r2, r1
 800cc84:	1a9b      	subs	r3, r3, r2
 800cc86:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800cc88:	6a3b      	ldr	r3, [r7, #32]
 800cc8a:	7999      	ldrb	r1, [r3, #6]
 800cc8c:	f107 0218 	add.w	r2, r7, #24
 800cc90:	7ff8      	ldrb	r0, [r7, #31]
 800cc92:	f107 0310 	add.w	r3, r7, #16
 800cc96:	9301      	str	r3, [sp, #4]
 800cc98:	f107 0314 	add.w	r3, r7, #20
 800cc9c:	9300      	str	r3, [sp, #0]
 800cc9e:	4613      	mov	r3, r2
 800cca0:	68ba      	ldr	r2, [r7, #8]
 800cca2:	f000 fa47 	bl	800d134 <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800cca6:	7ffb      	ldrb	r3, [r7, #31]
 800cca8:	69ba      	ldr	r2, [r7, #24]
 800ccaa:	6839      	ldr	r1, [r7, #0]
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	440b      	add	r3, r1
 800ccb0:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800ccb2:	7ffb      	ldrb	r3, [r7, #31]
 800ccb4:	697a      	ldr	r2, [r7, #20]
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	3318      	adds	r3, #24
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	440b      	add	r3, r1
 800ccbe:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800ccc0:	7ffb      	ldrb	r3, [r7, #31]
 800ccc2:	693a      	ldr	r2, [r7, #16]
 800ccc4:	6839      	ldr	r1, [r7, #0]
 800ccc6:	3330      	adds	r3, #48	; 0x30
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	440b      	add	r3, r1
 800cccc:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800ccce:	69ba      	ldr	r2, [r7, #24]
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	689a      	ldr	r2, [r3, #8]
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800ccdc:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800ccde:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800cce0:	6839      	ldr	r1, [r7, #0]
 800cce2:	3348      	adds	r3, #72	; 0x48
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	440b      	add	r3, r1
 800cce8:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800ccea:	697a      	ldr	r2, [r7, #20]
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	689a      	ldr	r2, [r3, #8]
 800ccf4:	69bb      	ldr	r3, [r7, #24]
 800ccf6:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800ccf8:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800ccfa:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800ccfc:	6839      	ldr	r1, [r7, #0]
 800ccfe:	3360      	adds	r3, #96	; 0x60
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	440b      	add	r3, r1
 800cd04:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800cd06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd10:	6a3b      	ldr	r3, [r7, #32]
 800cd12:	791b      	ldrb	r3, [r3, #4]
 800cd14:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d9ab      	bls.n	800cc74 <VL53LX_f_026+0x64>
	}

	return status;
 800cd1c:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3728      	adds	r7, #40	; 0x28
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800cd28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd2a:	b08f      	sub	sp, #60	; 0x3c
 800cd2c:	af06      	add	r7, sp, #24
 800cd2e:	60ba      	str	r2, [r7, #8]
 800cd30:	607b      	str	r3, [r7, #4]
 800cd32:	4603      	mov	r3, r0
 800cd34:	73fb      	strb	r3, [r7, #15]
 800cd36:	460b      	mov	r3, r1
 800cd38:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800cd42:	7bfa      	ldrb	r2, [r7, #15]
 800cd44:	4613      	mov	r3, r2
 800cd46:	00db      	lsls	r3, r3, #3
 800cd48:	4413      	add	r3, r2
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	4413      	add	r3, r2
 800cd54:	3304      	adds	r3, #4
 800cd56:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800cd60:	2300      	movs	r3, #0
 800cd62:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800cd64:	69bb      	ldr	r3, [r7, #24]
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	77fb      	strb	r3, [r7, #31]
 800cd6a:	e0b9      	b.n	800cee0 <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	78da      	ldrb	r2, [r3, #3]
 800cd70:	7ffb      	ldrb	r3, [r7, #31]
 800cd72:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd76:	fb02 f201 	mul.w	r2, r2, r1
 800cd7a:	1a9b      	subs	r3, r3, r2
 800cd7c:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800cd7e:	7ffb      	ldrb	r3, [r7, #31]
 800cd80:	3301      	adds	r3, #1
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	78d2      	ldrb	r2, [r2, #3]
 800cd86:	fb93 f1f2 	sdiv	r1, r3, r2
 800cd8a:	fb02 f201 	mul.w	r2, r2, r1
 800cd8e:	1a9b      	subs	r3, r3, r2
 800cd90:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	789b      	ldrb	r3, [r3, #2]
 800cd96:	7dfa      	ldrb	r2, [r7, #23]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	f080 809e 	bcs.w	800ceda <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800cda2:	7dba      	ldrb	r2, [r7, #22]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	f080 8098 	bcs.w	800ceda <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	68ba      	ldr	r2, [r7, #8]
 800cdae:	3348      	adds	r3, #72	; 0x48
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	4413      	add	r3, r2
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d10e      	bne.n	800cdd8 <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800cdba:	7dfb      	ldrb	r3, [r7, #23]
 800cdbc:	68ba      	ldr	r2, [r7, #8]
 800cdbe:	3360      	adds	r3, #96	; 0x60
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	4413      	add	r3, r2
 800cdc4:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d106      	bne.n	800cdd8 <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800cdca:	7dfb      	ldrb	r3, [r7, #23]
 800cdcc:	68ba      	ldr	r2, [r7, #8]
 800cdce:	4413      	add	r3, r2
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800cdd6:	e043      	b.n	800ce60 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800cdd8:	7dfb      	ldrb	r3, [r7, #23]
 800cdda:	68ba      	ldr	r2, [r7, #8]
 800cddc:	3348      	adds	r3, #72	; 0x48
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	4413      	add	r3, r2
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	db0e      	blt.n	800ce06 <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800cde8:	7dfb      	ldrb	r3, [r7, #23]
 800cdea:	68ba      	ldr	r2, [r7, #8]
 800cdec:	3360      	adds	r3, #96	; 0x60
 800cdee:	009b      	lsls	r3, r3, #2
 800cdf0:	4413      	add	r3, r2
 800cdf2:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	db06      	blt.n	800ce06 <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800cdf8:	7dfb      	ldrb	r3, [r7, #23]
 800cdfa:	68ba      	ldr	r2, [r7, #8]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800ce04:	e02c      	b.n	800ce60 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800ce06:	7dfb      	ldrb	r3, [r7, #23]
 800ce08:	68ba      	ldr	r2, [r7, #8]
 800ce0a:	3348      	adds	r3, #72	; 0x48
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	4413      	add	r3, r2
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	da1e      	bge.n	800ce54 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800ce16:	7dfb      	ldrb	r3, [r7, #23]
 800ce18:	68ba      	ldr	r2, [r7, #8]
 800ce1a:	3360      	adds	r3, #96	; 0x60
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	4413      	add	r3, r2
 800ce20:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	db16      	blt.n	800ce54 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800ce26:	7dbb      	ldrb	r3, [r7, #22]
 800ce28:	68ba      	ldr	r2, [r7, #8]
 800ce2a:	3348      	adds	r3, #72	; 0x48
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	4413      	add	r3, r2
 800ce30:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	db0e      	blt.n	800ce54 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800ce36:	7dbb      	ldrb	r3, [r7, #22]
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	3360      	adds	r3, #96	; 0x60
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	4413      	add	r3, r2
 800ce40:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	da06      	bge.n	800ce54 <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800ce46:	7dfb      	ldrb	r3, [r7, #23]
 800ce48:	68ba      	ldr	r2, [r7, #8]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800ce52:	e005      	b.n	800ce60 <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800ce54:	7dfb      	ldrb	r3, [r7, #23]
 800ce56:	68ba      	ldr	r2, [r7, #8]
 800ce58:	4413      	add	r3, r2
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800ce60:	7dfb      	ldrb	r3, [r7, #23]
 800ce62:	68ba      	ldr	r2, [r7, #8]
 800ce64:	4413      	add	r3, r2
 800ce66:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d035      	beq.n	800ceda <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800ce6e:	69bb      	ldr	r3, [r7, #24]
 800ce70:	7ffa      	ldrb	r2, [r7, #31]
 800ce72:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800ce74:	7dfb      	ldrb	r3, [r7, #23]
 800ce76:	68ba      	ldr	r2, [r7, #8]
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	4413      	add	r3, r2
 800ce7c:	685c      	ldr	r4, [r3, #4]
 800ce7e:	7dfb      	ldrb	r3, [r7, #23]
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	3318      	adds	r3, #24
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	4413      	add	r3, r2
 800ce88:	685d      	ldr	r5, [r3, #4]
 800ce8a:	7dfb      	ldrb	r3, [r7, #23]
 800ce8c:	68ba      	ldr	r2, [r7, #8]
 800ce8e:	3330      	adds	r3, #48	; 0x30
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	4413      	add	r3, r2
 800ce94:	685e      	ldr	r6, [r3, #4]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	689b      	ldr	r3, [r3, #8]
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	78d2      	ldrb	r2, [r2, #3]
 800ce9e:	69b9      	ldr	r1, [r7, #24]
 800cea0:	3118      	adds	r1, #24
 800cea2:	7ff8      	ldrb	r0, [r7, #31]
 800cea4:	9105      	str	r1, [sp, #20]
 800cea6:	9204      	str	r2, [sp, #16]
 800cea8:	9303      	str	r3, [sp, #12]
 800ceaa:	2300      	movs	r3, #0
 800ceac:	9302      	str	r3, [sp, #8]
 800ceae:	2300      	movs	r3, #0
 800ceb0:	9301      	str	r3, [sp, #4]
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	9300      	str	r3, [sp, #0]
 800ceb6:	4633      	mov	r3, r6
 800ceb8:	462a      	mov	r2, r5
 800ceba:	4621      	mov	r1, r4
 800cebc:	f000 f81c 	bl	800cef8 <VL53LX_f_028>
 800cec0:	4603      	mov	r3, r0
 800cec2:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800cec4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cec8:	f113 0f0f 	cmn.w	r3, #15
 800cecc:	d105      	bne.n	800ceda <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800cece:	7dfb      	ldrb	r3, [r7, #23]
 800ced0:	68ba      	ldr	r2, [r7, #8]
 800ced2:	4413      	add	r3, r2
 800ced4:	2200      	movs	r2, #0
 800ced6:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800ceda:	7ffb      	ldrb	r3, [r7, #31]
 800cedc:	3301      	adds	r3, #1
 800cede:	77fb      	strb	r3, [r7, #31]
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	791b      	ldrb	r3, [r3, #4]
 800cee4:	7ffa      	ldrb	r2, [r7, #31]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	f4ff af40 	bcc.w	800cd6c <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800ceec:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3724      	adds	r7, #36	; 0x24
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cef8 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800cef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cefc:	b09e      	sub	sp, #120	; 0x78
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	64b9      	str	r1, [r7, #72]	; 0x48
 800cf02:	647a      	str	r2, [r7, #68]	; 0x44
 800cf04:	643b      	str	r3, [r7, #64]	; 0x40
 800cf06:	4603      	mov	r3, r0
 800cf08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800cf0c:	23f1      	movs	r3, #241	; 0xf1
 800cf0e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800cf12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf16:	f04f 0300 	mov.w	r3, #0
 800cf1a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800cf1e:	f04f 0200 	mov.w	r2, #0
 800cf22:	f04f 0300 	mov.w	r3, #0
 800cf26:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  half_b_minus_amb = 0;
 800cf2a:	f04f 0200 	mov.w	r2, #0
 800cf2e:	f04f 0300 	mov.w	r3, #0
 800cf32:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800cf36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf38:	4618      	mov	r0, r3
 800cf3a:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800cf3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cf42:	461a      	mov	r2, r3
 800cf44:	ea4f 73e2 	mov.w	r3, r2, asr #31
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800cf48:	ebb0 0802 	subs.w	r8, r0, r2
 800cf4c:	eb61 0903 	sbc.w	r9, r1, r3
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800cf50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf52:	461a      	mov	r2, r3
 800cf54:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800cf58:	ebb8 0a02 	subs.w	sl, r8, r2
 800cf5c:	eb69 0b03 	sbc.w	fp, r9, r3
 800cf60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf64:	461a      	mov	r2, r3
 800cf66:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800cf6a:	ebba 0402 	subs.w	r4, sl, r2
 800cf6e:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800cf72:	f04f 0200 	mov.w	r2, #0
 800cf76:	f04f 0300 	mov.w	r3, #0
 800cf7a:	032b      	lsls	r3, r5, #12
 800cf7c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800cf80:	0322      	lsls	r2, r4, #12
 800cf82:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800cf86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf88:	4618      	mov	r0, r3
 800cf8a:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800cf8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf92:	461a      	mov	r2, r3
 800cf94:	ea4f 73e2 	mov.w	r3, r2, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800cf98:	1a84      	subs	r4, r0, r2
 800cf9a:	63bc      	str	r4, [r7, #56]	; 0x38
 800cf9c:	eb61 0303 	sbc.w	r3, r1, r3
 800cfa0:	63fb      	str	r3, [r7, #60]	; 0x3c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800cfa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800cfac:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800cfb0:	4621      	mov	r1, r4
 800cfb2:	1a89      	subs	r1, r1, r2
 800cfb4:	6339      	str	r1, [r7, #48]	; 0x30
 800cfb6:	4629      	mov	r1, r5
 800cfb8:	eb61 0303 	sbc.w	r3, r1, r3
 800cfbc:	637b      	str	r3, [r7, #52]	; 0x34
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800cfbe:	f04f 0200 	mov.w	r2, #0
 800cfc2:	f04f 0300 	mov.w	r3, #0
 800cfc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800cfca:	4629      	mov	r1, r5
 800cfcc:	030b      	lsls	r3, r1, #12
 800cfce:	4621      	mov	r1, r4
 800cfd0:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800cfd4:	4621      	mov	r1, r4
 800cfd6:	030a      	lsls	r2, r1, #12
 800cfd8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	if (half_b_minus_amb != 0) {
 800cfdc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	f000 809c 	beq.w	800d11e <VL53LX_f_028+0x226>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800cfe6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800cfea:	f04f 0000 	mov.w	r0, #0
 800cfee:	f04f 0100 	mov.w	r1, #0
 800cff2:	0319      	lsls	r1, r3, #12
 800cff4:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800cff8:	0310      	lsls	r0, r2, #12
 800cffa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cffe:	1814      	adds	r4, r2, r0
 800d000:	623c      	str	r4, [r7, #32]
 800d002:	414b      	adcs	r3, r1
 800d004:	627b      	str	r3, [r7, #36]	; 0x24
 800d006:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d00a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800d00e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d012:	1891      	adds	r1, r2, r2
 800d014:	61b9      	str	r1, [r7, #24]
 800d016:	415b      	adcs	r3, r3
 800d018:	61fb      	str	r3, [r7, #28]
 800d01a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d01e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d022:	f7f3 f925 	bl	8000270 <__aeabi_ldivmod>
 800d026:	4602      	mov	r2, r0
 800d028:	460b      	mov	r3, r1
 800d02a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		mean_phase  +=  2048;
 800d02e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d032:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800d036:	6139      	str	r1, [r7, #16]
 800d038:	f143 0300 	adc.w	r3, r3, #0
 800d03c:	617b      	str	r3, [r7, #20]
 800d03e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d042:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase  += (4096 * (int64_t)bin);
 800d046:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 800d04a:	f04f 0100 	mov.w	r1, #0
 800d04e:	f04f 0200 	mov.w	r2, #0
 800d052:	f04f 0300 	mov.w	r3, #0
 800d056:	030b      	lsls	r3, r1, #12
 800d058:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800d05c:	0302      	lsls	r2, r0, #12
 800d05e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d062:	1884      	adds	r4, r0, r2
 800d064:	60bc      	str	r4, [r7, #8]
 800d066:	eb41 0303 	adc.w	r3, r1, r3
 800d06a:	60fb      	str	r3, [r7, #12]
 800d06c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d070:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800d074:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d078:	1c51      	adds	r1, r2, #1
 800d07a:	62b9      	str	r1, [r7, #40]	; 0x28
 800d07c:	f143 0300 	adc.w	r3, r3, #0
 800d080:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d082:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d086:	462b      	mov	r3, r5
 800d088:	0fdb      	lsrs	r3, r3, #31
 800d08a:	461a      	mov	r2, r3
 800d08c:	f04f 0300 	mov.w	r3, #0
 800d090:	4621      	mov	r1, r4
 800d092:	1851      	adds	r1, r2, r1
 800d094:	6039      	str	r1, [r7, #0]
 800d096:	4629      	mov	r1, r5
 800d098:	eb43 0101 	adc.w	r1, r3, r1
 800d09c:	6079      	str	r1, [r7, #4]
 800d09e:	f04f 0200 	mov.w	r2, #0
 800d0a2:	f04f 0300 	mov.w	r3, #0
 800d0a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d0aa:	4621      	mov	r1, r4
 800d0ac:	084a      	lsrs	r2, r1, #1
 800d0ae:	4629      	mov	r1, r5
 800d0b0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800d0b4:	4629      	mov	r1, r5
 800d0b6:	104b      	asrs	r3, r1, #1
 800d0b8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		if (mean_phase  < 0)
 800d0bc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d0c0:	2a00      	cmp	r2, #0
 800d0c2:	f173 0300 	sbcs.w	r3, r3, #0
 800d0c6:	da05      	bge.n	800d0d4 <VL53LX_f_028+0x1dc>
			mean_phase = 0;
 800d0c8:	f04f 0200 	mov.w	r2, #0
 800d0cc:	f04f 0300 	mov.w	r3, #0
 800d0d0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800d0d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d0d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d0dc:	f04f 0100 	mov.w	r1, #0
 800d0e0:	4290      	cmp	r0, r2
 800d0e2:	eb71 0303 	sbcs.w	r3, r1, r3
 800d0e6:	da05      	bge.n	800d0f4 <VL53LX_f_028+0x1fc>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800d0e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0ec:	f04f 0300 	mov.w	r3, #0
 800d0f0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		mean_phase32 = (int32_t)mean_phase;
 800d0f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0f6:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800d0f8:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800d0fc:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800d0fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d100:	fb93 f1f2 	sdiv	r1, r3, r2
 800d104:	fb02 f201 	mul.w	r2, r2, r1
 800d108:	1a9b      	subs	r3, r3, r2
 800d10a:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase = mean_phase32;
 800d10c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d10e:	461a      	mov	r2, r3
 800d110:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d114:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		status = VL53LX_ERROR_NONE;
 800d118:	2300      	movs	r3, #0
 800d11a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	}

	*pmean_phase = (uint32_t)mean_phase;
 800d11e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d120:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d124:	601a      	str	r2, [r3, #0]

	return status;
 800d126:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3778      	adds	r7, #120	; 0x78
 800d12e:	46bd      	mov	sp, r7
 800d130:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d134 <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800d134:	b480      	push	{r7}
 800d136:	b087      	sub	sp, #28
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60ba      	str	r2, [r7, #8]
 800d13c:	607b      	str	r3, [r7, #4]
 800d13e:	4603      	mov	r3, r0
 800d140:	73fb      	strb	r3, [r7, #15]
 800d142:	460b      	mov	r3, r1
 800d144:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800d146:	2300      	movs	r3, #0
 800d148:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800d14a:	2300      	movs	r3, #0
 800d14c:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800d154:	7bfa      	ldrb	r2, [r7, #15]
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	3206      	adds	r2, #6
 800d15a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d15e:	6a3b      	ldr	r3, [r7, #32]
 800d160:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800d162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d164:	2200      	movs	r2, #0
 800d166:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800d168:	2300      	movs	r3, #0
 800d16a:	75fb      	strb	r3, [r7, #23]
 800d16c:	e02f      	b.n	800d1ce <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800d16e:	7bfa      	ldrb	r2, [r7, #15]
 800d170:	7dfb      	ldrb	r3, [r7, #23]
 800d172:	4413      	add	r3, r2
 800d174:	68ba      	ldr	r2, [r7, #8]
 800d176:	7a92      	ldrb	r2, [r2, #10]
 800d178:	441a      	add	r2, r3
 800d17a:	7bbb      	ldrb	r3, [r7, #14]
 800d17c:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800d17e:	68ba      	ldr	r2, [r7, #8]
 800d180:	7a92      	ldrb	r2, [r2, #10]
 800d182:	fb93 f1f2 	sdiv	r1, r3, r2
 800d186:	fb02 f201 	mul.w	r2, r2, r1
 800d18a:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800d18c:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800d18e:	7dfa      	ldrb	r2, [r7, #23]
 800d190:	7bbb      	ldrb	r3, [r7, #14]
 800d192:	429a      	cmp	r2, r3
 800d194:	d20a      	bcs.n	800d1ac <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	7db9      	ldrb	r1, [r7, #22]
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	3106      	adds	r1, #6
 800d1a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d1a4:	441a      	add	r2, r3
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	601a      	str	r2, [r3, #0]
 800d1aa:	e00d      	b.n	800d1c8 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800d1ac:	7dfa      	ldrb	r2, [r7, #23]
 800d1ae:	7bbb      	ldrb	r3, [r7, #14]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d909      	bls.n	800d1c8 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b6:	681a      	ldr	r2, [r3, #0]
 800d1b8:	7db9      	ldrb	r1, [r7, #22]
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	3106      	adds	r1, #6
 800d1be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d1c2:	441a      	add	r2, r3
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c6:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800d1c8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	75fb      	strb	r3, [r7, #23]
 800d1ce:	7bbb      	ldrb	r3, [r7, #14]
 800d1d0:	005a      	lsls	r2, r3, #1
 800d1d2:	7dfb      	ldrb	r3, [r7, #23]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	daca      	bge.n	800d16e <VL53LX_f_022+0x3a>
	}
}
 800d1d8:	bf00      	nop
 800d1da:	bf00      	nop
 800d1dc:	371c      	adds	r7, #28
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e4:	4770      	bx	lr

0800d1e6 <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b088      	sub	sp, #32
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	60ba      	str	r2, [r7, #8]
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	81fb      	strh	r3, [r7, #14]
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	81bb      	strh	r3, [r7, #12]
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800d200:	2300      	movs	r3, #0
 800d202:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800d204:	2300      	movs	r3, #0
 800d206:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800d208:	2300      	movs	r3, #0
 800d20a:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800d20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20e:	89fa      	ldrh	r2, [r7, #14]
 800d210:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800d212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d214:	89ba      	ldrh	r2, [r7, #12]
 800d216:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800d218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21a:	68ba      	ldr	r2, [r7, #8]
 800d21c:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800d21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d220:	88fa      	ldrh	r2, [r7, #6]
 800d222:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800d224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d226:	8a5b      	ldrh	r3, [r3, #18]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d101      	bne.n	800d230 <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800d22c:	23f1      	movs	r3, #241	; 0xf1
 800d22e:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800d230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d232:	699b      	ldr	r3, [r3, #24]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d101      	bne.n	800d23c <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800d238:	23f1      	movs	r3, #241	; 0xf1
 800d23a:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800d23c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d16f      	bne.n	800d324 <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800d244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d246:	8a5b      	ldrh	r3, [r3, #18]
 800d248:	4618      	mov	r0, r3
 800d24a:	f7fd faa5 	bl	800a798 <VL53LX_calc_pll_period_us>
 800d24e:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800d250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d252:	699b      	ldr	r3, [r3, #24]
 800d254:	3301      	adds	r3, #1
 800d256:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800d258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25a:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800d25c:	4619      	mov	r1, r3
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d264:	6978      	ldr	r0, [r7, #20]
 800d266:	f7fd faae 	bl	800a7c6 <VL53LX_duration_maths>
 800d26a:	4602      	mov	r2, r0
 800d26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26e:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800d270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d272:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800d274:	0119      	lsls	r1, r3, #4
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d27c:	6978      	ldr	r0, [r7, #20]
 800d27e:	f7fd faa2 	bl	800a7c6 <VL53LX_duration_maths>
 800d282:	4602      	mov	r2, r0
 800d284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d286:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800d288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800d28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28e:	69db      	ldr	r3, [r3, #28]
 800d290:	4619      	mov	r1, r3
 800d292:	4610      	mov	r0, r2
 800d294:	f7fd fd00 	bl	800ac98 <VL53LX_rate_maths>
 800d298:	4603      	mov	r3, r0
 800d29a:	461a      	mov	r2, r3
 800d29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29e:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800d2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800d2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a6:	6a1b      	ldr	r3, [r3, #32]
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	f7fd fcf4 	bl	800ac98 <VL53LX_rate_maths>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b6:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800d2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800d2bc:	461a      	mov	r2, r3
 800d2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c0:	6a1b      	ldr	r3, [r3, #32]
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	4610      	mov	r0, r2
 800d2c6:	f7fd fce7 	bl	800ac98 <VL53LX_rate_maths>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d0:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800d2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d2d6:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800d2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2da:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 800d2dc:	4413      	add	r3, r2
 800d2de:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800d2e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d905      	bls.n	800d2f4 <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800d2e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d2ec:	69ba      	ldr	r2, [r7, #24]
 800d2ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2f2:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800d2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f6:	8ada      	ldrh	r2, [r3, #22]
 800d2f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2fc:	69b9      	ldr	r1, [r7, #24]
 800d2fe:	2006      	movs	r0, #6
 800d300:	f7fd fd0f 	bl	800ad22 <VL53LX_rate_per_spad_maths>
 800d304:	4603      	mov	r3, r0
 800d306:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800d308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30a:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800d30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d312:	8ad9      	ldrh	r1, [r3, #22]
 800d314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d316:	69db      	ldr	r3, [r3, #28]
 800d318:	461a      	mov	r2, r3
 800d31a:	f7fd faae 	bl	800a87a <VL53LX_events_per_spad_maths>
 800d31e:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800d320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d322:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800d324:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3720      	adds	r7, #32
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800d330:	b590      	push	{r4, r7, lr}
 800d332:	b085      	sub	sp, #20
 800d334:	af02      	add	r7, sp, #8
 800d336:	4603      	mov	r3, r0
 800d338:	603a      	str	r2, [r7, #0]
 800d33a:	80fb      	strh	r3, [r7, #6]
 800d33c:	460b      	mov	r3, r1
 800d33e:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	8a58      	ldrh	r0, [r3, #18]
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	8a9c      	ldrh	r4, [r3, #20]
 800d34c:	88fb      	ldrh	r3, [r7, #6]
 800d34e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d352:	9201      	str	r2, [sp, #4]
 800d354:	9300      	str	r3, [sp, #0]
 800d356:	2300      	movs	r3, #0
 800d358:	4622      	mov	r2, r4
 800d35a:	f7fd fd17 	bl	800ad8c <VL53LX_range_maths>
 800d35e:	4603      	mov	r3, r0
 800d360:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	8a58      	ldrh	r0, [r3, #18]
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	8a9c      	ldrh	r4, [r3, #20]
 800d376:	88fb      	ldrh	r3, [r7, #6]
 800d378:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d37c:	9201      	str	r2, [sp, #4]
 800d37e:	9300      	str	r3, [sp, #0]
 800d380:	2300      	movs	r3, #0
 800d382:	4622      	mov	r2, r4
 800d384:	f7fd fd02 	bl	800ad8c <VL53LX_range_maths>
 800d388:	4603      	mov	r3, r0
 800d38a:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	8a58      	ldrh	r0, [r3, #18]
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	8a9c      	ldrh	r4, [r3, #20]
 800d3a0:	88fb      	ldrh	r3, [r7, #6]
 800d3a2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d3a6:	9201      	str	r2, [sp, #4]
 800d3a8:	9300      	str	r3, [sp, #0]
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	4622      	mov	r2, r4
 800d3ae:	f7fd fced 	bl	800ad8c <VL53LX_range_maths>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 800d3bc:	bf00      	nop
 800d3be:	370c      	adds	r7, #12
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd90      	pop	{r4, r7, pc}

0800d3c4 <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b086      	sub	sp, #24
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	60b9      	str	r1, [r7, #8]
 800d3ce:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	757b      	strb	r3, [r7, #21]





	memcpy(
 800d3e0:	22ac      	movs	r2, #172	; 0xac
 800d3e2:	68b9      	ldr	r1, [r7, #8]
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f006 fc8f 	bl	8013d08 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	75fb      	strb	r3, [r7, #23]
 800d3ee:	e008      	b.n	800d402 <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800d3f0:	7dfa      	ldrb	r2, [r7, #23]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	3206      	adds	r2, #6
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800d3fc:	7dfb      	ldrb	r3, [r7, #23]
 800d3fe:	3301      	adds	r3, #1
 800d400:	75fb      	strb	r3, [r7, #23]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	7a5b      	ldrb	r3, [r3, #9]
 800d406:	7dfa      	ldrb	r2, [r7, #23]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d3f1      	bcc.n	800d3f0 <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800d40c:	68f9      	ldr	r1, [r7, #12]
 800d40e:	68b8      	ldr	r0, [r7, #8]
 800d410:	f000 f878 	bl	800d504 <VL53LX_f_030>
 800d414:	4603      	mov	r3, r0
 800d416:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	7a9a      	ldrb	r2, [r3, #10]
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	7a9b      	ldrb	r3, [r3, #10]
 800d420:	429a      	cmp	r2, r3
 800d422:	d203      	bcs.n	800d42c <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	7a9b      	ldrb	r3, [r3, #10]
 800d428:	75bb      	strb	r3, [r7, #22]
 800d42a:	e002      	b.n	800d432 <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	7a9b      	ldrb	r3, [r3, #10]
 800d430:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800d432:	2300      	movs	r3, #0
 800d434:	75fb      	strb	r3, [r7, #23]
 800d436:	e05c      	b.n	800d4f2 <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800d438:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	db0f      	blt.n	800d460 <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800d440:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d444:	461a      	mov	r2, r3
 800d446:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800d44a:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800d44c:	68ba      	ldr	r2, [r7, #8]
 800d44e:	7a92      	ldrb	r2, [r2, #10]
 800d450:	b252      	sxtb	r2, r2
 800d452:	fb93 f1f2 	sdiv	r1, r3, r2
 800d456:	fb02 f201 	mul.w	r2, r2, r1
 800d45a:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800d45c:	757b      	strb	r3, [r7, #21]
 800d45e:	e013      	b.n	800d488 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	7a9b      	ldrb	r3, [r3, #10]
 800d464:	b25b      	sxtb	r3, r3
 800d466:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800d468:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d46c:	4619      	mov	r1, r3
 800d46e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800d472:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800d474:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800d476:	68ba      	ldr	r2, [r7, #8]
 800d478:	7a92      	ldrb	r2, [r2, #10]
 800d47a:	b252      	sxtb	r2, r2
 800d47c:	fb93 f1f2 	sdiv	r1, r3, r2
 800d480:	fb02 f201 	mul.w	r2, r2, r1
 800d484:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800d486:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800d488:	7d7b      	ldrb	r3, [r7, #21]
 800d48a:	461a      	mov	r2, r3
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	3206      	adds	r2, #6
 800d490:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800d494:	7df9      	ldrb	r1, [r7, #23]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	3106      	adds	r1, #6
 800d49a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	dd12      	ble.n	800d4c8 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800d4a2:	7d7b      	ldrb	r3, [r7, #21]
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	3206      	adds	r2, #6
 800d4aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800d4ae:	7df9      	ldrb	r1, [r7, #23]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	3106      	adds	r1, #6
 800d4b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800d4b8:	7d79      	ldrb	r1, [r7, #21]
 800d4ba:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800d4bc:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	1d82      	adds	r2, r0, #6
 800d4c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d4c6:	e006      	b.n	800d4d6 <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800d4c8:	7d7b      	ldrb	r3, [r7, #21]
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	3206      	adds	r2, #6
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800d4d6:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800d4d8:	7d7b      	ldrb	r3, [r7, #21]
 800d4da:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	3206      	adds	r2, #6
 800d4e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	1d82      	adds	r2, r0, #6
 800d4e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800d4ec:	7dfb      	ldrb	r3, [r7, #23]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	75fb      	strb	r3, [r7, #23]
 800d4f2:	7dfa      	ldrb	r2, [r7, #23]
 800d4f4:	7dbb      	ldrb	r3, [r7, #22]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d39e      	bcc.n	800d438 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800d4fa:	bf00      	nop
 800d4fc:	bf00      	nop
 800d4fe:	3718      	adds	r7, #24
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b086      	sub	sp, #24
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800d50e:	2300      	movs	r3, #0
 800d510:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800d512:	2300      	movs	r3, #0
 800d514:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800d516:	2300      	movs	r3, #0
 800d518:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800d51a:	2300      	movs	r3, #0
 800d51c:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d524:	4618      	mov	r0, r3
 800d526:	f7fd fd0b 	bl	800af40 <VL53LX_decode_vcsel_period>
 800d52a:	4603      	mov	r3, r0
	period = 2048 *
 800d52c:	02db      	lsls	r3, r3, #11
 800d52e:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00a      	beq.n	800d54c <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 800d53c:	68ba      	ldr	r2, [r7, #8]
 800d53e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d542:	68b9      	ldr	r1, [r7, #8]
 800d544:	fb01 f202 	mul.w	r2, r1, r2
 800d548:	1a9b      	subs	r3, r3, r2
 800d54a:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800d552:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800d554:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800d556:	1ad3      	subs	r3, r2, r3
 800d558:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	dd09      	ble.n	800d574 <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d566:	2b00      	cmp	r3, #0
 800d568:	da01      	bge.n	800d56e <VL53LX_f_030+0x6a>
 800d56a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800d56e:	12db      	asrs	r3, r3, #11
 800d570:	75fb      	strb	r3, [r7, #23]
 800d572:	e008      	b.n	800d586 <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	da01      	bge.n	800d582 <VL53LX_f_030+0x7e>
 800d57e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800d582:	12db      	asrs	r3, r3, #11
 800d584:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800d586:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3718      	adds	r7, #24
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800d592:	b580      	push	{r7, lr}
 800d594:	b08e      	sub	sp, #56	; 0x38
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
 800d59a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800d59c:	2300      	movs	r3, #0
 800d59e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800d5c4:	22ac      	movs	r2, #172	; 0xac
 800d5c6:	6879      	ldr	r1, [r7, #4]
 800d5c8:	6838      	ldr	r0, [r7, #0]
 800d5ca:	f006 fb9d 	bl	8013d08 <memcpy>


	podata->VL53LX_p_021 = 0;
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800d5da:	e00a      	b.n	800d5f2 <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800d5dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d5e0:	683a      	ldr	r2, [r7, #0]
 800d5e2:	4413      	add	r3, r2
 800d5e4:	2210      	movs	r2, #16
 800d5e6:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800d5e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800d5f2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d5f6:	2b05      	cmp	r3, #5
 800d5f8:	d9f0      	bls.n	800d5dc <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800d600:	e00b      	b.n	800d61a <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800d602:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	3206      	adds	r2, #6
 800d60a:	2100      	movs	r1, #0
 800d60c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800d610:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d614:	3301      	adds	r3, #1
 800d616:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	7a5b      	ldrb	r3, [r3, #9]
 800d61e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800d622:	429a      	cmp	r2, r3
 800d624:	d3ed      	bcc.n	800d602 <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800d626:	2300      	movs	r3, #0
 800d628:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800d62c:	e014      	b.n	800d658 <VL53LX_f_031+0xc6>
		bin_initial_index[lc] = 0x00;
 800d62e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d632:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d636:	4413      	add	r3, r2
 800d638:	2200      	movs	r2, #0
 800d63a:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800d63e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d642:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d646:	4413      	add	r3, r2
 800d648:	2200      	movs	r2, #0
 800d64a:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800d64e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d652:	3301      	adds	r3, #1
 800d654:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800d658:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d65c:	2b0f      	cmp	r3, #15
 800d65e:	d9e6      	bls.n	800d62e <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800d660:	2300      	movs	r3, #0
 800d662:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800d666:	2300      	movs	r3, #0
 800d668:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800d66c:	e06c      	b.n	800d748 <VL53LX_f_031+0x1b6>

		bin_cfg = pidata->bin_seq[lc];
 800d66e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d672:	687a      	ldr	r2, [r7, #4]
 800d674:	4413      	add	r3, r2
 800d676:	7b1b      	ldrb	r3, [r3, #12]
 800d678:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800d67c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d680:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d684:	4413      	add	r3, r2
 800d686:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d116      	bne.n	800d6bc <VL53LX_f_031+0x12a>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800d68e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d692:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d696:	0092      	lsls	r2, r2, #2
 800d698:	b2d2      	uxtb	r2, r2
 800d69a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d69e:	440b      	add	r3, r1
 800d6a0:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800d6a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d6a8:	683a      	ldr	r2, [r7, #0]
 800d6aa:	4413      	add	r3, r2
 800d6ac:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d6b0:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800d6b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800d6bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d6c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d6c4:	441a      	add	r2, r3
 800d6c6:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800d6ca:	3201      	adds	r2, #1
 800d6cc:	b2d2      	uxtb	r2, r2
 800d6ce:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d6d2:	440b      	add	r3, r1
 800d6d4:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800d6d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d6dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d6e0:	4413      	add	r3, r2
 800d6e2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800d6e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800d6f0:	e021      	b.n	800d736 <VL53LX_f_031+0x1a4>
			podata->bin_data[VL53LX_p_032+i] +=
 800d6f2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d6f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d6fa:	441a      	add	r2, r3
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	3206      	adds	r2, #6
 800d700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800d704:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d708:	009a      	lsls	r2, r3, #2
 800d70a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d70e:	441a      	add	r2, r3
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	3206      	adds	r2, #6
 800d714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800d718:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 800d71c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800d720:	4402      	add	r2, r0
 800d722:	4419      	add	r1, r3
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	3206      	adds	r2, #6
 800d728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800d72c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d730:	3301      	adds	r3, #1
 800d732:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800d736:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d73a:	2b03      	cmp	r3, #3
 800d73c:	d9d9      	bls.n	800d6f2 <VL53LX_f_031+0x160>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800d73e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d742:	3301      	adds	r3, #1
 800d744:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800d748:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d74c:	2b05      	cmp	r3, #5
 800d74e:	d98e      	bls.n	800d66e <VL53LX_f_031+0xdc>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800d750:	2300      	movs	r3, #0
 800d752:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800d756:	e023      	b.n	800d7a0 <VL53LX_f_031+0x20e>

		bin_cfg = podata->bin_seq[lc];
 800d758:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d75c:	683a      	ldr	r2, [r7, #0]
 800d75e:	4413      	add	r3, r2
 800d760:	7b1b      	ldrb	r3, [r3, #12]
 800d762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800d766:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d76a:	2b0f      	cmp	r3, #15
 800d76c:	d80d      	bhi.n	800d78a <VL53LX_f_031+0x1f8>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800d76e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 800d772:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 800d776:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d77a:	440a      	add	r2, r1
 800d77c:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800d780:	683a      	ldr	r2, [r7, #0]
 800d782:	4413      	add	r3, r2
 800d784:	460a      	mov	r2, r1
 800d786:	749a      	strb	r2, [r3, #18]
 800d788:	e005      	b.n	800d796 <VL53LX_f_031+0x204>
		else
			podata->bin_rep[lc] = 0;
 800d78a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d78e:	683a      	ldr	r2, [r7, #0]
 800d790:	4413      	add	r3, r2
 800d792:	2200      	movs	r2, #0
 800d794:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800d796:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d79a:	3301      	adds	r3, #1
 800d79c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800d7a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d7a4:	2b05      	cmp	r3, #5
 800d7a6:	d9d7      	bls.n	800d758 <VL53LX_f_031+0x1c6>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800d7a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800d7ba:	e052      	b.n	800d862 <VL53LX_f_031+0x2d0>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800d7bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d7c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d7c4:	4413      	add	r3, r2
 800d7c6:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800d7ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 800d7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	dd42      	ble.n	800d858 <VL53LX_f_031+0x2c6>

			VL53LX_p_032 = bin_initial_index[lc];
 800d7d2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d7d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d7da:	4413      	add	r3, r2
 800d7dc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800d7e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800d7ea:	e031      	b.n	800d850 <VL53LX_f_031+0x2be>
				podata->bin_data[VL53LX_p_032+i] +=
 800d7ec:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d7f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d7f4:	441a      	add	r2, r3
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	3206      	adds	r2, #6
 800d7fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800d7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d800:	0fda      	lsrs	r2, r3, #31
 800d802:	4413      	add	r3, r2
 800d804:	105b      	asrs	r3, r3, #1
 800d806:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800d808:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d80c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d810:	441a      	add	r2, r3
 800d812:	4401      	add	r1, r0
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	3206      	adds	r2, #6
 800d818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800d81c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d820:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d824:	441a      	add	r2, r3
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	3206      	adds	r2, #6
 800d82a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d82e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d832:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d836:	441a      	add	r2, r3
 800d838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83a:	fb91 f1f3 	sdiv	r1, r1, r3
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	3206      	adds	r2, #6
 800d842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800d846:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d84a:	3301      	adds	r3, #1
 800d84c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800d850:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d854:	2b03      	cmp	r3, #3
 800d856:	d9c9      	bls.n	800d7ec <VL53LX_f_031+0x25a>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800d858:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d85c:	3301      	adds	r3, #1
 800d85e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800d862:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d866:	2b0f      	cmp	r3, #15
 800d868:	d9a8      	bls.n	800d7bc <VL53LX_f_031+0x22a>
		}
	}



	podata->number_of_ambient_bins = 0;
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	2200      	movs	r2, #0
 800d86e:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800d870:	7bfb      	ldrb	r3, [r7, #15]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d102      	bne.n	800d87c <VL53LX_f_031+0x2ea>
		(bin_repeat_count[15] > 0))
 800d876:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d002      	beq.n	800d882 <VL53LX_f_031+0x2f0>
		podata->number_of_ambient_bins = 4;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	2204      	movs	r2, #4
 800d880:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800d882:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 800d886:	4618      	mov	r0, r3
 800d888:	3738      	adds	r7, #56	; 0x38
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800d88e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d890:	b0cb      	sub	sp, #300	; 0x12c
 800d892:	af06      	add	r7, sp, #24
 800d894:	f107 040c 	add.w	r4, r7, #12
 800d898:	6020      	str	r0, [r4, #0]
 800d89a:	f107 0008 	add.w	r0, r7, #8
 800d89e:	6001      	str	r1, [r0, #0]
 800d8a0:	1d39      	adds	r1, r7, #4
 800d8a2:	600a      	str	r2, [r1, #0]
 800d8a4:	463a      	mov	r2, r7
 800d8a6:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800d8ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d8b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800d8b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d8ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800d8be:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800d8c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800d8c6:	f107 0318 	add.w	r3, r7, #24
 800d8ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800d8f6:	463b      	mov	r3, r7
 800d8f8:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800d8fc:	6818      	ldr	r0, [r3, #0]
 800d8fe:	f7ff fe48 	bl	800d592 <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800d902:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d906:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800d908:	b299      	uxth	r1, r3
 800d90a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d90e:	3348      	adds	r3, #72	; 0x48
 800d910:	461a      	mov	r2, r3
 800d912:	2000      	movs	r0, #0
 800d914:	f7fd fb65 	bl	800afe2 <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800d918:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d91c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d920:	3348      	adds	r3, #72	; 0x48
 800d922:	4619      	mov	r1, r3
 800d924:	4610      	mov	r0, r2
 800d926:	f7fd fb1e 	bl	800af66 <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800d92a:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d12d      	bne.n	800d98e <VL53LX_hist_process_data+0x100>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800d932:	1d3b      	adds	r3, r7, #4
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d027      	beq.n	800d98e <VL53LX_hist_process_data+0x100>
		status =
		VL53LX_f_032(
 800d93e:	1d3b      	adds	r3, r7, #4
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800d944:	1d3b      	adds	r3, r7, #4
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 800d94c:	1d3b      	adds	r3, r7, #4
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 800d954:	463b      	mov	r3, r7
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800d95c:	463a      	mov	r2, r7
 800d95e:	6812      	ldr	r2, [r2, #0]
 800d960:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 800d964:	4639      	mov	r1, r7
 800d966:	6809      	ldr	r1, [r1, #0]
 800d968:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 800d96c:	f107 0014 	add.w	r0, r7, #20
 800d970:	9004      	str	r0, [sp, #16]
 800d972:	9103      	str	r1, [sp, #12]
 800d974:	9202      	str	r2, [sp, #8]
 800d976:	9301      	str	r3, [sp, #4]
 800d978:	2300      	movs	r3, #0
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	2300      	movs	r3, #0
 800d97e:	4632      	mov	r2, r6
 800d980:	4629      	mov	r1, r5
 800d982:	4620      	mov	r0, r4
 800d984:	f002 fb0b 	bl	800ff9e <VL53LX_f_032>
 800d988:	4603      	mov	r3, r0
 800d98a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800d98e:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800d992:	2b00      	cmp	r3, #0
 800d994:	d112      	bne.n	800d9bc <VL53LX_hist_process_data+0x12e>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800d996:	1d3b      	adds	r3, r7, #4
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d00c      	beq.n	800d9bc <VL53LX_hist_process_data+0x12e>
		status =
			VL53LX_f_033(
 800d9a2:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d9ac:	3348      	adds	r3, #72	; 0x48
 800d9ae:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800d9b2:	f002 fcf7 	bl	80103a4 <VL53LX_f_033>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800d9bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d9c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 800d9c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d9c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800d9cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d9d0:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800d9d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d9d8:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800d9dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800d9e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 800d9f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800d9fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d9fe:	2200      	movs	r2, #0
 800da00:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 800da04:	2300      	movs	r3, #0
 800da06:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800da0a:	1d3b      	adds	r3, r7, #4
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da12:	2b00      	cmp	r3, #0
 800da14:	d002      	beq.n	800da1c <VL53LX_hist_process_data+0x18e>
		xtalk_enable = 1;
 800da16:	2301      	movs	r3, #1
 800da18:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800da1c:	2300      	movs	r3, #0
 800da1e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800da22:	e0ef      	b.n	800dc04 <VL53LX_hist_process_data+0x376>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800da24:	1d3b      	adds	r3, r7, #4
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800da2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53LX_f_025(
 800da30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da34:	3348      	adds	r3, #72	; 0x48
 800da36:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800da3a:	7814      	ldrb	r4, [r2, #0]
 800da3c:	1d3a      	adds	r2, r7, #4
 800da3e:	f107 0108 	add.w	r1, r7, #8
 800da42:	f107 000c 	add.w	r0, r7, #12
 800da46:	9405      	str	r4, [sp, #20]
 800da48:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800da4c:	9404      	str	r4, [sp, #16]
 800da4e:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 800da52:	9403      	str	r4, [sp, #12]
 800da54:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800da58:	9402      	str	r4, [sp, #8]
 800da5a:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800da5e:	9401      	str	r4, [sp, #4]
 800da60:	9300      	str	r3, [sp, #0]
 800da62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800da66:	6812      	ldr	r2, [r2, #0]
 800da68:	6809      	ldr	r1, [r1, #0]
 800da6a:	6800      	ldr	r0, [r0, #0]
 800da6c:	f7fe fec1 	bl	800c7f2 <VL53LX_f_025>
 800da70:	4603      	mov	r3, r0
 800da72:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800da76:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	f040 80bc 	bne.w	800dbf8 <VL53LX_hist_process_data+0x36a>
 800da80:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800da84:	2b00      	cmp	r3, #0
 800da86:	f040 80b7 	bne.w	800dbf8 <VL53LX_hist_process_data+0x36a>
			continue;



		if (presults->active_results == 0) {
 800da8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800da8e:	7c9b      	ldrb	r3, [r3, #18]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d110      	bne.n	800dab6 <VL53LX_hist_process_data+0x228>
			pdata = &(presults->VL53LX_p_003[0]);
 800da94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800da98:	3314      	adds	r3, #20
 800da9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800da9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800daa2:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800daa4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800daa8:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800daaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800daae:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800dab0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800dab4:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800dab6:	1d3b      	adds	r3, r7, #4
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800dabc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800dac0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	461a      	mov	r2, r3
 800dac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dacc:	fb02 f303 	mul.w	r3, r2, r3
 800dad0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800dad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dad8:	011b      	lsls	r3, r3, #4
 800dada:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800dade:	2300      	movs	r3, #0
 800dae0:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800dae4:	e07f      	b.n	800dbe6 <VL53LX_hist_process_data+0x358>

			pdata = &(presults->VL53LX_p_003[t]);
 800dae6:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800daea:	224c      	movs	r2, #76	; 0x4c
 800daec:	fb02 f303 	mul.w	r3, r2, r3
 800daf0:	3310      	adds	r3, #16
 800daf2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800daf6:	4413      	add	r3, r2
 800daf8:	3304      	adds	r3, #4
 800dafa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800dafe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800db02:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800db06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800db0a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800db0e:	429a      	cmp	r2, r3
 800db10:	dd0e      	ble.n	800db30 <VL53LX_hist_process_data+0x2a2>
				delta_mm =
					pdata->max_range_mm -
 800db12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800db16:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800db1a:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800db1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800db20:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800db24:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800db26:	1ad3      	subs	r3, r2, r3
 800db28:	b29b      	uxth	r3, r3
				delta_mm =
 800db2a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800db2e:	e00d      	b.n	800db4c <VL53LX_hist_process_data+0x2be>
			else
				delta_mm =
					pdata->min_range_mm -
 800db30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800db34:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800db38:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800db3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800db3e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800db42:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800db44:	1ad3      	subs	r3, r2, r3
 800db46:	b29b      	uxth	r3, r3
				delta_mm =
 800db48:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800db4c:	1d3b      	adds	r3, r7, #4
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 800db52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800db56:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	461a      	mov	r2, r3
 800db5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800db62:	fb02 f303 	mul.w	r3, r2, r3
 800db66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 800db6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800db6e:	015b      	lsls	r3, r3, #5
 800db70:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 800db74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800db78:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800db7c:	1d3b      	adds	r3, r7, #4
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 800db84:	429a      	cmp	r2, r3
 800db86:	dd29      	ble.n	800dbdc <VL53LX_hist_process_data+0x34e>
			pdata->median_range_mm  <
 800db88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800db8c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800db90:	1d3b      	adds	r3, r7, #4
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800db98:	429a      	cmp	r2, r3
 800db9a:	da1f      	bge.n	800dbdc <VL53LX_hist_process_data+0x34e>
			pdata->VL53LX_p_009 <
 800db9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800dba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800dba2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d918      	bls.n	800dbdc <VL53LX_hist_process_data+0x34e>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800dbaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800dbae:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dbb0:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800dbb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d910      	bls.n	800dbdc <VL53LX_hist_process_data+0x34e>
			delta_mm <
 800dbba:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800dbbe:	1d3a      	adds	r2, r7, #4
 800dbc0:	6812      	ldr	r2, [r2, #0]
 800dbc2:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	da09      	bge.n	800dbdc <VL53LX_hist_process_data+0x34e>



				memcpy(
					&(presults->xmonitor),
 800dbc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dbcc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 800dbd0:	224c      	movs	r2, #76	; 0x4c
 800dbd2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f006 f896 	bl	8013d08 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800dbdc:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800dbe6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dbea:	7c9b      	ldrb	r3, [r3, #18]
 800dbec:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	f4ff af78 	bcc.w	800dae6 <VL53LX_hist_process_data+0x258>
 800dbf6:	e000      	b.n	800dbfa <VL53LX_hist_process_data+0x36c>
			continue;
 800dbf8:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800dbfa:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800dbfe:	3301      	adds	r3, #1
 800dc00:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800dc04:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800dc08:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	f67f af09 	bls.w	800da24 <VL53LX_hist_process_data+0x196>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800dc12:	1d3b      	adds	r3, r7, #4
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800dc1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 800dc1e:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc2c <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b086      	sub	sp, #24
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	460b      	mov	r3, r1
 800dc36:	607a      	str	r2, [r7, #4]
 800dc38:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800dc3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d104      	bne.n	800dc50 <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800dc46:	68f8      	ldr	r0, [r7, #12]
 800dc48:	f7f9 fed3 	bl	80079f2 <VL53LX_disable_firmware>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800dc50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d104      	bne.n	800dc62 <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800dc58:	68f8      	ldr	r0, [r7, #12]
 800dc5a:	f7f9 fefb 	bl	8007a54 <VL53LX_enable_powerforce>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800dc62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d105      	bne.n	800dc76 <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800dc6a:	21fa      	movs	r1, #250	; 0xfa
 800dc6c:	68f8      	ldr	r0, [r7, #12]
 800dc6e:	f000 fc47 	bl	800e500 <VL53LX_WaitUs>
 800dc72:	4603      	mov	r3, r0
 800dc74:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800dc76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d107      	bne.n	800dc8e <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800dc7e:	2201      	movs	r2, #1
 800dc80:	f240 7181 	movw	r1, #1921	; 0x781
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f000 fb47 	bl	800e318 <VL53LX_WrByte>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800dc8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d107      	bne.n	800dca6 <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800dc96:	2205      	movs	r2, #5
 800dc98:	f240 6183 	movw	r1, #1667	; 0x683
 800dc9c:	68f8      	ldr	r0, [r7, #12]
 800dc9e:	f000 fb3b 	bl	800e318 <VL53LX_WrByte>
 800dca2:	4603      	mov	r3, r0
 800dca4:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800dca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d105      	bne.n	800dcba <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800dcae:	6879      	ldr	r1, [r7, #4]
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	f000 fc25 	bl	800e500 <VL53LX_WaitUs>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800dcba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d107      	bne.n	800dcd2 <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800dcc8:	68f8      	ldr	r0, [r7, #12]
 800dcca:	f000 fb25 	bl	800e318 <VL53LX_WrByte>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800dcd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d108      	bne.n	800dcec <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800dcda:	897b      	ldrh	r3, [r7, #10]
 800dcdc:	461a      	mov	r2, r3
 800dcde:	f240 7184 	movw	r1, #1924	; 0x784
 800dce2:	68f8      	ldr	r0, [r7, #12]
 800dce4:	f000 fb42 	bl	800e36c <VL53LX_WrWord>
 800dce8:	4603      	mov	r3, r0
 800dcea:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800dcec:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3718      	adds	r7, #24
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b086      	sub	sp, #24
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	607b      	str	r3, [r7, #4]
 800dd02:	460b      	mov	r3, r1
 800dd04:	72fb      	strb	r3, [r7, #11]
 800dd06:	4613      	mov	r3, r2
 800dd08:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800dd12:	7afb      	ldrb	r3, [r7, #11]
 800dd14:	75bb      	strb	r3, [r7, #22]
 800dd16:	e041      	b.n	800dd9c <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800dd18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d108      	bne.n	800dd32 <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800dd20:	7dbb      	ldrb	r3, [r7, #22]
 800dd22:	461a      	mov	r2, r3
 800dd24:	f240 7194 	movw	r1, #1940	; 0x794
 800dd28:	68f8      	ldr	r0, [r7, #12]
 800dd2a:	f000 faf5 	bl	800e318 <VL53LX_WrByte>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800dd32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d107      	bne.n	800dd4a <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f240 7183 	movw	r1, #1923	; 0x783
 800dd40:	68f8      	ldr	r0, [r7, #12]
 800dd42:	f000 fae9 	bl	800e318 <VL53LX_WrByte>
 800dd46:	4603      	mov	r3, r0
 800dd48:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800dd4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d105      	bne.n	800dd5e <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800dd52:	2105      	movs	r1, #5
 800dd54:	68f8      	ldr	r0, [r7, #12]
 800dd56:	f000 fbd3 	bl	800e500 <VL53LX_WaitUs>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800dd5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d107      	bne.n	800dd76 <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800dd66:	2201      	movs	r2, #1
 800dd68:	f240 7183 	movw	r1, #1923	; 0x783
 800dd6c:	68f8      	ldr	r0, [r7, #12]
 800dd6e:	f000 fad3 	bl	800e318 <VL53LX_WrByte>
 800dd72:	4603      	mov	r3, r0
 800dd74:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800dd76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d108      	bne.n	800dd90 <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800dd7e:	2304      	movs	r3, #4
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	f000 fa90 	bl	800e2ac <VL53LX_ReadMulti>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	3304      	adds	r3, #4
 800dd94:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800dd96:	7dbb      	ldrb	r3, [r7, #22]
 800dd98:	3301      	adds	r3, #1
 800dd9a:	75bb      	strb	r3, [r7, #22]
 800dd9c:	7dba      	ldrb	r2, [r7, #22]
 800dd9e:	7af9      	ldrb	r1, [r7, #11]
 800dda0:	7abb      	ldrb	r3, [r7, #10]
 800dda2:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 800dda4:	429a      	cmp	r2, r3
 800dda6:	dbb7      	blt.n	800dd18 <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800dda8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3718      	adds	r7, #24
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800ddc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d107      	bne.n	800ddd8 <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800ddc8:	2201      	movs	r2, #1
 800ddca:	f240 7183 	movw	r1, #1923	; 0x783
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f000 faa2 	bl	800e318 <VL53LX_WrByte>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800ddd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d107      	bne.n	800ddf0 <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800dde0:	2200      	movs	r2, #0
 800dde2:	f240 7181 	movw	r1, #1921	; 0x781
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 fa96 	bl	800e318 <VL53LX_WrByte>
 800ddec:	4603      	mov	r3, r0
 800ddee:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800ddf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d104      	bne.n	800de02 <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f7f9 fe3d 	bl	8007a78 <VL53LX_disable_powerforce>
 800ddfe:	4603      	mov	r3, r0
 800de00:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800de02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d104      	bne.n	800de14 <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7f9 fddf 	bl	80079ce <VL53LX_enable_firmware>
 800de10:	4603      	mov	r3, r0
 800de12:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800de14:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800de18:	4618      	mov	r0, r3
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800de20:	b480      	push	{r7}
 800de22:	b087      	sub	sp, #28
 800de24:	af00      	add	r7, sp, #0
 800de26:	4603      	mov	r3, r0
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	607a      	str	r2, [r7, #4]
 800de2c:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800de2e:	2300      	movs	r3, #0
 800de30:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800de32:	2300      	movs	r3, #0
 800de34:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800de36:	89fb      	ldrh	r3, [r7, #14]
 800de38:	2b03      	cmp	r3, #3
 800de3a:	d802      	bhi.n	800de42 <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800de3c:	f06f 0308 	mvn.w	r3, #8
 800de40:	e018      	b.n	800de74 <VL53LX_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 800de42:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de46:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	3302      	adds	r3, #2
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	b29b      	uxth	r3, r3
 800de50:	8afa      	ldrh	r2, [r7, #22]
 800de52:	1ad3      	subs	r3, r2, r3
 800de54:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800de56:	8afb      	ldrh	r3, [r7, #22]
 800de58:	2bff      	cmp	r3, #255	; 0xff
 800de5a:	d901      	bls.n	800de60 <VL53LX_nvm_decode_optical_centre+0x40>
		tmp = 0;
 800de5c:	2300      	movs	r3, #0
 800de5e:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800de60:	8afb      	ldrh	r3, [r7, #22]
 800de62:	b2da      	uxtb	r2, r3
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	78da      	ldrb	r2, [r3, #3]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	705a      	strb	r2, [r3, #1]

	return status;
 800de70:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800de74:	4618      	mov	r0, r3
 800de76:	371c      	adds	r7, #28
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr

0800de80 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800de80:	b590      	push	{r4, r7, lr}
 800de82:	b087      	sub	sp, #28
 800de84:	af00      	add	r7, sp, #0
 800de86:	4603      	mov	r3, r0
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	607a      	str	r2, [r7, #4]
 800de8c:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800de8e:	2300      	movs	r3, #0
 800de90:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800de92:	2300      	movs	r3, #0
 800de94:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800de96:	2300      	movs	r3, #0
 800de98:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800de9a:	89fb      	ldrh	r3, [r7, #14]
 800de9c:	2b37      	cmp	r3, #55	; 0x37
 800de9e:	d802      	bhi.n	800dea6 <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800dea0:	f06f 0308 	mvn.w	r3, #8
 800dea4:	e03e      	b.n	800df24 <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800dea6:	68b9      	ldr	r1, [r7, #8]
 800dea8:	2002      	movs	r0, #2
 800deaa:	f7f9 fc76 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800deae:	4603      	mov	r3, r0
 800deb0:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	3302      	adds	r3, #2
 800deba:	4619      	mov	r1, r3
 800debc:	2002      	movs	r0, #2
 800debe:	f7f9 fc6c 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800dec2:	4603      	mov	r3, r0
 800dec4:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800dece:	099b      	lsrs	r3, r3, #6
 800ded0:	b29a      	uxth	r2, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2219      	movs	r2, #25
 800deda:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2205      	movs	r2, #5
 800dee0:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2205      	movs	r2, #5
 800dee6:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	3304      	adds	r3, #4
 800deec:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800deee:	2300      	movs	r3, #0
 800def0:	74fb      	strb	r3, [r7, #19]
 800def2:	e012      	b.n	800df1a <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800def4:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800def6:	6979      	ldr	r1, [r7, #20]
 800def8:	2002      	movs	r0, #2
 800defa:	f7f9 fc4e 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800defe:	4603      	mov	r3, r0
 800df00:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	1d23      	adds	r3, r4, #4
 800df06:	005b      	lsls	r3, r3, #1
 800df08:	4413      	add	r3, r2
 800df0a:	460a      	mov	r2, r1
 800df0c:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	3302      	adds	r3, #2
 800df12:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800df14:	7cfb      	ldrb	r3, [r7, #19]
 800df16:	3301      	adds	r3, #1
 800df18:	74fb      	strb	r3, [r7, #19]
 800df1a:	7cfb      	ldrb	r3, [r7, #19]
 800df1c:	2b18      	cmp	r3, #24
 800df1e:	d9e9      	bls.n	800def4 <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800df20:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800df24:	4618      	mov	r0, r3
 800df26:	371c      	adds	r7, #28
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd90      	pop	{r4, r7, pc}

0800df2c <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b086      	sub	sp, #24
 800df30:	af00      	add	r7, sp, #0
 800df32:	4603      	mov	r3, r0
 800df34:	60b9      	str	r1, [r7, #8]
 800df36:	607a      	str	r2, [r7, #4]
 800df38:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800df3a:	2300      	movs	r3, #0
 800df3c:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800df3e:	89fb      	ldrh	r3, [r7, #14]
 800df40:	2b07      	cmp	r3, #7
 800df42:	d802      	bhi.n	800df4a <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800df44:	f06f 0308 	mvn.w	r3, #8
 800df48:	e027      	b.n	800df9a <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800df4a:	68b9      	ldr	r1, [r7, #8]
 800df4c:	2002      	movs	r0, #2
 800df4e:	f7f9 fc24 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800df52:	4603      	mov	r3, r0
 800df54:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	3302      	adds	r3, #2
 800df5e:	4619      	mov	r1, r3
 800df60:	2002      	movs	r0, #2
 800df62:	f7f9 fc1a 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800df66:	4603      	mov	r3, r0
 800df68:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	3304      	adds	r3, #4
 800df72:	4619      	mov	r1, r3
 800df74:	2002      	movs	r0, #2
 800df76:	f7f9 fc10 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800df7a:	4603      	mov	r3, r0
 800df7c:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	3306      	adds	r3, #6
 800df86:	4619      	mov	r1, r3
 800df88:	2002      	movs	r0, #2
 800df8a:	f7f9 fc06 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800df8e:	4603      	mov	r3, r0
 800df90:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	80da      	strh	r2, [r3, #6]

	return status;
 800df96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3718      	adds	r7, #24
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}

0800dfa2 <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800dfa2:	b580      	push	{r7, lr}
 800dfa4:	b086      	sub	sp, #24
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	60b9      	str	r1, [r7, #8]
 800dfac:	607a      	str	r2, [r7, #4]
 800dfae:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800dfb4:	89fb      	ldrh	r3, [r7, #14]
 800dfb6:	2b0f      	cmp	r3, #15
 800dfb8:	d802      	bhi.n	800dfc0 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800dfba:	f06f 0308 	mvn.w	r3, #8
 800dfbe:	e04d      	b.n	800e05c <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800dfc0:	68b9      	ldr	r1, [r7, #8]
 800dfc2:	2002      	movs	r0, #2
 800dfc4:	f7f9 fbe9 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	789a      	ldrb	r2, [r3, #2]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	78da      	ldrb	r2, [r3, #3]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	3304      	adds	r3, #4
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	2002      	movs	r0, #2
 800dfe8:	f7f9 fbd7 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800dfec:	4603      	mov	r3, r0
 800dfee:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	3306      	adds	r3, #6
 800dff8:	4619      	mov	r1, r3
 800dffa:	2002      	movs	r0, #2
 800dffc:	f7f9 fbcd 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800e000:	4603      	mov	r3, r0
 800e002:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	3308      	adds	r3, #8
 800e00c:	4619      	mov	r1, r3
 800e00e:	2002      	movs	r0, #2
 800e010:	f7f9 fbc3 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800e014:	4603      	mov	r3, r0
 800e016:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	330a      	adds	r3, #10
 800e020:	4619      	mov	r1, r3
 800e022:	2002      	movs	r0, #2
 800e024:	f7f9 fbb9 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800e028:	4603      	mov	r3, r0
 800e02a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	330c      	adds	r3, #12
 800e034:	4619      	mov	r1, r3
 800e036:	2002      	movs	r0, #2
 800e038:	f7f9 fbaf 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800e03c:	4603      	mov	r3, r0
 800e03e:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	330e      	adds	r3, #14
 800e048:	4619      	mov	r1, r3
 800e04a:	2002      	movs	r0, #2
 800e04c:	f7f9 fba5 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800e050:	4603      	mov	r3, r0
 800e052:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	81da      	strh	r2, [r3, #14]

	return status;
 800e058:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3718      	adds	r7, #24
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b086      	sub	sp, #24
 800e068:	af00      	add	r7, sp, #0
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	607b      	str	r3, [r7, #4]
 800e06e:	460b      	mov	r3, r1
 800e070:	72fb      	strb	r3, [r7, #11]
 800e072:	4613      	mov	r3, r2
 800e074:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e076:	2300      	movs	r3, #0
 800e078:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800e07a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d106      	bne.n	800e090 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 800e082:	2232      	movs	r2, #50	; 0x32
 800e084:	2104      	movs	r1, #4
 800e086:	68f8      	ldr	r0, [r7, #12]
 800e088:	f7ff fdd0 	bl	800dc2c <VL53LX_nvm_enable>
 800e08c:	4603      	mov	r3, r0
 800e08e:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 800e090:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d107      	bne.n	800e0a8 <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 800e098:	7aba      	ldrb	r2, [r7, #10]
 800e09a:	7af9      	ldrb	r1, [r7, #11]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	68f8      	ldr	r0, [r7, #12]
 800e0a0:	f7ff fe2a 	bl	800dcf8 <VL53LX_nvm_read>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 800e0a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d104      	bne.n	800e0ba <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 800e0b0:	68f8      	ldr	r0, [r7, #12]
 800e0b2:	f7ff fe7f 	bl	800ddb4 <VL53LX_nvm_disable>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 800e0ba:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3718      	adds	r7, #24
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}

0800e0c6 <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 800e0c6:	b580      	push	{r7, lr}
 800e0c8:	b084      	sub	sp, #16
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
 800e0ce:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800e0d4:	f107 0308 	add.w	r3, r7, #8
 800e0d8:	2201      	movs	r2, #1
 800e0da:	212e      	movs	r1, #46	; 0x2e
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f7ff ffc1 	bl	800e064 <VL53LX_read_nvm_raw_data>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800e0e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d108      	bne.n	800e100 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 800e0ee:	f107 0308 	add.w	r3, r7, #8
 800e0f2:	683a      	ldr	r2, [r7, #0]
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	2004      	movs	r0, #4
 800e0f8:	f7ff fe92 	bl	800de20 <VL53LX_nvm_decode_optical_centre>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 800e100:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b092      	sub	sp, #72	; 0x48
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e116:	2300      	movs	r3, #0
 800e118:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800e11c:	f107 030c 	add.w	r3, r7, #12
 800e120:	220e      	movs	r2, #14
 800e122:	2157      	movs	r1, #87	; 0x57
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f7ff ff9d 	bl	800e064 <VL53LX_read_nvm_raw_data>
 800e12a:	4603      	mov	r3, r0
 800e12c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800e130:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e134:	2b00      	cmp	r3, #0
 800e136:	d109      	bne.n	800e14c <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 800e138:	f107 030c 	add.w	r3, r7, #12
 800e13c:	683a      	ldr	r2, [r7, #0]
 800e13e:	4619      	mov	r1, r3
 800e140:	2038      	movs	r0, #56	; 0x38
 800e142:	f7ff fe9d 	bl	800de80 <VL53LX_nvm_decode_cal_peak_rate_map>
 800e146:	4603      	mov	r3, r0
 800e148:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800e14c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800e150:	4618      	mov	r0, r3
 800e152:	3748      	adds	r7, #72	; 0x48
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b086      	sub	sp, #24
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e162:	2300      	movs	r3, #0
 800e164:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800e166:	f107 030c 	add.w	r3, r7, #12
 800e16a:	2202      	movs	r2, #2
 800e16c:	2165      	movs	r1, #101	; 0x65
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f7ff ff78 	bl	800e064 <VL53LX_read_nvm_raw_data>
 800e174:	4603      	mov	r3, r0
 800e176:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800e178:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d108      	bne.n	800e192 <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 800e180:	f107 030c 	add.w	r3, r7, #12
 800e184:	683a      	ldr	r2, [r7, #0]
 800e186:	4619      	mov	r1, r3
 800e188:	2008      	movs	r0, #8
 800e18a:	f7ff fecf 	bl	800df2c <VL53LX_nvm_decode_additional_offset_cal_data>
 800e18e:	4603      	mov	r3, r0
 800e190:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800e192:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800e196:	4618      	mov	r0, r3
 800e198:	3718      	adds	r7, #24
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b08a      	sub	sp, #40	; 0x28
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	60f8      	str	r0, [r7, #12]
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	607a      	str	r2, [r7, #4]
 800e1aa:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 800e1b2:	897b      	ldrh	r3, [r7, #10]
 800e1b4:	089b      	lsrs	r3, r3, #2
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	b2d9      	uxtb	r1, r3
 800e1ba:	f107 0314 	add.w	r3, r7, #20
 800e1be:	2204      	movs	r2, #4
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	f7ff ff4f 	bl	800e064 <VL53LX_read_nvm_raw_data>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800e1cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d109      	bne.n	800e1e8 <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 800e1d4:	f107 0314 	add.w	r3, r7, #20
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	4619      	mov	r1, r3
 800e1dc:	2010      	movs	r0, #16
 800e1de:	f7ff fee0 	bl	800dfa2 <VL53LX_nvm_decode_fmt_range_results_data>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 800e1e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3728      	adds	r7, #40	; 0x28
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	68db      	ldr	r3, [r3, #12]
 800e204:	68fa      	ldr	r2, [r7, #12]
 800e206:	8910      	ldrh	r0, [r2, #8]
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	b292      	uxth	r2, r2
 800e20c:	68b9      	ldr	r1, [r7, #8]
 800e20e:	4798      	blx	r3
 800e210:	4603      	mov	r3, r0
}
 800e212:	4618      	mov	r0, r3
 800e214:	3710      	adds	r7, #16
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}

0800e21a <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e21a:	b580      	push	{r7, lr}
 800e21c:	b084      	sub	sp, #16
 800e21e:	af00      	add	r7, sp, #0
 800e220:	60f8      	str	r0, [r7, #12]
 800e222:	60b9      	str	r1, [r7, #8]
 800e224:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	691b      	ldr	r3, [r3, #16]
 800e22a:	68fa      	ldr	r2, [r7, #12]
 800e22c:	8910      	ldrh	r0, [r2, #8]
 800e22e:	687a      	ldr	r2, [r7, #4]
 800e230:	b292      	uxth	r2, r2
 800e232:	68b9      	ldr	r1, [r7, #8]
 800e234:	4798      	blx	r3
 800e236:	4603      	mov	r3, r0
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3710      	adds	r7, #16
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800e240:	b580      	push	{r7, lr}
 800e242:	b086      	sub	sp, #24
 800e244:	af00      	add	r7, sp, #0
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	607a      	str	r2, [r7, #4]
 800e24a:	603b      	str	r3, [r7, #0]
 800e24c:	460b      	mov	r3, r1
 800e24e:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 800e250:	2300      	movs	r3, #0
 800e252:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	2bff      	cmp	r3, #255	; 0xff
 800e258:	d902      	bls.n	800e260 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 800e25a:	f06f 0303 	mvn.w	r3, #3
 800e25e:	e01d      	b.n	800e29c <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800e260:	897b      	ldrh	r3, [r7, #10]
 800e262:	0a1b      	lsrs	r3, r3, #8
 800e264:	b29b      	uxth	r3, r3
 800e266:	b2da      	uxtb	r2, r3
 800e268:	4b0e      	ldr	r3, [pc, #56]	; (800e2a4 <VL53LX_WriteMulti+0x64>)
 800e26a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800e26c:	897b      	ldrh	r3, [r7, #10]
 800e26e:	b2da      	uxtb	r2, r3
 800e270:	4b0c      	ldr	r3, [pc, #48]	; (800e2a4 <VL53LX_WriteMulti+0x64>)
 800e272:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800e274:	683a      	ldr	r2, [r7, #0]
 800e276:	6879      	ldr	r1, [r7, #4]
 800e278:	480b      	ldr	r0, [pc, #44]	; (800e2a8 <VL53LX_WriteMulti+0x68>)
 800e27a:	f005 fd45 	bl	8013d08 <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	3302      	adds	r3, #2
 800e282:	461a      	mov	r2, r3
 800e284:	4907      	ldr	r1, [pc, #28]	; (800e2a4 <VL53LX_WriteMulti+0x64>)
 800e286:	68f8      	ldr	r0, [r7, #12]
 800e288:	f7ff ffb4 	bl	800e1f4 <_I2CWrite>
 800e28c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d001      	beq.n	800e298 <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 800e294:	23f3      	movs	r3, #243	; 0xf3
 800e296:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 800e298:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3718      	adds	r7, #24
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	20000268 	.word	0x20000268
 800e2a8:	2000026a 	.word	0x2000026a

0800e2ac <VL53LX_ReadMulti>:

VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b086      	sub	sp, #24
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	60f8      	str	r0, [r7, #12]
 800e2b4:	607a      	str	r2, [r7, #4]
 800e2b6:	603b      	str	r3, [r7, #0]
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800e2c0:	897b      	ldrh	r3, [r7, #10]
 800e2c2:	0a1b      	lsrs	r3, r3, #8
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	b2da      	uxtb	r2, r3
 800e2c8:	4b12      	ldr	r3, [pc, #72]	; (800e314 <VL53LX_ReadMulti+0x68>)
 800e2ca:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800e2cc:	897b      	ldrh	r3, [r7, #10]
 800e2ce:	b2da      	uxtb	r2, r3
 800e2d0:	4b10      	ldr	r3, [pc, #64]	; (800e314 <VL53LX_ReadMulti+0x68>)
 800e2d2:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800e2d4:	2202      	movs	r2, #2
 800e2d6:	490f      	ldr	r1, [pc, #60]	; (800e314 <VL53LX_ReadMulti+0x68>)
 800e2d8:	68f8      	ldr	r0, [r7, #12]
 800e2da:	f7ff ff8b 	bl	800e1f4 <_I2CWrite>
 800e2de:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d002      	beq.n	800e2ec <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 800e2e6:	23f3      	movs	r3, #243	; 0xf3
 800e2e8:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e2ea:	e00c      	b.n	800e306 <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800e2ec:	683a      	ldr	r2, [r7, #0]
 800e2ee:	6879      	ldr	r1, [r7, #4]
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	f7ff ff92 	bl	800e21a <_I2CRead>
 800e2f6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d002      	beq.n	800e304 <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 800e2fe:	23f3      	movs	r3, #243	; 0xf3
 800e300:	75fb      	strb	r3, [r7, #23]
 800e302:	e000      	b.n	800e306 <VL53LX_ReadMulti+0x5a>
    }
done:
 800e304:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 800e306:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3718      	adds	r7, #24
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	20000268 	.word	0x20000268

0800e318 <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 800e318:	b580      	push	{r7, lr}
 800e31a:	b084      	sub	sp, #16
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	460b      	mov	r3, r1
 800e322:	807b      	strh	r3, [r7, #2]
 800e324:	4613      	mov	r3, r2
 800e326:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 800e328:	2300      	movs	r3, #0
 800e32a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800e32c:	887b      	ldrh	r3, [r7, #2]
 800e32e:	0a1b      	lsrs	r3, r3, #8
 800e330:	b29b      	uxth	r3, r3
 800e332:	b2da      	uxtb	r2, r3
 800e334:	4b0c      	ldr	r3, [pc, #48]	; (800e368 <VL53LX_WrByte+0x50>)
 800e336:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800e338:	887b      	ldrh	r3, [r7, #2]
 800e33a:	b2da      	uxtb	r2, r3
 800e33c:	4b0a      	ldr	r3, [pc, #40]	; (800e368 <VL53LX_WrByte+0x50>)
 800e33e:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800e340:	4a09      	ldr	r2, [pc, #36]	; (800e368 <VL53LX_WrByte+0x50>)
 800e342:	787b      	ldrb	r3, [r7, #1]
 800e344:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800e346:	2203      	movs	r2, #3
 800e348:	4907      	ldr	r1, [pc, #28]	; (800e368 <VL53LX_WrByte+0x50>)
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f7ff ff52 	bl	800e1f4 <_I2CWrite>
 800e350:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d001      	beq.n	800e35c <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 800e358:	23f3      	movs	r3, #243	; 0xf3
 800e35a:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 800e35c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e360:	4618      	mov	r0, r3
 800e362:	3710      	adds	r7, #16
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	20000268 	.word	0x20000268

0800e36c <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b084      	sub	sp, #16
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	460b      	mov	r3, r1
 800e376:	807b      	strh	r3, [r7, #2]
 800e378:	4613      	mov	r3, r2
 800e37a:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 800e37c:	2300      	movs	r3, #0
 800e37e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800e380:	887b      	ldrh	r3, [r7, #2]
 800e382:	0a1b      	lsrs	r3, r3, #8
 800e384:	b29b      	uxth	r3, r3
 800e386:	b2da      	uxtb	r2, r3
 800e388:	4b10      	ldr	r3, [pc, #64]	; (800e3cc <VL53LX_WrWord+0x60>)
 800e38a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800e38c:	887b      	ldrh	r3, [r7, #2]
 800e38e:	b2da      	uxtb	r2, r3
 800e390:	4b0e      	ldr	r3, [pc, #56]	; (800e3cc <VL53LX_WrWord+0x60>)
 800e392:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 800e394:	883b      	ldrh	r3, [r7, #0]
 800e396:	0a1b      	lsrs	r3, r3, #8
 800e398:	b29b      	uxth	r3, r3
 800e39a:	b2da      	uxtb	r2, r3
 800e39c:	4b0b      	ldr	r3, [pc, #44]	; (800e3cc <VL53LX_WrWord+0x60>)
 800e39e:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 800e3a0:	883b      	ldrh	r3, [r7, #0]
 800e3a2:	b2da      	uxtb	r2, r3
 800e3a4:	4b09      	ldr	r3, [pc, #36]	; (800e3cc <VL53LX_WrWord+0x60>)
 800e3a6:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 800e3a8:	2204      	movs	r2, #4
 800e3aa:	4908      	ldr	r1, [pc, #32]	; (800e3cc <VL53LX_WrWord+0x60>)
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f7ff ff21 	bl	800e1f4 <_I2CWrite>
 800e3b2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d001      	beq.n	800e3be <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 800e3ba:	23f3      	movs	r3, #243	; 0xf3
 800e3bc:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 800e3be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3710      	adds	r7, #16
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	20000268 	.word	0x20000268

0800e3d0 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b086      	sub	sp, #24
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	460b      	mov	r3, r1
 800e3da:	607a      	str	r2, [r7, #4]
 800e3dc:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800e3e2:	897b      	ldrh	r3, [r7, #10]
 800e3e4:	0a1b      	lsrs	r3, r3, #8
 800e3e6:	b29b      	uxth	r3, r3
 800e3e8:	b2da      	uxtb	r2, r3
 800e3ea:	4b12      	ldr	r3, [pc, #72]	; (800e434 <VL53LX_RdByte+0x64>)
 800e3ec:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800e3ee:	897b      	ldrh	r3, [r7, #10]
 800e3f0:	b2da      	uxtb	r2, r3
 800e3f2:	4b10      	ldr	r3, [pc, #64]	; (800e434 <VL53LX_RdByte+0x64>)
 800e3f4:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800e3f6:	2202      	movs	r2, #2
 800e3f8:	490e      	ldr	r1, [pc, #56]	; (800e434 <VL53LX_RdByte+0x64>)
 800e3fa:	68f8      	ldr	r0, [r7, #12]
 800e3fc:	f7ff fefa 	bl	800e1f4 <_I2CWrite>
 800e400:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d002      	beq.n	800e40e <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 800e408:	23f3      	movs	r3, #243	; 0xf3
 800e40a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e40c:	e00c      	b.n	800e428 <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 800e40e:	2201      	movs	r2, #1
 800e410:	6879      	ldr	r1, [r7, #4]
 800e412:	68f8      	ldr	r0, [r7, #12]
 800e414:	f7ff ff01 	bl	800e21a <_I2CRead>
 800e418:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d002      	beq.n	800e426 <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 800e420:	23f3      	movs	r3, #243	; 0xf3
 800e422:	75fb      	strb	r3, [r7, #23]
 800e424:	e000      	b.n	800e428 <VL53LX_RdByte+0x58>
    }
done:
 800e426:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 800e428:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3718      	adds	r7, #24
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}
 800e434:	20000268 	.word	0x20000268

0800e438 <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 800e438:	b580      	push	{r7, lr}
 800e43a:	b086      	sub	sp, #24
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	460b      	mov	r3, r1
 800e442:	607a      	str	r2, [r7, #4]
 800e444:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 800e446:	2300      	movs	r3, #0
 800e448:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800e44a:	897b      	ldrh	r3, [r7, #10]
 800e44c:	0a1b      	lsrs	r3, r3, #8
 800e44e:	b29b      	uxth	r3, r3
 800e450:	b2da      	uxtb	r2, r3
 800e452:	4b18      	ldr	r3, [pc, #96]	; (800e4b4 <VL53LX_RdWord+0x7c>)
 800e454:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800e456:	897b      	ldrh	r3, [r7, #10]
 800e458:	b2da      	uxtb	r2, r3
 800e45a:	4b16      	ldr	r3, [pc, #88]	; (800e4b4 <VL53LX_RdWord+0x7c>)
 800e45c:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800e45e:	2202      	movs	r2, #2
 800e460:	4914      	ldr	r1, [pc, #80]	; (800e4b4 <VL53LX_RdWord+0x7c>)
 800e462:	68f8      	ldr	r0, [r7, #12]
 800e464:	f7ff fec6 	bl	800e1f4 <_I2CWrite>
 800e468:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d002      	beq.n	800e476 <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 800e470:	23f3      	movs	r3, #243	; 0xf3
 800e472:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e474:	e017      	b.n	800e4a6 <VL53LX_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800e476:	2202      	movs	r2, #2
 800e478:	490e      	ldr	r1, [pc, #56]	; (800e4b4 <VL53LX_RdWord+0x7c>)
 800e47a:	68f8      	ldr	r0, [r7, #12]
 800e47c:	f7ff fecd 	bl	800e21a <_I2CRead>
 800e480:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d002      	beq.n	800e48e <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 800e488:	23f3      	movs	r3, #243	; 0xf3
 800e48a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e48c:	e00b      	b.n	800e4a6 <VL53LX_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800e48e:	4b09      	ldr	r3, [pc, #36]	; (800e4b4 <VL53LX_RdWord+0x7c>)
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	b29b      	uxth	r3, r3
 800e494:	021b      	lsls	r3, r3, #8
 800e496:	b29a      	uxth	r2, r3
 800e498:	4b06      	ldr	r3, [pc, #24]	; (800e4b4 <VL53LX_RdWord+0x7c>)
 800e49a:	785b      	ldrb	r3, [r3, #1]
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	4413      	add	r3, r2
 800e4a0:	b29a      	uxth	r2, r3
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 800e4a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3718      	adds	r7, #24
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	20000268 	.word	0x20000268

0800e4b8 <VL53LX_GetTickCount>:
    VL53LX_PutI2cBus();
    return Status;
}

VL53LX_Error VL53LX_GetTickCount(VL53LX_DEV Dev, uint32_t *ptick_count_ms)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b084      	sub	sp, #16
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	695b      	ldr	r3, [r3, #20]
 800e4ca:	4798      	blx	r3
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800e4d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3710      	adds	r7, #16
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <VL53LX_WaitMs>:
	
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitMs(VL53LX_DEV Dev, int32_t wait_ms){
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_ms);
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f000 f8b8 	bl	800e664 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 800e4f4:	2300      	movs	r3, #0
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3708      	adds	r7, #8
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
	...

0800e500 <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_DEV Dev, int32_t wait_us){
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_us/1000);
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	4a07      	ldr	r2, [pc, #28]	; (800e52c <VL53LX_WaitUs+0x2c>)
 800e50e:	fb82 1203 	smull	r1, r2, r2, r3
 800e512:	1192      	asrs	r2, r2, #6
 800e514:	17db      	asrs	r3, r3, #31
 800e516:	1ad3      	subs	r3, r2, r3
 800e518:	4619      	mov	r1, r3
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 f8a2 	bl	800e664 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 800e520:	2300      	movs	r3, #0
}
 800e522:	4618      	mov	r0, r3
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	bf00      	nop
 800e52c:	10624dd3 	.word	0x10624dd3

0800e530 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800e530:	b590      	push	{r4, r7, lr}
 800e532:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800e536:	af00      	add	r7, sp, #0
 800e538:	f107 040c 	add.w	r4, r7, #12
 800e53c:	6020      	str	r0, [r4, #0]
 800e53e:	f107 0008 	add.w	r0, r7, #8
 800e542:	6001      	str	r1, [r0, #0]
 800e544:	4619      	mov	r1, r3
 800e546:	1dbb      	adds	r3, r7, #6
 800e548:	801a      	strh	r2, [r3, #0]
 800e54a:	1d7b      	adds	r3, r7, #5
 800e54c:	460a      	mov	r2, r1
 800e54e:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 800e550:	2300      	movs	r3, #0
 800e552:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800e556:	2300      	movs	r3, #0
 800e558:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800e55c:	2300      	movs	r3, #0
 800e55e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800e562:	2300      	movs	r3, #0
 800e564:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 800e568:	2300      	movs	r3, #0
 800e56a:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 800e56e:	2300      	movs	r3, #0
 800e570:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 800e574:	f107 0310 	add.w	r3, r7, #16
 800e578:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e57c:	4938      	ldr	r1, [pc, #224]	; (800e660 <VL53LX_WaitValueMaskEx+0x130>)
 800e57e:	4618      	mov	r0, r3
 800e580:	f005 fbf0 	bl	8013d64 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(Dev, &start_time_ms);
 800e584:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800e588:	f107 030c 	add.w	r3, r7, #12
 800e58c:	4611      	mov	r1, r2
 800e58e:	6818      	ldr	r0, [r3, #0]
 800e590:	f7ff ff92 	bl	800e4b8 <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 800e594:	e042      	b.n	800e61c <VL53LX_WaitValueMaskEx+0xec>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 800e596:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d10b      	bne.n	800e5b6 <VL53LX_WaitValueMaskEx+0x86>
			status = VL53LX_RdByte(
 800e59e:	f207 2213 	addw	r2, r7, #531	; 0x213
 800e5a2:	1dbb      	adds	r3, r7, #6
 800e5a4:	8819      	ldrh	r1, [r3, #0]
 800e5a6:	f107 030c 	add.w	r3, r7, #12
 800e5aa:	6818      	ldr	r0, [r3, #0]
 800e5ac:	f7ff ff10 	bl	800e3d0 <VL53LX_RdByte>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800e5b6:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800e5ba:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800e5be:	4013      	ands	r3, r2
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	1d7a      	adds	r2, r7, #5
 800e5c4:	7812      	ldrb	r2, [r2, #0]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d102      	bne.n	800e5d0 <VL53LX_WaitValueMaskEx+0xa0>
			found = 1;
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 800e5d0:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d112      	bne.n	800e5fe <VL53LX_WaitValueMaskEx+0xce>
 800e5d8:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d10e      	bne.n	800e5fe <VL53LX_WaitValueMaskEx+0xce>
			found == 0 &&
 800e5e0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d00a      	beq.n	800e5fe <VL53LX_WaitValueMaskEx+0xce>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 800e5e8:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800e5ec:	f107 030c 	add.w	r3, r7, #12
 800e5f0:	4611      	mov	r1, r2
 800e5f2:	6818      	ldr	r0, [r3, #0]
 800e5f4:	f7ff ff74 	bl	800e4e0 <VL53LX_WaitMs>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(Dev, &current_time_ms);
 800e5fe:	f507 7205 	add.w	r2, r7, #532	; 0x214
 800e602:	f107 030c 	add.w	r3, r7, #12
 800e606:	4611      	mov	r1, r2
 800e608:	6818      	ldr	r0, [r3, #0]
 800e60a:	f7ff ff55 	bl	800e4b8 <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800e60e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800e612:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800e616:	1ad3      	subs	r3, r2, r3
 800e618:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53LX_ERROR_NONE) &&
 800e61c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e620:	2b00      	cmp	r3, #0
 800e622:	d10a      	bne.n	800e63a <VL53LX_WaitValueMaskEx+0x10a>
 800e624:	f107 0308 	add.w	r3, r7, #8
 800e628:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	429a      	cmp	r2, r3
 800e630:	d203      	bcs.n	800e63a <VL53LX_WaitValueMaskEx+0x10a>
		   (polling_time_ms < timeout_ms) &&
 800e632:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e636:	2b00      	cmp	r3, #0
 800e638:	d0ad      	beq.n	800e596 <VL53LX_WaitValueMaskEx+0x66>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 800e63a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d106      	bne.n	800e650 <VL53LX_WaitValueMaskEx+0x120>
 800e642:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e646:	2b00      	cmp	r3, #0
 800e648:	d102      	bne.n	800e650 <VL53LX_WaitValueMaskEx+0x120>
		status = VL53LX_ERROR_TIME_OUT;
 800e64a:	23f9      	movs	r3, #249	; 0xf9
 800e64c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800e650:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 800e654:	4618      	mov	r0, r3
 800e656:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd90      	pop	{r4, r7, pc}
 800e65e:	bf00      	nop
 800e660:	08014c38 	.word	0x08014c38

0800e664 <VL53LX_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53LX_Error
  */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b084      	sub	sp, #16
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	695b      	ldr	r3, [r3, #20]
 800e672:	4798      	blx	r3
 800e674:	4603      	mov	r3, r0
 800e676:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 800e678:	bf00      	nop
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	695b      	ldr	r3, [r3, #20]
 800e67e:	4798      	blx	r3
 800e680:	4603      	mov	r3, r0
 800e682:	461a      	mov	r2, r3
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	1ad3      	subs	r3, r2, r3
 800e688:	683a      	ldr	r2, [r7, #0]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d8f5      	bhi.n	800e67a <VL53LX_Delay+0x16>
  {
  }

  return VL53LX_ERROR_NONE;
 800e68e:	2300      	movs	r3, #0
}
 800e690:	4618      	mov	r0, r3
 800e692:	3710      	adds	r7, #16
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b08c      	sub	sp, #48	; 0x30
 800e69c:	af06      	add	r7, sp, #24
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	607a      	str	r2, [r7, #4]
 800e6a4:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 800e6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ac:	9304      	str	r3, [sp, #16]
 800e6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6b0:	9303      	str	r3, [sp, #12]
 800e6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b4:	9302      	str	r3, [sp, #8]
 800e6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b8:	9301      	str	r3, [sp, #4]
 800e6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6bc:	9300      	str	r3, [sp, #0]
 800e6be:	6a3b      	ldr	r3, [r7, #32]
 800e6c0:	683a      	ldr	r2, [r7, #0]
 800e6c2:	6879      	ldr	r1, [r7, #4]
 800e6c4:	68b8      	ldr	r0, [r7, #8]
 800e6c6:	f7ff f8e2 	bl	800d88e <VL53LX_hist_process_data>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 800e6ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3718      	adds	r7, #24
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}

0800e6da <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e6da:	b580      	push	{r7, lr}
 800e6dc:	b086      	sub	sp, #24
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	60f8      	str	r0, [r7, #12]
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	607a      	str	r2, [r7, #4]
 800e6e6:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800e6ec:	897b      	ldrh	r3, [r7, #10]
 800e6ee:	2b0a      	cmp	r3, #10
 800e6f0:	d802      	bhi.n	800e6f8 <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e6f2:	f06f 0309 	mvn.w	r3, #9
 800e6f6:	e047      	b.n	800e788 <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e700:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e70e:	f002 020f 	and.w	r2, r2, #15
 800e712:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800e714:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e71e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e722:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e724:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e72e:	f002 0203 	and.w	r2, r2, #3
 800e732:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e734:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e73e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e742:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e744:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	88d8      	ldrh	r0, [r3, #6]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	3305      	adds	r3, #5
 800e74e:	461a      	mov	r2, r3
 800e750:	2102      	movs	r1, #2
 800e752:	f7f8 fff7 	bl	8007744 <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800e75a:	68fa      	ldr	r2, [r7, #12]
 800e75c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800e75e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800e764:	68fa      	ldr	r2, [r7, #12]
 800e766:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800e768:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800e772:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e776:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e778:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800e77e:	68fa      	ldr	r2, [r7, #12]
 800e780:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800e782:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e784:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3718      	adds	r7, #24
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b086      	sub	sp, #24
 800e794:	af00      	add	r7, sp, #0
 800e796:	4603      	mov	r3, r0
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
 800e79c:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800e7a2:	89fb      	ldrh	r3, [r7, #14]
 800e7a4:	2b0a      	cmp	r3, #10
 800e7a6:	d802      	bhi.n	800e7ae <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e7a8:	f06f 0309 	mvn.w	r3, #9
 800e7ac:	e046      	b.n	800e83c <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7b6:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	3301      	adds	r3, #1
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	f003 030f 	and.w	r3, r3, #15
 800e7c6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	3302      	adds	r3, #2
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7d6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	3303      	adds	r3, #3
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	f003 0303 	and.w	r3, r3, #3
 800e7e6:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	3304      	adds	r3, #4
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7f6:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	3305      	adds	r3, #5
 800e800:	4619      	mov	r1, r3
 800e802:	2002      	movs	r0, #2
 800e804:	f7f8 ffc9 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800e808:	4603      	mov	r3, r0
 800e80a:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	79da      	ldrb	r2, [r3, #7]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	7a1a      	ldrb	r2, [r3, #8]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	3309      	adds	r3, #9
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e82a:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	7a9a      	ldrb	r2, [r3, #10]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800e838:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3718      	adds	r7, #24
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b086      	sub	sp, #24
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e84e:	2300      	movs	r3, #0
 800e850:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800e852:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d108      	bne.n	800e86c <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 800e85a:	f107 020c 	add.w	r2, r7, #12
 800e85e:	230b      	movs	r3, #11
 800e860:	2101      	movs	r1, #1
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f7ff fd22 	bl	800e2ac <VL53LX_ReadMulti>
 800e868:	4603      	mov	r3, r0
 800e86a:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800e86c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d108      	bne.n	800e886 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 800e874:	f107 030c 	add.w	r3, r7, #12
 800e878:	683a      	ldr	r2, [r7, #0]
 800e87a:	4619      	mov	r1, r3
 800e87c:	200b      	movs	r0, #11
 800e87e:	f7ff ff87 	bl	800e790 <VL53LX_i2c_decode_static_nvm_managed>
 800e882:	4603      	mov	r3, r0
 800e884:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800e886:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3718      	adds	r7, #24
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}

0800e892 <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e892:	b580      	push	{r7, lr}
 800e894:	b086      	sub	sp, #24
 800e896:	af00      	add	r7, sp, #0
 800e898:	60f8      	str	r0, [r7, #12]
 800e89a:	460b      	mov	r3, r1
 800e89c:	607a      	str	r2, [r7, #4]
 800e89e:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800e8a4:	897b      	ldrh	r3, [r7, #10]
 800e8a6:	2b16      	cmp	r3, #22
 800e8a8:	d802      	bhi.n	800e8b0 <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e8aa:	f06f 0309 	mvn.w	r3, #9
 800e8ae:	e076      	b.n	800e99e <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800e8c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800e8c6:	68fa      	ldr	r2, [r7, #12]
 800e8c8:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800e8ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800e8d0:	68fa      	ldr	r2, [r7, #12]
 800e8d2:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800e8d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800e8da:	68fa      	ldr	r2, [r7, #12]
 800e8dc:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800e8de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800e8e8:	f002 020f 	and.w	r2, r2, #15
 800e8ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800e8ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800e8f4:	68fa      	ldr	r2, [r7, #12]
 800e8f6:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800e8f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800e902:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e906:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800e908:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800e912:	f002 0203 	and.w	r2, r2, #3
 800e916:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800e918:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	8958      	ldrh	r0, [r3, #10]
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	3309      	adds	r3, #9
 800e922:	461a      	mov	r2, r3
 800e924:	2102      	movs	r1, #2
 800e926:	f7f8 ff0d 	bl	8007744 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	330b      	adds	r3, #11
 800e934:	461a      	mov	r2, r3
 800e936:	2102      	movs	r1, #2
 800e938:	f7f8 ff4f 	bl	80077da <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	330d      	adds	r3, #13
 800e946:	461a      	mov	r2, r3
 800e948:	2102      	movs	r1, #2
 800e94a:	f7f8 ff46 	bl	80077da <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	8a18      	ldrh	r0, [r3, #16]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	330f      	adds	r3, #15
 800e956:	461a      	mov	r2, r3
 800e958:	2102      	movs	r1, #2
 800e95a:	f7f8 fef3 	bl	8007744 <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 800e964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e968:	b218      	sxth	r0, r3
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	3311      	adds	r3, #17
 800e96e:	461a      	mov	r2, r3
 800e970:	2102      	movs	r1, #2
 800e972:	f7f8 ff32 	bl	80077da <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	3313      	adds	r3, #19
 800e980:	461a      	mov	r2, r3
 800e982:	2102      	movs	r1, #2
 800e984:	f7f8 ff29 	bl	80077da <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	3315      	adds	r3, #21
 800e992:	461a      	mov	r2, r3
 800e994:	2102      	movs	r1, #2
 800e996:	f7f8 ff20 	bl	80077da <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800e99a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3718      	adds	r7, #24
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800e9a6:	b580      	push	{r7, lr}
 800e9a8:	b086      	sub	sp, #24
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	60b9      	str	r1, [r7, #8]
 800e9b0:	607a      	str	r2, [r7, #4]
 800e9b2:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800e9b8:	89fb      	ldrh	r3, [r7, #14]
 800e9ba:	2b16      	cmp	r3, #22
 800e9bc:	d802      	bhi.n	800e9c4 <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e9be:	f06f 0309 	mvn.w	r3, #9
 800e9c2:	e079      	b.n	800eab8 <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	785a      	ldrb	r2, [r3, #1]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	789a      	ldrb	r2, [r3, #2]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	78da      	ldrb	r2, [r3, #3]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	791a      	ldrb	r2, [r3, #4]
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	3305      	adds	r3, #5
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	f003 030f 	and.w	r3, r3, #15
 800e9f6:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	799a      	ldrb	r2, [r3, #6]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	3307      	adds	r3, #7
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea0e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	3308      	adds	r3, #8
 800ea18:	781b      	ldrb	r3, [r3, #0]
 800ea1a:	f003 0303 	and.w	r3, r3, #3
 800ea1e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	3309      	adds	r3, #9
 800ea28:	4619      	mov	r1, r3
 800ea2a:	2002      	movs	r0, #2
 800ea2c:	f7f8 feb5 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800ea30:	4603      	mov	r3, r0
 800ea32:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	330b      	adds	r3, #11
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	2002      	movs	r0, #2
 800ea40:	f7f8 fef7 	bl	8007832 <VL53LX_i2c_decode_int16_t>
 800ea44:	4603      	mov	r3, r0
 800ea46:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	330d      	adds	r3, #13
 800ea50:	4619      	mov	r1, r3
 800ea52:	2002      	movs	r0, #2
 800ea54:	f7f8 feed 	bl	8007832 <VL53LX_i2c_decode_int16_t>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	330f      	adds	r3, #15
 800ea64:	4619      	mov	r1, r3
 800ea66:	2002      	movs	r0, #2
 800ea68:	f7f8 fe97 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	3311      	adds	r3, #17
 800ea78:	4619      	mov	r1, r3
 800ea7a:	2002      	movs	r0, #2
 800ea7c:	f7f8 fed9 	bl	8007832 <VL53LX_i2c_decode_int16_t>
 800ea80:	4603      	mov	r3, r0
 800ea82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea86:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	3313      	adds	r3, #19
 800ea90:	4619      	mov	r1, r3
 800ea92:	2002      	movs	r0, #2
 800ea94:	f7f8 fecd 	bl	8007832 <VL53LX_i2c_decode_int16_t>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	3315      	adds	r3, #21
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	2002      	movs	r0, #2
 800eaa8:	f7f8 fec3 	bl	8007832 <VL53LX_i2c_decode_int16_t>
 800eaac:	4603      	mov	r3, r0
 800eaae:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800eab4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3718      	adds	r7, #24
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b08a      	sub	sp, #40	; 0x28
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800eaca:	2300      	movs	r3, #0
 800eacc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800ead0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d109      	bne.n	800eaec <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 800ead8:	f107 020c 	add.w	r2, r7, #12
 800eadc:	2317      	movs	r3, #23
 800eade:	210d      	movs	r1, #13
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f7ff fbe3 	bl	800e2ac <VL53LX_ReadMulti>
 800eae6:	4603      	mov	r3, r0
 800eae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800eaec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d109      	bne.n	800eb08 <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 800eaf4:	f107 030c 	add.w	r3, r7, #12
 800eaf8:	683a      	ldr	r2, [r7, #0]
 800eafa:	4619      	mov	r1, r3
 800eafc:	2017      	movs	r0, #23
 800eafe:	f7ff ff52 	bl	800e9a6 <VL53LX_i2c_decode_customer_nvm_managed>
 800eb02:	4603      	mov	r3, r0
 800eb04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 800eb08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d11c      	bne.n	800eb4a <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	8a5b      	ldrh	r3, [r3, #18]
 800eb14:	84bb      	strh	r3, [r7, #36]	; 0x24
		offset = offset / 4;
 800eb16:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	da00      	bge.n	800eb20 <VL53LX_get_customer_nvm_managed+0x60>
 800eb1e:	3303      	adds	r3, #3
 800eb20:	109b      	asrs	r3, r3, #2
 800eb22:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (offset >= 1024)
 800eb24:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800eb28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb2c:	db04      	blt.n	800eb38 <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 800eb2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb30:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800eb34:	b29b      	uxth	r3, r3
 800eb36:	84bb      	strh	r3, [r7, #36]	; 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb42:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb48:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800eb4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3728      	adds	r7, #40	; 0x28
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}

0800eb56 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800eb56:	b580      	push	{r7, lr}
 800eb58:	b086      	sub	sp, #24
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	60f8      	str	r0, [r7, #12]
 800eb5e:	460b      	mov	r3, r1
 800eb60:	607a      	str	r2, [r7, #4]
 800eb62:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800eb64:	2300      	movs	r3, #0
 800eb66:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 800eb68:	897b      	ldrh	r3, [r7, #10]
 800eb6a:	2b1f      	cmp	r3, #31
 800eb6c:	d802      	bhi.n	800eb74 <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800eb6e:	f06f 0309 	mvn.w	r3, #9
 800eb72:	e0cf      	b.n	800ed14 <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	881b      	ldrh	r3, [r3, #0]
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	2102      	movs	r1, #2
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7f8 fde1 	bl	8007744 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800eb8a:	f002 0201 	and.w	r2, r2, #1
 800eb8e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800eb90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800eb9a:	f002 020f 	and.w	r2, r2, #15
 800eb9e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800eba0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800ebaa:	f002 020f 	and.w	r2, r2, #15
 800ebae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800ebb0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800ebba:	f002 021f 	and.w	r2, r2, #31
 800ebbe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ebc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800ebca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ebce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ebd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800ebda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ebde:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800ebe0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800ebea:	f002 0201 	and.w	r2, r2, #1
 800ebee:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800ebf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800ebf6:	68fa      	ldr	r2, [r7, #12]
 800ebf8:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800ebfa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800ec04:	f002 0201 	and.w	r2, r2, #1
 800ec08:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800ec0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800ec14:	f002 0203 	and.w	r2, r2, #3
 800ec18:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800ec1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800ec24:	f002 021f 	and.w	r2, r2, #31
 800ec28:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800ec2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800ec34:	f002 0203 	and.w	r2, r2, #3
 800ec38:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800ec3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800ec44:	f002 0203 	and.w	r2, r2, #3
 800ec48:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800ec4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800ec54:	f002 0207 	and.w	r2, r2, #7
 800ec58:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800ec5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800ec64:	f002 021f 	and.w	r2, r2, #31
 800ec68:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800ec6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800ec74:	f002 0201 	and.w	r2, r2, #1
 800ec78:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800ec7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800ec80:	68fa      	ldr	r2, [r7, #12]
 800ec82:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800ec84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800ec8a:	68fa      	ldr	r2, [r7, #12]
 800ec8c:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800ec8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800ec94:	68fa      	ldr	r2, [r7, #12]
 800ec96:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800ec98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800ec9e:	68fa      	ldr	r2, [r7, #12]
 800eca0:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800eca2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800eca8:	68fa      	ldr	r2, [r7, #12]
 800ecaa:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800ecac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800ecb2:	68fa      	ldr	r2, [r7, #12]
 800ecb4:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800ecb6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	8b18      	ldrh	r0, [r3, #24]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	3318      	adds	r3, #24
 800ecc0:	461a      	mov	r2, r3
 800ecc2:	2102      	movs	r1, #2
 800ecc4:	f7f8 fd3e 	bl	8007744 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800eccc:	68fa      	ldr	r2, [r7, #12]
 800ecce:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800ecd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800ecd6:	68fa      	ldr	r2, [r7, #12]
 800ecd8:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800ecda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800ece4:	f002 020f 	and.w	r2, r2, #15
 800ece8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800ecea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800ecf0:	68fa      	ldr	r2, [r7, #12]
 800ecf2:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800ecf4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800ecfe:	f002 020f 	and.w	r2, r2, #15
 800ed02:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800ed04:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800ed0a:	68fa      	ldr	r2, [r7, #12]
 800ed0c:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800ed0e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ed10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3718      	adds	r7, #24
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b086      	sub	sp, #24
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	60f8      	str	r0, [r7, #12]
 800ed24:	460b      	mov	r3, r1
 800ed26:	607a      	str	r2, [r7, #4]
 800ed28:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 800ed2e:	897b      	ldrh	r3, [r7, #10]
 800ed30:	2b15      	cmp	r3, #21
 800ed32:	d802      	bhi.n	800ed3a <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ed34:	f06f 0309 	mvn.w	r3, #9
 800ed38:	e070      	b.n	800ee1c <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800ed46:	68fa      	ldr	r2, [r7, #12]
 800ed48:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ed4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800ed50:	68fa      	ldr	r2, [r7, #12]
 800ed52:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800ed54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800ed5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ed62:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800ed64:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 800ed6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ed6e:	b298      	uxth	r0, r3
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	3304      	adds	r3, #4
 800ed74:	461a      	mov	r2, r3
 800ed76:	2102      	movs	r1, #2
 800ed78:	f7f8 fce4 	bl	8007744 <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800ed84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ed88:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ed8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800ed90:	68fa      	ldr	r2, [r7, #12]
 800ed92:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800ed94:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800ed9a:	68fa      	ldr	r2, [r7, #12]
 800ed9c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800ed9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800eda8:	f002 0201 	and.w	r2, r2, #1
 800edac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800edae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800edb8:	f002 0207 	and.w	r2, r2, #7
 800edbc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800edbe:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	8998      	ldrh	r0, [r3, #12]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	330c      	adds	r3, #12
 800edc8:	461a      	mov	r2, r3
 800edca:	2102      	movs	r1, #2
 800edcc:	f7f8 fcba 	bl	8007744 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	89d8      	ldrh	r0, [r3, #14]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	330e      	adds	r3, #14
 800edd8:	461a      	mov	r2, r3
 800edda:	2102      	movs	r1, #2
 800eddc:	f7f8 fcb2 	bl	8007744 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	8a18      	ldrh	r0, [r3, #16]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	3310      	adds	r3, #16
 800ede8:	461a      	mov	r2, r3
 800edea:	2102      	movs	r1, #2
 800edec:	f7f8 fcaa 	bl	8007744 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800edf8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800edfe:	68fa      	ldr	r2, [r7, #12]
 800ee00:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800ee02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800ee08:	68fa      	ldr	r2, [r7, #12]
 800ee0a:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800ee0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800ee12:	68fa      	ldr	r2, [r7, #12]
 800ee14:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800ee16:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ee18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3718      	adds	r7, #24
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b086      	sub	sp, #24
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	607a      	str	r2, [r7, #4]
 800ee30:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ee32:	2300      	movs	r3, #0
 800ee34:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 800ee36:	897b      	ldrh	r3, [r7, #10]
 800ee38:	2b16      	cmp	r3, #22
 800ee3a:	d802      	bhi.n	800ee42 <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ee3c:	f06f 0309 	mvn.w	r3, #9
 800ee40:	e06e      	b.n	800ef20 <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	781b      	ldrb	r3, [r3, #0]
 800ee46:	f003 030f 	and.w	r3, r3, #15
 800ee4a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800ee54:	68fa      	ldr	r2, [r7, #12]
 800ee56:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ee58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800ee62:	f002 020f 	and.w	r2, r2, #15
 800ee66:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ee68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800ee6e:	68fa      	ldr	r2, [r7, #12]
 800ee70:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800ee72:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800ee7c:	f002 020f 	and.w	r2, r2, #15
 800ee80:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800ee82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800ee88:	68fa      	ldr	r2, [r7, #12]
 800ee8a:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800ee8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800ee96:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ee9a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ee9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800eea6:	f002 020f 	and.w	r2, r2, #15
 800eeaa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800eeac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800eeb2:	68fa      	ldr	r2, [r7, #12]
 800eeb4:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800eeb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800eec0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800eec4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800eec6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	8958      	ldrh	r0, [r3, #10]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	330a      	adds	r3, #10
 800eed0:	461a      	mov	r2, r3
 800eed2:	2102      	movs	r1, #2
 800eed4:	f7f8 fc36 	bl	8007744 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	8998      	ldrh	r0, [r3, #12]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	330c      	adds	r3, #12
 800eee0:	461a      	mov	r2, r3
 800eee2:	2102      	movs	r1, #2
 800eee4:	f7f8 fc2e 	bl	8007744 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800eeec:	68fa      	ldr	r2, [r7, #12]
 800eeee:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800eef0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800eef6:	68fa      	ldr	r2, [r7, #12]
 800eef8:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800eefa:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	6918      	ldr	r0, [r3, #16]
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	3312      	adds	r3, #18
 800ef04:	461a      	mov	r2, r3
 800ef06:	2104      	movs	r1, #4
 800ef08:	f7f8 fcbc 	bl	8007884 <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800ef14:	f002 0201 	and.w	r2, r2, #1
 800ef18:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800ef1a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ef1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3718      	adds	r7, #24
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b086      	sub	sp, #24
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	460b      	mov	r3, r1
 800ef32:	607a      	str	r2, [r7, #4]
 800ef34:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ef36:	2300      	movs	r3, #0
 800ef38:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 800ef3a:	897b      	ldrh	r3, [r7, #10]
 800ef3c:	2b11      	cmp	r3, #17
 800ef3e:	d802      	bhi.n	800ef46 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ef40:	f06f 0309 	mvn.w	r3, #9
 800ef44:	e071      	b.n	800f02a <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	f003 0303 	and.w	r3, r3, #3
 800ef4e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	8858      	ldrh	r0, [r3, #2]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	2102      	movs	r1, #2
 800ef60:	f7f8 fbf0 	bl	8007744 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	8898      	ldrh	r0, [r3, #4]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	3303      	adds	r3, #3
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	2102      	movs	r1, #2
 800ef70:	f7f8 fbe8 	bl	8007744 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800ef7c:	f002 0201 	and.w	r2, r2, #1
 800ef80:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ef82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800ef8c:	f002 0207 	and.w	r2, r2, #7
 800ef90:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ef92:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800ef98:	68fa      	ldr	r2, [r7, #12]
 800ef9a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800ef9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800efa2:	68fa      	ldr	r2, [r7, #12]
 800efa4:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800efa6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800efb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800efb4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800efb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800efc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800efc4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800efc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800efd0:	f002 0203 	and.w	r2, r2, #3
 800efd4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800efd6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800efe0:	f002 0203 	and.w	r2, r2, #3
 800efe4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800efe6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800eff0:	f002 020f 	and.w	r2, r2, #15
 800eff4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800eff6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800effc:	68fa      	ldr	r2, [r7, #12]
 800effe:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800f000:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800f006:	68fa      	ldr	r2, [r7, #12]
 800f008:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800f00a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800f010:	68fa      	ldr	r2, [r7, #12]
 800f012:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800f014:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800f01e:	f002 0203 	and.w	r2, r2, #3
 800f022:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f024:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f026:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3718      	adds	r7, #24
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f032:	b480      	push	{r7}
 800f034:	b087      	sub	sp, #28
 800f036:	af00      	add	r7, sp, #0
 800f038:	60f8      	str	r0, [r7, #12]
 800f03a:	460b      	mov	r3, r1
 800f03c:	607a      	str	r2, [r7, #4]
 800f03e:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f040:	2300      	movs	r3, #0
 800f042:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 800f044:	897b      	ldrh	r3, [r7, #10]
 800f046:	2b04      	cmp	r3, #4
 800f048:	d802      	bhi.n	800f050 <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f04a:	f06f 0309 	mvn.w	r3, #9
 800f04e:	e025      	b.n	800f09c <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	781b      	ldrb	r3, [r3, #0]
 800f054:	f003 0301 	and.w	r3, r3, #1
 800f058:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800f066:	f002 0201 	and.w	r2, r2, #1
 800f06a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f06c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800f076:	f002 0201 	and.w	r2, r2, #1
 800f07a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f07c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800f086:	f002 0203 	and.w	r2, r2, #3
 800f08a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f08c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800f092:	68fa      	ldr	r2, [r7, #12]
 800f094:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f096:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f098:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	371c      	adds	r7, #28
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a6:	4770      	bx	lr

0800f0a8 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b086      	sub	sp, #24
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	60b9      	str	r1, [r7, #8]
 800f0b2:	607a      	str	r2, [r7, #4]
 800f0b4:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 800f0ba:	89fb      	ldrh	r3, [r7, #14]
 800f0bc:	2b2b      	cmp	r3, #43	; 0x2b
 800f0be:	d802      	bhi.n	800f0c6 <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f0c0:	f06f 0309 	mvn.w	r3, #9
 800f0c4:	e0e2      	b.n	800f28c <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0ce:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	785a      	ldrb	r2, [r3, #1]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	3302      	adds	r3, #2
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	f003 030f 	and.w	r3, r3, #15
 800f0e6:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	78da      	ldrb	r2, [r3, #3]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	3304      	adds	r3, #4
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	2002      	movs	r0, #2
 800f0fc:	f7f8 fb4d 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f100:	4603      	mov	r3, r0
 800f102:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	3306      	adds	r3, #6
 800f10c:	4619      	mov	r1, r3
 800f10e:	2002      	movs	r0, #2
 800f110:	f7f8 fb43 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f114:	4603      	mov	r3, r0
 800f116:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	3308      	adds	r3, #8
 800f120:	4619      	mov	r1, r3
 800f122:	2002      	movs	r0, #2
 800f124:	f7f8 fb39 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f128:	4603      	mov	r3, r0
 800f12a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	330a      	adds	r3, #10
 800f134:	4619      	mov	r1, r3
 800f136:	2002      	movs	r0, #2
 800f138:	f7f8 fb2f 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f13c:	4603      	mov	r3, r0
 800f13e:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	330c      	adds	r3, #12
 800f148:	4619      	mov	r1, r3
 800f14a:	2002      	movs	r0, #2
 800f14c:	f7f8 fb25 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f150:	4603      	mov	r3, r0
 800f152:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	330e      	adds	r3, #14
 800f15c:	4619      	mov	r1, r3
 800f15e:	2002      	movs	r0, #2
 800f160:	f7f8 fb1b 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f164:	4603      	mov	r3, r0
 800f166:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	3310      	adds	r3, #16
 800f170:	4619      	mov	r1, r3
 800f172:	2002      	movs	r0, #2
 800f174:	f7f8 fb11 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f178:	4603      	mov	r3, r0
 800f17a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	3312      	adds	r3, #18
 800f184:	4619      	mov	r1, r3
 800f186:	2002      	movs	r0, #2
 800f188:	f7f8 fb07 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f18c:	4603      	mov	r3, r0
 800f18e:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	3314      	adds	r3, #20
 800f198:	4619      	mov	r1, r3
 800f19a:	2002      	movs	r0, #2
 800f19c:	f7f8 fafd 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	3316      	adds	r3, #22
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	2002      	movs	r0, #2
 800f1b0:	f7f8 faf3 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	3318      	adds	r3, #24
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	2002      	movs	r0, #2
 800f1c4:	f7f8 fae9 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	331a      	adds	r3, #26
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	2002      	movs	r0, #2
 800f1d8:	f7f8 fadf 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	331c      	adds	r3, #28
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	2002      	movs	r0, #2
 800f1ec:	f7f8 fad5 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	331e      	adds	r3, #30
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	2002      	movs	r0, #2
 800f200:	f7f8 facb 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f204:	4603      	mov	r3, r0
 800f206:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	3320      	adds	r3, #32
 800f210:	4619      	mov	r1, r3
 800f212:	2002      	movs	r0, #2
 800f214:	f7f8 fac1 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f218:	4603      	mov	r3, r0
 800f21a:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	3322      	adds	r3, #34	; 0x22
 800f224:	4619      	mov	r1, r3
 800f226:	2002      	movs	r0, #2
 800f228:	f7f8 fab7 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f22c:	4603      	mov	r3, r0
 800f22e:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	3324      	adds	r3, #36	; 0x24
 800f238:	4619      	mov	r1, r3
 800f23a:	2002      	movs	r0, #2
 800f23c:	f7f8 faad 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f240:	4603      	mov	r3, r0
 800f242:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	3326      	adds	r3, #38	; 0x26
 800f24c:	4619      	mov	r1, r3
 800f24e:	2002      	movs	r0, #2
 800f250:	f7f8 faa3 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f254:	4603      	mov	r3, r0
 800f256:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	3328      	adds	r3, #40	; 0x28
 800f260:	4619      	mov	r1, r3
 800f262:	2002      	movs	r0, #2
 800f264:	f7f8 fa99 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f268:	4603      	mov	r3, r0
 800f26a:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800f288:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3718      	adds	r7, #24
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b086      	sub	sp, #24
 800f298:	af00      	add	r7, sp, #0
 800f29a:	4603      	mov	r3, r0
 800f29c:	60b9      	str	r1, [r7, #8]
 800f29e:	607a      	str	r2, [r7, #4]
 800f2a0:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 800f2a6:	89fb      	ldrh	r3, [r7, #14]
 800f2a8:	2b20      	cmp	r3, #32
 800f2aa:	d802      	bhi.n	800f2b2 <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f2ac:	f06f 0309 	mvn.w	r3, #9
 800f2b0:	e04d      	b.n	800f34e <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 800f2b2:	68b9      	ldr	r1, [r7, #8]
 800f2b4:	2004      	movs	r0, #4
 800f2b6:	f7f8 fb0f 	bl	80078d8 <VL53LX_i2c_decode_uint32_t>
 800f2ba:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	3304      	adds	r3, #4
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	2004      	movs	r0, #4
 800f2c8:	f7f8 fb06 	bl	80078d8 <VL53LX_i2c_decode_uint32_t>
 800f2cc:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	3308      	adds	r3, #8
 800f2d6:	4619      	mov	r1, r3
 800f2d8:	2004      	movs	r0, #4
 800f2da:	f7f8 fb1a 	bl	8007912 <VL53LX_i2c_decode_int32_t>
 800f2de:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	330c      	adds	r3, #12
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	2004      	movs	r0, #4
 800f2ec:	f7f8 faf4 	bl	80078d8 <VL53LX_i2c_decode_uint32_t>
 800f2f0:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	3310      	adds	r3, #16
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	2004      	movs	r0, #4
 800f2fe:	f7f8 faeb 	bl	80078d8 <VL53LX_i2c_decode_uint32_t>
 800f302:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	3314      	adds	r3, #20
 800f30c:	4619      	mov	r1, r3
 800f30e:	2004      	movs	r0, #4
 800f310:	f7f8 fae2 	bl	80078d8 <VL53LX_i2c_decode_uint32_t>
 800f314:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	3318      	adds	r3, #24
 800f31e:	4619      	mov	r1, r3
 800f320:	2004      	movs	r0, #4
 800f322:	f7f8 faf6 	bl	8007912 <VL53LX_i2c_decode_int32_t>
 800f326:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	331c      	adds	r3, #28
 800f330:	4619      	mov	r1, r3
 800f332:	2004      	movs	r0, #4
 800f334:	f7f8 fad0 	bl	80078d8 <VL53LX_i2c_decode_uint32_t>
 800f338:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800f34a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3718      	adds	r7, #24
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}

0800f356 <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 800f356:	b580      	push	{r7, lr}
 800f358:	b086      	sub	sp, #24
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	4603      	mov	r3, r0
 800f35e:	60b9      	str	r1, [r7, #8]
 800f360:	607a      	str	r2, [r7, #4]
 800f362:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f364:	2300      	movs	r3, #0
 800f366:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 800f368:	89fb      	ldrh	r3, [r7, #14]
 800f36a:	2b37      	cmp	r3, #55	; 0x37
 800f36c:	d802      	bhi.n	800f374 <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f36e:	f06f 0309 	mvn.w	r3, #9
 800f372:	e15e      	b.n	800f632 <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 800f374:	68b9      	ldr	r1, [r7, #8]
 800f376:	2002      	movs	r0, #2
 800f378:	f7f8 fa0f 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f37c:	4603      	mov	r3, r0
 800f37e:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	3302      	adds	r3, #2
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f38e:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	3303      	adds	r3, #3
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f39e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	3304      	adds	r3, #4
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	f003 0303 	and.w	r3, r3, #3
 800f3ae:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	3305      	adds	r3, #5
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	f003 0301 	and.w	r3, r3, #1
 800f3be:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	3306      	adds	r3, #6
 800f3c8:	781b      	ldrb	r3, [r3, #0]
 800f3ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3ce:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	3307      	adds	r3, #7
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3de:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	3308      	adds	r3, #8
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	2002      	movs	r0, #2
 800f3ec:	f7f8 f9d5 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f3f6:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	330a      	adds	r3, #10
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	f003 0303 	and.w	r3, r3, #3
 800f406:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	330b      	adds	r3, #11
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	f003 0303 	and.w	r3, r3, #3
 800f416:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	330c      	adds	r3, #12
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	f003 030f 	and.w	r3, r3, #15
 800f426:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	330d      	adds	r3, #13
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	f003 0307 	and.w	r3, r3, #7
 800f436:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	330e      	adds	r3, #14
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	f003 0301 	and.w	r3, r3, #1
 800f446:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	330f      	adds	r3, #15
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	f003 0303 	and.w	r3, r3, #3
 800f456:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	7c1a      	ldrb	r2, [r3, #16]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	7c5a      	ldrb	r2, [r3, #17]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	3312      	adds	r3, #18
 800f470:	4619      	mov	r1, r3
 800f472:	2002      	movs	r0, #2
 800f474:	f7f8 f991 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f478:	4603      	mov	r3, r0
 800f47a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f47e:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	3316      	adds	r3, #22
 800f488:	4619      	mov	r1, r3
 800f48a:	2002      	movs	r0, #2
 800f48c:	f7f8 f985 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f490:	4603      	mov	r3, r0
 800f492:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	3318      	adds	r3, #24
 800f49c:	4619      	mov	r1, r3
 800f49e:	2002      	movs	r0, #2
 800f4a0:	f7f8 f97b 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	331a      	adds	r3, #26
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	f003 0301 	and.w	r3, r3, #1
 800f4b6:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	331b      	adds	r3, #27
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	f003 0307 	and.w	r3, r3, #7
 800f4c6:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	7f1a      	ldrb	r2, [r3, #28]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	7f5a      	ldrb	r2, [r3, #29]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	331e      	adds	r3, #30
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4e6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	331f      	adds	r3, #31
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4f6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	3320      	adds	r3, #32
 800f500:	781b      	ldrb	r3, [r3, #0]
 800f502:	f003 0303 	and.w	r3, r3, #3
 800f506:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	3321      	adds	r3, #33	; 0x21
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	f003 030f 	and.w	r3, r3, #15
 800f516:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	3325      	adds	r3, #37	; 0x25
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	f003 0301 	and.w	r3, r3, #1
 800f54a:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	3326      	adds	r3, #38	; 0x26
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	f003 0303 	and.w	r3, r3, #3
 800f55c:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	3327      	adds	r3, #39	; 0x27
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	f003 031f 	and.w	r3, r3, #31
 800f56e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	3328      	adds	r3, #40	; 0x28
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	f003 031f 	and.w	r3, r3, #31
 800f580:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	3329      	adds	r3, #41	; 0x29
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	f003 031f 	and.w	r3, r3, #31
 800f592:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	332a      	adds	r3, #42	; 0x2a
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	f003 0301 	and.w	r3, r3, #1
 800f5a4:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	332b      	adds	r3, #43	; 0x2b
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	f003 0301 	and.w	r3, r3, #1
 800f5b6:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	332c      	adds	r3, #44	; 0x2c
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	f003 0303 	and.w	r3, r3, #3
 800f5c8:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	332d      	adds	r3, #45	; 0x2d
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5da:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	332e      	adds	r3, #46	; 0x2e
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	2004      	movs	r0, #4
 800f5ea:	f7f8 f975 	bl	80078d8 <VL53LX_i2c_decode_uint32_t>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	3332      	adds	r3, #50	; 0x32
 800f5fc:	4619      	mov	r1, r3
 800f5fe:	2004      	movs	r0, #4
 800f600:	f7f8 f96a 	bl	80078d8 <VL53LX_i2c_decode_uint32_t>
 800f604:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	3336      	adds	r3, #54	; 0x36
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	f003 0301 	and.w	r3, r3, #1
 800f614:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	3337      	adds	r3, #55	; 0x37
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	f003 0301 	and.w	r3, r3, #1
 800f626:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800f62e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f632:	4618      	mov	r0, r3
 800f634:	3718      	adds	r7, #24
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}

0800f63a <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 800f63a:	b580      	push	{r7, lr}
 800f63c:	b086      	sub	sp, #24
 800f63e:	af00      	add	r7, sp, #0
 800f640:	4603      	mov	r3, r0
 800f642:	60b9      	str	r1, [r7, #8]
 800f644:	607a      	str	r2, [r7, #4]
 800f646:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f648:	2300      	movs	r3, #0
 800f64a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 800f64c:	89fb      	ldrh	r3, [r7, #14]
 800f64e:	2b30      	cmp	r3, #48	; 0x30
 800f650:	d802      	bhi.n	800f658 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f652:	f06f 0309 	mvn.w	r3, #9
 800f656:	e112      	b.n	800f87e <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	785a      	ldrb	r2, [r3, #1]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	789a      	ldrb	r2, [r3, #2]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	3303      	adds	r3, #3
 800f674:	4619      	mov	r1, r3
 800f676:	2002      	movs	r0, #2
 800f678:	f7f8 f88f 	bl	800779a <VL53LX_i2c_decode_uint16_t>
 800f67c:	4603      	mov	r3, r0
 800f67e:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	3305      	adds	r3, #5
 800f688:	781b      	ldrb	r3, [r3, #0]
 800f68a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f68e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	3306      	adds	r3, #6
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	f003 0307 	and.w	r3, r3, #7
 800f69e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	3307      	adds	r3, #7
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	f003 0307 	and.w	r3, r3, #7
 800f6ae:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	3308      	adds	r3, #8
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6be:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	3309      	adds	r3, #9
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6ce:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	330a      	adds	r3, #10
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	f003 0301 	and.w	r3, r3, #1
 800f6de:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	330b      	adds	r3, #11
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f6ee:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	330c      	adds	r3, #12
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	f003 0301 	and.w	r3, r3, #1
 800f6fe:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	330d      	adds	r3, #13
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f70e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	330e      	adds	r3, #14
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f71e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	7bda      	ldrb	r2, [r3, #15]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	7c1a      	ldrb	r2, [r3, #16]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	7c5a      	ldrb	r2, [r3, #17]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	7c9a      	ldrb	r2, [r3, #18]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	7cda      	ldrb	r2, [r3, #19]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	7d1a      	ldrb	r2, [r3, #20]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	7d5a      	ldrb	r2, [r3, #21]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	7d9a      	ldrb	r2, [r3, #22]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	7dda      	ldrb	r2, [r3, #23]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	7e1a      	ldrb	r2, [r3, #24]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	7e5a      	ldrb	r2, [r3, #25]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	7e9a      	ldrb	r2, [r3, #26]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	7eda      	ldrb	r2, [r3, #27]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	7f1a      	ldrb	r2, [r3, #28]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	7f5a      	ldrb	r2, [r3, #29]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	7f9a      	ldrb	r2, [r3, #30]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	7fda      	ldrb	r2, [r3, #31]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800f87a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3718      	adds	r7, #24
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}

0800f886 <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 800f886:	b580      	push	{r7, lr}
 800f888:	b090      	sub	sp, #64	; 0x40
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	6078      	str	r0, [r7, #4]
 800f88e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f890:	2300      	movs	r3, #0
 800f892:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f896:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d10a      	bne.n	800f8b4 <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 800f89e:	f107 020c 	add.w	r2, r7, #12
 800f8a2:	2331      	movs	r3, #49	; 0x31
 800f8a4:	f240 110f 	movw	r1, #271	; 0x10f
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f7fe fcff 	bl	800e2ac <VL53LX_ReadMulti>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f8b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d109      	bne.n	800f8d0 <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 800f8bc:	f107 030c 	add.w	r3, r7, #12
 800f8c0:	683a      	ldr	r2, [r7, #0]
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	2031      	movs	r0, #49	; 0x31
 800f8c6:	f7ff feb8 	bl	800f63a <VL53LX_i2c_decode_nvm_copy_data>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f8d0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3740      	adds	r7, #64	; 0x40
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 800f8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e0:	b0a1      	sub	sp, #132	; 0x84
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	64b9      	str	r1, [r7, #72]	; 0x48
 800f8e6:	647a      	str	r2, [r7, #68]	; 0x44
 800f8e8:	643b      	str	r3, [r7, #64]	; 0x40
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800f8f0:	23f1      	movs	r3, #241	; 0xf1
 800f8f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint32_t sigma_int  = VL53LX_D_002;
 800f8f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8fa:	657b      	str	r3, [r7, #84]	; 0x54

	uint32_t pll_period_mm  = 0;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	653b      	str	r3, [r7, #80]	; 0x50

	uint64_t tmp0        = 0;
 800f900:	f04f 0200 	mov.w	r2, #0
 800f904:	f04f 0300 	mov.w	r3, #0
 800f908:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	uint64_t tmp1        = 0;
 800f90c:	f04f 0200 	mov.w	r2, #0
 800f910:	f04f 0300 	mov.w	r3, #0
 800f914:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	uint64_t b_minus_amb = 0;
 800f918:	f04f 0200 	mov.w	r2, #0
 800f91c:	f04f 0300 	mov.w	r3, #0
 800f920:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t VL53LX_p_055   = 0;
 800f924:	f04f 0200 	mov.w	r2, #0
 800f928:	f04f 0300 	mov.w	r3, #0
 800f92c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	*psigma_est  = VL53LX_D_002;
 800f930:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f938:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 800f93a:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	f000 8259 	beq.w	800fdf6 <VL53LX_f_023+0x51a>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 800f944:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800f948:	4618      	mov	r0, r3
 800f94a:	f7fb f986 	bl	800ac5a <VL53LX_calc_pll_period_mm>
 800f94e:	6538      	str	r0, [r7, #80]	; 0x50



		if (VL53LX_p_028 > VL53LX_p_032)
 800f950:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f956:	429a      	cmp	r2, r3
 800f958:	d90f      	bls.n	800f97a <VL53LX_f_023+0x9e>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 800f95a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f95e:	4618      	mov	r0, r3
 800f960:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_032;
 800f964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f966:	461a      	mov	r2, r3
 800f968:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 800f96c:	ebb0 0a02 	subs.w	sl, r0, r2
 800f970:	eb61 0b03 	sbc.w	fp, r1, r3
 800f974:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800f978:	e00e      	b.n	800f998 <VL53LX_f_023+0xbc>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 800f97a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f97c:	4618      	mov	r0, r3
 800f97e:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_028;
 800f982:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f986:	461a      	mov	r2, r3
 800f988:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 800f98c:	ebb0 0802 	subs.w	r8, r0, r2
 800f990:	eb61 0903 	sbc.w	r9, r1, r3
 800f994:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60



		if (VL53LX_p_007 > VL53LX_p_001)
 800f998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f99a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f99c:	429a      	cmp	r2, r3
 800f99e:	d911      	bls.n	800f9c4 <VL53LX_f_023+0xe8>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 800f9a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_001;
 800f9a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 800f9b0:	1a86      	subs	r6, r0, r2
 800f9b2:	62be      	str	r6, [r7, #40]	; 0x28
 800f9b4:	eb61 0303 	sbc.w	r3, r1, r3
 800f9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f9be:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800f9c2:	e010      	b.n	800f9e6 <VL53LX_f_023+0x10a>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 800f9c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_007;
 800f9cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 800f9d4:	1a86      	subs	r6, r0, r2
 800f9d6:	623e      	str	r6, [r7, #32]
 800f9d8:	eb61 0303 	sbc.w	r3, r1, r3
 800f9dc:	627b      	str	r3, [r7, #36]	; 0x24
 800f9de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f9e2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58



		if (b_minus_amb != 0) {
 800f9e6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	f000 8203 	beq.w	800fdf6 <VL53LX_f_023+0x51a>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 800f9f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f04f 0100 	mov.w	r1, #0
 800f9f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f9fc:	461a      	mov	r2, r3
 800f9fe:	f04f 0300 	mov.w	r3, #0
 800fa02:	1884      	adds	r4, r0, r2
 800fa04:	eb41 0503 	adc.w	r5, r1, r3
					(uint64_t)VL53LX_p_028;
 800fa08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	f04f 0300 	mov.w	r3, #0
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 800fa12:	18a1      	adds	r1, r4, r2
 800fa14:	61b9      	str	r1, [r7, #24]
 800fa16:	eb45 0303 	adc.w	r3, r5, r3
 800fa1a:	61fb      	str	r3, [r7, #28]
 800fa1c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800fa20:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > VL53LX_D_003)
 800fa24:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800fa28:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800fa2c:	f04f 0100 	mov.w	r1, #0
 800fa30:	4299      	cmp	r1, r3
 800fa32:	bf08      	it	eq
 800fa34:	4290      	cmpeq	r0, r2
 800fa36:	d205      	bcs.n	800fa44 <VL53LX_f_023+0x168>
				tmp0 = VL53LX_D_003;
 800fa38:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800fa3c:	f04f 0300 	mov.w	r3, #0
 800fa40:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 800fa44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fa48:	fb02 f203 	mul.w	r2, r2, r3
 800fa4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fa50:	fb01 f303 	mul.w	r3, r1, r3
 800fa54:	18d1      	adds	r1, r2, r3
 800fa56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa58:	fba3 2303 	umull	r2, r3, r3, r3
 800fa5c:	4419      	add	r1, r3
 800fa5e:	460b      	mov	r3, r1
 800fa60:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 800fa64:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 << 8;
 800fa68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800fa6c:	f04f 0200 	mov.w	r2, #0
 800fa70:	f04f 0300 	mov.w	r3, #0
 800fa74:	020b      	lsls	r3, r1, #8
 800fa76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fa7a:	0202      	lsls	r2, r0, #8
 800fa7c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > VL53LX_D_004)
 800fa80:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800fa84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa88:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800fa8c:	4299      	cmp	r1, r3
 800fa8e:	bf08      	it	eq
 800fa90:	4290      	cmpeq	r0, r2
 800fa92:	d205      	bcs.n	800faa0 <VL53LX_f_023+0x1c4>
				tmp1 = VL53LX_D_004;
 800fa94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa98:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800fa9c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp1 = do_division_u(tmp1, b_minus_amb);
 800faa0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800faa4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800faa8:	f7f0 fc32 	bl	8000310 <__aeabi_uldivmod>
 800faac:	4602      	mov	r2, r0
 800faae:	460b      	mov	r3, r1
 800fab0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = do_division_u(tmp1, b_minus_amb);
 800fab4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800fab8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800fabc:	f7f0 fc28 	bl	8000310 <__aeabi_uldivmod>
 800fac0:	4602      	mov	r2, r0
 800fac2:	460b      	mov	r3, r1
 800fac4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_005)
 800fac8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800facc:	2b80      	cmp	r3, #128	; 0x80
 800face:	bf08      	it	eq
 800fad0:	2a00      	cmpeq	r2, #0
 800fad2:	d305      	bcc.n	800fae0 <VL53LX_f_023+0x204>
				tmp1 = (uint64_t)VL53LX_D_005;
 800fad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fad8:	f04f 037f 	mov.w	r3, #127	; 0x7f
 800fadc:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 * tmp0;
 800fae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fae2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fae4:	fb02 f203 	mul.w	r2, r2, r3
 800fae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800faea:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800faec:	fb01 f303 	mul.w	r3, r1, r3
 800faf0:	18d1      	adds	r1, r2, r3
 800faf2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800faf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800faf6:	fba2 2303 	umull	r2, r3, r2, r3
 800fafa:	4419      	add	r1, r3
 800fafc:	460b      	mov	r3, r1
 800fafe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800fb02:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 800fb06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f04f 0100 	mov.w	r1, #0
 800fb10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fb14:	461a      	mov	r2, r3
 800fb16:	f04f 0300 	mov.w	r3, #0
 800fb1a:	1884      	adds	r4, r0, r2
 800fb1c:	63bc      	str	r4, [r7, #56]	; 0x38
 800fb1e:	eb41 0303 	adc.w	r3, r1, r3
 800fb22:	63fb      	str	r3, [r7, #60]	; 0x3c
				(uint64_t)a_zp + (uint64_t)ax_zp;
 800fb24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb28:	461a      	mov	r2, r3
 800fb2a:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 800fb2e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800fb32:	4621      	mov	r1, r4
 800fb34:	1889      	adds	r1, r1, r2
 800fb36:	6339      	str	r1, [r7, #48]	; 0x30
 800fb38:	4629      	mov	r1, r5
 800fb3a:	eb43 0101 	adc.w	r1, r3, r1
 800fb3e:	6379      	str	r1, [r7, #52]	; 0x34
				(uint64_t)a_zp + (uint64_t)ax_zp;
 800fb40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fb44:	461a      	mov	r2, r3
 800fb46:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 800fb4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800fb4e:	4621      	mov	r1, r4
 800fb50:	1889      	adds	r1, r1, r2
 800fb52:	6139      	str	r1, [r7, #16]
 800fb54:	4629      	mov	r1, r5
 800fb56:	eb43 0101 	adc.w	r1, r3, r1
 800fb5a:	6179      	str	r1, [r7, #20]
 800fb5c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800fb60:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_003)
 800fb64:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800fb68:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800fb6c:	f04f 0100 	mov.w	r1, #0
 800fb70:	4299      	cmp	r1, r3
 800fb72:	bf08      	it	eq
 800fb74:	4290      	cmpeq	r0, r2
 800fb76:	d205      	bcs.n	800fb84 <VL53LX_f_023+0x2a8>
				tmp1 = (uint64_t)VL53LX_D_003;
 800fb78:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800fb7c:	f04f 0300 	mov.w	r3, #0
 800fb80:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			tmp1 = tmp1 << 8;
 800fb84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800fb88:	f04f 0200 	mov.w	r2, #0
 800fb8c:	f04f 0300 	mov.w	r3, #0
 800fb90:	020b      	lsls	r3, r1, #8
 800fb92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fb96:	0202      	lsls	r2, r0, #8
 800fb98:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 + tmp0;
 800fb9c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800fba0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800fba4:	1884      	adds	r4, r0, r2
 800fba6:	60bc      	str	r4, [r7, #8]
 800fba8:	eb41 0303 	adc.w	r3, r1, r3
 800fbac:	60fb      	str	r3, [r7, #12]
 800fbae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800fbb2:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > (uint64_t)VL53LX_D_006)
 800fbb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800fbba:	2a00      	cmp	r2, #0
 800fbbc:	f173 0300 	sbcs.w	r3, r3, #0
 800fbc0:	da05      	bge.n	800fbce <VL53LX_f_023+0x2f2>
				tmp0 = (uint64_t)VL53LX_D_006;
 800fbc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbc6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fbca:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 800fbce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800fbd2:	2b01      	cmp	r3, #1
 800fbd4:	bf08      	it	eq
 800fbd6:	2a00      	cmpeq	r2, #0
 800fbd8:	d31e      	bcc.n	800fc18 <VL53LX_f_023+0x33c>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 800fbda:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800fbde:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800fbe2:	f7f0 fb95 	bl	8000310 <__aeabi_uldivmod>
 800fbe6:	4602      	mov	r2, r0
 800fbe8:	460b      	mov	r3, r1
 800fbea:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 800fbee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbf0:	461a      	mov	r2, r3
 800fbf2:	f04f 0300 	mov.w	r3, #0
 800fbf6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fbf8:	fb02 f001 	mul.w	r0, r2, r1
 800fbfc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800fbfe:	fb03 f101 	mul.w	r1, r3, r1
 800fc02:	4401      	add	r1, r0
 800fc04:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800fc06:	fba0 2302 	umull	r2, r3, r0, r2
 800fc0a:	4419      	add	r1, r3
 800fc0c:	460b      	mov	r3, r1
 800fc0e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800fc12:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800fc16:	e01d      	b.n	800fc54 <VL53LX_f_023+0x378>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 800fc18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	f04f 0300 	mov.w	r3, #0
 800fc20:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fc22:	fb02 f001 	mul.w	r0, r2, r1
 800fc26:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800fc28:	fb03 f101 	mul.w	r1, r3, r1
 800fc2c:	4401      	add	r1, r0
 800fc2e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800fc30:	fba0 2302 	umull	r2, r3, r0, r2
 800fc34:	4419      	add	r1, r3
 800fc36:	460b      	mov	r3, r1
 800fc38:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800fc3c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 800fc40:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800fc44:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800fc48:	f7f0 fb62 	bl	8000310 <__aeabi_uldivmod>
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	460b      	mov	r3, r1
 800fc50:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 800fc54:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800fc58:	2a00      	cmp	r2, #0
 800fc5a:	f173 0300 	sbcs.w	r3, r3, #0
 800fc5e:	da05      	bge.n	800fc6c <VL53LX_f_023+0x390>
				tmp0 = (uint64_t)VL53LX_D_006;
 800fc60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fc68:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 800fc6c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	bf08      	it	eq
 800fc74:	2a00      	cmpeq	r2, #0
 800fc76:	d32a      	bcc.n	800fcce <VL53LX_f_023+0x3f2>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 800fc78:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800fc7c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800fc80:	f7f0 fb46 	bl	8000310 <__aeabi_uldivmod>
 800fc84:	4602      	mov	r2, r0
 800fc86:	460b      	mov	r3, r1
 800fc88:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 800fc8c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800fc90:	f04f 0200 	mov.w	r2, #0
 800fc94:	f04f 0300 	mov.w	r3, #0
 800fc98:	0882      	lsrs	r2, r0, #2
 800fc9a:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 800fc9e:	088b      	lsrs	r3, r1, #2
 800fca0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 800fca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fca6:	461a      	mov	r2, r3
 800fca8:	f04f 0300 	mov.w	r3, #0
 800fcac:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fcae:	fb02 f001 	mul.w	r0, r2, r1
 800fcb2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800fcb4:	fb03 f101 	mul.w	r1, r3, r1
 800fcb8:	4401      	add	r1, r0
 800fcba:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800fcbc:	fba0 2302 	umull	r2, r3, r0, r2
 800fcc0:	4419      	add	r1, r3
 800fcc2:	460b      	mov	r3, r1
 800fcc4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800fcc8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800fccc:	e029      	b.n	800fd22 <VL53LX_f_023+0x446>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 800fcce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	f04f 0300 	mov.w	r3, #0
 800fcd6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fcd8:	fb02 f001 	mul.w	r0, r2, r1
 800fcdc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800fcde:	fb03 f101 	mul.w	r1, r3, r1
 800fce2:	4401      	add	r1, r0
 800fce4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800fce6:	fba0 2302 	umull	r2, r3, r0, r2
 800fcea:	4419      	add	r1, r3
 800fcec:	460b      	mov	r3, r1
 800fcee:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800fcf2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 800fcf6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800fcfa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800fcfe:	f7f0 fb07 	bl	8000310 <__aeabi_uldivmod>
 800fd02:	4602      	mov	r2, r0
 800fd04:	460b      	mov	r3, r1
 800fd06:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 800fd0a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800fd0e:	f04f 0200 	mov.w	r2, #0
 800fd12:	f04f 0300 	mov.w	r3, #0
 800fd16:	0882      	lsrs	r2, r0, #2
 800fd18:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 800fd1c:	088b      	lsrs	r3, r1, #2
 800fd1e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 800fd22:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800fd26:	2a00      	cmp	r2, #0
 800fd28:	f173 0300 	sbcs.w	r3, r3, #0
 800fd2c:	da05      	bge.n	800fd3a <VL53LX_f_023+0x45e>
				tmp0 = (uint64_t)VL53LX_D_006;
 800fd2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd32:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fd36:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp0 = tmp0 >> 2;
 800fd3a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800fd3e:	f04f 0200 	mov.w	r2, #0
 800fd42:	f04f 0300 	mov.w	r3, #0
 800fd46:	0882      	lsrs	r2, r0, #2
 800fd48:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 800fd4c:	088b      	lsrs	r3, r1, #2
 800fd4e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 800fd52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800fd56:	2b01      	cmp	r3, #1
 800fd58:	bf08      	it	eq
 800fd5a:	2a00      	cmpeq	r2, #0
 800fd5c:	d305      	bcc.n	800fd6a <VL53LX_f_023+0x48e>
				tmp0 = (uint64_t)VL53LX_D_007;
 800fd5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd62:	f04f 0300 	mov.w	r3, #0
 800fd66:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 800fd6a:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 800fd6e:	f04f 0100 	mov.w	r1, #0
 800fd72:	f04f 0200 	mov.w	r2, #0
 800fd76:	f04f 0300 	mov.w	r3, #0
 800fd7a:	01cb      	lsls	r3, r1, #7
 800fd7c:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 800fd80:	01c2      	lsls	r2, r0, #7
 800fd82:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 * tmp1;
 800fd86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fd8a:	fb02 f203 	mul.w	r2, r2, r3
 800fd8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd90:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fd92:	fb01 f303 	mul.w	r3, r1, r3
 800fd96:	18d1      	adds	r1, r2, r3
 800fd98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd9a:	fba3 2303 	umull	r2, r3, r3, r3
 800fd9e:	4419      	add	r1, r3
 800fda0:	460b      	mov	r3, r1
 800fda2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 800fda6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp0 = tmp0 + tmp1;
 800fdaa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800fdae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800fdb2:	1884      	adds	r4, r0, r2
 800fdb4:	603c      	str	r4, [r7, #0]
 800fdb6:	eb41 0303 	adc.w	r3, r1, r3
 800fdba:	607b      	str	r3, [r7, #4]
 800fdbc:	e9d7 3400 	ldrd	r3, r4, [r7]
 800fdc0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 800fdc4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	bf08      	it	eq
 800fdcc:	2a00      	cmpeq	r2, #0
 800fdce:	d305      	bcc.n	800fddc <VL53LX_f_023+0x500>
				tmp0 = (uint64_t)VL53LX_D_007;
 800fdd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fdd4:	f04f 0300 	mov.w	r3, #0
 800fdd8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 800fddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fdde:	4618      	mov	r0, r3
 800fde0:	f7fa fdd4 	bl	800a98c <VL53LX_isqrt>
 800fde4:	6578      	str	r0, [r7, #84]	; 0x54

			*psigma_est = (uint16_t)sigma_int;
 800fde6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fde8:	b29a      	uxth	r2, r3
 800fdea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800fdee:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}

	}

	return status;
 800fdf6:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	3784      	adds	r7, #132	; 0x84
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe04 <VL53LX_wait_for_test_completion>:
}


VL53LX_Error VL53LX_wait_for_test_completion(
	VL53LX_DEV     Dev)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b086      	sub	sp, #24
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	3318      	adds	r3, #24
 800fe14:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 800fe16:	2300      	movs	r3, #0
 800fe18:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53LX_WAIT_METHOD_BLOCKING) {
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	781b      	ldrb	r3, [r3, #0]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d107      	bne.n	800fe32 <VL53LX_wait_for_test_completion+0x2e>



		status =
			VL53LX_poll_for_range_completion(
 800fe22:	f64e 2160 	movw	r1, #60000	; 0xea60
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f000 f88b 	bl	800ff42 <VL53LX_poll_for_range_completion>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	75fb      	strb	r3, [r7, #23]
 800fe30:	e01b      	b.n	800fe6a <VL53LX_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 800fe32:	2300      	movs	r3, #0
 800fe34:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 800fe36:	e011      	b.n	800fe5c <VL53LX_wait_for_test_completion+0x58>
			status = VL53LX_is_new_data_ready(
 800fe38:	f107 030f 	add.w	r3, r7, #15
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f000 f819 	bl	800fe76 <VL53LX_is_new_data_ready>
 800fe44:	4603      	mov	r3, r0
 800fe46:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53LX_ERROR_NONE) {
 800fe48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d105      	bne.n	800fe5c <VL53LX_wait_for_test_completion+0x58>
				status = VL53LX_WaitMs(
 800fe50:	2101      	movs	r1, #1
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f7fe fb44 	bl	800e4e0 <VL53LX_WaitMs>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 800fe5c:	7bfb      	ldrb	r3, [r7, #15]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d103      	bne.n	800fe6a <VL53LX_wait_for_test_completion+0x66>
 800fe62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d0e6      	beq.n	800fe38 <VL53LX_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fe6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3718      	adds	r7, #24
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}

0800fe76 <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 800fe76:	b580      	push	{r7, lr}
 800fe78:	b086      	sub	sp, #24
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
 800fe7e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fe80:	2300      	movs	r3, #0
 800fe82:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	3318      	adds	r3, #24
 800fe88:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 800fe92:	2300      	movs	r3, #0
 800fe94:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800fe96:	693b      	ldr	r3, [r7, #16]
 800fe98:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 800fe9c:	f003 0310 	and.w	r3, r3, #16
 800fea0:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800fea2:	7bfb      	ldrb	r3, [r7, #15]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d102      	bne.n	800feae <VL53LX_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 800fea8:	2301      	movs	r3, #1
 800feaa:	75fb      	strb	r3, [r7, #23]
 800feac:	e001      	b.n	800feb2 <VL53LX_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 800feae:	2300      	movs	r3, #0
 800feb0:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 800feb2:	f107 030e 	add.w	r3, r7, #14
 800feb6:	461a      	mov	r2, r3
 800feb8:	2131      	movs	r1, #49	; 0x31
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f7fe fa88 	bl	800e3d0 <VL53LX_RdByte>
 800fec0:	4603      	mov	r3, r0
 800fec2:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 800fec4:	7bbb      	ldrb	r3, [r7, #14]
 800fec6:	f003 0201 	and.w	r2, r3, #1
 800feca:	7dfb      	ldrb	r3, [r7, #23]
 800fecc:	429a      	cmp	r2, r3
 800fece:	d103      	bne.n	800fed8 <VL53LX_is_new_data_ready+0x62>
		*pready = 0x01;
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	2201      	movs	r2, #1
 800fed4:	701a      	strb	r2, [r3, #0]
 800fed6:	e002      	b.n	800fede <VL53LX_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	2200      	movs	r2, #0
 800fedc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800fede:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	3718      	adds	r7, #24
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}

0800feea <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 800feea:	b580      	push	{r7, lr}
 800feec:	b086      	sub	sp, #24
 800feee:	af02      	add	r7, sp, #8
 800fef0:	6078      	str	r0, [r7, #4]
 800fef2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800fef4:	2300      	movs	r3, #0
 800fef6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 800fef8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f7fe faff 	bl	800e500 <VL53LX_WaitUs>
 800ff02:	4603      	mov	r3, r0
 800ff04:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 800ff06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d10b      	bne.n	800ff26 <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 800ff0e:	2301      	movs	r3, #1
 800ff10:	9301      	str	r3, [sp, #4]
 800ff12:	2301      	movs	r3, #1
 800ff14:	9300      	str	r3, [sp, #0]
 800ff16:	2301      	movs	r3, #1
 800ff18:	22e5      	movs	r2, #229	; 0xe5
 800ff1a:	6839      	ldr	r1, [r7, #0]
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f7fe fb07 	bl	800e530 <VL53LX_WaitValueMaskEx>
 800ff22:	4603      	mov	r3, r0
 800ff24:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 800ff26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d103      	bne.n	800ff36 <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 800ff2e:	2103      	movs	r1, #3
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7f6 fe49 	bl	8006bc8 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800ff36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3710      	adds	r7, #16
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}

0800ff42 <VL53LX_poll_for_range_completion>:


VL53LX_Error VL53LX_poll_for_range_completion(
	VL53LX_DEV     Dev,
	uint32_t       timeout_ms)
{
 800ff42:	b580      	push	{r7, lr}
 800ff44:	b088      	sub	sp, #32
 800ff46:	af02      	add	r7, sp, #8
 800ff48:	6078      	str	r0, [r7, #4]
 800ff4a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	3318      	adds	r3, #24
 800ff54:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800ff56:	2300      	movs	r3, #0
 800ff58:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 800ff64:	f003 0310 	and.w	r3, r3, #16
 800ff68:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800ff6a:	7bfb      	ldrb	r3, [r7, #15]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d102      	bne.n	800ff76 <VL53LX_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 800ff70:	2301      	movs	r3, #1
 800ff72:	75fb      	strb	r3, [r7, #23]
 800ff74:	e001      	b.n	800ff7a <VL53LX_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 800ff76:	2300      	movs	r3, #0
 800ff78:	75fb      	strb	r3, [r7, #23]

	status =
		VL53LX_WaitValueMaskEx(
 800ff7a:	7dfb      	ldrb	r3, [r7, #23]
 800ff7c:	2201      	movs	r2, #1
 800ff7e:	9201      	str	r2, [sp, #4]
 800ff80:	2201      	movs	r2, #1
 800ff82:	9200      	str	r2, [sp, #0]
 800ff84:	2231      	movs	r2, #49	; 0x31
 800ff86:	6839      	ldr	r1, [r7, #0]
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7fe fad1 	bl	800e530 <VL53LX_WaitValueMaskEx>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53LX_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 800ff92:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3718      	adds	r7, #24
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 800ff9e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ffa2:	b0a2      	sub	sp, #136	; 0x88
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	65f8      	str	r0, [r7, #92]	; 0x5c
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	460b      	mov	r3, r1
 800ffac:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800ffb0:	4613      	mov	r3, r2
 800ffb2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	uint8_t row = 0;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t col = 0;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65



	int16_t  bound_l_x = 0;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	int16_t  bound_r_x = 0;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	int16_t  bound_u_y = 0;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	int16_t  bound_d_y = 0;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

	int64_t xtalk_rate_ll = 0;
 800ffe6:	f04f 0200 	mov.w	r2, #0
 800ffea:	f04f 0300 	mov.w	r3, #0
 800ffee:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t xtalk_rate_ur = 0;
 800fff2:	f04f 0200 	mov.w	r2, #0
 800fff6:	f04f 0300 	mov.w	r3, #0
 800fffa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	int64_t xtalk_avg = 0;
 800fffe:	f04f 0200 	mov.w	r2, #0
 8010002:	f04f 0300 	mov.w	r3, #0
 8010006:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	if (status == VL53LX_ERROR_NONE) {
 801000a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 801000e:	2b00      	cmp	r3, #0
 8010010:	d108      	bne.n	8010024 <VL53LX_f_032+0x86>
		VL53LX_decode_row_col(
 8010012:	f107 0265 	add.w	r2, r7, #101	; 0x65
 8010016:	f107 0166 	add.w	r1, r7, #102	; 0x66
 801001a:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 801001e:	4618      	mov	r0, r3
 8010020:	f7fb f888 	bl	800b134 <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 8010024:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010028:	2b00      	cmp	r3, #0
 801002a:	d165      	bne.n	80100f8 <VL53LX_f_032+0x15a>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 801002c:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010030:	091b      	lsrs	r3, r3, #4
 8010032:	b2db      	uxtb	r3, r3
 8010034:	f003 0301 	and.w	r3, r3, #1
 8010038:	2b00      	cmp	r3, #0
 801003a:	d00e      	beq.n	801005a <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 801003c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8010040:	b29a      	uxth	r2, r3
 8010042:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010046:	095b      	lsrs	r3, r3, #5
 8010048:	b2db      	uxtb	r3, r3
 801004a:	b29b      	uxth	r3, r3
 801004c:	1ad3      	subs	r3, r2, r3
 801004e:	b29b      	uxth	r3, r3
 8010050:	3b01      	subs	r3, #1
 8010052:	b29b      	uxth	r3, r3
 8010054:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8010058:	e00b      	b.n	8010072 <VL53LX_f_032+0xd4>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 801005a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 801005e:	b29a      	uxth	r2, r3
 8010060:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010064:	095b      	lsrs	r3, r3, #5
 8010066:	b2db      	uxtb	r3, r3
 8010068:	b29b      	uxth	r3, r3
 801006a:	1ad3      	subs	r3, r2, r3
 801006c:	b29b      	uxth	r3, r3
 801006e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8010072:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8010076:	b29a      	uxth	r2, r3
 8010078:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 801007c:	095b      	lsrs	r3, r3, #5
 801007e:	b2db      	uxtb	r3, r3
 8010080:	b29b      	uxth	r3, r3
 8010082:	4413      	add	r3, r2
 8010084:	b29b      	uxth	r3, r3
 8010086:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 801008a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 801008e:	f003 0301 	and.w	r3, r3, #1
 8010092:	2b00      	cmp	r3, #0
 8010094:	d011      	beq.n	80100ba <VL53LX_f_032+0x11c>
			bound_d_y = (int16_t) row -
 8010096:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801009a:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 801009c:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80100a0:	f003 020f 	and.w	r2, r3, #15
 80100a4:	0fd3      	lsrs	r3, r2, #31
 80100a6:	4413      	add	r3, r2
 80100a8:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 80100aa:	b29b      	uxth	r3, r3
 80100ac:	1acb      	subs	r3, r1, r3
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	3b01      	subs	r3, #1
 80100b2:	b29b      	uxth	r3, r3
 80100b4:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 80100b8:	e00f      	b.n	80100da <VL53LX_f_032+0x13c>
		else
			bound_d_y = (int16_t) row -
 80100ba:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80100be:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 80100c0:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80100c4:	f003 020f 	and.w	r2, r3, #15
 80100c8:	0fd3      	lsrs	r3, r2, #31
 80100ca:	4413      	add	r3, r2
 80100cc:	105b      	asrs	r3, r3, #1
 80100ce:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 80100d0:	b29b      	uxth	r3, r3
 80100d2:	440b      	add	r3, r1
 80100d4:	b29b      	uxth	r3, r3
 80100d6:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

		bound_u_y = (int16_t) row +
 80100da:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80100de:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 80100e0:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80100e4:	f003 020f 	and.w	r2, r3, #15
 80100e8:	0fd3      	lsrs	r3, r2, #31
 80100ea:	4413      	add	r3, r2
 80100ec:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	440b      	add	r3, r1
 80100f2:	b29b      	uxth	r3, r3
 80100f4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 80100f8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d133      	bne.n	8010168 <VL53LX_f_032+0x1ca>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8010100:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010104:	b29a      	uxth	r2, r3
 8010106:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801010a:	4413      	add	r3, r2
 801010c:	b29b      	uxth	r3, r3
 801010e:	005b      	lsls	r3, r3, #1
 8010110:	b29b      	uxth	r3, r3
 8010112:	3b0f      	subs	r3, #15
 8010114:	b29b      	uxth	r3, r3
 8010116:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 801011a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 801011e:	b29a      	uxth	r2, r3
 8010120:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8010124:	4413      	add	r3, r2
 8010126:	b29b      	uxth	r3, r3
 8010128:	005b      	lsls	r3, r3, #1
 801012a:	b29b      	uxth	r3, r3
 801012c:	3b0f      	subs	r3, #15
 801012e:	b29b      	uxth	r3, r3
 8010130:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8010134:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 8010138:	b29a      	uxth	r2, r3
 801013a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 801013e:	4413      	add	r3, r2
 8010140:	b29b      	uxth	r3, r3
 8010142:	005b      	lsls	r3, r3, #1
 8010144:	b29b      	uxth	r3, r3
 8010146:	3b0f      	subs	r3, #15
 8010148:	b29b      	uxth	r3, r3
 801014a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 801014e:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 8010152:	b29a      	uxth	r2, r3
 8010154:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8010158:	4413      	add	r3, r2
 801015a:	b29b      	uxth	r3, r3
 801015c:	005b      	lsls	r3, r3, #1
 801015e:	b29b      	uxth	r3, r3
 8010160:	3b0f      	subs	r3, #15
 8010162:	b29b      	uxth	r3, r3
 8010164:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010168:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 801016c:	2b00      	cmp	r3, #0
 801016e:	f040 80cb 	bne.w	8010308 <VL53LX_f_032+0x36a>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010172:	f9b7 0086 	ldrsh.w	r0, [r7, #134]	; 0x86
 8010176:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 801017a:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801017e:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010182:	fb02 f501 	mul.w	r5, r2, r1
 8010186:	fb00 f403 	mul.w	r4, r0, r3
 801018a:	442c      	add	r4, r5
 801018c:	fba0 8902 	umull	r8, r9, r0, r2
 8010190:	eb04 0309 	add.w	r3, r4, r9
 8010194:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010196:	f9b7 0080 	ldrsh.w	r0, [r7, #128]	; 0x80
 801019a:	ea4f 71e0 	mov.w	r1, r0, asr #31
					((int64_t)ygradient));
 801019e:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 80101a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80101a6:	fb02 f501 	mul.w	r5, r2, r1
 80101aa:	fb00 f403 	mul.w	r4, r0, r3
 80101ae:	442c      	add	r4, r5
 80101b0:	fba0 2302 	umull	r2, r3, r0, r2
 80101b4:	18e1      	adds	r1, r4, r3
 80101b6:	460b      	mov	r3, r1
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80101b8:	eb18 0102 	adds.w	r1, r8, r2
 80101bc:	6339      	str	r1, [r7, #48]	; 0x30
 80101be:	eb49 0303 	adc.w	r3, r9, r3
 80101c2:	637b      	str	r3, [r7, #52]	; 0x34
 80101c4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80101c8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 80101cc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80101d0:	f112 0a01 	adds.w	sl, r2, #1
 80101d4:	f143 0b00 	adc.w	fp, r3, #0
 80101d8:	ea4f 73db 	mov.w	r3, fp, lsr #31
 80101dc:	461a      	mov	r2, r3
 80101de:	f04f 0300 	mov.w	r3, #0
 80101e2:	eb12 010a 	adds.w	r1, r2, sl
 80101e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80101e8:	eb43 030b 	adc.w	r3, r3, fp
 80101ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80101ee:	f04f 0200 	mov.w	r2, #0
 80101f2:	f04f 0300 	mov.w	r3, #0
 80101f6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80101fa:	4621      	mov	r1, r4
 80101fc:	084a      	lsrs	r2, r1, #1
 80101fe:	4629      	mov	r1, r5
 8010200:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010204:	4629      	mov	r1, r5
 8010206:	104b      	asrs	r3, r1, #1
 8010208:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 801020c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801020e:	461a      	mov	r2, r3
 8010210:	f04f 0300 	mov.w	r3, #0
 8010214:	f04f 0000 	mov.w	r0, #0
 8010218:	f04f 0100 	mov.w	r1, #0
 801021c:	0099      	lsls	r1, r3, #2
 801021e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8010222:	0090      	lsls	r0, r2, #2
 8010224:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010228:	1814      	adds	r4, r2, r0
 801022a:	623c      	str	r4, [r7, #32]
 801022c:	414b      	adcs	r3, r1
 801022e:	627b      	str	r3, [r7, #36]	; 0x24
 8010230:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010234:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8010238:	f9b7 0084 	ldrsh.w	r0, [r7, #132]	; 0x84
 801023c:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8010240:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8010244:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8010248:	fb02 f501 	mul.w	r5, r2, r1
 801024c:	fb00 f403 	mul.w	r4, r0, r3
 8010250:	442c      	add	r4, r5
 8010252:	fba0 8902 	umull	r8, r9, r0, r2
 8010256:	eb04 0309 	add.w	r3, r4, r9
 801025a:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801025c:	f9b7 0082 	ldrsh.w	r0, [r7, #130]	; 0x82
 8010260:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)ygradient));
 8010264:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8010268:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801026c:	fb02 f501 	mul.w	r5, r2, r1
 8010270:	fb00 f403 	mul.w	r4, r0, r3
 8010274:	442c      	add	r4, r5
 8010276:	fba0 2302 	umull	r2, r3, r0, r2
 801027a:	18e1      	adds	r1, r4, r3
 801027c:	460b      	mov	r3, r1
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 801027e:	eb18 0102 	adds.w	r1, r8, r2
 8010282:	61b9      	str	r1, [r7, #24]
 8010284:	eb49 0303 	adc.w	r3, r9, r3
 8010288:	61fb      	str	r3, [r7, #28]
 801028a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801028e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8010292:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010296:	1c51      	adds	r1, r2, #1
 8010298:	64b9      	str	r1, [r7, #72]	; 0x48
 801029a:	f143 0300 	adc.w	r3, r3, #0
 801029e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80102a0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80102a4:	462b      	mov	r3, r5
 80102a6:	0fdb      	lsrs	r3, r3, #31
 80102a8:	461a      	mov	r2, r3
 80102aa:	f04f 0300 	mov.w	r3, #0
 80102ae:	4621      	mov	r1, r4
 80102b0:	1851      	adds	r1, r2, r1
 80102b2:	6139      	str	r1, [r7, #16]
 80102b4:	4629      	mov	r1, r5
 80102b6:	eb43 0101 	adc.w	r1, r3, r1
 80102ba:	6179      	str	r1, [r7, #20]
 80102bc:	f04f 0200 	mov.w	r2, #0
 80102c0:	f04f 0300 	mov.w	r3, #0
 80102c4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80102c8:	4621      	mov	r1, r4
 80102ca:	084a      	lsrs	r2, r1, #1
 80102cc:	4629      	mov	r1, r5
 80102ce:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80102d2:	4629      	mov	r1, r5
 80102d4:	104b      	asrs	r3, r1, #1
 80102d6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 80102da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102dc:	4618      	mov	r0, r3
 80102de:	f04f 0100 	mov.w	r1, #0
 80102e2:	f04f 0200 	mov.w	r2, #0
 80102e6:	f04f 0300 	mov.w	r3, #0
 80102ea:	008b      	lsls	r3, r1, #2
 80102ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80102f0:	0082      	lsls	r2, r0, #2
 80102f2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80102f6:	1884      	adds	r4, r0, r2
 80102f8:	60bc      	str	r4, [r7, #8]
 80102fa:	eb41 0303 	adc.w	r3, r1, r3
 80102fe:	60fb      	str	r3, [r7, #12]
 8010300:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010304:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 8010308:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 801030c:	2b00      	cmp	r3, #0
 801030e:	d12e      	bne.n	801036e <VL53LX_f_032+0x3d0>
		xtalk_avg = do_division_s(
 8010310:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8010314:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010318:	1884      	adds	r4, r0, r2
 801031a:	643c      	str	r4, [r7, #64]	; 0x40
 801031c:	eb41 0303 	adc.w	r3, r1, r3
 8010320:	647b      	str	r3, [r7, #68]	; 0x44
 8010322:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8010326:	460b      	mov	r3, r1
 8010328:	3301      	adds	r3, #1
 801032a:	63bb      	str	r3, [r7, #56]	; 0x38
 801032c:	4613      	mov	r3, r2
 801032e:	f143 0300 	adc.w	r3, r3, #0
 8010332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010334:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8010338:	462b      	mov	r3, r5
 801033a:	0fdb      	lsrs	r3, r3, #31
 801033c:	461a      	mov	r2, r3
 801033e:	f04f 0300 	mov.w	r3, #0
 8010342:	4621      	mov	r1, r4
 8010344:	1851      	adds	r1, r2, r1
 8010346:	6039      	str	r1, [r7, #0]
 8010348:	4629      	mov	r1, r5
 801034a:	eb43 0101 	adc.w	r1, r3, r1
 801034e:	6079      	str	r1, [r7, #4]
 8010350:	f04f 0200 	mov.w	r2, #0
 8010354:	f04f 0300 	mov.w	r3, #0
 8010358:	e9d7 4500 	ldrd	r4, r5, [r7]
 801035c:	4621      	mov	r1, r4
 801035e:	084a      	lsrs	r2, r1, #1
 8010360:	4629      	mov	r1, r5
 8010362:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010366:	4629      	mov	r1, r5
 8010368:	104b      	asrs	r3, r1, #1
 801036a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 801036e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010372:	2b00      	cmp	r3, #0
 8010374:	d10b      	bne.n	801038e <VL53LX_f_032+0x3f0>
		if (xtalk_avg < 0)
 8010376:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801037a:	2a00      	cmp	r2, #0
 801037c:	f173 0300 	sbcs.w	r3, r3, #0
 8010380:	da05      	bge.n	801038e <VL53LX_f_032+0x3f0>
			xtalk_avg = 0;
 8010382:	f04f 0200 	mov.w	r2, #0
 8010386:	f04f 0300 	mov.w	r3, #0
 801038a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 801038e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010390:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010394:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8010396:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 801039a:	4618      	mov	r0, r3
 801039c:	3788      	adds	r7, #136	; 0x88
 801039e:	46bd      	mov	sp, r7
 80103a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080103a4 <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 80103a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a8:	b08d      	sub	sp, #52	; 0x34
 80103aa:	af00      	add	r7, sp, #0
 80103ac:	60f8      	str	r0, [r7, #12]
 80103ae:	60b9      	str	r1, [r7, #8]
 80103b0:	607a      	str	r2, [r7, #4]
 80103b2:	603b      	str	r3, [r7, #0]


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 80103b4:	2300      	movs	r3, #0
 80103b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	uint64_t xtalk_events_per_spad = 0;
 80103ba:	f04f 0200 	mov.w	r2, #0
 80103be:	f04f 0300 	mov.w	r3, #0
 80103c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint64_t xtalk_total_events = 0;
 80103c6:	f04f 0200 	mov.w	r2, #0
 80103ca:	f04f 0300 	mov.w	r3, #0
 80103ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t xtalk_temp_bin = 0;
 80103d2:	f04f 0200 	mov.w	r2, #0
 80103d6:	f04f 0300 	mov.w	r3, #0
 80103da:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t  i = 0;
 80103de:	2300      	movs	r3, #0
 80103e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	4618      	mov	r0, r3
 80103e8:	f04f 0100 	mov.w	r1, #0
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103f2:	461a      	mov	r2, r3
 80103f4:	f04f 0300 	mov.w	r3, #0
 80103f8:	fb02 fc01 	mul.w	ip, r2, r1
 80103fc:	fb00 f603 	mul.w	r6, r0, r3
 8010400:	4466      	add	r6, ip
 8010402:	fba0 2302 	umull	r2, r3, r0, r2
 8010406:	18f1      	adds	r1, r6, r3
 8010408:	460b      	mov	r3, r1
 801040a:	f512 7afa 	adds.w	sl, r2, #500	; 0x1f4
 801040e:	f143 0b00 	adc.w	fp, r3, #0
 8010412:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010416:	f04f 0300 	mov.w	r3, #0
 801041a:	4650      	mov	r0, sl
 801041c:	4659      	mov	r1, fp
 801041e:	f7ef ff77 	bl	8000310 <__aeabi_uldivmod>
 8010422:	4602      	mov	r2, r0
 8010424:	460b      	mov	r3, r1
 8010426:	e9c7 2306 	strd	r2, r3, [r7, #24]




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8010430:	b29a      	uxth	r2, r3
 8010432:	f04f 0300 	mov.w	r3, #0
	xtalk_total_events = xtalk_events_per_spad *
 8010436:	69f9      	ldr	r1, [r7, #28]
 8010438:	fb02 f001 	mul.w	r0, r2, r1
 801043c:	69b9      	ldr	r1, [r7, #24]
 801043e:	fb03 f101 	mul.w	r1, r3, r1
 8010442:	4401      	add	r1, r0
 8010444:	69b8      	ldr	r0, [r7, #24]
 8010446:	fba0 2302 	umull	r2, r3, r0, r2
 801044a:	4419      	add	r1, r3
 801044c:	460b      	mov	r3, r1
 801044e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8010452:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8010456:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801045a:	f04f 0200 	mov.w	r2, #0
 801045e:	f04f 0300 	mov.w	r3, #0
 8010462:	0a02      	lsrs	r2, r0, #8
 8010464:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010468:	0a0b      	lsrs	r3, r1, #8
 801046a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 801046e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010472:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 8010476:	f143 0900 	adc.w	r9, r3, #0
 801047a:	f04f 0200 	mov.w	r2, #0
 801047e:	f04f 0300 	mov.w	r3, #0
 8010482:	ea4f 22d8 	mov.w	r2, r8, lsr #11
 8010486:	ea42 5249 	orr.w	r2, r2, r9, lsl #21
 801048a:	ea4f 23d9 	mov.w	r3, r9, lsr #11
 801048e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (xtalk_total_events > 0xFFFFFFFF)
 8010492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010496:	2b01      	cmp	r3, #1
 8010498:	bf08      	it	eq
 801049a:	2a00      	cmpeq	r2, #0
 801049c:	d305      	bcc.n	80104aa <VL53LX_f_033+0x106>
		xtalk_total_events = 0xFFFFFFFF;
 801049e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104a2:	f04f 0300 	mov.w	r3, #0
 80104a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 80104aa:	2300      	movs	r3, #0
 80104ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80104b0:	e035      	b.n	801051e <VL53LX_f_033+0x17a>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 80104b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104b6:	68ba      	ldr	r2, [r7, #8]
 80104b8:	3302      	adds	r3, #2
 80104ba:	009b      	lsls	r3, r3, #2
 80104bc:	4413      	add	r3, r2
 80104be:	685b      	ldr	r3, [r3, #4]
 80104c0:	461a      	mov	r2, r3
 80104c2:	f04f 0300 	mov.w	r3, #0
 80104c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80104c8:	fb02 f001 	mul.w	r0, r2, r1
 80104cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104ce:	fb03 f101 	mul.w	r1, r3, r1
 80104d2:	4401      	add	r1, r0
 80104d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104d6:	fba0 2302 	umull	r2, r3, r0, r2
 80104da:	4419      	add	r1, r3
 80104dc:	460b      	mov	r3, r1
 80104de:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80104e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 80104e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80104ea:	f512 7400 	adds.w	r4, r2, #512	; 0x200
 80104ee:	f143 0500 	adc.w	r5, r3, #0
 80104f2:	f04f 0200 	mov.w	r2, #0
 80104f6:	f04f 0300 	mov.w	r3, #0
 80104fa:	0aa2      	lsrs	r2, r4, #10
 80104fc:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
 8010500:	0aab      	lsrs	r3, r5, #10
 8010502:	e9c7 2304 	strd	r2, r3, [r7, #16]

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8010506:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801050a:	6939      	ldr	r1, [r7, #16]
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	3206      	adds	r2, #6
 8010510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8010514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010518:	3301      	adds	r3, #1
 801051a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	7a9b      	ldrb	r3, [r3, #10]
 8010522:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010526:	429a      	cmp	r2, r3
 8010528:	d3c3      	bcc.n	80104b2 <VL53LX_f_033+0x10e>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 801052a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 801052e:	4618      	mov	r0, r3
 8010530:	3734      	adds	r7, #52	; 0x34
 8010532:	46bd      	mov	sp, r7
 8010534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010538 <VL53L3CX_Init>:
  * @brief Initializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Init(VL53L3CX_Object_t *pObj)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b084      	sub	sp, #16
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8010546:	3328      	adds	r3, #40	; 0x28
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d003      	beq.n	8010556 <VL53L3CX_Init+0x1e>
  {
    ret =  VL53L3CX_ERROR;
 801054e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010552:	60fb      	str	r3, [r7, #12]
 8010554:	e043      	b.n	80105de <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_WaitDeviceBooted(pObj) != VL53LX_ERROR_NONE)
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f7f0 ff23 	bl	80013a2 <VL53LX_WaitDeviceBooted>
 801055c:	4603      	mov	r3, r0
 801055e:	2b00      	cmp	r3, #0
 8010560:	d003      	beq.n	801056a <VL53L3CX_Init+0x32>
  {
    ret =  VL53L3CX_ERROR;
 8010562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010566:	60fb      	str	r3, [r7, #12]
 8010568:	e039      	b.n	80105de <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_DataInit(pObj) != VL53LX_ERROR_NONE)
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f7f0 febe 	bl	80012ec <VL53LX_DataInit>
 8010570:	4603      	mov	r3, r0
 8010572:	2b00      	cmp	r3, #0
 8010574:	d003      	beq.n	801057e <VL53L3CX_Init+0x46>
  {
    ret = VL53L3CX_ERROR;
 8010576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801057a:	60fb      	str	r3, [r7, #12]
 801057c:	e02f      	b.n	80105de <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_PerformRefSpadManagement(pObj) != VL53LX_ERROR_NONE)
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f7f1 fd08 	bl	8001f94 <VL53LX_PerformRefSpadManagement>
 8010584:	4603      	mov	r3, r0
 8010586:	2b00      	cmp	r3, #0
 8010588:	d003      	beq.n	8010592 <VL53L3CX_Init+0x5a>
  {
    ret = VL53L3CX_ERROR;
 801058a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801058e:	60fb      	str	r3, [r7, #12]
 8010590:	e025      	b.n	80105de <VL53L3CX_Init+0xa6>
  }
  else
  {
    pObj->IsRanging = 0;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8010598:	3329      	adds	r3, #41	; 0x29
 801059a:	2200      	movs	r2, #0
 801059c:	701a      	strb	r2, [r3, #0]
    pObj->IsBlocking = 0;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80105a4:	332a      	adds	r3, #42	; 0x2a
 80105a6:	2200      	movs	r2, #0
 80105a8:	701a      	strb	r2, [r3, #0]
    pObj->IsContinuous = 0;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80105b0:	332b      	adds	r3, #43	; 0x2b
 80105b2:	2200      	movs	r2, #0
 80105b4:	701a      	strb	r2, [r3, #0]
    pObj->IsAmbientEnabled = 0;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80105bc:	332c      	adds	r3, #44	; 0x2c
 80105be:	2200      	movs	r2, #0
 80105c0:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = 0;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80105c8:	332d      	adds	r3, #45	; 0x2d
 80105ca:	2200      	movs	r2, #0
 80105cc:	701a      	strb	r2, [r3, #0]
    pObj->IsInitialized = 1;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80105d4:	3328      	adds	r3, #40	; 0x28
 80105d6:	2201      	movs	r2, #1
 80105d8:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 80105da:	2300      	movs	r3, #0
 80105dc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80105de:	68fb      	ldr	r3, [r7, #12]
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3710      	adds	r7, #16
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}

080105e8 <VL53L3CX_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L3CX the profile corresponds to the distance modes.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigProfile(VL53L3CX_Object_t *pObj, VL53L3CX_ProfileConfig_t *pConfig)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b084      	sub	sp, #16
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d009      	beq.n	801060c <VL53L3CX_ConfigProfile+0x24>
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d006      	beq.n	801060c <VL53L3CX_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L3CX_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 8010604:	7afb      	ldrb	r3, [r7, #11]
 8010606:	2b01      	cmp	r3, #1
 8010608:	d103      	bne.n	8010612 <VL53L3CX_ConfigProfile+0x2a>
 801060a:	e00c      	b.n	8010626 <VL53L3CX_ConfigProfile+0x3e>
    return VL53L3CX_INVALID_PARAM;
 801060c:	f06f 0301 	mvn.w	r3, #1
 8010610:	e043      	b.n	801069a <VL53L3CX_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 8010612:	7afb      	ldrb	r3, [r7, #11]
 8010614:	2b02      	cmp	r3, #2
 8010616:	d006      	beq.n	8010626 <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_MEDIUM) &&
 8010618:	7afb      	ldrb	r3, [r7, #11]
 801061a:	2b03      	cmp	r3, #3
 801061c:	d003      	beq.n	8010626 <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_LONG))
  {
    ret = VL53L3CX_INVALID_PARAM;
 801061e:	f06f 0301 	mvn.w	r3, #1
 8010622:	60fb      	str	r3, [r7, #12]
 8010624:	e038      	b.n	8010698 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetDistanceMode(pObj, ranging_profile) != VL53LX_ERROR_NONE)
 8010626:	7afb      	ldrb	r3, [r7, #11]
 8010628:	4619      	mov	r1, r3
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f7f0 ff75 	bl	800151a <VL53LX_SetDistanceMode>
 8010630:	4603      	mov	r3, r0
 8010632:	2b00      	cmp	r3, #0
 8010634:	d003      	beq.n	801063e <VL53L3CX_ConfigProfile+0x56>
  {
    ret = VL53L3CX_ERROR;
 8010636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801063a:	60fb      	str	r3, [r7, #12]
 801063c:	e02c      	b.n	8010698 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53LX_ERROR_NONE)
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	685b      	ldr	r3, [r3, #4]
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
 8010642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010646:	fb02 f303 	mul.w	r3, r2, r3
 801064a:	4619      	mov	r1, r3
 801064c:	6878      	ldr	r0, [r7, #4]
 801064e:	f7f0 ffcb 	bl	80015e8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8010652:	4603      	mov	r3, r0
 8010654:	2b00      	cmp	r3, #0
 8010656:	d003      	beq.n	8010660 <VL53L3CX_ConfigProfile+0x78>
  {
    ret = VL53L3CX_ERROR;
 8010658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801065c:	60fb      	str	r3, [r7, #12]
 801065e:	e01b      	b.n	8010698 <VL53L3CX_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	68db      	ldr	r3, [r3, #12]
 8010664:	2b00      	cmp	r3, #0
 8010666:	bf14      	ite	ne
 8010668:	2301      	movne	r3, #1
 801066a:	2300      	moveq	r3, #0
 801066c:	b2db      	uxtb	r3, r3
 801066e:	461a      	mov	r2, r3
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8010676:	332c      	adds	r3, #44	; 0x2c
 8010678:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	691b      	ldr	r3, [r3, #16]
 801067e:	2b00      	cmp	r3, #0
 8010680:	bf14      	ite	ne
 8010682:	2301      	movne	r3, #1
 8010684:	2300      	moveq	r3, #0
 8010686:	b2db      	uxtb	r3, r3
 8010688:	461a      	mov	r2, r3
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8010690:	332d      	adds	r3, #45	; 0x2d
 8010692:	701a      	strb	r2, [r3, #0]

    ret = VL53L3CX_OK;
 8010694:	2300      	movs	r3, #0
 8010696:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010698:	68fb      	ldr	r3, [r7, #12]
}
 801069a:	4618      	mov	r0, r3
 801069c:	3710      	adds	r7, #16
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}

080106a2 <VL53L3CX_GetDistance>:
  * @param pObj    vl53l3cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetDistance(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 80106a2:	b580      	push	{r7, lr}
 80106a4:	b084      	sub	sp, #16
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
 80106aa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d002      	beq.n	80106b8 <VL53L3CX_GetDistance+0x16>
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d103      	bne.n	80106c0 <VL53L3CX_GetDistance+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80106b8:	f06f 0301 	mvn.w	r3, #1
 80106bc:	60fb      	str	r3, [r7, #12]
 80106be:	e01d      	b.n	80106fc <VL53L3CX_GetDistance+0x5a>
  }
  else if (pObj->IsRanging == 0U)
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80106c6:	3329      	adds	r3, #41	; 0x29
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d103      	bne.n	80106d6 <VL53L3CX_GetDistance+0x34>
  {
    ret = VL53L3CX_ERROR;
 80106ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80106d2:	60fb      	str	r3, [r7, #12]
 80106d4:	e012      	b.n	80106fc <VL53L3CX_GetDistance+0x5a>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80106dc:	332a      	adds	r3, #42	; 0x2a
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	2b01      	cmp	r3, #1
 80106e2:	d106      	bne.n	80106f2 <VL53L3CX_GetDistance+0x50>
    {
      ret = vl53l3cx_poll_for_measurement(pObj, V53L3CX_POLL_TIMEOUT);
 80106e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f000 f8c7 	bl	801087c <vl53l3cx_poll_for_measurement>
 80106ee:	60f8      	str	r0, [r7, #12]
 80106f0:	e004      	b.n	80106fc <VL53L3CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l3cx_poll_for_measurement(pObj, 0U);
 80106f2:	2100      	movs	r1, #0
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f000 f8c1 	bl	801087c <vl53l3cx_poll_for_measurement>
 80106fa:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L3CX_OK)
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d119      	bne.n	8010736 <VL53L3CX_GetDistance+0x94>
  {
    /* retrieve measurements and fill result structure */
    if (vl53l3cx_get_result(pObj, pResult) != VL53L3CX_OK)
 8010702:	6839      	ldr	r1, [r7, #0]
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f000 f8e7 	bl	80108d8 <vl53l3cx_get_result>
 801070a:	4603      	mov	r3, r0
 801070c:	2b00      	cmp	r3, #0
 801070e:	d003      	beq.n	8010718 <VL53L3CX_GetDistance+0x76>
    {
      ret = VL53L3CX_ERROR;
 8010710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010714:	60fb      	str	r3, [r7, #12]
 8010716:	e00e      	b.n	8010736 <VL53L3CX_GetDistance+0x94>
    }
    else if (pObj->IsContinuous == 1U)
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801071e:	332b      	adds	r3, #43	; 0x2b
 8010720:	781b      	ldrb	r3, [r3, #0]
 8010722:	2b01      	cmp	r3, #1
 8010724:	d105      	bne.n	8010732 <VL53L3CX_GetDistance+0x90>
    {
      /* trigger new measurement if device configured in continuous mode */
      ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 8010726:	6878      	ldr	r0, [r7, #4]
 8010728:	f7f1 f824 	bl	8001774 <VL53LX_ClearInterruptAndStartMeasurement>
 801072c:	4603      	mov	r3, r0
 801072e:	60fb      	str	r3, [r7, #12]
 8010730:	e001      	b.n	8010736 <VL53L3CX_GetDistance+0x94>
    }
    else
    {
      ret = VL53L3CX_OK;
 8010732:	2300      	movs	r3, #0
 8010734:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8010736:	68fb      	ldr	r3, [r7, #12]
}
 8010738:	4618      	mov	r0, r3
 801073a:	3710      	adds	r7, #16
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}

08010740 <VL53L3CX_Start>:
  * @param pObj    vl53l3cx context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Start(VL53L3CX_Object_t *pObj, uint32_t Mode)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b084      	sub	sp, #16
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
 8010748:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d103      	bne.n	8010758 <VL53L3CX_Start+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8010750:	f06f 0301 	mvn.w	r3, #1
 8010754:	60fb      	str	r3, [r7, #12]
 8010756:	e068      	b.n	801082a <VL53L3CX_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801075e:	3329      	adds	r3, #41	; 0x29
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	2b01      	cmp	r3, #1
 8010764:	d103      	bne.n	801076e <VL53L3CX_Start+0x2e>
  {
    ret = VL53L3CX_ERROR;
 8010766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801076a:	60fb      	str	r3, [r7, #12]
 801076c:	e05d      	b.n	801082a <VL53L3CX_Start+0xea>
  }
  else if (VL53LX_StartMeasurement(pObj) == VL53LX_ERROR_NONE)
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f7f0 ffb2 	bl	80016d8 <VL53LX_StartMeasurement>
 8010774:	4603      	mov	r3, r0
 8010776:	2b00      	cmp	r3, #0
 8010778:	d154      	bne.n	8010824 <VL53L3CX_Start+0xe4>
  {
    pObj->IsRanging = 1;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8010780:	3329      	adds	r3, #41	; 0x29
 8010782:	2201      	movs	r2, #1
 8010784:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8010786:	2300      	movs	r3, #0
 8010788:	60fb      	str	r3, [r7, #12]
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	3b01      	subs	r3, #1
 801078e:	2b03      	cmp	r3, #3
 8010790:	d83e      	bhi.n	8010810 <VL53L3CX_Start+0xd0>
 8010792:	a201      	add	r2, pc, #4	; (adr r2, 8010798 <VL53L3CX_Start+0x58>)
 8010794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010798:	080107a9 	.word	0x080107a9
 801079c:	080107c3 	.word	0x080107c3
 80107a0:	080107dd 	.word	0x080107dd
 80107a4:	080107f7 	.word	0x080107f7

    switch (Mode)
    {
    case VL53L3CX_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80107ae:	332b      	adds	r3, #43	; 0x2b
 80107b0:	2201      	movs	r2, #1
 80107b2:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80107ba:	332a      	adds	r3, #42	; 0x2a
 80107bc:	2201      	movs	r2, #1
 80107be:	701a      	strb	r2, [r3, #0]
      break;
 80107c0:	e033      	b.n	801082a <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80107c8:	332b      	adds	r3, #43	; 0x2b
 80107ca:	2200      	movs	r2, #0
 80107cc:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80107d4:	332a      	adds	r3, #42	; 0x2a
 80107d6:	2201      	movs	r2, #1
 80107d8:	701a      	strb	r2, [r3, #0]
      break;
 80107da:	e026      	b.n	801082a <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80107e2:	332b      	adds	r3, #43	; 0x2b
 80107e4:	2201      	movs	r2, #1
 80107e6:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80107ee:	332a      	adds	r3, #42	; 0x2a
 80107f0:	2200      	movs	r2, #0
 80107f2:	701a      	strb	r2, [r3, #0]
      break;
 80107f4:	e019      	b.n	801082a <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80107fc:	332b      	adds	r3, #43	; 0x2b
 80107fe:	2200      	movs	r2, #0
 8010800:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8010808:	332a      	adds	r3, #42	; 0x2a
 801080a:	2200      	movs	r2, #0
 801080c:	701a      	strb	r2, [r3, #0]
      break;
 801080e:	e00c      	b.n	801082a <VL53L3CX_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8010816:	3329      	adds	r3, #41	; 0x29
 8010818:	2200      	movs	r2, #0
 801081a:	701a      	strb	r2, [r3, #0]
      ret = VL53L3CX_INVALID_PARAM;
 801081c:	f06f 0301 	mvn.w	r3, #1
 8010820:	60fb      	str	r3, [r7, #12]
      break;
 8010822:	e002      	b.n	801082a <VL53L3CX_Start+0xea>
    }
  }
  else
  {
    ret = VL53L3CX_ERROR;
 8010824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010828:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801082a:	68fb      	ldr	r3, [r7, #12]
}
 801082c:	4618      	mov	r0, r3
 801082e:	3710      	adds	r7, #16
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <VL53L3CX_SetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param Address     New I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetAddress(VL53L3CX_Object_t *pObj, uint32_t Address)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b084      	sub	sp, #16
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d103      	bne.n	801084c <VL53L3CX_SetAddress+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8010844:	f06f 0301 	mvn.w	r3, #1
 8010848:	60fb      	str	r3, [r7, #12]
 801084a:	e012      	b.n	8010872 <VL53L3CX_SetAddress+0x3e>
  }
  else if (VL53LX_SetDeviceAddress(pObj, (uint8_t)Address) != VL53LX_ERROR_NONE)
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	b2db      	uxtb	r3, r3
 8010850:	4619      	mov	r1, r3
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f7f0 fd23 	bl	800129e <VL53LX_SetDeviceAddress>
 8010858:	4603      	mov	r3, r0
 801085a:	2b00      	cmp	r3, #0
 801085c:	d003      	beq.n	8010866 <VL53L3CX_SetAddress+0x32>
  {
    ret = VL53L3CX_ERROR;
 801085e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010862:	60fb      	str	r3, [r7, #12]
 8010864:	e005      	b.n	8010872 <VL53L3CX_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	b29a      	uxth	r2, r3
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	811a      	strh	r2, [r3, #8]
    ret = VL53L3CX_OK;
 801086e:	2300      	movs	r3, #0
 8010870:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010872:	68fb      	ldr	r3, [r7, #12]
}
 8010874:	4618      	mov	r0, r3
 8010876:	3710      	adds	r7, #16
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}

0801087c <vl53l3cx_poll_for_measurement>:
/** @defgroup VL53L3CX_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l3cx_poll_for_measurement(VL53L3CX_Object_t *pObj, uint32_t Timeout)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b084      	sub	sp, #16
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8010886:	2300      	movs	r3, #0
 8010888:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d102      	bne.n	8010896 <vl53l3cx_poll_for_measurement+0x1a>
  {
    return VL53L3CX_INVALID_PARAM;
 8010890:	f06f 0301 	mvn.w	r3, #1
 8010894:	e01b      	b.n	80108ce <vl53l3cx_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	695b      	ldr	r3, [r3, #20]
 801089a:	4798      	blx	r3
 801089c:	4603      	mov	r3, r0
 801089e:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53LX_GetMeasurementDataReady(pObj, &NewDataReady);
 80108a0:	f107 030b 	add.w	r3, r7, #11
 80108a4:	4619      	mov	r1, r3
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f7f0 ff7a 	bl	80017a0 <VL53LX_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 80108ac:	7afb      	ldrb	r3, [r7, #11]
 80108ae:	2b01      	cmp	r3, #1
 80108b0:	d101      	bne.n	80108b6 <vl53l3cx_poll_for_measurement+0x3a>
    {
      return VL53L3CX_OK;
 80108b2:	2300      	movs	r3, #0
 80108b4:	e00b      	b.n	80108ce <vl53l3cx_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	695b      	ldr	r3, [r3, #20]
 80108ba:	4798      	blx	r3
 80108bc:	4603      	mov	r3, r0
 80108be:	461a      	mov	r2, r3
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	1ad3      	subs	r3, r2, r3
 80108c4:	683a      	ldr	r2, [r7, #0]
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d8ea      	bhi.n	80108a0 <vl53l3cx_poll_for_measurement+0x24>

  return VL53L3CX_TIMEOUT;
 80108ca:	f06f 0302 	mvn.w	r3, #2
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3710      	adds	r7, #16
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}
	...

080108d8 <vl53l3cx_get_result>:

static int32_t vl53l3cx_get_result(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 80108d8:	b590      	push	{r4, r7, lr}
 80108da:	b09f      	sub	sp, #124	; 0x7c
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
 80108e0:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53LX_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d002      	beq.n	80108ee <vl53l3cx_get_result+0x16>
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d103      	bne.n	80108f6 <vl53l3cx_get_result+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80108ee:	f06f 0301 	mvn.w	r3, #1
 80108f2:	677b      	str	r3, [r7, #116]	; 0x74
 80108f4:	e126      	b.n	8010b44 <vl53l3cx_get_result+0x26c>
  }
  else if (VL53LX_GetMultiRangingData(pObj, &data) != VL53LX_ERROR_NONE)
 80108f6:	f107 0308 	add.w	r3, r7, #8
 80108fa:	4619      	mov	r1, r3
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f7f1 fb22 	bl	8001f46 <VL53LX_GetMultiRangingData>
 8010902:	4603      	mov	r3, r0
 8010904:	2b00      	cmp	r3, #0
 8010906:	d003      	beq.n	8010910 <vl53l3cx_get_result+0x38>
  {
    ret = VL53L3CX_ERROR;
 8010908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801090c:	677b      	str	r3, [r7, #116]	; 0x74
 801090e:	e119      	b.n	8010b44 <vl53l3cx_get_result+0x26c>
  }
  else
  {
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 8010910:	2300      	movs	r3, #0
 8010912:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8010916:	e10b      	b.n	8010b30 <vl53l3cx_get_result+0x258>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8010918:	7b7b      	ldrb	r3, [r7, #13]
 801091a:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 801091e:	4618      	mov	r0, r3
 8010920:	6839      	ldr	r1, [r7, #0]
 8010922:	4613      	mov	r3, r2
 8010924:	011b      	lsls	r3, r3, #4
 8010926:	4413      	add	r3, r2
 8010928:	009b      	lsls	r3, r3, #2
 801092a:	440b      	add	r3, r1
 801092c:	3304      	adds	r3, #4
 801092e:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8010930:	2300      	movs	r3, #0
 8010932:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8010936:	e0f0      	b.n	8010b1a <vl53l3cx_get_result+0x242>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8010938:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 801093c:	4613      	mov	r3, r2
 801093e:	009b      	lsls	r3, r3, #2
 8010940:	4413      	add	r3, r2
 8010942:	009b      	lsls	r3, r3, #2
 8010944:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8010948:	4413      	add	r3, r2
 801094a:	3b58      	subs	r3, #88	; 0x58
 801094c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010950:	2b00      	cmp	r3, #0
 8010952:	da0d      	bge.n	8010970 <vl53l3cx_get_result+0x98>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8010954:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8010958:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 801095c:	6839      	ldr	r1, [r7, #0]
 801095e:	4613      	mov	r3, r2
 8010960:	011b      	lsls	r3, r3, #4
 8010962:	4413      	add	r3, r2
 8010964:	4403      	add	r3, r0
 8010966:	009b      	lsls	r3, r3, #2
 8010968:	440b      	add	r3, r1
 801096a:	2200      	movs	r2, #0
 801096c:	609a      	str	r2, [r3, #8]
 801096e:	e018      	b.n	80109a2 <vl53l3cx_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8010970:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8010974:	4613      	mov	r3, r2
 8010976:	009b      	lsls	r3, r3, #2
 8010978:	4413      	add	r3, r2
 801097a:	009b      	lsls	r3, r3, #2
 801097c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8010980:	4413      	add	r3, r2
 8010982:	3b58      	subs	r3, #88	; 0x58
 8010984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010988:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 801098c:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8010990:	461c      	mov	r4, r3
 8010992:	6839      	ldr	r1, [r7, #0]
 8010994:	4613      	mov	r3, r2
 8010996:	011b      	lsls	r3, r3, #4
 8010998:	4413      	add	r3, r2
 801099a:	4403      	add	r3, r0
 801099c:	009b      	lsls	r3, r3, #2
 801099e:	440b      	add	r3, r1
 80109a0:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80109a8:	332c      	adds	r3, #44	; 0x2c
 80109aa:	781b      	ldrb	r3, [r3, #0]
 80109ac:	2b01      	cmp	r3, #1
 80109ae:	d137      	bne.n	8010a20 <vl53l3cx_get_result+0x148>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 80109b0:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80109b4:	4613      	mov	r3, r2
 80109b6:	009b      	lsls	r3, r3, #2
 80109b8:	4413      	add	r3, r2
 80109ba:	009b      	lsls	r3, r3, #2
 80109bc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80109c0:	4413      	add	r3, r2
 80109c2:	3b60      	subs	r3, #96	; 0x60
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	ee07 3a90 	vmov	s15, r3
 80109ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80109ce:	eddf 6a60 	vldr	s13, [pc, #384]	; 8010b50 <vl53l3cx_get_result+0x278>
 80109d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80109d6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8010b54 <vl53l3cx_get_result+0x27c>
 80109da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80109de:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80109e2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80109e6:	0a1b      	lsrs	r3, r3, #8
 80109e8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 80109ec:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80109f0:	ee07 3a90 	vmov	s15, r3
 80109f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80109f8:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80109fc:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8010a00:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8010a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a08:	6839      	ldr	r1, [r7, #0]
 8010a0a:	4613      	mov	r3, r2
 8010a0c:	011b      	lsls	r3, r3, #4
 8010a0e:	4413      	add	r3, r2
 8010a10:	4403      	add	r3, r0
 8010a12:	3308      	adds	r3, #8
 8010a14:	009b      	lsls	r3, r3, #2
 8010a16:	440b      	add	r3, r1
 8010a18:	3308      	adds	r3, #8
 8010a1a:	edc3 7a00 	vstr	s15, [r3]
 8010a1e:	e00f      	b.n	8010a40 <vl53l3cx_get_result+0x168>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8010a20:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8010a24:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8010a28:	6839      	ldr	r1, [r7, #0]
 8010a2a:	4613      	mov	r3, r2
 8010a2c:	011b      	lsls	r3, r3, #4
 8010a2e:	4413      	add	r3, r2
 8010a30:	4403      	add	r3, r0
 8010a32:	3308      	adds	r3, #8
 8010a34:	009b      	lsls	r3, r3, #2
 8010a36:	440b      	add	r3, r1
 8010a38:	3308      	adds	r3, #8
 8010a3a:	f04f 0200 	mov.w	r2, #0
 8010a3e:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8010a46:	332d      	adds	r3, #45	; 0x2d
 8010a48:	781b      	ldrb	r3, [r3, #0]
 8010a4a:	2b01      	cmp	r3, #1
 8010a4c:	d137      	bne.n	8010abe <vl53l3cx_get_result+0x1e6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8010a4e:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8010a52:	4613      	mov	r3, r2
 8010a54:	009b      	lsls	r3, r3, #2
 8010a56:	4413      	add	r3, r2
 8010a58:	009b      	lsls	r3, r3, #2
 8010a5a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8010a5e:	4413      	add	r3, r2
 8010a60:	3b64      	subs	r3, #100	; 0x64
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	ee07 3a90 	vmov	s15, r3
 8010a68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010a6c:	eddf 6a38 	vldr	s13, [pc, #224]	; 8010b50 <vl53l3cx_get_result+0x278>
 8010a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010a74:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8010b54 <vl53l3cx_get_result+0x27c>
 8010a78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010a7c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8010a80:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010a84:	0a1b      	lsrs	r3, r3, #8
 8010a86:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 8010a8a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8010a8e:	ee07 3a90 	vmov	s15, r3
 8010a92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010a96:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8010a9a:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8010a9e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8010aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010aa6:	6839      	ldr	r1, [r7, #0]
 8010aa8:	4613      	mov	r3, r2
 8010aaa:	011b      	lsls	r3, r3, #4
 8010aac:	4413      	add	r3, r2
 8010aae:	4403      	add	r3, r0
 8010ab0:	330c      	adds	r3, #12
 8010ab2:	009b      	lsls	r3, r3, #2
 8010ab4:	440b      	add	r3, r1
 8010ab6:	3308      	adds	r3, #8
 8010ab8:	edc3 7a00 	vstr	s15, [r3]
 8010abc:	e00f      	b.n	8010ade <vl53l3cx_get_result+0x206>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8010abe:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8010ac2:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8010ac6:	6839      	ldr	r1, [r7, #0]
 8010ac8:	4613      	mov	r3, r2
 8010aca:	011b      	lsls	r3, r3, #4
 8010acc:	4413      	add	r3, r2
 8010ace:	4403      	add	r3, r0
 8010ad0:	330c      	adds	r3, #12
 8010ad2:	009b      	lsls	r3, r3, #2
 8010ad4:	440b      	add	r3, r1
 8010ad6:	3308      	adds	r3, #8
 8010ad8:	f04f 0200 	mov.w	r2, #0
 8010adc:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 8010ade:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8010ae2:	4613      	mov	r3, r2
 8010ae4:	009b      	lsls	r3, r3, #2
 8010ae6:	4413      	add	r3, r2
 8010ae8:	009b      	lsls	r3, r3, #2
 8010aea:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8010aee:	4413      	add	r3, r2
 8010af0:	3b56      	subs	r3, #86	; 0x56
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8010af8:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8010afc:	461c      	mov	r4, r3
 8010afe:	6839      	ldr	r1, [r7, #0]
 8010b00:	4613      	mov	r3, r2
 8010b02:	011b      	lsls	r3, r3, #4
 8010b04:	4413      	add	r3, r2
 8010b06:	4403      	add	r3, r0
 8010b08:	3304      	adds	r3, #4
 8010b0a:	009b      	lsls	r3, r3, #2
 8010b0c:	440b      	add	r3, r1
 8010b0e:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8010b10:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8010b14:	3301      	adds	r3, #1
 8010b16:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8010b1a:	7b7b      	ldrb	r3, [r7, #13]
 8010b1c:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8010b20:	429a      	cmp	r2, r3
 8010b22:	f4ff af09 	bcc.w	8010938 <vl53l3cx_get_result+0x60>
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 8010b26:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8010b30:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	f43f aeef 	beq.w	8010918 <vl53l3cx_get_result+0x40>
      }
    }

    pResult->NumberOfZones = VL53L3CX_MAX_NB_ZONES;
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	2201      	movs	r2, #1
 8010b3e:	601a      	str	r2, [r3, #0]

    ret = VL53L3CX_OK;
 8010b40:	2300      	movs	r3, #0
 8010b42:	677b      	str	r3, [r7, #116]	; 0x74
  }

  return ret;
 8010b44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	377c      	adds	r7, #124	; 0x7c
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd90      	pop	{r4, r7, pc}
 8010b4e:	bf00      	nop
 8010b50:	47800000 	.word	0x47800000
 8010b54:	447a0000 	.word	0x447a0000

08010b58 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010b5c:	4b08      	ldr	r3, [pc, #32]	; (8010b80 <HAL_Init+0x28>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	4a07      	ldr	r2, [pc, #28]	; (8010b80 <HAL_Init+0x28>)
 8010b62:	f043 0310 	orr.w	r3, r3, #16
 8010b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010b68:	2003      	movs	r0, #3
 8010b6a:	f000 f94f 	bl	8010e0c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010b6e:	200f      	movs	r0, #15
 8010b70:	f000 f808 	bl	8010b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010b74:	f7f0 f976 	bl	8000e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010b78:	2300      	movs	r3, #0
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	40022000 	.word	0x40022000

08010b84 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b082      	sub	sp, #8
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010b8c:	4b12      	ldr	r3, [pc, #72]	; (8010bd8 <HAL_InitTick+0x54>)
 8010b8e:	681a      	ldr	r2, [r3, #0]
 8010b90:	4b12      	ldr	r3, [pc, #72]	; (8010bdc <HAL_InitTick+0x58>)
 8010b92:	781b      	ldrb	r3, [r3, #0]
 8010b94:	4619      	mov	r1, r3
 8010b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f000 f967 	bl	8010e76 <HAL_SYSTICK_Config>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d001      	beq.n	8010bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	e00e      	b.n	8010bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2b0f      	cmp	r3, #15
 8010bb6:	d80a      	bhi.n	8010bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010bb8:	2200      	movs	r2, #0
 8010bba:	6879      	ldr	r1, [r7, #4]
 8010bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010bc0:	f000 f92f 	bl	8010e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010bc4:	4a06      	ldr	r2, [pc, #24]	; (8010be0 <HAL_InitTick+0x5c>)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	e000      	b.n	8010bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010bce:	2301      	movs	r3, #1
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3708      	adds	r7, #8
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}
 8010bd8:	20000000 	.word	0x20000000
 8010bdc:	20000034 	.word	0x20000034
 8010be0:	20000030 	.word	0x20000030

08010be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010be4:	b480      	push	{r7}
 8010be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010be8:	4b06      	ldr	r3, [pc, #24]	; (8010c04 <HAL_IncTick+0x20>)
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	461a      	mov	r2, r3
 8010bee:	4b06      	ldr	r3, [pc, #24]	; (8010c08 <HAL_IncTick+0x24>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	4413      	add	r3, r2
 8010bf4:	4a04      	ldr	r2, [pc, #16]	; (8010c08 <HAL_IncTick+0x24>)
 8010bf6:	6013      	str	r3, [r2, #0]
}
 8010bf8:	bf00      	nop
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr
 8010c02:	bf00      	nop
 8010c04:	20000034 	.word	0x20000034
 8010c08:	20000468 	.word	0x20000468

08010c0c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010c0c:	b480      	push	{r7}
 8010c0e:	af00      	add	r7, sp, #0
  return uwTick;  
 8010c10:	4b03      	ldr	r3, [pc, #12]	; (8010c20 <HAL_GetTick+0x14>)
 8010c12:	681b      	ldr	r3, [r3, #0]
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	46bd      	mov	sp, r7
 8010c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1c:	4770      	bx	lr
 8010c1e:	bf00      	nop
 8010c20:	20000468 	.word	0x20000468

08010c24 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b084      	sub	sp, #16
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010c2c:	f7ff ffee 	bl	8010c0c <HAL_GetTick>
 8010c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c3c:	d005      	beq.n	8010c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010c3e:	4b0a      	ldr	r3, [pc, #40]	; (8010c68 <HAL_Delay+0x44>)
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	461a      	mov	r2, r3
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	4413      	add	r3, r2
 8010c48:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8010c4a:	bf00      	nop
 8010c4c:	f7ff ffde 	bl	8010c0c <HAL_GetTick>
 8010c50:	4602      	mov	r2, r0
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	1ad3      	subs	r3, r2, r3
 8010c56:	68fa      	ldr	r2, [r7, #12]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d8f7      	bhi.n	8010c4c <HAL_Delay+0x28>
  {
  }
}
 8010c5c:	bf00      	nop
 8010c5e:	bf00      	nop
 8010c60:	3710      	adds	r7, #16
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}
 8010c66:	bf00      	nop
 8010c68:	20000034 	.word	0x20000034

08010c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010c6c:	b480      	push	{r7}
 8010c6e:	b085      	sub	sp, #20
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f003 0307 	and.w	r3, r3, #7
 8010c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010c7c:	4b0c      	ldr	r3, [pc, #48]	; (8010cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8010c7e:	68db      	ldr	r3, [r3, #12]
 8010c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010c82:	68ba      	ldr	r2, [r7, #8]
 8010c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010c88:	4013      	ands	r3, r2
 8010c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010c9e:	4a04      	ldr	r2, [pc, #16]	; (8010cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	60d3      	str	r3, [r2, #12]
}
 8010ca4:	bf00      	nop
 8010ca6:	3714      	adds	r7, #20
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr
 8010cb0:	e000ed00 	.word	0xe000ed00

08010cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010cb8:	4b04      	ldr	r3, [pc, #16]	; (8010ccc <__NVIC_GetPriorityGrouping+0x18>)
 8010cba:	68db      	ldr	r3, [r3, #12]
 8010cbc:	0a1b      	lsrs	r3, r3, #8
 8010cbe:	f003 0307 	and.w	r3, r3, #7
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cca:	4770      	bx	lr
 8010ccc:	e000ed00 	.word	0xe000ed00

08010cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	b083      	sub	sp, #12
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	db0b      	blt.n	8010cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010ce2:	79fb      	ldrb	r3, [r7, #7]
 8010ce4:	f003 021f 	and.w	r2, r3, #31
 8010ce8:	4907      	ldr	r1, [pc, #28]	; (8010d08 <__NVIC_EnableIRQ+0x38>)
 8010cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010cee:	095b      	lsrs	r3, r3, #5
 8010cf0:	2001      	movs	r0, #1
 8010cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8010cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8010cfa:	bf00      	nop
 8010cfc:	370c      	adds	r7, #12
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d04:	4770      	bx	lr
 8010d06:	bf00      	nop
 8010d08:	e000e100 	.word	0xe000e100

08010d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	4603      	mov	r3, r0
 8010d14:	6039      	str	r1, [r7, #0]
 8010d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	db0a      	blt.n	8010d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	b2da      	uxtb	r2, r3
 8010d24:	490c      	ldr	r1, [pc, #48]	; (8010d58 <__NVIC_SetPriority+0x4c>)
 8010d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d2a:	0112      	lsls	r2, r2, #4
 8010d2c:	b2d2      	uxtb	r2, r2
 8010d2e:	440b      	add	r3, r1
 8010d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010d34:	e00a      	b.n	8010d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	b2da      	uxtb	r2, r3
 8010d3a:	4908      	ldr	r1, [pc, #32]	; (8010d5c <__NVIC_SetPriority+0x50>)
 8010d3c:	79fb      	ldrb	r3, [r7, #7]
 8010d3e:	f003 030f 	and.w	r3, r3, #15
 8010d42:	3b04      	subs	r3, #4
 8010d44:	0112      	lsls	r2, r2, #4
 8010d46:	b2d2      	uxtb	r2, r2
 8010d48:	440b      	add	r3, r1
 8010d4a:	761a      	strb	r2, [r3, #24]
}
 8010d4c:	bf00      	nop
 8010d4e:	370c      	adds	r7, #12
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr
 8010d58:	e000e100 	.word	0xe000e100
 8010d5c:	e000ed00 	.word	0xe000ed00

08010d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010d60:	b480      	push	{r7}
 8010d62:	b089      	sub	sp, #36	; 0x24
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	60f8      	str	r0, [r7, #12]
 8010d68:	60b9      	str	r1, [r7, #8]
 8010d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	f003 0307 	and.w	r3, r3, #7
 8010d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010d74:	69fb      	ldr	r3, [r7, #28]
 8010d76:	f1c3 0307 	rsb	r3, r3, #7
 8010d7a:	2b04      	cmp	r3, #4
 8010d7c:	bf28      	it	cs
 8010d7e:	2304      	movcs	r3, #4
 8010d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010d82:	69fb      	ldr	r3, [r7, #28]
 8010d84:	3304      	adds	r3, #4
 8010d86:	2b06      	cmp	r3, #6
 8010d88:	d902      	bls.n	8010d90 <NVIC_EncodePriority+0x30>
 8010d8a:	69fb      	ldr	r3, [r7, #28]
 8010d8c:	3b03      	subs	r3, #3
 8010d8e:	e000      	b.n	8010d92 <NVIC_EncodePriority+0x32>
 8010d90:	2300      	movs	r3, #0
 8010d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010d98:	69bb      	ldr	r3, [r7, #24]
 8010d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8010d9e:	43da      	mvns	r2, r3
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	401a      	ands	r2, r3
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010da8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	fa01 f303 	lsl.w	r3, r1, r3
 8010db2:	43d9      	mvns	r1, r3
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010db8:	4313      	orrs	r3, r2
         );
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3724      	adds	r7, #36	; 0x24
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc4:	4770      	bx	lr
	...

08010dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b082      	sub	sp, #8
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	3b01      	subs	r3, #1
 8010dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010dd8:	d301      	bcc.n	8010dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010dda:	2301      	movs	r3, #1
 8010ddc:	e00f      	b.n	8010dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010dde:	4a0a      	ldr	r2, [pc, #40]	; (8010e08 <SysTick_Config+0x40>)
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	3b01      	subs	r3, #1
 8010de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010de6:	210f      	movs	r1, #15
 8010de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010dec:	f7ff ff8e 	bl	8010d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010df0:	4b05      	ldr	r3, [pc, #20]	; (8010e08 <SysTick_Config+0x40>)
 8010df2:	2200      	movs	r2, #0
 8010df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010df6:	4b04      	ldr	r3, [pc, #16]	; (8010e08 <SysTick_Config+0x40>)
 8010df8:	2207      	movs	r2, #7
 8010dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010dfc:	2300      	movs	r3, #0
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	3708      	adds	r7, #8
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop
 8010e08:	e000e010 	.word	0xe000e010

08010e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b082      	sub	sp, #8
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f7ff ff29 	bl	8010c6c <__NVIC_SetPriorityGrouping>
}
 8010e1a:	bf00      	nop
 8010e1c:	3708      	adds	r7, #8
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}

08010e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010e22:	b580      	push	{r7, lr}
 8010e24:	b086      	sub	sp, #24
 8010e26:	af00      	add	r7, sp, #0
 8010e28:	4603      	mov	r3, r0
 8010e2a:	60b9      	str	r1, [r7, #8]
 8010e2c:	607a      	str	r2, [r7, #4]
 8010e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010e30:	2300      	movs	r3, #0
 8010e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010e34:	f7ff ff3e 	bl	8010cb4 <__NVIC_GetPriorityGrouping>
 8010e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010e3a:	687a      	ldr	r2, [r7, #4]
 8010e3c:	68b9      	ldr	r1, [r7, #8]
 8010e3e:	6978      	ldr	r0, [r7, #20]
 8010e40:	f7ff ff8e 	bl	8010d60 <NVIC_EncodePriority>
 8010e44:	4602      	mov	r2, r0
 8010e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e4a:	4611      	mov	r1, r2
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7ff ff5d 	bl	8010d0c <__NVIC_SetPriority>
}
 8010e52:	bf00      	nop
 8010e54:	3718      	adds	r7, #24
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}

08010e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010e5a:	b580      	push	{r7, lr}
 8010e5c:	b082      	sub	sp, #8
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	4603      	mov	r3, r0
 8010e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7ff ff31 	bl	8010cd0 <__NVIC_EnableIRQ>
}
 8010e6e:	bf00      	nop
 8010e70:	3708      	adds	r7, #8
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}

08010e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010e76:	b580      	push	{r7, lr}
 8010e78:	b082      	sub	sp, #8
 8010e7a:	af00      	add	r7, sp, #0
 8010e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	f7ff ffa2 	bl	8010dc8 <SysTick_Config>
 8010e84:	4603      	mov	r3, r0
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3708      	adds	r7, #8
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}
	...

08010e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010e90:	b480      	push	{r7}
 8010e92:	b087      	sub	sp, #28
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010e9e:	e154      	b.n	801114a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	681a      	ldr	r2, [r3, #0]
 8010ea4:	2101      	movs	r1, #1
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8010eac:	4013      	ands	r3, r2
 8010eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	f000 8146 	beq.w	8011144 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	685b      	ldr	r3, [r3, #4]
 8010ebc:	f003 0303 	and.w	r3, r3, #3
 8010ec0:	2b01      	cmp	r3, #1
 8010ec2:	d005      	beq.n	8010ed0 <HAL_GPIO_Init+0x40>
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	f003 0303 	and.w	r3, r3, #3
 8010ecc:	2b02      	cmp	r3, #2
 8010ece:	d130      	bne.n	8010f32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	689b      	ldr	r3, [r3, #8]
 8010ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	005b      	lsls	r3, r3, #1
 8010eda:	2203      	movs	r2, #3
 8010edc:	fa02 f303 	lsl.w	r3, r2, r3
 8010ee0:	43db      	mvns	r3, r3
 8010ee2:	693a      	ldr	r2, [r7, #16]
 8010ee4:	4013      	ands	r3, r2
 8010ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	68da      	ldr	r2, [r3, #12]
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	005b      	lsls	r3, r3, #1
 8010ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8010ef4:	693a      	ldr	r2, [r7, #16]
 8010ef6:	4313      	orrs	r3, r2
 8010ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	693a      	ldr	r2, [r7, #16]
 8010efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	685b      	ldr	r3, [r3, #4]
 8010f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010f06:	2201      	movs	r2, #1
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8010f0e:	43db      	mvns	r3, r3
 8010f10:	693a      	ldr	r2, [r7, #16]
 8010f12:	4013      	ands	r3, r2
 8010f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	091b      	lsrs	r3, r3, #4
 8010f1c:	f003 0201 	and.w	r2, r3, #1
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	fa02 f303 	lsl.w	r3, r2, r3
 8010f26:	693a      	ldr	r2, [r7, #16]
 8010f28:	4313      	orrs	r3, r2
 8010f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	693a      	ldr	r2, [r7, #16]
 8010f30:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	685b      	ldr	r3, [r3, #4]
 8010f36:	f003 0303 	and.w	r3, r3, #3
 8010f3a:	2b03      	cmp	r3, #3
 8010f3c:	d017      	beq.n	8010f6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	68db      	ldr	r3, [r3, #12]
 8010f42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	005b      	lsls	r3, r3, #1
 8010f48:	2203      	movs	r2, #3
 8010f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8010f4e:	43db      	mvns	r3, r3
 8010f50:	693a      	ldr	r2, [r7, #16]
 8010f52:	4013      	ands	r3, r2
 8010f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	689a      	ldr	r2, [r3, #8]
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	005b      	lsls	r3, r3, #1
 8010f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8010f62:	693a      	ldr	r2, [r7, #16]
 8010f64:	4313      	orrs	r3, r2
 8010f66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	693a      	ldr	r2, [r7, #16]
 8010f6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	f003 0303 	and.w	r3, r3, #3
 8010f76:	2b02      	cmp	r3, #2
 8010f78:	d123      	bne.n	8010fc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	08da      	lsrs	r2, r3, #3
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	3208      	adds	r2, #8
 8010f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	f003 0307 	and.w	r3, r3, #7
 8010f8e:	009b      	lsls	r3, r3, #2
 8010f90:	220f      	movs	r2, #15
 8010f92:	fa02 f303 	lsl.w	r3, r2, r3
 8010f96:	43db      	mvns	r3, r3
 8010f98:	693a      	ldr	r2, [r7, #16]
 8010f9a:	4013      	ands	r3, r2
 8010f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	691a      	ldr	r2, [r3, #16]
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	f003 0307 	and.w	r3, r3, #7
 8010fa8:	009b      	lsls	r3, r3, #2
 8010faa:	fa02 f303 	lsl.w	r3, r2, r3
 8010fae:	693a      	ldr	r2, [r7, #16]
 8010fb0:	4313      	orrs	r3, r2
 8010fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	08da      	lsrs	r2, r3, #3
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	3208      	adds	r2, #8
 8010fbc:	6939      	ldr	r1, [r7, #16]
 8010fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	005b      	lsls	r3, r3, #1
 8010fcc:	2203      	movs	r2, #3
 8010fce:	fa02 f303 	lsl.w	r3, r2, r3
 8010fd2:	43db      	mvns	r3, r3
 8010fd4:	693a      	ldr	r2, [r7, #16]
 8010fd6:	4013      	ands	r3, r2
 8010fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	685b      	ldr	r3, [r3, #4]
 8010fde:	f003 0203 	and.w	r2, r3, #3
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	005b      	lsls	r3, r3, #1
 8010fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8010fea:	693a      	ldr	r2, [r7, #16]
 8010fec:	4313      	orrs	r3, r2
 8010fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	693a      	ldr	r2, [r7, #16]
 8010ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	685b      	ldr	r3, [r3, #4]
 8010ffa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	f000 80a0 	beq.w	8011144 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011004:	4b58      	ldr	r3, [pc, #352]	; (8011168 <HAL_GPIO_Init+0x2d8>)
 8011006:	699b      	ldr	r3, [r3, #24]
 8011008:	4a57      	ldr	r2, [pc, #348]	; (8011168 <HAL_GPIO_Init+0x2d8>)
 801100a:	f043 0301 	orr.w	r3, r3, #1
 801100e:	6193      	str	r3, [r2, #24]
 8011010:	4b55      	ldr	r3, [pc, #340]	; (8011168 <HAL_GPIO_Init+0x2d8>)
 8011012:	699b      	ldr	r3, [r3, #24]
 8011014:	f003 0301 	and.w	r3, r3, #1
 8011018:	60bb      	str	r3, [r7, #8]
 801101a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 801101c:	4a53      	ldr	r2, [pc, #332]	; (801116c <HAL_GPIO_Init+0x2dc>)
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	089b      	lsrs	r3, r3, #2
 8011022:	3302      	adds	r3, #2
 8011024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011028:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801102a:	697b      	ldr	r3, [r7, #20]
 801102c:	f003 0303 	and.w	r3, r3, #3
 8011030:	009b      	lsls	r3, r3, #2
 8011032:	220f      	movs	r2, #15
 8011034:	fa02 f303 	lsl.w	r3, r2, r3
 8011038:	43db      	mvns	r3, r3
 801103a:	693a      	ldr	r2, [r7, #16]
 801103c:	4013      	ands	r3, r2
 801103e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8011046:	d019      	beq.n	801107c <HAL_GPIO_Init+0x1ec>
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	4a49      	ldr	r2, [pc, #292]	; (8011170 <HAL_GPIO_Init+0x2e0>)
 801104c:	4293      	cmp	r3, r2
 801104e:	d013      	beq.n	8011078 <HAL_GPIO_Init+0x1e8>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	4a48      	ldr	r2, [pc, #288]	; (8011174 <HAL_GPIO_Init+0x2e4>)
 8011054:	4293      	cmp	r3, r2
 8011056:	d00d      	beq.n	8011074 <HAL_GPIO_Init+0x1e4>
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	4a47      	ldr	r2, [pc, #284]	; (8011178 <HAL_GPIO_Init+0x2e8>)
 801105c:	4293      	cmp	r3, r2
 801105e:	d007      	beq.n	8011070 <HAL_GPIO_Init+0x1e0>
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	4a46      	ldr	r2, [pc, #280]	; (801117c <HAL_GPIO_Init+0x2ec>)
 8011064:	4293      	cmp	r3, r2
 8011066:	d101      	bne.n	801106c <HAL_GPIO_Init+0x1dc>
 8011068:	2304      	movs	r3, #4
 801106a:	e008      	b.n	801107e <HAL_GPIO_Init+0x1ee>
 801106c:	2305      	movs	r3, #5
 801106e:	e006      	b.n	801107e <HAL_GPIO_Init+0x1ee>
 8011070:	2303      	movs	r3, #3
 8011072:	e004      	b.n	801107e <HAL_GPIO_Init+0x1ee>
 8011074:	2302      	movs	r3, #2
 8011076:	e002      	b.n	801107e <HAL_GPIO_Init+0x1ee>
 8011078:	2301      	movs	r3, #1
 801107a:	e000      	b.n	801107e <HAL_GPIO_Init+0x1ee>
 801107c:	2300      	movs	r3, #0
 801107e:	697a      	ldr	r2, [r7, #20]
 8011080:	f002 0203 	and.w	r2, r2, #3
 8011084:	0092      	lsls	r2, r2, #2
 8011086:	4093      	lsls	r3, r2
 8011088:	693a      	ldr	r2, [r7, #16]
 801108a:	4313      	orrs	r3, r2
 801108c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 801108e:	4937      	ldr	r1, [pc, #220]	; (801116c <HAL_GPIO_Init+0x2dc>)
 8011090:	697b      	ldr	r3, [r7, #20]
 8011092:	089b      	lsrs	r3, r3, #2
 8011094:	3302      	adds	r3, #2
 8011096:	693a      	ldr	r2, [r7, #16]
 8011098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801109c:	4b38      	ldr	r3, [pc, #224]	; (8011180 <HAL_GPIO_Init+0x2f0>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	43db      	mvns	r3, r3
 80110a6:	693a      	ldr	r2, [r7, #16]
 80110a8:	4013      	ands	r3, r2
 80110aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	685b      	ldr	r3, [r3, #4]
 80110b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d003      	beq.n	80110c0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80110b8:	693a      	ldr	r2, [r7, #16]
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	4313      	orrs	r3, r2
 80110be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80110c0:	4a2f      	ldr	r2, [pc, #188]	; (8011180 <HAL_GPIO_Init+0x2f0>)
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80110c6:	4b2e      	ldr	r3, [pc, #184]	; (8011180 <HAL_GPIO_Init+0x2f0>)
 80110c8:	685b      	ldr	r3, [r3, #4]
 80110ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	43db      	mvns	r3, r3
 80110d0:	693a      	ldr	r2, [r7, #16]
 80110d2:	4013      	ands	r3, r2
 80110d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	685b      	ldr	r3, [r3, #4]
 80110da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d003      	beq.n	80110ea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80110e2:	693a      	ldr	r2, [r7, #16]
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	4313      	orrs	r3, r2
 80110e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80110ea:	4a25      	ldr	r2, [pc, #148]	; (8011180 <HAL_GPIO_Init+0x2f0>)
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80110f0:	4b23      	ldr	r3, [pc, #140]	; (8011180 <HAL_GPIO_Init+0x2f0>)
 80110f2:	689b      	ldr	r3, [r3, #8]
 80110f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	43db      	mvns	r3, r3
 80110fa:	693a      	ldr	r2, [r7, #16]
 80110fc:	4013      	ands	r3, r2
 80110fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011108:	2b00      	cmp	r3, #0
 801110a:	d003      	beq.n	8011114 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 801110c:	693a      	ldr	r2, [r7, #16]
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	4313      	orrs	r3, r2
 8011112:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8011114:	4a1a      	ldr	r2, [pc, #104]	; (8011180 <HAL_GPIO_Init+0x2f0>)
 8011116:	693b      	ldr	r3, [r7, #16]
 8011118:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801111a:	4b19      	ldr	r3, [pc, #100]	; (8011180 <HAL_GPIO_Init+0x2f0>)
 801111c:	68db      	ldr	r3, [r3, #12]
 801111e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	43db      	mvns	r3, r3
 8011124:	693a      	ldr	r2, [r7, #16]
 8011126:	4013      	ands	r3, r2
 8011128:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011132:	2b00      	cmp	r3, #0
 8011134:	d003      	beq.n	801113e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8011136:	693a      	ldr	r2, [r7, #16]
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	4313      	orrs	r3, r2
 801113c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 801113e:	4a10      	ldr	r2, [pc, #64]	; (8011180 <HAL_GPIO_Init+0x2f0>)
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	3301      	adds	r3, #1
 8011148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	681a      	ldr	r2, [r3, #0]
 801114e:	697b      	ldr	r3, [r7, #20]
 8011150:	fa22 f303 	lsr.w	r3, r2, r3
 8011154:	2b00      	cmp	r3, #0
 8011156:	f47f aea3 	bne.w	8010ea0 <HAL_GPIO_Init+0x10>
  }
}
 801115a:	bf00      	nop
 801115c:	bf00      	nop
 801115e:	371c      	adds	r7, #28
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr
 8011168:	40021000 	.word	0x40021000
 801116c:	40010000 	.word	0x40010000
 8011170:	48000400 	.word	0x48000400
 8011174:	48000800 	.word	0x48000800
 8011178:	48000c00 	.word	0x48000c00
 801117c:	48001000 	.word	0x48001000
 8011180:	40010400 	.word	0x40010400

08011184 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011184:	b480      	push	{r7}
 8011186:	b087      	sub	sp, #28
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801118e:	2300      	movs	r3, #0
 8011190:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8011192:	e0b8      	b.n	8011306 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8011194:	2201      	movs	r2, #1
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	fa02 f303 	lsl.w	r3, r2, r3
 801119c:	683a      	ldr	r2, [r7, #0]
 801119e:	4013      	ands	r3, r2
 80111a0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	f000 80ab 	beq.w	8011300 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80111aa:	4a5e      	ldr	r2, [pc, #376]	; (8011324 <HAL_GPIO_DeInit+0x1a0>)
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	089b      	lsrs	r3, r3, #2
 80111b0:	3302      	adds	r3, #2
 80111b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80111b6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	f003 0303 	and.w	r3, r3, #3
 80111be:	009b      	lsls	r3, r3, #2
 80111c0:	220f      	movs	r2, #15
 80111c2:	fa02 f303 	lsl.w	r3, r2, r3
 80111c6:	68fa      	ldr	r2, [r7, #12]
 80111c8:	4013      	ands	r3, r2
 80111ca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80111d2:	d019      	beq.n	8011208 <HAL_GPIO_DeInit+0x84>
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	4a54      	ldr	r2, [pc, #336]	; (8011328 <HAL_GPIO_DeInit+0x1a4>)
 80111d8:	4293      	cmp	r3, r2
 80111da:	d013      	beq.n	8011204 <HAL_GPIO_DeInit+0x80>
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	4a53      	ldr	r2, [pc, #332]	; (801132c <HAL_GPIO_DeInit+0x1a8>)
 80111e0:	4293      	cmp	r3, r2
 80111e2:	d00d      	beq.n	8011200 <HAL_GPIO_DeInit+0x7c>
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	4a52      	ldr	r2, [pc, #328]	; (8011330 <HAL_GPIO_DeInit+0x1ac>)
 80111e8:	4293      	cmp	r3, r2
 80111ea:	d007      	beq.n	80111fc <HAL_GPIO_DeInit+0x78>
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	4a51      	ldr	r2, [pc, #324]	; (8011334 <HAL_GPIO_DeInit+0x1b0>)
 80111f0:	4293      	cmp	r3, r2
 80111f2:	d101      	bne.n	80111f8 <HAL_GPIO_DeInit+0x74>
 80111f4:	2304      	movs	r3, #4
 80111f6:	e008      	b.n	801120a <HAL_GPIO_DeInit+0x86>
 80111f8:	2305      	movs	r3, #5
 80111fa:	e006      	b.n	801120a <HAL_GPIO_DeInit+0x86>
 80111fc:	2303      	movs	r3, #3
 80111fe:	e004      	b.n	801120a <HAL_GPIO_DeInit+0x86>
 8011200:	2302      	movs	r3, #2
 8011202:	e002      	b.n	801120a <HAL_GPIO_DeInit+0x86>
 8011204:	2301      	movs	r3, #1
 8011206:	e000      	b.n	801120a <HAL_GPIO_DeInit+0x86>
 8011208:	2300      	movs	r3, #0
 801120a:	697a      	ldr	r2, [r7, #20]
 801120c:	f002 0203 	and.w	r2, r2, #3
 8011210:	0092      	lsls	r2, r2, #2
 8011212:	4093      	lsls	r3, r2
 8011214:	68fa      	ldr	r2, [r7, #12]
 8011216:	429a      	cmp	r2, r3
 8011218:	d132      	bne.n	8011280 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801121a:	4b47      	ldr	r3, [pc, #284]	; (8011338 <HAL_GPIO_DeInit+0x1b4>)
 801121c:	681a      	ldr	r2, [r3, #0]
 801121e:	693b      	ldr	r3, [r7, #16]
 8011220:	43db      	mvns	r3, r3
 8011222:	4945      	ldr	r1, [pc, #276]	; (8011338 <HAL_GPIO_DeInit+0x1b4>)
 8011224:	4013      	ands	r3, r2
 8011226:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8011228:	4b43      	ldr	r3, [pc, #268]	; (8011338 <HAL_GPIO_DeInit+0x1b4>)
 801122a:	685a      	ldr	r2, [r3, #4]
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	43db      	mvns	r3, r3
 8011230:	4941      	ldr	r1, [pc, #260]	; (8011338 <HAL_GPIO_DeInit+0x1b4>)
 8011232:	4013      	ands	r3, r2
 8011234:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8011236:	4b40      	ldr	r3, [pc, #256]	; (8011338 <HAL_GPIO_DeInit+0x1b4>)
 8011238:	689a      	ldr	r2, [r3, #8]
 801123a:	693b      	ldr	r3, [r7, #16]
 801123c:	43db      	mvns	r3, r3
 801123e:	493e      	ldr	r1, [pc, #248]	; (8011338 <HAL_GPIO_DeInit+0x1b4>)
 8011240:	4013      	ands	r3, r2
 8011242:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8011244:	4b3c      	ldr	r3, [pc, #240]	; (8011338 <HAL_GPIO_DeInit+0x1b4>)
 8011246:	68da      	ldr	r2, [r3, #12]
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	43db      	mvns	r3, r3
 801124c:	493a      	ldr	r1, [pc, #232]	; (8011338 <HAL_GPIO_DeInit+0x1b4>)
 801124e:	4013      	ands	r3, r2
 8011250:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8011252:	697b      	ldr	r3, [r7, #20]
 8011254:	f003 0303 	and.w	r3, r3, #3
 8011258:	009b      	lsls	r3, r3, #2
 801125a:	220f      	movs	r2, #15
 801125c:	fa02 f303 	lsl.w	r3, r2, r3
 8011260:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8011262:	4a30      	ldr	r2, [pc, #192]	; (8011324 <HAL_GPIO_DeInit+0x1a0>)
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	089b      	lsrs	r3, r3, #2
 8011268:	3302      	adds	r3, #2
 801126a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	43da      	mvns	r2, r3
 8011272:	482c      	ldr	r0, [pc, #176]	; (8011324 <HAL_GPIO_DeInit+0x1a0>)
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	089b      	lsrs	r3, r3, #2
 8011278:	400a      	ands	r2, r1
 801127a:	3302      	adds	r3, #2
 801127c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	681a      	ldr	r2, [r3, #0]
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	005b      	lsls	r3, r3, #1
 8011288:	2103      	movs	r1, #3
 801128a:	fa01 f303 	lsl.w	r3, r1, r3
 801128e:	43db      	mvns	r3, r3
 8011290:	401a      	ands	r2, r3
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	08da      	lsrs	r2, r3, #3
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	3208      	adds	r2, #8
 801129e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	f003 0307 	and.w	r3, r3, #7
 80112a8:	009b      	lsls	r3, r3, #2
 80112aa:	220f      	movs	r2, #15
 80112ac:	fa02 f303 	lsl.w	r3, r2, r3
 80112b0:	43db      	mvns	r3, r3
 80112b2:	697a      	ldr	r2, [r7, #20]
 80112b4:	08d2      	lsrs	r2, r2, #3
 80112b6:	4019      	ands	r1, r3
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	3208      	adds	r2, #8
 80112bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	68da      	ldr	r2, [r3, #12]
 80112c4:	697b      	ldr	r3, [r7, #20]
 80112c6:	005b      	lsls	r3, r3, #1
 80112c8:	2103      	movs	r1, #3
 80112ca:	fa01 f303 	lsl.w	r3, r1, r3
 80112ce:	43db      	mvns	r3, r3
 80112d0:	401a      	ands	r2, r3
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	685a      	ldr	r2, [r3, #4]
 80112da:	2101      	movs	r1, #1
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	fa01 f303 	lsl.w	r3, r1, r3
 80112e2:	43db      	mvns	r3, r3
 80112e4:	401a      	ands	r2, r3
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	689a      	ldr	r2, [r3, #8]
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	005b      	lsls	r3, r3, #1
 80112f2:	2103      	movs	r1, #3
 80112f4:	fa01 f303 	lsl.w	r3, r1, r3
 80112f8:	43db      	mvns	r3, r3
 80112fa:	401a      	ands	r2, r3
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	609a      	str	r2, [r3, #8]
    }

    position++;
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	3301      	adds	r3, #1
 8011304:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8011306:	683a      	ldr	r2, [r7, #0]
 8011308:	697b      	ldr	r3, [r7, #20]
 801130a:	fa22 f303 	lsr.w	r3, r2, r3
 801130e:	2b00      	cmp	r3, #0
 8011310:	f47f af40 	bne.w	8011194 <HAL_GPIO_DeInit+0x10>
  }
}
 8011314:	bf00      	nop
 8011316:	bf00      	nop
 8011318:	371c      	adds	r7, #28
 801131a:	46bd      	mov	sp, r7
 801131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011320:	4770      	bx	lr
 8011322:	bf00      	nop
 8011324:	40010000 	.word	0x40010000
 8011328:	48000400 	.word	0x48000400
 801132c:	48000800 	.word	0x48000800
 8011330:	48000c00 	.word	0x48000c00
 8011334:	48001000 	.word	0x48001000
 8011338:	40010400 	.word	0x40010400

0801133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801133c:	b480      	push	{r7}
 801133e:	b083      	sub	sp, #12
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
 8011344:	460b      	mov	r3, r1
 8011346:	807b      	strh	r3, [r7, #2]
 8011348:	4613      	mov	r3, r2
 801134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801134c:	787b      	ldrb	r3, [r7, #1]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d003      	beq.n	801135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011352:	887a      	ldrh	r2, [r7, #2]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8011358:	e002      	b.n	8011360 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801135a:	887a      	ldrh	r2, [r7, #2]
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8011360:	bf00      	nop
 8011362:	370c      	adds	r7, #12
 8011364:	46bd      	mov	sp, r7
 8011366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136a:	4770      	bx	lr

0801136c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b082      	sub	sp, #8
 8011370:	af00      	add	r7, sp, #0
 8011372:	4603      	mov	r3, r0
 8011374:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8011376:	4b08      	ldr	r3, [pc, #32]	; (8011398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011378:	695a      	ldr	r2, [r3, #20]
 801137a:	88fb      	ldrh	r3, [r7, #6]
 801137c:	4013      	ands	r3, r2
 801137e:	2b00      	cmp	r3, #0
 8011380:	d006      	beq.n	8011390 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8011382:	4a05      	ldr	r2, [pc, #20]	; (8011398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011384:	88fb      	ldrh	r3, [r7, #6]
 8011386:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8011388:	88fb      	ldrh	r3, [r7, #6]
 801138a:	4618      	mov	r0, r3
 801138c:	f000 f806 	bl	801139c <HAL_GPIO_EXTI_Callback>
  }
}
 8011390:	bf00      	nop
 8011392:	3708      	adds	r7, #8
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}
 8011398:	40010400 	.word	0x40010400

0801139c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801139c:	b480      	push	{r7}
 801139e:	b083      	sub	sp, #12
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	4603      	mov	r3, r0
 80113a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80113a6:	bf00      	nop
 80113a8:	370c      	adds	r7, #12
 80113aa:	46bd      	mov	sp, r7
 80113ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b0:	4770      	bx	lr

080113b2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80113b2:	b580      	push	{r7, lr}
 80113b4:	b082      	sub	sp, #8
 80113b6:	af00      	add	r7, sp, #0
 80113b8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d101      	bne.n	80113c4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80113c0:	2301      	movs	r3, #1
 80113c2:	e081      	b.n	80114c8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80113ca:	b2db      	uxtb	r3, r3
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d106      	bne.n	80113de <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2200      	movs	r2, #0
 80113d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f7ef fb85 	bl	8000ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	2224      	movs	r2, #36	; 0x24
 80113e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	681a      	ldr	r2, [r3, #0]
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	f022 0201 	bic.w	r2, r2, #1
 80113f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	685a      	ldr	r2, [r3, #4]
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8011402:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	689a      	ldr	r2, [r3, #8]
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011412:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	68db      	ldr	r3, [r3, #12]
 8011418:	2b01      	cmp	r3, #1
 801141a:	d107      	bne.n	801142c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	689a      	ldr	r2, [r3, #8]
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011428:	609a      	str	r2, [r3, #8]
 801142a:	e006      	b.n	801143a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	689a      	ldr	r2, [r3, #8]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8011438:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	68db      	ldr	r3, [r3, #12]
 801143e:	2b02      	cmp	r3, #2
 8011440:	d104      	bne.n	801144c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801144a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	687a      	ldr	r2, [r7, #4]
 8011454:	6812      	ldr	r2, [r2, #0]
 8011456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801145a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801145e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	68da      	ldr	r2, [r3, #12]
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801146e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	691a      	ldr	r2, [r3, #16]
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	695b      	ldr	r3, [r3, #20]
 8011478:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	699b      	ldr	r3, [r3, #24]
 8011480:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	430a      	orrs	r2, r1
 8011488:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	69d9      	ldr	r1, [r3, #28]
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6a1a      	ldr	r2, [r3, #32]
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	430a      	orrs	r2, r1
 8011498:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f042 0201 	orr.w	r2, r2, #1
 80114a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2200      	movs	r2, #0
 80114ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2220      	movs	r2, #32
 80114b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2200      	movs	r2, #0
 80114bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	2200      	movs	r2, #0
 80114c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80114c6:	2300      	movs	r3, #0
}
 80114c8:	4618      	mov	r0, r3
 80114ca:	3708      	adds	r7, #8
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}

080114d0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d101      	bne.n	80114e2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80114de:	2301      	movs	r3, #1
 80114e0:	e021      	b.n	8011526 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2224      	movs	r2, #36	; 0x24
 80114e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	681a      	ldr	r2, [r3, #0]
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	f022 0201 	bic.w	r2, r2, #1
 80114f8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80114fa:	6878      	ldr	r0, [r7, #4]
 80114fc:	f7ef fb38 	bl	8000b70 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2200      	movs	r2, #0
 8011504:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2200      	movs	r2, #0
 801150a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2200      	movs	r2, #0
 8011512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2200      	movs	r2, #0
 8011518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2200      	movs	r2, #0
 8011520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8011524:	2300      	movs	r3, #0
}
 8011526:	4618      	mov	r0, r3
 8011528:	3708      	adds	r7, #8
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}
	...

08011530 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b088      	sub	sp, #32
 8011534:	af02      	add	r7, sp, #8
 8011536:	60f8      	str	r0, [r7, #12]
 8011538:	607a      	str	r2, [r7, #4]
 801153a:	461a      	mov	r2, r3
 801153c:	460b      	mov	r3, r1
 801153e:	817b      	strh	r3, [r7, #10]
 8011540:	4613      	mov	r3, r2
 8011542:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801154a:	b2db      	uxtb	r3, r3
 801154c:	2b20      	cmp	r3, #32
 801154e:	f040 80da 	bne.w	8011706 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011558:	2b01      	cmp	r3, #1
 801155a:	d101      	bne.n	8011560 <HAL_I2C_Master_Transmit+0x30>
 801155c:	2302      	movs	r3, #2
 801155e:	e0d3      	b.n	8011708 <HAL_I2C_Master_Transmit+0x1d8>
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	2201      	movs	r2, #1
 8011564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011568:	f7ff fb50 	bl	8010c0c <HAL_GetTick>
 801156c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	9300      	str	r3, [sp, #0]
 8011572:	2319      	movs	r3, #25
 8011574:	2201      	movs	r2, #1
 8011576:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801157a:	68f8      	ldr	r0, [r7, #12]
 801157c:	f000 fa00 	bl	8011980 <I2C_WaitOnFlagUntilTimeout>
 8011580:	4603      	mov	r3, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d001      	beq.n	801158a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8011586:	2301      	movs	r3, #1
 8011588:	e0be      	b.n	8011708 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	2221      	movs	r2, #33	; 0x21
 801158e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	2210      	movs	r2, #16
 8011596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	2200      	movs	r2, #0
 801159e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	687a      	ldr	r2, [r7, #4]
 80115a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	893a      	ldrh	r2, [r7, #8]
 80115aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2200      	movs	r2, #0
 80115b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80115b6:	b29b      	uxth	r3, r3
 80115b8:	2bff      	cmp	r3, #255	; 0xff
 80115ba:	d90e      	bls.n	80115da <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	22ff      	movs	r2, #255	; 0xff
 80115c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80115c6:	b2da      	uxtb	r2, r3
 80115c8:	8979      	ldrh	r1, [r7, #10]
 80115ca:	4b51      	ldr	r3, [pc, #324]	; (8011710 <HAL_I2C_Master_Transmit+0x1e0>)
 80115cc:	9300      	str	r3, [sp, #0]
 80115ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80115d2:	68f8      	ldr	r0, [r7, #12]
 80115d4:	f000 fb72 	bl	8011cbc <I2C_TransferConfig>
 80115d8:	e06c      	b.n	80116b4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80115de:	b29a      	uxth	r2, r3
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80115e8:	b2da      	uxtb	r2, r3
 80115ea:	8979      	ldrh	r1, [r7, #10]
 80115ec:	4b48      	ldr	r3, [pc, #288]	; (8011710 <HAL_I2C_Master_Transmit+0x1e0>)
 80115ee:	9300      	str	r3, [sp, #0]
 80115f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80115f4:	68f8      	ldr	r0, [r7, #12]
 80115f6:	f000 fb61 	bl	8011cbc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80115fa:	e05b      	b.n	80116b4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80115fc:	697a      	ldr	r2, [r7, #20]
 80115fe:	6a39      	ldr	r1, [r7, #32]
 8011600:	68f8      	ldr	r0, [r7, #12]
 8011602:	f000 f9fd 	bl	8011a00 <I2C_WaitOnTXISFlagUntilTimeout>
 8011606:	4603      	mov	r3, r0
 8011608:	2b00      	cmp	r3, #0
 801160a:	d001      	beq.n	8011610 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 801160c:	2301      	movs	r3, #1
 801160e:	e07b      	b.n	8011708 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011614:	781a      	ldrb	r2, [r3, #0]
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011620:	1c5a      	adds	r2, r3, #1
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801162a:	b29b      	uxth	r3, r3
 801162c:	3b01      	subs	r3, #1
 801162e:	b29a      	uxth	r2, r3
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011638:	3b01      	subs	r3, #1
 801163a:	b29a      	uxth	r2, r3
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011644:	b29b      	uxth	r3, r3
 8011646:	2b00      	cmp	r3, #0
 8011648:	d034      	beq.n	80116b4 <HAL_I2C_Master_Transmit+0x184>
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801164e:	2b00      	cmp	r3, #0
 8011650:	d130      	bne.n	80116b4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	9300      	str	r3, [sp, #0]
 8011656:	6a3b      	ldr	r3, [r7, #32]
 8011658:	2200      	movs	r2, #0
 801165a:	2180      	movs	r1, #128	; 0x80
 801165c:	68f8      	ldr	r0, [r7, #12]
 801165e:	f000 f98f 	bl	8011980 <I2C_WaitOnFlagUntilTimeout>
 8011662:	4603      	mov	r3, r0
 8011664:	2b00      	cmp	r3, #0
 8011666:	d001      	beq.n	801166c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8011668:	2301      	movs	r3, #1
 801166a:	e04d      	b.n	8011708 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011670:	b29b      	uxth	r3, r3
 8011672:	2bff      	cmp	r3, #255	; 0xff
 8011674:	d90e      	bls.n	8011694 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	22ff      	movs	r2, #255	; 0xff
 801167a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011680:	b2da      	uxtb	r2, r3
 8011682:	8979      	ldrh	r1, [r7, #10]
 8011684:	2300      	movs	r3, #0
 8011686:	9300      	str	r3, [sp, #0]
 8011688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801168c:	68f8      	ldr	r0, [r7, #12]
 801168e:	f000 fb15 	bl	8011cbc <I2C_TransferConfig>
 8011692:	e00f      	b.n	80116b4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011698:	b29a      	uxth	r2, r3
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116a2:	b2da      	uxtb	r2, r3
 80116a4:	8979      	ldrh	r1, [r7, #10]
 80116a6:	2300      	movs	r3, #0
 80116a8:	9300      	str	r3, [sp, #0]
 80116aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80116ae:	68f8      	ldr	r0, [r7, #12]
 80116b0:	f000 fb04 	bl	8011cbc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d19e      	bne.n	80115fc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80116be:	697a      	ldr	r2, [r7, #20]
 80116c0:	6a39      	ldr	r1, [r7, #32]
 80116c2:	68f8      	ldr	r0, [r7, #12]
 80116c4:	f000 f9dc 	bl	8011a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 80116c8:	4603      	mov	r3, r0
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d001      	beq.n	80116d2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80116ce:	2301      	movs	r3, #1
 80116d0:	e01a      	b.n	8011708 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	2220      	movs	r2, #32
 80116d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	6859      	ldr	r1, [r3, #4]
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	681a      	ldr	r2, [r3, #0]
 80116e4:	4b0b      	ldr	r3, [pc, #44]	; (8011714 <HAL_I2C_Master_Transmit+0x1e4>)
 80116e6:	400b      	ands	r3, r1
 80116e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	2220      	movs	r2, #32
 80116ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	2200      	movs	r2, #0
 80116f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	2200      	movs	r2, #0
 80116fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011702:	2300      	movs	r3, #0
 8011704:	e000      	b.n	8011708 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8011706:	2302      	movs	r3, #2
  }
}
 8011708:	4618      	mov	r0, r3
 801170a:	3718      	adds	r7, #24
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}
 8011710:	80002000 	.word	0x80002000
 8011714:	fe00e800 	.word	0xfe00e800

08011718 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b088      	sub	sp, #32
 801171c:	af02      	add	r7, sp, #8
 801171e:	60f8      	str	r0, [r7, #12]
 8011720:	607a      	str	r2, [r7, #4]
 8011722:	461a      	mov	r2, r3
 8011724:	460b      	mov	r3, r1
 8011726:	817b      	strh	r3, [r7, #10]
 8011728:	4613      	mov	r3, r2
 801172a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011732:	b2db      	uxtb	r3, r3
 8011734:	2b20      	cmp	r3, #32
 8011736:	f040 80db 	bne.w	80118f0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011740:	2b01      	cmp	r3, #1
 8011742:	d101      	bne.n	8011748 <HAL_I2C_Master_Receive+0x30>
 8011744:	2302      	movs	r3, #2
 8011746:	e0d4      	b.n	80118f2 <HAL_I2C_Master_Receive+0x1da>
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	2201      	movs	r2, #1
 801174c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011750:	f7ff fa5c 	bl	8010c0c <HAL_GetTick>
 8011754:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	9300      	str	r3, [sp, #0]
 801175a:	2319      	movs	r3, #25
 801175c:	2201      	movs	r2, #1
 801175e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011762:	68f8      	ldr	r0, [r7, #12]
 8011764:	f000 f90c 	bl	8011980 <I2C_WaitOnFlagUntilTimeout>
 8011768:	4603      	mov	r3, r0
 801176a:	2b00      	cmp	r3, #0
 801176c:	d001      	beq.n	8011772 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 801176e:	2301      	movs	r3, #1
 8011770:	e0bf      	b.n	80118f2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	2222      	movs	r2, #34	; 0x22
 8011776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	2210      	movs	r2, #16
 801177e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	2200      	movs	r2, #0
 8011786:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	687a      	ldr	r2, [r7, #4]
 801178c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	893a      	ldrh	r2, [r7, #8]
 8011792:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	2200      	movs	r2, #0
 8011798:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801179e:	b29b      	uxth	r3, r3
 80117a0:	2bff      	cmp	r3, #255	; 0xff
 80117a2:	d90e      	bls.n	80117c2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	22ff      	movs	r2, #255	; 0xff
 80117a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80117ae:	b2da      	uxtb	r2, r3
 80117b0:	8979      	ldrh	r1, [r7, #10]
 80117b2:	4b52      	ldr	r3, [pc, #328]	; (80118fc <HAL_I2C_Master_Receive+0x1e4>)
 80117b4:	9300      	str	r3, [sp, #0]
 80117b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80117ba:	68f8      	ldr	r0, [r7, #12]
 80117bc:	f000 fa7e 	bl	8011cbc <I2C_TransferConfig>
 80117c0:	e06d      	b.n	801189e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80117c6:	b29a      	uxth	r2, r3
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80117d0:	b2da      	uxtb	r2, r3
 80117d2:	8979      	ldrh	r1, [r7, #10]
 80117d4:	4b49      	ldr	r3, [pc, #292]	; (80118fc <HAL_I2C_Master_Receive+0x1e4>)
 80117d6:	9300      	str	r3, [sp, #0]
 80117d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80117dc:	68f8      	ldr	r0, [r7, #12]
 80117de:	f000 fa6d 	bl	8011cbc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80117e2:	e05c      	b.n	801189e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80117e4:	697a      	ldr	r2, [r7, #20]
 80117e6:	6a39      	ldr	r1, [r7, #32]
 80117e8:	68f8      	ldr	r0, [r7, #12]
 80117ea:	f000 f985 	bl	8011af8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80117ee:	4603      	mov	r3, r0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d001      	beq.n	80117f8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80117f4:	2301      	movs	r3, #1
 80117f6:	e07c      	b.n	80118f2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011802:	b2d2      	uxtb	r2, r2
 8011804:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801180a:	1c5a      	adds	r2, r3, #1
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011814:	3b01      	subs	r3, #1
 8011816:	b29a      	uxth	r2, r3
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011820:	b29b      	uxth	r3, r3
 8011822:	3b01      	subs	r3, #1
 8011824:	b29a      	uxth	r2, r3
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801182e:	b29b      	uxth	r3, r3
 8011830:	2b00      	cmp	r3, #0
 8011832:	d034      	beq.n	801189e <HAL_I2C_Master_Receive+0x186>
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011838:	2b00      	cmp	r3, #0
 801183a:	d130      	bne.n	801189e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	9300      	str	r3, [sp, #0]
 8011840:	6a3b      	ldr	r3, [r7, #32]
 8011842:	2200      	movs	r2, #0
 8011844:	2180      	movs	r1, #128	; 0x80
 8011846:	68f8      	ldr	r0, [r7, #12]
 8011848:	f000 f89a 	bl	8011980 <I2C_WaitOnFlagUntilTimeout>
 801184c:	4603      	mov	r3, r0
 801184e:	2b00      	cmp	r3, #0
 8011850:	d001      	beq.n	8011856 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8011852:	2301      	movs	r3, #1
 8011854:	e04d      	b.n	80118f2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801185a:	b29b      	uxth	r3, r3
 801185c:	2bff      	cmp	r3, #255	; 0xff
 801185e:	d90e      	bls.n	801187e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	22ff      	movs	r2, #255	; 0xff
 8011864:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801186a:	b2da      	uxtb	r2, r3
 801186c:	8979      	ldrh	r1, [r7, #10]
 801186e:	2300      	movs	r3, #0
 8011870:	9300      	str	r3, [sp, #0]
 8011872:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011876:	68f8      	ldr	r0, [r7, #12]
 8011878:	f000 fa20 	bl	8011cbc <I2C_TransferConfig>
 801187c:	e00f      	b.n	801189e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011882:	b29a      	uxth	r2, r3
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801188c:	b2da      	uxtb	r2, r3
 801188e:	8979      	ldrh	r1, [r7, #10]
 8011890:	2300      	movs	r3, #0
 8011892:	9300      	str	r3, [sp, #0]
 8011894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011898:	68f8      	ldr	r0, [r7, #12]
 801189a:	f000 fa0f 	bl	8011cbc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80118a2:	b29b      	uxth	r3, r3
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d19d      	bne.n	80117e4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80118a8:	697a      	ldr	r2, [r7, #20]
 80118aa:	6a39      	ldr	r1, [r7, #32]
 80118ac:	68f8      	ldr	r0, [r7, #12]
 80118ae:	f000 f8e7 	bl	8011a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 80118b2:	4603      	mov	r3, r0
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d001      	beq.n	80118bc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80118b8:	2301      	movs	r3, #1
 80118ba:	e01a      	b.n	80118f2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	2220      	movs	r2, #32
 80118c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	6859      	ldr	r1, [r3, #4]
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	681a      	ldr	r2, [r3, #0]
 80118ce:	4b0c      	ldr	r3, [pc, #48]	; (8011900 <HAL_I2C_Master_Receive+0x1e8>)
 80118d0:	400b      	ands	r3, r1
 80118d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	2220      	movs	r2, #32
 80118d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	2200      	movs	r2, #0
 80118e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	2200      	movs	r2, #0
 80118e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80118ec:	2300      	movs	r3, #0
 80118ee:	e000      	b.n	80118f2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80118f0:	2302      	movs	r3, #2
  }
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3718      	adds	r7, #24
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}
 80118fa:	bf00      	nop
 80118fc:	80002400 	.word	0x80002400
 8011900:	fe00e800 	.word	0xfe00e800

08011904 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8011904:	b480      	push	{r7}
 8011906:	b083      	sub	sp, #12
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011912:	b2db      	uxtb	r3, r3
}
 8011914:	4618      	mov	r0, r3
 8011916:	370c      	adds	r7, #12
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr

08011920 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 801192c:	4618      	mov	r0, r3
 801192e:	370c      	adds	r7, #12
 8011930:	46bd      	mov	sp, r7
 8011932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011936:	4770      	bx	lr

08011938 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8011938:	b480      	push	{r7}
 801193a:	b083      	sub	sp, #12
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	699b      	ldr	r3, [r3, #24]
 8011946:	f003 0302 	and.w	r3, r3, #2
 801194a:	2b02      	cmp	r3, #2
 801194c:	d103      	bne.n	8011956 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	2200      	movs	r2, #0
 8011954:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	699b      	ldr	r3, [r3, #24]
 801195c:	f003 0301 	and.w	r3, r3, #1
 8011960:	2b01      	cmp	r3, #1
 8011962:	d007      	beq.n	8011974 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	699a      	ldr	r2, [r3, #24]
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	f042 0201 	orr.w	r2, r2, #1
 8011972:	619a      	str	r2, [r3, #24]
  }
}
 8011974:	bf00      	nop
 8011976:	370c      	adds	r7, #12
 8011978:	46bd      	mov	sp, r7
 801197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197e:	4770      	bx	lr

08011980 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b084      	sub	sp, #16
 8011984:	af00      	add	r7, sp, #0
 8011986:	60f8      	str	r0, [r7, #12]
 8011988:	60b9      	str	r1, [r7, #8]
 801198a:	603b      	str	r3, [r7, #0]
 801198c:	4613      	mov	r3, r2
 801198e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011990:	e022      	b.n	80119d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011998:	d01e      	beq.n	80119d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801199a:	f7ff f937 	bl	8010c0c <HAL_GetTick>
 801199e:	4602      	mov	r2, r0
 80119a0:	69bb      	ldr	r3, [r7, #24]
 80119a2:	1ad3      	subs	r3, r2, r3
 80119a4:	683a      	ldr	r2, [r7, #0]
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d302      	bcc.n	80119b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d113      	bne.n	80119d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119b4:	f043 0220 	orr.w	r2, r3, #32
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	2220      	movs	r2, #32
 80119c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	2200      	movs	r2, #0
 80119c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	2200      	movs	r2, #0
 80119d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80119d4:	2301      	movs	r3, #1
 80119d6:	e00f      	b.n	80119f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	699a      	ldr	r2, [r3, #24]
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	4013      	ands	r3, r2
 80119e2:	68ba      	ldr	r2, [r7, #8]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	bf0c      	ite	eq
 80119e8:	2301      	moveq	r3, #1
 80119ea:	2300      	movne	r3, #0
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	461a      	mov	r2, r3
 80119f0:	79fb      	ldrb	r3, [r7, #7]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d0cd      	beq.n	8011992 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80119f6:	2300      	movs	r3, #0
}
 80119f8:	4618      	mov	r0, r3
 80119fa:	3710      	adds	r7, #16
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}

08011a00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b084      	sub	sp, #16
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	60f8      	str	r0, [r7, #12]
 8011a08:	60b9      	str	r1, [r7, #8]
 8011a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011a0c:	e02c      	b.n	8011a68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8011a0e:	687a      	ldr	r2, [r7, #4]
 8011a10:	68b9      	ldr	r1, [r7, #8]
 8011a12:	68f8      	ldr	r0, [r7, #12]
 8011a14:	f000 f8dc 	bl	8011bd0 <I2C_IsAcknowledgeFailed>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d001      	beq.n	8011a22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011a1e:	2301      	movs	r3, #1
 8011a20:	e02a      	b.n	8011a78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a28:	d01e      	beq.n	8011a68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011a2a:	f7ff f8ef 	bl	8010c0c <HAL_GetTick>
 8011a2e:	4602      	mov	r2, r0
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	1ad3      	subs	r3, r2, r3
 8011a34:	68ba      	ldr	r2, [r7, #8]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d302      	bcc.n	8011a40 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d113      	bne.n	8011a68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a44:	f043 0220 	orr.w	r2, r3, #32
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	2220      	movs	r2, #32
 8011a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	2200      	movs	r2, #0
 8011a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	2200      	movs	r2, #0
 8011a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8011a64:	2301      	movs	r3, #1
 8011a66:	e007      	b.n	8011a78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	699b      	ldr	r3, [r3, #24]
 8011a6e:	f003 0302 	and.w	r3, r3, #2
 8011a72:	2b02      	cmp	r3, #2
 8011a74:	d1cb      	bne.n	8011a0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011a76:	2300      	movs	r3, #0
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3710      	adds	r7, #16
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}

08011a80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b084      	sub	sp, #16
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	60f8      	str	r0, [r7, #12]
 8011a88:	60b9      	str	r1, [r7, #8]
 8011a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011a8c:	e028      	b.n	8011ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	68b9      	ldr	r1, [r7, #8]
 8011a92:	68f8      	ldr	r0, [r7, #12]
 8011a94:	f000 f89c 	bl	8011bd0 <I2C_IsAcknowledgeFailed>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d001      	beq.n	8011aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011a9e:	2301      	movs	r3, #1
 8011aa0:	e026      	b.n	8011af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011aa2:	f7ff f8b3 	bl	8010c0c <HAL_GetTick>
 8011aa6:	4602      	mov	r2, r0
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	1ad3      	subs	r3, r2, r3
 8011aac:	68ba      	ldr	r2, [r7, #8]
 8011aae:	429a      	cmp	r2, r3
 8011ab0:	d302      	bcc.n	8011ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d113      	bne.n	8011ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011abc:	f043 0220 	orr.w	r2, r3, #32
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	2220      	movs	r2, #32
 8011ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8011adc:	2301      	movs	r3, #1
 8011ade:	e007      	b.n	8011af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	699b      	ldr	r3, [r3, #24]
 8011ae6:	f003 0320 	and.w	r3, r3, #32
 8011aea:	2b20      	cmp	r3, #32
 8011aec:	d1cf      	bne.n	8011a8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8011aee:	2300      	movs	r3, #0
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	3710      	adds	r7, #16
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}

08011af8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b084      	sub	sp, #16
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	60f8      	str	r0, [r7, #12]
 8011b00:	60b9      	str	r1, [r7, #8]
 8011b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011b04:	e055      	b.n	8011bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8011b06:	687a      	ldr	r2, [r7, #4]
 8011b08:	68b9      	ldr	r1, [r7, #8]
 8011b0a:	68f8      	ldr	r0, [r7, #12]
 8011b0c:	f000 f860 	bl	8011bd0 <I2C_IsAcknowledgeFailed>
 8011b10:	4603      	mov	r3, r0
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d001      	beq.n	8011b1a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011b16:	2301      	movs	r3, #1
 8011b18:	e053      	b.n	8011bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	699b      	ldr	r3, [r3, #24]
 8011b20:	f003 0320 	and.w	r3, r3, #32
 8011b24:	2b20      	cmp	r3, #32
 8011b26:	d129      	bne.n	8011b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	699b      	ldr	r3, [r3, #24]
 8011b2e:	f003 0304 	and.w	r3, r3, #4
 8011b32:	2b04      	cmp	r3, #4
 8011b34:	d105      	bne.n	8011b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d001      	beq.n	8011b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8011b3e:	2300      	movs	r3, #0
 8011b40:	e03f      	b.n	8011bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	2220      	movs	r2, #32
 8011b48:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	6859      	ldr	r1, [r3, #4]
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	681a      	ldr	r2, [r3, #0]
 8011b54:	4b1d      	ldr	r3, [pc, #116]	; (8011bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8011b56:	400b      	ands	r3, r1
 8011b58:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	2220      	movs	r2, #32
 8011b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	2200      	movs	r2, #0
 8011b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8011b78:	2301      	movs	r3, #1
 8011b7a:	e022      	b.n	8011bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b7c:	f7ff f846 	bl	8010c0c <HAL_GetTick>
 8011b80:	4602      	mov	r2, r0
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	1ad3      	subs	r3, r2, r3
 8011b86:	68ba      	ldr	r2, [r7, #8]
 8011b88:	429a      	cmp	r2, r3
 8011b8a:	d302      	bcc.n	8011b92 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d10f      	bne.n	8011bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b96:	f043 0220 	orr.w	r2, r3, #32
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	2220      	movs	r2, #32
 8011ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	2200      	movs	r2, #0
 8011baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8011bae:	2301      	movs	r3, #1
 8011bb0:	e007      	b.n	8011bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	699b      	ldr	r3, [r3, #24]
 8011bb8:	f003 0304 	and.w	r3, r3, #4
 8011bbc:	2b04      	cmp	r3, #4
 8011bbe:	d1a2      	bne.n	8011b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8011bc0:	2300      	movs	r3, #0
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3710      	adds	r7, #16
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}
 8011bca:	bf00      	nop
 8011bcc:	fe00e800 	.word	0xfe00e800

08011bd0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b084      	sub	sp, #16
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	60f8      	str	r0, [r7, #12]
 8011bd8:	60b9      	str	r1, [r7, #8]
 8011bda:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	699b      	ldr	r3, [r3, #24]
 8011be2:	f003 0310 	and.w	r3, r3, #16
 8011be6:	2b10      	cmp	r3, #16
 8011be8:	d161      	bne.n	8011cae <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	685b      	ldr	r3, [r3, #4]
 8011bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011bf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011bf8:	d02b      	beq.n	8011c52 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	685a      	ldr	r2, [r3, #4]
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011c08:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011c0a:	e022      	b.n	8011c52 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8011c0c:	68bb      	ldr	r3, [r7, #8]
 8011c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c12:	d01e      	beq.n	8011c52 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011c14:	f7fe fffa 	bl	8010c0c <HAL_GetTick>
 8011c18:	4602      	mov	r2, r0
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	1ad3      	subs	r3, r2, r3
 8011c1e:	68ba      	ldr	r2, [r7, #8]
 8011c20:	429a      	cmp	r2, r3
 8011c22:	d302      	bcc.n	8011c2a <I2C_IsAcknowledgeFailed+0x5a>
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d113      	bne.n	8011c52 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c2e:	f043 0220 	orr.w	r2, r3, #32
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2220      	movs	r2, #32
 8011c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	2200      	movs	r2, #0
 8011c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8011c4e:	2301      	movs	r3, #1
 8011c50:	e02e      	b.n	8011cb0 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	699b      	ldr	r3, [r3, #24]
 8011c58:	f003 0320 	and.w	r3, r3, #32
 8011c5c:	2b20      	cmp	r3, #32
 8011c5e:	d1d5      	bne.n	8011c0c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	2210      	movs	r2, #16
 8011c66:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	2220      	movs	r2, #32
 8011c6e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011c70:	68f8      	ldr	r0, [r7, #12]
 8011c72:	f7ff fe61 	bl	8011938 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	6859      	ldr	r1, [r3, #4]
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	681a      	ldr	r2, [r3, #0]
 8011c80:	4b0d      	ldr	r3, [pc, #52]	; (8011cb8 <I2C_IsAcknowledgeFailed+0xe8>)
 8011c82:	400b      	ands	r3, r1
 8011c84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c8a:	f043 0204 	orr.w	r2, r3, #4
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	2220      	movs	r2, #32
 8011c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8011caa:	2301      	movs	r3, #1
 8011cac:	e000      	b.n	8011cb0 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8011cae:	2300      	movs	r3, #0
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	3710      	adds	r7, #16
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}
 8011cb8:	fe00e800 	.word	0xfe00e800

08011cbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	b085      	sub	sp, #20
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	60f8      	str	r0, [r7, #12]
 8011cc4:	607b      	str	r3, [r7, #4]
 8011cc6:	460b      	mov	r3, r1
 8011cc8:	817b      	strh	r3, [r7, #10]
 8011cca:	4613      	mov	r3, r2
 8011ccc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	685a      	ldr	r2, [r3, #4]
 8011cd4:	69bb      	ldr	r3, [r7, #24]
 8011cd6:	0d5b      	lsrs	r3, r3, #21
 8011cd8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8011cdc:	4b0d      	ldr	r3, [pc, #52]	; (8011d14 <I2C_TransferConfig+0x58>)
 8011cde:	430b      	orrs	r3, r1
 8011ce0:	43db      	mvns	r3, r3
 8011ce2:	ea02 0103 	and.w	r1, r2, r3
 8011ce6:	897b      	ldrh	r3, [r7, #10]
 8011ce8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8011cec:	7a7b      	ldrb	r3, [r7, #9]
 8011cee:	041b      	lsls	r3, r3, #16
 8011cf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011cf4:	431a      	orrs	r2, r3
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	431a      	orrs	r2, r3
 8011cfa:	69bb      	ldr	r3, [r7, #24]
 8011cfc:	431a      	orrs	r2, r3
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	430a      	orrs	r2, r1
 8011d04:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8011d06:	bf00      	nop
 8011d08:	3714      	adds	r7, #20
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d10:	4770      	bx	lr
 8011d12:	bf00      	nop
 8011d14:	03ff63ff 	.word	0x03ff63ff

08011d18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8011d18:	b480      	push	{r7}
 8011d1a:	b083      	sub	sp, #12
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011d28:	b2db      	uxtb	r3, r3
 8011d2a:	2b20      	cmp	r3, #32
 8011d2c:	d138      	bne.n	8011da0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d34:	2b01      	cmp	r3, #1
 8011d36:	d101      	bne.n	8011d3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8011d38:	2302      	movs	r3, #2
 8011d3a:	e032      	b.n	8011da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2201      	movs	r2, #1
 8011d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2224      	movs	r2, #36	; 0x24
 8011d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	681a      	ldr	r2, [r3, #0]
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	f022 0201 	bic.w	r2, r2, #1
 8011d5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	681a      	ldr	r2, [r3, #0]
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011d6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	6819      	ldr	r1, [r3, #0]
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	683a      	ldr	r2, [r7, #0]
 8011d78:	430a      	orrs	r2, r1
 8011d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	681a      	ldr	r2, [r3, #0]
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	f042 0201 	orr.w	r2, r2, #1
 8011d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2220      	movs	r2, #32
 8011d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2200      	movs	r2, #0
 8011d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	e000      	b.n	8011da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011da0:	2302      	movs	r3, #2
  }
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	370c      	adds	r7, #12
 8011da6:	46bd      	mov	sp, r7
 8011da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dac:	4770      	bx	lr

08011dae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8011dae:	b480      	push	{r7}
 8011db0:	b085      	sub	sp, #20
 8011db2:	af00      	add	r7, sp, #0
 8011db4:	6078      	str	r0, [r7, #4]
 8011db6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011dbe:	b2db      	uxtb	r3, r3
 8011dc0:	2b20      	cmp	r3, #32
 8011dc2:	d139      	bne.n	8011e38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011dca:	2b01      	cmp	r3, #1
 8011dcc:	d101      	bne.n	8011dd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8011dce:	2302      	movs	r3, #2
 8011dd0:	e033      	b.n	8011e3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	2201      	movs	r2, #1
 8011dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	2224      	movs	r2, #36	; 0x24
 8011dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	681a      	ldr	r2, [r3, #0]
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	f022 0201 	bic.w	r2, r2, #1
 8011df0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8011e00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	021b      	lsls	r3, r3, #8
 8011e06:	68fa      	ldr	r2, [r7, #12]
 8011e08:	4313      	orrs	r3, r2
 8011e0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	68fa      	ldr	r2, [r7, #12]
 8011e12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	681a      	ldr	r2, [r3, #0]
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	f042 0201 	orr.w	r2, r2, #1
 8011e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2220      	movs	r2, #32
 8011e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011e34:	2300      	movs	r3, #0
 8011e36:	e000      	b.n	8011e3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011e38:	2302      	movs	r3, #2
  }
}
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	3714      	adds	r7, #20
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e44:	4770      	bx	lr
	...

08011e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8011e4e:	af00      	add	r7, sp, #0
 8011e50:	1d3b      	adds	r3, r7, #4
 8011e52:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011e54:	1d3b      	adds	r3, r7, #4
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d102      	bne.n	8011e62 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	f000 bef4 	b.w	8012c4a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011e62:	1d3b      	adds	r3, r7, #4
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	f003 0301 	and.w	r3, r3, #1
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	f000 816a 	beq.w	8012146 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8011e72:	4bb3      	ldr	r3, [pc, #716]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011e74:	685b      	ldr	r3, [r3, #4]
 8011e76:	f003 030c 	and.w	r3, r3, #12
 8011e7a:	2b04      	cmp	r3, #4
 8011e7c:	d00c      	beq.n	8011e98 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8011e7e:	4bb0      	ldr	r3, [pc, #704]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	f003 030c 	and.w	r3, r3, #12
 8011e86:	2b08      	cmp	r3, #8
 8011e88:	d159      	bne.n	8011f3e <HAL_RCC_OscConfig+0xf6>
 8011e8a:	4bad      	ldr	r3, [pc, #692]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e96:	d152      	bne.n	8011f3e <HAL_RCC_OscConfig+0xf6>
 8011e98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011e9c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011ea0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8011ea4:	fa93 f3a3 	rbit	r3, r3
 8011ea8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8011eac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011eb0:	fab3 f383 	clz	r3, r3
 8011eb4:	b2db      	uxtb	r3, r3
 8011eb6:	095b      	lsrs	r3, r3, #5
 8011eb8:	b2db      	uxtb	r3, r3
 8011eba:	f043 0301 	orr.w	r3, r3, #1
 8011ebe:	b2db      	uxtb	r3, r3
 8011ec0:	2b01      	cmp	r3, #1
 8011ec2:	d102      	bne.n	8011eca <HAL_RCC_OscConfig+0x82>
 8011ec4:	4b9e      	ldr	r3, [pc, #632]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	e015      	b.n	8011ef6 <HAL_RCC_OscConfig+0xae>
 8011eca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011ece:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011ed2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8011ed6:	fa93 f3a3 	rbit	r3, r3
 8011eda:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8011ede:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011ee2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8011ee6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8011eea:	fa93 f3a3 	rbit	r3, r3
 8011eee:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8011ef2:	4b93      	ldr	r3, [pc, #588]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ef6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8011efa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8011efe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8011f02:	fa92 f2a2 	rbit	r2, r2
 8011f06:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8011f0a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8011f0e:	fab2 f282 	clz	r2, r2
 8011f12:	b2d2      	uxtb	r2, r2
 8011f14:	f042 0220 	orr.w	r2, r2, #32
 8011f18:	b2d2      	uxtb	r2, r2
 8011f1a:	f002 021f 	and.w	r2, r2, #31
 8011f1e:	2101      	movs	r1, #1
 8011f20:	fa01 f202 	lsl.w	r2, r1, r2
 8011f24:	4013      	ands	r3, r2
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	f000 810c 	beq.w	8012144 <HAL_RCC_OscConfig+0x2fc>
 8011f2c:	1d3b      	adds	r3, r7, #4
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	685b      	ldr	r3, [r3, #4]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	f040 8106 	bne.w	8012144 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8011f38:	2301      	movs	r3, #1
 8011f3a:	f000 be86 	b.w	8012c4a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011f3e:	1d3b      	adds	r3, r7, #4
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	685b      	ldr	r3, [r3, #4]
 8011f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011f48:	d106      	bne.n	8011f58 <HAL_RCC_OscConfig+0x110>
 8011f4a:	4b7d      	ldr	r3, [pc, #500]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	4a7c      	ldr	r2, [pc, #496]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011f54:	6013      	str	r3, [r2, #0]
 8011f56:	e030      	b.n	8011fba <HAL_RCC_OscConfig+0x172>
 8011f58:	1d3b      	adds	r3, r7, #4
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d10c      	bne.n	8011f7c <HAL_RCC_OscConfig+0x134>
 8011f62:	4b77      	ldr	r3, [pc, #476]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	4a76      	ldr	r2, [pc, #472]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011f6c:	6013      	str	r3, [r2, #0]
 8011f6e:	4b74      	ldr	r3, [pc, #464]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	4a73      	ldr	r2, [pc, #460]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011f78:	6013      	str	r3, [r2, #0]
 8011f7a:	e01e      	b.n	8011fba <HAL_RCC_OscConfig+0x172>
 8011f7c:	1d3b      	adds	r3, r7, #4
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	685b      	ldr	r3, [r3, #4]
 8011f82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011f86:	d10c      	bne.n	8011fa2 <HAL_RCC_OscConfig+0x15a>
 8011f88:	4b6d      	ldr	r3, [pc, #436]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	4a6c      	ldr	r2, [pc, #432]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011f8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011f92:	6013      	str	r3, [r2, #0]
 8011f94:	4b6a      	ldr	r3, [pc, #424]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	4a69      	ldr	r2, [pc, #420]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011f9e:	6013      	str	r3, [r2, #0]
 8011fa0:	e00b      	b.n	8011fba <HAL_RCC_OscConfig+0x172>
 8011fa2:	4b67      	ldr	r3, [pc, #412]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	4a66      	ldr	r2, [pc, #408]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011fac:	6013      	str	r3, [r2, #0]
 8011fae:	4b64      	ldr	r3, [pc, #400]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	4a63      	ldr	r2, [pc, #396]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011fb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011fb8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8011fba:	4b61      	ldr	r3, [pc, #388]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fbe:	f023 020f 	bic.w	r2, r3, #15
 8011fc2:	1d3b      	adds	r3, r7, #4
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	689b      	ldr	r3, [r3, #8]
 8011fc8:	495d      	ldr	r1, [pc, #372]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8011fca:	4313      	orrs	r3, r2
 8011fcc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011fce:	1d3b      	adds	r3, r7, #4
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d059      	beq.n	801208c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011fd8:	f7fe fe18 	bl	8010c0c <HAL_GetTick>
 8011fdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011fe0:	e00a      	b.n	8011ff8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011fe2:	f7fe fe13 	bl	8010c0c <HAL_GetTick>
 8011fe6:	4602      	mov	r2, r0
 8011fe8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8011fec:	1ad3      	subs	r3, r2, r3
 8011fee:	2b64      	cmp	r3, #100	; 0x64
 8011ff0:	d902      	bls.n	8011ff8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8011ff2:	2303      	movs	r3, #3
 8011ff4:	f000 be29 	b.w	8012c4a <HAL_RCC_OscConfig+0xe02>
 8011ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011ffc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012000:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8012004:	fa93 f3a3 	rbit	r3, r3
 8012008:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 801200c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012010:	fab3 f383 	clz	r3, r3
 8012014:	b2db      	uxtb	r3, r3
 8012016:	095b      	lsrs	r3, r3, #5
 8012018:	b2db      	uxtb	r3, r3
 801201a:	f043 0301 	orr.w	r3, r3, #1
 801201e:	b2db      	uxtb	r3, r3
 8012020:	2b01      	cmp	r3, #1
 8012022:	d102      	bne.n	801202a <HAL_RCC_OscConfig+0x1e2>
 8012024:	4b46      	ldr	r3, [pc, #280]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	e015      	b.n	8012056 <HAL_RCC_OscConfig+0x20e>
 801202a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801202e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012032:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8012036:	fa93 f3a3 	rbit	r3, r3
 801203a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 801203e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012042:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8012046:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801204a:	fa93 f3a3 	rbit	r3, r3
 801204e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8012052:	4b3b      	ldr	r3, [pc, #236]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8012054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012056:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801205a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 801205e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8012062:	fa92 f2a2 	rbit	r2, r2
 8012066:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 801206a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 801206e:	fab2 f282 	clz	r2, r2
 8012072:	b2d2      	uxtb	r2, r2
 8012074:	f042 0220 	orr.w	r2, r2, #32
 8012078:	b2d2      	uxtb	r2, r2
 801207a:	f002 021f 	and.w	r2, r2, #31
 801207e:	2101      	movs	r1, #1
 8012080:	fa01 f202 	lsl.w	r2, r1, r2
 8012084:	4013      	ands	r3, r2
 8012086:	2b00      	cmp	r3, #0
 8012088:	d0ab      	beq.n	8011fe2 <HAL_RCC_OscConfig+0x19a>
 801208a:	e05c      	b.n	8012146 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801208c:	f7fe fdbe 	bl	8010c0c <HAL_GetTick>
 8012090:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012094:	e00a      	b.n	80120ac <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012096:	f7fe fdb9 	bl	8010c0c <HAL_GetTick>
 801209a:	4602      	mov	r2, r0
 801209c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80120a0:	1ad3      	subs	r3, r2, r3
 80120a2:	2b64      	cmp	r3, #100	; 0x64
 80120a4:	d902      	bls.n	80120ac <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80120a6:	2303      	movs	r3, #3
 80120a8:	f000 bdcf 	b.w	8012c4a <HAL_RCC_OscConfig+0xe02>
 80120ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80120b0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80120b4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80120b8:	fa93 f3a3 	rbit	r3, r3
 80120bc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80120c0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80120c4:	fab3 f383 	clz	r3, r3
 80120c8:	b2db      	uxtb	r3, r3
 80120ca:	095b      	lsrs	r3, r3, #5
 80120cc:	b2db      	uxtb	r3, r3
 80120ce:	f043 0301 	orr.w	r3, r3, #1
 80120d2:	b2db      	uxtb	r3, r3
 80120d4:	2b01      	cmp	r3, #1
 80120d6:	d102      	bne.n	80120de <HAL_RCC_OscConfig+0x296>
 80120d8:	4b19      	ldr	r3, [pc, #100]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	e015      	b.n	801210a <HAL_RCC_OscConfig+0x2c2>
 80120de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80120e2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80120e6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80120ea:	fa93 f3a3 	rbit	r3, r3
 80120ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80120f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80120f6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80120fa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80120fe:	fa93 f3a3 	rbit	r3, r3
 8012102:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8012106:	4b0e      	ldr	r3, [pc, #56]	; (8012140 <HAL_RCC_OscConfig+0x2f8>)
 8012108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801210a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801210e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8012112:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8012116:	fa92 f2a2 	rbit	r2, r2
 801211a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 801211e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8012122:	fab2 f282 	clz	r2, r2
 8012126:	b2d2      	uxtb	r2, r2
 8012128:	f042 0220 	orr.w	r2, r2, #32
 801212c:	b2d2      	uxtb	r2, r2
 801212e:	f002 021f 	and.w	r2, r2, #31
 8012132:	2101      	movs	r1, #1
 8012134:	fa01 f202 	lsl.w	r2, r1, r2
 8012138:	4013      	ands	r3, r2
 801213a:	2b00      	cmp	r3, #0
 801213c:	d1ab      	bne.n	8012096 <HAL_RCC_OscConfig+0x24e>
 801213e:	e002      	b.n	8012146 <HAL_RCC_OscConfig+0x2fe>
 8012140:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012146:	1d3b      	adds	r3, r7, #4
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	f003 0302 	and.w	r3, r3, #2
 8012150:	2b00      	cmp	r3, #0
 8012152:	f000 816f 	beq.w	8012434 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8012156:	4bd0      	ldr	r3, [pc, #832]	; (8012498 <HAL_RCC_OscConfig+0x650>)
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	f003 030c 	and.w	r3, r3, #12
 801215e:	2b00      	cmp	r3, #0
 8012160:	d00b      	beq.n	801217a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8012162:	4bcd      	ldr	r3, [pc, #820]	; (8012498 <HAL_RCC_OscConfig+0x650>)
 8012164:	685b      	ldr	r3, [r3, #4]
 8012166:	f003 030c 	and.w	r3, r3, #12
 801216a:	2b08      	cmp	r3, #8
 801216c:	d16c      	bne.n	8012248 <HAL_RCC_OscConfig+0x400>
 801216e:	4bca      	ldr	r3, [pc, #808]	; (8012498 <HAL_RCC_OscConfig+0x650>)
 8012170:	685b      	ldr	r3, [r3, #4]
 8012172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012176:	2b00      	cmp	r3, #0
 8012178:	d166      	bne.n	8012248 <HAL_RCC_OscConfig+0x400>
 801217a:	2302      	movs	r3, #2
 801217c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012180:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8012184:	fa93 f3a3 	rbit	r3, r3
 8012188:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 801218c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012190:	fab3 f383 	clz	r3, r3
 8012194:	b2db      	uxtb	r3, r3
 8012196:	095b      	lsrs	r3, r3, #5
 8012198:	b2db      	uxtb	r3, r3
 801219a:	f043 0301 	orr.w	r3, r3, #1
 801219e:	b2db      	uxtb	r3, r3
 80121a0:	2b01      	cmp	r3, #1
 80121a2:	d102      	bne.n	80121aa <HAL_RCC_OscConfig+0x362>
 80121a4:	4bbc      	ldr	r3, [pc, #752]	; (8012498 <HAL_RCC_OscConfig+0x650>)
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	e013      	b.n	80121d2 <HAL_RCC_OscConfig+0x38a>
 80121aa:	2302      	movs	r3, #2
 80121ac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80121b0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80121b4:	fa93 f3a3 	rbit	r3, r3
 80121b8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80121bc:	2302      	movs	r3, #2
 80121be:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80121c2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80121c6:	fa93 f3a3 	rbit	r3, r3
 80121ca:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80121ce:	4bb2      	ldr	r3, [pc, #712]	; (8012498 <HAL_RCC_OscConfig+0x650>)
 80121d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121d2:	2202      	movs	r2, #2
 80121d4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80121d8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80121dc:	fa92 f2a2 	rbit	r2, r2
 80121e0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80121e4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80121e8:	fab2 f282 	clz	r2, r2
 80121ec:	b2d2      	uxtb	r2, r2
 80121ee:	f042 0220 	orr.w	r2, r2, #32
 80121f2:	b2d2      	uxtb	r2, r2
 80121f4:	f002 021f 	and.w	r2, r2, #31
 80121f8:	2101      	movs	r1, #1
 80121fa:	fa01 f202 	lsl.w	r2, r1, r2
 80121fe:	4013      	ands	r3, r2
 8012200:	2b00      	cmp	r3, #0
 8012202:	d007      	beq.n	8012214 <HAL_RCC_OscConfig+0x3cc>
 8012204:	1d3b      	adds	r3, r7, #4
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	691b      	ldr	r3, [r3, #16]
 801220a:	2b01      	cmp	r3, #1
 801220c:	d002      	beq.n	8012214 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 801220e:	2301      	movs	r3, #1
 8012210:	f000 bd1b 	b.w	8012c4a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012214:	4ba0      	ldr	r3, [pc, #640]	; (8012498 <HAL_RCC_OscConfig+0x650>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801221c:	1d3b      	adds	r3, r7, #4
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	695b      	ldr	r3, [r3, #20]
 8012222:	21f8      	movs	r1, #248	; 0xf8
 8012224:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012228:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 801222c:	fa91 f1a1 	rbit	r1, r1
 8012230:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8012234:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8012238:	fab1 f181 	clz	r1, r1
 801223c:	b2c9      	uxtb	r1, r1
 801223e:	408b      	lsls	r3, r1
 8012240:	4995      	ldr	r1, [pc, #596]	; (8012498 <HAL_RCC_OscConfig+0x650>)
 8012242:	4313      	orrs	r3, r2
 8012244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012246:	e0f5      	b.n	8012434 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8012248:	1d3b      	adds	r3, r7, #4
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	691b      	ldr	r3, [r3, #16]
 801224e:	2b00      	cmp	r3, #0
 8012250:	f000 8085 	beq.w	801235e <HAL_RCC_OscConfig+0x516>
 8012254:	2301      	movs	r3, #1
 8012256:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801225a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801225e:	fa93 f3a3 	rbit	r3, r3
 8012262:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8012266:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801226a:	fab3 f383 	clz	r3, r3
 801226e:	b2db      	uxtb	r3, r3
 8012270:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8012274:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8012278:	009b      	lsls	r3, r3, #2
 801227a:	461a      	mov	r2, r3
 801227c:	2301      	movs	r3, #1
 801227e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012280:	f7fe fcc4 	bl	8010c0c <HAL_GetTick>
 8012284:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012288:	e00a      	b.n	80122a0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801228a:	f7fe fcbf 	bl	8010c0c <HAL_GetTick>
 801228e:	4602      	mov	r2, r0
 8012290:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8012294:	1ad3      	subs	r3, r2, r3
 8012296:	2b02      	cmp	r3, #2
 8012298:	d902      	bls.n	80122a0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 801229a:	2303      	movs	r3, #3
 801229c:	f000 bcd5 	b.w	8012c4a <HAL_RCC_OscConfig+0xe02>
 80122a0:	2302      	movs	r3, #2
 80122a2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80122a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80122aa:	fa93 f3a3 	rbit	r3, r3
 80122ae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80122b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80122b6:	fab3 f383 	clz	r3, r3
 80122ba:	b2db      	uxtb	r3, r3
 80122bc:	095b      	lsrs	r3, r3, #5
 80122be:	b2db      	uxtb	r3, r3
 80122c0:	f043 0301 	orr.w	r3, r3, #1
 80122c4:	b2db      	uxtb	r3, r3
 80122c6:	2b01      	cmp	r3, #1
 80122c8:	d102      	bne.n	80122d0 <HAL_RCC_OscConfig+0x488>
 80122ca:	4b73      	ldr	r3, [pc, #460]	; (8012498 <HAL_RCC_OscConfig+0x650>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	e013      	b.n	80122f8 <HAL_RCC_OscConfig+0x4b0>
 80122d0:	2302      	movs	r3, #2
 80122d2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80122d6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80122da:	fa93 f3a3 	rbit	r3, r3
 80122de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80122e2:	2302      	movs	r3, #2
 80122e4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80122e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80122ec:	fa93 f3a3 	rbit	r3, r3
 80122f0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80122f4:	4b68      	ldr	r3, [pc, #416]	; (8012498 <HAL_RCC_OscConfig+0x650>)
 80122f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122f8:	2202      	movs	r2, #2
 80122fa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80122fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8012302:	fa92 f2a2 	rbit	r2, r2
 8012306:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 801230a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801230e:	fab2 f282 	clz	r2, r2
 8012312:	b2d2      	uxtb	r2, r2
 8012314:	f042 0220 	orr.w	r2, r2, #32
 8012318:	b2d2      	uxtb	r2, r2
 801231a:	f002 021f 	and.w	r2, r2, #31
 801231e:	2101      	movs	r1, #1
 8012320:	fa01 f202 	lsl.w	r2, r1, r2
 8012324:	4013      	ands	r3, r2
 8012326:	2b00      	cmp	r3, #0
 8012328:	d0af      	beq.n	801228a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801232a:	4b5b      	ldr	r3, [pc, #364]	; (8012498 <HAL_RCC_OscConfig+0x650>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012332:	1d3b      	adds	r3, r7, #4
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	695b      	ldr	r3, [r3, #20]
 8012338:	21f8      	movs	r1, #248	; 0xf8
 801233a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801233e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8012342:	fa91 f1a1 	rbit	r1, r1
 8012346:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 801234a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 801234e:	fab1 f181 	clz	r1, r1
 8012352:	b2c9      	uxtb	r1, r1
 8012354:	408b      	lsls	r3, r1
 8012356:	4950      	ldr	r1, [pc, #320]	; (8012498 <HAL_RCC_OscConfig+0x650>)
 8012358:	4313      	orrs	r3, r2
 801235a:	600b      	str	r3, [r1, #0]
 801235c:	e06a      	b.n	8012434 <HAL_RCC_OscConfig+0x5ec>
 801235e:	2301      	movs	r3, #1
 8012360:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012364:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012368:	fa93 f3a3 	rbit	r3, r3
 801236c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8012370:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012374:	fab3 f383 	clz	r3, r3
 8012378:	b2db      	uxtb	r3, r3
 801237a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 801237e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8012382:	009b      	lsls	r3, r3, #2
 8012384:	461a      	mov	r2, r3
 8012386:	2300      	movs	r3, #0
 8012388:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801238a:	f7fe fc3f 	bl	8010c0c <HAL_GetTick>
 801238e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012392:	e00a      	b.n	80123aa <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012394:	f7fe fc3a 	bl	8010c0c <HAL_GetTick>
 8012398:	4602      	mov	r2, r0
 801239a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801239e:	1ad3      	subs	r3, r2, r3
 80123a0:	2b02      	cmp	r3, #2
 80123a2:	d902      	bls.n	80123aa <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80123a4:	2303      	movs	r3, #3
 80123a6:	f000 bc50 	b.w	8012c4a <HAL_RCC_OscConfig+0xe02>
 80123aa:	2302      	movs	r3, #2
 80123ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80123b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80123b4:	fa93 f3a3 	rbit	r3, r3
 80123b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80123bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80123c0:	fab3 f383 	clz	r3, r3
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	095b      	lsrs	r3, r3, #5
 80123c8:	b2db      	uxtb	r3, r3
 80123ca:	f043 0301 	orr.w	r3, r3, #1
 80123ce:	b2db      	uxtb	r3, r3
 80123d0:	2b01      	cmp	r3, #1
 80123d2:	d102      	bne.n	80123da <HAL_RCC_OscConfig+0x592>
 80123d4:	4b30      	ldr	r3, [pc, #192]	; (8012498 <HAL_RCC_OscConfig+0x650>)
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	e013      	b.n	8012402 <HAL_RCC_OscConfig+0x5ba>
 80123da:	2302      	movs	r3, #2
 80123dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80123e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80123e4:	fa93 f3a3 	rbit	r3, r3
 80123e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80123ec:	2302      	movs	r3, #2
 80123ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80123f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80123f6:	fa93 f3a3 	rbit	r3, r3
 80123fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80123fe:	4b26      	ldr	r3, [pc, #152]	; (8012498 <HAL_RCC_OscConfig+0x650>)
 8012400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012402:	2202      	movs	r2, #2
 8012404:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8012408:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801240c:	fa92 f2a2 	rbit	r2, r2
 8012410:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8012414:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8012418:	fab2 f282 	clz	r2, r2
 801241c:	b2d2      	uxtb	r2, r2
 801241e:	f042 0220 	orr.w	r2, r2, #32
 8012422:	b2d2      	uxtb	r2, r2
 8012424:	f002 021f 	and.w	r2, r2, #31
 8012428:	2101      	movs	r1, #1
 801242a:	fa01 f202 	lsl.w	r2, r1, r2
 801242e:	4013      	ands	r3, r2
 8012430:	2b00      	cmp	r3, #0
 8012432:	d1af      	bne.n	8012394 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012434:	1d3b      	adds	r3, r7, #4
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	f003 0308 	and.w	r3, r3, #8
 801243e:	2b00      	cmp	r3, #0
 8012440:	f000 80da 	beq.w	80125f8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8012444:	1d3b      	adds	r3, r7, #4
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	699b      	ldr	r3, [r3, #24]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d069      	beq.n	8012522 <HAL_RCC_OscConfig+0x6da>
 801244e:	2301      	movs	r3, #1
 8012450:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012454:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8012458:	fa93 f3a3 	rbit	r3, r3
 801245c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8012460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012464:	fab3 f383 	clz	r3, r3
 8012468:	b2db      	uxtb	r3, r3
 801246a:	461a      	mov	r2, r3
 801246c:	4b0b      	ldr	r3, [pc, #44]	; (801249c <HAL_RCC_OscConfig+0x654>)
 801246e:	4413      	add	r3, r2
 8012470:	009b      	lsls	r3, r3, #2
 8012472:	461a      	mov	r2, r3
 8012474:	2301      	movs	r3, #1
 8012476:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012478:	f7fe fbc8 	bl	8010c0c <HAL_GetTick>
 801247c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012480:	e00e      	b.n	80124a0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012482:	f7fe fbc3 	bl	8010c0c <HAL_GetTick>
 8012486:	4602      	mov	r2, r0
 8012488:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801248c:	1ad3      	subs	r3, r2, r3
 801248e:	2b02      	cmp	r3, #2
 8012490:	d906      	bls.n	80124a0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8012492:	2303      	movs	r3, #3
 8012494:	e3d9      	b.n	8012c4a <HAL_RCC_OscConfig+0xe02>
 8012496:	bf00      	nop
 8012498:	40021000 	.word	0x40021000
 801249c:	10908120 	.word	0x10908120
 80124a0:	2302      	movs	r3, #2
 80124a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80124a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80124aa:	fa93 f3a3 	rbit	r3, r3
 80124ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80124b2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80124b6:	2202      	movs	r2, #2
 80124b8:	601a      	str	r2, [r3, #0]
 80124ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	fa93 f2a3 	rbit	r2, r3
 80124c4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80124c8:	601a      	str	r2, [r3, #0]
 80124ca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80124ce:	2202      	movs	r2, #2
 80124d0:	601a      	str	r2, [r3, #0]
 80124d2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	fa93 f2a3 	rbit	r2, r3
 80124dc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80124e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80124e2:	4ba5      	ldr	r3, [pc, #660]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 80124e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80124ea:	2102      	movs	r1, #2
 80124ec:	6019      	str	r1, [r3, #0]
 80124ee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	fa93 f1a3 	rbit	r1, r3
 80124f8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80124fc:	6019      	str	r1, [r3, #0]
  return result;
 80124fe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	fab3 f383 	clz	r3, r3
 8012508:	b2db      	uxtb	r3, r3
 801250a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801250e:	b2db      	uxtb	r3, r3
 8012510:	f003 031f 	and.w	r3, r3, #31
 8012514:	2101      	movs	r1, #1
 8012516:	fa01 f303 	lsl.w	r3, r1, r3
 801251a:	4013      	ands	r3, r2
 801251c:	2b00      	cmp	r3, #0
 801251e:	d0b0      	beq.n	8012482 <HAL_RCC_OscConfig+0x63a>
 8012520:	e06a      	b.n	80125f8 <HAL_RCC_OscConfig+0x7b0>
 8012522:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8012526:	2201      	movs	r2, #1
 8012528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801252a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	fa93 f2a3 	rbit	r2, r3
 8012534:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012538:	601a      	str	r2, [r3, #0]
  return result;
 801253a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801253e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012540:	fab3 f383 	clz	r3, r3
 8012544:	b2db      	uxtb	r3, r3
 8012546:	461a      	mov	r2, r3
 8012548:	4b8c      	ldr	r3, [pc, #560]	; (801277c <HAL_RCC_OscConfig+0x934>)
 801254a:	4413      	add	r3, r2
 801254c:	009b      	lsls	r3, r3, #2
 801254e:	461a      	mov	r2, r3
 8012550:	2300      	movs	r3, #0
 8012552:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012554:	f7fe fb5a 	bl	8010c0c <HAL_GetTick>
 8012558:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801255c:	e009      	b.n	8012572 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801255e:	f7fe fb55 	bl	8010c0c <HAL_GetTick>
 8012562:	4602      	mov	r2, r0
 8012564:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8012568:	1ad3      	subs	r3, r2, r3
 801256a:	2b02      	cmp	r3, #2
 801256c:	d901      	bls.n	8012572 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 801256e:	2303      	movs	r3, #3
 8012570:	e36b      	b.n	8012c4a <HAL_RCC_OscConfig+0xe02>
 8012572:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8012576:	2202      	movs	r2, #2
 8012578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801257a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	fa93 f2a3 	rbit	r2, r3
 8012584:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8012588:	601a      	str	r2, [r3, #0]
 801258a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801258e:	2202      	movs	r2, #2
 8012590:	601a      	str	r2, [r3, #0]
 8012592:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	fa93 f2a3 	rbit	r2, r3
 801259c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80125a0:	601a      	str	r2, [r3, #0]
 80125a2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80125a6:	2202      	movs	r2, #2
 80125a8:	601a      	str	r2, [r3, #0]
 80125aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	fa93 f2a3 	rbit	r2, r3
 80125b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80125b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80125ba:	4b6f      	ldr	r3, [pc, #444]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 80125bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80125be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80125c2:	2102      	movs	r1, #2
 80125c4:	6019      	str	r1, [r3, #0]
 80125c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	fa93 f1a3 	rbit	r1, r3
 80125d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80125d4:	6019      	str	r1, [r3, #0]
  return result;
 80125d6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	fab3 f383 	clz	r3, r3
 80125e0:	b2db      	uxtb	r3, r3
 80125e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80125e6:	b2db      	uxtb	r3, r3
 80125e8:	f003 031f 	and.w	r3, r3, #31
 80125ec:	2101      	movs	r1, #1
 80125ee:	fa01 f303 	lsl.w	r3, r1, r3
 80125f2:	4013      	ands	r3, r2
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d1b2      	bne.n	801255e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80125f8:	1d3b      	adds	r3, r7, #4
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	f003 0304 	and.w	r3, r3, #4
 8012602:	2b00      	cmp	r3, #0
 8012604:	f000 8158 	beq.w	80128b8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012608:	2300      	movs	r3, #0
 801260a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801260e:	4b5a      	ldr	r3, [pc, #360]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 8012610:	69db      	ldr	r3, [r3, #28]
 8012612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012616:	2b00      	cmp	r3, #0
 8012618:	d112      	bne.n	8012640 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801261a:	4b57      	ldr	r3, [pc, #348]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 801261c:	69db      	ldr	r3, [r3, #28]
 801261e:	4a56      	ldr	r2, [pc, #344]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 8012620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012624:	61d3      	str	r3, [r2, #28]
 8012626:	4b54      	ldr	r3, [pc, #336]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 8012628:	69db      	ldr	r3, [r3, #28]
 801262a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 801262e:	f107 0308 	add.w	r3, r7, #8
 8012632:	601a      	str	r2, [r3, #0]
 8012634:	f107 0308 	add.w	r3, r7, #8
 8012638:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 801263a:	2301      	movs	r3, #1
 801263c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012640:	4b4f      	ldr	r3, [pc, #316]	; (8012780 <HAL_RCC_OscConfig+0x938>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012648:	2b00      	cmp	r3, #0
 801264a:	d11a      	bne.n	8012682 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801264c:	4b4c      	ldr	r3, [pc, #304]	; (8012780 <HAL_RCC_OscConfig+0x938>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	4a4b      	ldr	r2, [pc, #300]	; (8012780 <HAL_RCC_OscConfig+0x938>)
 8012652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012656:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012658:	f7fe fad8 	bl	8010c0c <HAL_GetTick>
 801265c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012660:	e009      	b.n	8012676 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012662:	f7fe fad3 	bl	8010c0c <HAL_GetTick>
 8012666:	4602      	mov	r2, r0
 8012668:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801266c:	1ad3      	subs	r3, r2, r3
 801266e:	2b64      	cmp	r3, #100	; 0x64
 8012670:	d901      	bls.n	8012676 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8012672:	2303      	movs	r3, #3
 8012674:	e2e9      	b.n	8012c4a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012676:	4b42      	ldr	r3, [pc, #264]	; (8012780 <HAL_RCC_OscConfig+0x938>)
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801267e:	2b00      	cmp	r3, #0
 8012680:	d0ef      	beq.n	8012662 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012682:	1d3b      	adds	r3, r7, #4
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	68db      	ldr	r3, [r3, #12]
 8012688:	2b01      	cmp	r3, #1
 801268a:	d106      	bne.n	801269a <HAL_RCC_OscConfig+0x852>
 801268c:	4b3a      	ldr	r3, [pc, #232]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 801268e:	6a1b      	ldr	r3, [r3, #32]
 8012690:	4a39      	ldr	r2, [pc, #228]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 8012692:	f043 0301 	orr.w	r3, r3, #1
 8012696:	6213      	str	r3, [r2, #32]
 8012698:	e02f      	b.n	80126fa <HAL_RCC_OscConfig+0x8b2>
 801269a:	1d3b      	adds	r3, r7, #4
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	68db      	ldr	r3, [r3, #12]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d10c      	bne.n	80126be <HAL_RCC_OscConfig+0x876>
 80126a4:	4b34      	ldr	r3, [pc, #208]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 80126a6:	6a1b      	ldr	r3, [r3, #32]
 80126a8:	4a33      	ldr	r2, [pc, #204]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 80126aa:	f023 0301 	bic.w	r3, r3, #1
 80126ae:	6213      	str	r3, [r2, #32]
 80126b0:	4b31      	ldr	r3, [pc, #196]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 80126b2:	6a1b      	ldr	r3, [r3, #32]
 80126b4:	4a30      	ldr	r2, [pc, #192]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 80126b6:	f023 0304 	bic.w	r3, r3, #4
 80126ba:	6213      	str	r3, [r2, #32]
 80126bc:	e01d      	b.n	80126fa <HAL_RCC_OscConfig+0x8b2>
 80126be:	1d3b      	adds	r3, r7, #4
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	68db      	ldr	r3, [r3, #12]
 80126c4:	2b05      	cmp	r3, #5
 80126c6:	d10c      	bne.n	80126e2 <HAL_RCC_OscConfig+0x89a>
 80126c8:	4b2b      	ldr	r3, [pc, #172]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 80126ca:	6a1b      	ldr	r3, [r3, #32]
 80126cc:	4a2a      	ldr	r2, [pc, #168]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 80126ce:	f043 0304 	orr.w	r3, r3, #4
 80126d2:	6213      	str	r3, [r2, #32]
 80126d4:	4b28      	ldr	r3, [pc, #160]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 80126d6:	6a1b      	ldr	r3, [r3, #32]
 80126d8:	4a27      	ldr	r2, [pc, #156]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 80126da:	f043 0301 	orr.w	r3, r3, #1
 80126de:	6213      	str	r3, [r2, #32]
 80126e0:	e00b      	b.n	80126fa <HAL_RCC_OscConfig+0x8b2>
 80126e2:	4b25      	ldr	r3, [pc, #148]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 80126e4:	6a1b      	ldr	r3, [r3, #32]
 80126e6:	4a24      	ldr	r2, [pc, #144]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 80126e8:	f023 0301 	bic.w	r3, r3, #1
 80126ec:	6213      	str	r3, [r2, #32]
 80126ee:	4b22      	ldr	r3, [pc, #136]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 80126f0:	6a1b      	ldr	r3, [r3, #32]
 80126f2:	4a21      	ldr	r2, [pc, #132]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 80126f4:	f023 0304 	bic.w	r3, r3, #4
 80126f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80126fa:	1d3b      	adds	r3, r7, #4
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	68db      	ldr	r3, [r3, #12]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d06b      	beq.n	80127dc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012704:	f7fe fa82 	bl	8010c0c <HAL_GetTick>
 8012708:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801270c:	e00b      	b.n	8012726 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801270e:	f7fe fa7d 	bl	8010c0c <HAL_GetTick>
 8012712:	4602      	mov	r2, r0
 8012714:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8012718:	1ad3      	subs	r3, r2, r3
 801271a:	f241 3288 	movw	r2, #5000	; 0x1388
 801271e:	4293      	cmp	r3, r2
 8012720:	d901      	bls.n	8012726 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8012722:	2303      	movs	r3, #3
 8012724:	e291      	b.n	8012c4a <HAL_RCC_OscConfig+0xe02>
 8012726:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801272a:	2202      	movs	r2, #2
 801272c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801272e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	fa93 f2a3 	rbit	r2, r3
 8012738:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801273c:	601a      	str	r2, [r3, #0]
 801273e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8012742:	2202      	movs	r2, #2
 8012744:	601a      	str	r2, [r3, #0]
 8012746:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	fa93 f2a3 	rbit	r2, r3
 8012750:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012754:	601a      	str	r2, [r3, #0]
  return result;
 8012756:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801275a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801275c:	fab3 f383 	clz	r3, r3
 8012760:	b2db      	uxtb	r3, r3
 8012762:	095b      	lsrs	r3, r3, #5
 8012764:	b2db      	uxtb	r3, r3
 8012766:	f043 0302 	orr.w	r3, r3, #2
 801276a:	b2db      	uxtb	r3, r3
 801276c:	2b02      	cmp	r3, #2
 801276e:	d109      	bne.n	8012784 <HAL_RCC_OscConfig+0x93c>
 8012770:	4b01      	ldr	r3, [pc, #4]	; (8012778 <HAL_RCC_OscConfig+0x930>)
 8012772:	6a1b      	ldr	r3, [r3, #32]
 8012774:	e014      	b.n	80127a0 <HAL_RCC_OscConfig+0x958>
 8012776:	bf00      	nop
 8012778:	40021000 	.word	0x40021000
 801277c:	10908120 	.word	0x10908120
 8012780:	40007000 	.word	0x40007000
 8012784:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012788:	2202      	movs	r2, #2
 801278a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801278c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	fa93 f2a3 	rbit	r2, r3
 8012796:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801279a:	601a      	str	r2, [r3, #0]
 801279c:	4bbb      	ldr	r3, [pc, #748]	; (8012a8c <HAL_RCC_OscConfig+0xc44>)
 801279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127a0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80127a4:	2102      	movs	r1, #2
 80127a6:	6011      	str	r1, [r2, #0]
 80127a8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80127ac:	6812      	ldr	r2, [r2, #0]
 80127ae:	fa92 f1a2 	rbit	r1, r2
 80127b2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80127b6:	6011      	str	r1, [r2, #0]
  return result;
 80127b8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80127bc:	6812      	ldr	r2, [r2, #0]
 80127be:	fab2 f282 	clz	r2, r2
 80127c2:	b2d2      	uxtb	r2, r2
 80127c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80127c8:	b2d2      	uxtb	r2, r2
 80127ca:	f002 021f 	and.w	r2, r2, #31
 80127ce:	2101      	movs	r1, #1
 80127d0:	fa01 f202 	lsl.w	r2, r1, r2
 80127d4:	4013      	ands	r3, r2
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d099      	beq.n	801270e <HAL_RCC_OscConfig+0x8c6>
 80127da:	e063      	b.n	80128a4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80127dc:	f7fe fa16 	bl	8010c0c <HAL_GetTick>
 80127e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80127e4:	e00b      	b.n	80127fe <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80127e6:	f7fe fa11 	bl	8010c0c <HAL_GetTick>
 80127ea:	4602      	mov	r2, r0
 80127ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80127f0:	1ad3      	subs	r3, r2, r3
 80127f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80127f6:	4293      	cmp	r3, r2
 80127f8:	d901      	bls.n	80127fe <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80127fa:	2303      	movs	r3, #3
 80127fc:	e225      	b.n	8012c4a <HAL_RCC_OscConfig+0xe02>
 80127fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012802:	2202      	movs	r2, #2
 8012804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012806:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	fa93 f2a3 	rbit	r2, r3
 8012810:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012814:	601a      	str	r2, [r3, #0]
 8012816:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801281a:	2202      	movs	r2, #2
 801281c:	601a      	str	r2, [r3, #0]
 801281e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	fa93 f2a3 	rbit	r2, r3
 8012828:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801282c:	601a      	str	r2, [r3, #0]
  return result;
 801282e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8012832:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012834:	fab3 f383 	clz	r3, r3
 8012838:	b2db      	uxtb	r3, r3
 801283a:	095b      	lsrs	r3, r3, #5
 801283c:	b2db      	uxtb	r3, r3
 801283e:	f043 0302 	orr.w	r3, r3, #2
 8012842:	b2db      	uxtb	r3, r3
 8012844:	2b02      	cmp	r3, #2
 8012846:	d102      	bne.n	801284e <HAL_RCC_OscConfig+0xa06>
 8012848:	4b90      	ldr	r3, [pc, #576]	; (8012a8c <HAL_RCC_OscConfig+0xc44>)
 801284a:	6a1b      	ldr	r3, [r3, #32]
 801284c:	e00d      	b.n	801286a <HAL_RCC_OscConfig+0xa22>
 801284e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8012852:	2202      	movs	r2, #2
 8012854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012856:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	fa93 f2a3 	rbit	r2, r3
 8012860:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012864:	601a      	str	r2, [r3, #0]
 8012866:	4b89      	ldr	r3, [pc, #548]	; (8012a8c <HAL_RCC_OscConfig+0xc44>)
 8012868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801286a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801286e:	2102      	movs	r1, #2
 8012870:	6011      	str	r1, [r2, #0]
 8012872:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8012876:	6812      	ldr	r2, [r2, #0]
 8012878:	fa92 f1a2 	rbit	r1, r2
 801287c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8012880:	6011      	str	r1, [r2, #0]
  return result;
 8012882:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8012886:	6812      	ldr	r2, [r2, #0]
 8012888:	fab2 f282 	clz	r2, r2
 801288c:	b2d2      	uxtb	r2, r2
 801288e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012892:	b2d2      	uxtb	r2, r2
 8012894:	f002 021f 	and.w	r2, r2, #31
 8012898:	2101      	movs	r1, #1
 801289a:	fa01 f202 	lsl.w	r2, r1, r2
 801289e:	4013      	ands	r3, r2
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d1a0      	bne.n	80127e6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80128a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80128a8:	2b01      	cmp	r3, #1
 80128aa:	d105      	bne.n	80128b8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80128ac:	4b77      	ldr	r3, [pc, #476]	; (8012a8c <HAL_RCC_OscConfig+0xc44>)
 80128ae:	69db      	ldr	r3, [r3, #28]
 80128b0:	4a76      	ldr	r2, [pc, #472]	; (8012a8c <HAL_RCC_OscConfig+0xc44>)
 80128b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80128b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80128b8:	1d3b      	adds	r3, r7, #4
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	69db      	ldr	r3, [r3, #28]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	f000 81c2 	beq.w	8012c48 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80128c4:	4b71      	ldr	r3, [pc, #452]	; (8012a8c <HAL_RCC_OscConfig+0xc44>)
 80128c6:	685b      	ldr	r3, [r3, #4]
 80128c8:	f003 030c 	and.w	r3, r3, #12
 80128cc:	2b08      	cmp	r3, #8
 80128ce:	f000 819c 	beq.w	8012c0a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80128d2:	1d3b      	adds	r3, r7, #4
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	69db      	ldr	r3, [r3, #28]
 80128d8:	2b02      	cmp	r3, #2
 80128da:	f040 8114 	bne.w	8012b06 <HAL_RCC_OscConfig+0xcbe>
 80128de:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80128e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80128e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80128e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	fa93 f2a3 	rbit	r2, r3
 80128f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80128f6:	601a      	str	r2, [r3, #0]
  return result;
 80128f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80128fc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80128fe:	fab3 f383 	clz	r3, r3
 8012902:	b2db      	uxtb	r3, r3
 8012904:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8012908:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 801290c:	009b      	lsls	r3, r3, #2
 801290e:	461a      	mov	r2, r3
 8012910:	2300      	movs	r3, #0
 8012912:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012914:	f7fe f97a 	bl	8010c0c <HAL_GetTick>
 8012918:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801291c:	e009      	b.n	8012932 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801291e:	f7fe f975 	bl	8010c0c <HAL_GetTick>
 8012922:	4602      	mov	r2, r0
 8012924:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8012928:	1ad3      	subs	r3, r2, r3
 801292a:	2b02      	cmp	r3, #2
 801292c:	d901      	bls.n	8012932 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 801292e:	2303      	movs	r3, #3
 8012930:	e18b      	b.n	8012c4a <HAL_RCC_OscConfig+0xe02>
 8012932:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012936:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801293a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801293c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	fa93 f2a3 	rbit	r2, r3
 8012946:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801294a:	601a      	str	r2, [r3, #0]
  return result;
 801294c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8012950:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012952:	fab3 f383 	clz	r3, r3
 8012956:	b2db      	uxtb	r3, r3
 8012958:	095b      	lsrs	r3, r3, #5
 801295a:	b2db      	uxtb	r3, r3
 801295c:	f043 0301 	orr.w	r3, r3, #1
 8012960:	b2db      	uxtb	r3, r3
 8012962:	2b01      	cmp	r3, #1
 8012964:	d102      	bne.n	801296c <HAL_RCC_OscConfig+0xb24>
 8012966:	4b49      	ldr	r3, [pc, #292]	; (8012a8c <HAL_RCC_OscConfig+0xc44>)
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	e01b      	b.n	80129a4 <HAL_RCC_OscConfig+0xb5c>
 801296c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8012970:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8012974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012976:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	fa93 f2a3 	rbit	r2, r3
 8012980:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012984:	601a      	str	r2, [r3, #0]
 8012986:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801298a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801298e:	601a      	str	r2, [r3, #0]
 8012990:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	fa93 f2a3 	rbit	r2, r3
 801299a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801299e:	601a      	str	r2, [r3, #0]
 80129a0:	4b3a      	ldr	r3, [pc, #232]	; (8012a8c <HAL_RCC_OscConfig+0xc44>)
 80129a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80129a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80129ac:	6011      	str	r1, [r2, #0]
 80129ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80129b2:	6812      	ldr	r2, [r2, #0]
 80129b4:	fa92 f1a2 	rbit	r1, r2
 80129b8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80129bc:	6011      	str	r1, [r2, #0]
  return result;
 80129be:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80129c2:	6812      	ldr	r2, [r2, #0]
 80129c4:	fab2 f282 	clz	r2, r2
 80129c8:	b2d2      	uxtb	r2, r2
 80129ca:	f042 0220 	orr.w	r2, r2, #32
 80129ce:	b2d2      	uxtb	r2, r2
 80129d0:	f002 021f 	and.w	r2, r2, #31
 80129d4:	2101      	movs	r1, #1
 80129d6:	fa01 f202 	lsl.w	r2, r1, r2
 80129da:	4013      	ands	r3, r2
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d19e      	bne.n	801291e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80129e0:	4b2a      	ldr	r3, [pc, #168]	; (8012a8c <HAL_RCC_OscConfig+0xc44>)
 80129e2:	685b      	ldr	r3, [r3, #4]
 80129e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80129e8:	1d3b      	adds	r3, r7, #4
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80129ee:	1d3b      	adds	r3, r7, #4
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	6a1b      	ldr	r3, [r3, #32]
 80129f4:	430b      	orrs	r3, r1
 80129f6:	4925      	ldr	r1, [pc, #148]	; (8012a8c <HAL_RCC_OscConfig+0xc44>)
 80129f8:	4313      	orrs	r3, r2
 80129fa:	604b      	str	r3, [r1, #4]
 80129fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012a00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012a04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012a06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	fa93 f2a3 	rbit	r2, r3
 8012a10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012a14:	601a      	str	r2, [r3, #0]
  return result;
 8012a16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012a1a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012a1c:	fab3 f383 	clz	r3, r3
 8012a20:	b2db      	uxtb	r3, r3
 8012a22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8012a26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8012a2a:	009b      	lsls	r3, r3, #2
 8012a2c:	461a      	mov	r2, r3
 8012a2e:	2301      	movs	r3, #1
 8012a30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012a32:	f7fe f8eb 	bl	8010c0c <HAL_GetTick>
 8012a36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8012a3a:	e009      	b.n	8012a50 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012a3c:	f7fe f8e6 	bl	8010c0c <HAL_GetTick>
 8012a40:	4602      	mov	r2, r0
 8012a42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8012a46:	1ad3      	subs	r3, r2, r3
 8012a48:	2b02      	cmp	r3, #2
 8012a4a:	d901      	bls.n	8012a50 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8012a4c:	2303      	movs	r3, #3
 8012a4e:	e0fc      	b.n	8012c4a <HAL_RCC_OscConfig+0xe02>
 8012a50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012a54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8012a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012a5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	fa93 f2a3 	rbit	r2, r3
 8012a64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012a68:	601a      	str	r2, [r3, #0]
  return result;
 8012a6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012a6e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8012a70:	fab3 f383 	clz	r3, r3
 8012a74:	b2db      	uxtb	r3, r3
 8012a76:	095b      	lsrs	r3, r3, #5
 8012a78:	b2db      	uxtb	r3, r3
 8012a7a:	f043 0301 	orr.w	r3, r3, #1
 8012a7e:	b2db      	uxtb	r3, r3
 8012a80:	2b01      	cmp	r3, #1
 8012a82:	d105      	bne.n	8012a90 <HAL_RCC_OscConfig+0xc48>
 8012a84:	4b01      	ldr	r3, [pc, #4]	; (8012a8c <HAL_RCC_OscConfig+0xc44>)
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	e01e      	b.n	8012ac8 <HAL_RCC_OscConfig+0xc80>
 8012a8a:	bf00      	nop
 8012a8c:	40021000 	.word	0x40021000
 8012a90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012a94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8012a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012a9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	fa93 f2a3 	rbit	r2, r3
 8012aa4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012aa8:	601a      	str	r2, [r3, #0]
 8012aaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012aae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8012ab2:	601a      	str	r2, [r3, #0]
 8012ab4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	fa93 f2a3 	rbit	r2, r3
 8012abe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012ac2:	601a      	str	r2, [r3, #0]
 8012ac4:	4b63      	ldr	r3, [pc, #396]	; (8012c54 <HAL_RCC_OscConfig+0xe0c>)
 8012ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ac8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8012acc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8012ad0:	6011      	str	r1, [r2, #0]
 8012ad2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8012ad6:	6812      	ldr	r2, [r2, #0]
 8012ad8:	fa92 f1a2 	rbit	r1, r2
 8012adc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012ae0:	6011      	str	r1, [r2, #0]
  return result;
 8012ae2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012ae6:	6812      	ldr	r2, [r2, #0]
 8012ae8:	fab2 f282 	clz	r2, r2
 8012aec:	b2d2      	uxtb	r2, r2
 8012aee:	f042 0220 	orr.w	r2, r2, #32
 8012af2:	b2d2      	uxtb	r2, r2
 8012af4:	f002 021f 	and.w	r2, r2, #31
 8012af8:	2101      	movs	r1, #1
 8012afa:	fa01 f202 	lsl.w	r2, r1, r2
 8012afe:	4013      	ands	r3, r2
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d09b      	beq.n	8012a3c <HAL_RCC_OscConfig+0xbf4>
 8012b04:	e0a0      	b.n	8012c48 <HAL_RCC_OscConfig+0xe00>
 8012b06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012b0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012b10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	fa93 f2a3 	rbit	r2, r3
 8012b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012b1e:	601a      	str	r2, [r3, #0]
  return result;
 8012b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012b24:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012b26:	fab3 f383 	clz	r3, r3
 8012b2a:	b2db      	uxtb	r3, r3
 8012b2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8012b30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8012b34:	009b      	lsls	r3, r3, #2
 8012b36:	461a      	mov	r2, r3
 8012b38:	2300      	movs	r3, #0
 8012b3a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012b3c:	f7fe f866 	bl	8010c0c <HAL_GetTick>
 8012b40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012b44:	e009      	b.n	8012b5a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012b46:	f7fe f861 	bl	8010c0c <HAL_GetTick>
 8012b4a:	4602      	mov	r2, r0
 8012b4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8012b50:	1ad3      	subs	r3, r2, r3
 8012b52:	2b02      	cmp	r3, #2
 8012b54:	d901      	bls.n	8012b5a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8012b56:	2303      	movs	r3, #3
 8012b58:	e077      	b.n	8012c4a <HAL_RCC_OscConfig+0xe02>
 8012b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012b5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8012b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012b64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	fa93 f2a3 	rbit	r2, r3
 8012b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012b72:	601a      	str	r2, [r3, #0]
  return result;
 8012b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012b78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012b7a:	fab3 f383 	clz	r3, r3
 8012b7e:	b2db      	uxtb	r3, r3
 8012b80:	095b      	lsrs	r3, r3, #5
 8012b82:	b2db      	uxtb	r3, r3
 8012b84:	f043 0301 	orr.w	r3, r3, #1
 8012b88:	b2db      	uxtb	r3, r3
 8012b8a:	2b01      	cmp	r3, #1
 8012b8c:	d102      	bne.n	8012b94 <HAL_RCC_OscConfig+0xd4c>
 8012b8e:	4b31      	ldr	r3, [pc, #196]	; (8012c54 <HAL_RCC_OscConfig+0xe0c>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	e01b      	b.n	8012bcc <HAL_RCC_OscConfig+0xd84>
 8012b94:	f107 0320 	add.w	r3, r7, #32
 8012b98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8012b9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012b9e:	f107 0320 	add.w	r3, r7, #32
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	fa93 f2a3 	rbit	r2, r3
 8012ba8:	f107 031c 	add.w	r3, r7, #28
 8012bac:	601a      	str	r2, [r3, #0]
 8012bae:	f107 0318 	add.w	r3, r7, #24
 8012bb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8012bb6:	601a      	str	r2, [r3, #0]
 8012bb8:	f107 0318 	add.w	r3, r7, #24
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	fa93 f2a3 	rbit	r2, r3
 8012bc2:	f107 0314 	add.w	r3, r7, #20
 8012bc6:	601a      	str	r2, [r3, #0]
 8012bc8:	4b22      	ldr	r3, [pc, #136]	; (8012c54 <HAL_RCC_OscConfig+0xe0c>)
 8012bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bcc:	f107 0210 	add.w	r2, r7, #16
 8012bd0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8012bd4:	6011      	str	r1, [r2, #0]
 8012bd6:	f107 0210 	add.w	r2, r7, #16
 8012bda:	6812      	ldr	r2, [r2, #0]
 8012bdc:	fa92 f1a2 	rbit	r1, r2
 8012be0:	f107 020c 	add.w	r2, r7, #12
 8012be4:	6011      	str	r1, [r2, #0]
  return result;
 8012be6:	f107 020c 	add.w	r2, r7, #12
 8012bea:	6812      	ldr	r2, [r2, #0]
 8012bec:	fab2 f282 	clz	r2, r2
 8012bf0:	b2d2      	uxtb	r2, r2
 8012bf2:	f042 0220 	orr.w	r2, r2, #32
 8012bf6:	b2d2      	uxtb	r2, r2
 8012bf8:	f002 021f 	and.w	r2, r2, #31
 8012bfc:	2101      	movs	r1, #1
 8012bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8012c02:	4013      	ands	r3, r2
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d19e      	bne.n	8012b46 <HAL_RCC_OscConfig+0xcfe>
 8012c08:	e01e      	b.n	8012c48 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012c0a:	1d3b      	adds	r3, r7, #4
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	69db      	ldr	r3, [r3, #28]
 8012c10:	2b01      	cmp	r3, #1
 8012c12:	d101      	bne.n	8012c18 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8012c14:	2301      	movs	r3, #1
 8012c16:	e018      	b.n	8012c4a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8012c18:	4b0e      	ldr	r3, [pc, #56]	; (8012c54 <HAL_RCC_OscConfig+0xe0c>)
 8012c1a:	685b      	ldr	r3, [r3, #4]
 8012c1c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8012c20:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8012c24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8012c28:	1d3b      	adds	r3, r7, #4
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	6a1b      	ldr	r3, [r3, #32]
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	d108      	bne.n	8012c44 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8012c32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8012c36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8012c3a:	1d3b      	adds	r3, r7, #4
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8012c40:	429a      	cmp	r2, r3
 8012c42:	d001      	beq.n	8012c48 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8012c44:	2301      	movs	r3, #1
 8012c46:	e000      	b.n	8012c4a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8012c48:	2300      	movs	r3, #0
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}
 8012c54:	40021000 	.word	0x40021000

08012c58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b09e      	sub	sp, #120	; 0x78
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
 8012c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8012c62:	2300      	movs	r3, #0
 8012c64:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d101      	bne.n	8012c70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8012c6c:	2301      	movs	r3, #1
 8012c6e:	e162      	b.n	8012f36 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012c70:	4b90      	ldr	r3, [pc, #576]	; (8012eb4 <HAL_RCC_ClockConfig+0x25c>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	f003 0307 	and.w	r3, r3, #7
 8012c78:	683a      	ldr	r2, [r7, #0]
 8012c7a:	429a      	cmp	r2, r3
 8012c7c:	d910      	bls.n	8012ca0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012c7e:	4b8d      	ldr	r3, [pc, #564]	; (8012eb4 <HAL_RCC_ClockConfig+0x25c>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	f023 0207 	bic.w	r2, r3, #7
 8012c86:	498b      	ldr	r1, [pc, #556]	; (8012eb4 <HAL_RCC_ClockConfig+0x25c>)
 8012c88:	683b      	ldr	r3, [r7, #0]
 8012c8a:	4313      	orrs	r3, r2
 8012c8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012c8e:	4b89      	ldr	r3, [pc, #548]	; (8012eb4 <HAL_RCC_ClockConfig+0x25c>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	f003 0307 	and.w	r3, r3, #7
 8012c96:	683a      	ldr	r2, [r7, #0]
 8012c98:	429a      	cmp	r2, r3
 8012c9a:	d001      	beq.n	8012ca0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	e14a      	b.n	8012f36 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	f003 0302 	and.w	r3, r3, #2
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d008      	beq.n	8012cbe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012cac:	4b82      	ldr	r3, [pc, #520]	; (8012eb8 <HAL_RCC_ClockConfig+0x260>)
 8012cae:	685b      	ldr	r3, [r3, #4]
 8012cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	689b      	ldr	r3, [r3, #8]
 8012cb8:	497f      	ldr	r1, [pc, #508]	; (8012eb8 <HAL_RCC_ClockConfig+0x260>)
 8012cba:	4313      	orrs	r3, r2
 8012cbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	f003 0301 	and.w	r3, r3, #1
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	f000 80dc 	beq.w	8012e84 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	685b      	ldr	r3, [r3, #4]
 8012cd0:	2b01      	cmp	r3, #1
 8012cd2:	d13c      	bne.n	8012d4e <HAL_RCC_ClockConfig+0xf6>
 8012cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012cd8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012cdc:	fa93 f3a3 	rbit	r3, r3
 8012ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8012ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012ce4:	fab3 f383 	clz	r3, r3
 8012ce8:	b2db      	uxtb	r3, r3
 8012cea:	095b      	lsrs	r3, r3, #5
 8012cec:	b2db      	uxtb	r3, r3
 8012cee:	f043 0301 	orr.w	r3, r3, #1
 8012cf2:	b2db      	uxtb	r3, r3
 8012cf4:	2b01      	cmp	r3, #1
 8012cf6:	d102      	bne.n	8012cfe <HAL_RCC_ClockConfig+0xa6>
 8012cf8:	4b6f      	ldr	r3, [pc, #444]	; (8012eb8 <HAL_RCC_ClockConfig+0x260>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	e00f      	b.n	8012d1e <HAL_RCC_ClockConfig+0xc6>
 8012cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012d02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d06:	fa93 f3a3 	rbit	r3, r3
 8012d0a:	667b      	str	r3, [r7, #100]	; 0x64
 8012d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012d10:	663b      	str	r3, [r7, #96]	; 0x60
 8012d12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d14:	fa93 f3a3 	rbit	r3, r3
 8012d18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012d1a:	4b67      	ldr	r3, [pc, #412]	; (8012eb8 <HAL_RCC_ClockConfig+0x260>)
 8012d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8012d22:	65ba      	str	r2, [r7, #88]	; 0x58
 8012d24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d26:	fa92 f2a2 	rbit	r2, r2
 8012d2a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8012d2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d2e:	fab2 f282 	clz	r2, r2
 8012d32:	b2d2      	uxtb	r2, r2
 8012d34:	f042 0220 	orr.w	r2, r2, #32
 8012d38:	b2d2      	uxtb	r2, r2
 8012d3a:	f002 021f 	and.w	r2, r2, #31
 8012d3e:	2101      	movs	r1, #1
 8012d40:	fa01 f202 	lsl.w	r2, r1, r2
 8012d44:	4013      	ands	r3, r2
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d17b      	bne.n	8012e42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	e0f3      	b.n	8012f36 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	685b      	ldr	r3, [r3, #4]
 8012d52:	2b02      	cmp	r3, #2
 8012d54:	d13c      	bne.n	8012dd0 <HAL_RCC_ClockConfig+0x178>
 8012d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012d5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d5e:	fa93 f3a3 	rbit	r3, r3
 8012d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8012d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012d66:	fab3 f383 	clz	r3, r3
 8012d6a:	b2db      	uxtb	r3, r3
 8012d6c:	095b      	lsrs	r3, r3, #5
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	f043 0301 	orr.w	r3, r3, #1
 8012d74:	b2db      	uxtb	r3, r3
 8012d76:	2b01      	cmp	r3, #1
 8012d78:	d102      	bne.n	8012d80 <HAL_RCC_ClockConfig+0x128>
 8012d7a:	4b4f      	ldr	r3, [pc, #316]	; (8012eb8 <HAL_RCC_ClockConfig+0x260>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	e00f      	b.n	8012da0 <HAL_RCC_ClockConfig+0x148>
 8012d80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012d84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d88:	fa93 f3a3 	rbit	r3, r3
 8012d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8012d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012d92:	643b      	str	r3, [r7, #64]	; 0x40
 8012d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d96:	fa93 f3a3 	rbit	r3, r3
 8012d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012d9c:	4b46      	ldr	r3, [pc, #280]	; (8012eb8 <HAL_RCC_ClockConfig+0x260>)
 8012d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8012da4:	63ba      	str	r2, [r7, #56]	; 0x38
 8012da6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012da8:	fa92 f2a2 	rbit	r2, r2
 8012dac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8012dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012db0:	fab2 f282 	clz	r2, r2
 8012db4:	b2d2      	uxtb	r2, r2
 8012db6:	f042 0220 	orr.w	r2, r2, #32
 8012dba:	b2d2      	uxtb	r2, r2
 8012dbc:	f002 021f 	and.w	r2, r2, #31
 8012dc0:	2101      	movs	r1, #1
 8012dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8012dc6:	4013      	ands	r3, r2
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d13a      	bne.n	8012e42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8012dcc:	2301      	movs	r3, #1
 8012dce:	e0b2      	b.n	8012f36 <HAL_RCC_ClockConfig+0x2de>
 8012dd0:	2302      	movs	r3, #2
 8012dd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd6:	fa93 f3a3 	rbit	r3, r3
 8012dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8012ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012dde:	fab3 f383 	clz	r3, r3
 8012de2:	b2db      	uxtb	r3, r3
 8012de4:	095b      	lsrs	r3, r3, #5
 8012de6:	b2db      	uxtb	r3, r3
 8012de8:	f043 0301 	orr.w	r3, r3, #1
 8012dec:	b2db      	uxtb	r3, r3
 8012dee:	2b01      	cmp	r3, #1
 8012df0:	d102      	bne.n	8012df8 <HAL_RCC_ClockConfig+0x1a0>
 8012df2:	4b31      	ldr	r3, [pc, #196]	; (8012eb8 <HAL_RCC_ClockConfig+0x260>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	e00d      	b.n	8012e14 <HAL_RCC_ClockConfig+0x1bc>
 8012df8:	2302      	movs	r3, #2
 8012dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dfe:	fa93 f3a3 	rbit	r3, r3
 8012e02:	627b      	str	r3, [r7, #36]	; 0x24
 8012e04:	2302      	movs	r3, #2
 8012e06:	623b      	str	r3, [r7, #32]
 8012e08:	6a3b      	ldr	r3, [r7, #32]
 8012e0a:	fa93 f3a3 	rbit	r3, r3
 8012e0e:	61fb      	str	r3, [r7, #28]
 8012e10:	4b29      	ldr	r3, [pc, #164]	; (8012eb8 <HAL_RCC_ClockConfig+0x260>)
 8012e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e14:	2202      	movs	r2, #2
 8012e16:	61ba      	str	r2, [r7, #24]
 8012e18:	69ba      	ldr	r2, [r7, #24]
 8012e1a:	fa92 f2a2 	rbit	r2, r2
 8012e1e:	617a      	str	r2, [r7, #20]
  return result;
 8012e20:	697a      	ldr	r2, [r7, #20]
 8012e22:	fab2 f282 	clz	r2, r2
 8012e26:	b2d2      	uxtb	r2, r2
 8012e28:	f042 0220 	orr.w	r2, r2, #32
 8012e2c:	b2d2      	uxtb	r2, r2
 8012e2e:	f002 021f 	and.w	r2, r2, #31
 8012e32:	2101      	movs	r1, #1
 8012e34:	fa01 f202 	lsl.w	r2, r1, r2
 8012e38:	4013      	ands	r3, r2
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d101      	bne.n	8012e42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8012e3e:	2301      	movs	r3, #1
 8012e40:	e079      	b.n	8012f36 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012e42:	4b1d      	ldr	r3, [pc, #116]	; (8012eb8 <HAL_RCC_ClockConfig+0x260>)
 8012e44:	685b      	ldr	r3, [r3, #4]
 8012e46:	f023 0203 	bic.w	r2, r3, #3
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	685b      	ldr	r3, [r3, #4]
 8012e4e:	491a      	ldr	r1, [pc, #104]	; (8012eb8 <HAL_RCC_ClockConfig+0x260>)
 8012e50:	4313      	orrs	r3, r2
 8012e52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012e54:	f7fd feda 	bl	8010c0c <HAL_GetTick>
 8012e58:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012e5a:	e00a      	b.n	8012e72 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012e5c:	f7fd fed6 	bl	8010c0c <HAL_GetTick>
 8012e60:	4602      	mov	r2, r0
 8012e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012e64:	1ad3      	subs	r3, r2, r3
 8012e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e6a:	4293      	cmp	r3, r2
 8012e6c:	d901      	bls.n	8012e72 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8012e6e:	2303      	movs	r3, #3
 8012e70:	e061      	b.n	8012f36 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012e72:	4b11      	ldr	r3, [pc, #68]	; (8012eb8 <HAL_RCC_ClockConfig+0x260>)
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	f003 020c 	and.w	r2, r3, #12
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	685b      	ldr	r3, [r3, #4]
 8012e7e:	009b      	lsls	r3, r3, #2
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d1eb      	bne.n	8012e5c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012e84:	4b0b      	ldr	r3, [pc, #44]	; (8012eb4 <HAL_RCC_ClockConfig+0x25c>)
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	f003 0307 	and.w	r3, r3, #7
 8012e8c:	683a      	ldr	r2, [r7, #0]
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	d214      	bcs.n	8012ebc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012e92:	4b08      	ldr	r3, [pc, #32]	; (8012eb4 <HAL_RCC_ClockConfig+0x25c>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	f023 0207 	bic.w	r2, r3, #7
 8012e9a:	4906      	ldr	r1, [pc, #24]	; (8012eb4 <HAL_RCC_ClockConfig+0x25c>)
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	4313      	orrs	r3, r2
 8012ea0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012ea2:	4b04      	ldr	r3, [pc, #16]	; (8012eb4 <HAL_RCC_ClockConfig+0x25c>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	f003 0307 	and.w	r3, r3, #7
 8012eaa:	683a      	ldr	r2, [r7, #0]
 8012eac:	429a      	cmp	r2, r3
 8012eae:	d005      	beq.n	8012ebc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	e040      	b.n	8012f36 <HAL_RCC_ClockConfig+0x2de>
 8012eb4:	40022000 	.word	0x40022000
 8012eb8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	f003 0304 	and.w	r3, r3, #4
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d008      	beq.n	8012eda <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012ec8:	4b1d      	ldr	r3, [pc, #116]	; (8012f40 <HAL_RCC_ClockConfig+0x2e8>)
 8012eca:	685b      	ldr	r3, [r3, #4]
 8012ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	68db      	ldr	r3, [r3, #12]
 8012ed4:	491a      	ldr	r1, [pc, #104]	; (8012f40 <HAL_RCC_ClockConfig+0x2e8>)
 8012ed6:	4313      	orrs	r3, r2
 8012ed8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	f003 0308 	and.w	r3, r3, #8
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d009      	beq.n	8012efa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012ee6:	4b16      	ldr	r3, [pc, #88]	; (8012f40 <HAL_RCC_ClockConfig+0x2e8>)
 8012ee8:	685b      	ldr	r3, [r3, #4]
 8012eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	691b      	ldr	r3, [r3, #16]
 8012ef2:	00db      	lsls	r3, r3, #3
 8012ef4:	4912      	ldr	r1, [pc, #72]	; (8012f40 <HAL_RCC_ClockConfig+0x2e8>)
 8012ef6:	4313      	orrs	r3, r2
 8012ef8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8012efa:	f000 f829 	bl	8012f50 <HAL_RCC_GetSysClockFreq>
 8012efe:	4601      	mov	r1, r0
 8012f00:	4b0f      	ldr	r3, [pc, #60]	; (8012f40 <HAL_RCC_ClockConfig+0x2e8>)
 8012f02:	685b      	ldr	r3, [r3, #4]
 8012f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012f08:	22f0      	movs	r2, #240	; 0xf0
 8012f0a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012f0c:	693a      	ldr	r2, [r7, #16]
 8012f0e:	fa92 f2a2 	rbit	r2, r2
 8012f12:	60fa      	str	r2, [r7, #12]
  return result;
 8012f14:	68fa      	ldr	r2, [r7, #12]
 8012f16:	fab2 f282 	clz	r2, r2
 8012f1a:	b2d2      	uxtb	r2, r2
 8012f1c:	40d3      	lsrs	r3, r2
 8012f1e:	4a09      	ldr	r2, [pc, #36]	; (8012f44 <HAL_RCC_ClockConfig+0x2ec>)
 8012f20:	5cd3      	ldrb	r3, [r2, r3]
 8012f22:	fa21 f303 	lsr.w	r3, r1, r3
 8012f26:	4a08      	ldr	r2, [pc, #32]	; (8012f48 <HAL_RCC_ClockConfig+0x2f0>)
 8012f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8012f2a:	4b08      	ldr	r3, [pc, #32]	; (8012f4c <HAL_RCC_ClockConfig+0x2f4>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7fd fe28 	bl	8010b84 <HAL_InitTick>
  
  return HAL_OK;
 8012f34:	2300      	movs	r3, #0
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3778      	adds	r7, #120	; 0x78
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	40021000 	.word	0x40021000
 8012f44:	08014c3c 	.word	0x08014c3c
 8012f48:	20000000 	.word	0x20000000
 8012f4c:	20000030 	.word	0x20000030

08012f50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012f50:	b480      	push	{r7}
 8012f52:	b08b      	sub	sp, #44	; 0x2c
 8012f54:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8012f56:	2300      	movs	r3, #0
 8012f58:	61fb      	str	r3, [r7, #28]
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	61bb      	str	r3, [r7, #24]
 8012f5e:	2300      	movs	r3, #0
 8012f60:	627b      	str	r3, [r7, #36]	; 0x24
 8012f62:	2300      	movs	r3, #0
 8012f64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8012f66:	2300      	movs	r3, #0
 8012f68:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8012f6a:	4b29      	ldr	r3, [pc, #164]	; (8013010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8012f6c:	685b      	ldr	r3, [r3, #4]
 8012f6e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012f70:	69fb      	ldr	r3, [r7, #28]
 8012f72:	f003 030c 	and.w	r3, r3, #12
 8012f76:	2b04      	cmp	r3, #4
 8012f78:	d002      	beq.n	8012f80 <HAL_RCC_GetSysClockFreq+0x30>
 8012f7a:	2b08      	cmp	r3, #8
 8012f7c:	d003      	beq.n	8012f86 <HAL_RCC_GetSysClockFreq+0x36>
 8012f7e:	e03c      	b.n	8012ffa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8012f80:	4b24      	ldr	r3, [pc, #144]	; (8013014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8012f82:	623b      	str	r3, [r7, #32]
      break;
 8012f84:	e03c      	b.n	8013000 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8012f86:	69fb      	ldr	r3, [r7, #28]
 8012f88:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8012f8c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8012f90:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012f92:	68ba      	ldr	r2, [r7, #8]
 8012f94:	fa92 f2a2 	rbit	r2, r2
 8012f98:	607a      	str	r2, [r7, #4]
  return result;
 8012f9a:	687a      	ldr	r2, [r7, #4]
 8012f9c:	fab2 f282 	clz	r2, r2
 8012fa0:	b2d2      	uxtb	r2, r2
 8012fa2:	40d3      	lsrs	r3, r2
 8012fa4:	4a1c      	ldr	r2, [pc, #112]	; (8013018 <HAL_RCC_GetSysClockFreq+0xc8>)
 8012fa6:	5cd3      	ldrb	r3, [r2, r3]
 8012fa8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8012faa:	4b19      	ldr	r3, [pc, #100]	; (8013010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8012fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fae:	f003 030f 	and.w	r3, r3, #15
 8012fb2:	220f      	movs	r2, #15
 8012fb4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012fb6:	693a      	ldr	r2, [r7, #16]
 8012fb8:	fa92 f2a2 	rbit	r2, r2
 8012fbc:	60fa      	str	r2, [r7, #12]
  return result;
 8012fbe:	68fa      	ldr	r2, [r7, #12]
 8012fc0:	fab2 f282 	clz	r2, r2
 8012fc4:	b2d2      	uxtb	r2, r2
 8012fc6:	40d3      	lsrs	r3, r2
 8012fc8:	4a14      	ldr	r2, [pc, #80]	; (801301c <HAL_RCC_GetSysClockFreq+0xcc>)
 8012fca:	5cd3      	ldrb	r3, [r2, r3]
 8012fcc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8012fce:	69fb      	ldr	r3, [r7, #28]
 8012fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d008      	beq.n	8012fea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8012fd8:	4a0e      	ldr	r2, [pc, #56]	; (8013014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8012fda:	69bb      	ldr	r3, [r7, #24]
 8012fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	fb02 f303 	mul.w	r3, r2, r3
 8012fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8012fe8:	e004      	b.n	8012ff4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	4a0c      	ldr	r2, [pc, #48]	; (8013020 <HAL_RCC_GetSysClockFreq+0xd0>)
 8012fee:	fb02 f303 	mul.w	r3, r2, r3
 8012ff2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8012ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ff6:	623b      	str	r3, [r7, #32]
      break;
 8012ff8:	e002      	b.n	8013000 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8012ffa:	4b06      	ldr	r3, [pc, #24]	; (8013014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8012ffc:	623b      	str	r3, [r7, #32]
      break;
 8012ffe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013000:	6a3b      	ldr	r3, [r7, #32]
}
 8013002:	4618      	mov	r0, r3
 8013004:	372c      	adds	r7, #44	; 0x2c
 8013006:	46bd      	mov	sp, r7
 8013008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300c:	4770      	bx	lr
 801300e:	bf00      	nop
 8013010:	40021000 	.word	0x40021000
 8013014:	007a1200 	.word	0x007a1200
 8013018:	08014c54 	.word	0x08014c54
 801301c:	08014c64 	.word	0x08014c64
 8013020:	003d0900 	.word	0x003d0900

08013024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013024:	b480      	push	{r7}
 8013026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013028:	4b03      	ldr	r3, [pc, #12]	; (8013038 <HAL_RCC_GetHCLKFreq+0x14>)
 801302a:	681b      	ldr	r3, [r3, #0]
}
 801302c:	4618      	mov	r0, r3
 801302e:	46bd      	mov	sp, r7
 8013030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013034:	4770      	bx	lr
 8013036:	bf00      	nop
 8013038:	20000000 	.word	0x20000000

0801303c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b082      	sub	sp, #8
 8013040:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8013042:	f7ff ffef 	bl	8013024 <HAL_RCC_GetHCLKFreq>
 8013046:	4601      	mov	r1, r0
 8013048:	4b0b      	ldr	r3, [pc, #44]	; (8013078 <HAL_RCC_GetPCLK1Freq+0x3c>)
 801304a:	685b      	ldr	r3, [r3, #4]
 801304c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013050:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8013054:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013056:	687a      	ldr	r2, [r7, #4]
 8013058:	fa92 f2a2 	rbit	r2, r2
 801305c:	603a      	str	r2, [r7, #0]
  return result;
 801305e:	683a      	ldr	r2, [r7, #0]
 8013060:	fab2 f282 	clz	r2, r2
 8013064:	b2d2      	uxtb	r2, r2
 8013066:	40d3      	lsrs	r3, r2
 8013068:	4a04      	ldr	r2, [pc, #16]	; (801307c <HAL_RCC_GetPCLK1Freq+0x40>)
 801306a:	5cd3      	ldrb	r3, [r2, r3]
 801306c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8013070:	4618      	mov	r0, r3
 8013072:	3708      	adds	r7, #8
 8013074:	46bd      	mov	sp, r7
 8013076:	bd80      	pop	{r7, pc}
 8013078:	40021000 	.word	0x40021000
 801307c:	08014c4c 	.word	0x08014c4c

08013080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b082      	sub	sp, #8
 8013084:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8013086:	f7ff ffcd 	bl	8013024 <HAL_RCC_GetHCLKFreq>
 801308a:	4601      	mov	r1, r0
 801308c:	4b0b      	ldr	r3, [pc, #44]	; (80130bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 801308e:	685b      	ldr	r3, [r3, #4]
 8013090:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8013094:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8013098:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801309a:	687a      	ldr	r2, [r7, #4]
 801309c:	fa92 f2a2 	rbit	r2, r2
 80130a0:	603a      	str	r2, [r7, #0]
  return result;
 80130a2:	683a      	ldr	r2, [r7, #0]
 80130a4:	fab2 f282 	clz	r2, r2
 80130a8:	b2d2      	uxtb	r2, r2
 80130aa:	40d3      	lsrs	r3, r2
 80130ac:	4a04      	ldr	r2, [pc, #16]	; (80130c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80130ae:	5cd3      	ldrb	r3, [r2, r3]
 80130b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80130b4:	4618      	mov	r0, r3
 80130b6:	3708      	adds	r7, #8
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}
 80130bc:	40021000 	.word	0x40021000
 80130c0:	08014c4c 	.word	0x08014c4c

080130c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b092      	sub	sp, #72	; 0x48
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80130cc:	2300      	movs	r3, #0
 80130ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80130d0:	2300      	movs	r3, #0
 80130d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80130d4:	2300      	movs	r3, #0
 80130d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	f000 80d4 	beq.w	8013290 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80130e8:	4b4e      	ldr	r3, [pc, #312]	; (8013224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80130ea:	69db      	ldr	r3, [r3, #28]
 80130ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d10e      	bne.n	8013112 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80130f4:	4b4b      	ldr	r3, [pc, #300]	; (8013224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80130f6:	69db      	ldr	r3, [r3, #28]
 80130f8:	4a4a      	ldr	r2, [pc, #296]	; (8013224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80130fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80130fe:	61d3      	str	r3, [r2, #28]
 8013100:	4b48      	ldr	r3, [pc, #288]	; (8013224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8013102:	69db      	ldr	r3, [r3, #28]
 8013104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013108:	60bb      	str	r3, [r7, #8]
 801310a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801310c:	2301      	movs	r3, #1
 801310e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013112:	4b45      	ldr	r3, [pc, #276]	; (8013228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801311a:	2b00      	cmp	r3, #0
 801311c:	d118      	bne.n	8013150 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801311e:	4b42      	ldr	r3, [pc, #264]	; (8013228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	4a41      	ldr	r2, [pc, #260]	; (8013228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8013124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013128:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801312a:	f7fd fd6f 	bl	8010c0c <HAL_GetTick>
 801312e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013130:	e008      	b.n	8013144 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013132:	f7fd fd6b 	bl	8010c0c <HAL_GetTick>
 8013136:	4602      	mov	r2, r0
 8013138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801313a:	1ad3      	subs	r3, r2, r3
 801313c:	2b64      	cmp	r3, #100	; 0x64
 801313e:	d901      	bls.n	8013144 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8013140:	2303      	movs	r3, #3
 8013142:	e14b      	b.n	80133dc <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013144:	4b38      	ldr	r3, [pc, #224]	; (8013228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801314c:	2b00      	cmp	r3, #0
 801314e:	d0f0      	beq.n	8013132 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8013150:	4b34      	ldr	r3, [pc, #208]	; (8013224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8013152:	6a1b      	ldr	r3, [r3, #32]
 8013154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013158:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801315a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801315c:	2b00      	cmp	r3, #0
 801315e:	f000 8084 	beq.w	801326a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801316a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801316c:	429a      	cmp	r2, r3
 801316e:	d07c      	beq.n	801326a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013170:	4b2c      	ldr	r3, [pc, #176]	; (8013224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8013172:	6a1b      	ldr	r3, [r3, #32]
 8013174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013178:	63fb      	str	r3, [r7, #60]	; 0x3c
 801317a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801317e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013182:	fa93 f3a3 	rbit	r3, r3
 8013186:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8013188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801318a:	fab3 f383 	clz	r3, r3
 801318e:	b2db      	uxtb	r3, r3
 8013190:	461a      	mov	r2, r3
 8013192:	4b26      	ldr	r3, [pc, #152]	; (801322c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8013194:	4413      	add	r3, r2
 8013196:	009b      	lsls	r3, r3, #2
 8013198:	461a      	mov	r2, r3
 801319a:	2301      	movs	r3, #1
 801319c:	6013      	str	r3, [r2, #0]
 801319e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80131a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80131a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a6:	fa93 f3a3 	rbit	r3, r3
 80131aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80131ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80131ae:	fab3 f383 	clz	r3, r3
 80131b2:	b2db      	uxtb	r3, r3
 80131b4:	461a      	mov	r2, r3
 80131b6:	4b1d      	ldr	r3, [pc, #116]	; (801322c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80131b8:	4413      	add	r3, r2
 80131ba:	009b      	lsls	r3, r3, #2
 80131bc:	461a      	mov	r2, r3
 80131be:	2300      	movs	r3, #0
 80131c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80131c2:	4a18      	ldr	r2, [pc, #96]	; (8013224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80131c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80131c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131ca:	f003 0301 	and.w	r3, r3, #1
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d04b      	beq.n	801326a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80131d2:	f7fd fd1b 	bl	8010c0c <HAL_GetTick>
 80131d6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80131d8:	e00a      	b.n	80131f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80131da:	f7fd fd17 	bl	8010c0c <HAL_GetTick>
 80131de:	4602      	mov	r2, r0
 80131e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131e2:	1ad3      	subs	r3, r2, r3
 80131e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80131e8:	4293      	cmp	r3, r2
 80131ea:	d901      	bls.n	80131f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80131ec:	2303      	movs	r3, #3
 80131ee:	e0f5      	b.n	80133dc <HAL_RCCEx_PeriphCLKConfig+0x318>
 80131f0:	2302      	movs	r3, #2
 80131f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80131f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131f6:	fa93 f3a3 	rbit	r3, r3
 80131fa:	627b      	str	r3, [r7, #36]	; 0x24
 80131fc:	2302      	movs	r3, #2
 80131fe:	623b      	str	r3, [r7, #32]
 8013200:	6a3b      	ldr	r3, [r7, #32]
 8013202:	fa93 f3a3 	rbit	r3, r3
 8013206:	61fb      	str	r3, [r7, #28]
  return result;
 8013208:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801320a:	fab3 f383 	clz	r3, r3
 801320e:	b2db      	uxtb	r3, r3
 8013210:	095b      	lsrs	r3, r3, #5
 8013212:	b2db      	uxtb	r3, r3
 8013214:	f043 0302 	orr.w	r3, r3, #2
 8013218:	b2db      	uxtb	r3, r3
 801321a:	2b02      	cmp	r3, #2
 801321c:	d108      	bne.n	8013230 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 801321e:	4b01      	ldr	r3, [pc, #4]	; (8013224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8013220:	6a1b      	ldr	r3, [r3, #32]
 8013222:	e00d      	b.n	8013240 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8013224:	40021000 	.word	0x40021000
 8013228:	40007000 	.word	0x40007000
 801322c:	10908100 	.word	0x10908100
 8013230:	2302      	movs	r3, #2
 8013232:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013234:	69bb      	ldr	r3, [r7, #24]
 8013236:	fa93 f3a3 	rbit	r3, r3
 801323a:	617b      	str	r3, [r7, #20]
 801323c:	4b69      	ldr	r3, [pc, #420]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 801323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013240:	2202      	movs	r2, #2
 8013242:	613a      	str	r2, [r7, #16]
 8013244:	693a      	ldr	r2, [r7, #16]
 8013246:	fa92 f2a2 	rbit	r2, r2
 801324a:	60fa      	str	r2, [r7, #12]
  return result;
 801324c:	68fa      	ldr	r2, [r7, #12]
 801324e:	fab2 f282 	clz	r2, r2
 8013252:	b2d2      	uxtb	r2, r2
 8013254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013258:	b2d2      	uxtb	r2, r2
 801325a:	f002 021f 	and.w	r2, r2, #31
 801325e:	2101      	movs	r1, #1
 8013260:	fa01 f202 	lsl.w	r2, r1, r2
 8013264:	4013      	ands	r3, r2
 8013266:	2b00      	cmp	r3, #0
 8013268:	d0b7      	beq.n	80131da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 801326a:	4b5e      	ldr	r3, [pc, #376]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 801326c:	6a1b      	ldr	r3, [r3, #32]
 801326e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	685b      	ldr	r3, [r3, #4]
 8013276:	495b      	ldr	r1, [pc, #364]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8013278:	4313      	orrs	r3, r2
 801327a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801327c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013280:	2b01      	cmp	r3, #1
 8013282:	d105      	bne.n	8013290 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013284:	4b57      	ldr	r3, [pc, #348]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8013286:	69db      	ldr	r3, [r3, #28]
 8013288:	4a56      	ldr	r2, [pc, #344]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 801328a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801328e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	f003 0301 	and.w	r3, r3, #1
 8013298:	2b00      	cmp	r3, #0
 801329a:	d008      	beq.n	80132ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801329c:	4b51      	ldr	r3, [pc, #324]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 801329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132a0:	f023 0203 	bic.w	r2, r3, #3
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	689b      	ldr	r3, [r3, #8]
 80132a8:	494e      	ldr	r1, [pc, #312]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80132aa:	4313      	orrs	r3, r2
 80132ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	f003 0302 	and.w	r3, r3, #2
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d008      	beq.n	80132cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80132ba:	4b4a      	ldr	r3, [pc, #296]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80132bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	68db      	ldr	r3, [r3, #12]
 80132c6:	4947      	ldr	r1, [pc, #284]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80132c8:	4313      	orrs	r3, r2
 80132ca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	f003 0304 	and.w	r3, r3, #4
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d008      	beq.n	80132ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80132d8:	4b42      	ldr	r3, [pc, #264]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80132da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	691b      	ldr	r3, [r3, #16]
 80132e4:	493f      	ldr	r1, [pc, #252]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80132e6:	4313      	orrs	r3, r2
 80132e8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	f003 0320 	and.w	r3, r3, #32
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d008      	beq.n	8013308 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80132f6:	4b3b      	ldr	r3, [pc, #236]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80132f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132fa:	f023 0210 	bic.w	r2, r3, #16
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	69db      	ldr	r3, [r3, #28]
 8013302:	4938      	ldr	r1, [pc, #224]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8013304:	4313      	orrs	r3, r2
 8013306:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013310:	2b00      	cmp	r3, #0
 8013312:	d008      	beq.n	8013326 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8013314:	4b33      	ldr	r3, [pc, #204]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8013316:	685b      	ldr	r3, [r3, #4]
 8013318:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013320:	4930      	ldr	r1, [pc, #192]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8013322:	4313      	orrs	r3, r2
 8013324:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801332e:	2b00      	cmp	r3, #0
 8013330:	d008      	beq.n	8013344 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8013332:	4b2c      	ldr	r3, [pc, #176]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8013334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013336:	f023 0220 	bic.w	r2, r3, #32
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	6a1b      	ldr	r3, [r3, #32]
 801333e:	4929      	ldr	r1, [pc, #164]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8013340:	4313      	orrs	r3, r2
 8013342:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	f003 0308 	and.w	r3, r3, #8
 801334c:	2b00      	cmp	r3, #0
 801334e:	d008      	beq.n	8013362 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8013350:	4b24      	ldr	r3, [pc, #144]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8013352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013354:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	695b      	ldr	r3, [r3, #20]
 801335c:	4921      	ldr	r1, [pc, #132]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 801335e:	4313      	orrs	r3, r2
 8013360:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	f003 0310 	and.w	r3, r3, #16
 801336a:	2b00      	cmp	r3, #0
 801336c:	d008      	beq.n	8013380 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801336e:	4b1d      	ldr	r3, [pc, #116]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8013370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013372:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	699b      	ldr	r3, [r3, #24]
 801337a:	491a      	ldr	r1, [pc, #104]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 801337c:	4313      	orrs	r3, r2
 801337e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013388:	2b00      	cmp	r3, #0
 801338a:	d008      	beq.n	801339e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801338c:	4b15      	ldr	r3, [pc, #84]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 801338e:	685b      	ldr	r3, [r3, #4]
 8013390:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013398:	4912      	ldr	r1, [pc, #72]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 801339a:	4313      	orrs	r3, r2
 801339c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d008      	beq.n	80133bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80133aa:	4b0e      	ldr	r3, [pc, #56]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80133ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133b6:	490b      	ldr	r1, [pc, #44]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80133b8:	4313      	orrs	r3, r2
 80133ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d008      	beq.n	80133da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80133c8:	4b06      	ldr	r3, [pc, #24]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80133ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133d4:	4903      	ldr	r1, [pc, #12]	; (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80133d6:	4313      	orrs	r3, r2
 80133d8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80133da:	2300      	movs	r3, #0
}
 80133dc:	4618      	mov	r0, r3
 80133de:	3748      	adds	r7, #72	; 0x48
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd80      	pop	{r7, pc}
 80133e4:	40021000 	.word	0x40021000

080133e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b082      	sub	sp, #8
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d101      	bne.n	80133fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80133f6:	2301      	movs	r3, #1
 80133f8:	e040      	b.n	801347c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d106      	bne.n	8013410 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	2200      	movs	r2, #0
 8013406:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f7ed fe8c 	bl	8001128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	2224      	movs	r2, #36	; 0x24
 8013414:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	681a      	ldr	r2, [r3, #0]
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	f022 0201 	bic.w	r2, r2, #1
 8013424:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f000 f8c0 	bl	80135ac <UART_SetConfig>
 801342c:	4603      	mov	r3, r0
 801342e:	2b01      	cmp	r3, #1
 8013430:	d101      	bne.n	8013436 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8013432:	2301      	movs	r3, #1
 8013434:	e022      	b.n	801347c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801343a:	2b00      	cmp	r3, #0
 801343c:	d002      	beq.n	8013444 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801343e:	6878      	ldr	r0, [r7, #4]
 8013440:	f000 fa88 	bl	8013954 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	685a      	ldr	r2, [r3, #4]
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	689a      	ldr	r2, [r3, #8]
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	681a      	ldr	r2, [r3, #0]
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	f042 0201 	orr.w	r2, r2, #1
 8013472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	f000 fb0f 	bl	8013a98 <UART_CheckIdleState>
 801347a:	4603      	mov	r3, r0
}
 801347c:	4618      	mov	r0, r3
 801347e:	3708      	adds	r7, #8
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}

08013484 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b08a      	sub	sp, #40	; 0x28
 8013488:	af02      	add	r7, sp, #8
 801348a:	60f8      	str	r0, [r7, #12]
 801348c:	60b9      	str	r1, [r7, #8]
 801348e:	603b      	str	r3, [r7, #0]
 8013490:	4613      	mov	r3, r2
 8013492:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013498:	2b20      	cmp	r3, #32
 801349a:	f040 8082 	bne.w	80135a2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d002      	beq.n	80134aa <HAL_UART_Transmit+0x26>
 80134a4:	88fb      	ldrh	r3, [r7, #6]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d101      	bne.n	80134ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80134aa:	2301      	movs	r3, #1
 80134ac:	e07a      	b.n	80135a4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80134b4:	2b01      	cmp	r3, #1
 80134b6:	d101      	bne.n	80134bc <HAL_UART_Transmit+0x38>
 80134b8:	2302      	movs	r3, #2
 80134ba:	e073      	b.n	80135a4 <HAL_UART_Transmit+0x120>
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	2201      	movs	r2, #1
 80134c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	2200      	movs	r2, #0
 80134c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	2221      	movs	r2, #33	; 0x21
 80134d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80134d2:	f7fd fb9b 	bl	8010c0c <HAL_GetTick>
 80134d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	88fa      	ldrh	r2, [r7, #6]
 80134dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	88fa      	ldrh	r2, [r7, #6]
 80134e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	689b      	ldr	r3, [r3, #8]
 80134ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80134f0:	d108      	bne.n	8013504 <HAL_UART_Transmit+0x80>
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	691b      	ldr	r3, [r3, #16]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d104      	bne.n	8013504 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80134fa:	2300      	movs	r3, #0
 80134fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80134fe:	68bb      	ldr	r3, [r7, #8]
 8013500:	61bb      	str	r3, [r7, #24]
 8013502:	e003      	b.n	801350c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013508:	2300      	movs	r3, #0
 801350a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	2200      	movs	r2, #0
 8013510:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8013514:	e02d      	b.n	8013572 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	9300      	str	r3, [sp, #0]
 801351a:	697b      	ldr	r3, [r7, #20]
 801351c:	2200      	movs	r2, #0
 801351e:	2180      	movs	r1, #128	; 0x80
 8013520:	68f8      	ldr	r0, [r7, #12]
 8013522:	f000 fb02 	bl	8013b2a <UART_WaitOnFlagUntilTimeout>
 8013526:	4603      	mov	r3, r0
 8013528:	2b00      	cmp	r3, #0
 801352a:	d001      	beq.n	8013530 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 801352c:	2303      	movs	r3, #3
 801352e:	e039      	b.n	80135a4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8013530:	69fb      	ldr	r3, [r7, #28]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d10b      	bne.n	801354e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013536:	69bb      	ldr	r3, [r7, #24]
 8013538:	881a      	ldrh	r2, [r3, #0]
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013542:	b292      	uxth	r2, r2
 8013544:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8013546:	69bb      	ldr	r3, [r7, #24]
 8013548:	3302      	adds	r3, #2
 801354a:	61bb      	str	r3, [r7, #24]
 801354c:	e008      	b.n	8013560 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801354e:	69fb      	ldr	r3, [r7, #28]
 8013550:	781a      	ldrb	r2, [r3, #0]
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	b292      	uxth	r2, r2
 8013558:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801355a:	69fb      	ldr	r3, [r7, #28]
 801355c:	3301      	adds	r3, #1
 801355e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8013566:	b29b      	uxth	r3, r3
 8013568:	3b01      	subs	r3, #1
 801356a:	b29a      	uxth	r2, r3
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8013578:	b29b      	uxth	r3, r3
 801357a:	2b00      	cmp	r3, #0
 801357c:	d1cb      	bne.n	8013516 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	9300      	str	r3, [sp, #0]
 8013582:	697b      	ldr	r3, [r7, #20]
 8013584:	2200      	movs	r2, #0
 8013586:	2140      	movs	r1, #64	; 0x40
 8013588:	68f8      	ldr	r0, [r7, #12]
 801358a:	f000 face 	bl	8013b2a <UART_WaitOnFlagUntilTimeout>
 801358e:	4603      	mov	r3, r0
 8013590:	2b00      	cmp	r3, #0
 8013592:	d001      	beq.n	8013598 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8013594:	2303      	movs	r3, #3
 8013596:	e005      	b.n	80135a4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	2220      	movs	r2, #32
 801359c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 801359e:	2300      	movs	r3, #0
 80135a0:	e000      	b.n	80135a4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80135a2:	2302      	movs	r3, #2
  }
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	3720      	adds	r7, #32
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}

080135ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b088      	sub	sp, #32
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80135b4:	2300      	movs	r3, #0
 80135b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	689a      	ldr	r2, [r3, #8]
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	691b      	ldr	r3, [r3, #16]
 80135c0:	431a      	orrs	r2, r3
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	695b      	ldr	r3, [r3, #20]
 80135c6:	431a      	orrs	r2, r3
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	69db      	ldr	r3, [r3, #28]
 80135cc:	4313      	orrs	r3, r2
 80135ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80135da:	f023 030c 	bic.w	r3, r3, #12
 80135de:	687a      	ldr	r2, [r7, #4]
 80135e0:	6812      	ldr	r2, [r2, #0]
 80135e2:	6979      	ldr	r1, [r7, #20]
 80135e4:	430b      	orrs	r3, r1
 80135e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	685b      	ldr	r3, [r3, #4]
 80135ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	68da      	ldr	r2, [r3, #12]
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	430a      	orrs	r2, r1
 80135fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	699b      	ldr	r3, [r3, #24]
 8013602:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	6a1b      	ldr	r3, [r3, #32]
 8013608:	697a      	ldr	r2, [r7, #20]
 801360a:	4313      	orrs	r3, r2
 801360c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	689b      	ldr	r3, [r3, #8]
 8013614:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	697a      	ldr	r2, [r7, #20]
 801361e:	430a      	orrs	r2, r1
 8013620:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	4aae      	ldr	r2, [pc, #696]	; (80138e0 <UART_SetConfig+0x334>)
 8013628:	4293      	cmp	r3, r2
 801362a:	d120      	bne.n	801366e <UART_SetConfig+0xc2>
 801362c:	4bad      	ldr	r3, [pc, #692]	; (80138e4 <UART_SetConfig+0x338>)
 801362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013630:	f003 0303 	and.w	r3, r3, #3
 8013634:	2b03      	cmp	r3, #3
 8013636:	d817      	bhi.n	8013668 <UART_SetConfig+0xbc>
 8013638:	a201      	add	r2, pc, #4	; (adr r2, 8013640 <UART_SetConfig+0x94>)
 801363a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801363e:	bf00      	nop
 8013640:	08013651 	.word	0x08013651
 8013644:	0801365d 	.word	0x0801365d
 8013648:	08013663 	.word	0x08013663
 801364c:	08013657 	.word	0x08013657
 8013650:	2301      	movs	r3, #1
 8013652:	77fb      	strb	r3, [r7, #31]
 8013654:	e0b5      	b.n	80137c2 <UART_SetConfig+0x216>
 8013656:	2302      	movs	r3, #2
 8013658:	77fb      	strb	r3, [r7, #31]
 801365a:	e0b2      	b.n	80137c2 <UART_SetConfig+0x216>
 801365c:	2304      	movs	r3, #4
 801365e:	77fb      	strb	r3, [r7, #31]
 8013660:	e0af      	b.n	80137c2 <UART_SetConfig+0x216>
 8013662:	2308      	movs	r3, #8
 8013664:	77fb      	strb	r3, [r7, #31]
 8013666:	e0ac      	b.n	80137c2 <UART_SetConfig+0x216>
 8013668:	2310      	movs	r3, #16
 801366a:	77fb      	strb	r3, [r7, #31]
 801366c:	e0a9      	b.n	80137c2 <UART_SetConfig+0x216>
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	4a9d      	ldr	r2, [pc, #628]	; (80138e8 <UART_SetConfig+0x33c>)
 8013674:	4293      	cmp	r3, r2
 8013676:	d124      	bne.n	80136c2 <UART_SetConfig+0x116>
 8013678:	4b9a      	ldr	r3, [pc, #616]	; (80138e4 <UART_SetConfig+0x338>)
 801367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801367c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8013680:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8013684:	d011      	beq.n	80136aa <UART_SetConfig+0xfe>
 8013686:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801368a:	d817      	bhi.n	80136bc <UART_SetConfig+0x110>
 801368c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013690:	d011      	beq.n	80136b6 <UART_SetConfig+0x10a>
 8013692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013696:	d811      	bhi.n	80136bc <UART_SetConfig+0x110>
 8013698:	2b00      	cmp	r3, #0
 801369a:	d003      	beq.n	80136a4 <UART_SetConfig+0xf8>
 801369c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80136a0:	d006      	beq.n	80136b0 <UART_SetConfig+0x104>
 80136a2:	e00b      	b.n	80136bc <UART_SetConfig+0x110>
 80136a4:	2300      	movs	r3, #0
 80136a6:	77fb      	strb	r3, [r7, #31]
 80136a8:	e08b      	b.n	80137c2 <UART_SetConfig+0x216>
 80136aa:	2302      	movs	r3, #2
 80136ac:	77fb      	strb	r3, [r7, #31]
 80136ae:	e088      	b.n	80137c2 <UART_SetConfig+0x216>
 80136b0:	2304      	movs	r3, #4
 80136b2:	77fb      	strb	r3, [r7, #31]
 80136b4:	e085      	b.n	80137c2 <UART_SetConfig+0x216>
 80136b6:	2308      	movs	r3, #8
 80136b8:	77fb      	strb	r3, [r7, #31]
 80136ba:	e082      	b.n	80137c2 <UART_SetConfig+0x216>
 80136bc:	2310      	movs	r3, #16
 80136be:	77fb      	strb	r3, [r7, #31]
 80136c0:	e07f      	b.n	80137c2 <UART_SetConfig+0x216>
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	4a89      	ldr	r2, [pc, #548]	; (80138ec <UART_SetConfig+0x340>)
 80136c8:	4293      	cmp	r3, r2
 80136ca:	d124      	bne.n	8013716 <UART_SetConfig+0x16a>
 80136cc:	4b85      	ldr	r3, [pc, #532]	; (80138e4 <UART_SetConfig+0x338>)
 80136ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80136d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80136d8:	d011      	beq.n	80136fe <UART_SetConfig+0x152>
 80136da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80136de:	d817      	bhi.n	8013710 <UART_SetConfig+0x164>
 80136e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80136e4:	d011      	beq.n	801370a <UART_SetConfig+0x15e>
 80136e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80136ea:	d811      	bhi.n	8013710 <UART_SetConfig+0x164>
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d003      	beq.n	80136f8 <UART_SetConfig+0x14c>
 80136f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80136f4:	d006      	beq.n	8013704 <UART_SetConfig+0x158>
 80136f6:	e00b      	b.n	8013710 <UART_SetConfig+0x164>
 80136f8:	2300      	movs	r3, #0
 80136fa:	77fb      	strb	r3, [r7, #31]
 80136fc:	e061      	b.n	80137c2 <UART_SetConfig+0x216>
 80136fe:	2302      	movs	r3, #2
 8013700:	77fb      	strb	r3, [r7, #31]
 8013702:	e05e      	b.n	80137c2 <UART_SetConfig+0x216>
 8013704:	2304      	movs	r3, #4
 8013706:	77fb      	strb	r3, [r7, #31]
 8013708:	e05b      	b.n	80137c2 <UART_SetConfig+0x216>
 801370a:	2308      	movs	r3, #8
 801370c:	77fb      	strb	r3, [r7, #31]
 801370e:	e058      	b.n	80137c2 <UART_SetConfig+0x216>
 8013710:	2310      	movs	r3, #16
 8013712:	77fb      	strb	r3, [r7, #31]
 8013714:	e055      	b.n	80137c2 <UART_SetConfig+0x216>
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	4a75      	ldr	r2, [pc, #468]	; (80138f0 <UART_SetConfig+0x344>)
 801371c:	4293      	cmp	r3, r2
 801371e:	d124      	bne.n	801376a <UART_SetConfig+0x1be>
 8013720:	4b70      	ldr	r3, [pc, #448]	; (80138e4 <UART_SetConfig+0x338>)
 8013722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013724:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8013728:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801372c:	d011      	beq.n	8013752 <UART_SetConfig+0x1a6>
 801372e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8013732:	d817      	bhi.n	8013764 <UART_SetConfig+0x1b8>
 8013734:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013738:	d011      	beq.n	801375e <UART_SetConfig+0x1b2>
 801373a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801373e:	d811      	bhi.n	8013764 <UART_SetConfig+0x1b8>
 8013740:	2b00      	cmp	r3, #0
 8013742:	d003      	beq.n	801374c <UART_SetConfig+0x1a0>
 8013744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013748:	d006      	beq.n	8013758 <UART_SetConfig+0x1ac>
 801374a:	e00b      	b.n	8013764 <UART_SetConfig+0x1b8>
 801374c:	2300      	movs	r3, #0
 801374e:	77fb      	strb	r3, [r7, #31]
 8013750:	e037      	b.n	80137c2 <UART_SetConfig+0x216>
 8013752:	2302      	movs	r3, #2
 8013754:	77fb      	strb	r3, [r7, #31]
 8013756:	e034      	b.n	80137c2 <UART_SetConfig+0x216>
 8013758:	2304      	movs	r3, #4
 801375a:	77fb      	strb	r3, [r7, #31]
 801375c:	e031      	b.n	80137c2 <UART_SetConfig+0x216>
 801375e:	2308      	movs	r3, #8
 8013760:	77fb      	strb	r3, [r7, #31]
 8013762:	e02e      	b.n	80137c2 <UART_SetConfig+0x216>
 8013764:	2310      	movs	r3, #16
 8013766:	77fb      	strb	r3, [r7, #31]
 8013768:	e02b      	b.n	80137c2 <UART_SetConfig+0x216>
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	4a61      	ldr	r2, [pc, #388]	; (80138f4 <UART_SetConfig+0x348>)
 8013770:	4293      	cmp	r3, r2
 8013772:	d124      	bne.n	80137be <UART_SetConfig+0x212>
 8013774:	4b5b      	ldr	r3, [pc, #364]	; (80138e4 <UART_SetConfig+0x338>)
 8013776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013778:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 801377c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8013780:	d011      	beq.n	80137a6 <UART_SetConfig+0x1fa>
 8013782:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8013786:	d817      	bhi.n	80137b8 <UART_SetConfig+0x20c>
 8013788:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801378c:	d011      	beq.n	80137b2 <UART_SetConfig+0x206>
 801378e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013792:	d811      	bhi.n	80137b8 <UART_SetConfig+0x20c>
 8013794:	2b00      	cmp	r3, #0
 8013796:	d003      	beq.n	80137a0 <UART_SetConfig+0x1f4>
 8013798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801379c:	d006      	beq.n	80137ac <UART_SetConfig+0x200>
 801379e:	e00b      	b.n	80137b8 <UART_SetConfig+0x20c>
 80137a0:	2300      	movs	r3, #0
 80137a2:	77fb      	strb	r3, [r7, #31]
 80137a4:	e00d      	b.n	80137c2 <UART_SetConfig+0x216>
 80137a6:	2302      	movs	r3, #2
 80137a8:	77fb      	strb	r3, [r7, #31]
 80137aa:	e00a      	b.n	80137c2 <UART_SetConfig+0x216>
 80137ac:	2304      	movs	r3, #4
 80137ae:	77fb      	strb	r3, [r7, #31]
 80137b0:	e007      	b.n	80137c2 <UART_SetConfig+0x216>
 80137b2:	2308      	movs	r3, #8
 80137b4:	77fb      	strb	r3, [r7, #31]
 80137b6:	e004      	b.n	80137c2 <UART_SetConfig+0x216>
 80137b8:	2310      	movs	r3, #16
 80137ba:	77fb      	strb	r3, [r7, #31]
 80137bc:	e001      	b.n	80137c2 <UART_SetConfig+0x216>
 80137be:	2310      	movs	r3, #16
 80137c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	69db      	ldr	r3, [r3, #28]
 80137c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80137ca:	d15c      	bne.n	8013886 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80137cc:	7ffb      	ldrb	r3, [r7, #31]
 80137ce:	2b08      	cmp	r3, #8
 80137d0:	d827      	bhi.n	8013822 <UART_SetConfig+0x276>
 80137d2:	a201      	add	r2, pc, #4	; (adr r2, 80137d8 <UART_SetConfig+0x22c>)
 80137d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137d8:	080137fd 	.word	0x080137fd
 80137dc:	08013805 	.word	0x08013805
 80137e0:	0801380d 	.word	0x0801380d
 80137e4:	08013823 	.word	0x08013823
 80137e8:	08013813 	.word	0x08013813
 80137ec:	08013823 	.word	0x08013823
 80137f0:	08013823 	.word	0x08013823
 80137f4:	08013823 	.word	0x08013823
 80137f8:	0801381b 	.word	0x0801381b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80137fc:	f7ff fc1e 	bl	801303c <HAL_RCC_GetPCLK1Freq>
 8013800:	61b8      	str	r0, [r7, #24]
        break;
 8013802:	e013      	b.n	801382c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013804:	f7ff fc3c 	bl	8013080 <HAL_RCC_GetPCLK2Freq>
 8013808:	61b8      	str	r0, [r7, #24]
        break;
 801380a:	e00f      	b.n	801382c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801380c:	4b3a      	ldr	r3, [pc, #232]	; (80138f8 <UART_SetConfig+0x34c>)
 801380e:	61bb      	str	r3, [r7, #24]
        break;
 8013810:	e00c      	b.n	801382c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013812:	f7ff fb9d 	bl	8012f50 <HAL_RCC_GetSysClockFreq>
 8013816:	61b8      	str	r0, [r7, #24]
        break;
 8013818:	e008      	b.n	801382c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801381a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801381e:	61bb      	str	r3, [r7, #24]
        break;
 8013820:	e004      	b.n	801382c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8013822:	2300      	movs	r3, #0
 8013824:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8013826:	2301      	movs	r3, #1
 8013828:	77bb      	strb	r3, [r7, #30]
        break;
 801382a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801382c:	69bb      	ldr	r3, [r7, #24]
 801382e:	2b00      	cmp	r3, #0
 8013830:	f000 8085 	beq.w	801393e <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013834:	69bb      	ldr	r3, [r7, #24]
 8013836:	005a      	lsls	r2, r3, #1
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	685b      	ldr	r3, [r3, #4]
 801383c:	085b      	lsrs	r3, r3, #1
 801383e:	441a      	add	r2, r3
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	fbb2 f3f3 	udiv	r3, r2, r3
 8013848:	b29b      	uxth	r3, r3
 801384a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	2b0f      	cmp	r3, #15
 8013850:	d916      	bls.n	8013880 <UART_SetConfig+0x2d4>
 8013852:	693b      	ldr	r3, [r7, #16]
 8013854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013858:	d212      	bcs.n	8013880 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801385a:	693b      	ldr	r3, [r7, #16]
 801385c:	b29b      	uxth	r3, r3
 801385e:	f023 030f 	bic.w	r3, r3, #15
 8013862:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013864:	693b      	ldr	r3, [r7, #16]
 8013866:	085b      	lsrs	r3, r3, #1
 8013868:	b29b      	uxth	r3, r3
 801386a:	f003 0307 	and.w	r3, r3, #7
 801386e:	b29a      	uxth	r2, r3
 8013870:	89fb      	ldrh	r3, [r7, #14]
 8013872:	4313      	orrs	r3, r2
 8013874:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	89fa      	ldrh	r2, [r7, #14]
 801387c:	60da      	str	r2, [r3, #12]
 801387e:	e05e      	b.n	801393e <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8013880:	2301      	movs	r3, #1
 8013882:	77bb      	strb	r3, [r7, #30]
 8013884:	e05b      	b.n	801393e <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013886:	7ffb      	ldrb	r3, [r7, #31]
 8013888:	2b08      	cmp	r3, #8
 801388a:	d837      	bhi.n	80138fc <UART_SetConfig+0x350>
 801388c:	a201      	add	r2, pc, #4	; (adr r2, 8013894 <UART_SetConfig+0x2e8>)
 801388e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013892:	bf00      	nop
 8013894:	080138b9 	.word	0x080138b9
 8013898:	080138c1 	.word	0x080138c1
 801389c:	080138c9 	.word	0x080138c9
 80138a0:	080138fd 	.word	0x080138fd
 80138a4:	080138cf 	.word	0x080138cf
 80138a8:	080138fd 	.word	0x080138fd
 80138ac:	080138fd 	.word	0x080138fd
 80138b0:	080138fd 	.word	0x080138fd
 80138b4:	080138d7 	.word	0x080138d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80138b8:	f7ff fbc0 	bl	801303c <HAL_RCC_GetPCLK1Freq>
 80138bc:	61b8      	str	r0, [r7, #24]
        break;
 80138be:	e022      	b.n	8013906 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80138c0:	f7ff fbde 	bl	8013080 <HAL_RCC_GetPCLK2Freq>
 80138c4:	61b8      	str	r0, [r7, #24]
        break;
 80138c6:	e01e      	b.n	8013906 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80138c8:	4b0b      	ldr	r3, [pc, #44]	; (80138f8 <UART_SetConfig+0x34c>)
 80138ca:	61bb      	str	r3, [r7, #24]
        break;
 80138cc:	e01b      	b.n	8013906 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80138ce:	f7ff fb3f 	bl	8012f50 <HAL_RCC_GetSysClockFreq>
 80138d2:	61b8      	str	r0, [r7, #24]
        break;
 80138d4:	e017      	b.n	8013906 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80138d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80138da:	61bb      	str	r3, [r7, #24]
        break;
 80138dc:	e013      	b.n	8013906 <UART_SetConfig+0x35a>
 80138de:	bf00      	nop
 80138e0:	40013800 	.word	0x40013800
 80138e4:	40021000 	.word	0x40021000
 80138e8:	40004400 	.word	0x40004400
 80138ec:	40004800 	.word	0x40004800
 80138f0:	40004c00 	.word	0x40004c00
 80138f4:	40005000 	.word	0x40005000
 80138f8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80138fc:	2300      	movs	r3, #0
 80138fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8013900:	2301      	movs	r3, #1
 8013902:	77bb      	strb	r3, [r7, #30]
        break;
 8013904:	bf00      	nop
    }

    if (pclk != 0U)
 8013906:	69bb      	ldr	r3, [r7, #24]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d018      	beq.n	801393e <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	685b      	ldr	r3, [r3, #4]
 8013910:	085a      	lsrs	r2, r3, #1
 8013912:	69bb      	ldr	r3, [r7, #24]
 8013914:	441a      	add	r2, r3
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	685b      	ldr	r3, [r3, #4]
 801391a:	fbb2 f3f3 	udiv	r3, r2, r3
 801391e:	b29b      	uxth	r3, r3
 8013920:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	2b0f      	cmp	r3, #15
 8013926:	d908      	bls.n	801393a <UART_SetConfig+0x38e>
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801392e:	d204      	bcs.n	801393a <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	693a      	ldr	r2, [r7, #16]
 8013936:	60da      	str	r2, [r3, #12]
 8013938:	e001      	b.n	801393e <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 801393a:	2301      	movs	r3, #1
 801393c:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	2200      	movs	r2, #0
 8013942:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2200      	movs	r2, #0
 8013948:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 801394a:	7fbb      	ldrb	r3, [r7, #30]
}
 801394c:	4618      	mov	r0, r3
 801394e:	3720      	adds	r7, #32
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}

08013954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013954:	b480      	push	{r7}
 8013956:	b083      	sub	sp, #12
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013960:	f003 0301 	and.w	r3, r3, #1
 8013964:	2b00      	cmp	r3, #0
 8013966:	d00a      	beq.n	801397e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	685b      	ldr	r3, [r3, #4]
 801396e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	430a      	orrs	r2, r1
 801397c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013982:	f003 0302 	and.w	r3, r3, #2
 8013986:	2b00      	cmp	r3, #0
 8013988:	d00a      	beq.n	80139a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	685b      	ldr	r3, [r3, #4]
 8013990:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	430a      	orrs	r2, r1
 801399e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a4:	f003 0304 	and.w	r3, r3, #4
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d00a      	beq.n	80139c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	685b      	ldr	r3, [r3, #4]
 80139b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	430a      	orrs	r2, r1
 80139c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139c6:	f003 0308 	and.w	r3, r3, #8
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d00a      	beq.n	80139e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	685b      	ldr	r3, [r3, #4]
 80139d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	430a      	orrs	r2, r1
 80139e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139e8:	f003 0310 	and.w	r3, r3, #16
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d00a      	beq.n	8013a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	689b      	ldr	r3, [r3, #8]
 80139f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	430a      	orrs	r2, r1
 8013a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a0a:	f003 0320 	and.w	r3, r3, #32
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d00a      	beq.n	8013a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	689b      	ldr	r3, [r3, #8]
 8013a18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	430a      	orrs	r2, r1
 8013a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d01a      	beq.n	8013a6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	685b      	ldr	r3, [r3, #4]
 8013a3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	430a      	orrs	r2, r1
 8013a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013a52:	d10a      	bne.n	8013a6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	685b      	ldr	r3, [r3, #4]
 8013a5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	430a      	orrs	r2, r1
 8013a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d00a      	beq.n	8013a8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	685b      	ldr	r3, [r3, #4]
 8013a7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	430a      	orrs	r2, r1
 8013a8a:	605a      	str	r2, [r3, #4]
  }
}
 8013a8c:	bf00      	nop
 8013a8e:	370c      	adds	r7, #12
 8013a90:	46bd      	mov	sp, r7
 8013a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a96:	4770      	bx	lr

08013a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b086      	sub	sp, #24
 8013a9c:	af02      	add	r7, sp, #8
 8013a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013aa8:	f7fd f8b0 	bl	8010c0c <HAL_GetTick>
 8013aac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	f003 0308 	and.w	r3, r3, #8
 8013ab8:	2b08      	cmp	r3, #8
 8013aba:	d10e      	bne.n	8013ada <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013abc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013ac0:	9300      	str	r3, [sp, #0]
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013aca:	6878      	ldr	r0, [r7, #4]
 8013acc:	f000 f82d 	bl	8013b2a <UART_WaitOnFlagUntilTimeout>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d001      	beq.n	8013ada <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013ad6:	2303      	movs	r3, #3
 8013ad8:	e023      	b.n	8013b22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	f003 0304 	and.w	r3, r3, #4
 8013ae4:	2b04      	cmp	r3, #4
 8013ae6:	d10e      	bne.n	8013b06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013aec:	9300      	str	r3, [sp, #0]
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	2200      	movs	r2, #0
 8013af2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	f000 f817 	bl	8013b2a <UART_WaitOnFlagUntilTimeout>
 8013afc:	4603      	mov	r3, r0
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d001      	beq.n	8013b06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013b02:	2303      	movs	r3, #3
 8013b04:	e00d      	b.n	8013b22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	2220      	movs	r2, #32
 8013b0a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	2220      	movs	r2, #32
 8013b10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	2200      	movs	r2, #0
 8013b16:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8013b20:	2300      	movs	r3, #0
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	3710      	adds	r7, #16
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}

08013b2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013b2a:	b580      	push	{r7, lr}
 8013b2c:	b09c      	sub	sp, #112	; 0x70
 8013b2e:	af00      	add	r7, sp, #0
 8013b30:	60f8      	str	r0, [r7, #12]
 8013b32:	60b9      	str	r1, [r7, #8]
 8013b34:	603b      	str	r3, [r7, #0]
 8013b36:	4613      	mov	r3, r2
 8013b38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013b3a:	e0a5      	b.n	8013c88 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b42:	f000 80a1 	beq.w	8013c88 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013b46:	f7fd f861 	bl	8010c0c <HAL_GetTick>
 8013b4a:	4602      	mov	r2, r0
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	1ad3      	subs	r3, r2, r3
 8013b50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d302      	bcc.n	8013b5c <UART_WaitOnFlagUntilTimeout+0x32>
 8013b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d13e      	bne.n	8013bda <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b64:	e853 3f00 	ldrex	r3, [r3]
 8013b68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013b70:	667b      	str	r3, [r7, #100]	; 0x64
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	461a      	mov	r2, r3
 8013b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013b7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013b80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013b82:	e841 2300 	strex	r3, r2, [r1]
 8013b86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d1e6      	bne.n	8013b5c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	3308      	adds	r3, #8
 8013b94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b98:	e853 3f00 	ldrex	r3, [r3]
 8013b9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ba0:	f023 0301 	bic.w	r3, r3, #1
 8013ba4:	663b      	str	r3, [r7, #96]	; 0x60
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	3308      	adds	r3, #8
 8013bac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013bae:	64ba      	str	r2, [r7, #72]	; 0x48
 8013bb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013bb6:	e841 2300 	strex	r3, r2, [r1]
 8013bba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d1e5      	bne.n	8013b8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	2220      	movs	r2, #32
 8013bc6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	2220      	movs	r2, #32
 8013bcc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8013bd6:	2303      	movs	r3, #3
 8013bd8:	e067      	b.n	8013caa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	f003 0304 	and.w	r3, r3, #4
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d04f      	beq.n	8013c88 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	69db      	ldr	r3, [r3, #28]
 8013bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013bf6:	d147      	bne.n	8013c88 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013c00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c0a:	e853 3f00 	ldrex	r3, [r3]
 8013c0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013c16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	461a      	mov	r2, r3
 8013c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c20:	637b      	str	r3, [r7, #52]	; 0x34
 8013c22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c28:	e841 2300 	strex	r3, r2, [r1]
 8013c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d1e6      	bne.n	8013c02 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	3308      	adds	r3, #8
 8013c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c3c:	697b      	ldr	r3, [r7, #20]
 8013c3e:	e853 3f00 	ldrex	r3, [r3]
 8013c42:	613b      	str	r3, [r7, #16]
   return(result);
 8013c44:	693b      	ldr	r3, [r7, #16]
 8013c46:	f023 0301 	bic.w	r3, r3, #1
 8013c4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	3308      	adds	r3, #8
 8013c52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013c54:	623a      	str	r2, [r7, #32]
 8013c56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c58:	69f9      	ldr	r1, [r7, #28]
 8013c5a:	6a3a      	ldr	r2, [r7, #32]
 8013c5c:	e841 2300 	strex	r3, r2, [r1]
 8013c60:	61bb      	str	r3, [r7, #24]
   return(result);
 8013c62:	69bb      	ldr	r3, [r7, #24]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d1e5      	bne.n	8013c34 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	2220      	movs	r2, #32
 8013c6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	2220      	movs	r2, #32
 8013c72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	2220      	movs	r2, #32
 8013c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	2200      	movs	r2, #0
 8013c80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8013c84:	2303      	movs	r3, #3
 8013c86:	e010      	b.n	8013caa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	69da      	ldr	r2, [r3, #28]
 8013c8e:	68bb      	ldr	r3, [r7, #8]
 8013c90:	4013      	ands	r3, r2
 8013c92:	68ba      	ldr	r2, [r7, #8]
 8013c94:	429a      	cmp	r2, r3
 8013c96:	bf0c      	ite	eq
 8013c98:	2301      	moveq	r3, #1
 8013c9a:	2300      	movne	r3, #0
 8013c9c:	b2db      	uxtb	r3, r3
 8013c9e:	461a      	mov	r2, r3
 8013ca0:	79fb      	ldrb	r3, [r7, #7]
 8013ca2:	429a      	cmp	r2, r3
 8013ca4:	f43f af4a 	beq.w	8013b3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013ca8:	2300      	movs	r3, #0
}
 8013caa:	4618      	mov	r0, r3
 8013cac:	3770      	adds	r7, #112	; 0x70
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bd80      	pop	{r7, pc}
	...

08013cb4 <__errno>:
 8013cb4:	4b01      	ldr	r3, [pc, #4]	; (8013cbc <__errno+0x8>)
 8013cb6:	6818      	ldr	r0, [r3, #0]
 8013cb8:	4770      	bx	lr
 8013cba:	bf00      	nop
 8013cbc:	20000038 	.word	0x20000038

08013cc0 <__libc_init_array>:
 8013cc0:	b570      	push	{r4, r5, r6, lr}
 8013cc2:	4d0d      	ldr	r5, [pc, #52]	; (8013cf8 <__libc_init_array+0x38>)
 8013cc4:	4c0d      	ldr	r4, [pc, #52]	; (8013cfc <__libc_init_array+0x3c>)
 8013cc6:	1b64      	subs	r4, r4, r5
 8013cc8:	10a4      	asrs	r4, r4, #2
 8013cca:	2600      	movs	r6, #0
 8013ccc:	42a6      	cmp	r6, r4
 8013cce:	d109      	bne.n	8013ce4 <__libc_init_array+0x24>
 8013cd0:	4d0b      	ldr	r5, [pc, #44]	; (8013d00 <__libc_init_array+0x40>)
 8013cd2:	4c0c      	ldr	r4, [pc, #48]	; (8013d04 <__libc_init_array+0x44>)
 8013cd4:	f000 ff98 	bl	8014c08 <_init>
 8013cd8:	1b64      	subs	r4, r4, r5
 8013cda:	10a4      	asrs	r4, r4, #2
 8013cdc:	2600      	movs	r6, #0
 8013cde:	42a6      	cmp	r6, r4
 8013ce0:	d105      	bne.n	8013cee <__libc_init_array+0x2e>
 8013ce2:	bd70      	pop	{r4, r5, r6, pc}
 8013ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ce8:	4798      	blx	r3
 8013cea:	3601      	adds	r6, #1
 8013cec:	e7ee      	b.n	8013ccc <__libc_init_array+0xc>
 8013cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8013cf2:	4798      	blx	r3
 8013cf4:	3601      	adds	r6, #1
 8013cf6:	e7f2      	b.n	8013cde <__libc_init_array+0x1e>
 8013cf8:	08014d14 	.word	0x08014d14
 8013cfc:	08014d14 	.word	0x08014d14
 8013d00:	08014d14 	.word	0x08014d14
 8013d04:	08014d18 	.word	0x08014d18

08013d08 <memcpy>:
 8013d08:	440a      	add	r2, r1
 8013d0a:	4291      	cmp	r1, r2
 8013d0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013d10:	d100      	bne.n	8013d14 <memcpy+0xc>
 8013d12:	4770      	bx	lr
 8013d14:	b510      	push	{r4, lr}
 8013d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013d1e:	4291      	cmp	r1, r2
 8013d20:	d1f9      	bne.n	8013d16 <memcpy+0xe>
 8013d22:	bd10      	pop	{r4, pc}

08013d24 <memset>:
 8013d24:	4402      	add	r2, r0
 8013d26:	4603      	mov	r3, r0
 8013d28:	4293      	cmp	r3, r2
 8013d2a:	d100      	bne.n	8013d2e <memset+0xa>
 8013d2c:	4770      	bx	lr
 8013d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8013d32:	e7f9      	b.n	8013d28 <memset+0x4>

08013d34 <iprintf>:
 8013d34:	b40f      	push	{r0, r1, r2, r3}
 8013d36:	4b0a      	ldr	r3, [pc, #40]	; (8013d60 <iprintf+0x2c>)
 8013d38:	b513      	push	{r0, r1, r4, lr}
 8013d3a:	681c      	ldr	r4, [r3, #0]
 8013d3c:	b124      	cbz	r4, 8013d48 <iprintf+0x14>
 8013d3e:	69a3      	ldr	r3, [r4, #24]
 8013d40:	b913      	cbnz	r3, 8013d48 <iprintf+0x14>
 8013d42:	4620      	mov	r0, r4
 8013d44:	f000 f87a 	bl	8013e3c <__sinit>
 8013d48:	ab05      	add	r3, sp, #20
 8013d4a:	9a04      	ldr	r2, [sp, #16]
 8013d4c:	68a1      	ldr	r1, [r4, #8]
 8013d4e:	9301      	str	r3, [sp, #4]
 8013d50:	4620      	mov	r0, r4
 8013d52:	f000 f997 	bl	8014084 <_vfiprintf_r>
 8013d56:	b002      	add	sp, #8
 8013d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d5c:	b004      	add	sp, #16
 8013d5e:	4770      	bx	lr
 8013d60:	20000038 	.word	0x20000038

08013d64 <strncpy>:
 8013d64:	b510      	push	{r4, lr}
 8013d66:	3901      	subs	r1, #1
 8013d68:	4603      	mov	r3, r0
 8013d6a:	b132      	cbz	r2, 8013d7a <strncpy+0x16>
 8013d6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013d70:	f803 4b01 	strb.w	r4, [r3], #1
 8013d74:	3a01      	subs	r2, #1
 8013d76:	2c00      	cmp	r4, #0
 8013d78:	d1f7      	bne.n	8013d6a <strncpy+0x6>
 8013d7a:	441a      	add	r2, r3
 8013d7c:	2100      	movs	r1, #0
 8013d7e:	4293      	cmp	r3, r2
 8013d80:	d100      	bne.n	8013d84 <strncpy+0x20>
 8013d82:	bd10      	pop	{r4, pc}
 8013d84:	f803 1b01 	strb.w	r1, [r3], #1
 8013d88:	e7f9      	b.n	8013d7e <strncpy+0x1a>
	...

08013d8c <std>:
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	b510      	push	{r4, lr}
 8013d90:	4604      	mov	r4, r0
 8013d92:	e9c0 3300 	strd	r3, r3, [r0]
 8013d96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d9a:	6083      	str	r3, [r0, #8]
 8013d9c:	8181      	strh	r1, [r0, #12]
 8013d9e:	6643      	str	r3, [r0, #100]	; 0x64
 8013da0:	81c2      	strh	r2, [r0, #14]
 8013da2:	6183      	str	r3, [r0, #24]
 8013da4:	4619      	mov	r1, r3
 8013da6:	2208      	movs	r2, #8
 8013da8:	305c      	adds	r0, #92	; 0x5c
 8013daa:	f7ff ffbb 	bl	8013d24 <memset>
 8013dae:	4b05      	ldr	r3, [pc, #20]	; (8013dc4 <std+0x38>)
 8013db0:	6263      	str	r3, [r4, #36]	; 0x24
 8013db2:	4b05      	ldr	r3, [pc, #20]	; (8013dc8 <std+0x3c>)
 8013db4:	62a3      	str	r3, [r4, #40]	; 0x28
 8013db6:	4b05      	ldr	r3, [pc, #20]	; (8013dcc <std+0x40>)
 8013db8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013dba:	4b05      	ldr	r3, [pc, #20]	; (8013dd0 <std+0x44>)
 8013dbc:	6224      	str	r4, [r4, #32]
 8013dbe:	6323      	str	r3, [r4, #48]	; 0x30
 8013dc0:	bd10      	pop	{r4, pc}
 8013dc2:	bf00      	nop
 8013dc4:	0801462d 	.word	0x0801462d
 8013dc8:	0801464f 	.word	0x0801464f
 8013dcc:	08014687 	.word	0x08014687
 8013dd0:	080146ab 	.word	0x080146ab

08013dd4 <_cleanup_r>:
 8013dd4:	4901      	ldr	r1, [pc, #4]	; (8013ddc <_cleanup_r+0x8>)
 8013dd6:	f000 b8af 	b.w	8013f38 <_fwalk_reent>
 8013dda:	bf00      	nop
 8013ddc:	08014985 	.word	0x08014985

08013de0 <__sfmoreglue>:
 8013de0:	b570      	push	{r4, r5, r6, lr}
 8013de2:	1e4a      	subs	r2, r1, #1
 8013de4:	2568      	movs	r5, #104	; 0x68
 8013de6:	4355      	muls	r5, r2
 8013de8:	460e      	mov	r6, r1
 8013dea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013dee:	f000 f8c5 	bl	8013f7c <_malloc_r>
 8013df2:	4604      	mov	r4, r0
 8013df4:	b140      	cbz	r0, 8013e08 <__sfmoreglue+0x28>
 8013df6:	2100      	movs	r1, #0
 8013df8:	e9c0 1600 	strd	r1, r6, [r0]
 8013dfc:	300c      	adds	r0, #12
 8013dfe:	60a0      	str	r0, [r4, #8]
 8013e00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013e04:	f7ff ff8e 	bl	8013d24 <memset>
 8013e08:	4620      	mov	r0, r4
 8013e0a:	bd70      	pop	{r4, r5, r6, pc}

08013e0c <__sfp_lock_acquire>:
 8013e0c:	4801      	ldr	r0, [pc, #4]	; (8013e14 <__sfp_lock_acquire+0x8>)
 8013e0e:	f000 b8b3 	b.w	8013f78 <__retarget_lock_acquire_recursive>
 8013e12:	bf00      	nop
 8013e14:	20000474 	.word	0x20000474

08013e18 <__sfp_lock_release>:
 8013e18:	4801      	ldr	r0, [pc, #4]	; (8013e20 <__sfp_lock_release+0x8>)
 8013e1a:	f000 b8ae 	b.w	8013f7a <__retarget_lock_release_recursive>
 8013e1e:	bf00      	nop
 8013e20:	20000474 	.word	0x20000474

08013e24 <__sinit_lock_acquire>:
 8013e24:	4801      	ldr	r0, [pc, #4]	; (8013e2c <__sinit_lock_acquire+0x8>)
 8013e26:	f000 b8a7 	b.w	8013f78 <__retarget_lock_acquire_recursive>
 8013e2a:	bf00      	nop
 8013e2c:	2000046f 	.word	0x2000046f

08013e30 <__sinit_lock_release>:
 8013e30:	4801      	ldr	r0, [pc, #4]	; (8013e38 <__sinit_lock_release+0x8>)
 8013e32:	f000 b8a2 	b.w	8013f7a <__retarget_lock_release_recursive>
 8013e36:	bf00      	nop
 8013e38:	2000046f 	.word	0x2000046f

08013e3c <__sinit>:
 8013e3c:	b510      	push	{r4, lr}
 8013e3e:	4604      	mov	r4, r0
 8013e40:	f7ff fff0 	bl	8013e24 <__sinit_lock_acquire>
 8013e44:	69a3      	ldr	r3, [r4, #24]
 8013e46:	b11b      	cbz	r3, 8013e50 <__sinit+0x14>
 8013e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e4c:	f7ff bff0 	b.w	8013e30 <__sinit_lock_release>
 8013e50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013e54:	6523      	str	r3, [r4, #80]	; 0x50
 8013e56:	4b13      	ldr	r3, [pc, #76]	; (8013ea4 <__sinit+0x68>)
 8013e58:	4a13      	ldr	r2, [pc, #76]	; (8013ea8 <__sinit+0x6c>)
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8013e5e:	42a3      	cmp	r3, r4
 8013e60:	bf04      	itt	eq
 8013e62:	2301      	moveq	r3, #1
 8013e64:	61a3      	streq	r3, [r4, #24]
 8013e66:	4620      	mov	r0, r4
 8013e68:	f000 f820 	bl	8013eac <__sfp>
 8013e6c:	6060      	str	r0, [r4, #4]
 8013e6e:	4620      	mov	r0, r4
 8013e70:	f000 f81c 	bl	8013eac <__sfp>
 8013e74:	60a0      	str	r0, [r4, #8]
 8013e76:	4620      	mov	r0, r4
 8013e78:	f000 f818 	bl	8013eac <__sfp>
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	60e0      	str	r0, [r4, #12]
 8013e80:	2104      	movs	r1, #4
 8013e82:	6860      	ldr	r0, [r4, #4]
 8013e84:	f7ff ff82 	bl	8013d8c <std>
 8013e88:	68a0      	ldr	r0, [r4, #8]
 8013e8a:	2201      	movs	r2, #1
 8013e8c:	2109      	movs	r1, #9
 8013e8e:	f7ff ff7d 	bl	8013d8c <std>
 8013e92:	68e0      	ldr	r0, [r4, #12]
 8013e94:	2202      	movs	r2, #2
 8013e96:	2112      	movs	r1, #18
 8013e98:	f7ff ff78 	bl	8013d8c <std>
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	61a3      	str	r3, [r4, #24]
 8013ea0:	e7d2      	b.n	8013e48 <__sinit+0xc>
 8013ea2:	bf00      	nop
 8013ea4:	08014c74 	.word	0x08014c74
 8013ea8:	08013dd5 	.word	0x08013dd5

08013eac <__sfp>:
 8013eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eae:	4607      	mov	r7, r0
 8013eb0:	f7ff ffac 	bl	8013e0c <__sfp_lock_acquire>
 8013eb4:	4b1e      	ldr	r3, [pc, #120]	; (8013f30 <__sfp+0x84>)
 8013eb6:	681e      	ldr	r6, [r3, #0]
 8013eb8:	69b3      	ldr	r3, [r6, #24]
 8013eba:	b913      	cbnz	r3, 8013ec2 <__sfp+0x16>
 8013ebc:	4630      	mov	r0, r6
 8013ebe:	f7ff ffbd 	bl	8013e3c <__sinit>
 8013ec2:	3648      	adds	r6, #72	; 0x48
 8013ec4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013ec8:	3b01      	subs	r3, #1
 8013eca:	d503      	bpl.n	8013ed4 <__sfp+0x28>
 8013ecc:	6833      	ldr	r3, [r6, #0]
 8013ece:	b30b      	cbz	r3, 8013f14 <__sfp+0x68>
 8013ed0:	6836      	ldr	r6, [r6, #0]
 8013ed2:	e7f7      	b.n	8013ec4 <__sfp+0x18>
 8013ed4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013ed8:	b9d5      	cbnz	r5, 8013f10 <__sfp+0x64>
 8013eda:	4b16      	ldr	r3, [pc, #88]	; (8013f34 <__sfp+0x88>)
 8013edc:	60e3      	str	r3, [r4, #12]
 8013ede:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013ee2:	6665      	str	r5, [r4, #100]	; 0x64
 8013ee4:	f000 f847 	bl	8013f76 <__retarget_lock_init_recursive>
 8013ee8:	f7ff ff96 	bl	8013e18 <__sfp_lock_release>
 8013eec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013ef0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013ef4:	6025      	str	r5, [r4, #0]
 8013ef6:	61a5      	str	r5, [r4, #24]
 8013ef8:	2208      	movs	r2, #8
 8013efa:	4629      	mov	r1, r5
 8013efc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013f00:	f7ff ff10 	bl	8013d24 <memset>
 8013f04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013f08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013f0c:	4620      	mov	r0, r4
 8013f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f10:	3468      	adds	r4, #104	; 0x68
 8013f12:	e7d9      	b.n	8013ec8 <__sfp+0x1c>
 8013f14:	2104      	movs	r1, #4
 8013f16:	4638      	mov	r0, r7
 8013f18:	f7ff ff62 	bl	8013de0 <__sfmoreglue>
 8013f1c:	4604      	mov	r4, r0
 8013f1e:	6030      	str	r0, [r6, #0]
 8013f20:	2800      	cmp	r0, #0
 8013f22:	d1d5      	bne.n	8013ed0 <__sfp+0x24>
 8013f24:	f7ff ff78 	bl	8013e18 <__sfp_lock_release>
 8013f28:	230c      	movs	r3, #12
 8013f2a:	603b      	str	r3, [r7, #0]
 8013f2c:	e7ee      	b.n	8013f0c <__sfp+0x60>
 8013f2e:	bf00      	nop
 8013f30:	08014c74 	.word	0x08014c74
 8013f34:	ffff0001 	.word	0xffff0001

08013f38 <_fwalk_reent>:
 8013f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f3c:	4606      	mov	r6, r0
 8013f3e:	4688      	mov	r8, r1
 8013f40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013f44:	2700      	movs	r7, #0
 8013f46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013f4a:	f1b9 0901 	subs.w	r9, r9, #1
 8013f4e:	d505      	bpl.n	8013f5c <_fwalk_reent+0x24>
 8013f50:	6824      	ldr	r4, [r4, #0]
 8013f52:	2c00      	cmp	r4, #0
 8013f54:	d1f7      	bne.n	8013f46 <_fwalk_reent+0xe>
 8013f56:	4638      	mov	r0, r7
 8013f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f5c:	89ab      	ldrh	r3, [r5, #12]
 8013f5e:	2b01      	cmp	r3, #1
 8013f60:	d907      	bls.n	8013f72 <_fwalk_reent+0x3a>
 8013f62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013f66:	3301      	adds	r3, #1
 8013f68:	d003      	beq.n	8013f72 <_fwalk_reent+0x3a>
 8013f6a:	4629      	mov	r1, r5
 8013f6c:	4630      	mov	r0, r6
 8013f6e:	47c0      	blx	r8
 8013f70:	4307      	orrs	r7, r0
 8013f72:	3568      	adds	r5, #104	; 0x68
 8013f74:	e7e9      	b.n	8013f4a <_fwalk_reent+0x12>

08013f76 <__retarget_lock_init_recursive>:
 8013f76:	4770      	bx	lr

08013f78 <__retarget_lock_acquire_recursive>:
 8013f78:	4770      	bx	lr

08013f7a <__retarget_lock_release_recursive>:
 8013f7a:	4770      	bx	lr

08013f7c <_malloc_r>:
 8013f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f7e:	1ccd      	adds	r5, r1, #3
 8013f80:	f025 0503 	bic.w	r5, r5, #3
 8013f84:	3508      	adds	r5, #8
 8013f86:	2d0c      	cmp	r5, #12
 8013f88:	bf38      	it	cc
 8013f8a:	250c      	movcc	r5, #12
 8013f8c:	2d00      	cmp	r5, #0
 8013f8e:	4606      	mov	r6, r0
 8013f90:	db01      	blt.n	8013f96 <_malloc_r+0x1a>
 8013f92:	42a9      	cmp	r1, r5
 8013f94:	d903      	bls.n	8013f9e <_malloc_r+0x22>
 8013f96:	230c      	movs	r3, #12
 8013f98:	6033      	str	r3, [r6, #0]
 8013f9a:	2000      	movs	r0, #0
 8013f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f9e:	f000 fda3 	bl	8014ae8 <__malloc_lock>
 8013fa2:	4921      	ldr	r1, [pc, #132]	; (8014028 <_malloc_r+0xac>)
 8013fa4:	680a      	ldr	r2, [r1, #0]
 8013fa6:	4614      	mov	r4, r2
 8013fa8:	b99c      	cbnz	r4, 8013fd2 <_malloc_r+0x56>
 8013faa:	4f20      	ldr	r7, [pc, #128]	; (801402c <_malloc_r+0xb0>)
 8013fac:	683b      	ldr	r3, [r7, #0]
 8013fae:	b923      	cbnz	r3, 8013fba <_malloc_r+0x3e>
 8013fb0:	4621      	mov	r1, r4
 8013fb2:	4630      	mov	r0, r6
 8013fb4:	f000 fb2a 	bl	801460c <_sbrk_r>
 8013fb8:	6038      	str	r0, [r7, #0]
 8013fba:	4629      	mov	r1, r5
 8013fbc:	4630      	mov	r0, r6
 8013fbe:	f000 fb25 	bl	801460c <_sbrk_r>
 8013fc2:	1c43      	adds	r3, r0, #1
 8013fc4:	d123      	bne.n	801400e <_malloc_r+0x92>
 8013fc6:	230c      	movs	r3, #12
 8013fc8:	6033      	str	r3, [r6, #0]
 8013fca:	4630      	mov	r0, r6
 8013fcc:	f000 fd92 	bl	8014af4 <__malloc_unlock>
 8013fd0:	e7e3      	b.n	8013f9a <_malloc_r+0x1e>
 8013fd2:	6823      	ldr	r3, [r4, #0]
 8013fd4:	1b5b      	subs	r3, r3, r5
 8013fd6:	d417      	bmi.n	8014008 <_malloc_r+0x8c>
 8013fd8:	2b0b      	cmp	r3, #11
 8013fda:	d903      	bls.n	8013fe4 <_malloc_r+0x68>
 8013fdc:	6023      	str	r3, [r4, #0]
 8013fde:	441c      	add	r4, r3
 8013fe0:	6025      	str	r5, [r4, #0]
 8013fe2:	e004      	b.n	8013fee <_malloc_r+0x72>
 8013fe4:	6863      	ldr	r3, [r4, #4]
 8013fe6:	42a2      	cmp	r2, r4
 8013fe8:	bf0c      	ite	eq
 8013fea:	600b      	streq	r3, [r1, #0]
 8013fec:	6053      	strne	r3, [r2, #4]
 8013fee:	4630      	mov	r0, r6
 8013ff0:	f000 fd80 	bl	8014af4 <__malloc_unlock>
 8013ff4:	f104 000b 	add.w	r0, r4, #11
 8013ff8:	1d23      	adds	r3, r4, #4
 8013ffa:	f020 0007 	bic.w	r0, r0, #7
 8013ffe:	1ac2      	subs	r2, r0, r3
 8014000:	d0cc      	beq.n	8013f9c <_malloc_r+0x20>
 8014002:	1a1b      	subs	r3, r3, r0
 8014004:	50a3      	str	r3, [r4, r2]
 8014006:	e7c9      	b.n	8013f9c <_malloc_r+0x20>
 8014008:	4622      	mov	r2, r4
 801400a:	6864      	ldr	r4, [r4, #4]
 801400c:	e7cc      	b.n	8013fa8 <_malloc_r+0x2c>
 801400e:	1cc4      	adds	r4, r0, #3
 8014010:	f024 0403 	bic.w	r4, r4, #3
 8014014:	42a0      	cmp	r0, r4
 8014016:	d0e3      	beq.n	8013fe0 <_malloc_r+0x64>
 8014018:	1a21      	subs	r1, r4, r0
 801401a:	4630      	mov	r0, r6
 801401c:	f000 faf6 	bl	801460c <_sbrk_r>
 8014020:	3001      	adds	r0, #1
 8014022:	d1dd      	bne.n	8013fe0 <_malloc_r+0x64>
 8014024:	e7cf      	b.n	8013fc6 <_malloc_r+0x4a>
 8014026:	bf00      	nop
 8014028:	200000c0 	.word	0x200000c0
 801402c:	200000c4 	.word	0x200000c4

08014030 <__sfputc_r>:
 8014030:	6893      	ldr	r3, [r2, #8]
 8014032:	3b01      	subs	r3, #1
 8014034:	2b00      	cmp	r3, #0
 8014036:	b410      	push	{r4}
 8014038:	6093      	str	r3, [r2, #8]
 801403a:	da08      	bge.n	801404e <__sfputc_r+0x1e>
 801403c:	6994      	ldr	r4, [r2, #24]
 801403e:	42a3      	cmp	r3, r4
 8014040:	db01      	blt.n	8014046 <__sfputc_r+0x16>
 8014042:	290a      	cmp	r1, #10
 8014044:	d103      	bne.n	801404e <__sfputc_r+0x1e>
 8014046:	f85d 4b04 	ldr.w	r4, [sp], #4
 801404a:	f000 bb33 	b.w	80146b4 <__swbuf_r>
 801404e:	6813      	ldr	r3, [r2, #0]
 8014050:	1c58      	adds	r0, r3, #1
 8014052:	6010      	str	r0, [r2, #0]
 8014054:	7019      	strb	r1, [r3, #0]
 8014056:	4608      	mov	r0, r1
 8014058:	f85d 4b04 	ldr.w	r4, [sp], #4
 801405c:	4770      	bx	lr

0801405e <__sfputs_r>:
 801405e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014060:	4606      	mov	r6, r0
 8014062:	460f      	mov	r7, r1
 8014064:	4614      	mov	r4, r2
 8014066:	18d5      	adds	r5, r2, r3
 8014068:	42ac      	cmp	r4, r5
 801406a:	d101      	bne.n	8014070 <__sfputs_r+0x12>
 801406c:	2000      	movs	r0, #0
 801406e:	e007      	b.n	8014080 <__sfputs_r+0x22>
 8014070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014074:	463a      	mov	r2, r7
 8014076:	4630      	mov	r0, r6
 8014078:	f7ff ffda 	bl	8014030 <__sfputc_r>
 801407c:	1c43      	adds	r3, r0, #1
 801407e:	d1f3      	bne.n	8014068 <__sfputs_r+0xa>
 8014080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014084 <_vfiprintf_r>:
 8014084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014088:	460d      	mov	r5, r1
 801408a:	b09d      	sub	sp, #116	; 0x74
 801408c:	4614      	mov	r4, r2
 801408e:	4698      	mov	r8, r3
 8014090:	4606      	mov	r6, r0
 8014092:	b118      	cbz	r0, 801409c <_vfiprintf_r+0x18>
 8014094:	6983      	ldr	r3, [r0, #24]
 8014096:	b90b      	cbnz	r3, 801409c <_vfiprintf_r+0x18>
 8014098:	f7ff fed0 	bl	8013e3c <__sinit>
 801409c:	4b89      	ldr	r3, [pc, #548]	; (80142c4 <_vfiprintf_r+0x240>)
 801409e:	429d      	cmp	r5, r3
 80140a0:	d11b      	bne.n	80140da <_vfiprintf_r+0x56>
 80140a2:	6875      	ldr	r5, [r6, #4]
 80140a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80140a6:	07d9      	lsls	r1, r3, #31
 80140a8:	d405      	bmi.n	80140b6 <_vfiprintf_r+0x32>
 80140aa:	89ab      	ldrh	r3, [r5, #12]
 80140ac:	059a      	lsls	r2, r3, #22
 80140ae:	d402      	bmi.n	80140b6 <_vfiprintf_r+0x32>
 80140b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80140b2:	f7ff ff61 	bl	8013f78 <__retarget_lock_acquire_recursive>
 80140b6:	89ab      	ldrh	r3, [r5, #12]
 80140b8:	071b      	lsls	r3, r3, #28
 80140ba:	d501      	bpl.n	80140c0 <_vfiprintf_r+0x3c>
 80140bc:	692b      	ldr	r3, [r5, #16]
 80140be:	b9eb      	cbnz	r3, 80140fc <_vfiprintf_r+0x78>
 80140c0:	4629      	mov	r1, r5
 80140c2:	4630      	mov	r0, r6
 80140c4:	f000 fb5a 	bl	801477c <__swsetup_r>
 80140c8:	b1c0      	cbz	r0, 80140fc <_vfiprintf_r+0x78>
 80140ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80140cc:	07dc      	lsls	r4, r3, #31
 80140ce:	d50e      	bpl.n	80140ee <_vfiprintf_r+0x6a>
 80140d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140d4:	b01d      	add	sp, #116	; 0x74
 80140d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140da:	4b7b      	ldr	r3, [pc, #492]	; (80142c8 <_vfiprintf_r+0x244>)
 80140dc:	429d      	cmp	r5, r3
 80140de:	d101      	bne.n	80140e4 <_vfiprintf_r+0x60>
 80140e0:	68b5      	ldr	r5, [r6, #8]
 80140e2:	e7df      	b.n	80140a4 <_vfiprintf_r+0x20>
 80140e4:	4b79      	ldr	r3, [pc, #484]	; (80142cc <_vfiprintf_r+0x248>)
 80140e6:	429d      	cmp	r5, r3
 80140e8:	bf08      	it	eq
 80140ea:	68f5      	ldreq	r5, [r6, #12]
 80140ec:	e7da      	b.n	80140a4 <_vfiprintf_r+0x20>
 80140ee:	89ab      	ldrh	r3, [r5, #12]
 80140f0:	0598      	lsls	r0, r3, #22
 80140f2:	d4ed      	bmi.n	80140d0 <_vfiprintf_r+0x4c>
 80140f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80140f6:	f7ff ff40 	bl	8013f7a <__retarget_lock_release_recursive>
 80140fa:	e7e9      	b.n	80140d0 <_vfiprintf_r+0x4c>
 80140fc:	2300      	movs	r3, #0
 80140fe:	9309      	str	r3, [sp, #36]	; 0x24
 8014100:	2320      	movs	r3, #32
 8014102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014106:	f8cd 800c 	str.w	r8, [sp, #12]
 801410a:	2330      	movs	r3, #48	; 0x30
 801410c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80142d0 <_vfiprintf_r+0x24c>
 8014110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014114:	f04f 0901 	mov.w	r9, #1
 8014118:	4623      	mov	r3, r4
 801411a:	469a      	mov	sl, r3
 801411c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014120:	b10a      	cbz	r2, 8014126 <_vfiprintf_r+0xa2>
 8014122:	2a25      	cmp	r2, #37	; 0x25
 8014124:	d1f9      	bne.n	801411a <_vfiprintf_r+0x96>
 8014126:	ebba 0b04 	subs.w	fp, sl, r4
 801412a:	d00b      	beq.n	8014144 <_vfiprintf_r+0xc0>
 801412c:	465b      	mov	r3, fp
 801412e:	4622      	mov	r2, r4
 8014130:	4629      	mov	r1, r5
 8014132:	4630      	mov	r0, r6
 8014134:	f7ff ff93 	bl	801405e <__sfputs_r>
 8014138:	3001      	adds	r0, #1
 801413a:	f000 80aa 	beq.w	8014292 <_vfiprintf_r+0x20e>
 801413e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014140:	445a      	add	r2, fp
 8014142:	9209      	str	r2, [sp, #36]	; 0x24
 8014144:	f89a 3000 	ldrb.w	r3, [sl]
 8014148:	2b00      	cmp	r3, #0
 801414a:	f000 80a2 	beq.w	8014292 <_vfiprintf_r+0x20e>
 801414e:	2300      	movs	r3, #0
 8014150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014158:	f10a 0a01 	add.w	sl, sl, #1
 801415c:	9304      	str	r3, [sp, #16]
 801415e:	9307      	str	r3, [sp, #28]
 8014160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014164:	931a      	str	r3, [sp, #104]	; 0x68
 8014166:	4654      	mov	r4, sl
 8014168:	2205      	movs	r2, #5
 801416a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801416e:	4858      	ldr	r0, [pc, #352]	; (80142d0 <_vfiprintf_r+0x24c>)
 8014170:	f7ec f82e 	bl	80001d0 <memchr>
 8014174:	9a04      	ldr	r2, [sp, #16]
 8014176:	b9d8      	cbnz	r0, 80141b0 <_vfiprintf_r+0x12c>
 8014178:	06d1      	lsls	r1, r2, #27
 801417a:	bf44      	itt	mi
 801417c:	2320      	movmi	r3, #32
 801417e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014182:	0713      	lsls	r3, r2, #28
 8014184:	bf44      	itt	mi
 8014186:	232b      	movmi	r3, #43	; 0x2b
 8014188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801418c:	f89a 3000 	ldrb.w	r3, [sl]
 8014190:	2b2a      	cmp	r3, #42	; 0x2a
 8014192:	d015      	beq.n	80141c0 <_vfiprintf_r+0x13c>
 8014194:	9a07      	ldr	r2, [sp, #28]
 8014196:	4654      	mov	r4, sl
 8014198:	2000      	movs	r0, #0
 801419a:	f04f 0c0a 	mov.w	ip, #10
 801419e:	4621      	mov	r1, r4
 80141a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80141a4:	3b30      	subs	r3, #48	; 0x30
 80141a6:	2b09      	cmp	r3, #9
 80141a8:	d94e      	bls.n	8014248 <_vfiprintf_r+0x1c4>
 80141aa:	b1b0      	cbz	r0, 80141da <_vfiprintf_r+0x156>
 80141ac:	9207      	str	r2, [sp, #28]
 80141ae:	e014      	b.n	80141da <_vfiprintf_r+0x156>
 80141b0:	eba0 0308 	sub.w	r3, r0, r8
 80141b4:	fa09 f303 	lsl.w	r3, r9, r3
 80141b8:	4313      	orrs	r3, r2
 80141ba:	9304      	str	r3, [sp, #16]
 80141bc:	46a2      	mov	sl, r4
 80141be:	e7d2      	b.n	8014166 <_vfiprintf_r+0xe2>
 80141c0:	9b03      	ldr	r3, [sp, #12]
 80141c2:	1d19      	adds	r1, r3, #4
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	9103      	str	r1, [sp, #12]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	bfbb      	ittet	lt
 80141cc:	425b      	neglt	r3, r3
 80141ce:	f042 0202 	orrlt.w	r2, r2, #2
 80141d2:	9307      	strge	r3, [sp, #28]
 80141d4:	9307      	strlt	r3, [sp, #28]
 80141d6:	bfb8      	it	lt
 80141d8:	9204      	strlt	r2, [sp, #16]
 80141da:	7823      	ldrb	r3, [r4, #0]
 80141dc:	2b2e      	cmp	r3, #46	; 0x2e
 80141de:	d10c      	bne.n	80141fa <_vfiprintf_r+0x176>
 80141e0:	7863      	ldrb	r3, [r4, #1]
 80141e2:	2b2a      	cmp	r3, #42	; 0x2a
 80141e4:	d135      	bne.n	8014252 <_vfiprintf_r+0x1ce>
 80141e6:	9b03      	ldr	r3, [sp, #12]
 80141e8:	1d1a      	adds	r2, r3, #4
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	9203      	str	r2, [sp, #12]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	bfb8      	it	lt
 80141f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80141f6:	3402      	adds	r4, #2
 80141f8:	9305      	str	r3, [sp, #20]
 80141fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80142e0 <_vfiprintf_r+0x25c>
 80141fe:	7821      	ldrb	r1, [r4, #0]
 8014200:	2203      	movs	r2, #3
 8014202:	4650      	mov	r0, sl
 8014204:	f7eb ffe4 	bl	80001d0 <memchr>
 8014208:	b140      	cbz	r0, 801421c <_vfiprintf_r+0x198>
 801420a:	2340      	movs	r3, #64	; 0x40
 801420c:	eba0 000a 	sub.w	r0, r0, sl
 8014210:	fa03 f000 	lsl.w	r0, r3, r0
 8014214:	9b04      	ldr	r3, [sp, #16]
 8014216:	4303      	orrs	r3, r0
 8014218:	3401      	adds	r4, #1
 801421a:	9304      	str	r3, [sp, #16]
 801421c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014220:	482c      	ldr	r0, [pc, #176]	; (80142d4 <_vfiprintf_r+0x250>)
 8014222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014226:	2206      	movs	r2, #6
 8014228:	f7eb ffd2 	bl	80001d0 <memchr>
 801422c:	2800      	cmp	r0, #0
 801422e:	d03f      	beq.n	80142b0 <_vfiprintf_r+0x22c>
 8014230:	4b29      	ldr	r3, [pc, #164]	; (80142d8 <_vfiprintf_r+0x254>)
 8014232:	bb1b      	cbnz	r3, 801427c <_vfiprintf_r+0x1f8>
 8014234:	9b03      	ldr	r3, [sp, #12]
 8014236:	3307      	adds	r3, #7
 8014238:	f023 0307 	bic.w	r3, r3, #7
 801423c:	3308      	adds	r3, #8
 801423e:	9303      	str	r3, [sp, #12]
 8014240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014242:	443b      	add	r3, r7
 8014244:	9309      	str	r3, [sp, #36]	; 0x24
 8014246:	e767      	b.n	8014118 <_vfiprintf_r+0x94>
 8014248:	fb0c 3202 	mla	r2, ip, r2, r3
 801424c:	460c      	mov	r4, r1
 801424e:	2001      	movs	r0, #1
 8014250:	e7a5      	b.n	801419e <_vfiprintf_r+0x11a>
 8014252:	2300      	movs	r3, #0
 8014254:	3401      	adds	r4, #1
 8014256:	9305      	str	r3, [sp, #20]
 8014258:	4619      	mov	r1, r3
 801425a:	f04f 0c0a 	mov.w	ip, #10
 801425e:	4620      	mov	r0, r4
 8014260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014264:	3a30      	subs	r2, #48	; 0x30
 8014266:	2a09      	cmp	r2, #9
 8014268:	d903      	bls.n	8014272 <_vfiprintf_r+0x1ee>
 801426a:	2b00      	cmp	r3, #0
 801426c:	d0c5      	beq.n	80141fa <_vfiprintf_r+0x176>
 801426e:	9105      	str	r1, [sp, #20]
 8014270:	e7c3      	b.n	80141fa <_vfiprintf_r+0x176>
 8014272:	fb0c 2101 	mla	r1, ip, r1, r2
 8014276:	4604      	mov	r4, r0
 8014278:	2301      	movs	r3, #1
 801427a:	e7f0      	b.n	801425e <_vfiprintf_r+0x1da>
 801427c:	ab03      	add	r3, sp, #12
 801427e:	9300      	str	r3, [sp, #0]
 8014280:	462a      	mov	r2, r5
 8014282:	4b16      	ldr	r3, [pc, #88]	; (80142dc <_vfiprintf_r+0x258>)
 8014284:	a904      	add	r1, sp, #16
 8014286:	4630      	mov	r0, r6
 8014288:	f3af 8000 	nop.w
 801428c:	4607      	mov	r7, r0
 801428e:	1c78      	adds	r0, r7, #1
 8014290:	d1d6      	bne.n	8014240 <_vfiprintf_r+0x1bc>
 8014292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014294:	07d9      	lsls	r1, r3, #31
 8014296:	d405      	bmi.n	80142a4 <_vfiprintf_r+0x220>
 8014298:	89ab      	ldrh	r3, [r5, #12]
 801429a:	059a      	lsls	r2, r3, #22
 801429c:	d402      	bmi.n	80142a4 <_vfiprintf_r+0x220>
 801429e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80142a0:	f7ff fe6b 	bl	8013f7a <__retarget_lock_release_recursive>
 80142a4:	89ab      	ldrh	r3, [r5, #12]
 80142a6:	065b      	lsls	r3, r3, #25
 80142a8:	f53f af12 	bmi.w	80140d0 <_vfiprintf_r+0x4c>
 80142ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80142ae:	e711      	b.n	80140d4 <_vfiprintf_r+0x50>
 80142b0:	ab03      	add	r3, sp, #12
 80142b2:	9300      	str	r3, [sp, #0]
 80142b4:	462a      	mov	r2, r5
 80142b6:	4b09      	ldr	r3, [pc, #36]	; (80142dc <_vfiprintf_r+0x258>)
 80142b8:	a904      	add	r1, sp, #16
 80142ba:	4630      	mov	r0, r6
 80142bc:	f000 f880 	bl	80143c0 <_printf_i>
 80142c0:	e7e4      	b.n	801428c <_vfiprintf_r+0x208>
 80142c2:	bf00      	nop
 80142c4:	08014c98 	.word	0x08014c98
 80142c8:	08014cb8 	.word	0x08014cb8
 80142cc:	08014c78 	.word	0x08014c78
 80142d0:	08014cd8 	.word	0x08014cd8
 80142d4:	08014ce2 	.word	0x08014ce2
 80142d8:	00000000 	.word	0x00000000
 80142dc:	0801405f 	.word	0x0801405f
 80142e0:	08014cde 	.word	0x08014cde

080142e4 <_printf_common>:
 80142e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142e8:	4616      	mov	r6, r2
 80142ea:	4699      	mov	r9, r3
 80142ec:	688a      	ldr	r2, [r1, #8]
 80142ee:	690b      	ldr	r3, [r1, #16]
 80142f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80142f4:	4293      	cmp	r3, r2
 80142f6:	bfb8      	it	lt
 80142f8:	4613      	movlt	r3, r2
 80142fa:	6033      	str	r3, [r6, #0]
 80142fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014300:	4607      	mov	r7, r0
 8014302:	460c      	mov	r4, r1
 8014304:	b10a      	cbz	r2, 801430a <_printf_common+0x26>
 8014306:	3301      	adds	r3, #1
 8014308:	6033      	str	r3, [r6, #0]
 801430a:	6823      	ldr	r3, [r4, #0]
 801430c:	0699      	lsls	r1, r3, #26
 801430e:	bf42      	ittt	mi
 8014310:	6833      	ldrmi	r3, [r6, #0]
 8014312:	3302      	addmi	r3, #2
 8014314:	6033      	strmi	r3, [r6, #0]
 8014316:	6825      	ldr	r5, [r4, #0]
 8014318:	f015 0506 	ands.w	r5, r5, #6
 801431c:	d106      	bne.n	801432c <_printf_common+0x48>
 801431e:	f104 0a19 	add.w	sl, r4, #25
 8014322:	68e3      	ldr	r3, [r4, #12]
 8014324:	6832      	ldr	r2, [r6, #0]
 8014326:	1a9b      	subs	r3, r3, r2
 8014328:	42ab      	cmp	r3, r5
 801432a:	dc26      	bgt.n	801437a <_printf_common+0x96>
 801432c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014330:	1e13      	subs	r3, r2, #0
 8014332:	6822      	ldr	r2, [r4, #0]
 8014334:	bf18      	it	ne
 8014336:	2301      	movne	r3, #1
 8014338:	0692      	lsls	r2, r2, #26
 801433a:	d42b      	bmi.n	8014394 <_printf_common+0xb0>
 801433c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014340:	4649      	mov	r1, r9
 8014342:	4638      	mov	r0, r7
 8014344:	47c0      	blx	r8
 8014346:	3001      	adds	r0, #1
 8014348:	d01e      	beq.n	8014388 <_printf_common+0xa4>
 801434a:	6823      	ldr	r3, [r4, #0]
 801434c:	68e5      	ldr	r5, [r4, #12]
 801434e:	6832      	ldr	r2, [r6, #0]
 8014350:	f003 0306 	and.w	r3, r3, #6
 8014354:	2b04      	cmp	r3, #4
 8014356:	bf08      	it	eq
 8014358:	1aad      	subeq	r5, r5, r2
 801435a:	68a3      	ldr	r3, [r4, #8]
 801435c:	6922      	ldr	r2, [r4, #16]
 801435e:	bf0c      	ite	eq
 8014360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014364:	2500      	movne	r5, #0
 8014366:	4293      	cmp	r3, r2
 8014368:	bfc4      	itt	gt
 801436a:	1a9b      	subgt	r3, r3, r2
 801436c:	18ed      	addgt	r5, r5, r3
 801436e:	2600      	movs	r6, #0
 8014370:	341a      	adds	r4, #26
 8014372:	42b5      	cmp	r5, r6
 8014374:	d11a      	bne.n	80143ac <_printf_common+0xc8>
 8014376:	2000      	movs	r0, #0
 8014378:	e008      	b.n	801438c <_printf_common+0xa8>
 801437a:	2301      	movs	r3, #1
 801437c:	4652      	mov	r2, sl
 801437e:	4649      	mov	r1, r9
 8014380:	4638      	mov	r0, r7
 8014382:	47c0      	blx	r8
 8014384:	3001      	adds	r0, #1
 8014386:	d103      	bne.n	8014390 <_printf_common+0xac>
 8014388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801438c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014390:	3501      	adds	r5, #1
 8014392:	e7c6      	b.n	8014322 <_printf_common+0x3e>
 8014394:	18e1      	adds	r1, r4, r3
 8014396:	1c5a      	adds	r2, r3, #1
 8014398:	2030      	movs	r0, #48	; 0x30
 801439a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801439e:	4422      	add	r2, r4
 80143a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80143a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80143a8:	3302      	adds	r3, #2
 80143aa:	e7c7      	b.n	801433c <_printf_common+0x58>
 80143ac:	2301      	movs	r3, #1
 80143ae:	4622      	mov	r2, r4
 80143b0:	4649      	mov	r1, r9
 80143b2:	4638      	mov	r0, r7
 80143b4:	47c0      	blx	r8
 80143b6:	3001      	adds	r0, #1
 80143b8:	d0e6      	beq.n	8014388 <_printf_common+0xa4>
 80143ba:	3601      	adds	r6, #1
 80143bc:	e7d9      	b.n	8014372 <_printf_common+0x8e>
	...

080143c0 <_printf_i>:
 80143c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80143c4:	460c      	mov	r4, r1
 80143c6:	4691      	mov	r9, r2
 80143c8:	7e27      	ldrb	r7, [r4, #24]
 80143ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80143cc:	2f78      	cmp	r7, #120	; 0x78
 80143ce:	4680      	mov	r8, r0
 80143d0:	469a      	mov	sl, r3
 80143d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80143d6:	d807      	bhi.n	80143e8 <_printf_i+0x28>
 80143d8:	2f62      	cmp	r7, #98	; 0x62
 80143da:	d80a      	bhi.n	80143f2 <_printf_i+0x32>
 80143dc:	2f00      	cmp	r7, #0
 80143de:	f000 80d8 	beq.w	8014592 <_printf_i+0x1d2>
 80143e2:	2f58      	cmp	r7, #88	; 0x58
 80143e4:	f000 80a3 	beq.w	801452e <_printf_i+0x16e>
 80143e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80143ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80143f0:	e03a      	b.n	8014468 <_printf_i+0xa8>
 80143f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80143f6:	2b15      	cmp	r3, #21
 80143f8:	d8f6      	bhi.n	80143e8 <_printf_i+0x28>
 80143fa:	a001      	add	r0, pc, #4	; (adr r0, 8014400 <_printf_i+0x40>)
 80143fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014400:	08014459 	.word	0x08014459
 8014404:	0801446d 	.word	0x0801446d
 8014408:	080143e9 	.word	0x080143e9
 801440c:	080143e9 	.word	0x080143e9
 8014410:	080143e9 	.word	0x080143e9
 8014414:	080143e9 	.word	0x080143e9
 8014418:	0801446d 	.word	0x0801446d
 801441c:	080143e9 	.word	0x080143e9
 8014420:	080143e9 	.word	0x080143e9
 8014424:	080143e9 	.word	0x080143e9
 8014428:	080143e9 	.word	0x080143e9
 801442c:	08014579 	.word	0x08014579
 8014430:	0801449d 	.word	0x0801449d
 8014434:	0801455b 	.word	0x0801455b
 8014438:	080143e9 	.word	0x080143e9
 801443c:	080143e9 	.word	0x080143e9
 8014440:	0801459b 	.word	0x0801459b
 8014444:	080143e9 	.word	0x080143e9
 8014448:	0801449d 	.word	0x0801449d
 801444c:	080143e9 	.word	0x080143e9
 8014450:	080143e9 	.word	0x080143e9
 8014454:	08014563 	.word	0x08014563
 8014458:	680b      	ldr	r3, [r1, #0]
 801445a:	1d1a      	adds	r2, r3, #4
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	600a      	str	r2, [r1, #0]
 8014460:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014468:	2301      	movs	r3, #1
 801446a:	e0a3      	b.n	80145b4 <_printf_i+0x1f4>
 801446c:	6825      	ldr	r5, [r4, #0]
 801446e:	6808      	ldr	r0, [r1, #0]
 8014470:	062e      	lsls	r6, r5, #24
 8014472:	f100 0304 	add.w	r3, r0, #4
 8014476:	d50a      	bpl.n	801448e <_printf_i+0xce>
 8014478:	6805      	ldr	r5, [r0, #0]
 801447a:	600b      	str	r3, [r1, #0]
 801447c:	2d00      	cmp	r5, #0
 801447e:	da03      	bge.n	8014488 <_printf_i+0xc8>
 8014480:	232d      	movs	r3, #45	; 0x2d
 8014482:	426d      	negs	r5, r5
 8014484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014488:	485e      	ldr	r0, [pc, #376]	; (8014604 <_printf_i+0x244>)
 801448a:	230a      	movs	r3, #10
 801448c:	e019      	b.n	80144c2 <_printf_i+0x102>
 801448e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014492:	6805      	ldr	r5, [r0, #0]
 8014494:	600b      	str	r3, [r1, #0]
 8014496:	bf18      	it	ne
 8014498:	b22d      	sxthne	r5, r5
 801449a:	e7ef      	b.n	801447c <_printf_i+0xbc>
 801449c:	680b      	ldr	r3, [r1, #0]
 801449e:	6825      	ldr	r5, [r4, #0]
 80144a0:	1d18      	adds	r0, r3, #4
 80144a2:	6008      	str	r0, [r1, #0]
 80144a4:	0628      	lsls	r0, r5, #24
 80144a6:	d501      	bpl.n	80144ac <_printf_i+0xec>
 80144a8:	681d      	ldr	r5, [r3, #0]
 80144aa:	e002      	b.n	80144b2 <_printf_i+0xf2>
 80144ac:	0669      	lsls	r1, r5, #25
 80144ae:	d5fb      	bpl.n	80144a8 <_printf_i+0xe8>
 80144b0:	881d      	ldrh	r5, [r3, #0]
 80144b2:	4854      	ldr	r0, [pc, #336]	; (8014604 <_printf_i+0x244>)
 80144b4:	2f6f      	cmp	r7, #111	; 0x6f
 80144b6:	bf0c      	ite	eq
 80144b8:	2308      	moveq	r3, #8
 80144ba:	230a      	movne	r3, #10
 80144bc:	2100      	movs	r1, #0
 80144be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80144c2:	6866      	ldr	r6, [r4, #4]
 80144c4:	60a6      	str	r6, [r4, #8]
 80144c6:	2e00      	cmp	r6, #0
 80144c8:	bfa2      	ittt	ge
 80144ca:	6821      	ldrge	r1, [r4, #0]
 80144cc:	f021 0104 	bicge.w	r1, r1, #4
 80144d0:	6021      	strge	r1, [r4, #0]
 80144d2:	b90d      	cbnz	r5, 80144d8 <_printf_i+0x118>
 80144d4:	2e00      	cmp	r6, #0
 80144d6:	d04d      	beq.n	8014574 <_printf_i+0x1b4>
 80144d8:	4616      	mov	r6, r2
 80144da:	fbb5 f1f3 	udiv	r1, r5, r3
 80144de:	fb03 5711 	mls	r7, r3, r1, r5
 80144e2:	5dc7      	ldrb	r7, [r0, r7]
 80144e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80144e8:	462f      	mov	r7, r5
 80144ea:	42bb      	cmp	r3, r7
 80144ec:	460d      	mov	r5, r1
 80144ee:	d9f4      	bls.n	80144da <_printf_i+0x11a>
 80144f0:	2b08      	cmp	r3, #8
 80144f2:	d10b      	bne.n	801450c <_printf_i+0x14c>
 80144f4:	6823      	ldr	r3, [r4, #0]
 80144f6:	07df      	lsls	r7, r3, #31
 80144f8:	d508      	bpl.n	801450c <_printf_i+0x14c>
 80144fa:	6923      	ldr	r3, [r4, #16]
 80144fc:	6861      	ldr	r1, [r4, #4]
 80144fe:	4299      	cmp	r1, r3
 8014500:	bfde      	ittt	le
 8014502:	2330      	movle	r3, #48	; 0x30
 8014504:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014508:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801450c:	1b92      	subs	r2, r2, r6
 801450e:	6122      	str	r2, [r4, #16]
 8014510:	f8cd a000 	str.w	sl, [sp]
 8014514:	464b      	mov	r3, r9
 8014516:	aa03      	add	r2, sp, #12
 8014518:	4621      	mov	r1, r4
 801451a:	4640      	mov	r0, r8
 801451c:	f7ff fee2 	bl	80142e4 <_printf_common>
 8014520:	3001      	adds	r0, #1
 8014522:	d14c      	bne.n	80145be <_printf_i+0x1fe>
 8014524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014528:	b004      	add	sp, #16
 801452a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801452e:	4835      	ldr	r0, [pc, #212]	; (8014604 <_printf_i+0x244>)
 8014530:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014534:	6823      	ldr	r3, [r4, #0]
 8014536:	680e      	ldr	r6, [r1, #0]
 8014538:	061f      	lsls	r7, r3, #24
 801453a:	f856 5b04 	ldr.w	r5, [r6], #4
 801453e:	600e      	str	r6, [r1, #0]
 8014540:	d514      	bpl.n	801456c <_printf_i+0x1ac>
 8014542:	07d9      	lsls	r1, r3, #31
 8014544:	bf44      	itt	mi
 8014546:	f043 0320 	orrmi.w	r3, r3, #32
 801454a:	6023      	strmi	r3, [r4, #0]
 801454c:	b91d      	cbnz	r5, 8014556 <_printf_i+0x196>
 801454e:	6823      	ldr	r3, [r4, #0]
 8014550:	f023 0320 	bic.w	r3, r3, #32
 8014554:	6023      	str	r3, [r4, #0]
 8014556:	2310      	movs	r3, #16
 8014558:	e7b0      	b.n	80144bc <_printf_i+0xfc>
 801455a:	6823      	ldr	r3, [r4, #0]
 801455c:	f043 0320 	orr.w	r3, r3, #32
 8014560:	6023      	str	r3, [r4, #0]
 8014562:	2378      	movs	r3, #120	; 0x78
 8014564:	4828      	ldr	r0, [pc, #160]	; (8014608 <_printf_i+0x248>)
 8014566:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801456a:	e7e3      	b.n	8014534 <_printf_i+0x174>
 801456c:	065e      	lsls	r6, r3, #25
 801456e:	bf48      	it	mi
 8014570:	b2ad      	uxthmi	r5, r5
 8014572:	e7e6      	b.n	8014542 <_printf_i+0x182>
 8014574:	4616      	mov	r6, r2
 8014576:	e7bb      	b.n	80144f0 <_printf_i+0x130>
 8014578:	680b      	ldr	r3, [r1, #0]
 801457a:	6826      	ldr	r6, [r4, #0]
 801457c:	6960      	ldr	r0, [r4, #20]
 801457e:	1d1d      	adds	r5, r3, #4
 8014580:	600d      	str	r5, [r1, #0]
 8014582:	0635      	lsls	r5, r6, #24
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	d501      	bpl.n	801458c <_printf_i+0x1cc>
 8014588:	6018      	str	r0, [r3, #0]
 801458a:	e002      	b.n	8014592 <_printf_i+0x1d2>
 801458c:	0671      	lsls	r1, r6, #25
 801458e:	d5fb      	bpl.n	8014588 <_printf_i+0x1c8>
 8014590:	8018      	strh	r0, [r3, #0]
 8014592:	2300      	movs	r3, #0
 8014594:	6123      	str	r3, [r4, #16]
 8014596:	4616      	mov	r6, r2
 8014598:	e7ba      	b.n	8014510 <_printf_i+0x150>
 801459a:	680b      	ldr	r3, [r1, #0]
 801459c:	1d1a      	adds	r2, r3, #4
 801459e:	600a      	str	r2, [r1, #0]
 80145a0:	681e      	ldr	r6, [r3, #0]
 80145a2:	6862      	ldr	r2, [r4, #4]
 80145a4:	2100      	movs	r1, #0
 80145a6:	4630      	mov	r0, r6
 80145a8:	f7eb fe12 	bl	80001d0 <memchr>
 80145ac:	b108      	cbz	r0, 80145b2 <_printf_i+0x1f2>
 80145ae:	1b80      	subs	r0, r0, r6
 80145b0:	6060      	str	r0, [r4, #4]
 80145b2:	6863      	ldr	r3, [r4, #4]
 80145b4:	6123      	str	r3, [r4, #16]
 80145b6:	2300      	movs	r3, #0
 80145b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80145bc:	e7a8      	b.n	8014510 <_printf_i+0x150>
 80145be:	6923      	ldr	r3, [r4, #16]
 80145c0:	4632      	mov	r2, r6
 80145c2:	4649      	mov	r1, r9
 80145c4:	4640      	mov	r0, r8
 80145c6:	47d0      	blx	sl
 80145c8:	3001      	adds	r0, #1
 80145ca:	d0ab      	beq.n	8014524 <_printf_i+0x164>
 80145cc:	6823      	ldr	r3, [r4, #0]
 80145ce:	079b      	lsls	r3, r3, #30
 80145d0:	d413      	bmi.n	80145fa <_printf_i+0x23a>
 80145d2:	68e0      	ldr	r0, [r4, #12]
 80145d4:	9b03      	ldr	r3, [sp, #12]
 80145d6:	4298      	cmp	r0, r3
 80145d8:	bfb8      	it	lt
 80145da:	4618      	movlt	r0, r3
 80145dc:	e7a4      	b.n	8014528 <_printf_i+0x168>
 80145de:	2301      	movs	r3, #1
 80145e0:	4632      	mov	r2, r6
 80145e2:	4649      	mov	r1, r9
 80145e4:	4640      	mov	r0, r8
 80145e6:	47d0      	blx	sl
 80145e8:	3001      	adds	r0, #1
 80145ea:	d09b      	beq.n	8014524 <_printf_i+0x164>
 80145ec:	3501      	adds	r5, #1
 80145ee:	68e3      	ldr	r3, [r4, #12]
 80145f0:	9903      	ldr	r1, [sp, #12]
 80145f2:	1a5b      	subs	r3, r3, r1
 80145f4:	42ab      	cmp	r3, r5
 80145f6:	dcf2      	bgt.n	80145de <_printf_i+0x21e>
 80145f8:	e7eb      	b.n	80145d2 <_printf_i+0x212>
 80145fa:	2500      	movs	r5, #0
 80145fc:	f104 0619 	add.w	r6, r4, #25
 8014600:	e7f5      	b.n	80145ee <_printf_i+0x22e>
 8014602:	bf00      	nop
 8014604:	08014ce9 	.word	0x08014ce9
 8014608:	08014cfa 	.word	0x08014cfa

0801460c <_sbrk_r>:
 801460c:	b538      	push	{r3, r4, r5, lr}
 801460e:	4d06      	ldr	r5, [pc, #24]	; (8014628 <_sbrk_r+0x1c>)
 8014610:	2300      	movs	r3, #0
 8014612:	4604      	mov	r4, r0
 8014614:	4608      	mov	r0, r1
 8014616:	602b      	str	r3, [r5, #0]
 8014618:	f7ec fcde 	bl	8000fd8 <_sbrk>
 801461c:	1c43      	adds	r3, r0, #1
 801461e:	d102      	bne.n	8014626 <_sbrk_r+0x1a>
 8014620:	682b      	ldr	r3, [r5, #0]
 8014622:	b103      	cbz	r3, 8014626 <_sbrk_r+0x1a>
 8014624:	6023      	str	r3, [r4, #0]
 8014626:	bd38      	pop	{r3, r4, r5, pc}
 8014628:	20000478 	.word	0x20000478

0801462c <__sread>:
 801462c:	b510      	push	{r4, lr}
 801462e:	460c      	mov	r4, r1
 8014630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014634:	f000 fab4 	bl	8014ba0 <_read_r>
 8014638:	2800      	cmp	r0, #0
 801463a:	bfab      	itete	ge
 801463c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801463e:	89a3      	ldrhlt	r3, [r4, #12]
 8014640:	181b      	addge	r3, r3, r0
 8014642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014646:	bfac      	ite	ge
 8014648:	6563      	strge	r3, [r4, #84]	; 0x54
 801464a:	81a3      	strhlt	r3, [r4, #12]
 801464c:	bd10      	pop	{r4, pc}

0801464e <__swrite>:
 801464e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014652:	461f      	mov	r7, r3
 8014654:	898b      	ldrh	r3, [r1, #12]
 8014656:	05db      	lsls	r3, r3, #23
 8014658:	4605      	mov	r5, r0
 801465a:	460c      	mov	r4, r1
 801465c:	4616      	mov	r6, r2
 801465e:	d505      	bpl.n	801466c <__swrite+0x1e>
 8014660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014664:	2302      	movs	r3, #2
 8014666:	2200      	movs	r2, #0
 8014668:	f000 f9c8 	bl	80149fc <_lseek_r>
 801466c:	89a3      	ldrh	r3, [r4, #12]
 801466e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014676:	81a3      	strh	r3, [r4, #12]
 8014678:	4632      	mov	r2, r6
 801467a:	463b      	mov	r3, r7
 801467c:	4628      	mov	r0, r5
 801467e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014682:	f000 b869 	b.w	8014758 <_write_r>

08014686 <__sseek>:
 8014686:	b510      	push	{r4, lr}
 8014688:	460c      	mov	r4, r1
 801468a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801468e:	f000 f9b5 	bl	80149fc <_lseek_r>
 8014692:	1c43      	adds	r3, r0, #1
 8014694:	89a3      	ldrh	r3, [r4, #12]
 8014696:	bf15      	itete	ne
 8014698:	6560      	strne	r0, [r4, #84]	; 0x54
 801469a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801469e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80146a2:	81a3      	strheq	r3, [r4, #12]
 80146a4:	bf18      	it	ne
 80146a6:	81a3      	strhne	r3, [r4, #12]
 80146a8:	bd10      	pop	{r4, pc}

080146aa <__sclose>:
 80146aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146ae:	f000 b8d3 	b.w	8014858 <_close_r>
	...

080146b4 <__swbuf_r>:
 80146b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146b6:	460e      	mov	r6, r1
 80146b8:	4614      	mov	r4, r2
 80146ba:	4605      	mov	r5, r0
 80146bc:	b118      	cbz	r0, 80146c6 <__swbuf_r+0x12>
 80146be:	6983      	ldr	r3, [r0, #24]
 80146c0:	b90b      	cbnz	r3, 80146c6 <__swbuf_r+0x12>
 80146c2:	f7ff fbbb 	bl	8013e3c <__sinit>
 80146c6:	4b21      	ldr	r3, [pc, #132]	; (801474c <__swbuf_r+0x98>)
 80146c8:	429c      	cmp	r4, r3
 80146ca:	d12b      	bne.n	8014724 <__swbuf_r+0x70>
 80146cc:	686c      	ldr	r4, [r5, #4]
 80146ce:	69a3      	ldr	r3, [r4, #24]
 80146d0:	60a3      	str	r3, [r4, #8]
 80146d2:	89a3      	ldrh	r3, [r4, #12]
 80146d4:	071a      	lsls	r2, r3, #28
 80146d6:	d52f      	bpl.n	8014738 <__swbuf_r+0x84>
 80146d8:	6923      	ldr	r3, [r4, #16]
 80146da:	b36b      	cbz	r3, 8014738 <__swbuf_r+0x84>
 80146dc:	6923      	ldr	r3, [r4, #16]
 80146de:	6820      	ldr	r0, [r4, #0]
 80146e0:	1ac0      	subs	r0, r0, r3
 80146e2:	6963      	ldr	r3, [r4, #20]
 80146e4:	b2f6      	uxtb	r6, r6
 80146e6:	4283      	cmp	r3, r0
 80146e8:	4637      	mov	r7, r6
 80146ea:	dc04      	bgt.n	80146f6 <__swbuf_r+0x42>
 80146ec:	4621      	mov	r1, r4
 80146ee:	4628      	mov	r0, r5
 80146f0:	f000 f948 	bl	8014984 <_fflush_r>
 80146f4:	bb30      	cbnz	r0, 8014744 <__swbuf_r+0x90>
 80146f6:	68a3      	ldr	r3, [r4, #8]
 80146f8:	3b01      	subs	r3, #1
 80146fa:	60a3      	str	r3, [r4, #8]
 80146fc:	6823      	ldr	r3, [r4, #0]
 80146fe:	1c5a      	adds	r2, r3, #1
 8014700:	6022      	str	r2, [r4, #0]
 8014702:	701e      	strb	r6, [r3, #0]
 8014704:	6963      	ldr	r3, [r4, #20]
 8014706:	3001      	adds	r0, #1
 8014708:	4283      	cmp	r3, r0
 801470a:	d004      	beq.n	8014716 <__swbuf_r+0x62>
 801470c:	89a3      	ldrh	r3, [r4, #12]
 801470e:	07db      	lsls	r3, r3, #31
 8014710:	d506      	bpl.n	8014720 <__swbuf_r+0x6c>
 8014712:	2e0a      	cmp	r6, #10
 8014714:	d104      	bne.n	8014720 <__swbuf_r+0x6c>
 8014716:	4621      	mov	r1, r4
 8014718:	4628      	mov	r0, r5
 801471a:	f000 f933 	bl	8014984 <_fflush_r>
 801471e:	b988      	cbnz	r0, 8014744 <__swbuf_r+0x90>
 8014720:	4638      	mov	r0, r7
 8014722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014724:	4b0a      	ldr	r3, [pc, #40]	; (8014750 <__swbuf_r+0x9c>)
 8014726:	429c      	cmp	r4, r3
 8014728:	d101      	bne.n	801472e <__swbuf_r+0x7a>
 801472a:	68ac      	ldr	r4, [r5, #8]
 801472c:	e7cf      	b.n	80146ce <__swbuf_r+0x1a>
 801472e:	4b09      	ldr	r3, [pc, #36]	; (8014754 <__swbuf_r+0xa0>)
 8014730:	429c      	cmp	r4, r3
 8014732:	bf08      	it	eq
 8014734:	68ec      	ldreq	r4, [r5, #12]
 8014736:	e7ca      	b.n	80146ce <__swbuf_r+0x1a>
 8014738:	4621      	mov	r1, r4
 801473a:	4628      	mov	r0, r5
 801473c:	f000 f81e 	bl	801477c <__swsetup_r>
 8014740:	2800      	cmp	r0, #0
 8014742:	d0cb      	beq.n	80146dc <__swbuf_r+0x28>
 8014744:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014748:	e7ea      	b.n	8014720 <__swbuf_r+0x6c>
 801474a:	bf00      	nop
 801474c:	08014c98 	.word	0x08014c98
 8014750:	08014cb8 	.word	0x08014cb8
 8014754:	08014c78 	.word	0x08014c78

08014758 <_write_r>:
 8014758:	b538      	push	{r3, r4, r5, lr}
 801475a:	4d07      	ldr	r5, [pc, #28]	; (8014778 <_write_r+0x20>)
 801475c:	4604      	mov	r4, r0
 801475e:	4608      	mov	r0, r1
 8014760:	4611      	mov	r1, r2
 8014762:	2200      	movs	r2, #0
 8014764:	602a      	str	r2, [r5, #0]
 8014766:	461a      	mov	r2, r3
 8014768:	f7ec fb4c 	bl	8000e04 <_write>
 801476c:	1c43      	adds	r3, r0, #1
 801476e:	d102      	bne.n	8014776 <_write_r+0x1e>
 8014770:	682b      	ldr	r3, [r5, #0]
 8014772:	b103      	cbz	r3, 8014776 <_write_r+0x1e>
 8014774:	6023      	str	r3, [r4, #0]
 8014776:	bd38      	pop	{r3, r4, r5, pc}
 8014778:	20000478 	.word	0x20000478

0801477c <__swsetup_r>:
 801477c:	4b32      	ldr	r3, [pc, #200]	; (8014848 <__swsetup_r+0xcc>)
 801477e:	b570      	push	{r4, r5, r6, lr}
 8014780:	681d      	ldr	r5, [r3, #0]
 8014782:	4606      	mov	r6, r0
 8014784:	460c      	mov	r4, r1
 8014786:	b125      	cbz	r5, 8014792 <__swsetup_r+0x16>
 8014788:	69ab      	ldr	r3, [r5, #24]
 801478a:	b913      	cbnz	r3, 8014792 <__swsetup_r+0x16>
 801478c:	4628      	mov	r0, r5
 801478e:	f7ff fb55 	bl	8013e3c <__sinit>
 8014792:	4b2e      	ldr	r3, [pc, #184]	; (801484c <__swsetup_r+0xd0>)
 8014794:	429c      	cmp	r4, r3
 8014796:	d10f      	bne.n	80147b8 <__swsetup_r+0x3c>
 8014798:	686c      	ldr	r4, [r5, #4]
 801479a:	89a3      	ldrh	r3, [r4, #12]
 801479c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80147a0:	0719      	lsls	r1, r3, #28
 80147a2:	d42c      	bmi.n	80147fe <__swsetup_r+0x82>
 80147a4:	06dd      	lsls	r5, r3, #27
 80147a6:	d411      	bmi.n	80147cc <__swsetup_r+0x50>
 80147a8:	2309      	movs	r3, #9
 80147aa:	6033      	str	r3, [r6, #0]
 80147ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80147b0:	81a3      	strh	r3, [r4, #12]
 80147b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80147b6:	e03e      	b.n	8014836 <__swsetup_r+0xba>
 80147b8:	4b25      	ldr	r3, [pc, #148]	; (8014850 <__swsetup_r+0xd4>)
 80147ba:	429c      	cmp	r4, r3
 80147bc:	d101      	bne.n	80147c2 <__swsetup_r+0x46>
 80147be:	68ac      	ldr	r4, [r5, #8]
 80147c0:	e7eb      	b.n	801479a <__swsetup_r+0x1e>
 80147c2:	4b24      	ldr	r3, [pc, #144]	; (8014854 <__swsetup_r+0xd8>)
 80147c4:	429c      	cmp	r4, r3
 80147c6:	bf08      	it	eq
 80147c8:	68ec      	ldreq	r4, [r5, #12]
 80147ca:	e7e6      	b.n	801479a <__swsetup_r+0x1e>
 80147cc:	0758      	lsls	r0, r3, #29
 80147ce:	d512      	bpl.n	80147f6 <__swsetup_r+0x7a>
 80147d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80147d2:	b141      	cbz	r1, 80147e6 <__swsetup_r+0x6a>
 80147d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80147d8:	4299      	cmp	r1, r3
 80147da:	d002      	beq.n	80147e2 <__swsetup_r+0x66>
 80147dc:	4630      	mov	r0, r6
 80147de:	f000 f98f 	bl	8014b00 <_free_r>
 80147e2:	2300      	movs	r3, #0
 80147e4:	6363      	str	r3, [r4, #52]	; 0x34
 80147e6:	89a3      	ldrh	r3, [r4, #12]
 80147e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80147ec:	81a3      	strh	r3, [r4, #12]
 80147ee:	2300      	movs	r3, #0
 80147f0:	6063      	str	r3, [r4, #4]
 80147f2:	6923      	ldr	r3, [r4, #16]
 80147f4:	6023      	str	r3, [r4, #0]
 80147f6:	89a3      	ldrh	r3, [r4, #12]
 80147f8:	f043 0308 	orr.w	r3, r3, #8
 80147fc:	81a3      	strh	r3, [r4, #12]
 80147fe:	6923      	ldr	r3, [r4, #16]
 8014800:	b94b      	cbnz	r3, 8014816 <__swsetup_r+0x9a>
 8014802:	89a3      	ldrh	r3, [r4, #12]
 8014804:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801480c:	d003      	beq.n	8014816 <__swsetup_r+0x9a>
 801480e:	4621      	mov	r1, r4
 8014810:	4630      	mov	r0, r6
 8014812:	f000 f929 	bl	8014a68 <__smakebuf_r>
 8014816:	89a0      	ldrh	r0, [r4, #12]
 8014818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801481c:	f010 0301 	ands.w	r3, r0, #1
 8014820:	d00a      	beq.n	8014838 <__swsetup_r+0xbc>
 8014822:	2300      	movs	r3, #0
 8014824:	60a3      	str	r3, [r4, #8]
 8014826:	6963      	ldr	r3, [r4, #20]
 8014828:	425b      	negs	r3, r3
 801482a:	61a3      	str	r3, [r4, #24]
 801482c:	6923      	ldr	r3, [r4, #16]
 801482e:	b943      	cbnz	r3, 8014842 <__swsetup_r+0xc6>
 8014830:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014834:	d1ba      	bne.n	80147ac <__swsetup_r+0x30>
 8014836:	bd70      	pop	{r4, r5, r6, pc}
 8014838:	0781      	lsls	r1, r0, #30
 801483a:	bf58      	it	pl
 801483c:	6963      	ldrpl	r3, [r4, #20]
 801483e:	60a3      	str	r3, [r4, #8]
 8014840:	e7f4      	b.n	801482c <__swsetup_r+0xb0>
 8014842:	2000      	movs	r0, #0
 8014844:	e7f7      	b.n	8014836 <__swsetup_r+0xba>
 8014846:	bf00      	nop
 8014848:	20000038 	.word	0x20000038
 801484c:	08014c98 	.word	0x08014c98
 8014850:	08014cb8 	.word	0x08014cb8
 8014854:	08014c78 	.word	0x08014c78

08014858 <_close_r>:
 8014858:	b538      	push	{r3, r4, r5, lr}
 801485a:	4d06      	ldr	r5, [pc, #24]	; (8014874 <_close_r+0x1c>)
 801485c:	2300      	movs	r3, #0
 801485e:	4604      	mov	r4, r0
 8014860:	4608      	mov	r0, r1
 8014862:	602b      	str	r3, [r5, #0]
 8014864:	f7ec fb84 	bl	8000f70 <_close>
 8014868:	1c43      	adds	r3, r0, #1
 801486a:	d102      	bne.n	8014872 <_close_r+0x1a>
 801486c:	682b      	ldr	r3, [r5, #0]
 801486e:	b103      	cbz	r3, 8014872 <_close_r+0x1a>
 8014870:	6023      	str	r3, [r4, #0]
 8014872:	bd38      	pop	{r3, r4, r5, pc}
 8014874:	20000478 	.word	0x20000478

08014878 <__sflush_r>:
 8014878:	898a      	ldrh	r2, [r1, #12]
 801487a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801487e:	4605      	mov	r5, r0
 8014880:	0710      	lsls	r0, r2, #28
 8014882:	460c      	mov	r4, r1
 8014884:	d458      	bmi.n	8014938 <__sflush_r+0xc0>
 8014886:	684b      	ldr	r3, [r1, #4]
 8014888:	2b00      	cmp	r3, #0
 801488a:	dc05      	bgt.n	8014898 <__sflush_r+0x20>
 801488c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801488e:	2b00      	cmp	r3, #0
 8014890:	dc02      	bgt.n	8014898 <__sflush_r+0x20>
 8014892:	2000      	movs	r0, #0
 8014894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801489a:	2e00      	cmp	r6, #0
 801489c:	d0f9      	beq.n	8014892 <__sflush_r+0x1a>
 801489e:	2300      	movs	r3, #0
 80148a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80148a4:	682f      	ldr	r7, [r5, #0]
 80148a6:	602b      	str	r3, [r5, #0]
 80148a8:	d032      	beq.n	8014910 <__sflush_r+0x98>
 80148aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80148ac:	89a3      	ldrh	r3, [r4, #12]
 80148ae:	075a      	lsls	r2, r3, #29
 80148b0:	d505      	bpl.n	80148be <__sflush_r+0x46>
 80148b2:	6863      	ldr	r3, [r4, #4]
 80148b4:	1ac0      	subs	r0, r0, r3
 80148b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80148b8:	b10b      	cbz	r3, 80148be <__sflush_r+0x46>
 80148ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80148bc:	1ac0      	subs	r0, r0, r3
 80148be:	2300      	movs	r3, #0
 80148c0:	4602      	mov	r2, r0
 80148c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80148c4:	6a21      	ldr	r1, [r4, #32]
 80148c6:	4628      	mov	r0, r5
 80148c8:	47b0      	blx	r6
 80148ca:	1c43      	adds	r3, r0, #1
 80148cc:	89a3      	ldrh	r3, [r4, #12]
 80148ce:	d106      	bne.n	80148de <__sflush_r+0x66>
 80148d0:	6829      	ldr	r1, [r5, #0]
 80148d2:	291d      	cmp	r1, #29
 80148d4:	d82c      	bhi.n	8014930 <__sflush_r+0xb8>
 80148d6:	4a2a      	ldr	r2, [pc, #168]	; (8014980 <__sflush_r+0x108>)
 80148d8:	40ca      	lsrs	r2, r1
 80148da:	07d6      	lsls	r6, r2, #31
 80148dc:	d528      	bpl.n	8014930 <__sflush_r+0xb8>
 80148de:	2200      	movs	r2, #0
 80148e0:	6062      	str	r2, [r4, #4]
 80148e2:	04d9      	lsls	r1, r3, #19
 80148e4:	6922      	ldr	r2, [r4, #16]
 80148e6:	6022      	str	r2, [r4, #0]
 80148e8:	d504      	bpl.n	80148f4 <__sflush_r+0x7c>
 80148ea:	1c42      	adds	r2, r0, #1
 80148ec:	d101      	bne.n	80148f2 <__sflush_r+0x7a>
 80148ee:	682b      	ldr	r3, [r5, #0]
 80148f0:	b903      	cbnz	r3, 80148f4 <__sflush_r+0x7c>
 80148f2:	6560      	str	r0, [r4, #84]	; 0x54
 80148f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80148f6:	602f      	str	r7, [r5, #0]
 80148f8:	2900      	cmp	r1, #0
 80148fa:	d0ca      	beq.n	8014892 <__sflush_r+0x1a>
 80148fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014900:	4299      	cmp	r1, r3
 8014902:	d002      	beq.n	801490a <__sflush_r+0x92>
 8014904:	4628      	mov	r0, r5
 8014906:	f000 f8fb 	bl	8014b00 <_free_r>
 801490a:	2000      	movs	r0, #0
 801490c:	6360      	str	r0, [r4, #52]	; 0x34
 801490e:	e7c1      	b.n	8014894 <__sflush_r+0x1c>
 8014910:	6a21      	ldr	r1, [r4, #32]
 8014912:	2301      	movs	r3, #1
 8014914:	4628      	mov	r0, r5
 8014916:	47b0      	blx	r6
 8014918:	1c41      	adds	r1, r0, #1
 801491a:	d1c7      	bne.n	80148ac <__sflush_r+0x34>
 801491c:	682b      	ldr	r3, [r5, #0]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d0c4      	beq.n	80148ac <__sflush_r+0x34>
 8014922:	2b1d      	cmp	r3, #29
 8014924:	d001      	beq.n	801492a <__sflush_r+0xb2>
 8014926:	2b16      	cmp	r3, #22
 8014928:	d101      	bne.n	801492e <__sflush_r+0xb6>
 801492a:	602f      	str	r7, [r5, #0]
 801492c:	e7b1      	b.n	8014892 <__sflush_r+0x1a>
 801492e:	89a3      	ldrh	r3, [r4, #12]
 8014930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014934:	81a3      	strh	r3, [r4, #12]
 8014936:	e7ad      	b.n	8014894 <__sflush_r+0x1c>
 8014938:	690f      	ldr	r7, [r1, #16]
 801493a:	2f00      	cmp	r7, #0
 801493c:	d0a9      	beq.n	8014892 <__sflush_r+0x1a>
 801493e:	0793      	lsls	r3, r2, #30
 8014940:	680e      	ldr	r6, [r1, #0]
 8014942:	bf08      	it	eq
 8014944:	694b      	ldreq	r3, [r1, #20]
 8014946:	600f      	str	r7, [r1, #0]
 8014948:	bf18      	it	ne
 801494a:	2300      	movne	r3, #0
 801494c:	eba6 0807 	sub.w	r8, r6, r7
 8014950:	608b      	str	r3, [r1, #8]
 8014952:	f1b8 0f00 	cmp.w	r8, #0
 8014956:	dd9c      	ble.n	8014892 <__sflush_r+0x1a>
 8014958:	6a21      	ldr	r1, [r4, #32]
 801495a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801495c:	4643      	mov	r3, r8
 801495e:	463a      	mov	r2, r7
 8014960:	4628      	mov	r0, r5
 8014962:	47b0      	blx	r6
 8014964:	2800      	cmp	r0, #0
 8014966:	dc06      	bgt.n	8014976 <__sflush_r+0xfe>
 8014968:	89a3      	ldrh	r3, [r4, #12]
 801496a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801496e:	81a3      	strh	r3, [r4, #12]
 8014970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014974:	e78e      	b.n	8014894 <__sflush_r+0x1c>
 8014976:	4407      	add	r7, r0
 8014978:	eba8 0800 	sub.w	r8, r8, r0
 801497c:	e7e9      	b.n	8014952 <__sflush_r+0xda>
 801497e:	bf00      	nop
 8014980:	20400001 	.word	0x20400001

08014984 <_fflush_r>:
 8014984:	b538      	push	{r3, r4, r5, lr}
 8014986:	690b      	ldr	r3, [r1, #16]
 8014988:	4605      	mov	r5, r0
 801498a:	460c      	mov	r4, r1
 801498c:	b913      	cbnz	r3, 8014994 <_fflush_r+0x10>
 801498e:	2500      	movs	r5, #0
 8014990:	4628      	mov	r0, r5
 8014992:	bd38      	pop	{r3, r4, r5, pc}
 8014994:	b118      	cbz	r0, 801499e <_fflush_r+0x1a>
 8014996:	6983      	ldr	r3, [r0, #24]
 8014998:	b90b      	cbnz	r3, 801499e <_fflush_r+0x1a>
 801499a:	f7ff fa4f 	bl	8013e3c <__sinit>
 801499e:	4b14      	ldr	r3, [pc, #80]	; (80149f0 <_fflush_r+0x6c>)
 80149a0:	429c      	cmp	r4, r3
 80149a2:	d11b      	bne.n	80149dc <_fflush_r+0x58>
 80149a4:	686c      	ldr	r4, [r5, #4]
 80149a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d0ef      	beq.n	801498e <_fflush_r+0xa>
 80149ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80149b0:	07d0      	lsls	r0, r2, #31
 80149b2:	d404      	bmi.n	80149be <_fflush_r+0x3a>
 80149b4:	0599      	lsls	r1, r3, #22
 80149b6:	d402      	bmi.n	80149be <_fflush_r+0x3a>
 80149b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149ba:	f7ff fadd 	bl	8013f78 <__retarget_lock_acquire_recursive>
 80149be:	4628      	mov	r0, r5
 80149c0:	4621      	mov	r1, r4
 80149c2:	f7ff ff59 	bl	8014878 <__sflush_r>
 80149c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80149c8:	07da      	lsls	r2, r3, #31
 80149ca:	4605      	mov	r5, r0
 80149cc:	d4e0      	bmi.n	8014990 <_fflush_r+0xc>
 80149ce:	89a3      	ldrh	r3, [r4, #12]
 80149d0:	059b      	lsls	r3, r3, #22
 80149d2:	d4dd      	bmi.n	8014990 <_fflush_r+0xc>
 80149d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149d6:	f7ff fad0 	bl	8013f7a <__retarget_lock_release_recursive>
 80149da:	e7d9      	b.n	8014990 <_fflush_r+0xc>
 80149dc:	4b05      	ldr	r3, [pc, #20]	; (80149f4 <_fflush_r+0x70>)
 80149de:	429c      	cmp	r4, r3
 80149e0:	d101      	bne.n	80149e6 <_fflush_r+0x62>
 80149e2:	68ac      	ldr	r4, [r5, #8]
 80149e4:	e7df      	b.n	80149a6 <_fflush_r+0x22>
 80149e6:	4b04      	ldr	r3, [pc, #16]	; (80149f8 <_fflush_r+0x74>)
 80149e8:	429c      	cmp	r4, r3
 80149ea:	bf08      	it	eq
 80149ec:	68ec      	ldreq	r4, [r5, #12]
 80149ee:	e7da      	b.n	80149a6 <_fflush_r+0x22>
 80149f0:	08014c98 	.word	0x08014c98
 80149f4:	08014cb8 	.word	0x08014cb8
 80149f8:	08014c78 	.word	0x08014c78

080149fc <_lseek_r>:
 80149fc:	b538      	push	{r3, r4, r5, lr}
 80149fe:	4d07      	ldr	r5, [pc, #28]	; (8014a1c <_lseek_r+0x20>)
 8014a00:	4604      	mov	r4, r0
 8014a02:	4608      	mov	r0, r1
 8014a04:	4611      	mov	r1, r2
 8014a06:	2200      	movs	r2, #0
 8014a08:	602a      	str	r2, [r5, #0]
 8014a0a:	461a      	mov	r2, r3
 8014a0c:	f7ec fad7 	bl	8000fbe <_lseek>
 8014a10:	1c43      	adds	r3, r0, #1
 8014a12:	d102      	bne.n	8014a1a <_lseek_r+0x1e>
 8014a14:	682b      	ldr	r3, [r5, #0]
 8014a16:	b103      	cbz	r3, 8014a1a <_lseek_r+0x1e>
 8014a18:	6023      	str	r3, [r4, #0]
 8014a1a:	bd38      	pop	{r3, r4, r5, pc}
 8014a1c:	20000478 	.word	0x20000478

08014a20 <__swhatbuf_r>:
 8014a20:	b570      	push	{r4, r5, r6, lr}
 8014a22:	460e      	mov	r6, r1
 8014a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a28:	2900      	cmp	r1, #0
 8014a2a:	b096      	sub	sp, #88	; 0x58
 8014a2c:	4614      	mov	r4, r2
 8014a2e:	461d      	mov	r5, r3
 8014a30:	da07      	bge.n	8014a42 <__swhatbuf_r+0x22>
 8014a32:	2300      	movs	r3, #0
 8014a34:	602b      	str	r3, [r5, #0]
 8014a36:	89b3      	ldrh	r3, [r6, #12]
 8014a38:	061a      	lsls	r2, r3, #24
 8014a3a:	d410      	bmi.n	8014a5e <__swhatbuf_r+0x3e>
 8014a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a40:	e00e      	b.n	8014a60 <__swhatbuf_r+0x40>
 8014a42:	466a      	mov	r2, sp
 8014a44:	f000 f8be 	bl	8014bc4 <_fstat_r>
 8014a48:	2800      	cmp	r0, #0
 8014a4a:	dbf2      	blt.n	8014a32 <__swhatbuf_r+0x12>
 8014a4c:	9a01      	ldr	r2, [sp, #4]
 8014a4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014a52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014a56:	425a      	negs	r2, r3
 8014a58:	415a      	adcs	r2, r3
 8014a5a:	602a      	str	r2, [r5, #0]
 8014a5c:	e7ee      	b.n	8014a3c <__swhatbuf_r+0x1c>
 8014a5e:	2340      	movs	r3, #64	; 0x40
 8014a60:	2000      	movs	r0, #0
 8014a62:	6023      	str	r3, [r4, #0]
 8014a64:	b016      	add	sp, #88	; 0x58
 8014a66:	bd70      	pop	{r4, r5, r6, pc}

08014a68 <__smakebuf_r>:
 8014a68:	898b      	ldrh	r3, [r1, #12]
 8014a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014a6c:	079d      	lsls	r5, r3, #30
 8014a6e:	4606      	mov	r6, r0
 8014a70:	460c      	mov	r4, r1
 8014a72:	d507      	bpl.n	8014a84 <__smakebuf_r+0x1c>
 8014a74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014a78:	6023      	str	r3, [r4, #0]
 8014a7a:	6123      	str	r3, [r4, #16]
 8014a7c:	2301      	movs	r3, #1
 8014a7e:	6163      	str	r3, [r4, #20]
 8014a80:	b002      	add	sp, #8
 8014a82:	bd70      	pop	{r4, r5, r6, pc}
 8014a84:	ab01      	add	r3, sp, #4
 8014a86:	466a      	mov	r2, sp
 8014a88:	f7ff ffca 	bl	8014a20 <__swhatbuf_r>
 8014a8c:	9900      	ldr	r1, [sp, #0]
 8014a8e:	4605      	mov	r5, r0
 8014a90:	4630      	mov	r0, r6
 8014a92:	f7ff fa73 	bl	8013f7c <_malloc_r>
 8014a96:	b948      	cbnz	r0, 8014aac <__smakebuf_r+0x44>
 8014a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a9c:	059a      	lsls	r2, r3, #22
 8014a9e:	d4ef      	bmi.n	8014a80 <__smakebuf_r+0x18>
 8014aa0:	f023 0303 	bic.w	r3, r3, #3
 8014aa4:	f043 0302 	orr.w	r3, r3, #2
 8014aa8:	81a3      	strh	r3, [r4, #12]
 8014aaa:	e7e3      	b.n	8014a74 <__smakebuf_r+0xc>
 8014aac:	4b0d      	ldr	r3, [pc, #52]	; (8014ae4 <__smakebuf_r+0x7c>)
 8014aae:	62b3      	str	r3, [r6, #40]	; 0x28
 8014ab0:	89a3      	ldrh	r3, [r4, #12]
 8014ab2:	6020      	str	r0, [r4, #0]
 8014ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ab8:	81a3      	strh	r3, [r4, #12]
 8014aba:	9b00      	ldr	r3, [sp, #0]
 8014abc:	6163      	str	r3, [r4, #20]
 8014abe:	9b01      	ldr	r3, [sp, #4]
 8014ac0:	6120      	str	r0, [r4, #16]
 8014ac2:	b15b      	cbz	r3, 8014adc <__smakebuf_r+0x74>
 8014ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ac8:	4630      	mov	r0, r6
 8014aca:	f000 f88d 	bl	8014be8 <_isatty_r>
 8014ace:	b128      	cbz	r0, 8014adc <__smakebuf_r+0x74>
 8014ad0:	89a3      	ldrh	r3, [r4, #12]
 8014ad2:	f023 0303 	bic.w	r3, r3, #3
 8014ad6:	f043 0301 	orr.w	r3, r3, #1
 8014ada:	81a3      	strh	r3, [r4, #12]
 8014adc:	89a0      	ldrh	r0, [r4, #12]
 8014ade:	4305      	orrs	r5, r0
 8014ae0:	81a5      	strh	r5, [r4, #12]
 8014ae2:	e7cd      	b.n	8014a80 <__smakebuf_r+0x18>
 8014ae4:	08013dd5 	.word	0x08013dd5

08014ae8 <__malloc_lock>:
 8014ae8:	4801      	ldr	r0, [pc, #4]	; (8014af0 <__malloc_lock+0x8>)
 8014aea:	f7ff ba45 	b.w	8013f78 <__retarget_lock_acquire_recursive>
 8014aee:	bf00      	nop
 8014af0:	20000470 	.word	0x20000470

08014af4 <__malloc_unlock>:
 8014af4:	4801      	ldr	r0, [pc, #4]	; (8014afc <__malloc_unlock+0x8>)
 8014af6:	f7ff ba40 	b.w	8013f7a <__retarget_lock_release_recursive>
 8014afa:	bf00      	nop
 8014afc:	20000470 	.word	0x20000470

08014b00 <_free_r>:
 8014b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014b02:	2900      	cmp	r1, #0
 8014b04:	d048      	beq.n	8014b98 <_free_r+0x98>
 8014b06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b0a:	9001      	str	r0, [sp, #4]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	f1a1 0404 	sub.w	r4, r1, #4
 8014b12:	bfb8      	it	lt
 8014b14:	18e4      	addlt	r4, r4, r3
 8014b16:	f7ff ffe7 	bl	8014ae8 <__malloc_lock>
 8014b1a:	4a20      	ldr	r2, [pc, #128]	; (8014b9c <_free_r+0x9c>)
 8014b1c:	9801      	ldr	r0, [sp, #4]
 8014b1e:	6813      	ldr	r3, [r2, #0]
 8014b20:	4615      	mov	r5, r2
 8014b22:	b933      	cbnz	r3, 8014b32 <_free_r+0x32>
 8014b24:	6063      	str	r3, [r4, #4]
 8014b26:	6014      	str	r4, [r2, #0]
 8014b28:	b003      	add	sp, #12
 8014b2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b2e:	f7ff bfe1 	b.w	8014af4 <__malloc_unlock>
 8014b32:	42a3      	cmp	r3, r4
 8014b34:	d90b      	bls.n	8014b4e <_free_r+0x4e>
 8014b36:	6821      	ldr	r1, [r4, #0]
 8014b38:	1862      	adds	r2, r4, r1
 8014b3a:	4293      	cmp	r3, r2
 8014b3c:	bf04      	itt	eq
 8014b3e:	681a      	ldreq	r2, [r3, #0]
 8014b40:	685b      	ldreq	r3, [r3, #4]
 8014b42:	6063      	str	r3, [r4, #4]
 8014b44:	bf04      	itt	eq
 8014b46:	1852      	addeq	r2, r2, r1
 8014b48:	6022      	streq	r2, [r4, #0]
 8014b4a:	602c      	str	r4, [r5, #0]
 8014b4c:	e7ec      	b.n	8014b28 <_free_r+0x28>
 8014b4e:	461a      	mov	r2, r3
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	b10b      	cbz	r3, 8014b58 <_free_r+0x58>
 8014b54:	42a3      	cmp	r3, r4
 8014b56:	d9fa      	bls.n	8014b4e <_free_r+0x4e>
 8014b58:	6811      	ldr	r1, [r2, #0]
 8014b5a:	1855      	adds	r5, r2, r1
 8014b5c:	42a5      	cmp	r5, r4
 8014b5e:	d10b      	bne.n	8014b78 <_free_r+0x78>
 8014b60:	6824      	ldr	r4, [r4, #0]
 8014b62:	4421      	add	r1, r4
 8014b64:	1854      	adds	r4, r2, r1
 8014b66:	42a3      	cmp	r3, r4
 8014b68:	6011      	str	r1, [r2, #0]
 8014b6a:	d1dd      	bne.n	8014b28 <_free_r+0x28>
 8014b6c:	681c      	ldr	r4, [r3, #0]
 8014b6e:	685b      	ldr	r3, [r3, #4]
 8014b70:	6053      	str	r3, [r2, #4]
 8014b72:	4421      	add	r1, r4
 8014b74:	6011      	str	r1, [r2, #0]
 8014b76:	e7d7      	b.n	8014b28 <_free_r+0x28>
 8014b78:	d902      	bls.n	8014b80 <_free_r+0x80>
 8014b7a:	230c      	movs	r3, #12
 8014b7c:	6003      	str	r3, [r0, #0]
 8014b7e:	e7d3      	b.n	8014b28 <_free_r+0x28>
 8014b80:	6825      	ldr	r5, [r4, #0]
 8014b82:	1961      	adds	r1, r4, r5
 8014b84:	428b      	cmp	r3, r1
 8014b86:	bf04      	itt	eq
 8014b88:	6819      	ldreq	r1, [r3, #0]
 8014b8a:	685b      	ldreq	r3, [r3, #4]
 8014b8c:	6063      	str	r3, [r4, #4]
 8014b8e:	bf04      	itt	eq
 8014b90:	1949      	addeq	r1, r1, r5
 8014b92:	6021      	streq	r1, [r4, #0]
 8014b94:	6054      	str	r4, [r2, #4]
 8014b96:	e7c7      	b.n	8014b28 <_free_r+0x28>
 8014b98:	b003      	add	sp, #12
 8014b9a:	bd30      	pop	{r4, r5, pc}
 8014b9c:	200000c0 	.word	0x200000c0

08014ba0 <_read_r>:
 8014ba0:	b538      	push	{r3, r4, r5, lr}
 8014ba2:	4d07      	ldr	r5, [pc, #28]	; (8014bc0 <_read_r+0x20>)
 8014ba4:	4604      	mov	r4, r0
 8014ba6:	4608      	mov	r0, r1
 8014ba8:	4611      	mov	r1, r2
 8014baa:	2200      	movs	r2, #0
 8014bac:	602a      	str	r2, [r5, #0]
 8014bae:	461a      	mov	r2, r3
 8014bb0:	f7ec f9c1 	bl	8000f36 <_read>
 8014bb4:	1c43      	adds	r3, r0, #1
 8014bb6:	d102      	bne.n	8014bbe <_read_r+0x1e>
 8014bb8:	682b      	ldr	r3, [r5, #0]
 8014bba:	b103      	cbz	r3, 8014bbe <_read_r+0x1e>
 8014bbc:	6023      	str	r3, [r4, #0]
 8014bbe:	bd38      	pop	{r3, r4, r5, pc}
 8014bc0:	20000478 	.word	0x20000478

08014bc4 <_fstat_r>:
 8014bc4:	b538      	push	{r3, r4, r5, lr}
 8014bc6:	4d07      	ldr	r5, [pc, #28]	; (8014be4 <_fstat_r+0x20>)
 8014bc8:	2300      	movs	r3, #0
 8014bca:	4604      	mov	r4, r0
 8014bcc:	4608      	mov	r0, r1
 8014bce:	4611      	mov	r1, r2
 8014bd0:	602b      	str	r3, [r5, #0]
 8014bd2:	f7ec f9d9 	bl	8000f88 <_fstat>
 8014bd6:	1c43      	adds	r3, r0, #1
 8014bd8:	d102      	bne.n	8014be0 <_fstat_r+0x1c>
 8014bda:	682b      	ldr	r3, [r5, #0]
 8014bdc:	b103      	cbz	r3, 8014be0 <_fstat_r+0x1c>
 8014bde:	6023      	str	r3, [r4, #0]
 8014be0:	bd38      	pop	{r3, r4, r5, pc}
 8014be2:	bf00      	nop
 8014be4:	20000478 	.word	0x20000478

08014be8 <_isatty_r>:
 8014be8:	b538      	push	{r3, r4, r5, lr}
 8014bea:	4d06      	ldr	r5, [pc, #24]	; (8014c04 <_isatty_r+0x1c>)
 8014bec:	2300      	movs	r3, #0
 8014bee:	4604      	mov	r4, r0
 8014bf0:	4608      	mov	r0, r1
 8014bf2:	602b      	str	r3, [r5, #0]
 8014bf4:	f7ec f9d8 	bl	8000fa8 <_isatty>
 8014bf8:	1c43      	adds	r3, r0, #1
 8014bfa:	d102      	bne.n	8014c02 <_isatty_r+0x1a>
 8014bfc:	682b      	ldr	r3, [r5, #0]
 8014bfe:	b103      	cbz	r3, 8014c02 <_isatty_r+0x1a>
 8014c00:	6023      	str	r3, [r4, #0]
 8014c02:	bd38      	pop	{r3, r4, r5, pc}
 8014c04:	20000478 	.word	0x20000478

08014c08 <_init>:
 8014c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c0a:	bf00      	nop
 8014c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c0e:	bc08      	pop	{r3}
 8014c10:	469e      	mov	lr, r3
 8014c12:	4770      	bx	lr

08014c14 <_fini>:
 8014c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c16:	bf00      	nop
 8014c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c1a:	bc08      	pop	{r3}
 8014c1c:	469e      	mov	lr, r3
 8014c1e:	4770      	bx	lr
