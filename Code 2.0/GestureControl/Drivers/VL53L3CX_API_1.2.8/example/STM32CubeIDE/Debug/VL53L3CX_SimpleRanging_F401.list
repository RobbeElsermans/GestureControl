
VL53L3CX_SimpleRanging_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c008  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  0800c1a8  0800c1a8  0001c1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c5a0  0800c5a0  0001c5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c5a8  0800c5a8  0001c5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c5ac  0800c5ac  0001c5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  20000000  0800c5b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002da8  20000210  0800c7bc  00020210  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20002fb8  0800c7bc  00022fb8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 10 .debug_line   00018e7d  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0004f4f3  00000000  00000000  000390b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005460  00000000  00000000  000885ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001480  00000000  00000000  0008da10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000b4162  00000000  00000000  0008ee90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001918  00000000  00000000  00142ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00023edd  00000000  00000000  00144910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001ef4a  00000000  00000000  001687ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00187737  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004ed0  00000000  00000000  001877b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         00000084  00000000  00000000  0018c684  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000117  00000000  00000000  0018c708  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c190 	.word	0x0800c190

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	0800c190 	.word	0x0800c190

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd6:	f000 b9bd 	b.w	8000f54 <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f5e:	e003      	b.n	8000f68 <LoopCopyDataInit>

08000f60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f66:	3104      	adds	r1, #4

08000f68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f70:	d3f6      	bcc.n	8000f60 <CopyDataInit>
  ldr  r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f74:	e002      	b.n	8000f7c <LoopFillZerobss>

08000f76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f78:	f842 3b04 	str.w	r3, [r2], #4

08000f7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f80:	d3f9      	bcc.n	8000f76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f82:	f007 fb3b 	bl	80085fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f008 fcb5 	bl	80098f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f000 f8f7 	bl	800117c <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f90:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000f94:	0800c5b0 	.word	0x0800c5b0
  ldr  r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f9c:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 8000fa0:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 8000fa4:	20002fb8 	.word	0x20002fb8

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>
	...

08000fac <fputc>:

/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)

PUTCHAR_PROTOTYPE
{
 8000fac:	b507      	push	{r0, r1, r2, lr}
 8000fae:	a902      	add	r1, sp, #8
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8000fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8000fb4:	f841 0d04 	str.w	r0, [r1, #-4]!
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <fputc+0x1c>)
 8000fbc:	f008 fc3e 	bl	800983c <HAL_UART_Transmit>
  return ch;
}
 8000fc0:	9801      	ldr	r0, [sp, #4]
 8000fc2:	b003      	add	sp, #12
 8000fc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fc8:	20002d18 	.word	0x20002d18

08000fcc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin==VL53L1X_INT_Pin)
 8000fcc:	2810      	cmp	r0, #16
  {
    IntCount++;
 8000fce:	bf01      	itttt	eq
 8000fd0:	4a02      	ldreq	r2, [pc, #8]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x10>)
 8000fd2:	6813      	ldreq	r3, [r2, #0]
 8000fd4:	3301      	addeq	r3, #1
 8000fd6:	6013      	streq	r3, [r2, #0]
  }
}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20002d14 	.word	0x20002d14

08000fe0 <SystemClock_Config>:
/** System Clock Configuration
*/
#ifdef STM32F401xE

void SystemClock_Config(void)
{
 8000fe0:	b530      	push	{r4, r5, lr}
 8000fe2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  
  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <SystemClock_Config+0xa4>)
 8000fe8:	9201      	str	r2, [sp, #4]
 8000fea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000fec:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000ff0:	6419      	str	r1, [r3, #64]	; 0x40
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ff4:	4924      	ldr	r1, [pc, #144]	; (8001088 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ffe:	9202      	str	r2, [sp, #8]
 8001000:	680b      	ldr	r3, [r1, #0]
 8001002:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800100a:	600b      	str	r3, [r1, #0]
 800100c:	680b      	ldr	r3, [r1, #0]
 800100e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001012:	9302      	str	r3, [sp, #8]
 8001014:	9b02      	ldr	r3, [sp, #8]
  
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001016:	2101      	movs	r1, #1
 8001018:	2310      	movs	r3, #16
 800101a:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
 800101e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001020:	2504      	movs	r5, #4
 8001022:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001026:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001028:	e9cd 3511 	strd	r3, r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800102e:	2307      	movs	r3, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001030:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001032:	e9cd 420e 	strd	r4, r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001036:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	f008 f8a6 	bl	8009188 <HAL_RCC_OscConfig>
 800103c:	b100      	cbz	r0, 8001040 <SystemClock_Config+0x60>
 800103e:	e7fe      	b.n	800103e <SystemClock_Config+0x5e>
    Error_Handler();
  }
  
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001040:	230f      	movs	r3, #15
    |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001042:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104a:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104c:	e9cd 3006 	strd	r3, r0, [sp, #24]
  
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001050:	4621      	mov	r1, r4
 8001052:	a803      	add	r0, sp, #12
 8001054:	f008 fa6c 	bl	8009530 <HAL_RCC_ClockConfig>
 8001058:	4604      	mov	r4, r0
 800105a:	b100      	cbz	r0, 800105e <SystemClock_Config+0x7e>
 800105c:	e7fe      	b.n	800105c <SystemClock_Config+0x7c>
    Error_Handler();
  }
  
  /**Configure the Systick interrupt time 
  */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800105e:	f008 fb01 	bl	8009664 <HAL_RCC_GetHCLKFreq>
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb0 f0f3 	udiv	r0, r0, r3
 800106a:	f007 fb8b 	bl	8008784 <HAL_SYSTICK_Config>
  
  /**Configure the Systick 
  */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800106e:	4628      	mov	r0, r5
 8001070:	f007 fb9e 	bl	80087b0 <HAL_SYSTICK_CLKSourceConfig>
  
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001074:	4622      	mov	r2, r4
 8001076:	4621      	mov	r1, r4
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f007 fb40 	bl	8008700 <HAL_NVIC_SetPriority>
}
 8001080:	b015      	add	sp, #84	; 0x54
 8001082:	bd30      	pop	{r4, r5, pc}
 8001084:	40023800 	.word	0x40023800
 8001088:	40007000 	.word	0x40007000

0800108c <RangingLoop>:

/* USER CODE BEGIN 4 */

/* ranging and display loop */
void RangingLoop(void)
{
 800108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  VL53LX_MultiRangingData_t *pMultiRangingData = &MultiRangingData;
  uint8_t NewDataReady=0;
  int no_of_object_found=0,j;
  printf("Ranging loop starts\n");
  
  status = VL53LX_WaitDeviceBooted(Dev);
 8001090:	4e30      	ldr	r6, [pc, #192]	; (8001154 <RangingLoop+0xc8>)
  printf("Ranging loop starts\n");
 8001092:	4831      	ldr	r0, [pc, #196]	; (8001158 <RangingLoop+0xcc>)
  status = VL53LX_WaitDeviceBooted(Dev);
 8001094:	4d31      	ldr	r5, [pc, #196]	; (800115c <RangingLoop+0xd0>)
{
 8001096:	b09d      	sub	sp, #116	; 0x74
  printf("Ranging loop starts\n");
 8001098:	f009 f948 	bl	800a32c <puts>
  status = VL53LX_WaitDeviceBooted(Dev);
 800109c:	6830      	ldr	r0, [r6, #0]
 800109e:	f000 fccc 	bl	8001a3a <VL53LX_WaitDeviceBooted>
 80010a2:	6028      	str	r0, [r5, #0]
  status = VL53LX_DataInit(Dev);
 80010a4:	6830      	ldr	r0, [r6, #0]
 80010a6:	f000 ff2c 	bl	8001f02 <VL53LX_DataInit>
 80010aa:	6028      	str	r0, [r5, #0]
  status = VL53LX_StartMeasurement(Dev);
 80010ac:	6830      	ldr	r0, [r6, #0]
 80010ae:	f000 fd09 	bl	8001ac4 <VL53LX_StartMeasurement>
 80010b2:	4601      	mov	r1, r0
 80010b4:	6028      	str	r0, [r5, #0]
  
  if(status){
 80010b6:	bb38      	cbnz	r0, 8001108 <RangingLoop+0x7c>
  
  if (isInterrupt){
    do // HW interrupt mode
    {
      __WFI();
      if(IntCount !=0 ){
 80010b8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8001178 <RangingLoop+0xec>
      __WFI();
 80010bc:	bf30      	wfi
      if(IntCount !=0 ){
 80010be:	f8d8 3000 	ldr.w	r3, [r8]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0fa      	beq.n	80010bc <RangingLoop+0x30>
        IntCount=0;
        status = VL53LX_GetMultiRangingData(Dev, pMultiRangingData);
 80010c6:	a905      	add	r1, sp, #20
        IntCount=0;
 80010c8:	2700      	movs	r7, #0
        status = VL53LX_GetMultiRangingData(Dev, pMultiRangingData);
 80010ca:	6830      	ldr	r0, [r6, #0]
        IntCount=0;
 80010cc:	f8c8 7000 	str.w	r7, [r8]
        status = VL53LX_GetMultiRangingData(Dev, pMultiRangingData);
 80010d0:	f000 fd1a 	bl	8001b08 <VL53LX_GetMultiRangingData>
        no_of_object_found=pMultiRangingData->NumberOfObjectsFound;
 80010d4:	f89d 9019 	ldrb.w	r9, [sp, #25]
        status = VL53LX_GetMultiRangingData(Dev, pMultiRangingData);
 80010d8:	6028      	str	r0, [r5, #0]
        printf("Count=%5d, ", pMultiRangingData->StreamCount);
 80010da:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80010de:	4820      	ldr	r0, [pc, #128]	; (8001160 <RangingLoop+0xd4>)
 80010e0:	f009 f89c 	bl	800a21c <iprintf>
        printf("#Objs=%1d ", no_of_object_found);
 80010e4:	4649      	mov	r1, r9
 80010e6:	481f      	ldr	r0, [pc, #124]	; (8001164 <RangingLoop+0xd8>)
 80010e8:	f009 f898 	bl	800a21c <iprintf>
 80010ec:	ac05      	add	r4, sp, #20
        for(j=0;j<no_of_object_found;j++){
 80010ee:	454f      	cmp	r7, r9
 80010f0:	db0e      	blt.n	8001110 <RangingLoop+0x84>
                 pMultiRangingData->RangeData[j].RangeStatus,
                 pMultiRangingData->RangeData[j].RangeMilliMeter,
                 pMultiRangingData->RangeData[j].SignalRateRtnMegaCps/65536.0,
                 pMultiRangingData->RangeData[j].AmbientRateRtnMegaCps/65536.0);
        }
        printf ("\n");
 80010f2:	200a      	movs	r0, #10
 80010f4:	f009 f8aa 	bl	800a24c <putchar>
        if (status==0){
 80010f8:	682b      	ldr	r3, [r5, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1de      	bne.n	80010bc <RangingLoop+0x30>
          status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
 80010fe:	6830      	ldr	r0, [r6, #0]
 8001100:	f000 fcfe 	bl	8001b00 <VL53LX_ClearInterruptAndStartMeasurement>
 8001104:	6028      	str	r0, [r5, #0]
 8001106:	e7d9      	b.n	80010bc <RangingLoop+0x30>
    printf("VL53LX_StartMeasurement failed: error = %d \n", status);
 8001108:	4817      	ldr	r0, [pc, #92]	; (8001168 <RangingLoop+0xdc>)
 800110a:	f009 f887 	bl	800a21c <iprintf>
 800110e:	e7fe      	b.n	800110e <RangingLoop+0x82>
          if(j!=0)printf("\n                     ");
 8001110:	b117      	cbz	r7, 8001118 <RangingLoop+0x8c>
 8001112:	4816      	ldr	r0, [pc, #88]	; (800116c <RangingLoop+0xe0>)
 8001114:	f009 f882 	bl	800a21c <iprintf>
          printf("status=%d, D=%5dmm, Signal=%2.2f Mcps, Ambient=%2.2f Mcps",
 8001118:	6920      	ldr	r0, [r4, #16]
 800111a:	f9b4 b018 	ldrsh.w	fp, [r4, #24]
 800111e:	f894 a01a 	ldrb.w	sl, [r4, #26]
 8001122:	f7ff f9f7 	bl	8000514 <__aeabi_ui2d>
 8001126:	2200      	movs	r2, #0
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <RangingLoop+0xe4>)
 800112a:	f7ff fa6d 	bl	8000608 <__aeabi_dmul>
 800112e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001132:	68e0      	ldr	r0, [r4, #12]
 8001134:	f7ff f9ee 	bl	8000514 <__aeabi_ui2d>
 8001138:	2200      	movs	r2, #0
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <RangingLoop+0xe4>)
 800113c:	f7ff fa64 	bl	8000608 <__aeabi_dmul>
 8001140:	465a      	mov	r2, fp
 8001142:	e9cd 0100 	strd	r0, r1, [sp]
 8001146:	4651      	mov	r1, sl
 8001148:	480a      	ldr	r0, [pc, #40]	; (8001174 <RangingLoop+0xe8>)
 800114a:	f009 f867 	bl	800a21c <iprintf>
        for(j=0;j<no_of_object_found;j++){
 800114e:	3701      	adds	r7, #1
 8001150:	3414      	adds	r4, #20
 8001152:	e7cc      	b.n	80010ee <RangingLoop+0x62>
 8001154:	20000000 	.word	0x20000000
 8001158:	0800c1de 	.word	0x0800c1de
 800115c:	20002d58 	.word	0x20002d58
 8001160:	0800c21f 	.word	0x0800c21f
 8001164:	0800c22b 	.word	0x0800c22b
 8001168:	0800c1f2 	.word	0x0800c1f2
 800116c:	0800c236 	.word	0x0800c236
 8001170:	3ef00000 	.word	0x3ef00000
 8001174:	0800c24d 	.word	0x0800c24d
 8001178:	20002d14 	.word	0x20002d14

0800117c <main>:
{
 800117c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117e:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001180:	2400      	movs	r4, #0
  HAL_Init();
 8001182:	f007 fa6b 	bl	800865c <HAL_Init>
  SystemClock_Config();
 8001186:	f7ff ff2b 	bl	8000fe0 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	4b5d      	ldr	r3, [pc, #372]	; (8001300 <main+0x184>)
 800118c:	9401      	str	r4, [sp, #4]
 800118e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001190:	485c      	ldr	r0, [pc, #368]	; (8001304 <main+0x188>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001192:	4d5d      	ldr	r5, [pc, #372]	; (8001308 <main+0x18c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001194:	f042 0204 	orr.w	r2, r2, #4
 8001198:	631a      	str	r2, [r3, #48]	; 0x30
 800119a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800119c:	f002 0204 	and.w	r2, r2, #4
 80011a0:	9201      	str	r2, [sp, #4]
 80011a2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a4:	9402      	str	r4, [sp, #8]
 80011a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011ac:	631a      	str	r2, [r3, #48]	; 0x30
 80011ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80011b4:	9202      	str	r2, [sp, #8]
 80011b6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	9403      	str	r4, [sp, #12]
 80011ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011bc:	f042 0201 	orr.w	r2, r2, #1
 80011c0:	631a      	str	r2, [r3, #48]	; 0x30
 80011c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c4:	f002 0201 	and.w	r2, r2, #1
 80011c8:	9203      	str	r2, [sp, #12]
 80011ca:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011cc:	9404      	str	r4, [sp, #16]
 80011ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011d0:	f042 0202 	orr.w	r2, r2, #2
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011dc:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011e0:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011e4:	f007 fbca 	bl	800897c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ec:	a905      	add	r1, sp, #20
 80011ee:	4847      	ldr	r0, [pc, #284]	; (800130c <main+0x190>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011f2:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f6:	2601      	movs	r6, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f007 faec 	bl	80087d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VL53L1X_INT_Pin;
 80011fc:	2310      	movs	r3, #16
  HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);
 80011fe:	a905      	add	r1, sp, #20
 8001200:	4840      	ldr	r0, [pc, #256]	; (8001304 <main+0x188>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001202:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001204:	e9cd 3505 	strd	r3, r5, [sp, #20]
  HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);
 8001208:	f007 fae4 	bl	80087d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800120c:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800120e:	a905      	add	r1, sp, #20
 8001210:	483c      	ldr	r0, [pc, #240]	; (8001304 <main+0x188>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800121a:	f007 fadb 	bl	80087d4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800121e:	4621      	mov	r1, r4
 8001220:	4622      	mov	r2, r4
 8001222:	200a      	movs	r0, #10
 8001224:	f007 fa6c 	bl	8008700 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001228:	200a      	movs	r0, #10
 800122a:	f007 fa9d 	bl	8008768 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 800122e:	4838      	ldr	r0, [pc, #224]	; (8001310 <main+0x194>)
  huart2.Init.BaudRate = 115200;
 8001230:	4938      	ldr	r1, [pc, #224]	; (8001314 <main+0x198>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8001232:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 8001234:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001238:	e9c0 1300 	strd	r1, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800123c:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800123e:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001246:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001248:	f008 faca 	bl	80097e0 <HAL_UART_Init>
 800124c:	b100      	cbz	r0, 8001250 <main+0xd4>
 800124e:	e7fe      	b.n	800124e <main+0xd2>
  hi2c1.Instance = I2C1;
 8001250:	4c31      	ldr	r4, [pc, #196]	; (8001318 <main+0x19c>)
  hi2c1.Init.ClockSpeed = 100000;
 8001252:	4a32      	ldr	r2, [pc, #200]	; (800131c <main+0x1a0>)
 8001254:	4b32      	ldr	r3, [pc, #200]	; (8001320 <main+0x1a4>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001256:	6220      	str	r0, [r4, #32]
  hi2c1.Init.ClockSpeed = 100000;
 8001258:	e9c4 2300 	strd	r2, r3, [r4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800125c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001260:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001264:	e9c4 3004 	strd	r3, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001268:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800126c:	4620      	mov	r0, r4
 800126e:	f007 fc97 	bl	8008ba0 <HAL_I2C_Init>
 8001272:	4607      	mov	r7, r0
 8001274:	b100      	cbz	r0, 8001278 <main+0xfc>
 8001276:	e7fe      	b.n	8001276 <main+0xfa>
  Dev->I2cHandle = &hi2c1;
 8001278:	4d2a      	ldr	r5, [pc, #168]	; (8001324 <main+0x1a8>)
  XNUCLEO53L3A2_Init();
 800127a:	f000 fb23 	bl	80018c4 <XNUCLEO53L3A2_Init>
  printf("VL53L1X Examples...\n");
 800127e:	482a      	ldr	r0, [pc, #168]	; (8001328 <main+0x1ac>)
 8001280:	f009 f854 	bl	800a32c <puts>
  Dev->I2cHandle = &hi2c1;
 8001284:	682b      	ldr	r3, [r5, #0]
 8001286:	f642 224c 	movw	r2, #10828	; 0x2a4c
  Dev->I2cDevAddr = 0x52;
 800128a:	2152      	movs	r1, #82	; 0x52
  Dev->I2cHandle = &hi2c1;
 800128c:	509c      	str	r4, [r3, r2]
  Dev->I2cDevAddr = 0x52;
 800128e:	f642 2250 	movw	r2, #10832	; 0x2a50
  status = XNUCLEO53L3A2_ResetId(ToFSensor, 0); // Reset ToF sensor
 8001292:	4630      	mov	r0, r6
  Dev->I2cDevAddr = 0x52;
 8001294:	5499      	strb	r1, [r3, r2]
  status = XNUCLEO53L3A2_ResetId(ToFSensor, 0); // Reset ToF sensor
 8001296:	4639      	mov	r1, r7
 8001298:	f000 fb5a 	bl	8001950 <XNUCLEO53L3A2_ResetId>
 800129c:	4c23      	ldr	r4, [pc, #140]	; (800132c <main+0x1b0>)
 800129e:	6020      	str	r0, [r4, #0]
  HAL_Delay(2);
 80012a0:	2002      	movs	r0, #2
 80012a2:	f007 fa07 	bl	80086b4 <HAL_Delay>
  status = XNUCLEO53L3A2_ResetId(ToFSensor, 1); // Reset ToF sensor
 80012a6:	4631      	mov	r1, r6
 80012a8:	4630      	mov	r0, r6
 80012aa:	f000 fb51 	bl	8001950 <XNUCLEO53L3A2_ResetId>
 80012ae:	6020      	str	r0, [r4, #0]
  HAL_Delay(2);
 80012b0:	2002      	movs	r0, #2
 80012b2:	f007 f9ff 	bl	80086b4 <HAL_Delay>
  VL53LX_RdByte(Dev, 0x010F, &byteData);
 80012b6:	f10d 0203 	add.w	r2, sp, #3
 80012ba:	f240 110f 	movw	r1, #271	; 0x10f
 80012be:	6828      	ldr	r0, [r5, #0]
 80012c0:	f000 f962 	bl	8001588 <VL53LX_RdByte>
  printf("VL53LX Model_ID: %02X\n\r", byteData);
 80012c4:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80012c8:	4819      	ldr	r0, [pc, #100]	; (8001330 <main+0x1b4>)
 80012ca:	f008 ffa7 	bl	800a21c <iprintf>
  VL53LX_RdByte(Dev, 0x0110, &byteData);
 80012ce:	f10d 0203 	add.w	r2, sp, #3
 80012d2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80012d6:	6828      	ldr	r0, [r5, #0]
 80012d8:	f000 f956 	bl	8001588 <VL53LX_RdByte>
  printf("VL53LX Module_Type: %02X\n\r", byteData);
 80012dc:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80012e0:	4814      	ldr	r0, [pc, #80]	; (8001334 <main+0x1b8>)
 80012e2:	f008 ff9b 	bl	800a21c <iprintf>
  VL53LX_RdWord(Dev, 0x010F, &wordData);
 80012e6:	aa05      	add	r2, sp, #20
 80012e8:	f240 110f 	movw	r1, #271	; 0x10f
 80012ec:	6828      	ldr	r0, [r5, #0]
 80012ee:	f000 f963 	bl	80015b8 <VL53LX_RdWord>
  printf("VL53LX: %02X\n\r", wordData);
 80012f2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80012f6:	4810      	ldr	r0, [pc, #64]	; (8001338 <main+0x1bc>)
 80012f8:	f008 ff90 	bl	800a21c <iprintf>
  RangingLoop();
 80012fc:	f7ff fec6 	bl	800108c <RangingLoop>
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000
 8001308:	10210000 	.word	0x10210000
 800130c:	40020800 	.word	0x40020800
 8001310:	20002d18 	.word	0x20002d18
 8001314:	40004400 	.word	0x40004400
 8001318:	20002cc0 	.word	0x20002cc0
 800131c:	40005400 	.word	0x40005400
 8001320:	000186a0 	.word	0x000186a0
 8001324:	20000000 	.word	0x20000000
 8001328:	0800c287 	.word	0x0800c287
 800132c:	20002d58 	.word	0x20002d58
 8001330:	0800c29b 	.word	0x0800c29b
 8001334:	0800c2b3 	.word	0x0800c2b3
 8001338:	0800c2ce 	.word	0x0800c2ce

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800133e:	2007      	movs	r0, #7
 8001340:	f007 f9cc 	bl	80086dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	4611      	mov	r1, r2
 8001348:	f06f 000b 	mvn.w	r0, #11
 800134c:	f007 f9d8 	bl	8008700 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	4611      	mov	r1, r2
 8001354:	f06f 000a 	mvn.w	r0, #10
 8001358:	f007 f9d2 	bl	8008700 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	4611      	mov	r1, r2
 8001360:	f06f 0009 	mvn.w	r0, #9
 8001364:	f007 f9cc 	bl	8008700 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	4611      	mov	r1, r2
 800136c:	f06f 0004 	mvn.w	r0, #4
 8001370:	f007 f9c6 	bl	8008700 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	4611      	mov	r1, r2
 8001378:	f06f 0003 	mvn.w	r0, #3
 800137c:	f007 f9c0 	bl	8008700 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	4611      	mov	r1, r2
 8001384:	f06f 0001 	mvn.w	r0, #1
 8001388:	f007 f9ba 	bl	8008700 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	4611      	mov	r1, r2
 8001390:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001394:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001398:	f007 b9b2 	b.w	8008700 <HAL_NVIC_SetPriority>

0800139c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800139c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800139e:	6802      	ldr	r2, [r0, #0]
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_I2C_MspInit+0x48>)
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d11b      	bne.n	80013de <HAL_I2C_MspInit+0x42>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013aa:	2312      	movs	r3, #18
 80013ac:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2101      	movs	r1, #1
 80013b2:	2303      	movs	r3, #3
 80013b4:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b8:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	eb0d 0103 	add.w	r1, sp, r3
 80013be:	480a      	ldr	r0, [pc, #40]	; (80013e8 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013c0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f007 fa07 	bl	80087d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_I2C_MspInit+0x50>)
 80013cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013ce:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80013d2:	641a      	str	r2, [r3, #64]	; 0x40
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013de:	b007      	add	sp, #28
 80013e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80013e4:	40005400 	.word	0x40005400
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40023800 	.word	0x40023800

080013f0 <HAL_UART_MspInit>:
  /* USER CODE END I2C1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80013f2:	6802      	ldr	r2, [r0, #0]
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_UART_MspInit+0x40>)
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d117      	bne.n	800142a <HAL_UART_MspInit+0x3a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <HAL_UART_MspInit+0x44>)
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	6c11      	ldr	r1, [r2, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	480d      	ldr	r0, [pc, #52]	; (8001438 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001404:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001408:	6411      	str	r1, [r2, #64]	; 0x40
 800140a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800140c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001410:	9200      	str	r2, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	210c      	movs	r1, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8001414:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2202      	movs	r2, #2
 8001418:	e9cd 1201 	strd	r1, r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001422:	2307      	movs	r3, #7
 8001424:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f007 f9d5 	bl	80087d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800142a:	b007      	add	sp, #28
 800142c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001430:	40004400 	.word	0x40004400
 8001434:	40023800 	.word	0x40023800
 8001438:	40020000 	.word	0x40020000

0800143c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800143c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143e:	f007 f927 	bl	8008690 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001446:	f007 b9c0 	b.w	80087ca <HAL_SYSTICK_IRQHandler>

0800144a <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800144a:	2010      	movs	r0, #16
 800144c:	f007 ba9c 	b.w	8008988 <HAL_GPIO_EXTI_IRQHandler>

08001450 <_write>:

extern int fputc(int ch) __attribute__((weak));


int _write(int file, char *ptr, int len)
{
 8001450:	b570      	push	{r4, r5, r6, lr}
 8001452:	460e      	mov	r6, r1
 8001454:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001456:	460c      	mov	r4, r1
 8001458:	1ba3      	subs	r3, r4, r6
 800145a:	429d      	cmp	r5, r3
 800145c:	dc01      	bgt.n	8001462 <_write+0x12>
	{
		fputc(*ptr++);
	}
	return len;
}
 800145e:	4628      	mov	r0, r5
 8001460:	bd70      	pop	{r4, r5, r6, pc}
		fputc(*ptr++);
 8001462:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001466:	f7ff fda1 	bl	8000fac <fputc>
 800146a:	e7f5      	b.n	8001458 <_write+0x8>

0800146c <_I2CWrite>:
#   define VL53LX_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 800146c:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
//    int i;
    i2cwriteCount+=count;
 800146e:	4c0a      	ldr	r4, [pc, #40]	; (8001498 <_I2CWrite+0x2c>)
 8001470:	6823      	ldr	r3, [r4, #0]
 8001472:	4413      	add	r3, r2
 8001474:	6023      	str	r3, [r4, #0]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8001476:	f642 2350 	movw	r3, #10832	; 0x2a50
 800147a:	5cc4      	ldrb	r4, [r0, r3]
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800147c:	f102 030a 	add.w	r3, r2, #10
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	b293      	uxth	r3, r2
 8001484:	460a      	mov	r2, r1
 8001486:	4621      	mov	r1, r4
 8001488:	f642 244c 	movw	r4, #10828	; 0x2a4c
 800148c:	5900      	ldr	r0, [r0, r4]
 800148e:	f007 fc33 	bl	8008cf8 <HAL_I2C_Master_Transmit>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 8001492:	b002      	add	sp, #8
 8001494:	bd10      	pop	{r4, pc}
 8001496:	bf00      	nop
 8001498:	2000022c 	.word	0x2000022c

0800149c <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 800149c:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    i2creadCount+=count;
 800149e:	4c0a      	ldr	r4, [pc, #40]	; (80014c8 <_I2CRead+0x2c>)
 80014a0:	6863      	ldr	r3, [r4, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	6063      	str	r3, [r4, #4]
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80014a6:	f642 2350 	movw	r3, #10832	; 0x2a50
 80014aa:	5cc4      	ldrb	r4, [r0, r3]
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80014ac:	f102 030a 	add.w	r3, r2, #10
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	b293      	uxth	r3, r2
 80014b4:	460a      	mov	r2, r1
 80014b6:	f044 0101 	orr.w	r1, r4, #1
 80014ba:	f642 244c 	movw	r4, #10828	; 0x2a4c
 80014be:	5900      	ldr	r0, [r0, r4]
 80014c0:	f007 fcee 	bl	8008ea0 <HAL_I2C_Master_Receive>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 80014c4:	b002      	add	sp, #8
 80014c6:	bd10      	pop	{r4, pc}
 80014c8:	2000022c 	.word	0x2000022c

080014cc <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
    if (count > sizeof(_I2CBuffer) - 1) {
 80014cc:	2bff      	cmp	r3, #255	; 0xff
VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80014ce:	b570      	push	{r4, r5, r6, lr}
 80014d0:	4606      	mov	r6, r0
 80014d2:	461d      	mov	r5, r3
 80014d4:	4610      	mov	r0, r2
    if (count > sizeof(_I2CBuffer) - 1) {
 80014d6:	d813      	bhi.n	8001500 <VL53LX_WriteMulti+0x34>
        return VL53LX_ERROR_INVALID_PARAMS;
    }
    _I2CBuffer[0] = index>>8;
 80014d8:	4c0b      	ldr	r4, [pc, #44]	; (8001508 <VL53LX_WriteMulti+0x3c>)
 80014da:	0a0b      	lsrs	r3, r1, #8
    _I2CBuffer[1] = index&0xFF;
 80014dc:	7061      	strb	r1, [r4, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80014de:	462a      	mov	r2, r5
 80014e0:	4601      	mov	r1, r0
 80014e2:	1ca0      	adds	r0, r4, #2
    _I2CBuffer[0] = index>>8;
 80014e4:	7023      	strb	r3, [r4, #0]
    memcpy(&_I2CBuffer[2], pdata, count);
 80014e6:	f008 fa29 	bl	800993c <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80014ea:	1caa      	adds	r2, r5, #2
 80014ec:	4621      	mov	r1, r4
 80014ee:	4630      	mov	r0, r6
 80014f0:	f7ff ffbc 	bl	800146c <_I2CWrite>
    if (status_int != 0) {
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80014f4:	2800      	cmp	r0, #0
 80014f6:	bf0c      	ite	eq
 80014f8:	2000      	moveq	r0, #0
 80014fa:	f06f 000c 	mvnne.w	r0, #12
    }
    VL53LX_PutI2cBus();
    return Status;
}
 80014fe:	bd70      	pop	{r4, r5, r6, pc}
        return VL53LX_ERROR_INVALID_PARAMS;
 8001500:	f06f 0003 	mvn.w	r0, #3
 8001504:	e7fb      	b.n	80014fe <VL53LX_WriteMulti+0x32>
 8001506:	bf00      	nop
 8001508:	20002d5c 	.word	0x20002d5c

0800150c <VL53LX_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150e:	460c      	mov	r4, r1
    VL53LX_Error Status = VL53LX_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8001510:	4909      	ldr	r1, [pc, #36]	; (8001538 <VL53LX_ReadMulti+0x2c>)
VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8001512:	4616      	mov	r6, r2
 8001514:	461f      	mov	r7, r3
    _I2CBuffer[1] = index&0xFF;
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8001516:	2202      	movs	r2, #2
    _I2CBuffer[0] = index>>8;
 8001518:	0a23      	lsrs	r3, r4, #8
VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800151a:	4605      	mov	r5, r0
    _I2CBuffer[0] = index>>8;
 800151c:	700b      	strb	r3, [r1, #0]
    _I2CBuffer[1] = index&0xFF;
 800151e:	704c      	strb	r4, [r1, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8001520:	f7ff ffa4 	bl	800146c <_I2CWrite>
    if (status_int != 0) {
 8001524:	b928      	cbnz	r0, 8001532 <VL53LX_ReadMulti+0x26>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, pdata, count);
 8001526:	463a      	mov	r2, r7
 8001528:	4631      	mov	r1, r6
 800152a:	4628      	mov	r0, r5
 800152c:	f7ff ffb6 	bl	800149c <_I2CRead>
    if (status_int != 0) {
 8001530:	b108      	cbz	r0, 8001536 <VL53LX_ReadMulti+0x2a>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8001532:	f06f 000c 	mvn.w	r0, #12
    }
done:
    VL53LX_PutI2cBus();
    return Status;
}
 8001536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001538:	20002d5c 	.word	0x20002d5c

0800153c <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
    VL53LX_Error Status = VL53LX_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <VL53LX_WrByte+0x20>)
VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 800153e:	b510      	push	{r4, lr}
    _I2CBuffer[0] = index>>8;
 8001540:	0a0c      	lsrs	r4, r1, #8
    _I2CBuffer[1] = index&0xFF;
 8001542:	7059      	strb	r1, [r3, #1]
    _I2CBuffer[2] = data;
 8001544:	709a      	strb	r2, [r3, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8001546:	4619      	mov	r1, r3
 8001548:	2203      	movs	r2, #3
    _I2CBuffer[0] = index>>8;
 800154a:	701c      	strb	r4, [r3, #0]
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800154c:	f7ff ff8e 	bl	800146c <_I2CWrite>
    if (status_int != 0) {
 8001550:	2800      	cmp	r0, #0
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
    }
    VL53LX_PutI2cBus();
    return Status;
}
 8001552:	bf14      	ite	ne
 8001554:	f06f 000c 	mvnne.w	r0, #12
 8001558:	2000      	moveq	r0, #0
 800155a:	bd10      	pop	{r4, pc}
 800155c:	20002d5c 	.word	0x20002d5c

08001560 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
    VL53LX_Error Status = VL53LX_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <VL53LX_WrWord+0x24>)
VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 8001562:	b510      	push	{r4, lr}
    _I2CBuffer[0] = index>>8;
 8001564:	0a0c      	lsrs	r4, r1, #8
    _I2CBuffer[1] = index&0xFF;
 8001566:	7059      	strb	r1, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8001568:	0a11      	lsrs	r1, r2, #8
 800156a:	7099      	strb	r1, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 800156c:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 800156e:	4619      	mov	r1, r3
 8001570:	2204      	movs	r2, #4
    _I2CBuffer[0] = index>>8;
 8001572:	701c      	strb	r4, [r3, #0]
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8001574:	f7ff ff7a 	bl	800146c <_I2CWrite>
    if (status_int != 0) {
 8001578:	2800      	cmp	r0, #0
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
    }
    VL53LX_PutI2cBus();
    return Status;
}
 800157a:	bf14      	ite	ne
 800157c:	f06f 000c 	mvnne.w	r0, #12
 8001580:	2000      	moveq	r0, #0
 8001582:	bd10      	pop	{r4, pc}
 8001584:	20002d5c 	.word	0x20002d5c

08001588 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 8001588:	b538      	push	{r3, r4, r5, lr}
    VL53LX_Error Status = VL53LX_ERROR_NONE;
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <VL53LX_RdByte+0x2c>)
VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 800158c:	4615      	mov	r5, r2
	_I2CBuffer[0] = index>>8;
 800158e:	0a0a      	lsrs	r2, r1, #8
 8001590:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8001592:	7059      	strb	r1, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8001594:	2202      	movs	r2, #2
 8001596:	4619      	mov	r1, r3
VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 8001598:	4604      	mov	r4, r0
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800159a:	f7ff ff67 	bl	800146c <_I2CWrite>
    if( status_int ){
 800159e:	b928      	cbnz	r0, 80015ac <VL53LX_RdByte+0x24>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, data, 1);
 80015a0:	2201      	movs	r2, #1
 80015a2:	4629      	mov	r1, r5
 80015a4:	4620      	mov	r0, r4
 80015a6:	f7ff ff79 	bl	800149c <_I2CRead>
    if (status_int != 0) {
 80015aa:	b108      	cbz	r0, 80015b0 <VL53LX_RdByte+0x28>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80015ac:	f06f 000c 	mvn.w	r0, #12
    }
done:
    VL53LX_PutI2cBus();
    return Status;
}
 80015b0:	bd38      	pop	{r3, r4, r5, pc}
 80015b2:	bf00      	nop
 80015b4:	20002d5c 	.word	0x20002d5c

080015b8 <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 80015b8:	b570      	push	{r4, r5, r6, lr}
    VL53LX_Error Status = VL53LX_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80015ba:	4c0d      	ldr	r4, [pc, #52]	; (80015f0 <VL53LX_RdWord+0x38>)
 80015bc:	0a0b      	lsrs	r3, r1, #8
VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 80015be:	4615      	mov	r5, r2
	_I2CBuffer[1] = index&0xFF;
 80015c0:	7061      	strb	r1, [r4, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80015c2:	2202      	movs	r2, #2
 80015c4:	4621      	mov	r1, r4
VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 80015c6:	4606      	mov	r6, r0
    _I2CBuffer[0] = index>>8;
 80015c8:	7023      	strb	r3, [r4, #0]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80015ca:	f7ff ff4f 	bl	800146c <_I2CWrite>

    if( status_int ){
 80015ce:	b110      	cbz	r0, 80015d6 <VL53LX_RdWord+0x1e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80015d0:	f06f 000c 	mvn.w	r0, #12

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
done:
    VL53LX_PutI2cBus();
    return Status;
}
 80015d4:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80015d6:	2202      	movs	r2, #2
 80015d8:	4621      	mov	r1, r4
 80015da:	4630      	mov	r0, r6
 80015dc:	f7ff ff5e 	bl	800149c <_I2CRead>
    if (status_int != 0) {
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d1f5      	bne.n	80015d0 <VL53LX_RdWord+0x18>
    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80015e4:	7822      	ldrb	r2, [r4, #0]
 80015e6:	7863      	ldrb	r3, [r4, #1]
 80015e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80015ec:	802b      	strh	r3, [r5, #0]
 80015ee:	e7f1      	b.n	80015d4 <VL53LX_RdWord+0x1c>
 80015f0:	20002d5c 	.word	0x20002d5c

080015f4 <VL53LX_WaitUs>:
	(void)pdev;
	HAL_Delay(wait_ms);
    return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitUs(VL53LX_Dev_t *pdev, int32_t wait_us){
 80015f4:	b508      	push	{r3, lr}
	(void)pdev;
	HAL_Delay(wait_us/1000);
 80015f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015fa:	fb91 f0f0 	sdiv	r0, r1, r0
 80015fe:	f007 f859 	bl	80086b4 <HAL_Delay>
    return VL53LX_ERROR_NONE;
}
 8001602:	2000      	movs	r0, #0
 8001604:	bd08      	pop	{r3, pc}
	...

08001608 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8001608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800160c:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001610:	4606      	mov	r6, r0
 8001612:	460f      	mov	r7, r1
 8001614:	4690      	mov	r8, r2

	VL53LX_Error status         = VL53LX_ERROR_NONE;
	uint32_t     start_time_ms = 0;
	uint32_t     current_time_ms = 0;
	uint32_t     polling_time_ms = 0;
	uint8_t      byte_value      = 0;
 8001616:	2400      	movs	r4, #0
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 8001618:	f240 12ff 	movw	r2, #511	; 0x1ff
 800161c:	4918      	ldr	r1, [pc, #96]	; (8001680 <VL53LX_WaitValueMaskEx+0x78>)
{
 800161e:	f89d a228 	ldrb.w	sl, [sp, #552]	; 0x228
 8001622:	9d8b      	ldr	r5, [sp, #556]	; 0x22c
	uint8_t      byte_value      = 0;
 8001624:	f88d 4007 	strb.w	r4, [sp, #7]
	VL53LX_COPYSTRING(register_name, "");
 8001628:	a802      	add	r0, sp, #8
{
 800162a:	4699      	mov	r9, r3
	VL53LX_COPYSTRING(register_name, "");
 800162c:	f008 fe86 	bl	800a33c <strncpy>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 8001630:	b1ff      	cbz	r7, 8001672 <VL53LX_WaitValueMaskEx+0x6a>
		   (polling_time_ms < timeout_ms) &&
 8001632:	b12c      	cbz	r4, 8001640 <VL53LX_WaitValueMaskEx+0x38>
 8001634:	2300      	movs	r3, #0

	if (found == 0 && status == VL53LX_ERROR_NONE)
		status = VL53LX_ERROR_TIME_OUT;

	return status;
}
 8001636:	4618      	mov	r0, r3
 8001638:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 800163c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			status = VL53LX_RdByte(
 8001640:	f10d 0207 	add.w	r2, sp, #7
 8001644:	4641      	mov	r1, r8
 8001646:	4630      	mov	r0, r6
 8001648:	f7ff ff9e 	bl	8001588 <VL53LX_RdByte>
		if ((byte_value & mask) == value)
 800164c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001650:	ea0a 0202 	and.w	r2, sl, r2
 8001654:	454a      	cmp	r2, r9
			status = VL53LX_RdByte(
 8001656:	4603      	mov	r3, r0
		if ((byte_value & mask) == value)
 8001658:	d103      	bne.n	8001662 <VL53LX_WaitValueMaskEx+0x5a>
	while ((status == VL53LX_ERROR_NONE) &&
 800165a:	2800      	cmp	r0, #0
 800165c:	d1eb      	bne.n	8001636 <VL53LX_WaitValueMaskEx+0x2e>
			found = 1;
 800165e:	2401      	movs	r4, #1
 8001660:	e7e6      	b.n	8001630 <VL53LX_WaitValueMaskEx+0x28>
		if (status == VL53LX_ERROR_NONE  &&
 8001662:	2800      	cmp	r0, #0
 8001664:	d1e7      	bne.n	8001636 <VL53LX_WaitValueMaskEx+0x2e>
			found == 0 &&
 8001666:	2d00      	cmp	r5, #0
 8001668:	d0e2      	beq.n	8001630 <VL53LX_WaitValueMaskEx+0x28>
	HAL_Delay(wait_ms);
 800166a:	4628      	mov	r0, r5
 800166c:	f007 f822 	bl	80086b4 <HAL_Delay>
 8001670:	e7de      	b.n	8001630 <VL53LX_WaitValueMaskEx+0x28>
		status = VL53LX_ERROR_TIME_OUT;
 8001672:	2c00      	cmp	r4, #0
 8001674:	bf14      	ite	ne
 8001676:	2300      	movne	r3, #0
 8001678:	f06f 0306 	mvneq.w	r3, #6
 800167c:	e7db      	b.n	8001636 <VL53LX_WaitValueMaskEx+0x2e>
 800167e:	bf00      	nop
 8001680:	0800c21e 	.word	0x0800c21e

08001684 <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 8001684:	b4f0      	push	{r4, r5, r6, r7}
 8001686:	4608      	mov	r0, r1
 8001688:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 800168c:	4611      	mov	r1, r2
 800168e:	461a      	mov	r2, r3
 8001690:	e9dd 3404 	ldrd	r3, r4, [sp, #16]

	VL53LX_Error status         = VL53LX_ERROR_NONE;

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
 8001694:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8001696:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800169a:	e9cd 6706 	strd	r6, r7, [sp, #24]
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
}
 800169e:	bcf0      	pop	{r4, r5, r6, r7}
	status =
 80016a0:	f005 bec3 	b.w	800742a <VL53LX_hist_process_data>

080016a4 <_ExpanderRd>:
 * @param index      register index
 * @param data       read data buffer
 * @param n_data     number of byte to read
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	b085      	sub	sp, #20
 80016a8:	4617      	mov	r7, r2

    int status;
    uint8_t RegAddr;
    RegAddr = index;
 80016aa:	aa04      	add	r2, sp, #16
    XNUCLEO53L3A2_GetI2cBus();
    do {
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L3A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 80016ac:	b285      	uxth	r5, r0
 80016ae:	2464      	movs	r4, #100	; 0x64
    RegAddr = index;
 80016b0:	f802 1d01 	strb.w	r1, [r2, #-1]!
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 80016b4:	461e      	mov	r6, r3
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L3A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 80016b6:	9400      	str	r4, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	4629      	mov	r1, r5
 80016bc:	4806      	ldr	r0, [pc, #24]	; (80016d8 <_ExpanderRd+0x34>)
 80016be:	f007 fb1b 	bl	8008cf8 <HAL_I2C_Master_Transmit>
        if (status)
 80016c2:	b938      	cbnz	r0, 80016d4 <_ExpanderRd+0x30>
            break;
        status = HAL_I2C_Master_Receive(&XNUCLEO53L3A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 80016c4:	4374      	muls	r4, r6
 80016c6:	9400      	str	r4, [sp, #0]
 80016c8:	b2b3      	uxth	r3, r6
 80016ca:	463a      	mov	r2, r7
 80016cc:	4629      	mov	r1, r5
 80016ce:	4802      	ldr	r0, [pc, #8]	; (80016d8 <_ExpanderRd+0x34>)
 80016d0:	f007 fbe6 	bl	8008ea0 <HAL_I2C_Master_Receive>
    } while (0);
    XNUCLEO53L3A2_PutI2cBus();
    return status;
}
 80016d4:	b005      	add	sp, #20
 80016d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d8:	20002f5c 	.word	0x20002f5c

080016dc <_ExpanderWR>:
 * @param index      register index
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 80016dc:	b570      	push	{r4, r5, r6, lr}
 80016de:	b086      	sub	sp, #24

    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0] = index;
 80016e0:	ad06      	add	r5, sp, #24
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 80016e2:	4606      	mov	r6, r0
 80016e4:	4610      	mov	r0, r2
    RegAddr[0] = index;
 80016e6:	f805 1d10 	strb.w	r1, [r5, #-16]!
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 80016ea:	461c      	mov	r4, r3
    memcpy(RegAddr + 1, data, n_data);
 80016ec:	461a      	mov	r2, r3
 80016ee:	4601      	mov	r1, r0
 80016f0:	f10d 0009 	add.w	r0, sp, #9
 80016f4:	f008 f922 	bl	800993c <memcpy>
    XNUCLEO53L3A2_GetI2cBus();
    status = HAL_I2C_Master_Transmit(&XNUCLEO53L3A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 80016f8:	1c63      	adds	r3, r4, #1
 80016fa:	2264      	movs	r2, #100	; 0x64
 80016fc:	9200      	str	r2, [sp, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	462a      	mov	r2, r5
 8001702:	b2b1      	uxth	r1, r6
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <_ExpanderWR+0x34>)
 8001706:	f007 faf7 	bl	8008cf8 <HAL_I2C_Master_Transmit>
    XNUCLEO53L3A2_PutI2cBus();
    return status;
}
 800170a:	b006      	add	sp, #24
 800170c:	bd70      	pop	{r4, r5, r6, pc}
 800170e:	bf00      	nop
 8001710:	20002f5c 	.word	0x20002f5c

08001714 <_ExpandersSetAllIO>:
static int _ExpandersSetAllIO(void){
 8001714:	b510      	push	{r4, lr}
    status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 8001716:	2302      	movs	r3, #2
 8001718:	4a07      	ldr	r2, [pc, #28]	; (8001738 <_ExpandersSetAllIO+0x24>)
 800171a:	2112      	movs	r1, #18
 800171c:	2086      	movs	r0, #134	; 0x86
 800171e:	f7ff ffdd 	bl	80016dc <_ExpanderWR>
    if( status ){
 8001722:	b938      	cbnz	r0, 8001734 <_ExpandersSetAllIO+0x20>
    status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 8001724:	2302      	movs	r3, #2
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <_ExpandersSetAllIO+0x28>)
 8001728:	2112      	movs	r1, #18
 800172a:	2084      	movs	r0, #132	; 0x84
}
 800172c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 8001730:	f7ff bfd4 	b.w	80016dc <_ExpanderWR>
}
 8001734:	bd10      	pop	{r4, pc}
 8001736:	bf00      	nop
 8001738:	20000234 	.word	0x20000234
 800173c:	20000236 	.word	0x20000236

08001740 <XNUCLEO53L3A2_I2C1Configure>:
int XNUCLEO53L3A2_I2C1Configure() {
 8001740:	b570      	push	{r4, r5, r6, lr}
 8001742:	b088      	sub	sp, #32
    __GPIOB_CLK_ENABLE();
 8001744:	2300      	movs	r3, #0
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	4b58      	ldr	r3, [pc, #352]	; (80018ac <XNUCLEO53L3A2_I2C1Configure+0x16c>)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800174a:	4859      	ldr	r0, [pc, #356]	; (80018b0 <XNUCLEO53L3A2_I2C1Configure+0x170>)
    __GPIOB_CLK_ENABLE();
 800174c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800174e:	f042 0202 	orr.w	r2, r2, #2
 8001752:	631a      	str	r2, [r3, #48]	; 0x30
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800175c:	2201      	movs	r2, #1
 800175e:	f44f 7180 	mov.w	r1, #256	; 0x100
    __GPIOB_CLK_ENABLE();
 8001762:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001764:	f007 f90a 	bl	800897c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001768:	2201      	movs	r2, #1
 800176a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800176e:	4850      	ldr	r0, [pc, #320]	; (80018b0 <XNUCLEO53L3A2_I2C1Configure+0x170>)
 8001770:	f007 f904 	bl	800897c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001774:	f44f 7540 	mov.w	r5, #768	; 0x300
 8001778:	2311      	movs	r3, #17
 800177a:	e9cd 5303 	strd	r5, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001780:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001782:	484b      	ldr	r0, [pc, #300]	; (80018b0 <XNUCLEO53L3A2_I2C1Configure+0x170>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001784:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	f007 f825 	bl	80087d4 <HAL_GPIO_Init>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800178a:	4d49      	ldr	r5, [pc, #292]	; (80018b0 <XNUCLEO53L3A2_I2C1Configure+0x170>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178c:	2408      	movs	r4, #8
 800178e:	260a      	movs	r6, #10
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001796:	4628      	mov	r0, r5
 8001798:	f007 f8f0 	bl	800897c <HAL_GPIO_WritePin>
            HAL_Delay(1);
 800179c:	2001      	movs	r0, #1
 800179e:	f006 ff89 	bl	80086b4 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a8:	4628      	mov	r0, r5
 80017aa:	f007 f8e7 	bl	800897c <HAL_GPIO_WritePin>
            HAL_Delay(1);
 80017ae:	2001      	movs	r0, #1
 80017b0:	f006 ff80 	bl	80086b4 <HAL_Delay>
        for( i=0; i<10; i++){
 80017b4:	3e01      	subs	r6, #1
 80017b6:	d1eb      	bne.n	8001790 <XNUCLEO53L3A2_I2C1Configure+0x50>
    }while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 && nRetry++<7);
 80017b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017bc:	4628      	mov	r0, r5
 80017be:	f007 f8d7 	bl	8008970 <HAL_GPIO_ReadPin>
 80017c2:	b908      	cbnz	r0, 80017c8 <XNUCLEO53L3A2_I2C1Configure+0x88>
 80017c4:	3c01      	subs	r4, #1
 80017c6:	d1e2      	bne.n	800178e <XNUCLEO53L3A2_I2C1Configure+0x4e>
    if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
 80017c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017cc:	4838      	ldr	r0, [pc, #224]	; (80018b0 <XNUCLEO53L3A2_I2C1Configure+0x170>)
 80017ce:	f007 f8cf 	bl	8008970 <HAL_GPIO_ReadPin>
 80017d2:	4b36      	ldr	r3, [pc, #216]	; (80018ac <XNUCLEO53L3A2_I2C1Configure+0x16c>)
 80017d4:	bba8      	cbnz	r0, 8001842 <XNUCLEO53L3A2_I2C1Configure+0x102>
        __GPIOA_CLK_ENABLE();
 80017d6:	9002      	str	r0, [sp, #8]
 80017d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	631a      	str	r2, [r3, #48]	; 0x30
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	9005      	str	r0, [sp, #20]
        __GPIOA_CLK_ENABLE();
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	9302      	str	r3, [sp, #8]
 80017ea:	9b02      	ldr	r3, [sp, #8]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	4831      	ldr	r0, [pc, #196]	; (80018b4 <XNUCLEO53L3A2_I2C1Configure+0x174>)
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	2420      	movs	r4, #32
 80017f0:	2301      	movs	r3, #1
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	a903      	add	r1, sp, #12
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	e9cd 4303 	strd	r4, r3, [sp, #12]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f006 ffec 	bl	80087d4 <HAL_GPIO_Init>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80017fc:	4c2d      	ldr	r4, [pc, #180]	; (80018b4 <XNUCLEO53L3A2_I2C1Configure+0x174>)
 80017fe:	2201      	movs	r2, #1
 8001800:	2120      	movs	r1, #32
 8001802:	4620      	mov	r0, r4
 8001804:	f007 f8ba 	bl	800897c <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8001808:	2021      	movs	r0, #33	; 0x21
 800180a:	f006 ff53 	bl	80086b4 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	2120      	movs	r1, #32
 8001812:	4620      	mov	r0, r4
 8001814:	f007 f8b2 	bl	800897c <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8001818:	2021      	movs	r0, #33	; 0x21
 800181a:	f006 ff4b 	bl	80086b4 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800181e:	2201      	movs	r2, #1
 8001820:	2120      	movs	r1, #32
 8001822:	4620      	mov	r0, r4
 8001824:	f007 f8aa 	bl	800897c <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8001828:	2021      	movs	r0, #33	; 0x21
 800182a:	f006 ff43 	bl	80086b4 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800182e:	4620      	mov	r0, r4
 8001830:	2200      	movs	r2, #0
 8001832:	2120      	movs	r1, #32
 8001834:	f007 f8a2 	bl	800897c <HAL_GPIO_WritePin>
            HAL_Delay(33*20);
 8001838:	f44f 7025 	mov.w	r0, #660	; 0x294
 800183c:	f006 ff3a 	bl	80086b4 <HAL_Delay>
 8001840:	e7dd      	b.n	80017fe <XNUCLEO53L3A2_I2C1Configure+0xbe>
    __GPIOB_CLK_ENABLE();
 8001842:	2400      	movs	r4, #0
 8001844:	9400      	str	r4, [sp, #0]
 8001846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001848:	4819      	ldr	r0, [pc, #100]	; (80018b0 <XNUCLEO53L3A2_I2C1Configure+0x170>)
    __GPIOB_CLK_ENABLE();
 800184a:	f042 0202 	orr.w	r2, r2, #2
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
 8001850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001852:	f002 0202 	and.w	r2, r2, #2
 8001856:	9200      	str	r2, [sp, #0]
 8001858:	9a00      	ldr	r2, [sp, #0]
    __I2C1_CLK_ENABLE();
 800185a:	9402      	str	r4, [sp, #8]
 800185c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001862:	641a      	str	r2, [r3, #64]	; 0x40
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186c:	f44f 7240 	mov.w	r2, #768	; 0x300
    __I2C1_CLK_ENABLE();
 8001870:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001872:	2312      	movs	r3, #18
 8001874:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800187a:	2304      	movs	r3, #4
 800187c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800187e:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f006 ffa7 	bl	80087d4 <HAL_GPIO_Init>
    XNUCLEO53L3A2_hi2c.Instance = I2C1;
 8001886:	480c      	ldr	r0, [pc, #48]	; (80018b8 <XNUCLEO53L3A2_I2C1Configure+0x178>)
    XNUCLEO53L3A2_hi2c.Init.ClockSpeed = 400000;
 8001888:	490c      	ldr	r1, [pc, #48]	; (80018bc <XNUCLEO53L3A2_I2C1Configure+0x17c>)
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <XNUCLEO53L3A2_I2C1Configure+0x180>)
    XNUCLEO53L3A2_hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 800188c:	6204      	str	r4, [r0, #32]
    XNUCLEO53L3A2_hi2c.Init.ClockSpeed = 400000;
 800188e:	e9c0 1300 	strd	r1, r3, [r0]
    XNUCLEO53L3A2_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001892:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    XNUCLEO53L3A2_hi2c.Init.OwnAddress1 = 0;
 8001896:	e9c0 4402 	strd	r4, r4, [r0, #8]
    XNUCLEO53L3A2_hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800189a:	e9c0 3404 	strd	r3, r4, [r0, #16]
    XNUCLEO53L3A2_hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 800189e:	e9c0 4406 	strd	r4, r4, [r0, #24]
    status = HAL_I2C_Init(&XNUCLEO53L3A2_hi2c);
 80018a2:	f007 f97d 	bl	8008ba0 <HAL_I2C_Init>
}
 80018a6:	b008      	add	sp, #32
 80018a8:	bd70      	pop	{r4, r5, r6, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020000 	.word	0x40020000
 80018b8:	20002f5c 	.word	0x20002f5c
 80018bc:	40005400 	.word	0x40005400
 80018c0:	00061a80 	.word	0x00061a80

080018c4 <XNUCLEO53L3A2_Init>:
int XNUCLEO53L3A2_Init(void) {
 80018c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    XNUCLEO53L3A2_I2C1Configure();
 80018c6:	f7ff ff3b 	bl	8001740 <XNUCLEO53L3A2_I2C1Configure>
    status = _ExpanderRd( I2cExpAddr0, 0, ExpanderData, 2);
 80018ca:	2302      	movs	r3, #2
 80018cc:	aa01      	add	r2, sp, #4
 80018ce:	2100      	movs	r1, #0
 80018d0:	2086      	movs	r0, #134	; 0x86
 80018d2:	f7ff fee7 	bl	80016a4 <_ExpanderRd>
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 80018d6:	4604      	mov	r4, r0
 80018d8:	bba0      	cbnz	r0, 8001944 <XNUCLEO53L3A2_Init+0x80>
 80018da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80018de:	bb8b      	cbnz	r3, 8001944 <XNUCLEO53L3A2_Init+0x80>
 80018e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80018e4:	2b16      	cmp	r3, #22
 80018e6:	d12d      	bne.n	8001944 <XNUCLEO53L3A2_Init+0x80>
    status = _ExpanderRd( I2cExpAddr1, 0, ExpanderData, 2);
 80018e8:	4601      	mov	r1, r0
 80018ea:	2302      	movs	r3, #2
 80018ec:	aa01      	add	r2, sp, #4
 80018ee:	2084      	movs	r0, #132	; 0x84
 80018f0:	f7ff fed8 	bl	80016a4 <_ExpanderRd>
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 80018f4:	bb28      	cbnz	r0, 8001942 <XNUCLEO53L3A2_Init+0x7e>
 80018f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80018fa:	bb1b      	cbnz	r3, 8001944 <XNUCLEO53L3A2_Init+0x80>
 80018fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001900:	2b16      	cmp	r3, #22
 8001902:	d11f      	bne.n	8001944 <XNUCLEO53L3A2_Init+0x80>
    ExpanderData[0] = 0xFF;
 8001904:	f64f 73ff 	movw	r3, #65535	; 0xffff
    CurIOVal.u32=0x0;
 8001908:	4d10      	ldr	r5, [pc, #64]	; (800194c <XNUCLEO53L3A2_Init+0x88>)
    ExpanderData[0] = 0xFF;
 800190a:	f8ad 3004 	strh.w	r3, [sp, #4]
    status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 800190e:	aa01      	add	r2, sp, #4
 8001910:	2302      	movs	r3, #2
 8001912:	2114      	movs	r1, #20
 8001914:	2086      	movs	r0, #134	; 0x86
    CurIOVal.u32=0x0;
 8001916:	602c      	str	r4, [r5, #0]
    status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 8001918:	f7ff fee0 	bl	80016dc <_ExpanderWR>
    if (status) {
 800191c:	4604      	mov	r4, r0
 800191e:	b988      	cbnz	r0, 8001944 <XNUCLEO53L3A2_Init+0x80>
    ExpanderData[0] = 0xFF;
 8001920:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001924:	f8ad 3004 	strh.w	r3, [sp, #4]
    status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 8001928:	aa01      	add	r2, sp, #4
 800192a:	2302      	movs	r3, #2
 800192c:	2114      	movs	r1, #20
 800192e:	2084      	movs	r0, #132	; 0x84
 8001930:	f7ff fed4 	bl	80016dc <_ExpanderWR>
    if (status) {
 8001934:	4604      	mov	r4, r0
 8001936:	b928      	cbnz	r0, 8001944 <XNUCLEO53L3A2_Init+0x80>
    CurIOVal.u32=0x7F + (0x7F<<7) + (0x7F<<16)+(0x7F<<(16+7));
 8001938:	f06f 23c0 	mvn.w	r3, #3221274624	; 0xc000c000
 800193c:	602b      	str	r3, [r5, #0]
    status= _ExpandersSetAllIO();
 800193e:	f7ff fee9 	bl	8001714 <_ExpandersSetAllIO>
 8001942:	4604      	mov	r4, r0
}
 8001944:	4620      	mov	r0, r4
 8001946:	b003      	add	sp, #12
 8001948:	bd30      	pop	{r4, r5, pc}
 800194a:	bf00      	nop
 800194c:	20000234 	.word	0x20000234

08001950 <XNUCLEO53L3A2_ResetId>:
    switch( DevNo ){
 8001950:	2802      	cmp	r0, #2
 8001952:	d026      	beq.n	80019a2 <XNUCLEO53L3A2_ResetId+0x52>
 8001954:	dc0e      	bgt.n	8001974 <XNUCLEO53L3A2_ResetId+0x24>
 8001956:	b1b0      	cbz	r0, 8001986 <XNUCLEO53L3A2_ResetId+0x36>
 8001958:	2801      	cmp	r0, #1
 800195a:	d12b      	bne.n	80019b4 <XNUCLEO53L3A2_ResetId+0x64>
        CurIOVal.bytes[3]&=~0x80; /* bit 15 expender 1  => byte #3 */
 800195c:	4a17      	ldr	r2, [pc, #92]	; (80019bc <XNUCLEO53L3A2_ResetId+0x6c>)
 800195e:	78d3      	ldrb	r3, [r2, #3]
 8001960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        if( state )
 8001964:	b961      	cbnz	r1, 8001980 <XNUCLEO53L3A2_ResetId+0x30>
            CurIOVal.bytes[3]|=0x80; /* bit 15 expender 1  => byte #3 */
 8001966:	70d3      	strb	r3, [r2, #3]
        status= _ExpanderWR(I2cExpAddr1, GPSR+1, &CurIOVal.bytes[3], 1);
 8001968:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <XNUCLEO53L3A2_ResetId+0x70>)
 800196a:	2301      	movs	r3, #1
 800196c:	2113      	movs	r1, #19
 800196e:	2084      	movs	r0, #132	; 0x84
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 8001970:	f7ff beb4 	b.w	80016dc <_ExpanderWR>
    switch( DevNo ){
 8001974:	286c      	cmp	r0, #108	; 0x6c
 8001976:	d006      	beq.n	8001986 <XNUCLEO53L3A2_ResetId+0x36>
 8001978:	2872      	cmp	r0, #114	; 0x72
 800197a:	d012      	beq.n	80019a2 <XNUCLEO53L3A2_ResetId+0x52>
 800197c:	2863      	cmp	r0, #99	; 0x63
 800197e:	e7ec      	b.n	800195a <XNUCLEO53L3A2_ResetId+0xa>
            CurIOVal.bytes[3]|=0x80; /* bit 15 expender 1  => byte #3 */
 8001980:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001984:	e7ef      	b.n	8001966 <XNUCLEO53L3A2_ResetId+0x16>
        CurIOVal.bytes[1]&=~0x40; /* bit 14 expender 0 => byte #1*/
 8001986:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <XNUCLEO53L3A2_ResetId+0x6c>)
 8001988:	7853      	ldrb	r3, [r2, #1]
 800198a:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
        if( state )
 800198e:	b929      	cbnz	r1, 800199c <XNUCLEO53L3A2_ResetId+0x4c>
            CurIOVal.bytes[1]|=0x80; /* bit 15 expender 0 => byte #1*/
 8001990:	7053      	strb	r3, [r2, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 8001992:	2113      	movs	r1, #19
 8001994:	2301      	movs	r3, #1
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <XNUCLEO53L3A2_ResetId+0x74>)
 8001998:	2086      	movs	r0, #134	; 0x86
 800199a:	e7e9      	b.n	8001970 <XNUCLEO53L3A2_ResetId+0x20>
            CurIOVal.bytes[1]|=0x40; /* bit 14 expender 0 => byte #1*/
 800199c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019a0:	e7f6      	b.n	8001990 <XNUCLEO53L3A2_ResetId+0x40>
        CurIOVal.bytes[1]&=~0x80; /* bit 15 expender 0  => byte #1 */
 80019a2:	4a06      	ldr	r2, [pc, #24]	; (80019bc <XNUCLEO53L3A2_ResetId+0x6c>)
 80019a4:	7853      	ldrb	r3, [r2, #1]
 80019a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        if( state )
 80019aa:	2900      	cmp	r1, #0
 80019ac:	d0f0      	beq.n	8001990 <XNUCLEO53L3A2_ResetId+0x40>
            CurIOVal.bytes[1]|=0x80; /* bit 15 expender 0 => byte #1*/
 80019ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019b2:	e7ed      	b.n	8001990 <XNUCLEO53L3A2_ResetId+0x40>
}
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000234 	.word	0x20000234
 80019c0:	20000237 	.word	0x20000237
 80019c4:	20000235 	.word	0x20000235

080019c8 <SetPresetModeL3CX>:
}

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 80019c8:	b570      	push	{r4, r5, r6, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	4616      	mov	r6, r2
	VL53LX_DevicePresetModes RangingModes[3] = {
 80019ce:	f641 6221 	movw	r2, #7713	; 0x1e21
	VL53LX_Error Status = VL53LX_ERROR_NONE;
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 80019d2:	2300      	movs	r3, #0
	VL53LX_DevicePresetModes RangingModes[3] = {
 80019d4:	f8ad 2018 	strh.w	r2, [sp, #24]
	switch (DistanceMode) {
 80019d8:	2901      	cmp	r1, #1
	VL53LX_DevicePresetModes RangingModes[3] = {
 80019da:	f04f 021b 	mov.w	r2, #27
{
 80019de:	4604      	mov	r4, r0
	uint16_t dss_config__target_total_rate_mcps = 0;
 80019e0:	f8ad 3016 	strh.w	r3, [sp, #22]
	uint32_t phasecal_config_timeout_us = 0;
	uint32_t mm_config_timeout_us = 0;
 80019e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
	uint32_t lld_range_config_timeout_us = 0;
 80019e8:	9309      	str	r3, [sp, #36]	; 0x24
	VL53LX_DevicePresetModes RangingModes[3] = {
 80019ea:	f88d 201a 	strb.w	r2, [sp, #26]
	switch (DistanceMode) {
 80019ee:	d003      	beq.n	80019f8 <SetPresetModeL3CX+0x30>
 80019f0:	2902      	cmp	r1, #2
		DistIdx = 2;
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2302      	movne	r3, #2
	*pDevicePresetMode = RangingModes[DistIdx];
 80019f8:	aa0a      	add	r2, sp, #40	; 0x28
 80019fa:	4413      	add	r3, r2

	Status = ComputeDevicePresetMode(DistanceMode,
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 80019fc:	4620      	mov	r0, r4
	*pDevicePresetMode = RangingModes[DistIdx];
 80019fe:	f813 5c10 	ldrb.w	r5, [r3, #-16]
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 8001a02:	ab09      	add	r3, sp, #36	; 0x24
 8001a04:	9301      	str	r3, [sp, #4]
 8001a06:	ab08      	add	r3, sp, #32
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	f10d 0216 	add.w	r2, sp, #22
 8001a0e:	ab07      	add	r3, sp, #28
 8001a10:	4629      	mov	r1, r5
 8001a12:	f000 fbd5 	bl	80021c0 <VL53LX_get_preset_mode_timing_cfg>
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 8001a16:	b970      	cbnz	r0, 8001a36 <SetPresetModeL3CX+0x6e>
		Status = VL53LX_set_preset_mode(
 8001a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	9b08      	ldr	r3, [sp, #32]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8001a24:	9602      	str	r6, [sp, #8]
 8001a26:	9b07      	ldr	r3, [sp, #28]
 8001a28:	4629      	mov	r1, r5
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f000 fbee 	bl	800220c <VL53LX_set_preset_mode>
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001a30:	b908      	cbnz	r0, 8001a36 <SetPresetModeL3CX+0x6e>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 8001a32:	2320      	movs	r3, #32
 8001a34:	70e3      	strb	r3, [r4, #3]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001a36:	b00a      	add	sp, #40	; 0x28
 8001a38:	bd70      	pop	{r4, r5, r6, pc}

08001a3a <VL53LX_WaitDeviceBooted>:
	Status = VL53LX_poll_for_boot_completion(Dev,
 8001a3a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001a3e:	f006 bce2 	b.w	8008406 <VL53LX_poll_for_boot_completion>
	...

08001a44 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001a44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	VL53LX_Error Status = VL53LX_ERROR_NONE;
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8001a46:	2300      	movs	r3, #0
	uint32_t MmTimeoutUs = 0;
 8001a48:	e9cd 3301 	strd	r3, r3, [sp, #4]
	uint32_t PhaseCalTimeoutUs = 0;
 8001a4c:	9303      	str	r3, [sp, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x74>)
 8001a50:	4299      	cmp	r1, r3
{
 8001a52:	4604      	mov	r4, r0
 8001a54:	460d      	mov	r5, r1
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001a56:	d815      	bhi.n	8001a84 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x40>
		Status = VL53LX_ERROR_INVALID_PARAMS;

	if (Status == VL53LX_ERROR_NONE)
		Status = VL53LX_get_timeouts_us(Dev,
 8001a58:	ab01      	add	r3, sp, #4
 8001a5a:	aa02      	add	r2, sp, #8
 8001a5c:	a903      	add	r1, sp, #12
 8001a5e:	f000 fa9e 	bl	8001f9e <VL53LX_get_timeouts_us>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>)
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001a64:	f8b4 63ca 	ldrh.w	r6, [r4, #970]	; 0x3ca
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001a68:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x7c>)
 8001a6a:	f64a 21eb 	movw	r1, #43755	; 0xaaeb
 8001a6e:	428e      	cmp	r6, r1
 8001a70:	bf18      	it	ne
 8001a72:	461a      	movne	r2, r3
	divisor = 6;

	if (IsL4(Dev))
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8001a74:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001a78:	429d      	cmp	r5, r3
 8001a7a:	d806      	bhi.n	8001a8a <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x46>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001a7c:	f06f 0003 	mvn.w	r0, #3
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001a80:	b004      	add	sp, #16
 8001a82:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001a84:	f06f 0003 	mvn.w	r0, #3
 8001a88:	e7eb      	b.n	8001a62 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x1e>
				- TimingGuard);
 8001a8a:	f2a5 63a4 	subw	r3, r5, #1700	; 0x6a4
	if (Status == VL53LX_ERROR_NONE) {
 8001a8e:	2800      	cmp	r0, #0
 8001a90:	d1f6      	bne.n	8001a80 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x3c>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d8f2      	bhi.n	8001a7c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x38>
			TimingBudget /= divisor;
 8001a96:	2206      	movs	r2, #6
			Status = VL53LX_set_timeouts_us(
 8001a98:	4620      	mov	r0, r4
			TimingBudget /= divisor;
 8001a9a:	fbb3 f3f2 	udiv	r3, r3, r2
			Status = VL53LX_set_timeouts_us(
 8001a9e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
			TimingBudget /= divisor;
 8001aa2:	9301      	str	r3, [sp, #4]
			Status = VL53LX_set_timeouts_us(
 8001aa4:	f000 fa63 	bl	8001f6e <VL53LX_set_timeouts_us>
		if (Status == VL53LX_ERROR_NONE)
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d1e9      	bne.n	8001a80 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x3c>
			VL53LXDevDataSet(Dev,
 8001aac:	9b01      	ldr	r3, [sp, #4]
 8001aae:	6123      	str	r3, [r4, #16]
		VL53LXDevDataSet(Dev,
 8001ab0:	f642 2344 	movw	r3, #10820	; 0x2a44
 8001ab4:	50e5      	str	r5, [r4, r3]
 8001ab6:	e7e3      	b.n	8001a80 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x3c>
 8001ab8:	00989680 	.word	0x00989680
 8001abc:	00086470 	.word	0x00086470
 8001ac0:	00030d40 	.word	0x00030d40

08001ac4 <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 8001ac4:	b538      	push	{r3, r4, r5, lr}
 8001ac6:	4604      	mov	r4, r0
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 8001ac8:	f001 fb9a 	bl	8003200 <VL53LX_load_patch>
 8001acc:	f504 5303 	add.w	r3, r4, #8384	; 0x20c0
 8001ad0:	f504 5203 	add.w	r2, r4, #8384	; 0x20c0
 8001ad4:	3310      	adds	r3, #16
 8001ad6:	3208      	adds	r2, #8
 8001ad8:	4618      	mov	r0, r3
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
		pdev->PreviousRangeMilliMeter[i] = 0;
 8001ada:	2100      	movs	r1, #0
		pdev->PreviousRangeStatus[i] = 255;
 8001adc:	25ff      	movs	r5, #255	; 0xff
		pdev->PreviousRangeMilliMeter[i] = 0;
 8001ade:	f822 1b02 	strh.w	r1, [r2], #2
		pdev->PreviousRangeStatus[i] = 255;
 8001ae2:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001ae6:	4282      	cmp	r2, r0
		pdev->PreviousExtendedRange[i] = 0;
 8001ae8:	70d9      	strb	r1, [r3, #3]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001aea:	d1f8      	bne.n	8001ade <VL53LX_StartMeasurement+0x1a>
	}
	pdev->PreviousStreamCount = 0;
 8001aec:	f242 03d8 	movw	r3, #8408	; 0x20d8

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);

	if (Status == VL53LX_ERROR_NONE)
		Status = VL53LX_init_and_start_range(
 8001af0:	4620      	mov	r0, r4
	pdev->PreviousStreamCount = 0;
 8001af2:	54e1      	strb	r1, [r4, r3]
		Status = VL53LX_init_and_start_range(
 8001af4:	2206      	movs	r2, #6
 8001af6:	78e1      	ldrb	r1, [r4, #3]
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Status = VL53LX_init_and_start_range(
 8001afc:	f000 bdea 	b.w	80026d4 <VL53LX_init_and_start_range>

08001b00 <VL53LX_ClearInterruptAndStartMeasurement>:

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 8001b00:	78c1      	ldrb	r1, [r0, #3]
 8001b02:	f000 bee7 	b.w	80028d4 <VL53LX_clear_interrupt_and_enable_next_range>
	...

08001b08 <VL53LX_GetMultiRangingData>:
}


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8001b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b0c:	4604      	mov	r4, r0
 8001b0e:	4688      	mov	r8, r1
	VL53LX_Error Status = VL53LX_ERROR_NONE;
	VL53LX_LLDriverData_t *pdev =
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 8001b10:	f504 59a1 	add.w	r9, r4, #5152	; 0x1420
 8001b14:	f109 0918 	add.w	r9, r9, #24
{
 8001b18:	b087      	sub	sp, #28
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8001b1a:	225c      	movs	r2, #92	; 0x5c
 8001b1c:	21ff      	movs	r1, #255	; 0xff
 8001b1e:	4640      	mov	r0, r8
 8001b20:	f007 ff17 	bl	8009952 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 8001b24:	464a      	mov	r2, r9
 8001b26:	2102      	movs	r1, #2
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f001 fdc3 	bl	80036b4 <VL53LX_get_device_results>
	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8001b2e:	f899 a012 	ldrb.w	sl, [r9, #18]
 8001b32:	f888 a005 	strb.w	sl, [r8, #5]
	pMultiRangingData->HasXtalkValueChanged =
 8001b36:	f899 3196 	ldrb.w	r3, [r9, #406]	; 0x196
 8001b3a:	f888 3058 	strb.w	r3, [r8, #88]	; 0x58
	pMultiRangingData->TimeStamp = 0;
 8001b3e:	2700      	movs	r7, #0
 8001b40:	f8c8 7000 	str.w	r7, [r8]
	pMultiRangingData->StreamCount = presults->stream_count;
 8001b44:	f899 3003 	ldrb.w	r3, [r9, #3]
 8001b48:	f888 3004 	strb.w	r3, [r8, #4]
	if (ActiveResults < 1)
 8001b4c:	45ba      	cmp	sl, r7
 8001b4e:	bf14      	ite	ne
 8001b50:	4653      	movne	r3, sl
 8001b52:	2301      	moveq	r3, #1
 8001b54:	f504 56a3 	add.w	r6, r4, #5216	; 0x1460
		if (((pdev->PreviousStreamCount) ==
 8001b58:	f504 5b03 	add.w	fp, r4, #8384	; 0x20c0
	if (ActiveResults < 1)
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	3602      	adds	r6, #2
 8001b60:	4645      	mov	r5, r8
		if (((pdev->PreviousStreamCount) ==
 8001b62:	f10b 0b18 	add.w	fp, fp, #24
	for (i = 0; i < iteration; i++) {
 8001b66:	9a01      	ldr	r2, [sp, #4]
 8001b68:	b2fb      	uxtb	r3, r7
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d315      	bcc.n	8001b9a <VL53LX_GetMultiRangingData+0x92>
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8001b6e:	f242 03d8 	movw	r3, #8408	; 0x20d8
 8001b72:	f894 2477 	ldrb.w	r2, [r4, #1143]	; 0x477
 8001b76:	54e2      	strb	r2, [r4, r3]
 8001b78:	9b01      	ldr	r3, [sp, #4]
 8001b7a:	f503 5203 	add.w	r2, r3, #8384	; 0x20c0
 8001b7e:	3213      	adds	r2, #19
 8001b80:	4422      	add	r2, r4
		pdev->PreviousRangeMilliMeter[i] = 0;
 8001b82:	f242 05c8 	movw	r5, #8392	; 0x20c8
 8001b86:	2100      	movs	r1, #0
		pdev->PreviousRangeStatus[i] = 255;
 8001b88:	26ff      	movs	r6, #255	; 0xff
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001b8a:	b2d8      	uxtb	r0, r3
 8001b8c:	2803      	cmp	r0, #3
 8001b8e:	f240 8179 	bls.w	8001e84 <VL53LX_GetMultiRangingData+0x37c>
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001b92:	2000      	movs	r0, #0
 8001b94:	b007      	add	sp, #28
 8001b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001b9a:	f8b6 c01a 	ldrh.w	ip, [r6, #26]
			Status = SetTargetData(Dev, ActiveResults,
 8001b9e:	f898 3004 	ldrb.w	r3, [r8, #4]
 8001ba2:	9303      	str	r3, [sp, #12]
	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001ba4:	ea4f 234c 	mov.w	r3, ip, lsl #9
	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001ba8:	f8b6 c01e 	ldrh.w	ip, [r6, #30]
			Status = SetTargetData(Dev, ActiveResults,
 8001bac:	f899 1010 	ldrb.w	r1, [r9, #16]
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8001bb0:	f896 2034 	ldrb.w	r2, [r6, #52]	; 0x34
		= SignalRate;
 8001bb4:	60eb      	str	r3, [r5, #12]
	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001bb6:	ea4f 234c 	mov.w	r3, ip, lsl #9
	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001bba:	f8b6 c026 	ldrh.w	ip, [r6, #38]	; 0x26
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8001bbe:	612b      	str	r3, [r5, #16]
	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001bc0:	ea4f 234c 	mov.w	r3, ip, lsl #9
	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8001bc4:	f8b6 c030 	ldrh.w	ip, [r6, #48]	; 0x30
 8001bc8:	f8a5 c018 	strh.w	ip, [r5, #24]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8001bcc:	f8b6 c032 	ldrh.w	ip, [r6, #50]	; 0x32
 8001bd0:	f8a5 c008 	strh.w	ip, [r5, #8]
	int32_t ExtendedRangeEnabled = 0;
 8001bd4:	2000      	movs	r0, #0
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8001bd6:	f8b6 c02e 	ldrh.w	ip, [r6, #46]	; 0x2e
	int32_t ExtendedRangeEnabled = 0;
 8001bda:	9005      	str	r0, [sp, #20]
	switch (device_status) {
 8001bdc:	290d      	cmp	r1, #13
	pRangeData->SigmaMilliMeter = TempFix1616;
 8001bde:	616b      	str	r3, [r5, #20]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8001be0:	f8a5 c00a 	strh.w	ip, [r5, #10]
	switch (device_status) {
 8001be4:	d006      	beq.n	8001bf4 <VL53LX_GetMultiRangingData+0xec>
 8001be6:	f200 809e 	bhi.w	8001d26 <VL53LX_GetMultiRangingData+0x21e>
 8001bea:	3901      	subs	r1, #1
 8001bec:	2902      	cmp	r1, #2
 8001bee:	f200 809d 	bhi.w	8001d2c <VL53LX_GetMultiRangingData+0x224>
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 8001bf2:	2105      	movs	r1, #5
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 8001bf4:	76a9      	strb	r1, [r5, #26]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8001bf6:	7ea9      	ldrb	r1, [r5, #26]
 8001bf8:	b969      	cbnz	r1, 8001c16 <VL53LX_GetMultiRangingData+0x10e>
 8001bfa:	f1ba 0f00 	cmp.w	sl, #0
 8001bfe:	d10a      	bne.n	8001c16 <VL53LX_GetMultiRangingData+0x10e>
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 8001c00:	21ff      	movs	r1, #255	; 0xff
 8001c02:	76a9      	strb	r1, [r5, #26]
		pRangeData->RangeMilliMeter = 8191;
 8001c04:	f641 71ff 	movw	r1, #8191	; 0x1fff
		pRangeData->SignalRateRtnMegaCps = 0;
 8001c08:	f8c5 a00c 	str.w	sl, [r5, #12]
		pRangeData->SigmaMilliMeter = 0;
 8001c0c:	f8c5 a014 	str.w	sl, [r5, #20]
		pRangeData->RangeMilliMeter = 8191;
 8001c10:	8329      	strh	r1, [r5, #24]
		pRangeData->RangeMaxMilliMeter = 8191;
 8001c12:	8129      	strh	r1, [r5, #8]
		pRangeData->RangeMinMilliMeter = 8191;
 8001c14:	8169      	strh	r1, [r5, #10]
	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 8001c16:	7ea9      	ldrb	r1, [r5, #26]
 8001c18:	b949      	cbnz	r1, 8001c2e <VL53LX_GetMultiRangingData+0x126>
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8001c1a:	f002 021f 	and.w	r2, r2, #31
 8001c1e:	3a05      	subs	r2, #5
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	2a12      	cmp	r2, #18
 8001c24:	bf96      	itet	ls
 8001c26:	4b9c      	ldrls	r3, [pc, #624]	; (8001e98 <VL53LX_GetMultiRangingData+0x390>)
 8001c28:	22ff      	movhi	r2, #255	; 0xff
 8001c2a:	5c9a      	ldrbls	r2, [r3, r2]
		pRangeData->RangeStatus =
 8001c2c:	76aa      	strb	r2, [r5, #26]
	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 8001c2e:	aa05      	add	r2, sp, #20
 8001c30:	f248 0191 	movw	r1, #32913	; 0x8091
 8001c34:	4620      	mov	r0, r4
 8001c36:	f000 fe66 	bl	8002906 <VL53LX_get_tuning_parm>
	pRangeData->ExtendedRange = 0;
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	76ea      	strb	r2, [r5, #27]
	if (ExtendedRangeEnabled &&
 8001c3e:	9a05      	ldr	r2, [sp, #20]
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8001c40:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	19e1      	adds	r1, r4, r7
	if (ExtendedRangeEnabled &&
 8001c48:	2a00      	cmp	r2, #0
 8001c4a:	d04b      	beq.n	8001ce4 <VL53LX_GetMultiRangingData+0x1dc>
		(pRangeData->RangeStatus ==
 8001c4c:	7eaa      	ldrb	r2, [r5, #26]
	if (ExtendedRangeEnabled &&
 8001c4e:	2a07      	cmp	r2, #7
 8001c50:	d001      	beq.n	8001c56 <VL53LX_GetMultiRangingData+0x14e>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8001c52:	2a04      	cmp	r2, #4
 8001c54:	d146      	bne.n	8001ce4 <VL53LX_GetMultiRangingData+0x1dc>
		&& (pdev->PreviousRangeStatus[iteration] ==
 8001c56:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001c5a:	5c8a      	ldrb	r2, [r1, r2]
 8001c5c:	2a07      	cmp	r2, #7
 8001c5e:	d008      	beq.n	8001c72 <VL53LX_GetMultiRangingData+0x16a>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8001c60:	2a04      	cmp	r2, #4
 8001c62:	d006      	beq.n	8001c72 <VL53LX_GetMultiRangingData+0x16a>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8001c64:	2a00      	cmp	r2, #0
 8001c66:	d13d      	bne.n	8001ce4 <VL53LX_GetMultiRangingData+0x1dc>
			pdev->PreviousExtendedRange[iteration] == 1)))
 8001c68:	f242 02d4 	movw	r2, #8404	; 0x20d4
			VL53LX_RANGESTATUS_RANGE_VALID &&
 8001c6c:	5c8a      	ldrb	r2, [r1, r2]
 8001c6e:	2a01      	cmp	r2, #1
 8001c70:	d138      	bne.n	8001ce4 <VL53LX_GetMultiRangingData+0x1dc>
			(pdev->hist_data.result__stream_count - 1 ))
 8001c72:	f894 2477 	ldrb.w	r2, [r4, #1143]	; 0x477
		if (((pdev->PreviousStreamCount) ==
 8001c76:	f89b 0000 	ldrb.w	r0, [fp]
			(pdev->hist_data.result__stream_count - 1 ))
 8001c7a:	f102 3cff 	add.w	ip, r2, #4294967295
		if (((pdev->PreviousStreamCount) ==
 8001c7e:	4560      	cmp	r0, ip
 8001c80:	d002      	beq.n	8001c88 <VL53LX_GetMultiRangingData+0x180>
			(pdev->hist_data.result__stream_count + 127)))
 8001c82:	327f      	adds	r2, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8001c84:	4290      	cmp	r0, r2
 8001c86:	d12d      	bne.n	8001ce4 <VL53LX_GetMultiRangingData+0x1dc>
	sequency = streamcount % 2;
 8001c88:	9b03      	ldr	r3, [sp, #12]
		RangeDiff = pRangeData->RangeMilliMeter -
 8001c8a:	f8bd 0008 	ldrh.w	r0, [sp, #8]
		switch (pdev->preset_mode) {
 8001c8e:	f894 c001 	ldrb.w	ip, [r4, #1]
	sequency = streamcount % 2;
 8001c92:	f003 0201 	and.w	r2, r3, #1
			pdev->PreviousRangeMilliMeter[iteration];
 8001c96:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8001c9a:	3308      	adds	r3, #8
		switch (pdev->preset_mode) {
 8001c9c:	f1bc 0f1b 	cmp.w	ip, #27
		RangeDiff = pRangeData->RangeMilliMeter -
 8001ca0:	5acb      	ldrh	r3, [r1, r3]
 8001ca2:	eba0 0303 	sub.w	r3, r0, r3
 8001ca6:	b21b      	sxth	r3, r3
		switch (pdev->preset_mode) {
 8001ca8:	f000 80ab 	beq.w	8001e02 <VL53LX_GetMultiRangingData+0x2fa>
 8001cac:	f1bc 0f1e 	cmp.w	ip, #30
 8001cb0:	d118      	bne.n	8001ce4 <VL53LX_GetMultiRangingData+0x1dc>
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8001cb2:	f9b4 c1be 	ldrsh.w	ip, [r4, #446]	; 0x1be
 8001cb6:	4563      	cmp	r3, ip
 8001cb8:	dd3a      	ble.n	8001d30 <VL53LX_GetMultiRangingData+0x228>
 8001cba:	f9b4 e1c0 	ldrsh.w	lr, [r4, #448]	; 0x1c0
 8001cbe:	459e      	cmp	lr, r3
 8001cc0:	dd36      	ble.n	8001d30 <VL53LX_GetMultiRangingData+0x228>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8001cc2:	2a00      	cmp	r2, #0
 8001cc4:	d034      	beq.n	8001d30 <VL53LX_GetMultiRangingData+0x228>
					AddOffset =
 8001cc6:	f9b4 31d4 	ldrsh.w	r3, [r4, #468]	; 0x1d4
			pRangeData->RangeMinMilliMeter += AddOffset;
 8001cca:	896a      	ldrh	r2, [r5, #10]
			pRangeData->RangeMilliMeter += AddOffset;
 8001ccc:	b29b      	uxth	r3, r3
			pRangeData->RangeMinMilliMeter += AddOffset;
 8001cce:	441a      	add	r2, r3
 8001cd0:	816a      	strh	r2, [r5, #10]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8001cd2:	892a      	ldrh	r2, [r5, #8]
			pRangeData->RangeMilliMeter += AddOffset;
 8001cd4:	4418      	add	r0, r3
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8001cd6:	4413      	add	r3, r2
 8001cd8:	812b      	strh	r3, [r5, #8]
			pRangeData->ExtendedRange = 1;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	76eb      	strb	r3, [r5, #27]
			pRangeData->RangeStatus = 0;
 8001cde:	2300      	movs	r3, #0
			pRangeData->RangeMilliMeter += AddOffset;
 8001ce0:	8328      	strh	r0, [r5, #24]
			pRangeData->RangeStatus = 0;
 8001ce2:	76ab      	strb	r3, [r5, #26]
	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8001ce4:	f242 03c8 	movw	r3, #8392	; 0x20c8
 8001ce8:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8001cec:	9a02      	ldr	r2, [sp, #8]
 8001cee:	52e2      	strh	r2, [r4, r3]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8001cf0:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001cf4:	7eab      	ldrb	r3, [r5, #26]
 8001cf6:	548b      	strb	r3, [r1, r2]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8001cf8:	f242 02d4 	movw	r2, #8404	; 0x20d4
 8001cfc:	7ee8      	ldrb	r0, [r5, #27]
 8001cfe:	5488      	strb	r0, [r1, r2]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8001d00:	b953      	cbnz	r3, 8001d18 <VL53LX_GetMultiRangingData+0x210>
	Range = pRangeData->RangeMilliMeter;
 8001d02:	f9b5 2018 	ldrsh.w	r2, [r5, #24]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8001d06:	2a00      	cmp	r2, #0
 8001d08:	da06      	bge.n	8001d18 <VL53LX_GetMultiRangingData+0x210>
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 8001d0a:	4964      	ldr	r1, [pc, #400]	; (8001e9c <VL53LX_GetMultiRangingData+0x394>)
 8001d0c:	6849      	ldr	r1, [r1, #4]
 8001d0e:	428a      	cmp	r2, r1
			pRangeData->RangeStatus =
 8001d10:	bfba      	itte	lt
 8001d12:	230e      	movlt	r3, #14
 8001d14:	76ab      	strblt	r3, [r5, #26]
			pRangeData->RangeMilliMeter = 0;
 8001d16:	832b      	strhge	r3, [r5, #24]
		pMultiRangingData->EffectiveSpadRtnCount =
 8001d18:	f836 3b4c 	ldrh.w	r3, [r6], #76
 8001d1c:	f8a8 305a 	strh.w	r3, [r8, #90]	; 0x5a
 8001d20:	3701      	adds	r7, #1
 8001d22:	3514      	adds	r5, #20
 8001d24:	e71f      	b.n	8001b66 <VL53LX_GetMultiRangingData+0x5e>
	switch (device_status) {
 8001d26:	2911      	cmp	r1, #17
 8001d28:	f43f af63 	beq.w	8001bf2 <VL53LX_GetMultiRangingData+0xea>
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 8001d2c:	76a8      	strb	r0, [r5, #26]
 8001d2e:	e762      	b.n	8001bf6 <VL53LX_GetMultiRangingData+0xee>
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8001d30:	f1cc 0c00 	rsb	ip, ip, #0
 8001d34:	4563      	cmp	r3, ip
 8001d36:	da09      	bge.n	8001d4c <VL53LX_GetMultiRangingData+0x244>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8001d38:	f9b4 c1c0 	ldrsh.w	ip, [r4, #448]	; 0x1c0
 8001d3c:	f1cc 0c00 	rsb	ip, ip, #0
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8001d40:	4563      	cmp	r3, ip
 8001d42:	dd03      	ble.n	8001d4c <VL53LX_GetMultiRangingData+0x244>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8001d44:	b912      	cbnz	r2, 8001d4c <VL53LX_GetMultiRangingData+0x244>
					AddOffset =
 8001d46:	f9b4 31d2 	ldrsh.w	r3, [r4, #466]	; 0x1d2
 8001d4a:	e7be      	b.n	8001cca <VL53LX_GetMultiRangingData+0x1c2>
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8001d4c:	f9b4 c1c2 	ldrsh.w	ip, [r4, #450]	; 0x1c2
 8001d50:	4563      	cmp	r3, ip
 8001d52:	dd07      	ble.n	8001d64 <VL53LX_GetMultiRangingData+0x25c>
 8001d54:	f9b4 e1c4 	ldrsh.w	lr, [r4, #452]	; 0x1c4
 8001d58:	459e      	cmp	lr, r3
 8001d5a:	dd03      	ble.n	8001d64 <VL53LX_GetMultiRangingData+0x25c>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8001d5c:	b912      	cbnz	r2, 8001d64 <VL53LX_GetMultiRangingData+0x25c>
					AddOffset =
 8001d5e:	f9b4 31d6 	ldrsh.w	r3, [r4, #470]	; 0x1d6
 8001d62:	e7b2      	b.n	8001cca <VL53LX_GetMultiRangingData+0x1c2>
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8001d64:	f1cc 0c00 	rsb	ip, ip, #0
 8001d68:	4563      	cmp	r3, ip
 8001d6a:	da09      	bge.n	8001d80 <VL53LX_GetMultiRangingData+0x278>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8001d6c:	f9b4 c1c4 	ldrsh.w	ip, [r4, #452]	; 0x1c4
 8001d70:	f1cc 0c00 	rsb	ip, ip, #0
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8001d74:	4563      	cmp	r3, ip
 8001d76:	dd03      	ble.n	8001d80 <VL53LX_GetMultiRangingData+0x278>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8001d78:	b112      	cbz	r2, 8001d80 <VL53LX_GetMultiRangingData+0x278>
					AddOffset =
 8001d7a:	f9b4 31d8 	ldrsh.w	r3, [r4, #472]	; 0x1d8
 8001d7e:	e7a4      	b.n	8001cca <VL53LX_GetMultiRangingData+0x1c2>
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8001d80:	f9b4 c1c6 	ldrsh.w	ip, [r4, #454]	; 0x1c6
 8001d84:	4563      	cmp	r3, ip
 8001d86:	dd07      	ble.n	8001d98 <VL53LX_GetMultiRangingData+0x290>
 8001d88:	f9b4 e1c8 	ldrsh.w	lr, [r4, #456]	; 0x1c8
 8001d8c:	459e      	cmp	lr, r3
 8001d8e:	dd03      	ble.n	8001d98 <VL53LX_GetMultiRangingData+0x290>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8001d90:	b112      	cbz	r2, 8001d98 <VL53LX_GetMultiRangingData+0x290>
					AddOffset =
 8001d92:	f9b4 31dc 	ldrsh.w	r3, [r4, #476]	; 0x1dc
 8001d96:	e798      	b.n	8001cca <VL53LX_GetMultiRangingData+0x1c2>
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8001d98:	f1cc 0c00 	rsb	ip, ip, #0
 8001d9c:	4563      	cmp	r3, ip
 8001d9e:	da09      	bge.n	8001db4 <VL53LX_GetMultiRangingData+0x2ac>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8001da0:	f9b4 c1c8 	ldrsh.w	ip, [r4, #456]	; 0x1c8
 8001da4:	f1cc 0c00 	rsb	ip, ip, #0
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8001da8:	4563      	cmp	r3, ip
 8001daa:	dd03      	ble.n	8001db4 <VL53LX_GetMultiRangingData+0x2ac>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8001dac:	b912      	cbnz	r2, 8001db4 <VL53LX_GetMultiRangingData+0x2ac>
					AddOffset =
 8001dae:	f9b4 31da 	ldrsh.w	r3, [r4, #474]	; 0x1da
 8001db2:	e78a      	b.n	8001cca <VL53LX_GetMultiRangingData+0x1c2>
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8001db4:	f9b4 c1ca 	ldrsh.w	ip, [r4, #458]	; 0x1ca
 8001db8:	4563      	cmp	r3, ip
 8001dba:	dd07      	ble.n	8001dcc <VL53LX_GetMultiRangingData+0x2c4>
 8001dbc:	f9b4 e1cc 	ldrsh.w	lr, [r4, #460]	; 0x1cc
 8001dc0:	459e      	cmp	lr, r3
 8001dc2:	dd03      	ble.n	8001dcc <VL53LX_GetMultiRangingData+0x2c4>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8001dc4:	b912      	cbnz	r2, 8001dcc <VL53LX_GetMultiRangingData+0x2c4>
					AddOffset =
 8001dc6:	f9b4 31de 	ldrsh.w	r3, [r4, #478]	; 0x1de
 8001dca:	e77e      	b.n	8001cca <VL53LX_GetMultiRangingData+0x1c2>
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8001dcc:	f1cc 0c00 	rsb	ip, ip, #0
 8001dd0:	4563      	cmp	r3, ip
 8001dd2:	da09      	bge.n	8001de8 <VL53LX_GetMultiRangingData+0x2e0>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8001dd4:	f9b4 c1cc 	ldrsh.w	ip, [r4, #460]	; 0x1cc
 8001dd8:	f1cc 0c00 	rsb	ip, ip, #0
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8001ddc:	4563      	cmp	r3, ip
 8001dde:	dd03      	ble.n	8001de8 <VL53LX_GetMultiRangingData+0x2e0>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8001de0:	b112      	cbz	r2, 8001de8 <VL53LX_GetMultiRangingData+0x2e0>
					AddOffset =
 8001de2:	f9b4 31e0 	ldrsh.w	r3, [r4, #480]	; 0x1e0
 8001de6:	e770      	b.n	8001cca <VL53LX_GetMultiRangingData+0x1c2>
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8001de8:	f9b4 21d0 	ldrsh.w	r2, [r4, #464]	; 0x1d0
 8001dec:	429a      	cmp	r2, r3
 8001dee:	f77f af79 	ble.w	8001ce4 <VL53LX_GetMultiRangingData+0x1dc>
 8001df2:	f9b4 21ce 	ldrsh.w	r2, [r4, #462]	; 0x1ce
 8001df6:	429a      	cmp	r2, r3
 8001df8:	f6bf af74 	bge.w	8001ce4 <VL53LX_GetMultiRangingData+0x1dc>
					AddOffset =
 8001dfc:	f9b4 31e2 	ldrsh.w	r3, [r4, #482]	; 0x1e2
 8001e00:	e763      	b.n	8001cca <VL53LX_GetMultiRangingData+0x1c2>
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8001e02:	f9b4 c1e6 	ldrsh.w	ip, [r4, #486]	; 0x1e6
 8001e06:	4563      	cmp	r3, ip
 8001e08:	dd07      	ble.n	8001e1a <VL53LX_GetMultiRangingData+0x312>
 8001e0a:	f9b4 e1e8 	ldrsh.w	lr, [r4, #488]	; 0x1e8
 8001e0e:	459e      	cmp	lr, r3
 8001e10:	dd03      	ble.n	8001e1a <VL53LX_GetMultiRangingData+0x312>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8001e12:	b912      	cbnz	r2, 8001e1a <VL53LX_GetMultiRangingData+0x312>
					AddOffset =
 8001e14:	f9b4 31fa 	ldrsh.w	r3, [r4, #506]	; 0x1fa
 8001e18:	e757      	b.n	8001cca <VL53LX_GetMultiRangingData+0x1c2>
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8001e1a:	f1cc 0c00 	rsb	ip, ip, #0
 8001e1e:	4563      	cmp	r3, ip
 8001e20:	da09      	bge.n	8001e36 <VL53LX_GetMultiRangingData+0x32e>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8001e22:	f9b4 c1e8 	ldrsh.w	ip, [r4, #488]	; 0x1e8
 8001e26:	f1cc 0c00 	rsb	ip, ip, #0
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8001e2a:	4563      	cmp	r3, ip
 8001e2c:	dd03      	ble.n	8001e36 <VL53LX_GetMultiRangingData+0x32e>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8001e2e:	b112      	cbz	r2, 8001e36 <VL53LX_GetMultiRangingData+0x32e>
					AddOffset =
 8001e30:	f9b4 31fc 	ldrsh.w	r3, [r4, #508]	; 0x1fc
 8001e34:	e749      	b.n	8001cca <VL53LX_GetMultiRangingData+0x1c2>
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8001e36:	f9b4 c1ea 	ldrsh.w	ip, [r4, #490]	; 0x1ea
 8001e3a:	4563      	cmp	r3, ip
 8001e3c:	dd07      	ble.n	8001e4e <VL53LX_GetMultiRangingData+0x346>
 8001e3e:	f9b4 e1ec 	ldrsh.w	lr, [r4, #492]	; 0x1ec
 8001e42:	459e      	cmp	lr, r3
 8001e44:	dd03      	ble.n	8001e4e <VL53LX_GetMultiRangingData+0x346>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8001e46:	b112      	cbz	r2, 8001e4e <VL53LX_GetMultiRangingData+0x346>
					AddOffset =
 8001e48:	f9b4 3200 	ldrsh.w	r3, [r4, #512]	; 0x200
 8001e4c:	e73d      	b.n	8001cca <VL53LX_GetMultiRangingData+0x1c2>
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8001e4e:	f1cc 0c00 	rsb	ip, ip, #0
 8001e52:	4563      	cmp	r3, ip
 8001e54:	da09      	bge.n	8001e6a <VL53LX_GetMultiRangingData+0x362>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8001e56:	f9b4 c1ec 	ldrsh.w	ip, [r4, #492]	; 0x1ec
 8001e5a:	f1cc 0c00 	rsb	ip, ip, #0
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8001e5e:	4563      	cmp	r3, ip
 8001e60:	dd03      	ble.n	8001e6a <VL53LX_GetMultiRangingData+0x362>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8001e62:	b912      	cbnz	r2, 8001e6a <VL53LX_GetMultiRangingData+0x362>
					AddOffset =
 8001e64:	f9b4 31fe 	ldrsh.w	r3, [r4, #510]	; 0x1fe
 8001e68:	e72f      	b.n	8001cca <VL53LX_GetMultiRangingData+0x1c2>
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8001e6a:	f9b4 21f0 	ldrsh.w	r2, [r4, #496]	; 0x1f0
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	f77f af38 	ble.w	8001ce4 <VL53LX_GetMultiRangingData+0x1dc>
 8001e74:	f9b4 21ee 	ldrsh.w	r2, [r4, #494]	; 0x1ee
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	f6bf af33 	bge.w	8001ce4 <VL53LX_GetMultiRangingData+0x1dc>
					AddOffset =
 8001e7e:	f9b4 3202 	ldrsh.w	r3, [r4, #514]	; 0x202
 8001e82:	e722      	b.n	8001cca <VL53LX_GetMultiRangingData+0x1c2>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8001e84:	eb05 0043 	add.w	r0, r5, r3, lsl #1
 8001e88:	3301      	adds	r3, #1
 8001e8a:	5221      	strh	r1, [r4, r0]
		pdev->PreviousRangeStatus[i] = 255;
 8001e8c:	f802 6c03 	strb.w	r6, [r2, #-3]
		pdev->PreviousExtendedRange[i] = 0;
 8001e90:	f802 1f01 	strb.w	r1, [r2, #1]!
 8001e94:	e679      	b.n	8001b8a <VL53LX_GetMultiRangingData+0x82>
 8001e96:	bf00      	nop
 8001e98:	0800c1a8 	.word	0x0800c1a8
 8001e9c:	20000004 	.word	0x20000004

08001ea0 <VL53LX_SmudgeCorrectionEnable>:
}


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 8001ea2:	4604      	mov	r4, r0
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
	VL53LX_Error s3 = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	switch (Mode) {
 8001ea4:	2903      	cmp	r1, #3
 8001ea6:	d829      	bhi.n	8001efc <VL53LX_SmudgeCorrectionEnable+0x5c>
 8001ea8:	e8df f001 	tbb	[pc, r1]
 8001eac:	25140902 	.word	0x25140902
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8001eb0:	f001 fe82 	bl	8003bb8 <VL53LX_dynamic_xtalk_correction_disable>
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
		break;
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8001eb4:	4605      	mov	r5, r0
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f001 fe84 	bl	8003bc4 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8001ebc:	e005      	b.n	8001eca <VL53LX_SmudgeCorrectionEnable+0x2a>
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8001ebe:	f001 fe75 	bl	8003bac <VL53LX_dynamic_xtalk_correction_enable>
 8001ec2:	4605      	mov	r5, r0
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f001 fe8f 	bl	8003be8 <VL53LX_dynamic_xtalk_correction_apply_enable>
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8001eca:	4606      	mov	r6, r0
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f001 fe85 	bl	8003bdc <VL53LX_dynamic_xtalk_correction_single_apply_disable>
		break;
 8001ed2:	e009      	b.n	8001ee8 <VL53LX_SmudgeCorrectionEnable+0x48>
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8001ed4:	f001 fe6a 	bl	8003bac <VL53LX_dynamic_xtalk_correction_enable>
 8001ed8:	4605      	mov	r5, r0
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8001eda:	4620      	mov	r0, r4
 8001edc:	f001 fe84 	bl	8003be8 <VL53LX_dynamic_xtalk_correction_apply_enable>
 8001ee0:	4606      	mov	r6, r0
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f001 fe74 	bl	8003bd0 <VL53LX_dynamic_xtalk_correction_single_apply_enable>
		break;
	}

	if (Status == VL53LX_ERROR_NONE) {
		Status = s1;
		if (Status == VL53LX_ERROR_NONE)
 8001ee8:	b91d      	cbnz	r5, 8001ef2 <VL53LX_SmudgeCorrectionEnable+0x52>
			Status = s2;
		if (Status == VL53LX_ERROR_NONE)
 8001eea:	2e00      	cmp	r6, #0
 8001eec:	bf14      	ite	ne
 8001eee:	4635      	movne	r5, r6
 8001ef0:	4605      	moveq	r5, r0
			Status = s3;
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001ef2:	4628      	mov	r0, r5
 8001ef4:	bd70      	pop	{r4, r5, r6, pc}
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8001ef6:	f001 fe59 	bl	8003bac <VL53LX_dynamic_xtalk_correction_enable>
 8001efa:	e7db      	b.n	8001eb4 <VL53LX_SmudgeCorrectionEnable+0x14>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001efc:	f06f 0503 	mvn.w	r5, #3
 8001f00:	e7f7      	b.n	8001ef2 <VL53LX_SmudgeCorrectionEnable+0x52>

08001f02 <VL53LX_DataInit>:
{
 8001f02:	b510      	push	{r4, lr}
		Status = VL53LX_data_init(Dev, 1);
 8001f04:	2101      	movs	r1, #1
{
 8001f06:	4604      	mov	r4, r0
		Status = VL53LX_data_init(Dev, 1);
 8001f08:	f000 f9fa 	bl	8002300 <VL53LX_data_init>
	if (Status == VL53LX_ERROR_NONE)
 8001f0c:	b9d8      	cbnz	r0, 8001f46 <VL53LX_DataInit+0x44>
		Status = SetPresetModeL3CX(Dev,
 8001f0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f12:	2102      	movs	r1, #2
 8001f14:	4620      	mov	r0, r4
 8001f16:	f7ff fd57 	bl	80019c8 <SetPresetModeL3CX>
	if (Status == VL53LX_ERROR_NONE)
 8001f1a:	b9a0      	cbnz	r0, 8001f46 <VL53LX_DataInit+0x44>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001f1c:	f248 2135 	movw	r1, #33333	; 0x8235
 8001f20:	4620      	mov	r0, r4
 8001f22:	f7ff fd8f 	bl	8001a44 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53LX_ERROR_NONE) {
 8001f26:	b970      	cbnz	r0, 8001f46 <VL53LX_DataInit+0x44>
		memset(&pdev->per_vcsel_cal_data, 0,
 8001f28:	f641 4238 	movw	r2, #7224	; 0x1c38
 8001f2c:	18a3      	adds	r3, r4, r2
 8001f2e:	50a0      	str	r0, [r4, r2]
		Status = VL53LX_set_dmax_mode(Dev,
 8001f30:	2102      	movs	r1, #2
		memset(&pdev->per_vcsel_cal_data, 0,
 8001f32:	6058      	str	r0, [r3, #4]
 8001f34:	6098      	str	r0, [r3, #8]
		Status = VL53LX_set_dmax_mode(Dev,
 8001f36:	4620      	mov	r0, r4
 8001f38:	f000 fccf 	bl	80028da <VL53LX_set_dmax_mode>
	if (Status == VL53LX_ERROR_NONE)
 8001f3c:	b918      	cbnz	r0, 8001f46 <VL53LX_DataInit+0x44>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 8001f3e:	4601      	mov	r1, r0
 8001f40:	4620      	mov	r0, r4
 8001f42:	f7ff ffad 	bl	8001ea0 <VL53LX_SmudgeCorrectionEnable>
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001f46:	2320      	movs	r3, #32
 8001f48:	70e3      	strb	r3, [r4, #3]
	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001f4a:	f504 5429 	add.w	r4, r4, #10816	; 0x2a40
 8001f4e:	2302      	movs	r3, #2
 8001f50:	7023      	strb	r3, [r4, #0]
}
 8001f52:	bd10      	pop	{r4, pc}

08001f54 <VL53LX_set_inter_measurement_period_ms>:
	VL53LX_Error  status = VL53LX_ERROR_NONE;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8001f54:	f241 339c 	movw	r3, #5020	; 0x139c
 8001f58:	5ac3      	ldrh	r3, [r0, r3]
 8001f5a:	b12b      	cbz	r3, 8001f68 <VL53LX_set_inter_measurement_period_ms+0x14>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;

	if (status == VL53LX_ERROR_NONE) {
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8001f5c:	6141      	str	r1, [r0, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
 8001f5e:	4359      	muls	r1, r3
		pdev->tim_cfg.system__intermeasurement_period =
 8001f60:	f8c0 137c 	str.w	r1, [r0, #892]	; 0x37c
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8001f64:	2000      	movs	r0, #0
 8001f66:	4770      	bx	lr
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8001f68:	f06f 000e 	mvn.w	r0, #14
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8001f6c:	4770      	bx	lr

08001f6e <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8001f6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f70:	460d      	mov	r5, r1
 8001f72:	4611      	mov	r1, r2
 8001f74:	461a      	mov	r2, r3
	VL53LX_LLDriverData_t *pdev =
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8001f76:	f8b0 3316 	ldrh.w	r3, [r0, #790]	; 0x316
 8001f7a:	b16b      	cbz	r3, 8001f98 <VL53LX_set_timeouts_us+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;

	if (status == VL53LX_ERROR_NONE) {

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8001f7c:	e9c0 5102 	strd	r5, r1, [r0, #8]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8001f80:	6102      	str	r2, [r0, #16]

		status =
		VL53LX_calc_timeout_register_values(
 8001f82:	f500 745b 	add.w	r4, r0, #876	; 0x36c
 8001f86:	f200 3056 	addw	r0, r0, #854	; 0x356
		status =
 8001f8a:	9000      	str	r0, [sp, #0]
 8001f8c:	9401      	str	r4, [sp, #4]
 8001f8e:	4628      	mov	r0, r5
 8001f90:	f002 fcf9 	bl	8004986 <VL53LX_calc_timeout_register_values>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8001f94:	b003      	add	sp, #12
 8001f96:	bd30      	pop	{r4, r5, pc}
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8001f98:	f06f 000e 	mvn.w	r0, #14
 8001f9c:	e7fa      	b.n	8001f94 <VL53LX_set_timeouts_us+0x26>

08001f9e <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8001f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fa2:	4604      	mov	r4, r0
	uint32_t  macro_period_us = 0;
	uint16_t  timeout_encoded = 0;

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8001fa4:	f8b0 0316 	ldrh.w	r0, [r0, #790]	; 0x316
{
 8001fa8:	460f      	mov	r7, r1
 8001faa:	4690      	mov	r8, r2
 8001fac:	461e      	mov	r6, r3
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8001fae:	b358      	cbz	r0, 8002008 <VL53LX_get_timeouts_us+0x6a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;

	if (status == VL53LX_ERROR_NONE) {


		macro_period_us =
 8001fb0:	f894 1372 	ldrb.w	r1, [r4, #882]	; 0x372
 8001fb4:	f002 fc78 	bl	80048a8 <VL53LX_calc_macro_period_us>
 8001fb8:	4605      	mov	r5, r0
			pdev->tim_cfg.range_config__vcsel_period_a);



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
 8001fba:	4601      	mov	r1, r0
 8001fbc:	f894 035d 	ldrb.w	r0, [r4, #861]	; 0x35d
 8001fc0:	f002 fcac 	bl	800491c <VL53LX_calc_timeout_us>
		*pphasecal_config_timeout_us =
 8001fc4:	6038      	str	r0, [r7, #0]
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
			macro_period_us);



		timeout_encoded =
 8001fc6:	f894 336c 	ldrb.w	r3, [r4, #876]	; 0x36c
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
		timeout_encoded = (timeout_encoded << 8) +
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8001fca:	f894 036d 	ldrb.w	r0, [r4, #877]	; 0x36d
		timeout_encoded = (timeout_encoded << 8) +
 8001fce:	eb00 2003 	add.w	r0, r0, r3, lsl #8

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	b280      	uxth	r0, r0
 8001fd6:	f002 fcca 	bl	800496e <VL53LX_calc_decoded_timeout_us>
		*pmm_config_timeout_us =
 8001fda:	f8c8 0000 	str.w	r0, [r8]
				timeout_encoded,
				macro_period_us);



		timeout_encoded =
 8001fde:	f894 3370 	ldrb.w	r3, [r4, #880]	; 0x370
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
		timeout_encoded = (timeout_encoded << 8) +
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8001fe2:	f894 0371 	ldrb.w	r0, [r4, #881]	; 0x371
		timeout_encoded = (timeout_encoded << 8) +
 8001fe6:	eb00 2003 	add.w	r0, r0, r3, lsl #8

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8001fea:	4629      	mov	r1, r5
 8001fec:	b280      	uxth	r0, r0
 8001fee:	f002 fcbe 	bl	800496e <VL53LX_calc_decoded_timeout_us>
		*prange_config_timeout_us =
 8001ff2:	6030      	str	r0, [r6, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	60a3      	str	r3, [r4, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8001ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8001ffc:	60e3      	str	r3, [r4, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8001ffe:	6833      	ldr	r3, [r6, #0]
 8002000:	6123      	str	r3, [r4, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002002:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8002008:	f06f 000e 	mvn.w	r0, #14
 800200c:	e7fa      	b.n	8002004 <VL53LX_get_timeouts_us+0x66>

0800200e <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 800200e:	b538      	push	{r3, r4, r5, lr}
 8002010:	460c      	mov	r4, r1
 8002012:	4605      	mov	r5, r0
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 8002014:	f200 3293 	addw	r2, r0, #915	; 0x393
 8002018:	7809      	ldrb	r1, [r1, #0]
 800201a:	7860      	ldrb	r0, [r4, #1]
 800201c:	f002 ffa5 	bl	8004f6a <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 8002020:	78a0      	ldrb	r0, [r4, #2]
 8002022:	78e1      	ldrb	r1, [r4, #3]
 8002024:	f505 7265 	add.w	r2, r5, #916	; 0x394
 8002028:	f002 ffaa 	bl	8004f80 <VL53LX_encode_zone_size>


	LOG_FUNCTION_END(status);

	return status;
}
 800202c:	2000      	movs	r0, #0
 800202e:	bd38      	pop	{r3, r4, r5, pc}

08002030 <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 8002030:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002032:	460c      	mov	r4, r1


	VL53LX_Error  status = VL53LX_ERROR_NONE;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t  x       = 0;
 8002034:	2500      	movs	r5, #0
{
 8002036:	4606      	mov	r6, r0
	uint8_t  xy_size = 0;

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8002038:	f10d 0206 	add.w	r2, sp, #6
 800203c:	f10d 0107 	add.w	r1, sp, #7
 8002040:	f890 03fa 	ldrb.w	r0, [r0, #1018]	; 0x3fa
	uint8_t  x       = 0;
 8002044:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t  y       = 0;
 8002048:	f88d 5007 	strb.w	r5, [sp, #7]
	VL53LX_decode_row_col(
 800204c:	f004 f844 	bl	80060d8 <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8002050:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002054:	7023      	strb	r3, [r4, #0]
	pmm_roi->y_centre = y;
 8002056:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800205a:	7063      	strb	r3, [r4, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800205c:	f896 33fb 	ldrb.w	r3, [r6, #1019]	; 0x3fb
	pmm_roi->width  = xy_size & 0x0F;

	LOG_FUNCTION_END(status);

	return status;
}
 8002060:	4628      	mov	r0, r5
	pmm_roi->height = xy_size >> 4;
 8002062:	091a      	lsrs	r2, r3, #4
	pmm_roi->width  = xy_size & 0x0F;
 8002064:	f003 030f 	and.w	r3, r3, #15
	pmm_roi->height = xy_size >> 4;
 8002068:	70e2      	strb	r2, [r4, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800206a:	70a3      	strb	r3, [r4, #2]
}
 800206c:	b002      	add	sp, #8
 800206e:	bd70      	pop	{r4, r5, r6, pc}

08002070 <VL53LX_read_p2p_data>:
{
 8002070:	b5f0      	push	{r4, r5, r6, r7, lr}
		status = VL53LX_get_static_nvm_managed(
 8002072:	f500 7144 	add.w	r1, r0, #784	; 0x310
{
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	4604      	mov	r4, r0
		status = VL53LX_get_static_nvm_managed(
 800207a:	f005 fc39 	bl	80078f0 <VL53LX_get_static_nvm_managed>
	if (status == VL53LX_ERROR_NONE)
 800207e:	4605      	mov	r5, r0
 8002080:	2800      	cmp	r0, #0
 8002082:	d17b      	bne.n	800217c <VL53LX_read_p2p_data+0x10c>
		status = VL53LX_get_customer_nvm_managed(
 8002084:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8002088:	4620      	mov	r0, r4
 800208a:	f005 fcde 	bl	8007a4a <VL53LX_get_customer_nvm_managed>
	if (status == VL53LX_ERROR_NONE) {
 800208e:	4605      	mov	r5, r0
 8002090:	2800      	cmp	r0, #0
 8002092:	d173      	bne.n	800217c <VL53LX_read_p2p_data+0x10c>
		status = VL53LX_get_nvm_copy_data(
 8002094:	f204 37ca 	addw	r7, r4, #970	; 0x3ca
 8002098:	4639      	mov	r1, r7
 800209a:	4620      	mov	r0, r4
 800209c:	f006 f88e 	bl	80081bc <VL53LX_get_nvm_copy_data>
		if (status == VL53LX_ERROR_NONE)
 80020a0:	4605      	mov	r5, r0
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d16a      	bne.n	800217c <VL53LX_read_p2p_data+0x10c>
			VL53LX_copy_rtn_good_spads_to_buffer(
 80020a6:	f504 7604 	add.w	r6, r4, #528	; 0x210
 80020aa:	4631      	mov	r1, r6
 80020ac:	4638      	mov	r0, r7
 80020ae:	f002 fa7d 	bl	80045ac <VL53LX_copy_rtn_good_spads_to_buffer>
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 80020b2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80020b6:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80020ba:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
 80020be:	f8a4 327c 	strh.w	r3, [r4, #636]	; 0x27c
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80020c2:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 80020c6:	f8a4 327e 	strh.w	r3, [r4, #638]	; 0x27e
		status =
 80020ca:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 80020ce:	4620      	mov	r0, r4
 80020d0:	f005 fb6e 	bl	80077b0 <VL53LX_read_nvm_optical_centre>
	if (status == VL53LX_ERROR_NONE)
 80020d4:	4605      	mov	r5, r0
 80020d6:	2800      	cmp	r0, #0
 80020d8:	d150      	bne.n	800217c <VL53LX_read_p2p_data+0x10c>
		status =
 80020da:	f104 0160 	add.w	r1, r4, #96	; 0x60
 80020de:	4620      	mov	r0, r4
 80020e0:	f005 fb7d 	bl	80077de <VL53LX_read_nvm_cal_peak_rate_map>
	if (status == VL53LX_ERROR_NONE) {
 80020e4:	4605      	mov	r5, r0
 80020e6:	2800      	cmp	r0, #0
 80020e8:	d148      	bne.n	800217c <VL53LX_read_p2p_data+0x10c>
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 80020ea:	f104 079c 	add.w	r7, r4, #156	; 0x9c
		status =
 80020ee:	4639      	mov	r1, r7
 80020f0:	4620      	mov	r0, r4
 80020f2:	f005 fb84 	bl	80077fe <VL53LX_read_nvm_additional_offset_cal_data>
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80020f6:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
		status =
 80020fa:	4605      	mov	r5, r0
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80020fc:	b9c3      	cbnz	r3, 8002130 <VL53LX_read_p2p_data+0xc0>
 80020fe:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 8002102:	b9ab      	cbnz	r3, 8002130 <VL53LX_read_p2p_data+0xc0>
					= 0x0080;
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
					= 0x0180;
 800210a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800210e:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			VL53LX_calc_mm_effective_spads(
 8002112:	f104 039e 	add.w	r3, r4, #158	; 0x9e
 8002116:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800211a:	2338      	movs	r3, #56	; 0x38
 800211c:	e9cd 6300 	strd	r6, r3, [sp]
 8002120:	f894 13fb 	ldrb.w	r1, [r4, #1019]	; 0x3fb
 8002124:	f894 03fa 	ldrb.w	r0, [r4, #1018]	; 0x3fa
 8002128:	23ff      	movs	r3, #255	; 0xff
 800212a:	22c7      	movs	r2, #199	; 0xc7
 800212c:	f002 ffc3 	bl	80050b6 <VL53LX_calc_mm_effective_spads>
	if (status == VL53LX_ERROR_NONE) {
 8002130:	bb25      	cbnz	r5, 800217c <VL53LX_read_p2p_data+0x10c>
		status =
 8002132:	aa04      	add	r2, sp, #16
 8002134:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002138:	4620      	mov	r0, r4
 800213a:	f005 fb6f 	bl	800781c <VL53LX_read_nvm_fmt_range_results_data>
		if (status == VL53LX_ERROR_NONE) {
 800213e:	4605      	mov	r5, r0
 8002140:	b9e0      	cbnz	r0, 800217c <VL53LX_read_p2p_data+0x10c>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8002142:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8002146:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 800214a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800214e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
 8002152:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8002156:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 800215a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800215e:	b36b      	cbz	r3, 80021bc <VL53LX_read_p2p_data+0x14c>
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8002160:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		status =
 8002164:	f504 529c 	add.w	r2, r4, #4992	; 0x1380
			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8002168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800216c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
		status =
 8002170:	321c      	adds	r2, #28
 8002172:	21de      	movs	r1, #222	; 0xde
 8002174:	4620      	mov	r0, r4
 8002176:	f7ff fa1f 	bl	80015b8 <VL53LX_RdWord>
 800217a:	4605      	mov	r5, r0
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800217c:	f8b4 3316 	ldrh.w	r3, [r4, #790]	; 0x316
 8002180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8002184:	bf3c      	itt	cc
 8002186:	f64b 43cc 	movwcc	r3, #48332	; 0xbccc
 800218a:	f8a4 3316 	strhcc.w	r3, [r4, #790]	; 0x316
	if (status == VL53LX_ERROR_NONE)
 800218e:	b92d      	cbnz	r5, 800219c <VL53LX_read_p2p_data+0x12c>
		status =
 8002190:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
 8002194:	4620      	mov	r0, r4
 8002196:	f7ff ff4b 	bl	8002030 <VL53LX_get_mode_mitigation_roi>
 800219a:	4605      	mov	r5, r0
	if (pdev->optical_centre.x_centre == 0 &&
 800219c:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
 80021a0:	b94b      	cbnz	r3, 80021b6 <VL53LX_read_p2p_data+0x146>
				pdev->mm_roi.x_centre << 4;
 80021a2:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 80021a6:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.x_centre =
 80021a8:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
				pdev->mm_roi.y_centre << 4;
 80021ac:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
 80021b0:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.y_centre =
 80021b2:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
}
 80021b6:	4628      	mov	r0, r5
 80021b8:	b009      	add	sp, #36	; 0x24
 80021ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 80021bc:	2314      	movs	r3, #20
 80021be:	e7cf      	b.n	8002160 <VL53LX_read_p2p_data+0xf0>

080021c0 <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 80021c0:	b530      	push	{r4, r5, lr}
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 80021c2:	291e      	cmp	r1, #30
{
 80021c4:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
	switch (device_preset_mode) {
 80021c8:	d011      	beq.n	80021ee <VL53LX_get_preset_mode_timing_cfg+0x2e>
 80021ca:	2921      	cmp	r1, #33	; 0x21
 80021cc:	d015      	beq.n	80021fa <VL53LX_get_preset_mode_timing_cfg+0x3a>
 80021ce:	291b      	cmp	r1, #27
 80021d0:	d119      	bne.n	8002206 <VL53LX_get_preset_mode_timing_cfg+0x46>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80021d2:	f8b0 115e 	ldrh.w	r1, [r0, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80021d6:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 80021d8:	f8d0 216c 	ldr.w	r2, [r0, #364]	; 0x16c
	break;

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
		*pphasecal_config_timeout_us =
 80021dc:	601a      	str	r2, [r3, #0]
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 80021de:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
		*pmm_config_timeout_us =
 80021e2:	602b      	str	r3, [r5, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 80021e4:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
		*prange_config_timeout_us =
 80021e8:	6023      	str	r3, [r4, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80021ea:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80021ec:	bd30      	pop	{r4, r5, pc}
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80021ee:	f8b0 115e 	ldrh.w	r1, [r0, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80021f2:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80021f4:	f8d0 2170 	ldr.w	r2, [r0, #368]	; 0x170
 80021f8:	e7f0      	b.n	80021dc <VL53LX_get_preset_mode_timing_cfg+0x1c>
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 80021fa:	f8b0 115e 	ldrh.w	r1, [r0, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80021fe:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8002200:	f8d0 2174 	ldr.w	r2, [r0, #372]	; 0x174
 8002204:	e7ea      	b.n	80021dc <VL53LX_get_preset_mode_timing_cfg+0x1c>
		status = VL53LX_ERROR_INVALID_PARAMS;
 8002206:	f06f 0003 	mvn.w	r0, #3
 800220a:	e7ef      	b.n	80021ec <VL53LX_get_preset_mode_timing_cfg+0x2c>

0800220c <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800220c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002210:	b08d      	sub	sp, #52	; 0x34
 8002212:	e9cd 2308 	strd	r2, r3, [sp, #32]
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8002216:	f500 735b 	add.w	r3, r0, #876	; 0x36c
{
 800221a:	4681      	mov	r9, r0
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800221c:	9307      	str	r3, [sp, #28]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800221e:	f500 7398 	add.w	r3, r0, #304	; 0x130
 8002222:	930a      	str	r3, [sp, #40]	; 0x28

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8002224:	9b16      	ldr	r3, [sp, #88]	; 0x58
	pdev->preset_mode                 = device_preset_mode;
 8002226:	f889 1001 	strb.w	r1, [r9, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800222a:	60c3      	str	r3, [r0, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800222c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800222e:	6103      	str	r3, [r0, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8002230:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002232:	6143      	str	r3, [r0, #20]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8002234:	f100 02c2 	add.w	r2, r0, #194	; 0xc2
{
 8002238:	460c      	mov	r4, r1



	VL53LX_init_ll_driver_state(
 800223a:	2103      	movs	r1, #3
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 800223c:	920b      	str	r2, [sp, #44]	; 0x2c
	VL53LX_hist_post_process_config_t *phistpostprocess =
 800223e:	f500 7513 	add.w	r5, r0, #588	; 0x24c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8002242:	f200 3636 	addw	r6, r0, #822	; 0x336
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8002246:	f500 7747 	add.w	r7, r0, #796	; 0x31c
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800224a:	f200 3856 	addw	r8, r0, #854	; 0x356
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800224e:	f500 7a61 	add.w	sl, r0, #900	; 0x384
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8002252:	f500 7b66 	add.w	fp, r0, #920	; 0x398
	VL53LX_init_ll_driver_state(
 8002256:	f002 f943 	bl	80044e0 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 800225a:	2c1e      	cmp	r4, #30
 800225c:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 8002260:	d030      	beq.n	80022c4 <VL53LX_set_preset_mode+0xb8>
 8002262:	2c21      	cmp	r4, #33	; 0x21
 8002264:	d03b      	beq.n	80022de <VL53LX_set_preset_mode+0xd2>
 8002266:	2c1b      	cmp	r4, #27
 8002268:	d146      	bne.n	80022f8 <VL53LX_set_preset_mode+0xec>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 800226a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800226e:	9b07      	ldr	r3, [sp, #28]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	e9cd ab01 	strd	sl, fp, [sp, #4]
 8002276:	4643      	mov	r3, r8
 8002278:	463a      	mov	r2, r7
 800227a:	4631      	mov	r1, r6
 800227c:	4628      	mov	r0, r5
 800227e:	f001 ffb9 	bl	80041f4 <VL53LX_preset_mode_histogram_long_range>
					ptuning_parms,
					pzone_cfg);
		break;

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 8002282:	4604      	mov	r4, r0

	}



	if (status == VL53LX_ERROR_NONE) {
 8002284:	b988      	cbnz	r0, 80022aa <VL53LX_set_preset_mode+0x9e>

		pstatic->dss_config__target_total_rate_mcps =
 8002286:	9b08      	ldr	r3, [sp, #32]
 8002288:	f8a9 3336 	strh.w	r3, [r9, #822]	; 0x336
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800228c:	f8a9 3018 	strh.w	r3, [r9, #24]
	}



	if (status == VL53LX_ERROR_NONE)
		status =
 8002290:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002292:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8002296:	4648      	mov	r0, r9
 8002298:	f7ff fe69 	bl	8001f6e <VL53LX_set_timeouts_us>
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 800229c:	4604      	mov	r4, r0
 800229e:	b920      	cbnz	r0, 80022aa <VL53LX_set_preset_mode+0x9e>
		status =
 80022a0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80022a2:	4648      	mov	r0, r9
 80022a4:	f7ff fe56 	bl	8001f54 <VL53LX_set_inter_measurement_period_ms>
 80022a8:	4604      	mov	r4, r0
				Dev,
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
 80022aa:	f899 00c3 	ldrb.w	r0, [r9, #195]	; 0xc3
 80022ae:	f509 510c 	add.w	r1, r9, #8960	; 0x2300
 80022b2:	3001      	adds	r0, #1
 80022b4:	3124      	adds	r1, #36	; 0x24
 80022b6:	b2c0      	uxtb	r0, r0
 80022b8:	f002 f9e3 	bl	8004682 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
}
 80022bc:	4620      	mov	r0, r4
 80022be:	b00d      	add	sp, #52	; 0x34
 80022c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53LX_preset_mode_histogram_medium_range(
 80022c4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80022c8:	9b07      	ldr	r3, [sp, #28]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	e9cd ab01 	strd	sl, fp, [sp, #4]
 80022d0:	4643      	mov	r3, r8
 80022d2:	463a      	mov	r2, r7
 80022d4:	4631      	mov	r1, r6
 80022d6:	4628      	mov	r0, r5
 80022d8:	f001 fffa 	bl	80042d0 <VL53LX_preset_mode_histogram_medium_range>
 80022dc:	e7d1      	b.n	8002282 <VL53LX_set_preset_mode+0x76>
		status = VL53LX_preset_mode_histogram_short_range(
 80022de:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80022e2:	9b07      	ldr	r3, [sp, #28]
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	e9cd ab01 	strd	sl, fp, [sp, #4]
 80022ea:	4643      	mov	r3, r8
 80022ec:	463a      	mov	r2, r7
 80022ee:	4631      	mov	r1, r6
 80022f0:	4628      	mov	r0, r5
 80022f2:	f002 f859 	bl	80043a8 <VL53LX_preset_mode_histogram_short_range>
 80022f6:	e7c4      	b.n	8002282 <VL53LX_set_preset_mode+0x76>
		status = VL53LX_ERROR_INVALID_PARAMS;
 80022f8:	f06f 0403 	mvn.w	r4, #3
 80022fc:	e7d5      	b.n	80022aa <VL53LX_set_preset_mode+0x9e>
	...

08002300 <VL53LX_data_init>:
{
 8002300:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002302:	4604      	mov	r4, r0
 8002304:	460e      	mov	r6, r1
	VL53LX_init_ll_driver_state(
 8002306:	2162      	movs	r1, #98	; 0x62
 8002308:	f002 f8ea 	bl	80044e0 <VL53LX_init_ll_driver_state>
	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 800230c:	f504 5103 	add.w	r1, r4, #8384	; 0x20c0
 8002310:	3120      	adds	r1, #32
 8002312:	2304      	movs	r3, #4
 8002314:	744b      	strb	r3, [r1, #17]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 8002316:	f242 3324 	movw	r3, #8996	; 0x2324
 800231a:	2010      	movs	r0, #16
	pres->range_results.active_results = 0;
 800231c:	2200      	movs	r2, #0
 800231e:	748a      	strb	r2, [r1, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 8002320:	52e0      	strh	r0, [r4, r3]
 8002322:	f504 530d 	add.w	r3, r4, #9024	; 0x2340
 8002326:	f504 501e 	add.w	r0, r4, #10112	; 0x2780
 800232a:	3320      	adds	r3, #32
 800232c:	3020      	adds	r0, #32
		pobjects->xmonitor.VL53LX_p_011          = 0;
 800232e:	811a      	strh	r2, [r3, #8]
		pobjects->xmonitor.range_status =
 8002330:	729a      	strb	r2, [r3, #10]
		pobjects->xmonitor.VL53LX_p_017  = 0;
 8002332:	e9c3 2200 	strd	r2, r2, [r3]
 8002336:	3344      	adds	r3, #68	; 0x44
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8002338:	4298      	cmp	r0, r3
 800233a:	d1f8      	bne.n	800232e <VL53LX_data_init+0x2e>
	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 800233c:	f242 7068 	movw	r0, #10088	; 0x2768
 8002340:	2310      	movs	r3, #16
 8002342:	5223      	strh	r3, [r4, r0]
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 8002344:	2500      	movs	r5, #0
	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 8002346:	f881 379b 	strb.w	r3, [r1, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 800234a:	f881 279c 	strb.w	r2, [r1, #1948]	; 0x79c
 800234e:	f504 5322 	add.w	r3, r4, #10368	; 0x2880
 8002352:	f504 5229 	add.w	r2, r4, #10816	; 0x2a40
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 8002356:	609d      	str	r5, [r3, #8]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 8002358:	e9c3 5500 	strd	r5, r5, [r3]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 800235c:	e9c3 5505 	strd	r5, r5, [r3, #20]
 8002360:	331c      	adds	r3, #28
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8002362:	4293      	cmp	r3, r2
 8002364:	d1f7      	bne.n	8002356 <VL53LX_data_init+0x56>
	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 8002366:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800236a:	6023      	str	r3, [r4, #0]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 800236c:	f240 1301 	movw	r3, #257	; 0x101
 8002370:	80a3      	strh	r3, [r4, #4]
	pdev->offset_correction_mode  =
 8002372:	2301      	movs	r3, #1
 8002374:	71a3      	strb	r3, [r4, #6]
	pdev->mm_config_timeout_us        =  2000;
 8002376:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800237a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800237e:	e9c4 2302 	strd	r2, r3, [r4, #8]
	pdev->inter_measurement_period_ms =   100;
 8002382:	f243 21c8 	movw	r1, #13000	; 0x32c8
 8002386:	2364      	movs	r3, #100	; 0x64
 8002388:	e9c4 1304 	strd	r1, r3, [r4, #16]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800238c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002390:	8323      	strh	r3, [r4, #24]
	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 8002392:	f241 331a 	movw	r3, #4890	; 0x131a
 8002396:	2203      	movs	r2, #3
	pdev->debug_mode                  =  0x00;
 8002398:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 800239c:	52e2      	strh	r2, [r4, r3]
	pdev->gain_cal.standard_ranging_gain_factor =
 800239e:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <VL53LX_data_init+0x1a4>)
 80023a0:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	VL53LX_init_version(Dev);
 80023a4:	4620      	mov	r0, r4
 80023a6:	f002 f892 	bl	80044ce <VL53LX_init_version>
	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80023aa:	f504 50e2 	add.w	r0, r4, #7232	; 0x1c40
 80023ae:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80023b2:	2100      	movs	r1, #0
 80023b4:	3008      	adds	r0, #8
 80023b6:	f007 facc 	bl	8009952 <memset>
	pdev->bin_rec_pos = 0;
 80023ba:	f641 4344 	movw	r3, #7236	; 0x1c44
 80023be:	52e5      	strh	r5, [r4, r3]
	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 80023c0:	2e00      	cmp	r6, #0
 80023c2:	d14a      	bne.n	800245a <VL53LX_data_init+0x15a>
		status = VL53LX_init_refspadchar_config_struct(
 80023c4:	f504 700c 	add.w	r0, r4, #560	; 0x230
 80023c8:	f001 fc14 	bl	8003bf4 <VL53LX_init_refspadchar_config_struct>
	if (status == VL53LX_ERROR_NONE)
 80023cc:	4605      	mov	r5, r0
 80023ce:	2800      	cmp	r0, #0
 80023d0:	d149      	bne.n	8002466 <VL53LX_data_init+0x166>
		status = VL53LX_init_ssc_config_struct(
 80023d2:	f504 7010 	add.w	r0, r4, #576	; 0x240
 80023d6:	f001 fc1d 	bl	8003c14 <VL53LX_init_ssc_config_struct>
	if (status == VL53LX_ERROR_NONE)
 80023da:	4605      	mov	r5, r0
 80023dc:	2800      	cmp	r0, #0
 80023de:	d142      	bne.n	8002466 <VL53LX_data_init+0x166>
		status = VL53LX_init_xtalk_config_struct(
 80023e0:	f504 7131 	add.w	r1, r4, #708	; 0x2c4
 80023e4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80023e8:	f001 fc20 	bl	8003c2c <VL53LX_init_xtalk_config_struct>
	if (status == VL53LX_ERROR_NONE)
 80023ec:	4605      	mov	r5, r0
 80023ee:	2800      	cmp	r0, #0
 80023f0:	d139      	bne.n	8002466 <VL53LX_data_init+0x166>
		status = VL53LX_init_xtalk_extract_config_struct(
 80023f2:	f504 702a 	add.w	r0, r4, #680	; 0x2a8
 80023f6:	f001 fc49 	bl	8003c8c <VL53LX_init_xtalk_extract_config_struct>
	if (status == VL53LX_ERROR_NONE)
 80023fa:	4605      	mov	r5, r0
 80023fc:	bb98      	cbnz	r0, 8002466 <VL53LX_data_init+0x166>
		status = VL53LX_init_offset_cal_config_struct(
 80023fe:	f504 703a 	add.w	r0, r4, #744	; 0x2e8
 8002402:	f001 fc5d 	bl	8003cc0 <VL53LX_init_offset_cal_config_struct>
	if (status == VL53LX_ERROR_NONE)
 8002406:	4605      	mov	r5, r0
 8002408:	bb68      	cbnz	r0, 8002466 <VL53LX_data_init+0x166>
		status = VL53LX_init_zone_cal_config_struct(
 800240a:	f504 703f 	add.w	r0, r4, #764	; 0x2fc
 800240e:	f001 fc69 	bl	8003ce4 <VL53LX_init_zone_cal_config_struct>
	if (status == VL53LX_ERROR_NONE)
 8002412:	4605      	mov	r5, r0
 8002414:	bb38      	cbnz	r0, 8002466 <VL53LX_data_init+0x166>
		status = VL53LX_init_hist_post_process_config_struct(
 8002416:	f504 7113 	add.w	r1, r4, #588	; 0x24c
 800241a:	f894 02d4 	ldrb.w	r0, [r4, #724]	; 0x2d4
 800241e:	f001 fc73 	bl	8003d08 <VL53LX_init_hist_post_process_config_struct>
	if (status == VL53LX_ERROR_NONE)
 8002422:	4605      	mov	r5, r0
 8002424:	b9f8      	cbnz	r0, 8002466 <VL53LX_data_init+0x166>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 8002426:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 800242a:	f001 fd6b 	bl	8003f04 <VL53LX_init_hist_gen3_dmax_config_struct>
	if (status == VL53LX_ERROR_NONE)
 800242e:	4605      	mov	r5, r0
 8002430:	b9c8      	cbnz	r0, 8002466 <VL53LX_data_init+0x166>
		status = VL53LX_init_tuning_parm_storage_struct(
 8002432:	f504 7098 	add.w	r0, r4, #304	; 0x130
 8002436:	f001 fc9b 	bl	8003d70 <VL53LX_init_tuning_parm_storage_struct>
	if (status == VL53LX_ERROR_NONE)
 800243a:	4605      	mov	r5, r0
 800243c:	b998      	cbnz	r0, 8002466 <VL53LX_data_init+0x166>
		status = VL53LX_set_preset_mode(
 800243e:	6963      	ldr	r3, [r4, #20]
 8002440:	9302      	str	r3, [sp, #8]
 8002442:	6923      	ldr	r3, [r4, #16]
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	68e3      	ldr	r3, [r4, #12]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	8b22      	ldrh	r2, [r4, #24]
 800244c:	7861      	ldrb	r1, [r4, #1]
 800244e:	68a3      	ldr	r3, [r4, #8]
 8002450:	4620      	mov	r0, r4
 8002452:	f7ff fedb 	bl	800220c <VL53LX_set_preset_mode>
 8002456:	4605      	mov	r5, r0
 8002458:	e005      	b.n	8002466 <VL53LX_data_init+0x166>
		status = VL53LX_read_p2p_data(Dev);
 800245a:	4620      	mov	r0, r4
 800245c:	f7ff fe08 	bl	8002070 <VL53LX_read_p2p_data>
	if (status == VL53LX_ERROR_NONE)
 8002460:	4605      	mov	r5, r0
 8002462:	2800      	cmp	r0, #0
 8002464:	d0ae      	beq.n	80023c4 <VL53LX_data_init+0xc4>
	VL53LX_init_histogram_bin_data_struct(
 8002466:	f504 727f 	add.w	r2, r4, #1020	; 0x3fc
 800246a:	2118      	movs	r1, #24
 800246c:	2000      	movs	r0, #0
 800246e:	f003 fdf6 	bl	800605e <VL53LX_init_histogram_bin_data_struct>
	VL53LX_init_histogram_bin_data_struct(
 8002472:	f504 6295 	add.w	r2, r4, #1192	; 0x4a8
 8002476:	2118      	movs	r1, #24
 8002478:	2000      	movs	r0, #0
 800247a:	f003 fdf0 	bl	800605e <VL53LX_init_histogram_bin_data_struct>
	VL53LX_init_xtalk_bin_data_struct(
 800247e:	f204 5254 	addw	r2, r4, #1364	; 0x554
 8002482:	210c      	movs	r1, #12
 8002484:	2000      	movs	r0, #0
 8002486:	f002 f994 	bl	80047b2 <VL53LX_init_xtalk_bin_data_struct>
	VL53LX_xtalk_cal_data_init(
 800248a:	4620      	mov	r0, r4
 800248c:	f003 f9c9 	bl	8005822 <VL53LX_xtalk_cal_data_init>
	VL53LX_dynamic_xtalk_correction_data_init(
 8002490:	4620      	mov	r0, r4
 8002492:	f003 f95c 	bl	800574e <VL53LX_dynamic_xtalk_correction_data_init>
	VL53LX_low_power_auto_data_init(
 8002496:	4620      	mov	r0, r4
 8002498:	f003 f9d4 	bl	8005844 <VL53LX_low_power_auto_data_init>
}
 800249c:	4628      	mov	r0, r5
 800249e:	b004      	add	sp, #16
 80024a0:	bd70      	pop	{r4, r5, r6, pc}
 80024a2:	bf00      	nop
 80024a4:	07c307db 	.word	0x07c307db

080024a8 <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 80024a8:	b530      	push	{r4, r5, lr}

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 80024aa:	2901      	cmp	r1, #1
{
 80024ac:	b0c1      	sub	sp, #260	; 0x104
 80024ae:	4604      	mov	r4, r0
 80024b0:	460d      	mov	r5, r1
	switch (device_results_level) {
 80024b2:	d01c      	beq.n	80024ee <VL53LX_get_measurement_results+0x46>
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
	default:
		i2c_buffer_size_bytes =
 80024b4:	2902      	cmp	r1, #2
 80024b6:	bf0c      	ite	eq
 80024b8:	2386      	moveq	r3, #134	; 0x86
 80024ba:	232c      	movne	r3, #44	; 0x2c
	}



	if (status == VL53LX_ERROR_NONE)
		status =
 80024bc:	466a      	mov	r2, sp
 80024be:	2188      	movs	r1, #136	; 0x88
 80024c0:	4620      	mov	r0, r4
 80024c2:	f7ff f823 	bl	800150c <VL53LX_ReadMulti>
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 80024c6:	2d01      	cmp	r5, #1
 80024c8:	d913      	bls.n	80024f2 <VL53LX_get_measurement_results+0x4a>
 80024ca:	b9d8      	cbnz	r0, 8002504 <VL53LX_get_measurement_results+0x5c>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
 80024cc:	f504 529c 	add.w	r2, r4, #4992	; 0x1380
 80024d0:	3214      	adds	r2, #20
 80024d2:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
 80024d6:	2038      	movs	r0, #56	; 0x38
 80024d8:	f005 fcf2 	bl	8007ec0 <VL53LX_i2c_decode_debug_results>
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 80024dc:	b990      	cbnz	r0, 8002504 <VL53LX_get_measurement_results+0x5c>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
 80024de:	f504 529b 	add.w	r2, r4, #4960	; 0x1360
 80024e2:	3210      	adds	r2, #16
 80024e4:	a90b      	add	r1, sp, #44	; 0x2c
 80024e6:	2021      	movs	r0, #33	; 0x21
 80024e8:	f005 fcaf 	bl	8007e4a <VL53LX_i2c_decode_core_results>
 80024ec:	e003      	b.n	80024f6 <VL53LX_get_measurement_results+0x4e>
		i2c_buffer_size_bytes =
 80024ee:	234d      	movs	r3, #77	; 0x4d
 80024f0:	e7e4      	b.n	80024bc <VL53LX_get_measurement_results+0x14>
	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 80024f2:	2d00      	cmp	r5, #0
 80024f4:	d1f2      	bne.n	80024dc <VL53LX_get_measurement_results+0x34>
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 80024f6:	b928      	cbnz	r0, 8002504 <VL53LX_get_measurement_results+0x5c>

		i2c_buffer_offset_bytes = 0;
		status =
 80024f8:	f204 329e 	addw	r2, r4, #926	; 0x39e
 80024fc:	4669      	mov	r1, sp
 80024fe:	202c      	movs	r0, #44	; 0x2c
 8002500:	f005 fc14 	bl	8007d2c <VL53LX_i2c_decode_system_results>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002504:	b041      	add	sp, #260	; 0x104
 8002506:	bd30      	pop	{r4, r5, pc}

08002508 <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 8002508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 800250c:	2500      	movs	r5, #0
 800250e:	709d      	strb	r5, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
	presults->wrap_dmax_mm    = 0;
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 8002510:	2404      	movs	r4, #4
	presults->stream_count    = psys->result__stream_count;
 8002512:	f891 8003 	ldrb.w	r8, [r1, #3]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 8002516:	745c      	strb	r4, [r3, #17]
	presults->active_results  = 1;
 8002518:	2401      	movs	r4, #1
{
 800251a:	b085      	sub	sp, #20
	presults->stream_count    = psys->result__stream_count;
 800251c:	f883 8003 	strb.w	r8, [r3, #3]
	presults->active_results  = 1;
 8002520:	749c      	strb	r4, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8002522:	8a0c      	ldrh	r4, [r1, #16]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8002524:	f8b1 a012 	ldrh.w	sl, [r1, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8002528:	9402      	str	r4, [sp, #8]
	rmmo_effective_spads_sd0 =
 800252a:	8a8c      	ldrh	r4, [r1, #20]
 800252c:	9403      	str	r4, [sp, #12]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
		presults->VL53LX_p_022[i] = 0;
 800252e:	e9c3 5501 	strd	r5, r5, [r3, #4]
{
 8002532:	9001      	str	r0, [sp, #4]
	presults->wrap_dmax_mm    = 0;
 8002534:	81dd      	strh	r5, [r3, #14]
		presults->VL53LX_p_022[i] = 0;
 8002536:	819d      	strh	r5, [r3, #12]
 8002538:	f103 0460 	add.w	r4, r3, #96	; 0x60
	pdata = &(presults->VL53LX_p_003[0]);

	for (i = 0; i < 2; i++) {

		pdata->range_id     = i;
		pdata->time_stamp   = 0;
 800253c:	462f      	mov	r7, r5

		if ((psys->result__stream_count == 0) &&
			((psys->result__range_status &
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 800253e:	f04f 0b13 	mov.w	fp, #19

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
			pdata->avg_signal_count_rate_mcps =
 8002542:	f64f 7eff 	movw	lr, #65535	; 0xffff
			psys->result__final_crosstalk_corrected_range_mm_sd1);


			range_mm *= gain_factor;
			range_mm += 0x0400;
			range_mm /= 0x0800;
 8002546:	f44f 6900 	mov.w	r9, #2048	; 0x800
 800254a:	fa5f fc85 	uxtb.w	ip, r5
		pdata->range_id     = i;
 800254e:	f804 cc4c 	strb.w	ip, [r4, #-76]
		pdata->time_stamp   = 0;
 8002552:	f844 7c48 	str.w	r7, [r4, #-72]
 8002556:	784e      	ldrb	r6, [r1, #1]
 8002558:	f006 061f 	and.w	r6, r6, #31
		if ((psys->result__stream_count == 0) &&
 800255c:	f1b8 0f00 	cmp.w	r8, #0
 8002560:	d166      	bne.n	8002630 <VL53LX_copy_sys_and_core_results_to_range_results+0x128>
 8002562:	2e09      	cmp	r6, #9
 8002564:	d164      	bne.n	8002630 <VL53LX_copy_sys_and_core_results_to_range_results+0x128>
			pdata->range_status =
 8002566:	f804 bc02 	strb.w	fp, [r4, #-2]
		pdata->VL53LX_p_012 = 0;
 800256a:	f804 7c44 	strb.w	r7, [r4, #-68]
		pdata->VL53LX_p_019    = 0;
 800256e:	f804 7c43 	strb.w	r7, [r4, #-67]
		pdata->VL53LX_p_023   = 0;
 8002572:	f804 7c42 	strb.w	r7, [r4, #-66]
		pdata->VL53LX_p_024     = 0;
 8002576:	f804 7c41 	strb.w	r7, [r4, #-65]
		pdata->VL53LX_p_013   = 0;
 800257a:	f804 7c40 	strb.w	r7, [r4, #-64]
		pdata->VL53LX_p_025    = 0;
 800257e:	f804 7c3f 	strb.w	r7, [r4, #-63]
		switch (i) {
 8002582:	f1bc 0f00 	cmp.w	ip, #0
 8002586:	d161      	bne.n	800264c <VL53LX_copy_sys_and_core_results_to_range_results+0x144>
			if (psys->result__report_status ==
 8002588:	f891 c002 	ldrb.w	ip, [r1, #2]
 800258c:	f1bc 0f07 	cmp.w	ip, #7
 8002590:	d151      	bne.n	8002636 <VL53LX_copy_sys_and_core_results_to_range_results+0x12e>
				pdata->VL53LX_p_004 =
 8002592:	f824 ac36 	strh.w	sl, [r4, #-54]
			pdata->peak_signal_count_rate_mcps =
 8002596:	9802      	ldr	r0, [sp, #8]
 8002598:	f824 0c1c 	strh.w	r0, [r4, #-28]
				psys->result__avg_signal_count_rate_mcps_sd0;
 800259c:	f8b1 c016 	ldrh.w	ip, [r1, #22]
			pdata->avg_signal_count_rate_mcps =
 80025a0:	f824 cc1a 	strh.w	ip, [r4, #-26]
				psys->result__ambient_count_rate_mcps_sd0;
 80025a4:	f8b1 c008 	ldrh.w	ip, [r1, #8]
			pdata->ambient_count_rate_mcps =
 80025a8:	f824 cc18 	strh.w	ip, [r4, #-24]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80025ac:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
			range_mm *= gain_factor;
 80025b0:	9801      	ldr	r0, [sp, #4]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80025b2:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 80025b6:	45f4      	cmp	ip, lr
 80025b8:	bf28      	it	cs
 80025ba:	46f4      	movcs	ip, lr
 80025bc:	f824 cc10 	strh.w	ip, [r4, #-16]
				psys->result__phase_sd0;
 80025c0:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
			pdata->VL53LX_p_011 =
 80025c4:	f824 cc0c 	strh.w	ip, [r4, #-12]
			range_mm = (int32_t)(
 80025c8:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			range_mm *= gain_factor;
 80025cc:	fb0c fc00 	mul.w	ip, ip, r0
			pdata->VL53LX_p_017 =
 80025d0:	6850      	ldr	r0, [r2, #4]
 80025d2:	f844 0c24 	str.w	r0, [r4, #-36]
			pdata->VL53LX_p_010 =
 80025d6:	6890      	ldr	r0, [r2, #8]
 80025d8:	f844 0c20 	str.w	r0, [r4, #-32]
			pdata->total_periods_elapsed =
 80025dc:	68d0      	ldr	r0, [r2, #12]
 80025de:	f844 0c34 	str.w	r0, [r4, #-52]
			pdata->VL53LX_p_016 =
 80025e2:	6810      	ldr	r0, [r2, #0]
			range_mm += 0x0400;
 80025e4:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
			range_mm /= 0x0800;
 80025e8:	fb9c fcf9 	sdiv	ip, ip, r9
			pdata->median_range_mm = (int16_t)range_mm;
 80025ec:	f824 cc06 	strh.w	ip, [r4, #-6]

			break;
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 80025f0:	f834 cc0c 	ldrh.w	ip, [r4, #-12]
 80025f4:	f824 cc0e 	strh.w	ip, [r4, #-14]
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 80025f8:	f824 cc0a 	strh.w	ip, [r4, #-10]
		pdata->min_range_mm = pdata->median_range_mm;
 80025fc:	f934 cc06 	ldrsh.w	ip, [r4, #-6]
			pdata->VL53LX_p_016 =
 8002600:	f844 0c28 	str.w	r0, [r4, #-40]
		pdata->min_range_mm = pdata->median_range_mm;
 8002604:	f824 cc08 	strh.w	ip, [r4, #-8]
		pdata->max_range_mm = pdata->median_range_mm;
 8002608:	f824 cc04 	strh.w	ip, [r4, #-4]
 800260c:	344c      	adds	r4, #76	; 0x4c
	for (i = 0; i < 2; i++) {
 800260e:	b16d      	cbz	r5, 800262c <VL53LX_copy_sys_and_core_results_to_range_results+0x124>
		pdata++;
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8002610:	2200      	movs	r2, #0
 8002612:	2e11      	cmp	r6, #17
 8002614:	741a      	strb	r2, [r3, #16]
 8002616:	d806      	bhi.n	8002626 <VL53LX_copy_sys_and_core_results_to_range_results+0x11e>
 8002618:	4925      	ldr	r1, [pc, #148]	; (80026b0 <VL53LX_copy_sys_and_core_results_to_range_results+0x1a8>)
 800261a:	40b5      	lsls	r5, r6
 800261c:	420d      	tst	r5, r1
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800261e:	bf1c      	itt	ne
 8002620:	741e      	strbne	r6, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 8002622:	f883 205e 	strbne.w	r2, [r3, #94]	; 0x5e
	break;

	}

	LOG_FUNCTION_END(0);
}
 8002626:	b005      	add	sp, #20
 8002628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800262c:	2501      	movs	r5, #1
 800262e:	e78c      	b.n	800254a <VL53LX_copy_sys_and_core_results_to_range_results+0x42>
			pdata->range_status =
 8002630:	f804 6c02 	strb.w	r6, [r4, #-2]
 8002634:	e799      	b.n	800256a <VL53LX_copy_sys_and_core_results_to_range_results+0x62>
			else if (psys->result__report_status ==
 8002636:	f1bc 0f08 	cmp.w	ip, #8
				pdata->VL53LX_p_004 =
 800263a:	bf0b      	itete	eq
 800263c:	9803      	ldreq	r0, [sp, #12]
				psys->result__dss_actual_effective_spads_sd0;
 800263e:	f8b1 c004 	ldrhne.w	ip, [r1, #4]
				pdata->VL53LX_p_004 =
 8002642:	f824 0c36 	strheq.w	r0, [r4, #-54]
				pdata->VL53LX_p_004 =
 8002646:	f824 cc36 	strhne.w	ip, [r4, #-54]
 800264a:	e7a4      	b.n	8002596 <VL53LX_copy_sys_and_core_results_to_range_results+0x8e>
				psys->result__dss_actual_effective_spads_sd1;
 800264c:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			pdata->VL53LX_p_004 =
 8002650:	f824 cc36 	strh.w	ip, [r4, #-54]
				psys->result__peak_signal_count_rate_mcps_sd1;
 8002654:	f8b1 c01a 	ldrh.w	ip, [r1, #26]
			pdata->peak_signal_count_rate_mcps =
 8002658:	f824 cc1c 	strh.w	ip, [r4, #-28]
			pdata->avg_signal_count_rate_mcps =
 800265c:	f824 ec1a 	strh.w	lr, [r4, #-26]
				psys->result__ambient_count_rate_mcps_sd1;
 8002660:	f8b1 c01c 	ldrh.w	ip, [r1, #28]
			pdata->ambient_count_rate_mcps =
 8002664:	f824 cc18 	strh.w	ip, [r4, #-24]
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8002668:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			range_mm *= gain_factor;
 800266c:	9801      	ldr	r0, [sp, #4]
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800266e:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8002672:	45f4      	cmp	ip, lr
 8002674:	bf28      	it	cs
 8002676:	46f4      	movcs	ip, lr
 8002678:	f824 cc10 	strh.w	ip, [r4, #-16]
				psys->result__phase_sd1;
 800267c:	f8b1 c020 	ldrh.w	ip, [r1, #32]
			pdata->VL53LX_p_011 =
 8002680:	f824 cc0c 	strh.w	ip, [r4, #-12]
			range_mm = (int32_t)(
 8002684:	f8b1 c022 	ldrh.w	ip, [r1, #34]	; 0x22
			range_mm *= gain_factor;
 8002688:	fb00 fc0c 	mul.w	ip, r0, ip
			pdata->VL53LX_p_017 =
 800268c:	6950      	ldr	r0, [r2, #20]
 800268e:	f844 0c24 	str.w	r0, [r4, #-36]
			pdata->VL53LX_p_010 =
 8002692:	6990      	ldr	r0, [r2, #24]
 8002694:	f844 0c20 	str.w	r0, [r4, #-32]
			pdata->total_periods_elapsed  =
 8002698:	69d0      	ldr	r0, [r2, #28]
 800269a:	f844 0c34 	str.w	r0, [r4, #-52]
			range_mm += 0x0400;
 800269e:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
			pdata->VL53LX_p_016 =
 80026a2:	6910      	ldr	r0, [r2, #16]
			range_mm /= 0x0800;
 80026a4:	fb9c fcf9 	sdiv	ip, ip, r9
			pdata->median_range_mm = (int16_t)range_mm;
 80026a8:	f824 cc06 	strh.w	ip, [r4, #-6]
 80026ac:	e7a0      	b.n	80025f0 <VL53LX_copy_sys_and_core_results_to_range_results+0xe8>
 80026ae:	bf00      	nop
 80026b0:	0002200e 	.word	0x0002200e

080026b4 <VL53LX_set_zone_dss_config>:
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 80026b4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80026b8:	2b05      	cmp	r3, #5
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80026ba:	bf01      	itttt	eq
 80026bc:	2302      	moveq	r3, #2
 80026be:	f880 3360 	strbeq.w	r3, [r0, #864]	; 0x360
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80026c2:	888b      	ldrheq	r3, [r1, #4]
 80026c4:	f8a0 3366 	strheq.w	r3, [r0, #870]	; 0x366
			pzone_dyn_cfg->dss_requested_effective_spad_count;
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80026c8:	bf1c      	itt	ne
 80026ca:	2301      	movne	r3, #1
 80026cc:	f880 3360 	strbne.w	r3, [r0, #864]	; 0x360
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
}
 80026d0:	2000      	movs	r0, #0
 80026d2:	4770      	bx	lr

080026d4 <VL53LX_init_and_start_range>:
{
 80026d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		(psystem->system__mode_start &
 80026d8:	f890 339c 	ldrb.w	r3, [r0, #924]	; 0x39c
	pdev->measurement_mode = measurement_mode;
 80026dc:	70c1      	strb	r1, [r0, #3]
		(psystem->system__mode_start &
 80026de:	f003 030f 	and.w	r3, r3, #15
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80026e2:	4319      	orrs	r1, r3
	psystem->system__mode_start =
 80026e4:	f880 139c 	strb.w	r1, [r0, #924]	; 0x39c
		VL53LX_set_user_zone(
 80026e8:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
{
 80026ec:	4604      	mov	r4, r0
		VL53LX_set_user_zone(
 80026ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
{
 80026f2:	b0c0      	sub	sp, #256	; 0x100
	status =
 80026f4:	31de      	adds	r1, #222	; 0xde
{
 80026f6:	4616      	mov	r6, r2
	status =
 80026f8:	f7ff fc89 	bl	800200e <VL53LX_set_user_zone>
	if (pdev->zone_cfg.active_zones > 0) {
 80026fc:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8002700:	b153      	cbz	r3, 8002718 <VL53LX_init_and_start_range+0x44>
		VL53LX_set_zone_dss_config(
 8002702:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 8002706:	230a      	movs	r3, #10
 8002708:	fb03 4101 	mla	r1, r3, r1, r4
		status =
 800270c:	f501 510a 	add.w	r1, r1, #8832	; 0x2280
 8002710:	3102      	adds	r1, #2
 8002712:	4620      	mov	r0, r4
 8002714:	f7ff ffce 	bl	80026b4 <VL53LX_set_zone_dss_config>
	if (((pdev->sys_ctrl.system__mode_start &
 8002718:	f894 339c 	ldrb.w	r3, [r4, #924]	; 0x39c
 800271c:	079a      	lsls	r2, r3, #30
 800271e:	d407      	bmi.n	8002730 <VL53LX_init_and_start_range+0x5c>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8002720:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
 8002724:	2b01      	cmp	r3, #1
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8002726:	bf04      	itt	eq
 8002728:	f8b4 32dc 	ldrheq.w	r3, [r4, #732]	; 0x2dc
 800272c:	f8a4 334e 	strheq.w	r3, [r4, #846]	; 0x34e
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8002730:	f241 432a 	movw	r3, #5162	; 0x142a
 8002734:	5ce2      	ldrb	r2, [r4, r3]
 8002736:	2aff      	cmp	r2, #255	; 0xff
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8002738:	bf04      	itt	eq
 800273a:	2200      	moveq	r2, #0
 800273c:	54e2      	strbeq	r2, [r4, r3]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800273e:	f241 4328 	movw	r3, #5160	; 0x1428
 8002742:	58e3      	ldr	r3, [r4, r3]
 8002744:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002748:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800274c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002750:	d115      	bne.n	800277e <VL53LX_init_and_start_range+0xaa>
		pdev->low_power_auto_data.saved_interrupt_config =
 8002752:	f241 432b 	movw	r3, #5163	; 0x142b
 8002756:	f894 2358 	ldrb.w	r2, [r4, #856]	; 0x358
 800275a:	54e2      	strb	r2, [r4, r3]
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800275c:	2320      	movs	r3, #32
 800275e:	f884 3358 	strb.w	r3, [r4, #856]	; 0x358
		if ((pdev->dyn_cfg.system__sequence_config & (
 8002762:	f894 3395 	ldrb.w	r3, [r4, #917]	; 0x395
 8002766:	f013 0f60 	tst.w	r3, #96	; 0x60
			(pN->mm_config__outer_offset_mm << 2);
 800276a:	bf0a      	itet	eq
 800276c:	f9b4 305e 	ldrsheq.w	r3, [r4, #94]	; 0x5e
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8002770:	2300      	movne	r3, #0
			(pN->mm_config__outer_offset_mm << 2);
 8002772:	009b      	lsleq	r3, r3, #2
 8002774:	2e05      	cmp	r6, #5
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8002776:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800277a:	bf38      	it	cc
 800277c:	2605      	movcc	r6, #5
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800277e:	f241 4328 	movw	r3, #5160	; 0x1428
 8002782:	4a52      	ldr	r2, [pc, #328]	; (80028cc <VL53LX_init_and_start_range+0x1f8>)
 8002784:	58e3      	ldr	r3, [r4, r3]
 8002786:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800278a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800278e:	4293      	cmp	r3, r2
 8002790:	d16a      	bne.n	8002868 <VL53LX_init_and_start_range+0x194>
			pdev->low_power_auto_data.saved_interrupt_config;
 8002792:	f241 432b 	movw	r3, #5163	; 0x142b
		pdev->gen_cfg.system__interrupt_config_gpio =
 8002796:	5ce3      	ldrb	r3, [r4, r3]
 8002798:	f884 3358 	strb.w	r3, [r4, #856]	; 0x358
	if (status == VL53LX_ERROR_NONE)
 800279c:	2800      	cmp	r0, #0
 800279e:	d06d      	beq.n	800287c <VL53LX_init_and_start_range+0x1a8>
 80027a0:	2305      	movs	r3, #5
		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 80027a2:	2606      	movs	r6, #6
 80027a4:	4a4a      	ldr	r2, [pc, #296]	; (80028d0 <VL53LX_init_and_start_range+0x1fc>)
 80027a6:	5cd5      	ldrb	r5, [r2, r3]
	i2c_buffer_size_bytes =
 80027a8:	f1c5 0888 	rsb	r8, r5, #136	; 0x88
	pbuffer = &buffer[0];
 80027ac:	466b      	mov	r3, sp
	i2c_buffer_size_bytes =
 80027ae:	fa1f f888 	uxth.w	r8, r8
 80027b2:	461f      	mov	r7, r3
		*pbuffer++ = 0;
 80027b4:	2100      	movs	r1, #0
 80027b6:	f803 1b01 	strb.w	r1, [r3], #1
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 80027ba:	1bda      	subs	r2, r3, r7
 80027bc:	b292      	uxth	r2, r2
 80027be:	4590      	cmp	r8, r2
 80027c0:	d8f9      	bhi.n	80027b6 <VL53LX_init_and_start_range+0xe2>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 80027c2:	2e05      	cmp	r6, #5
 80027c4:	d95c      	bls.n	8002880 <VL53LX_init_and_start_range+0x1ac>
 80027c6:	2800      	cmp	r0, #0
 80027c8:	d17c      	bne.n	80028c4 <VL53LX_init_and_start_range+0x1f0>
		i2c_buffer_offset_bytes =
 80027ca:	f1c5 0201 	rsb	r2, r5, #1
		status =
 80027ce:	fa17 f282 	uxtah	r2, r7, r2
 80027d2:	210b      	movs	r1, #11
 80027d4:	f504 7044 	add.w	r0, r4, #784	; 0x310
 80027d8:	f005 f830 	bl	800783c <VL53LX_i2c_encode_static_nvm_managed>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80027dc:	2800      	cmp	r0, #0
 80027de:	d171      	bne.n	80028c4 <VL53LX_init_and_start_range+0x1f0>
		i2c_buffer_offset_bytes =
 80027e0:	f1c5 020d 	rsb	r2, r5, #13
		status =
 80027e4:	fa17 f282 	uxtah	r2, r7, r2
 80027e8:	2117      	movs	r1, #23
 80027ea:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80027ee:	f005 f88e 	bl	800790e <VL53LX_i2c_encode_customer_nvm_managed>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d166      	bne.n	80028c4 <VL53LX_init_and_start_range+0x1f0>
		i2c_buffer_offset_bytes =
 80027f6:	f1c5 0224 	rsb	r2, r5, #36	; 0x24
		status =
 80027fa:	fa17 f282 	uxtah	r2, r7, r2
 80027fe:	2120      	movs	r1, #32
 8002800:	f204 3036 	addw	r0, r4, #822	; 0x336
 8002804:	f005 f941 	bl	8007a8a <VL53LX_i2c_encode_static_config>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8002808:	2800      	cmp	r0, #0
 800280a:	d15b      	bne.n	80028c4 <VL53LX_init_and_start_range+0x1f0>
		i2c_buffer_offset_bytes =
 800280c:	f1c5 0244 	rsb	r2, r5, #68	; 0x44
		status =
 8002810:	fa17 f282 	uxtah	r2, r7, r2
 8002814:	2116      	movs	r1, #22
 8002816:	f204 3056 	addw	r0, r4, #854	; 0x356
 800281a:	f005 f9a4 	bl	8007b66 <VL53LX_i2c_encode_general_config>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800281e:	2800      	cmp	r0, #0
 8002820:	d150      	bne.n	80028c4 <VL53LX_init_and_start_range+0x1f0>
		i2c_buffer_offset_bytes =
 8002822:	f1c5 025a 	rsb	r2, r5, #90	; 0x5a
		status =
 8002826:	fa17 f282 	uxtah	r2, r7, r2
 800282a:	2117      	movs	r1, #23
 800282c:	f504 705b 	add.w	r0, r4, #876	; 0x36c
 8002830:	f005 f9de 	bl	8007bf0 <VL53LX_i2c_encode_timing_config>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8002834:	2800      	cmp	r0, #0
 8002836:	d145      	bne.n	80028c4 <VL53LX_init_and_start_range+0x1f0>
		if ((psystem->system__mode_start &
 8002838:	f894 339c 	ldrb.w	r3, [r4, #924]	; 0x39c
		i2c_buffer_offset_bytes =
 800283c:	f1c5 0271 	rsb	r2, r5, #113	; 0x71
		if ((psystem->system__mode_start &
 8002840:	069b      	lsls	r3, r3, #26
		i2c_buffer_offset_bytes =
 8002842:	b292      	uxth	r2, r2
		if ((psystem->system__mode_start &
 8002844:	d509      	bpl.n	800285a <VL53LX_init_and_start_range+0x186>
					pstate->cfg_gph_id | 0x01;
 8002846:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
			pdynamic->system__grouped_parameter_hold   =
 800284a:	f884 3396 	strb.w	r3, [r4, #918]	; 0x396
			pdynamic->system__grouped_parameter_hold_0 =
 800284e:	f043 0101 	orr.w	r1, r3, #1
 8002852:	f884 1384 	strb.w	r1, [r4, #900]	; 0x384
			pdynamic->system__grouped_parameter_hold_1 =
 8002856:	f884 1390 	strb.w	r1, [r4, #912]	; 0x390
		status =
 800285a:	443a      	add	r2, r7
 800285c:	2112      	movs	r1, #18
 800285e:	f504 7061 	add.w	r0, r4, #900	; 0x384
 8002862:	f005 fa08 	bl	8007c76 <VL53LX_i2c_encode_dynamic_config>
 8002866:	e014      	b.n	8002892 <VL53LX_init_and_start_range+0x1be>
	if (status == VL53LX_ERROR_NONE)
 8002868:	b910      	cbnz	r0, 8002870 <VL53LX_init_and_start_range+0x19c>
		status = VL53LX_save_cfg_data(Dev);
 800286a:	4620      	mov	r0, r4
 800286c:	f002 fd47 	bl	80052fe <VL53LX_save_cfg_data>
 8002870:	1e73      	subs	r3, r6, #1
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b05      	cmp	r3, #5
 8002876:	d995      	bls.n	80027a4 <VL53LX_init_and_start_range+0xd0>
		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 8002878:	2583      	movs	r5, #131	; 0x83
 800287a:	e795      	b.n	80027a8 <VL53LX_init_and_start_range+0xd4>
 800287c:	2606      	movs	r6, #6
 800287e:	e7f4      	b.n	800286a <VL53LX_init_and_start_range+0x196>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8002880:	d0ac      	beq.n	80027dc <VL53LX_init_and_start_range+0x108>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8002882:	2e04      	cmp	r6, #4
 8002884:	d0b5      	beq.n	80027f2 <VL53LX_init_and_start_range+0x11e>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8002886:	2e03      	cmp	r6, #3
 8002888:	d0be      	beq.n	8002808 <VL53LX_init_and_start_range+0x134>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800288a:	2e02      	cmp	r6, #2
 800288c:	d0c7      	beq.n	800281e <VL53LX_init_and_start_range+0x14a>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800288e:	2e00      	cmp	r6, #0
 8002890:	d1d0      	bne.n	8002834 <VL53LX_init_and_start_range+0x160>
	if (status == VL53LX_ERROR_NONE) {
 8002892:	b9b8      	cbnz	r0, 80028c4 <VL53LX_init_and_start_range+0x1f0>
		i2c_buffer_offset_bytes =
 8002894:	f1c5 0283 	rsb	r2, r5, #131	; 0x83
		status =
 8002898:	fa17 f282 	uxtah	r2, r7, r2
 800289c:	2105      	movs	r1, #5
 800289e:	f504 7066 	add.w	r0, r4, #920	; 0x398
 80028a2:	f005 fa2a 	bl	8007cfa <VL53LX_i2c_encode_system_control>
	if (status == VL53LX_ERROR_NONE) {
 80028a6:	b968      	cbnz	r0, 80028c4 <VL53LX_init_and_start_range+0x1f0>
		status =
 80028a8:	4643      	mov	r3, r8
 80028aa:	463a      	mov	r2, r7
 80028ac:	4629      	mov	r1, r5
 80028ae:	4620      	mov	r0, r4
 80028b0:	f7fe fe0c 	bl	80014cc <VL53LX_WriteMulti>
	if (status == VL53LX_ERROR_NONE)
 80028b4:	b930      	cbnz	r0, 80028c4 <VL53LX_init_and_start_range+0x1f0>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 80028b6:	4620      	mov	r0, r4
 80028b8:	f002 fdb8 	bl	800542c <VL53LX_update_ll_driver_rd_state>
	if (status == VL53LX_ERROR_NONE)
 80028bc:	b910      	cbnz	r0, 80028c4 <VL53LX_init_and_start_range+0x1f0>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 80028be:	4620      	mov	r0, r4
 80028c0:	f002 fe3d 	bl	800553e <VL53LX_update_ll_driver_cfg_state>
}
 80028c4:	b040      	add	sp, #256	; 0x100
 80028c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028ca:	bf00      	nop
 80028cc:	00010100 	.word	0x00010100
 80028d0:	0800c1bd 	.word	0x0800c1bd

080028d4 <VL53LX_clear_interrupt_and_enable_next_range>:
		status = VL53LX_init_and_start_range(
 80028d4:	2203      	movs	r2, #3
 80028d6:	f7ff befd 	b.w	80026d4 <VL53LX_init_and_start_range>

080028da <VL53LX_set_dmax_mode>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 80028da:	7181      	strb	r1, [r0, #6]

	LOG_FUNCTION_END(status);

	return status;
}
 80028dc:	2000      	movs	r0, #0
 80028de:	4770      	bx	lr

080028e0 <VL53LX_get_dmax_calibration_data>:
	VL53LX_LLDriverData_t    *pdev =
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 80028e0:	2901      	cmp	r1, #1
 80028e2:	d00a      	beq.n	80028fa <VL53LX_get_dmax_calibration_data+0x1a>
 80028e4:	2902      	cmp	r1, #2
 80028e6:	d10b      	bne.n	8002900 <VL53LX_get_dmax_calibration_data+0x20>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
 80028e8:	f850 3fae 	ldr.w	r3, [r0, #174]!
			&(pdev->cust_dmax_cal),
			sizeof(VL53LX_dmax_calibration_data_t));
	break;

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	6843      	ldr	r3, [r0, #4]
 80028f0:	6053      	str	r3, [r2, #4]
 80028f2:	8903      	ldrh	r3, [r0, #8]
 80028f4:	8113      	strh	r3, [r2, #8]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80028f6:	2000      	movs	r0, #0
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 80028f8:	4770      	bx	lr
		memcpy(
 80028fa:	f850 3fa4 	ldr.w	r3, [r0, #164]!
 80028fe:	e7f5      	b.n	80028ec <VL53LX_get_dmax_calibration_data+0xc>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8002900:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002904:	4770      	bx	lr

08002906 <VL53LX_get_tuning_parm>:
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8002906:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800290a:	29b9      	cmp	r1, #185	; 0xb9
 800290c:	f200 8472 	bhi.w	80031f4 <VL53LX_get_tuning_parm+0x8ee>
 8002910:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002914:	00bf00ba 	.word	0x00bf00ba
 8002918:	00c900c4 	.word	0x00c900c4
 800291c:	00d300ce 	.word	0x00d300ce
 8002920:	00dd00d8 	.word	0x00dd00d8
 8002924:	00e700e2 	.word	0x00e700e2
 8002928:	00f100ec 	.word	0x00f100ec
 800292c:	00fb00f6 	.word	0x00fb00f6
 8002930:	01050100 	.word	0x01050100
 8002934:	010f010a 	.word	0x010f010a
 8002938:	01190114 	.word	0x01190114
 800293c:	0123011e 	.word	0x0123011e
 8002940:	012d0128 	.word	0x012d0128
 8002944:	01370132 	.word	0x01370132
 8002948:	0141013c 	.word	0x0141013c
 800294c:	014b0146 	.word	0x014b0146
 8002950:	01550150 	.word	0x01550150
 8002954:	015f015a 	.word	0x015f015a
 8002958:	01690164 	.word	0x01690164
 800295c:	0173016e 	.word	0x0173016e
 8002960:	017d0178 	.word	0x017d0178
 8002964:	01870182 	.word	0x01870182
 8002968:	0191018c 	.word	0x0191018c
 800296c:	019b0196 	.word	0x019b0196
 8002970:	01a501a0 	.word	0x01a501a0
 8002974:	01af01aa 	.word	0x01af01aa
 8002978:	01b901b4 	.word	0x01b901b4
 800297c:	01c301be 	.word	0x01c301be
 8002980:	01cd01c8 	.word	0x01cd01c8
 8002984:	01d701d2 	.word	0x01d701d2
 8002988:	01e101dc 	.word	0x01e101dc
 800298c:	01eb01e6 	.word	0x01eb01e6
 8002990:	01f501f0 	.word	0x01f501f0
 8002994:	01ff01fa 	.word	0x01ff01fa
 8002998:	02090204 	.word	0x02090204
 800299c:	0213020e 	.word	0x0213020e
 80029a0:	021d0218 	.word	0x021d0218
 80029a4:	02270222 	.word	0x02270222
 80029a8:	0231022c 	.word	0x0231022c
 80029ac:	023b0236 	.word	0x023b0236
 80029b0:	02450240 	.word	0x02450240
 80029b4:	024f024a 	.word	0x024f024a
 80029b8:	02590254 	.word	0x02590254
 80029bc:	0263025e 	.word	0x0263025e
 80029c0:	026d0268 	.word	0x026d0268
 80029c4:	02770272 	.word	0x02770272
 80029c8:	0281027c 	.word	0x0281027c
 80029cc:	028b0286 	.word	0x028b0286
 80029d0:	02950290 	.word	0x02950290
 80029d4:	029f029a 	.word	0x029f029a
 80029d8:	02a902a4 	.word	0x02a902a4
 80029dc:	02b302ae 	.word	0x02b302ae
 80029e0:	02bd02b8 	.word	0x02bd02b8
 80029e4:	02c702c2 	.word	0x02c702c2
 80029e8:	02d102cc 	.word	0x02d102cc
 80029ec:	02db02d6 	.word	0x02db02d6
 80029f0:	02e502e0 	.word	0x02e502e0
 80029f4:	02ef02ea 	.word	0x02ef02ea
 80029f8:	02f902f4 	.word	0x02f902f4
 80029fc:	030302fe 	.word	0x030302fe
 8002a00:	030e0308 	.word	0x030e0308
 8002a04:	031a0314 	.word	0x031a0314
 8002a08:	03260320 	.word	0x03260320
 8002a0c:	0332032c 	.word	0x0332032c
 8002a10:	033e0338 	.word	0x033e0338
 8002a14:	034a0344 	.word	0x034a0344
 8002a18:	03560350 	.word	0x03560350
 8002a1c:	0362035c 	.word	0x0362035c
 8002a20:	036e0368 	.word	0x036e0368
 8002a24:	037a0374 	.word	0x037a0374
 8002a28:	0384037f 	.word	0x0384037f
 8002a2c:	038e0389 	.word	0x038e0389
 8002a30:	03980393 	.word	0x03980393
 8002a34:	03a3039d 	.word	0x03a3039d
 8002a38:	03ad03a8 	.word	0x03ad03a8
 8002a3c:	03b703b2 	.word	0x03b703b2
 8002a40:	03c103bc 	.word	0x03c103bc
 8002a44:	03cb03c6 	.word	0x03cb03c6
 8002a48:	03d503d0 	.word	0x03d503d0
 8002a4c:	03df03da 	.word	0x03df03da
 8002a50:	03e903e4 	.word	0x03e903e4
 8002a54:	03f303ee 	.word	0x03f303ee
 8002a58:	03fd03f8 	.word	0x03fd03f8
 8002a5c:	04070402 	.word	0x04070402
 8002a60:	0411040c 	.word	0x0411040c
 8002a64:	041b0416 	.word	0x041b0416
 8002a68:	04250420 	.word	0x04250420
 8002a6c:	042f042a 	.word	0x042f042a
 8002a70:	04390434 	.word	0x04390434
 8002a74:	0443043e 	.word	0x0443043e
 8002a78:	044d0448 	.word	0x044d0448
 8002a7c:	04570452 	.word	0x04570452
 8002a80:	0461045c 	.word	0x0461045c
 8002a84:	046b0466 	.word	0x046b0466

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8002a88:	f8b0 3130 	ldrh.w	r3, [r0, #304]	; 0x130
 8002a8c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002a8e:	2000      	movs	r0, #0
	break;
 8002a90:	4770      	bx	lr
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8002a92:	f8b0 3132 	ldrh.w	r3, [r0, #306]	; 0x132
 8002a96:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002a98:	2000      	movs	r0, #0
	break;
 8002a9a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8002a9c:	f8b0 3134 	ldrh.w	r3, [r0, #308]	; 0x134
 8002aa0:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002aa2:	2000      	movs	r0, #0
	break;
 8002aa4:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8002aa6:	f890 324c 	ldrb.w	r3, [r0, #588]	; 0x24c
 8002aaa:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002aac:	2000      	movs	r0, #0
	break;
 8002aae:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8002ab0:	f890 324d 	ldrb.w	r3, [r0, #589]	; 0x24d
 8002ab4:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ab6:	2000      	movs	r0, #0
	break;
 8002ab8:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8002aba:	f890 324e 	ldrb.w	r3, [r0, #590]	; 0x24e
 8002abe:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ac0:	2000      	movs	r0, #0
	break;
 8002ac2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8002ac4:	f890 324f 	ldrb.w	r3, [r0, #591]	; 0x24f
 8002ac8:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002aca:	2000      	movs	r0, #0
	break;
 8002acc:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8002ace:	f890 3250 	ldrb.w	r3, [r0, #592]	; 0x250
 8002ad2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ad4:	2000      	movs	r0, #0
	break;
 8002ad6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8002ad8:	f890 3251 	ldrb.w	r3, [r0, #593]	; 0x251
 8002adc:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ade:	2000      	movs	r0, #0
	break;
 8002ae0:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8002ae2:	f890 3252 	ldrb.w	r3, [r0, #594]	; 0x252
 8002ae6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ae8:	2000      	movs	r0, #0
	break;
 8002aea:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8002aec:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
		*ptuning_parm_value =
 8002af0:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002af2:	2000      	movs	r0, #0
	break;
 8002af4:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8002af6:	f8b0 3254 	ldrh.w	r3, [r0, #596]	; 0x254
 8002afa:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002afc:	2000      	movs	r0, #0
	break;
 8002afe:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8002b00:	f8b0 325c 	ldrh.w	r3, [r0, #604]	; 0x25c
 8002b04:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b06:	2000      	movs	r0, #0
	break;
 8002b08:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8002b0a:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		*ptuning_parm_value =
 8002b0e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b10:	2000      	movs	r0, #0
	break;
 8002b12:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8002b14:	f890 3264 	ldrb.w	r3, [r0, #612]	; 0x264
 8002b18:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b1a:	2000      	movs	r0, #0
	break;
 8002b1c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8002b1e:	f8b0 3266 	ldrh.w	r3, [r0, #614]	; 0x266
 8002b22:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b24:	2000      	movs	r0, #0
	break;
 8002b26:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8002b28:	f8b0 30ba 	ldrh.w	r3, [r0, #186]	; 0xba
 8002b2c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b2e:	2000      	movs	r0, #0
	break;
 8002b30:	4770      	bx	lr
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8002b32:	f890 326e 	ldrb.w	r3, [r0, #622]	; 0x26e
 8002b36:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b38:	2000      	movs	r0, #0
	break;
 8002b3a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8002b3c:	f8b0 3272 	ldrh.w	r3, [r0, #626]	; 0x272
 8002b40:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b42:	2000      	movs	r0, #0
	break;
 8002b44:	4770      	bx	lr
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8002b46:	f890 326f 	ldrb.w	r3, [r0, #623]	; 0x26f
 8002b4a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b4c:	2000      	movs	r0, #0
	break;
 8002b4e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8002b50:	f8b0 3270 	ldrh.w	r3, [r0, #624]	; 0x270
 8002b54:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b56:	2000      	movs	r0, #0
	break;
 8002b58:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8002b5a:	f890 313c 	ldrb.w	r3, [r0, #316]	; 0x13c
 8002b5e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b60:	2000      	movs	r0, #0
	break;
 8002b62:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8002b64:	f890 313d 	ldrb.w	r3, [r0, #317]	; 0x13d
 8002b68:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b6a:	2000      	movs	r0, #0
	break;
 8002b6c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8002b6e:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
 8002b72:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b74:	2000      	movs	r0, #0
	break;
 8002b76:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8002b78:	f890 313f 	ldrb.w	r3, [r0, #319]	; 0x13f
 8002b7c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b7e:	2000      	movs	r0, #0
	break;
 8002b80:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8002b82:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8002b86:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b88:	2000      	movs	r0, #0
	break;
 8002b8a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8002b8c:	f890 3141 	ldrb.w	r3, [r0, #321]	; 0x141
 8002b90:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b92:	2000      	movs	r0, #0
	break;
 8002b94:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
 8002b96:	f9b0 32de 	ldrsh.w	r3, [r0, #734]	; 0x2de
 8002b9a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b9c:	2000      	movs	r0, #0
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
	break;
 8002b9e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
 8002ba0:	f9b0 32e0 	ldrsh.w	r3, [r0, #736]	; 0x2e0
 8002ba4:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ba6:	2000      	movs	r0, #0
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
	break;
 8002ba8:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8002baa:	f8b0 32e4 	ldrh.w	r3, [r0, #740]	; 0x2e4
 8002bae:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002bb0:	2000      	movs	r0, #0
	break;
 8002bb2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8002bb4:	f8b0 328a 	ldrh.w	r3, [r0, #650]	; 0x28a
 8002bb8:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002bba:	2000      	movs	r0, #0
	break;
 8002bbc:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
 8002bbe:	f8b0 32e2 	ldrh.w	r3, [r0, #738]	; 0x2e2
 8002bc2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002bc4:	2000      	movs	r0, #0
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
	break;
 8002bc6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8002bc8:	f890 3288 	ldrb.w	r3, [r0, #648]	; 0x288
 8002bcc:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002bce:	2000      	movs	r0, #0
	break;
 8002bd0:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8002bd2:	f9b0 32d6 	ldrsh.w	r3, [r0, #726]	; 0x2d6
 8002bd6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002bd8:	2000      	movs	r0, #0
	break;
 8002bda:	4770      	bx	lr
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8002bdc:	f890 3142 	ldrb.w	r3, [r0, #322]	; 0x142
 8002be0:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002be2:	2000      	movs	r0, #0
	break;
 8002be4:	4770      	bx	lr
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8002be6:	f890 3143 	ldrb.w	r3, [r0, #323]	; 0x143
 8002bea:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002bec:	2000      	movs	r0, #0
	break;
 8002bee:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8002bf0:	f8b0 3144 	ldrh.w	r3, [r0, #324]	; 0x144
 8002bf4:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002bf6:	2000      	movs	r0, #0
	break;
 8002bf8:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8002bfa:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
 8002bfe:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c00:	2000      	movs	r0, #0
	break;
 8002c02:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8002c04:	f890 3146 	ldrb.w	r3, [r0, #326]	; 0x146
 8002c08:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c0a:	2000      	movs	r0, #0
	break;
 8002c0c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8002c0e:	f8b0 3148 	ldrh.w	r3, [r0, #328]	; 0x148
 8002c12:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c14:	2000      	movs	r0, #0
	break;
 8002c16:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8002c18:	f8b0 314a 	ldrh.w	r3, [r0, #330]	; 0x14a
 8002c1c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c1e:	2000      	movs	r0, #0
	break;
 8002c20:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8002c22:	f8b0 314c 	ldrh.w	r3, [r0, #332]	; 0x14c
 8002c26:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c28:	2000      	movs	r0, #0
	break;
 8002c2a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
 8002c2c:	f8b0 314e 	ldrh.w	r3, [r0, #334]	; 0x14e
 8002c30:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c32:	2000      	movs	r0, #0
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
	break;
 8002c34:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8002c36:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 8002c3a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c3c:	2000      	movs	r0, #0
	break;
 8002c3e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
 8002c40:	f8b0 3152 	ldrh.w	r3, [r0, #338]	; 0x152
 8002c44:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c46:	2000      	movs	r0, #0
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
	break;
 8002c48:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8002c4a:	f890 3154 	ldrb.w	r3, [r0, #340]	; 0x154
 8002c4e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c50:	2000      	movs	r0, #0
	break;
 8002c52:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8002c54:	f890 3155 	ldrb.w	r3, [r0, #341]	; 0x155
 8002c58:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c5a:	2000      	movs	r0, #0
	break;
 8002c5c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8002c5e:	f890 3156 	ldrb.w	r3, [r0, #342]	; 0x156
 8002c62:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c64:	2000      	movs	r0, #0
	break;
 8002c66:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8002c68:	f890 32da 	ldrb.w	r3, [r0, #730]	; 0x2da
 8002c6c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c6e:	2000      	movs	r0, #0
	break;
 8002c70:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8002c72:	f890 3157 	ldrb.w	r3, [r0, #343]	; 0x157
 8002c76:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c78:	2000      	movs	r0, #0
	break;
 8002c7a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8002c7c:	f890 3159 	ldrb.w	r3, [r0, #345]	; 0x159
 8002c80:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c82:	2000      	movs	r0, #0
	break;
 8002c84:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8002c86:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
 8002c8a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c8c:	2000      	movs	r0, #0
	break;
 8002c8e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8002c90:	f9b0 32d8 	ldrsh.w	r3, [r0, #728]	; 0x2d8
 8002c94:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c96:	2000      	movs	r0, #0
	break;
 8002c98:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8002c9a:	f890 3136 	ldrb.w	r3, [r0, #310]	; 0x136
 8002c9e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ca0:	2000      	movs	r0, #0
	break;
 8002ca2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8002ca4:	f890 3137 	ldrb.w	r3, [r0, #311]	; 0x137
 8002ca8:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002caa:	2000      	movs	r0, #0
	break;
 8002cac:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8002cae:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 8002cb2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002cb4:	2000      	movs	r0, #0
	break;
 8002cb6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8002cb8:	f890 3139 	ldrb.w	r3, [r0, #313]	; 0x139
 8002cbc:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002cbe:	2000      	movs	r0, #0
	break;
 8002cc0:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8002cc2:	f890 313a 	ldrb.w	r3, [r0, #314]	; 0x13a
 8002cc6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002cc8:	2000      	movs	r0, #0
	break;
 8002cca:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8002ccc:	f890 313b 	ldrb.w	r3, [r0, #315]	; 0x13b
 8002cd0:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002cd2:	2000      	movs	r0, #0
	break;
 8002cd4:	4770      	bx	lr
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8002cd6:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
 8002cda:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002cdc:	2000      	movs	r0, #0
	break;
 8002cde:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8002ce0:	f890 328c 	ldrb.w	r3, [r0, #652]	; 0x28c
 8002ce4:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ce6:	2000      	movs	r0, #0
	break;
 8002ce8:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8002cea:	f8b0 3298 	ldrh.w	r3, [r0, #664]	; 0x298
 8002cee:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002cf0:	2000      	movs	r0, #0
	break;
 8002cf2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8002cf4:	f8b0 329a 	ldrh.w	r3, [r0, #666]	; 0x29a
 8002cf8:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002cfa:	2000      	movs	r0, #0
	break;
 8002cfc:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8002cfe:	f8b0 329c 	ldrh.w	r3, [r0, #668]	; 0x29c
 8002d02:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d04:	2000      	movs	r0, #0
	break;
 8002d06:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8002d08:	f8b0 329e 	ldrh.w	r3, [r0, #670]	; 0x29e
 8002d0c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d0e:	2000      	movs	r0, #0
	break;
 8002d10:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8002d12:	f8b0 32a0 	ldrh.w	r3, [r0, #672]	; 0x2a0
 8002d16:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d18:	2000      	movs	r0, #0
	break;
 8002d1a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8002d1c:	f890 3318 	ldrb.w	r3, [r0, #792]	; 0x318
 8002d20:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d22:	2000      	movs	r0, #0
	break;
 8002d24:	4770      	bx	lr
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8002d26:	f890 3230 	ldrb.w	r3, [r0, #560]	; 0x230
 8002d2a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d2c:	2000      	movs	r0, #0
	break;
 8002d2e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 8002d30:	f890 3231 	ldrb.w	r3, [r0, #561]	; 0x231
 8002d34:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d36:	2000      	movs	r0, #0
	break;
 8002d38:	4770      	bx	lr
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8002d3a:	f8d0 3234 	ldr.w	r3, [r0, #564]	; 0x234
 8002d3e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d40:	2000      	movs	r0, #0
		(int32_t)pdev->refspadchar.timeout_us;
	break;
 8002d42:	4770      	bx	lr
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8002d44:	f8b0 3238 	ldrh.w	r3, [r0, #568]	; 0x238
 8002d48:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d4a:	2000      	movs	r0, #0
	break;
 8002d4c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8002d4e:	f8b0 323a 	ldrh.w	r3, [r0, #570]	; 0x23a
 8002d52:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d54:	2000      	movs	r0, #0
	break;
 8002d56:	4770      	bx	lr
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8002d58:	f8b0 323c 	ldrh.w	r3, [r0, #572]	; 0x23c
 8002d5c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d5e:	2000      	movs	r0, #0
	break;
 8002d60:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8002d62:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8002d66:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d68:	2000      	movs	r0, #0
	break;
 8002d6a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8002d6c:	f9b0 32ba 	ldrsh.w	r3, [r0, #698]	; 0x2ba
 8002d70:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d72:	2000      	movs	r0, #0
	break;
 8002d74:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8002d76:	f9b0 32bc 	ldrsh.w	r3, [r0, #700]	; 0x2bc
 8002d7a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d7c:	2000      	movs	r0, #0
	break;
 8002d7e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8002d80:	f8b0 32a8 	ldrh.w	r3, [r0, #680]	; 0x2a8
 8002d84:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d86:	2000      	movs	r0, #0
	break;
 8002d88:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8002d8a:	f8d0 32ac 	ldr.w	r3, [r0, #684]	; 0x2ac
 8002d8e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d90:	2000      	movs	r0, #0
		(int32_t)pXC->phasecal_config_timeout_us;
	break;
 8002d92:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8002d94:	f8b0 32be 	ldrh.w	r3, [r0, #702]	; 0x2be
 8002d98:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d9a:	2000      	movs	r0, #0
	break;
 8002d9c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8002d9e:	f8b0 32c0 	ldrh.w	r3, [r0, #704]	; 0x2c0
 8002da2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002da4:	2000      	movs	r0, #0
	break;
 8002da6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
 8002da8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002dac:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002dae:	2000      	movs	r0, #0
		(int32_t)pXC->mm_config_timeout_us;
	break;
 8002db0:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
 8002db2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002db6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002db8:	2000      	movs	r0, #0
		(int32_t)pXC->range_config_timeout_us;
	break;
 8002dba:	4770      	bx	lr
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8002dbc:	f8b0 32e8 	ldrh.w	r3, [r0, #744]	; 0x2e8
 8002dc0:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002dc2:	2000      	movs	r0, #0
	break;
 8002dc4:	4770      	bx	lr
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8002dc6:	f8d0 32ec 	ldr.w	r3, [r0, #748]	; 0x2ec
 8002dca:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002dcc:	2000      	movs	r0, #0
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
	break;
 8002dce:	4770      	bx	lr
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
 8002dd0:	f8d0 32f4 	ldr.w	r3, [r0, #756]	; 0x2f4
 8002dd4:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002dd6:	2000      	movs	r0, #0
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
	break;
 8002dd8:	4770      	bx	lr
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
 8002dda:	f8d0 32f0 	ldr.w	r3, [r0, #752]	; 0x2f0
 8002dde:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002de0:	2000      	movs	r0, #0
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
	break;
 8002de2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8002de4:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002de8:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002dea:	2000      	movs	r0, #0
	break;
 8002dec:	4770      	bx	lr
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8002dee:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
 8002df2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002df4:	2000      	movs	r0, #0
	break;
 8002df6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8002df8:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
 8002dfc:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002dfe:	2000      	movs	r0, #0
	break;
 8002e00:	4770      	bx	lr
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8002e02:	f8b0 32fc 	ldrh.w	r3, [r0, #764]	; 0x2fc
 8002e06:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e08:	2000      	movs	r0, #0
	break;
 8002e0a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8002e0c:	f8d0 3300 	ldr.w	r3, [r0, #768]	; 0x300
 8002e10:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e12:	2000      	movs	r0, #0
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
	break;
 8002e14:	4770      	bx	lr
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
 8002e16:	f8d0 3304 	ldr.w	r3, [r0, #772]	; 0x304
 8002e1a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e1c:	2000      	movs	r0, #0
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
	break;
 8002e1e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8002e20:	f8b0 330c 	ldrh.w	r3, [r0, #780]	; 0x30c
 8002e24:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e26:	2000      	movs	r0, #0
	break;
 8002e28:	4770      	bx	lr
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
 8002e2a:	f8d0 3308 	ldr.w	r3, [r0, #776]	; 0x308
 8002e2e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e30:	2000      	movs	r0, #0
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
	break;
 8002e32:	4770      	bx	lr
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8002e34:	f8b0 330e 	ldrh.w	r3, [r0, #782]	; 0x30e
 8002e38:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e3a:	2000      	movs	r0, #0
	break;
 8002e3c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 8002e3e:	f890 3241 	ldrb.w	r3, [r0, #577]	; 0x241
 8002e42:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e44:	2000      	movs	r0, #0
	break;
 8002e46:	4770      	bx	lr
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8002e48:	f890 3242 	ldrb.w	r3, [r0, #578]	; 0x242
 8002e4c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e4e:	2000      	movs	r0, #0
	break;
 8002e50:	4770      	bx	lr
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8002e52:	f8b0 3248 	ldrh.w	r3, [r0, #584]	; 0x248
 8002e56:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e58:	2000      	movs	r0, #0
	break;
 8002e5a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8002e5c:	f8b0 315c 	ldrh.w	r3, [r0, #348]	; 0x15c
 8002e60:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e62:	2000      	movs	r0, #0
	break;
 8002e64:	4770      	bx	lr
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8002e66:	f8b0 315e 	ldrh.w	r3, [r0, #350]	; 0x15e
 8002e6a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e6c:	2000      	movs	r0, #0
	break;
 8002e6e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8002e70:	f8b0 3160 	ldrh.w	r3, [r0, #352]	; 0x160
 8002e74:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e76:	2000      	movs	r0, #0
	break;
 8002e78:	4770      	bx	lr
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8002e7a:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
 8002e7e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e80:	2000      	movs	r0, #0
	break;
 8002e82:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002e84:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
 8002e88:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e8a:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
	break;
 8002e8c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002e8e:	f8d0 316c 	ldr.w	r3, [r0, #364]	; 0x16c
 8002e92:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e94:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
	break;
 8002e96:	4770      	bx	lr
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002e98:	f8d0 3170 	ldr.w	r3, [r0, #368]	; 0x170
 8002e9c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e9e:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
	break;
 8002ea0:	4770      	bx	lr
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002ea2:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
 8002ea6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ea8:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
	break;
 8002eaa:	4770      	bx	lr
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002eac:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
 8002eb0:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002eb2:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
	break;
 8002eb4:	4770      	bx	lr
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002eb6:	f8d0 317c 	ldr.w	r3, [r0, #380]	; 0x17c
 8002eba:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ebc:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
	break;
 8002ebe:	4770      	bx	lr
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002ec0:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 8002ec4:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ec6:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
	break;
 8002ec8:	4770      	bx	lr
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002eca:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8002ece:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ed0:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
	break;
 8002ed2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002ed4:	f8d0 3188 	ldr.w	r3, [r0, #392]	; 0x188
 8002ed8:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002eda:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
	break;
 8002edc:	4770      	bx	lr
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002ede:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
 8002ee2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ee4:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
	break;
 8002ee6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002ee8:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
 8002eec:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002eee:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
	break;
 8002ef0:	4770      	bx	lr
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002ef2:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8002ef6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ef8:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
	break;
 8002efa:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002efc:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
 8002f00:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f02:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
	break;
 8002f04:	4770      	bx	lr
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002f06:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 8002f0a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f0c:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
	break;
 8002f0e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002f10:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8002f14:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f16:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
	break;
 8002f18:	4770      	bx	lr
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002f1a:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
 8002f1e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f20:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
	break;
 8002f22:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8002f24:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8002f28:	5ac3      	ldrh	r3, [r0, r3]
 8002f2a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f2c:	2000      	movs	r0, #0
	break;
 8002f2e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8002f30:	f241 33d4 	movw	r3, #5076	; 0x13d4
		*ptuning_parm_value =
 8002f34:	58c3      	ldr	r3, [r0, r3]
 8002f36:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f38:	2000      	movs	r0, #0
	break;
 8002f3a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8002f3c:	f241 33d8 	movw	r3, #5080	; 0x13d8
		*ptuning_parm_value =
 8002f40:	58c3      	ldr	r3, [r0, r3]
 8002f42:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f44:	2000      	movs	r0, #0
	break;
 8002f46:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8002f48:	f241 33dc 	movw	r3, #5084	; 0x13dc
 8002f4c:	5cc3      	ldrb	r3, [r0, r3]
 8002f4e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f50:	2000      	movs	r0, #0
	break;
 8002f52:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8002f54:	f500 509f 	add.w	r0, r0, #5088	; 0x13e0
		*ptuning_parm_value =
 8002f58:	6803      	ldr	r3, [r0, #0]
 8002f5a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f5c:	2000      	movs	r0, #0
	break;
 8002f5e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8002f60:	f241 33e4 	movw	r3, #5092	; 0x13e4
		*ptuning_parm_value =
 8002f64:	58c3      	ldr	r3, [r0, r3]
 8002f66:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f68:	2000      	movs	r0, #0
	break;
 8002f6a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8002f6c:	f241 33e8 	movw	r3, #5096	; 0x13e8
		*ptuning_parm_value =
 8002f70:	58c3      	ldr	r3, [r0, r3]
 8002f72:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f74:	2000      	movs	r0, #0
	break;
 8002f76:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8002f78:	f241 33ec 	movw	r3, #5100	; 0x13ec
		*ptuning_parm_value =
 8002f7c:	58c3      	ldr	r3, [r0, r3]
 8002f7e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f80:	2000      	movs	r0, #0
	break;
 8002f82:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8002f84:	f241 33f4 	movw	r3, #5108	; 0x13f4
 8002f88:	5cc3      	ldrb	r3, [r0, r3]
 8002f8a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f8c:	2000      	movs	r0, #0
	break;
 8002f8e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8002f90:	f241 33f6 	movw	r3, #5110	; 0x13f6
 8002f94:	5ec3      	ldrsh	r3, [r0, r3]
 8002f96:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f98:	2000      	movs	r0, #0
	break;
 8002f9a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8002f9c:	f241 33f8 	movw	r3, #5112	; 0x13f8
 8002fa0:	5ec3      	ldrsh	r3, [r0, r3]
 8002fa2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002fa4:	2000      	movs	r0, #0
	break;
 8002fa6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8002fa8:	f241 33fa 	movw	r3, #5114	; 0x13fa
 8002fac:	5cc3      	ldrb	r3, [r0, r3]
 8002fae:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002fb0:	2000      	movs	r0, #0
	break;
 8002fb2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8002fb4:	f241 33ce 	movw	r3, #5070	; 0x13ce
 8002fb8:	5cc3      	ldrb	r3, [r0, r3]
 8002fba:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002fbc:	2000      	movs	r0, #0
	break;
 8002fbe:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8002fc0:	f241 33f0 	movw	r3, #5104	; 0x13f0
		*ptuning_parm_value = (int32_t)(
 8002fc4:	58c3      	ldr	r3, [r0, r3]
 8002fc6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002fc8:	2000      	movs	r0, #0
	break;
 8002fca:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8002fcc:	f241 33fc 	movw	r3, #5116	; 0x13fc
		*ptuning_parm_value =
 8002fd0:	58c3      	ldr	r3, [r0, r3]
 8002fd2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002fd4:	2000      	movs	r0, #0
	break;
 8002fd6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8002fd8:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
		*ptuning_parm_value =
 8002fdc:	6803      	ldr	r3, [r0, #0]
 8002fde:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002fe0:	2000      	movs	r0, #0
	break;
 8002fe2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8002fe4:	f241 4304 	movw	r3, #5124	; 0x1404
		*ptuning_parm_value =
 8002fe8:	58c3      	ldr	r3, [r0, r3]
 8002fea:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002fec:	2000      	movs	r0, #0
	break;
 8002fee:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8002ff0:	f241 4308 	movw	r3, #5128	; 0x1408
 8002ff4:	5ac3      	ldrh	r3, [r0, r3]
 8002ff6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ff8:	2000      	movs	r0, #0
	break;
 8002ffa:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8002ffc:	f241 4328 	movw	r3, #5160	; 0x1428
 8003000:	5cc3      	ldrb	r3, [r0, r3]
 8003002:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003004:	2000      	movs	r0, #0
	break;
 8003006:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003008:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
 800300c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800300e:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
	break;
 8003010:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003012:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
 8003016:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003018:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
	break;
 800301a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 800301c:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
 8003020:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003022:	2000      	movs	r0, #0
	break;
 8003024:	4770      	bx	lr
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
 8003026:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
 800302a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800302c:	2000      	movs	r0, #0
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
	break;
 800302e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8003030:	f890 31b4 	ldrb.w	r3, [r0, #436]	; 0x1b4
 8003034:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003036:	2000      	movs	r0, #0
	break;
 8003038:	4770      	bx	lr
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
 800303a:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
 800303e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003040:	2000      	movs	r0, #0
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
	break;
 8003042:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8003044:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
 8003048:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800304a:	2000      	movs	r0, #0
	break;
 800304c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 800304e:	f241 430c 	movw	r3, #5132	; 0x140c
		*ptuning_parm_value =
 8003052:	58c3      	ldr	r3, [r0, r3]
 8003054:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003056:	2000      	movs	r0, #0
	break;
 8003058:	4770      	bx	lr

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 800305a:	f890 31bd 	ldrb.w	r3, [r0, #445]	; 0x1bd
 800305e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003060:	2000      	movs	r0, #0
	break;
 8003062:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8003064:	f9b0 31be 	ldrsh.w	r3, [r0, #446]	; 0x1be
 8003068:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800306a:	2000      	movs	r0, #0
	break;
 800306c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 800306e:	f9b0 31c0 	ldrsh.w	r3, [r0, #448]	; 0x1c0
 8003072:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003074:	2000      	movs	r0, #0
	break;
 8003076:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8003078:	f9b0 31c2 	ldrsh.w	r3, [r0, #450]	; 0x1c2
 800307c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800307e:	2000      	movs	r0, #0
	break;
 8003080:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8003082:	f9b0 31c4 	ldrsh.w	r3, [r0, #452]	; 0x1c4
 8003086:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003088:	2000      	movs	r0, #0
	break;
 800308a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 800308c:	f9b0 31c6 	ldrsh.w	r3, [r0, #454]	; 0x1c6
 8003090:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003092:	2000      	movs	r0, #0
	break;
 8003094:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8003096:	f9b0 31c8 	ldrsh.w	r3, [r0, #456]	; 0x1c8
 800309a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800309c:	2000      	movs	r0, #0
	break;
 800309e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 80030a0:	f9b0 31ca 	ldrsh.w	r3, [r0, #458]	; 0x1ca
 80030a4:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030a6:	2000      	movs	r0, #0
	break;
 80030a8:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 80030aa:	f9b0 31cc 	ldrsh.w	r3, [r0, #460]	; 0x1cc
 80030ae:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030b0:	2000      	movs	r0, #0
	break;
 80030b2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 80030b4:	f9b0 31ce 	ldrsh.w	r3, [r0, #462]	; 0x1ce
 80030b8:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030ba:	2000      	movs	r0, #0
	break;
 80030bc:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 80030be:	f9b0 31d0 	ldrsh.w	r3, [r0, #464]	; 0x1d0
 80030c2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030c4:	2000      	movs	r0, #0
	break;
 80030c6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 80030c8:	f9b0 31d2 	ldrsh.w	r3, [r0, #466]	; 0x1d2
 80030cc:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030ce:	2000      	movs	r0, #0
	break;
 80030d0:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 80030d2:	f9b0 31d4 	ldrsh.w	r3, [r0, #468]	; 0x1d4
 80030d6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030d8:	2000      	movs	r0, #0
	break;
 80030da:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 80030dc:	f9b0 31d6 	ldrsh.w	r3, [r0, #470]	; 0x1d6
 80030e0:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030e2:	2000      	movs	r0, #0
	break;
 80030e4:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 80030e6:	f9b0 31d8 	ldrsh.w	r3, [r0, #472]	; 0x1d8
 80030ea:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030ec:	2000      	movs	r0, #0
	break;
 80030ee:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 80030f0:	f9b0 31da 	ldrsh.w	r3, [r0, #474]	; 0x1da
 80030f4:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030f6:	2000      	movs	r0, #0
	break;
 80030f8:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 80030fa:	f9b0 31dc 	ldrsh.w	r3, [r0, #476]	; 0x1dc
 80030fe:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003100:	2000      	movs	r0, #0
	break;
 8003102:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8003104:	f9b0 31de 	ldrsh.w	r3, [r0, #478]	; 0x1de
 8003108:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800310a:	2000      	movs	r0, #0
	break;
 800310c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 800310e:	f9b0 31e0 	ldrsh.w	r3, [r0, #480]	; 0x1e0
 8003112:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003114:	2000      	movs	r0, #0
	break;
 8003116:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8003118:	f9b0 31e2 	ldrsh.w	r3, [r0, #482]	; 0x1e2
 800311c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800311e:	2000      	movs	r0, #0
	break;
 8003120:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8003122:	f9b0 31e4 	ldrsh.w	r3, [r0, #484]	; 0x1e4
 8003126:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003128:	2000      	movs	r0, #0
	break;
 800312a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 800312c:	f9b0 31e6 	ldrsh.w	r3, [r0, #486]	; 0x1e6
 8003130:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003132:	2000      	movs	r0, #0
	break;
 8003134:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8003136:	f9b0 31e8 	ldrsh.w	r3, [r0, #488]	; 0x1e8
 800313a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800313c:	2000      	movs	r0, #0
	break;
 800313e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8003140:	f9b0 31ea 	ldrsh.w	r3, [r0, #490]	; 0x1ea
 8003144:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003146:	2000      	movs	r0, #0
	break;
 8003148:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 800314a:	f9b0 31ec 	ldrsh.w	r3, [r0, #492]	; 0x1ec
 800314e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003150:	2000      	movs	r0, #0
	break;
 8003152:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8003154:	f9b0 31ee 	ldrsh.w	r3, [r0, #494]	; 0x1ee
 8003158:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800315a:	2000      	movs	r0, #0
	break;
 800315c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 800315e:	f9b0 31f0 	ldrsh.w	r3, [r0, #496]	; 0x1f0
 8003162:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003164:	2000      	movs	r0, #0
	break;
 8003166:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8003168:	f9b0 31f2 	ldrsh.w	r3, [r0, #498]	; 0x1f2
 800316c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800316e:	2000      	movs	r0, #0
	break;
 8003170:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 8003172:	f9b0 31f4 	ldrsh.w	r3, [r0, #500]	; 0x1f4
 8003176:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003178:	2000      	movs	r0, #0
	break;
 800317a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 800317c:	f9b0 31f6 	ldrsh.w	r3, [r0, #502]	; 0x1f6
 8003180:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003182:	2000      	movs	r0, #0
	break;
 8003184:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8003186:	f9b0 31f8 	ldrsh.w	r3, [r0, #504]	; 0x1f8
 800318a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800318c:	2000      	movs	r0, #0
	break;
 800318e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8003190:	f9b0 31fa 	ldrsh.w	r3, [r0, #506]	; 0x1fa
 8003194:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003196:	2000      	movs	r0, #0
	break;
 8003198:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 800319a:	f9b0 31fc 	ldrsh.w	r3, [r0, #508]	; 0x1fc
 800319e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80031a0:	2000      	movs	r0, #0
	break;
 80031a2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 80031a4:	f9b0 31fe 	ldrsh.w	r3, [r0, #510]	; 0x1fe
 80031a8:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80031aa:	2000      	movs	r0, #0
	break;
 80031ac:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 80031ae:	f9b0 3200 	ldrsh.w	r3, [r0, #512]	; 0x200
 80031b2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80031b4:	2000      	movs	r0, #0
	break;
 80031b6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 80031b8:	f9b0 3202 	ldrsh.w	r3, [r0, #514]	; 0x202
 80031bc:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80031be:	2000      	movs	r0, #0
	break;
 80031c0:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 80031c2:	f9b0 3204 	ldrsh.w	r3, [r0, #516]	; 0x204
 80031c6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80031c8:	2000      	movs	r0, #0
	break;
 80031ca:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 80031cc:	f9b0 3206 	ldrsh.w	r3, [r0, #518]	; 0x206
 80031d0:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80031d2:	2000      	movs	r0, #0
	break;
 80031d4:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 80031d6:	f9b0 3208 	ldrsh.w	r3, [r0, #520]	; 0x208
 80031da:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80031dc:	2000      	movs	r0, #0
	break;
 80031de:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 80031e0:	f9b0 320a 	ldrsh.w	r3, [r0, #522]	; 0x20a
 80031e4:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80031e6:	2000      	movs	r0, #0
	break;
 80031e8:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 80031ea:	f9b0 320c 	ldrsh.w	r3, [r0, #524]	; 0x20c
 80031ee:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80031f0:	2000      	movs	r0, #0
	break;
 80031f2:	4770      	bx	lr

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80031f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80031f8:	6013      	str	r3, [r2, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 80031fa:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80031fe:	4770      	bx	lr

08003200 <VL53LX_load_patch>:
{
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	b0c2      	sub	sp, #264	; 0x108
	int32_t patch_tuning = 0;
 8003204:	2200      	movs	r2, #0
		status = VL53LX_WrByte(Dev,
 8003206:	2185      	movs	r1, #133	; 0x85
{
 8003208:	4605      	mov	r5, r0
	int32_t patch_tuning = 0;
 800320a:	9201      	str	r2, [sp, #4]
		status = VL53LX_WrByte(Dev,
 800320c:	f7fe f996 	bl	800153c <VL53LX_WrByte>
	if (status == VL53LX_ERROR_NONE)
 8003210:	4604      	mov	r4, r0
 8003212:	b910      	cbnz	r0, 800321a <VL53LX_load_patch+0x1a>
		VL53LX_enable_powerforce(Dev);
 8003214:	4628      	mov	r0, r5
 8003216:	f001 fb41 	bl	800489c <VL53LX_enable_powerforce>
	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 800321a:	aa01      	add	r2, sp, #4
 800321c:	f248 018c 	movw	r1, #32908	; 0x808c
 8003220:	4628      	mov	r0, r5
 8003222:	f7ff fb70 	bl	8002906 <VL53LX_get_tuning_parm>
 8003226:	9b01      	ldr	r3, [sp, #4]
 8003228:	3b01      	subs	r3, #1
 800322a:	2b02      	cmp	r3, #2
 800322c:	bf9b      	ittet	ls
 800322e:	4a27      	ldrls	r2, [pc, #156]	; (80032cc <VL53LX_load_patch+0xcc>)
 8003230:	189b      	addls	r3, r3, r2
	switch (patch_tuning) {
 8003232:	2300      	movhi	r3, #0
 8003234:	799b      	ldrbls	r3, [r3, #6]
	if (status == VL53LX_ERROR_NONE) {
 8003236:	2c00      	cmp	r4, #0
 8003238:	d144      	bne.n	80032c4 <VL53LX_load_patch+0xc4>
		comms_buffer[0] = 0x29;
 800323a:	4a25      	ldr	r2, [pc, #148]	; (80032d0 <VL53LX_load_patch+0xd0>)
 800323c:	9202      	str	r2, [sp, #8]
		comms_buffer[3] = 0x40;
 800323e:	2228      	movs	r2, #40	; 0x28
 8003240:	f88d 200c 	strb.w	r2, [sp, #12]
		comms_buffer[5] = patch_power;
 8003244:	f88d 300d 	strb.w	r3, [sp, #13]
		status = VL53LX_WriteMulti(Dev,
 8003248:	aa02      	add	r2, sp, #8
 800324a:	2306      	movs	r3, #6
 800324c:	f240 4176 	movw	r1, #1142	; 0x476
 8003250:	4628      	mov	r0, r5
 8003252:	f7fe f93b 	bl	80014cc <VL53LX_WriteMulti>
	if (status == VL53LX_ERROR_NONE) {
 8003256:	4604      	mov	r4, r0
 8003258:	bba0      	cbnz	r0, 80032c4 <VL53LX_load_patch+0xc4>
		comms_buffer[0] = 0x03;
 800325a:	4b1e      	ldr	r3, [pc, #120]	; (80032d4 <VL53LX_load_patch+0xd4>)
 800325c:	9302      	str	r3, [sp, #8]
		comms_buffer[3] = 0x6F;
 800325e:	f642 1307 	movw	r3, #10503	; 0x2907
 8003262:	f8ad 300c 	strh.w	r3, [sp, #12]
		status = VL53LX_WriteMulti(Dev,
 8003266:	aa02      	add	r2, sp, #8
 8003268:	2306      	movs	r3, #6
 800326a:	f240 4196 	movw	r1, #1174	; 0x496
 800326e:	4628      	mov	r0, r5
 8003270:	f7fe f92c 	bl	80014cc <VL53LX_WriteMulti>
	if (status == VL53LX_ERROR_NONE) {
 8003274:	4604      	mov	r4, r0
 8003276:	bb28      	cbnz	r0, 80032c4 <VL53LX_load_patch+0xc4>
		comms_buffer[0] = 0x00;
 8003278:	f44f 66e0 	mov.w	r6, #1792	; 0x700
		status = VL53LX_WriteMulti(Dev,
 800327c:	2302      	movs	r3, #2
 800327e:	aa02      	add	r2, sp, #8
 8003280:	f240 4172 	movw	r1, #1138	; 0x472
 8003284:	4628      	mov	r0, r5
		comms_buffer[0] = 0x00;
 8003286:	f8ad 6008 	strh.w	r6, [sp, #8]
		status = VL53LX_WriteMulti(Dev,
 800328a:	f7fe f91f 	bl	80014cc <VL53LX_WriteMulti>
	if (status == VL53LX_ERROR_NONE) {
 800328e:	4604      	mov	r4, r0
 8003290:	b9c0      	cbnz	r0, 80032c4 <VL53LX_load_patch+0xc4>
		status = VL53LX_WriteMulti(Dev,
 8003292:	2302      	movs	r3, #2
 8003294:	aa02      	add	r2, sp, #8
 8003296:	f240 4174 	movw	r1, #1140	; 0x474
 800329a:	4628      	mov	r0, r5
		comms_buffer[0] = 0x00;
 800329c:	f8ad 6008 	strh.w	r6, [sp, #8]
		status = VL53LX_WriteMulti(Dev,
 80032a0:	f7fe f914 	bl	80014cc <VL53LX_WriteMulti>
	if (status == VL53LX_ERROR_NONE)
 80032a4:	4604      	mov	r4, r0
 80032a6:	b968      	cbnz	r0, 80032c4 <VL53LX_load_patch+0xc4>
		status = VL53LX_WrByte(Dev,
 80032a8:	2201      	movs	r2, #1
 80032aa:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80032ae:	4628      	mov	r0, r5
 80032b0:	f7fe f944 	bl	800153c <VL53LX_WrByte>
	if (status == VL53LX_ERROR_NONE)
 80032b4:	4604      	mov	r4, r0
 80032b6:	b928      	cbnz	r0, 80032c4 <VL53LX_load_patch+0xc4>
		status = VL53LX_WrByte(Dev,
 80032b8:	2201      	movs	r2, #1
 80032ba:	2185      	movs	r1, #133	; 0x85
 80032bc:	4628      	mov	r0, r5
 80032be:	f7fe f93d 	bl	800153c <VL53LX_WrByte>
 80032c2:	4604      	mov	r4, r0
}
 80032c4:	4620      	mov	r0, r4
 80032c6:	b042      	add	sp, #264	; 0x108
 80032c8:	bd70      	pop	{r4, r5, r6, pc}
 80032ca:	bf00      	nop
 80032cc:	0800c1bd 	.word	0x0800c1bd
 80032d0:	400ec929 	.word	0x400ec929
 80032d4:	6f036d03 	.word	0x6f036d03

080032d8 <VL53LX_get_histogram_bin_data>:
{
 80032d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032dc:	b0cb      	sub	sp, #300	; 0x12c
	int32_t    hist_merge				= 0;
 80032de:	2300      	movs	r3, #0
{
 80032e0:	460d      	mov	r5, r1
		status = VL53LX_ReadMulti(
 80032e2:	aa0a      	add	r2, sp, #40	; 0x28
	int32_t    hist_merge				= 0;
 80032e4:	9307      	str	r3, [sp, #28]
		status = VL53LX_ReadMulti(
 80032e6:	2188      	movs	r1, #136	; 0x88
 80032e8:	2353      	movs	r3, #83	; 0x53
{
 80032ea:	4604      	mov	r4, r0
		status = VL53LX_ReadMulti(
 80032ec:	f7fe f90e 	bl	800150c <VL53LX_ReadMulti>
	pdata->result__interrupt_status               = *(pbuffer +   0);
 80032f0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80032f4:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 80032f8:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 80032fc:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8003300:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8003304:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8003308:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800330c:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
		status = VL53LX_ReadMulti(
 8003310:	9004      	str	r0, [sp, #16]
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 8003312:	a90b      	add	r1, sp, #44	; 0x2c
 8003314:	2002      	movs	r0, #2
 8003316:	f001 fa6e 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800331a:	f10d 0176 	add.w	r1, sp, #118	; 0x76
	pdata->result__dss_actual_effective_spads =
 800331e:	f8a5 007c 	strh.w	r0, [r5, #124]	; 0x7c
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8003322:	2002      	movs	r0, #2
 8003324:	f001 fa67 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8003328:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 800332c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
	pdev->dbg_results.phasecal_result__reference_phase =
 8003330:	f241 3394 	movw	r3, #5012	; 0x1394
	pdata->phasecal_result__reference_phase =
 8003334:	f8a5 007e 	strh.w	r0, [r5, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8003338:	52e0      	strh	r0, [r4, r3]
	pdev->dbg_results.phasecal_result__vcsel_start =
 800333a:	f241 3396 	movw	r3, #5014	; 0x1396
			pdata->phasecal_result__vcsel_start;
 800333e:	f895 2080 	ldrb.w	r2, [r5, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8003342:	54e2      	strb	r2, [r4, r3]
	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8003344:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8003348:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 800334c:	f105 0718 	add.w	r7, r5, #24
 8003350:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8003354:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
 8003358:	f105 0978 	add.w	r9, r5, #120	; 0x78
 800335c:	46b8      	mov	r8, r7
	pbuffer = &buffer[i2c_buffer_offset_bytes];
 800335e:	f10d 062e 	add.w	r6, sp, #46	; 0x2e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8003362:	4631      	mov	r1, r6
 8003364:	2003      	movs	r0, #3
 8003366:	f001 fa70 	bl	800484a <VL53LX_i2c_decode_uint32_t>
		pdata->bin_data[bin] =
 800336a:	f848 0b04 	str.w	r0, [r8], #4
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 800336e:	45c8      	cmp	r8, r9
		pbuffer += 3;
 8003370:	f106 0603 	add.w	r6, r6, #3
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8003374:	d1f5      	bne.n	8003362 <VL53LX_get_histogram_bin_data+0x8a>
	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 8003376:	aa07      	add	r2, sp, #28
 8003378:	f248 018d 	movw	r1, #32909	; 0x808d
 800337c:	4620      	mov	r0, r4
 800337e:	f7ff fac2 	bl	8002906 <VL53LX_get_tuning_parm>
	if (pdata->result__stream_count == 0) {
 8003382:	f895 607b 	ldrb.w	r6, [r5, #123]	; 0x7b
 8003386:	b956      	cbnz	r6, 800339e <VL53LX_get_histogram_bin_data+0xc6>
		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8003388:	f504 50e2 	add.w	r0, r4, #7232	; 0x1c40
 800338c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8003390:	4631      	mov	r1, r6
 8003392:	3008      	adds	r0, #8
 8003394:	f006 fadd 	bl	8009952 <memset>
		pdev->bin_rec_pos = 0;
 8003398:	f641 4344 	movw	r3, #7236	; 0x1c44
 800339c:	52e6      	strh	r6, [r4, r3]
	if (hist_merge == 1)
 800339e:	9b07      	ldr	r3, [sp, #28]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	f040 80f3 	bne.w	800358c <VL53LX_get_histogram_bin_data+0x2b4>
	int32_t    TuningBinRecSize		    = 0;
 80033a6:	2300      	movs	r3, #0
	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 80033a8:	aa08      	add	r2, sp, #32
 80033aa:	f248 018f 	movw	r1, #32911	; 0x808f
 80033ae:	4620      	mov	r0, r4
	int32_t    rmt  = 0;
 80033b0:	e9cd 3308 	strd	r3, r3, [sp, #32]
	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 80033b4:	f7ff faa7 	bl	8002906 <VL53LX_get_tuning_parm>
	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 80033b8:	aa09      	add	r2, sp, #36	; 0x24
 80033ba:	f248 018e 	movw	r1, #32910	; 0x808e
 80033be:	4620      	mov	r0, r4
 80033c0:	f7ff faa1 	bl	8002906 <VL53LX_get_tuning_parm>
	if (pdev->pos_before_next_recom == 0) {
 80033c4:	f641 4345 	movw	r3, #7237	; 0x1c45
 80033c8:	5ce2      	ldrb	r2, [r4, r3]
 80033ca:	2a00      	cmp	r2, #0
 80033cc:	f040 815f 	bne.w	800368e <VL53LX_get_histogram_bin_data+0x3b6>
		timing = 1 - pdata->result__stream_count % 2;
 80033d0:	f895 607b 	ldrb.w	r6, [r5, #123]	; 0x7b
 80033d4:	f006 0301 	and.w	r3, r6, #1
 80033d8:	9300      	str	r3, [sp, #0]
		if (pdev->bin_rec_pos > 0)
 80033da:	f641 4344 	movw	r3, #7236	; 0x1c44
 80033de:	43f6      	mvns	r6, r6
 80033e0:	5ce3      	ldrb	r3, [r4, r3]
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	9b08      	ldr	r3, [sp, #32]
 80033e6:	9302      	str	r3, [sp, #8]
 80033e8:	9b01      	ldr	r3, [sp, #4]
 80033ea:	f006 0601 	and.w	r6, r6, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 808a 	beq.w	8003508 <VL53LX_get_histogram_bin_data+0x230>
			prev_pos = (TuningBinRecSize - 1);
 80033f4:	1e59      	subs	r1, r3, #1
 80033f6:	b2c9      	uxtb	r1, r1
		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 80033f8:	23c0      	movs	r3, #192	; 0xc0
 80033fa:	2060      	movs	r0, #96	; 0x60
 80033fc:	434b      	muls	r3, r1
 80033fe:	fb00 3306 	mla	r3, r0, r6, r3
 8003402:	4423      	add	r3, r4
 8003404:	f641 4c58 	movw	ip, #7256	; 0x1c58
 8003408:	f853 300c 	ldr.w	r3, [r3, ip]
 800340c:	2b00      	cmp	r3, #0
 800340e:	f340 808b 	ble.w	8003528 <VL53LX_get_histogram_bin_data+0x250>
 8003412:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003416:	00b3      	lsls	r3, r6, #2
 8003418:	0189      	lsls	r1, r1, #6
 800341a:	fa1f fc83 	uxth.w	ip, r3
 800341e:	fb10 1106 	smlabb	r1, r0, r6, r1
		HighIndex = BuffSize - timing * 4;
 8003422:	f1c3 0318 	rsb	r3, r3, #24
 8003426:	1861      	adds	r1, r4, r1
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003428:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
	total_rate_cur = 0;
 800342c:	2000      	movs	r0, #0
 800342e:	9103      	str	r1, [sp, #12]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003430:	9305      	str	r3, [sp, #20]
 8003432:	4661      	mov	r1, ip
	total_rate_pre = 0;
 8003434:	4686      	mov	lr, r0
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8003436:	f641 4a48 	movw	sl, #7240	; 0x1c48
	for (bin = timing * 4; bin < HighIndex; bin++) {
 800343a:	9b05      	ldr	r3, [sp, #20]
 800343c:	fa1f f981 	uxth.w	r9, r1
 8003440:	454b      	cmp	r3, r9
 8003442:	d863      	bhi.n	800350c <VL53LX_get_histogram_bin_data+0x234>
 8003444:	01b3      	lsls	r3, r6, #6
 8003446:	1b9b      	subs	r3, r3, r6
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	3318      	adds	r3, #24
 800344c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8003450:	9305      	str	r3, [sp, #20]
	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8003452:	f1be 0f00 	cmp.w	lr, #0
 8003456:	d067      	beq.n	8003528 <VL53LX_get_histogram_bin_data+0x250>
 8003458:	2800      	cmp	r0, #0
 800345a:	d067      	beq.n	800352c <VL53LX_get_histogram_bin_data+0x254>
 800345c:	eb05 038c 	add.w	r3, r5, ip, lsl #2
 8003460:	f103 0b14 	add.w	fp, r3, #20
		diff_histo_stddev = 0;
 8003464:	2100      	movs	r1, #0
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8003466:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 800346a:	f641 4348 	movw	r3, #7240	; 0x1c48
 800346e:	eb03 098c 	add.w	r9, r3, ip, lsl #2
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8003472:	9b03      	ldr	r3, [sp, #12]
 8003474:	f853 3009 	ldr.w	r3, [r3, r9]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8003478:	f85b 9f04 	ldr.w	r9, [fp, #4]!
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 800347c:	fb0a f303 	mul.w	r3, sl, r3
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8003480:	fb0a f909 	mul.w	r9, sl, r9
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8003484:	fb93 f3fe 	sdiv	r3, r3, lr
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8003488:	fb99 f9f0 	sdiv	r9, r9, r0
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 800348c:	eba3 0309 	sub.w	r3, r3, r9
 8003490:	fb03 1103 	mla	r1, r3, r3, r1
 8003494:	f10c 0c01 	add.w	ip, ip, #1
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003498:	9b05      	ldr	r3, [sp, #20]
 800349a:	fa1f f98c 	uxth.w	r9, ip
 800349e:	454b      	cmp	r3, r9
 80034a0:	d8e3      	bhi.n	800346a <VL53LX_get_histogram_bin_data+0x192>
		if (diff_histo_stddev >= rmt) {
 80034a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034a4:	428b      	cmp	r3, r1
 80034a6:	f641 4048 	movw	r0, #7240	; 0x1c48
 80034aa:	dc43      	bgt.n	8003534 <VL53LX_get_histogram_bin_data+0x25c>
			memset(pdev->multi_bins_rec, 0,
 80034ac:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80034b0:	2100      	movs	r1, #0
 80034b2:	4420      	add	r0, r4
 80034b4:	f006 fa4d 	bl	8009952 <memset>
			pdev->bin_rec_pos = 0;
 80034b8:	f641 4344 	movw	r3, #7236	; 0x1c44
 80034bc:	2200      	movs	r2, #0
 80034be:	54e2      	strb	r2, [r4, r3]
			if (timing == 0)
 80034c0:	9a00      	ldr	r2, [sp, #0]
 80034c2:	f641 4345 	movw	r3, #7237	; 0x1c45
 80034c6:	b39a      	cbz	r2, 8003530 <VL53LX_get_histogram_bin_data+0x258>
				pdev->pos_before_next_recom =
 80034c8:	2206      	movs	r2, #6
				pdev->pos_before_next_recom =
 80034ca:	54e2      	strb	r2, [r4, r3]
			recom_been_reset = 1;
 80034cc:	2201      	movs	r2, #1
		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 80034ce:	f641 4144 	movw	r1, #7236	; 0x1c44
 80034d2:	9802      	ldr	r0, [sp, #8]
 80034d4:	5c63      	ldrb	r3, [r4, r1]
 80034d6:	3801      	subs	r0, #1
 80034d8:	4283      	cmp	r3, r0
 80034da:	d13c      	bne.n	8003556 <VL53LX_get_histogram_bin_data+0x27e>
 80034dc:	9b00      	ldr	r3, [sp, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f040 80e2 	bne.w	80036a8 <VL53LX_get_histogram_bin_data+0x3d0>
			pdev->bin_rec_pos++;
 80034e4:	5463      	strb	r3, [r4, r1]
			 (pdev->pos_before_next_recom == 0)) {
 80034e6:	f641 4345 	movw	r3, #7237	; 0x1c45
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 80034ea:	5ce3      	ldrb	r3, [r4, r3]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d14d      	bne.n	800358c <VL53LX_get_histogram_bin_data+0x2b4>
 80034f0:	463a      	mov	r2, r7
				pdata->bin_data[bin] = 0;
 80034f2:	f842 3b04 	str.w	r3, [r2], #4
			for (bin = 0; bin < BuffSize; bin++)
 80034f6:	4542      	cmp	r2, r8
 80034f8:	d1fb      	bne.n	80034f2 <VL53LX_get_histogram_bin_data+0x21a>
					(pdev->multi_bins_rec[i][timing][bin]);
 80034fa:	2318      	movs	r3, #24
			for (bin = 0; bin < BuffSize; bin++)
 80034fc:	2200      	movs	r2, #0
					(pdev->multi_bins_rec[i][timing][bin]);
 80034fe:	435e      	muls	r6, r3
 8003500:	f04f 0c30 	mov.w	ip, #48	; 0x30
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8003504:	2000      	movs	r0, #0
 8003506:	e036      	b.n	8003576 <VL53LX_get_histogram_bin_data+0x29e>
			prev_pos = (TuningBinRecSize - 1);
 8003508:	9b02      	ldr	r3, [sp, #8]
 800350a:	e773      	b.n	80033f4 <VL53LX_get_histogram_bin_data+0x11c>
 800350c:	ea4f 0981 	mov.w	r9, r1, lsl #2
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8003510:	eb09 0b0a 	add.w	fp, r9, sl
		total_rate_pre +=
 8003514:	9b03      	ldr	r3, [sp, #12]
		total_rate_cur += pdata->bin_data[bin];
 8003516:	44a9      	add	r9, r5
		total_rate_pre +=
 8003518:	f853 b00b 	ldr.w	fp, [r3, fp]
		total_rate_cur += pdata->bin_data[bin];
 800351c:	f8d9 9018 	ldr.w	r9, [r9, #24]
		total_rate_pre +=
 8003520:	44de      	add	lr, fp
		total_rate_cur += pdata->bin_data[bin];
 8003522:	4448      	add	r0, r9
 8003524:	3101      	adds	r1, #1
 8003526:	e788      	b.n	800343a <VL53LX_get_histogram_bin_data+0x162>
		diff_histo_stddev = 0;
 8003528:	2100      	movs	r1, #0
 800352a:	e7ba      	b.n	80034a2 <VL53LX_get_histogram_bin_data+0x1ca>
 800352c:	4601      	mov	r1, r0
 800352e:	e7b8      	b.n	80034a2 <VL53LX_get_histogram_bin_data+0x1ca>
				pdev->pos_before_next_recom =
 8003530:	2207      	movs	r2, #7
 8003532:	e7ca      	b.n	80034ca <VL53LX_get_histogram_bin_data+0x1f2>
 8003534:	9901      	ldr	r1, [sp, #4]
 8003536:	23c0      	movs	r3, #192	; 0xc0
 8003538:	fb13 0001 	smlabb	r0, r3, r1, r0
 800353c:	2360      	movs	r3, #96	; 0x60
 800353e:	fb13 0306 	smlabb	r3, r3, r6, r0
 8003542:	3b04      	subs	r3, #4
 8003544:	4423      	add	r3, r4
		if (diff_histo_stddev >= rmt) {
 8003546:	4639      	mov	r1, r7
					pdata->bin_data[i];
 8003548:	f851 0b04 	ldr.w	r0, [r1], #4
				pdev->multi_bins_rec[pos][timing][i] =
 800354c:	f843 0f04 	str.w	r0, [r3, #4]!
			for (i = 0; i < BuffSize; i++)
 8003550:	4541      	cmp	r1, r8
 8003552:	d1f9      	bne.n	8003548 <VL53LX_get_histogram_bin_data+0x270>
 8003554:	e7bb      	b.n	80034ce <VL53LX_get_histogram_bin_data+0x1f6>
		else if (timing == 1)
 8003556:	9800      	ldr	r0, [sp, #0]
 8003558:	2800      	cmp	r0, #0
 800355a:	f040 80a5 	bne.w	80036a8 <VL53LX_get_histogram_bin_data+0x3d0>
			pdev->bin_rec_pos++;
 800355e:	3301      	adds	r3, #1
 8003560:	e7c0      	b.n	80034e4 <VL53LX_get_histogram_bin_data+0x20c>
					(pdev->multi_bins_rec[i][timing][bin]);
 8003562:	fb0c 6303 	mla	r3, ip, r3, r6
 8003566:	4413      	add	r3, r2
 8003568:	f203 7312 	addw	r3, r3, #1810	; 0x712
					pdata->bin_data[bin] +=
 800356c:	6839      	ldr	r1, [r7, #0]
 800356e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003572:	4419      	add	r1, r3
 8003574:	6039      	str	r1, [r7, #0]
				for (i = 0; i < TuningBinRecSize; i++)
 8003576:	9902      	ldr	r1, [sp, #8]
 8003578:	b2c3      	uxtb	r3, r0
 800357a:	428b      	cmp	r3, r1
 800357c:	f100 0001 	add.w	r0, r0, #1
 8003580:	dbef      	blt.n	8003562 <VL53LX_get_histogram_bin_data+0x28a>
 8003582:	3201      	adds	r2, #1
			for (bin = 0; bin < BuffSize; bin++)
 8003584:	2a18      	cmp	r2, #24
 8003586:	f107 0704 	add.w	r7, r7, #4
 800358a:	d1bb      	bne.n	8003504 <VL53LX_get_histogram_bin_data+0x22c>
	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 800358c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003590:	70ab      	strb	r3, [r5, #2]
	pdata->VL53LX_p_019               = 0;
 8003592:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003596:	812b      	strh	r3, [r5, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8003598:	2318      	movs	r3, #24
 800359a:	72ab      	strb	r3, [r5, #10]
	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 800359c:	f894 3359 	ldrb.w	r3, [r4, #857]	; 0x359
 80035a0:	f885 3081 	strb.w	r3, [r5, #129]	; 0x81
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 80035a4:	f894 235c 	ldrb.w	r2, [r4, #860]	; 0x35c
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 80035a8:	f894 3346 	ldrb.w	r3, [r4, #838]	; 0x346
	pdata->vcsel_width +=
 80035ac:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80035b0:	f8a5 3082 	strh.w	r3, [r5, #130]	; 0x82
	pdata->VL53LX_p_015 =
 80035b4:	f8b4 3316 	ldrh.w	r3, [r4, #790]	; 0x316
 80035b8:	f8a5 3086 	strh.w	r3, [r5, #134]	; 0x86
	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 80035bc:	4629      	mov	r1, r5
 80035be:	4620      	mov	r0, r4
 80035c0:	f001 fa6a 	bl	8004a98 <VL53LX_hist_get_bin_sequence_config>
	if (pdev->ll_state.rd_timing_status == 0) {
 80035c4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d163      	bne.n	8003694 <VL53LX_get_histogram_bin_data+0x3bc>
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 80035cc:	f894 3370 	ldrb.w	r3, [r4, #880]	; 0x370
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 80035d0:	f894 0371 	ldrb.w	r0, [r4, #881]	; 0x371
		encoded_timeout =
 80035d4:	eb00 2003 	add.w	r0, r0, r3, lsl #8
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 80035d8:	f894 3372 	ldrb.w	r3, [r4, #882]	; 0x372
		encoded_timeout =
 80035dc:	b280      	uxth	r0, r0
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 80035de:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
	pdata->number_of_ambient_bins  = 0;
 80035e2:	2300      	movs	r3, #0
 80035e4:	72eb      	strb	r3, [r5, #11]
 80035e6:	f105 0112 	add.w	r1, r5, #18
 80035ea:	f105 030c 	add.w	r3, r5, #12
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 80035ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035f2:	f002 0207 	and.w	r2, r2, #7
 80035f6:	2a07      	cmp	r2, #7
					pdata->number_of_ambient_bins + 0x04;
 80035f8:	bf02      	ittt	eq
 80035fa:	7aea      	ldrbeq	r2, [r5, #11]
 80035fc:	3204      	addeq	r2, #4
			pdata->number_of_ambient_bins  =
 80035fe:	72ea      	strbeq	r2, [r5, #11]
	for (i = 0; i < 6; i++) {
 8003600:	4299      	cmp	r1, r3
 8003602:	d1f4      	bne.n	80035ee <VL53LX_get_histogram_bin_data+0x316>
		VL53LX_decode_timeout(encoded_timeout);
 8003604:	f001 f9ad 	bl	8004962 <VL53LX_decode_timeout>
	pdata->total_periods_elapsed =
 8003608:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
	pll_period_us =
 800360c:	f8b5 0086 	ldrh.w	r0, [r5, #134]	; 0x86
 8003610:	f002 fbc2 	bl	8005d98 <VL53LX_calc_pll_period_us>
	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8003614:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
		VL53LX_duration_maths(
 8003618:	f8b5 1082 	ldrh.w	r1, [r5, #130]	; 0x82
 800361c:	3301      	adds	r3, #1
 800361e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003622:	f002 fbbf 	bl	8005da4 <VL53LX_duration_maths>
	pdata->woi_duration_us     = 0;
 8003626:	2600      	movs	r6, #0
	pdata->peak_duration_us =
 8003628:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
	pdata->woi_duration_us     = 0;
 800362c:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
	VL53LX_hist_calc_zero_distance_phase(pdata);
 8003630:	4628      	mov	r0, r5
 8003632:	f002 fc04 	bl	8005e3e <VL53LX_hist_calc_zero_distance_phase>
	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 8003636:	4628      	mov	r0, r5
 8003638:	f002 fdb4 	bl	80061a4 <VL53LX_hist_estimate_ambient_from_ambient_bins>
	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 800363c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8003640:	702b      	strb	r3, [r5, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8003642:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8003646:	706b      	strb	r3, [r5, #1]
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8003648:	f504 5403 	add.w	r4, r4, #8384	; 0x20c0
	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 800364c:	78ab      	ldrb	r3, [r5, #2]
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 800364e:	3420      	adds	r4, #32
 8003650:	220a      	movs	r2, #10
 8003652:	fb02 4303 	mla	r3, r2, r3, r4
	pdata->roi_config__user_roi_centre_spad =
 8003656:	f893 21aa 	ldrb.w	r2, [r3, #426]	; 0x1aa
 800365a:	f885 20a8 	strb.w	r2, [r5, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
 800365e:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8003662:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8003666:	7426      	strb	r6, [r4, #16]
 8003668:	f895 3079 	ldrb.w	r3, [r5, #121]	; 0x79
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	2b11      	cmp	r3, #17
 8003672:	d808      	bhi.n	8003686 <VL53LX_get_histogram_bin_data+0x3ae>
 8003674:	2201      	movs	r2, #1
 8003676:	490e      	ldr	r1, [pc, #56]	; (80036b0 <VL53LX_get_histogram_bin_data+0x3d8>)
 8003678:	409a      	lsls	r2, r3
 800367a:	420a      	tst	r2, r1
 800367c:	d003      	beq.n	8003686 <VL53LX_get_histogram_bin_data+0x3ae>
		presults->device_status = (pdata->result__range_status &
 800367e:	7423      	strb	r3, [r4, #16]
		status = VL53LX_ERROR_RANGE_ERROR;
 8003680:	f06f 0305 	mvn.w	r3, #5
 8003684:	9304      	str	r3, [sp, #16]
}
 8003686:	9804      	ldr	r0, [sp, #16]
 8003688:	b04b      	add	sp, #300	; 0x12c
 800368a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pdev->pos_before_next_recom--;
 800368e:	3a01      	subs	r2, #1
 8003690:	54e2      	strb	r2, [r4, r3]
 8003692:	e77b      	b.n	800358c <VL53LX_get_histogram_bin_data+0x2b4>
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8003694:	f894 3373 	ldrb.w	r3, [r4, #883]	; 0x373
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8003698:	f894 0374 	ldrb.w	r0, [r4, #884]	; 0x374
		encoded_timeout =
 800369c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80036a0:	b280      	uxth	r0, r0
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 80036a2:	f894 3375 	ldrb.w	r3, [r4, #885]	; 0x375
 80036a6:	e79a      	b.n	80035de <VL53LX_get_histogram_bin_data+0x306>
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 80036a8:	2a01      	cmp	r2, #1
 80036aa:	f47f af1c 	bne.w	80034e6 <VL53LX_get_histogram_bin_data+0x20e>
 80036ae:	e76d      	b.n	800358c <VL53LX_get_histogram_bin_data+0x2b4>
 80036b0:	0002200e 	.word	0x0002200e

080036b4 <VL53LX_get_device_results>:
{
 80036b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((pdev->sys_ctrl.system__mode_start &
 80036b8:	f890 339c 	ldrb.w	r3, [r0, #924]	; 0x39c
{
 80036bc:	b08d      	sub	sp, #52	; 0x34
	VL53LX_range_results_t   *presults =
 80036be:	f500 5603 	add.w	r6, r0, #8384	; 0x20c0
	if ((pdev->sys_ctrl.system__mode_start &
 80036c2:	079b      	lsls	r3, r3, #30
{
 80036c4:	4604      	mov	r4, r0
 80036c6:	9207      	str	r2, [sp, #28]
	VL53LX_range_results_t   *presults =
 80036c8:	f106 0620 	add.w	r6, r6, #32
	if ((pdev->sys_ctrl.system__mode_start &
 80036cc:	f140 81ea 	bpl.w	8003aa4 <VL53LX_get_device_results+0x3f0>
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 80036d0:	f500 787f 	add.w	r8, r0, #1020	; 0x3fc
		status = VL53LX_get_histogram_bin_data(
 80036d4:	4641      	mov	r1, r8
 80036d6:	f7ff fdff 	bl	80032d8 <VL53LX_get_histogram_bin_data>
		if (status == VL53LX_ERROR_NONE &&
 80036da:	4605      	mov	r5, r0
 80036dc:	2800      	cmp	r0, #0
 80036de:	d172      	bne.n	80037c6 <VL53LX_get_device_results+0x112>
 80036e0:	f894 3407 	ldrb.w	r3, [r4, #1031]	; 0x407
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d061      	beq.n	80037ac <VL53LX_get_device_results+0xf8>
		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80036e8:	f10d 0923 	add.w	r9, sp, #35	; 0x23
 80036ec:	4649      	mov	r1, r9
 80036ee:	4620      	mov	r0, r4
 80036f0:	f002 f909 	bl	8005906 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 80036f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80b1 	beq.w	8003860 <VL53LX_get_device_results+0x1ac>
		if (pdev->tuning_parms.tp_hist_merge == 1)
 80036fe:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
 8003702:	2b01      	cmp	r3, #1
 8003704:	d10b      	bne.n	800371e <VL53LX_get_device_results+0x6a>
		idx = histo_merge_nb - 1;
 8003706:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800370a:	3b01      	subs	r3, #1
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 800370c:	f504 5293 	add.w	r2, r4, #4704	; 0x1260
 8003710:	b2db      	uxtb	r3, r3
 8003712:	3214      	adds	r2, #20
 8003714:	3302      	adds	r3, #2
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8003716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800371a:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
		pHP->gain_factor =
 800371e:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
 8003722:	f8a4 326a 	strh.w	r3, [r4, #618]	; 0x26a
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 8003726:	f9b4 12d6 	ldrsh.w	r1, [r4, #726]	; 0x2d6
 800372a:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800372e:	f001 f8fe 	bl	800492e <VL53LX_calc_crosstalk_plane_offset_with_margin>
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8003732:	f8b4 32c8 	ldrh.w	r3, [r4, #712]	; 0x2c8
 8003736:	f8a4 327c 	strh.w	r3, [r4, #636]	; 0x27c
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800373a:	f8b4 32ca 	ldrh.w	r3, [r4, #714]	; 0x2ca
 800373e:	f8a4 327e 	strh.w	r3, [r4, #638]	; 0x27e
		pdev->dmax_cfg.ambient_thresh_sigma =
 8003742:	f894 3252 	ldrb.w	r3, [r4, #594]	; 0x252
 8003746:	f884 328d 	strb.w	r3, [r4, #653]	; 0x28d
		pdev->dmax_cfg.min_ambient_thresh_events =
 800374a:	f8d4 3258 	ldr.w	r3, [r4, #600]	; 0x258
 800374e:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
		pdev->dmax_cfg.signal_total_events_limit =
 8003752:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
 8003756:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 800375a:	f8b4 3336 	ldrh.w	r3, [r4, #822]	; 0x336
 800375e:	f8a4 32a4 	strh.w	r3, [r4, #676]	; 0x2a4
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8003762:	f894 3369 	ldrb.w	r3, [r4, #873]	; 0x369
 8003766:	f884 32a6 	strb.w	r3, [r4, #678]	; 0x2a6
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 800376a:	f8b4 32e0 	ldrh.w	r3, [r4, #736]	; 0x2e0
 800376e:	f8a4 3282 	strh.w	r3, [r4, #642]	; 0x282
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8003772:	f8b4 32de 	ldrh.w	r3, [r4, #734]	; 0x2de
 8003776:	f8a4 3280 	strh.w	r3, [r4, #640]	; 0x280
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 800377a:	f8b4 32e2 	ldrh.w	r3, [r4, #738]	; 0x2e2
 800377e:	f8a4 3284 	strh.w	r3, [r4, #644]	; 0x284
		VL53LX_copy_rtn_good_spads_to_buffer(
 8003782:	f504 7504 	add.w	r5, r4, #528	; 0x210
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8003786:	f8b4 32e4 	ldrh.w	r3, [r4, #740]	; 0x2e4
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 800378a:	f8c4 0278 	str.w	r0, [r4, #632]	; 0x278
		pHP->algo__crosstalk_detect_max_sigma_mm =
 800378e:	f8a4 3286 	strh.w	r3, [r4, #646]	; 0x286
		VL53LX_copy_rtn_good_spads_to_buffer(
 8003792:	4629      	mov	r1, r5
 8003794:	f204 30ca 	addw	r0, r4, #970	; 0x3ca
 8003798:	f000 ff08 	bl	80045ac <VL53LX_copy_rtn_good_spads_to_buffer>
		switch (pdev->offset_correction_mode) {
 800379c:	7963      	ldrb	r3, [r4, #5]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d062      	beq.n	8003868 <VL53LX_get_device_results+0x1b4>
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	f000 811c 	beq.w	80039e0 <VL53LX_get_device_results+0x32c>
			pHP->range_offset_mm = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e138      	b.n	8003a1e <VL53LX_get_device_results+0x36a>
			status = VL53LX_hist_copy_and_scale_ambient_info(
 80037ac:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 80037b0:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 80037b4:	f500 501d 	add.w	r0, r0, #10048	; 0x2740
 80037b8:	4641      	mov	r1, r8
 80037ba:	302c      	adds	r0, #44	; 0x2c
 80037bc:	f001 f920 	bl	8004a00 <VL53LX_hist_copy_and_scale_ambient_info>
		if (status != VL53LX_ERROR_NONE)
 80037c0:	4605      	mov	r5, r0
 80037c2:	2800      	cmp	r0, #0
 80037c4:	d090      	beq.n	80036e8 <VL53LX_get_device_results+0x34>
		if (pzone_cfg->active_zones > 0) {
 80037c6:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 80037ca:	b1eb      	cbz	r3, 8003808 <VL53LX_get_device_results+0x154>
			if (pstate->rd_device_state !=
 80037cc:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 80037d0:	2b06      	cmp	r3, #6
 80037d2:	d005      	beq.n	80037e0 <VL53LX_get_device_results+0x12c>
				if (status == VL53LX_ERROR_NONE) {
 80037d4:	b925      	cbnz	r5, 80037e0 <VL53LX_get_device_results+0x12c>
					status = VL53LX_dynamic_zone_update(
 80037d6:	4631      	mov	r1, r6
 80037d8:	4620      	mov	r0, r4
 80037da:	f001 fdaa 	bl	8005332 <VL53LX_dynamic_zone_update>
 80037de:	4605      	mov	r5, r0
 80037e0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80037e4:	f013 0f01 	tst.w	r3, #1
 80037e8:	bf14      	ite	ne
 80037ea:	2103      	movne	r1, #3
 80037ec:	2101      	moveq	r1, #1
 80037ee:	f504 738f 	add.w	r3, r4, #286	; 0x11e
 80037f2:	f504 7297 	add.w	r2, r4, #302	; 0x12e
				pzone_cfg->bin_config[i] =
 80037f6:	f803 1b01 	strb.w	r1, [r3], #1
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d1fb      	bne.n	80037f6 <VL53LX_get_device_results+0x142>
			if (status == VL53LX_ERROR_NONE)
 80037fe:	b945      	cbnz	r5, 8003812 <VL53LX_get_device_results+0x15e>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8003800:	4620      	mov	r0, r4
 8003802:	f001 fdc0 	bl	8005386 <VL53LX_multizone_hist_bins_update>
 8003806:	4605      	mov	r5, r0
		if (status == VL53LX_ERROR_NONE)
 8003808:	b91d      	cbnz	r5, 8003812 <VL53LX_get_device_results+0x15e>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 800380a:	4620      	mov	r0, r4
 800380c:	f002 f97a 	bl	8005b04 <VL53LX_dynamic_xtalk_correction_corrector>
 8003810:	4605      	mov	r5, r0
		if (pdev->tuning_parms.tp_hist_merge == 1)
 8003812:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
 8003816:	2b01      	cmp	r3, #1
 8003818:	d105      	bne.n	8003826 <VL53LX_get_device_results+0x172>
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 800381a:	f504 5393 	add.w	r3, r4, #4704	; 0x1260
 800381e:	3314      	adds	r3, #20
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8003826:	f242 03e0 	movw	r3, #8416	; 0x20e0
 800382a:	f894 702c 	ldrb.w	r7, [r4, #44]	; 0x2c
 800382e:	54e7      	strb	r7, [r4, r3]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8003830:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
 8003834:	7070      	strb	r0, [r6, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8003836:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800383a:	70b3      	strb	r3, [r6, #2]
	if (status == VL53LX_ERROR_NONE) {
 800383c:	2d00      	cmp	r5, #0
 800383e:	f000 8162 	beq.w	8003b06 <VL53LX_get_device_results+0x452>
	memcpy(
 8003842:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8003846:	4631      	mov	r1, r6
 8003848:	9807      	ldr	r0, [sp, #28]
 800384a:	f006 f877 	bl	800993c <memcpy>
	if (status == VL53LX_ERROR_NONE)
 800384e:	b91d      	cbnz	r5, 8003858 <VL53LX_get_device_results+0x1a4>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 8003850:	4620      	mov	r0, r4
 8003852:	f000 fe5c 	bl	800450e <VL53LX_check_ll_driver_rd_state>
 8003856:	4605      	mov	r5, r0
}
 8003858:	4628      	mov	r0, r5
 800385a:	b00d      	add	sp, #52	; 0x34
 800385c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			histo_merge_nb = 1;
 8003860:	2301      	movs	r3, #1
 8003862:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8003866:	e74a      	b.n	80036fe <VL53LX_get_device_results+0x4a>
			VL53LX_hist_combine_mm1_mm2_offsets(
 8003868:	f504 771a 	add.w	r7, r4, #616	; 0x268
 800386c:	9705      	str	r7, [sp, #20]
 800386e:	f894 7369 	ldrb.w	r7, [r4, #873]	; 0x369
 8003872:	f894 33fb 	ldrb.w	r3, [r4, #1019]	; 0x3fb
 8003876:	f894 23fa 	ldrb.w	r2, [r4, #1018]	; 0x3fa
 800387a:	f9b4 105e 	ldrsh.w	r1, [r4, #94]	; 0x5e
 800387e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8003882:	e9cd 5703 	strd	r5, r7, [sp, #12]
 8003886:	f104 079c 	add.w	r7, r4, #156	; 0x9c
 800388a:	9702      	str	r7, [sp, #8]
 800388c:	f894 74a5 	ldrb.w	r7, [r4, #1189]	; 0x4a5
 8003890:	9701      	str	r7, [sp, #4]
 8003892:	f894 74a4 	ldrb.w	r7, [r4, #1188]	; 0x4a4
 8003896:	9700      	str	r7, [sp, #0]
 8003898:	f001 fc8c 	bl	80051b4 <VL53LX_hist_combine_mm1_mm2_offsets>
		VL53LX_calc_max_effective_spads(
 800389c:	f204 22a2 	addw	r2, r4, #674	; 0x2a2
 80038a0:	f894 3369 	ldrb.w	r3, [r4, #873]	; 0x369
 80038a4:	f894 14a5 	ldrb.w	r1, [r4, #1189]	; 0x4a5
 80038a8:	f894 04a4 	ldrb.w	r0, [r4, #1188]	; 0x4a4
 80038ac:	9200      	str	r2, [sp, #0]
 80038ae:	462a      	mov	r2, r5
 80038b0:	f001 fbaf 	bl	8005012 <VL53LX_calc_max_effective_spads>
		status =
 80038b4:	aa09      	add	r2, sp, #36	; 0x24
 80038b6:	79a1      	ldrb	r1, [r4, #6]
 80038b8:	4620      	mov	r0, r4
 80038ba:	f7ff f811 	bl	80028e0 <VL53LX_get_dmax_calibration_data>
		if (status != VL53LX_ERROR_NONE)
 80038be:	4605      	mov	r5, r0
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d180      	bne.n	80037c6 <VL53LX_get_device_results+0x112>
				pdev->wArea2,
 80038c4:	f504 53d1 	add.w	r3, r4, #6688	; 0x1a20
 80038c8:	3318      	adds	r3, #24
		status = VL53LX_ipp_hist_process_data(
 80038ca:	9303      	str	r3, [sp, #12]
				pdev->wArea1,
 80038cc:	f504 53a1 	add.w	r3, r4, #5152	; 0x1420
 80038d0:	3318      	adds	r3, #24
		status = VL53LX_ipp_hist_process_data(
 80038d2:	9302      	str	r3, [sp, #8]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80038d4:	f504 7713 	add.w	r7, r4, #588	; 0x24c
		status = VL53LX_ipp_hist_process_data(
 80038d8:	f204 5354 	addw	r3, r4, #1364	; 0x554
 80038dc:	e9cd 8300 	strd	r8, r3, [sp]
 80038e0:	e9cd 9604 	strd	r9, r6, [sp, #16]
 80038e4:	463b      	mov	r3, r7
 80038e6:	f504 7223 	add.w	r2, r4, #652	; 0x28c
 80038ea:	a909      	add	r1, sp, #36	; 0x24
 80038ec:	4620      	mov	r0, r4
 80038ee:	f7fd fec9 	bl	8001684 <VL53LX_ipp_hist_process_data>
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80038f2:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
 80038f6:	2b01      	cmp	r3, #1
		status = VL53LX_ipp_hist_process_data(
 80038f8:	4605      	mov	r5, r0
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80038fa:	f000 809b 	beq.w	8003a34 <VL53LX_get_device_results+0x380>
		if (status != VL53LX_ERROR_NONE)
 80038fe:	2d00      	cmp	r5, #0
 8003900:	f47f af61 	bne.w	80037c6 <VL53LX_get_device_results+0x112>
		status = VL53LX_hist_wrap_dmax(
 8003904:	f106 020e 	add.w	r2, r6, #14
 8003908:	4641      	mov	r1, r8
 800390a:	4638      	mov	r0, r7
 800390c:	f001 fb19 	bl	8004f42 <VL53LX_hist_wrap_dmax>
		if (status != VL53LX_ERROR_NONE)
 8003910:	4605      	mov	r5, r0
 8003912:	2800      	cmp	r0, #0
 8003914:	f47f af57 	bne.w	80037c6 <VL53LX_get_device_results+0x112>
		zid = pdev->ll_state.rd_zone_id;
 8003918:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
		status = VL53LX_hist_phase_consistency_check(
 800391c:	2304      	movs	r3, #4
 800391e:	f504 571d 	add.w	r7, r4, #10048	; 0x2740
 8003922:	f04f 0944 	mov.w	r9, #68	; 0x44
 8003926:	f44f 7b12 	mov.w	fp, #584	; 0x248
 800392a:	f04f 0a10 	mov.w	sl, #16
 800392e:	fb19 b201 	smlabb	r2, r9, r1, fp
 8003932:	3728      	adds	r7, #40	; 0x28
 8003934:	fb1a 3101 	smlabb	r1, sl, r1, r3
 8003938:	4432      	add	r2, r6
 800393a:	4633      	mov	r3, r6
 800393c:	4439      	add	r1, r7
 800393e:	4620      	mov	r0, r4
 8003940:	f001 fa53 	bl	8004dea <VL53LX_hist_phase_consistency_check>
		if (status != VL53LX_ERROR_NONE)
 8003944:	4605      	mov	r5, r0
 8003946:	2800      	cmp	r0, #0
 8003948:	f47f af3d 	bne.w	80037c6 <VL53LX_get_device_results+0x112>
		zid = pdev->ll_state.rd_zone_id;
 800394c:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
		status = VL53LX_hist_xmonitor_consistency_check(
 8003950:	2304      	movs	r3, #4
 8003952:	fb19 b201 	smlabb	r2, r9, r1, fp
 8003956:	fb1a 3101 	smlabb	r1, sl, r1, r3
 800395a:	4432      	add	r2, r6
 800395c:	f506 73a2 	add.w	r3, r6, #324	; 0x144
 8003960:	4439      	add	r1, r7
 8003962:	4620      	mov	r0, r4
 8003964:	f001 fac1 	bl	8004eea <VL53LX_hist_xmonitor_consistency_check>
		if (status != VL53LX_ERROR_NONE)
 8003968:	4605      	mov	r5, r0
 800396a:	2800      	cmp	r0, #0
 800396c:	f47f af2b 	bne.w	80037c6 <VL53LX_get_device_results+0x112>
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8003970:	f242 7268 	movw	r2, #10088	; 0x2768
		zid = pdev->ll_state.rd_zone_id;
 8003974:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8003978:	f804 a002 	strb.w	sl, [r4, r2]
				pdev->zone_cfg.active_zones+1;
 800397c:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
 8003980:	3201      	adds	r2, #1
		pZH->active_zones =
 8003982:	707a      	strb	r2, [r7, #1]
		pHD->zone_id       = zid;
 8003984:	f884 33fe 	strb.w	r3, [r4, #1022]	; 0x3fe
		if (zid <
 8003988:	f896 2244 	ldrb.w	r2, [r6, #580]	; 0x244
 800398c:	429a      	cmp	r2, r3
 800398e:	d91d      	bls.n	80039cc <VL53LX_get_device_results+0x318>
 8003990:	eb04 1203 	add.w	r2, r4, r3, lsl #4
			phist_info->rd_device_state =
 8003994:	f242 716c 	movw	r1, #10092	; 0x276c
 8003998:	f894 03fd 	ldrb.w	r0, [r4, #1021]	; 0x3fd
 800399c:	5450      	strb	r0, [r2, r1]
			phist_info->number_of_ambient_bins =
 800399e:	f242 716d 	movw	r1, #10093	; 0x276d
 80039a2:	f894 0407 	ldrb.w	r0, [r4, #1031]	; 0x407
 80039a6:	5450      	strb	r0, [r2, r1]
			phist_info->result__dss_actual_effective_spads =
 80039a8:	f242 716e 	movw	r1, #10094	; 0x276e
 80039ac:	f8b4 0478 	ldrh.w	r0, [r4, #1144]	; 0x478
 80039b0:	5250      	strh	r0, [r2, r1]
			phist_info->total_periods_elapsed =
 80039b2:	eb07 1703 	add.w	r7, r7, r3, lsl #4
			phist_info->VL53LX_p_005 =
 80039b6:	f242 7170 	movw	r1, #10096	; 0x2770
 80039ba:	f894 0480 	ldrb.w	r0, [r4, #1152]	; 0x480
			phist_info->total_periods_elapsed =
 80039be:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
			phist_info->VL53LX_p_005 =
 80039c2:	5450      	strb	r0, [r2, r1]
			phist_info->total_periods_elapsed =
 80039c4:	60fb      	str	r3, [r7, #12]
			phist_info->ambient_events_sum =
 80039c6:	f8d4 349c 	ldr.w	r3, [r4, #1180]	; 0x49c
 80039ca:	613b      	str	r3, [r7, #16]
		VL53LX_hist_copy_results_to_sys_and_core(
 80039cc:	f504 539b 	add.w	r3, r4, #4960	; 0x1360
 80039d0:	3310      	adds	r3, #16
 80039d2:	f204 329e 	addw	r2, r4, #926	; 0x39e
 80039d6:	4631      	mov	r1, r6
 80039d8:	4640      	mov	r0, r8
 80039da:	f001 fc41 	bl	8005260 <VL53LX_hist_copy_results_to_sys_and_core>
 80039de:	e6f2      	b.n	80037c6 <VL53LX_get_device_results+0x112>
	switch (pdev->preset_mode) {
 80039e0:	7863      	ldrb	r3, [r4, #1]
 80039e2:	2b1e      	cmp	r3, #30
 80039e4:	d01e      	beq.n	8003a24 <VL53LX_get_device_results+0x370>
 80039e6:	2b21      	cmp	r3, #33	; 0x21
 80039e8:	d008      	beq.n	80039fc <VL53LX_get_device_results+0x348>
 80039ea:	2b1b      	cmp	r3, #27
 80039ec:	d120      	bne.n	8003a30 <VL53LX_get_device_results+0x37c>
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 80039ee:	f504 53e2 	add.w	r3, r4, #7232	; 0x1c40
 80039f2:	f9b3 2000 	ldrsh.w	r2, [r3]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 80039f6:	f641 4342 	movw	r3, #7234	; 0x1c42
 80039fa:	e004      	b.n	8003a06 <VL53LX_get_device_results+0x352>
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 80039fc:	f641 4338 	movw	r3, #7224	; 0x1c38
 8003a00:	5ee2      	ldrsh	r2, [r4, r3]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8003a02:	f641 433a 	movw	r3, #7226	; 0x1c3a
		*poffset = (isc & 0x01) ? tA : tB;
 8003a06:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003a0a:	5ee3      	ldrsh	r3, [r4, r3]
		*poffset = (isc & 0x01) ? tA : tB;
 8003a0c:	f011 0f01 	tst.w	r1, #1
 8003a10:	bf18      	it	ne
 8003a12:	4613      	movne	r3, r2
		*poffset = 0;
 8003a14:	f8a4 3268 	strh.w	r3, [r4, #616]	; 0x268
			pHP->range_offset_mm *= 4;
 8003a18:	f8b4 3268 	ldrh.w	r3, [r4, #616]	; 0x268
 8003a1c:	009b      	lsls	r3, r3, #2
			pHP->range_offset_mm = 0;
 8003a1e:	f8a4 3268 	strh.w	r3, [r4, #616]	; 0x268
		break;
 8003a22:	e73b      	b.n	800389c <VL53LX_get_device_results+0x1e8>
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8003a24:	f641 433c 	movw	r3, #7228	; 0x1c3c
 8003a28:	5ee2      	ldrsh	r2, [r4, r3]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8003a2a:	f641 433e 	movw	r3, #7230	; 0x1c3e
 8003a2e:	e7ea      	b.n	8003a06 <VL53LX_get_device_results+0x352>
		*poffset = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	e7ef      	b.n	8003a14 <VL53LX_get_device_results+0x360>
			(histo_merge_nb > 1))
 8003a34:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8003a38:	2a01      	cmp	r2, #1
 8003a3a:	f67f af60 	bls.w	80038fe <VL53LX_get_device_results+0x24a>
 8003a3e:	f504 5304 	add.w	r3, r4, #8448	; 0x2100
 8003a42:	f504 5109 	add.w	r1, r4, #8768	; 0x2240
 8003a46:	3318      	adds	r3, #24
 8003a48:	3108      	adds	r1, #8
			pdata->VL53LX_p_016 /= histo_merge_nb;
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	fbb0 f0f2 	udiv	r0, r0, r2
 8003a50:	334c      	adds	r3, #76	; 0x4c
 8003a52:	f843 0c4c 	str.w	r0, [r3, #-76]
			pdata->VL53LX_p_017 /= histo_merge_nb;
 8003a56:	f853 0c48 	ldr.w	r0, [r3, #-72]
 8003a5a:	fbb0 f0f2 	udiv	r0, r0, r2
 8003a5e:	f843 0c48 	str.w	r0, [r3, #-72]
			pdata->VL53LX_p_010 /= histo_merge_nb;
 8003a62:	f853 0c44 	ldr.w	r0, [r3, #-68]
 8003a66:	fb90 f0f2 	sdiv	r0, r0, r2
 8003a6a:	f843 0c44 	str.w	r0, [r3, #-68]
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8003a6e:	f833 0c40 	ldrh.w	r0, [r3, #-64]
 8003a72:	fb90 f0f2 	sdiv	r0, r0, r2
 8003a76:	f823 0c40 	strh.w	r0, [r3, #-64]
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 8003a7a:	f833 0c3e 	ldrh.w	r0, [r3, #-62]
 8003a7e:	fb90 f0f2 	sdiv	r0, r0, r2
 8003a82:	f823 0c3e 	strh.w	r0, [r3, #-62]
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8003a86:	f833 0c3c 	ldrh.w	r0, [r3, #-60]
 8003a8a:	fb90 f0f2 	sdiv	r0, r0, r2
 8003a8e:	f823 0c3c 	strh.w	r0, [r3, #-60]
			pdata->VL53LX_p_009 /= histo_merge_nb;
 8003a92:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8003a96:	fbb0 f0f2 	udiv	r0, r0, r2
 8003a9a:	f843 0c38 	str.w	r0, [r3, #-56]
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8003a9e:	4299      	cmp	r1, r3
 8003aa0:	d1d3      	bne.n	8003a4a <VL53LX_get_device_results+0x396>
 8003aa2:	e72c      	b.n	80038fe <VL53LX_get_device_results+0x24a>
			status = VL53LX_get_measurement_results(
 8003aa4:	f7fe fd00 	bl	80024a8 <VL53LX_get_measurement_results>
		if (status == VL53LX_ERROR_NONE)
 8003aa8:	4605      	mov	r5, r0
 8003aaa:	b948      	cbnz	r0, 8003ac0 <VL53LX_get_device_results+0x40c>
			VL53LX_copy_sys_and_core_results_to_range_results(
 8003aac:	f504 529b 	add.w	r2, r4, #4960	; 0x1360
 8003ab0:	4633      	mov	r3, r6
 8003ab2:	3210      	adds	r2, #16
 8003ab4:	f204 319e 	addw	r1, r4, #926	; 0x39e
 8003ab8:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
 8003abc:	f7fe fd24 	bl	8002508 <VL53LX_copy_sys_and_core_results_to_range_results>
		if (pL->is_low_power_auto_mode == 1) {
 8003ac0:	f504 57a1 	add.w	r7, r4, #5152	; 0x1420
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	f897 8001 	ldrb.w	r8, [r7, #1]
 8003aca:	f1b8 0f01 	cmp.w	r8, #1
 8003ace:	f47f aeaa 	bne.w	8003826 <VL53LX_get_device_results+0x172>
			if ((status == VL53LX_ERROR_NONE) &&
 8003ad2:	b93d      	cbnz	r5, 8003ae4 <VL53LX_get_device_results+0x430>
 8003ad4:	78bb      	ldrb	r3, [r7, #2]
 8003ad6:	b98b      	cbnz	r3, 8003afc <VL53LX_get_device_results+0x448>
				status =
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f001 fec6 	bl	800586a <VL53LX_low_power_auto_setup_manual_calibration>
				pL->low_power_auto_range_count = 1;
 8003ade:	f887 8002 	strb.w	r8, [r7, #2]
				status =
 8003ae2:	4605      	mov	r5, r0
			if ((pL->low_power_auto_range_count != 0xFF) &&
 8003ae4:	78bb      	ldrb	r3, [r7, #2]
 8003ae6:	2bff      	cmp	r3, #255	; 0xff
 8003ae8:	f43f ae9d 	beq.w	8003826 <VL53LX_get_device_results+0x172>
 8003aec:	2d00      	cmp	r5, #0
 8003aee:	f47f ae9a 	bne.w	8003826 <VL53LX_get_device_results+0x172>
				status = VL53LX_low_power_auto_update_DSS(
 8003af2:	4620      	mov	r0, r4
 8003af4:	f001 fedd 	bl	80058b2 <VL53LX_low_power_auto_update_DSS>
 8003af8:	4605      	mov	r5, r0
 8003afa:	e694      	b.n	8003826 <VL53LX_get_device_results+0x172>
			} else if ((status == VL53LX_ERROR_NONE) &&
 8003afc:	2b01      	cmp	r3, #1
				pL->low_power_auto_range_count = 2;
 8003afe:	bf04      	itt	eq
 8003b00:	2302      	moveq	r3, #2
 8003b02:	70bb      	strbeq	r3, [r7, #2]
 8003b04:	e7ee      	b.n	8003ae4 <VL53LX_get_device_results+0x430>
		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8003b06:	2210      	movs	r2, #16
 8003b08:	f886 2244 	strb.w	r2, [r6, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8003b0c:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
		if (zid < pres->zone_results.max_zones) {
 8003b10:	2b0f      	cmp	r3, #15
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8003b12:	f102 0201 	add.w	r2, r2, #1
 8003b16:	f886 2245 	strb.w	r2, [r6, #581]	; 0x245
		if (zid < pres->zone_results.max_zones) {
 8003b1a:	f63f ae92 	bhi.w	8003842 <VL53LX_get_device_results+0x18e>
			pobjects->cfg_device_state  =
 8003b1e:	2144      	movs	r1, #68	; 0x44
 8003b20:	fb01 6203 	mla	r2, r1, r3, r6
			pobjects->zone_id           = presults->zone_id;
 8003b24:	f882 324a 	strb.w	r3, [r2, #586]	; 0x24a
			pobjects->cfg_device_state  =
 8003b28:	f882 7248 	strb.w	r7, [r2, #584]	; 0x248
			pobjects->rd_device_state   = presults->rd_device_state;
 8003b2c:	f882 0249 	strb.w	r0, [r2, #585]	; 0x249
			pobjects->stream_count      = presults->stream_count;
 8003b30:	78f0      	ldrb	r0, [r6, #3]
 8003b32:	f882 024b 	strb.w	r0, [r2, #587]	; 0x24b
			pobjects->xmonitor.VL53LX_p_016 =
 8003b36:	f8d6 0168 	ldr.w	r0, [r6, #360]	; 0x168
 8003b3a:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
			pobjects->xmonitor.VL53LX_p_017 =
 8003b3e:	f8d6 016c 	ldr.w	r0, [r6, #364]	; 0x16c
 8003b42:	f8c2 0284 	str.w	r0, [r2, #644]	; 0x284
			pobjects->xmonitor.VL53LX_p_011 =
 8003b46:	f8b6 0184 	ldrh.w	r0, [r6, #388]	; 0x184
 8003b4a:	f8a2 0288 	strh.w	r0, [r2, #648]	; 0x288
			pobjects->xmonitor.range_status =
 8003b4e:	f896 018e 	ldrb.w	r0, [r6, #398]	; 0x18e
 8003b52:	f882 028a 	strb.w	r0, [r2, #650]	; 0x28a
			pobjects->max_objects      = presults->max_results;
 8003b56:	7c70      	ldrb	r0, [r6, #17]
 8003b58:	f882 024c 	strb.w	r0, [r2, #588]	; 0x24c
			pobjects->active_objects   = presults->active_results;
 8003b5c:	7cb7      	ldrb	r7, [r6, #18]
 8003b5e:	f882 724d 	strb.w	r7, [r2, #589]	; 0x24d
 8003b62:	fb01 4303 	mla	r3, r1, r3, r4
 8003b66:	f504 5005 	add.w	r0, r4, #8512	; 0x2140
 8003b6a:	f504 5204 	add.w	r2, r4, #8448	; 0x2100
 8003b6e:	f503 530c 	add.w	r3, r3, #8960	; 0x2300
 8003b72:	3024      	adds	r0, #36	; 0x24
 8003b74:	214c      	movs	r1, #76	; 0x4c
 8003b76:	3218      	adds	r2, #24
 8003b78:	3330      	adds	r3, #48	; 0x30
 8003b7a:	fb11 0107 	smlabb	r1, r1, r7, r0
 8003b7e:	324c      	adds	r2, #76	; 0x4c
			for (i = 0; i < presults->active_results; i++) {
 8003b80:	428a      	cmp	r2, r1
 8003b82:	f103 030c 	add.w	r3, r3, #12
 8003b86:	f43f ae5c 	beq.w	8003842 <VL53LX_get_device_results+0x18e>
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8003b8a:	f852 0c4c 	ldr.w	r0, [r2, #-76]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8003b8e:	f843 0c0c 	str.w	r0, [r3, #-12]
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8003b92:	f852 0c48 	ldr.w	r0, [r2, #-72]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8003b96:	f843 0c08 	str.w	r0, [r3, #-8]
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8003b9a:	f832 0c30 	ldrh.w	r0, [r2, #-48]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8003b9e:	f823 0c04 	strh.w	r0, [r3, #-4]
					presults->VL53LX_p_003[i].range_status;
 8003ba2:	f812 0c26 	ldrb.w	r0, [r2, #-38]
				pobjects->VL53LX_p_003[i].range_status =
 8003ba6:	f803 0c02 	strb.w	r0, [r3, #-2]
 8003baa:	e7e8      	b.n	8003b7e <VL53LX_get_device_results+0x4ca>

08003bac <VL53LX_dynamic_xtalk_correction_enable>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8003bac:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	54c2      	strb	r2, [r0, r3]

	LOG_FUNCTION_END(status);

	return status;
}
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	4770      	bx	lr

08003bb8 <VL53LX_dynamic_xtalk_correction_disable>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8003bb8:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	5483      	strb	r3, [r0, r2]

	LOG_FUNCTION_END(status);

	return status;
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	4770      	bx	lr

08003bc4 <VL53LX_dynamic_xtalk_correction_apply_disable>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8003bc4:	f241 32cd 	movw	r2, #5069	; 0x13cd
 8003bc8:	2300      	movs	r3, #0
 8003bca:	5483      	strb	r3, [r0, r2]

	LOG_FUNCTION_END(status);

	return status;
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	4770      	bx	lr

08003bd0 <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8003bd0:	f241 33ce 	movw	r3, #5070	; 0x13ce
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	54c2      	strb	r2, [r0, r3]

	LOG_FUNCTION_END(status);

	return status;
}
 8003bd8:	2000      	movs	r0, #0
 8003bda:	4770      	bx	lr

08003bdc <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8003bdc:	f241 32ce 	movw	r2, #5070	; 0x13ce
 8003be0:	2300      	movs	r3, #0
 8003be2:	5483      	strb	r3, [r0, r2]

	LOG_FUNCTION_END(status);

	return status;
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	4770      	bx	lr

08003be8 <VL53LX_dynamic_xtalk_correction_apply_enable>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8003be8:	f241 33cd 	movw	r3, #5069	; 0x13cd
 8003bec:	2201      	movs	r2, #1
 8003bee:	54c2      	strb	r2, [r0, r3]

	LOG_FUNCTION_END(status);

	return status;
}
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	4770      	bx	lr

08003bf4 <VL53LX_init_refspadchar_config_struct>:

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8003bf4:	f640 3308 	movw	r3, #2824	; 0xb08
 8003bf8:	8003      	strh	r3, [r0, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <VL53LX_init_refspadchar_config_struct+0x1c>)
 8003bfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c00:	e9c0 2301 	strd	r2, r3, [r0, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8003c04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c08:	8183      	strh	r3, [r0, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	05000a00 	.word	0x05000a00

08003c14 <VL53LX_init_ssc_config_struct>:

	pdata->vcsel_start  =
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 8003c14:	4a04      	ldr	r2, [pc, #16]	; (8003c28 <VL53LX_init_ssc_config_struct+0x14>)
 8003c16:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 8003c1a:	e9c0 2300 	strd	r2, r3, [r0]


	pdata->timeout_us   = 36000;
 8003c1e:	230c      	movs	r3, #12
 8003c20:	8103      	strh	r3, [r0, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8003c22:	2000      	movs	r0, #0
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	020f1200 	.word	0x020f1200

08003c2c <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	b510      	push	{r4, lr}




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8003c30:	8940      	ldrh	r0, [r0, #10]
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8003c32:	6008      	str	r0, [r1, #0]
{
 8003c34:	460c      	mov	r4, r1
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8003c36:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8003c3a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8003c3e:	80a1      	strh	r1, [r4, #4]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8003c40:	2300      	movs	r3, #0
 8003c42:	8263      	strh	r3, [r4, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8003c44:	82a3      	strh	r3, [r4, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8003c46:	2340      	movs	r3, #64	; 0x40
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8003c48:	80e2      	strh	r2, [r4, #6]
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8003c4a:	60a0      	str	r0, [r4, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8003c4c:	81a1      	strh	r1, [r4, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8003c4e:	81e2      	strh	r2, [r4, #14]
	pdata->crosstalk_range_ignore_threshold_mult =
 8003c50:	75a3      	strb	r3, [r4, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8003c52:	b9a8      	cbnz	r0, 8003c80 <VL53LX_init_xtalk_config_struct+0x54>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8003c54:	6863      	ldr	r3, [r4, #4]
 8003c56:	b99b      	cbnz	r3, 8003c80 <VL53LX_init_xtalk_config_struct+0x54>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8003c58:	7420      	strb	r0, [r4, #16]
	else
		pdata->global_crosstalk_compensation_enable = 0x01;


	if ((status == VL53LX_ERROR_NONE) &&
 8003c5a:	7c23      	ldrb	r3, [r4, #16]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d112      	bne.n	8003c86 <VL53LX_init_xtalk_config_struct+0x5a>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 8003c60:	2340      	movs	r3, #64	; 0x40
 8003c62:	f000 fe30 	bl	80048c6 <VL53LX_calc_range_ignore_threshold>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8003c66:	8320      	strh	r0, [r4, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8003c68:	f64f 73ce 	movw	r3, #65486	; 0xffce
 8003c6c:	8363      	strh	r3, [r4, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8003c6e:	2332      	movs	r3, #50	; 0x32
 8003c70:	83a3      	strh	r3, [r4, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8003c72:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003c76:	83e3      	strh	r3, [r4, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8003c78:	238c      	movs	r3, #140	; 0x8c
 8003c7a:	8423      	strh	r3, [r4, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	bd10      	pop	{r4, pc}
		pdata->global_crosstalk_compensation_enable = 0x01;
 8003c80:	2301      	movs	r3, #1
 8003c82:	7423      	strb	r3, [r4, #16]
 8003c84:	e7e9      	b.n	8003c5a <VL53LX_init_xtalk_config_struct+0x2e>
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	8323      	strh	r3, [r4, #24]
 8003c8a:	e7ed      	b.n	8003c68 <VL53LX_init_xtalk_config_struct+0x3c>

08003c8c <VL53LX_init_xtalk_extract_config_struct>:

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8003c8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c90:	8003      	strh	r3, [r0, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8003c92:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003c96:	6083      	str	r3, [r0, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8003c98:	2307      	movs	r3, #7
 8003c9a:	7403      	strb	r3, [r0, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8003c9c:	f643 2398 	movw	r3, #15000	; 0x3a98
 8003ca0:	6043      	str	r3, [r0, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8003ca2:	f242 7310 	movw	r3, #10000	; 0x2710
 8003ca6:	60c3      	str	r3, [r0, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8003ca8:	f64f 73ba 	movw	r3, #65466	; 0xffba
 8003cac:	8243      	strh	r3, [r0, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8003cae:	2346      	movs	r3, #70	; 0x46
 8003cb0:	8283      	strh	r3, [r0, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8003cb2:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003cb6:	82c3      	strh	r3, [r0, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8003cb8:	238c      	movs	r3, #140	; 0x8c
 8003cba:	8303      	strh	r3, [r0, #24]


	LOG_FUNCTION_END(status);

	return status;
}
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	4770      	bx	lr

08003cc0 <VL53LX_init_offset_cal_config_struct>:

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8003cc0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003cc4:	8003      	strh	r3, [r0, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8003cc6:	f643 2298 	movw	r2, #15000	; 0x3a98
 8003cca:	f243 23c8 	movw	r3, #13000	; 0x32c8
 8003cce:	e9c0 2301 	strd	r2, r3, [r0, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8003cd2:	60c3      	str	r3, [r0, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8003cd4:	f642 0308 	movw	r3, #10248	; 0x2808
 8003cd8:	8203      	strh	r3, [r0, #16]



	pdata->pre_num_of_samples                          =
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8003cda:	2309      	movs	r3, #9
 8003cdc:	7483      	strb	r3, [r0, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8003cde:	2000      	movs	r0, #0
 8003ce0:	4770      	bx	lr
	...

08003ce4 <VL53LX_init_zone_cal_config_struct>:

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8003ce4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ce8:	8003      	strh	r3, [r0, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8003cea:	f643 2298 	movw	r2, #15000	; 0x3a98
 8003cee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003cf2:	e9c0 2301 	strd	r2, r3, [r0, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8003cf6:	4b03      	ldr	r3, [pc, #12]	; (8003d04 <VL53LX_init_zone_cal_config_struct+0x20>)
 8003cf8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003cfc:	e9c0 1303 	strd	r1, r3, [r0, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8003d00:	2000      	movs	r0, #0
 8003d02:	4770      	bx	lr
 8003d04:	00080010 	.word	0x00080010

08003d08 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 8003d08:	b510      	push	{r4, lr}


	pdata->sigma_thresh                  =
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8003d0a:	f240 74c3 	movw	r4, #1987	; 0x7c3
	pdata->hist_algo_select =
 8003d0e:	4b15      	ldr	r3, [pc, #84]	; (8003d64 <VL53LX_init_hist_post_process_config_struct+0x5c>)
	pdata->range_offset_mm            =      0;
 8003d10:	83cc      	strh	r4, [r1, #30]

	pdata->gain_factor                =
 8003d12:	f648 0408 	movw	r4, #34824	; 0x8808
	pdata->hist_algo_select =
 8003d16:	600b      	str	r3, [r1, #0]
	pdata->gain_factor                =
 8003d18:	840c      	strh	r4, [r1, #32]
	pdata->filter_woi1                   =
 8003d1a:	f245 0301 	movw	r3, #20481	; 0x5001
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
	pdata->valid_phase_high = 0x88;
 8003d1e:	2408      	movs	r4, #8
	pdata->filter_woi1                   =
 8003d20:	808b      	strh	r3, [r1, #4]
	pdata->valid_phase_high = 0x88;
 8003d22:	844c      	strh	r4, [r1, #34]	; 0x22
	pdata->ambient_thresh_sigma0         =
 8003d24:	2364      	movs	r3, #100	; 0x64
	pdata->algo__consistency_check__phase_tolerance =
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 8003d26:	f44f 6400 	mov.w	r4, #2048	; 0x800
	pdata->ambient_thresh_sigma0         =
 8003d2a:	718b      	strb	r3, [r1, #6]
	pdata->ambient_thresh_events_scaler     =
 8003d2c:	f241 023d 	movw	r2, #4157	; 0x103d
	pdata->signal_total_events_limit     =
 8003d30:	614b      	str	r3, [r1, #20]
	pdata->algo__consistency_check__event_sigma =
 8003d32:	848c      	strh	r4, [r1, #36]	; 0x24
	pdata->sigma_estimator__sigma_ref_mm =
 8003d34:	2301      	movs	r3, #1

	pdata->algo__consistency_check__min_max_tolerance =
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8003d36:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8003d3a:	4c0b      	ldr	r4, [pc, #44]	; (8003d68 <VL53LX_init_hist_post_process_config_struct+0x60>)
 8003d3c:	480b      	ldr	r0, [pc, #44]	; (8003d6c <VL53LX_init_hist_post_process_config_struct+0x64>)
	pdata->ambient_thresh_events_scaler     =
 8003d3e:	810a      	strh	r2, [r1, #8]
	pdata->sigma_estimator__sigma_ref_mm =
 8003d40:	760b      	strb	r3, [r1, #24]
	pdata->min_ambient_thresh_events     =
 8003d42:	2210      	movs	r2, #16
	pdata->sigma_thresh                  =
 8003d44:	23b4      	movs	r3, #180	; 0xb4
	pdata->min_ambient_thresh_events     =
 8003d46:	60ca      	str	r2, [r1, #12]
	pdata->sigma_thresh                  =
 8003d48:	834b      	strh	r3, [r1, #26]
	pdata->noise_threshold               =
 8003d4a:	2232      	movs	r2, #50	; 0x32
	pdata->sigma_thresh                  =
 8003d4c:	2300      	movs	r3, #0
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8003d4e:	e9c1 400d 	strd	r4, r0, [r1, #52]	; 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8003d52:	2050      	movs	r0, #80	; 0x50
 8003d54:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
	pdata->noise_threshold               =
 8003d58:	820a      	strh	r2, [r1, #16]
	pdata->sigma_thresh                  =
 8003d5a:	838b      	strh	r3, [r1, #28]
	pdata->algo__consistency_check__event_min_spad_count =
 8003d5c:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdata->algo__crosstalk_detect_event_sigma       =
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8003d5e:	87ca      	strh	r2, [r1, #62]	; 0x3e


	LOG_FUNCTION_END(status);

	return status;
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	bd10      	pop	{r4, pc}
 8003d64:	02010104 	.word	0x02010104
 8003d68:	0032ffce 	.word	0x0032ffce
 8003d6c:	008c0190 	.word	0x008c0190

08003d70 <VL53LX_init_tuning_parm_storage_struct>:



	pdata->tp_tuning_parm_version              =
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8003d70:	495c      	ldr	r1, [pc, #368]	; (8003ee4 <VL53LX_init_tuning_parm_storage_struct+0x174>)
 8003d72:	4a5d      	ldr	r2, [pc, #372]	; (8003ee8 <VL53LX_init_tuning_parm_storage_struct+0x178>)
{
 8003d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	pdata->tp_tuning_parm_key_table_version    =
 8003d78:	e9c0 1200 	strd	r1, r2, [r0]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8003d7c:	4a5b      	ldr	r2, [pc, #364]	; (8003eec <VL53LX_init_tuning_parm_storage_struct+0x17c>)
 8003d7e:	6082      	str	r2, [r0, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8003d80:	f5a2 22e1 	sub.w	r2, r2, #460800	; 0x70800
 8003d84:	3afd      	subs	r2, #253	; 0xfd
{
 8003d86:	4603      	mov	r3, r0
	pdata->tp_init_phase_ref_lite_short        =
 8003d88:	60c2      	str	r2, [r0, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8003d8a:	4a59      	ldr	r2, [pc, #356]	; (8003ef0 <VL53LX_init_tuning_parm_storage_struct+0x180>)
 8003d8c:	6102      	str	r2, [r0, #16]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8003d8e:	f04f 123c 	mov.w	r2, #3932220	; 0x3c003c
 8003d92:	619a      	str	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8003d94:	f502 0288 	add.w	r2, r2, #4456448	; 0x440000
 8003d98:	61da      	str	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8003d9a:	4a56      	ldr	r2, [pc, #344]	; (8003ef4 <VL53LX_init_tuning_parm_storage_struct+0x184>)
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8003d9c:	f640 0efc 	movw	lr, #2300	; 0x8fc
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8003da0:	f04f 1480 	mov.w	r4, #8388736	; 0x800080
 8003da4:	e9c3 4208 	strd	r4, r2, [r3, #32]
	pdata->tp_uwr_med_z_3_max =
 8003da8:	f240 66d6 	movw	r6, #1750	; 0x6d6
	pdata->tp_uwr_med_corr_z_1_rangea =
 8003dac:	f8a3 e0a2 	strh.w	lr, [r3, #162]	; 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8003db0:	f8a3 e0a6 	strh.w	lr, [r3, #166]	; 0xa6
	pdata->tp_lite_seed_cfg                      =
 8003db4:	f240 2201 	movw	r2, #513	; 0x201
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8003db8:	f241 1ef8 	movw	lr, #4600	; 0x11f8
	pdata->tp_uwr_med_z_1_max =
 8003dbc:	f640 21be 	movw	r1, #2750	; 0xabe
	pdata->tp_phasecal_target                  =
 8003dc0:	2000      	movs	r0, #0
	pdata->tp_uwr_enable =
 8003dc2:	2401      	movs	r4, #1
	pdata->tp_uwr_med_z_2_max =
 8003dc4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	pdata->tp_lite_seed_cfg                      =
 8003dc8:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->tp_uwr_med_z_1_max =
 8003dca:	f8a3 1090 	strh.w	r1, [r3, #144]	; 0x90
	pdata->tp_uwr_med_z_1_min =
 8003dce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
	pdata->tp_uwr_med_z_3_min =
 8003dd2:	f240 41e2 	movw	r1, #1250	; 0x4e2
	pdata->tp_uwr_med_z_2_min =
 8003dd6:	f04f 0cfa 	mov.w	ip, #250	; 0xfa
	pdata->tp_uwr_med_z_3_max =
 8003dda:	f8a3 6098 	strh.w	r6, [r3, #152]	; 0x98
	pdata->tp_uwr_med_z_4_max =
 8003dde:	f8a3 609c 	strh.w	r6, [r3, #156]	; 0x9c
	pdata->tp_uwr_med_z_5_min =
 8003de2:	f64f 7738 	movw	r7, #65336	; 0xff38
	pdata->tp_uwr_med_z_5_max =
 8003de6:	26c8      	movs	r6, #200	; 0xc8
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8003de8:	f640 38ea 	movw	r8, #3050	; 0xbea
	pdata->tp_uwr_med_corr_z_3_rangea =
 8003dec:	f8a3 e0aa 	strh.w	lr, [r3, #170]	; 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8003df0:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8003df4:	f641 0e38 	movw	lr, #6200	; 0x1838
	pdata->tp_uwr_med_z_1_min =
 8003df8:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
	pdata->tp_uwr_med_z_2_max =
 8003dfc:	f8a3 5094 	strh.w	r5, [r3, #148]	; 0x94
	pdata->tp_uwr_med_z_3_min =
 8003e00:	f8a3 1096 	strh.w	r1, [r3, #150]	; 0x96
	pdata->tp_uwr_med_z_4_min =
 8003e04:	f8a3 109a 	strh.w	r1, [r3, #154]	; 0x9a
	pdata->tp_uwr_med_z_5_min =
 8003e08:	f8a3 709e 	strh.w	r7, [r3, #158]	; 0x9e
	pdata->tp_uwr_med_z_5_max =
 8003e0c:	f8a3 60a0 	strh.w	r6, [r3, #160]	; 0xa0
	pdata->tp_phasecal_target                  =
 8003e10:	8298      	strh	r0, [r3, #20]
	pdata->tp_cal_repeat_rate                  =
 8003e12:	7598      	strb	r0, [r3, #22]
	pdata->tp_lite_quantifier                    =
 8003e14:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
	pdata->tp_uwr_enable =
 8003e18:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
	pdata->tp_uwr_med_z_2_min =
 8003e1c:	f8a3 c092 	strh.w	ip, [r3, #146]	; 0x92
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8003e20:	f8a3 00a4 	strh.w	r0, [r3, #164]	; 0xa4
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8003e24:	f8a3 80a8 	strh.w	r8, [r3, #168]	; 0xa8
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8003e28:	f8a3 80ac 	strh.w	r8, [r3, #172]	; 0xac
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8003e2c:	f8a3 e0b0 	strh.w	lr, [r3, #176]	; 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8003e30:	f8a3 10b8 	strh.w	r1, [r3, #184]	; 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8003e34:	f640 41b2 	movw	r1, #3250	; 0xcb2
 8003e38:	f8a3 10ba 	strh.w	r1, [r3, #186]	; 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8003e3c:	f241 1194 	movw	r1, #4500	; 0x1194
 8003e40:	f8a3 10bc 	strh.w	r1, [r3, #188]	; 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8003e44:	f640 710a 	movw	r1, #3850	; 0xf0a
 8003e48:	f8a3 10ca 	strh.w	r1, [r3, #202]	; 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8003e4c:	492a      	ldr	r1, [pc, #168]	; (8003ef8 <VL53LX_init_tuning_parm_storage_struct+0x188>)
	pdata->tp_uwr_lng_z_3_min =
 8003e4e:	f8a3 70be 	strh.w	r7, [r3, #190]	; 0xbe
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8003e52:	e9c3 5215 	strd	r5, r2, [r3, #84]	; 0x54
	pdata->tp_uwr_lng_z_3_max =
 8003e56:	f8a3 60c0 	strh.w	r6, [r3, #192]	; 0xc0
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8003e5a:	e9c3 1033 	strd	r1, r0, [r3, #204]	; 0xcc
	pdata->tp_phasecal_timeout_lite_us           =
 8003e5e:	639d      	str	r5, [r3, #56]	; 0x38
	pdata->tp_phasecal_timeout_hist_med_us       =
 8003e60:	f643 2198 	movw	r1, #15000	; 0x3a98
 8003e64:	f242 3728 	movw	r7, #9000	; 0x2328
	pdata->tp_phasecal_timeout_hist_short_us     =
 8003e68:	f241 7670 	movw	r6, #6000	; 0x1770
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8003e6c:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8003e70:	665a      	str	r2, [r3, #100]	; 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8003e72:	f24f 6518 	movw	r5, #63000	; 0xf618
 8003e76:	f640 12c4 	movw	r2, #2500	; 0x9c4
	pdata->tp_phasecal_timeout_hist_med_us       =
 8003e7a:	e9c3 170f 	strd	r1, r7, [r3, #60]	; 0x3c
	pdata->tp_phasecal_timeout_mz_short_us       =
 8003e7e:	e9c3 7613 	strd	r7, r6, [r3, #76]	; 0x4c
	pdata->tp_range_timeout_histo_us             =
 8003e82:	e9c3 521b 	strd	r5, r2, [r3, #108]	; 0x6c
	pdata->tp_uwr_med_corr_z_5_rangea =
 8003e86:	f8a3 00b2 	strh.w	r0, [r3, #178]	; 0xb2
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8003e8a:	f8a3 00b4 	strh.w	r0, [r3, #180]	; 0xb4
	pdata->tp_uwr_lng_z_1_min =
 8003e8e:	f8a3 c0b6 	strh.w	ip, [r3, #182]	; 0xb6
	pdata->tp_uwr_lng_z_4_min =
 8003e92:	f8a3 00c2 	strh.w	r0, [r3, #194]	; 0xc2
	pdata->tp_uwr_lng_z_4_max =
 8003e96:	f8a3 00c4 	strh.w	r0, [r3, #196]	; 0xc4
	pdata->tp_uwr_lng_z_5_min =
 8003e9a:	f8a3 00c6 	strh.w	r0, [r3, #198]	; 0xc6
	pdata->tp_uwr_lng_z_5_max =
 8003e9e:	f8a3 00c8 	strh.w	r0, [r3, #200]	; 0xc8
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8003ea2:	e9c3 0035 	strd	r0, r0, [r3, #212]	; 0xd4
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8003ea6:	f8a3 00dc 	strh.w	r0, [r3, #220]	; 0xdc
	pdata->tp_phasecal_timeout_mz_long_us        =
 8003eaa:	e9c3 6111 	strd	r6, r1, [r3, #68]	; 0x44
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8003eae:	675a      	str	r2, [r3, #116]	; 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8003eb0:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8003eb4:	679a      	str	r2, [r3, #120]	; 0x78



	pdata->tp_mm_timeout_lpa_us =
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8003eb6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003eba:	67da      	str	r2, [r3, #124]	; 0x7c
	pdata->tp_dss_target_histo_mcps              =
 8003ebc:	4f0f      	ldr	r7, [pc, #60]	; (8003efc <VL53LX_init_tuning_parm_storage_struct+0x18c>)
 8003ebe:	4a10      	ldr	r2, [pc, #64]	; (8003f00 <VL53LX_init_tuning_parm_storage_struct+0x190>)
	pdata->tp_mm_timeout_lpa_us =
 8003ec0:	669c      	str	r4, [r3, #104]	; 0x68
	pdata->tp_dss_target_histo_mcps              =
 8003ec2:	e9c3 720b 	strd	r7, r2, [r3, #44]	; 0x2c
	pdata->tp_dss_target_timed_mcps              =
 8003ec6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003eca:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8003ecc:	2206      	movs	r2, #6
	pdata->tp_phasecal_patch_power =
 8003ece:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
	pdata->tp_hist_merge =
 8003ed2:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
	pdata->tp_reset_merge_threshold =
 8003ed6:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	pdata->tp_hist_merge_max_size =
 8003eda:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8003ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ee2:	bf00      	nop
 8003ee4:	000e001e 	.word	0x000e001e
 8003ee8:	0a0e2f94 	.word	0x0a0e2f94
 8003eec:	060a0e06 	.word	0x060a0e06
 8003ef0:	21020606 	.word	0x21020606
 8003ef4:	02011008 	.word	0x02011008
 8003ef8:	0f0a11f8 	.word	0x0f0a11f8
 8003efc:	14000a00 	.word	0x14000a00
 8003f00:	0a001400 	.word	0x0a001400

08003f04 <VL53LX_init_hist_gen3_dmax_config_struct>:


	pdata->dss_config__target_total_rate_mcps = 0x1400;
	pdata->dss_config__aperture_attenuation = 0x38;

	pdata->signal_thresh_sigma                 =
 8003f04:	f247 0320 	movw	r3, #28704	; 0x7020
 8003f08:	8003      	strh	r3, [r0, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
	pdata->min_ambient_thresh_events           = 16;
 8003f0a:	2210      	movs	r2, #16
 8003f0c:	2364      	movs	r3, #100	; 0x64
 8003f0e:	e9c0 2301 	strd	r2, r3, [r0, #4]



	pdata->target_reflectance_for_dmax_calc[0] =
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8003f12:	4906      	ldr	r1, [pc, #24]	; (8003f2c <VL53LX_init_hist_gen3_dmax_config_struct+0x28>)
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <VL53LX_init_hist_gen3_dmax_config_struct+0x2c>)
 8003f16:	e9c0 1303 	strd	r1, r3, [r0, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <VL53LX_init_hist_gen3_dmax_config_struct+0x30>)
 8003f1c:	6143      	str	r3, [r0, #20]
	pdata->max_effective_spads = 0xFFFF;
 8003f1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f22:	8303      	strh	r3, [r0, #24]
	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8003f24:	2338      	movs	r3, #56	; 0x38
 8003f26:	7683      	strb	r3, [r0, #26]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8003f28:	2000      	movs	r0, #0
 8003f2a:	4770      	bx	lr
 8003f2c:	0034000f 	.word	0x0034000f
 8003f30:	016c00c8 	.word	0x016c00c8
 8003f34:	ffff0190 	.word	0xffff0190

08003f38 <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8003f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f3c:	4604      	mov	r4, r0
 8003f3e:	e9dd 6e09 	ldrd	r6, lr, [sp, #36]	; 0x24
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8003f42:	f44f 6020 	mov.w	r0, #2560	; 0xa00
	pstatic->host_if__status = 0x00;
	pstatic->pad_i2c_hv__config = 0x00;
	pstatic->pad_i2c_hv__extsup_config = 0x00;


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8003f46:	f240 2711 	movw	r7, #529	; 0x211
	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8003f4a:	8020      	strh	r0, [r4, #0]
	pstatic->gpio_hv_pad__ctrl = 0x00;
 8003f4c:	81a7      	strh	r7, [r4, #12]
	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8003f4e:	2000      	movs	r0, #0
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
	pstatic->gpio__fio_hv_status = 0x00;
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8003f50:	f04f 0808 	mov.w	r8, #8
	pstatic->gpio__tio_hv_status = 0x02;
 8003f54:	f44f 7700 	mov.w	r7, #512	; 0x200
	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8003f58:	8060      	strh	r0, [r4, #2]
	pstatic->test_mode__ctrl = 0x00;
 8003f5a:	80a0      	strh	r0, [r4, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8003f5c:	80e0      	strh	r0, [r4, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8003f5e:	8120      	strh	r0, [r4, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8003f60:	8160      	strh	r0, [r4, #10]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8003f62:	f8a4 8010 	strh.w	r8, [r4, #16]
	pstatic->gpio__tio_hv_status = 0x02;
 8003f66:	81e7      	strh	r7, [r4, #14]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;

	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8003f68:	f896 7024 	ldrb.w	r7, [r6, #36]	; 0x24
 8003f6c:	74a7      	strb	r7, [r4, #18]
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8003f6e:	f896 7025 	ldrb.w	r7, [r6, #37]	; 0x25
 8003f72:	74e7      	strb	r7, [r4, #19]
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8003f74:	f896 7026 	ldrb.w	r7, [r6, #38]	; 0x26
 8003f78:	7527      	strb	r7, [r4, #20]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8003f7a:	f04f 09ff 	mov.w	r9, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8003f7e:	2701      	movs	r7, #1
 8003f80:	7567      	strb	r7, [r4, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8003f82:	75a0      	strb	r0, [r4, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8003f84:	75e0      	strb	r0, [r4, #23]
	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8003f86:	8320      	strh	r0, [r4, #24]
	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8003f88:	f884 901a 	strb.w	r9, [r4, #26]
	pstatic->algo__range_min_clip                             =
 8003f8c:	f896 9016 	ldrb.w	r9, [r6, #22]
 8003f90:	f884 901b 	strb.w	r9, [r4, #27]
			ptuning_parms->tp_lite_min_clip;

	pstatic->algo__consistency_check__tolerance               =
 8003f94:	f896 9012 	ldrb.w	r9, [r6, #18]
 8003f98:	f884 901c 	strb.w	r9, [r4, #28]
			ptuning_parms->tp_consistency_lite_phase_tolerance;
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8003f9c:	7760      	strb	r0, [r4, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8003f9e:	77a0      	strb	r0, [r4, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8003fa0:	77e0      	strb	r0, [r4, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
	pgeneral->global_config__stream_divider = 0x00;
 8003fa2:	f44f 6432 	mov.w	r4, #2848	; 0xb20
{
 8003fa6:	e9dd 5c07 	ldrd	r5, ip, [sp, #28]
	pgeneral->gph_config__stream_count_update_value = 0x00;
 8003faa:	8010      	strh	r0, [r2, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8003fac:	8054      	strh	r4, [r2, #2]
	pgeneral->system__interrupt_config_gpio =
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;


	pgeneral->cal_config__repeat_rate                         =
 8003fae:	8ab4      	ldrh	r4, [r6, #20]
 8003fb0:	8094      	strh	r4, [r2, #4]
			ptuning_parms->tp_cal_repeat_rate;
	pgeneral->global_config__vcsel_width = 0x02;
 8003fb2:	f640 5402 	movw	r4, #3330	; 0xd02
 8003fb6:	80d4      	strh	r4, [r2, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;

	pgeneral->phasecal_config__target                         =
 8003fb8:	7cf4      	ldrb	r4, [r6, #19]
 8003fba:	7214      	strb	r4, [r2, #8]
	pgeneral->phasecal_config__override = 0x00;
	pgeneral->dss_config__roi_mode_control =
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
	pgeneral->system__thresh_rate_low = 0x0000;
 8003fbc:	f44f 440c 	mov.w	r4, #35840	; 0x8c00
 8003fc0:	8214      	strh	r4, [r2, #16]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8003fc2:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 8003fc6:	8254      	strh	r4, [r2, #18]
	pgeneral->dss_config__manual_block_select = 0x00;


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8003fc8:	f240 14ff 	movw	r4, #511	; 0x1ff
	pgeneral->phasecal_config__override = 0x00;
 8003fcc:	7250      	strb	r0, [r2, #9]
	pgeneral->dss_config__roi_mode_control =
 8003fce:	7297      	strb	r7, [r2, #10]
	pgeneral->system__thresh_rate_high = 0x0000;
 8003fd0:	8190      	strh	r0, [r2, #12]
 8003fd2:	81d0      	strh	r0, [r2, #14]
	pgeneral->dss_config__aperture_attenuation = 0x38;
 8003fd4:	8294      	strh	r4, [r2, #20]


	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8003fd6:	4c32      	ldr	r4, [pc, #200]	; (80040a0 <VL53LX_preset_mode_standard_ranging+0x168>)
 8003fd8:	4a32      	ldr	r2, [pc, #200]	; (80040a4 <VL53LX_preset_mode_standard_ranging+0x16c>)
 8003fda:	e9c3 4200 	strd	r4, r2, [r3]
	ptiming->range_config__timeout_macrop_a_hi = 0x01;
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;

	ptiming->range_config__vcsel_period_a = 0x0B;

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8003fde:	f640 12f5 	movw	r2, #2549	; 0x9f5
 8003fe2:	811a      	strh	r2, [r3, #8]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;

	ptiming->range_config__vcsel_period_b = 0x09;

	ptiming->range_config__sigma_thresh                       =
 8003fe4:	8b72      	ldrh	r2, [r6, #26]
 8003fe6:	815a      	strh	r2, [r3, #10]
			ptuning_parms->tp_lite_med_sigma_thresh_mm;

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8003fe8:	8c32      	ldrh	r2, [r6, #32]
 8003fea:	819a      	strh	r2, [r3, #12]
	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8003fec:	f240 7954 	movw	r9, #1876	; 0x754
	ptiming->range_config__valid_phase_high = 0x78;
 8003ff0:	2278      	movs	r2, #120	; 0x78
	ptiming->range_config__valid_phase_low = 0x08;
 8003ff2:	f883 800e 	strb.w	r8, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8003ff6:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8003ff8:	6118      	str	r0, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8003ffa:	7518      	strb	r0, [r3, #20]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8003ffc:	f8a1 9006 	strh.w	r9, [r1, #6]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8004000:	f44f 7904 	mov.w	r9, #528	; 0x210

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8004004:	f64f 73ff 	movw	r3, #65535	; 0xffff
	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8004008:	f244 3221 	movw	r2, #17185	; 0x4321
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;

	phistogram->histogram_config__spad_array_selection = 0x00;
 800400c:	f44f 68e0 	mov.w	r8, #1792	; 0x700
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8004010:	f243 2410 	movw	r4, #12816	; 0x3210
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8004014:	f8a1 900a 	strh.w	r9, [r1, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8004018:	f240 5943 	movw	r9, #1347	; 0x543
	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 800401c:	82cb      	strh	r3, [r1, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 800401e:	830b      	strh	r3, [r1, #24]
	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8004020:	804a      	strh	r2, [r1, #2]
	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8004022:	810a      	strh	r2, [r1, #8]
	phistogram->histogram_config__spad_array_selection = 0x00;
 8004024:	f8a1 8000 	strh.w	r8, [r1]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8004028:	808c      	strh	r4, [r1, #4]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 800402a:	f8a1 900c 	strh.w	r9, [r1, #12]
	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 800402e:	820a      	strh	r2, [r1, #16]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8004030:	2254      	movs	r2, #84	; 0x54
 8004032:	750a      	strb	r2, [r1, #20]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8004034:	2210      	movs	r2, #16
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8004036:	f8a1 800e 	strh.w	r8, [r1, #14]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 800403a:	824c      	strh	r4, [r1, #18]
	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 800403c:	f8ae 2000 	strh.w	r2, [lr]
	pzone_cfg->active_zones = 0x00;
	pzone_cfg->user_zones[0].height = 0x0f;
	pzone_cfg->user_zones[0].width = 0x0f;
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8004040:	f640 0208 	movw	r2, #2056	; 0x808
 8004044:	f8ae 201c 	strh.w	r2, [lr, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8004048:	f640 720f 	movw	r2, #3855	; 0xf0f
 800404c:	f8ae 201e 	strh.w	r2, [lr, #30]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8004050:	702f      	strb	r7, [r5, #0]

	pdynamic->system__thresh_high = 0x0000;
 8004052:	8068      	strh	r0, [r5, #2]
	pdynamic->system__thresh_low = 0x0000;
 8004054:	80a8      	strh	r0, [r5, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8004056:	71a8      	strb	r0, [r5, #6]
	pdynamic->system__seed_config =
 8004058:	f896 2027 	ldrb.w	r2, [r6, #39]	; 0x27
 800405c:	71ea      	strb	r2, [r5, #7]
			ptuning_parms->tp_lite_seed_cfg;


	pdynamic->sd_config__woi_sd0 = 0x0B;
 800405e:	f640 120b 	movw	r2, #2315	; 0x90b
 8004062:	812a      	strh	r2, [r5, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;

	pdynamic->sd_config__initial_phase_sd0                     =
 8004064:	79f2      	ldrb	r2, [r6, #7]
 8004066:	72aa      	strb	r2, [r5, #10]
			ptuning_parms->tp_init_phase_rtn_lite_med;
	pdynamic->sd_config__initial_phase_sd1                     =
 8004068:	7ab2      	ldrb	r2, [r6, #10]
 800406a:	72ea      	strb	r2, [r5, #11]
			ptuning_parms->tp_init_phase_ref_lite_med;

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 800406c:	732f      	strb	r7, [r5, #12]



	pdynamic->sd_config__first_order_select =
 800406e:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
 8004072:	736a      	strb	r2, [r5, #13]
			ptuning_parms->tp_lite_first_order_select;
	pdynamic->sd_config__quantifier         =
 8004074:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
			ptuning_parms->tp_lite_quantifier;


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8004078:	742b      	strb	r3, [r5, #16]


	pdynamic->system__sequence_config                          =
 800407a:	23db      	movs	r3, #219	; 0xdb
 800407c:	746b      	strb	r3, [r5, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 800407e:	2302      	movs	r3, #2
	pdynamic->sd_config__quantifier         =
 8004080:	73aa      	strb	r2, [r5, #14]
	pdynamic->system__grouped_parameter_hold = 0x02;
 8004082:	74ab      	strb	r3, [r5, #18]
	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8004084:	22c7      	movs	r2, #199	; 0xc7
	psystem->system__stream_count_ctrl = 0x00;
	psystem->firmware__enable = 0x01;
	psystem->system__interrupt_clear                           =
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8004086:	2321      	movs	r3, #33	; 0x21
	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8004088:	73ea      	strb	r2, [r5, #15]
	psystem->system__stream_count_ctrl = 0x00;
 800408a:	f88c 0001 	strb.w	r0, [ip, #1]
	psystem->firmware__enable = 0x01;
 800408e:	f88c 7002 	strb.w	r7, [ip, #2]
	psystem->system__interrupt_clear                           =
 8004092:	f88c 7003 	strb.w	r7, [ip, #3]
	psystem->system__mode_start                                =
 8004096:	f88c 3004 	strb.w	r3, [ip, #4]
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
}
 800409a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800409e:	bf00      	nop
 80040a0:	20001a00 	.word	0x20001a00
 80040a4:	010bcc01 	.word	0x010bcc01

080040a8 <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 80040a8:	b530      	push	{r4, r5, lr}

	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
 80040aa:	7bc4      	ldrb	r4, [r0, #15]
 80040ac:	748c      	strb	r4, [r1, #18]
			phistogram->histogram_config__high_amb_even_bin_0_1;
	pstatic->sigma_estimator__effective_ambient_width_ns =
 80040ae:	7c04      	ldrb	r4, [r0, #16]
 80040b0:	74cc      	strb	r4, [r1, #19]
			phistogram->histogram_config__high_amb_even_bin_2_3;
	pstatic->sigma_estimator__sigma_ref_mm =
 80040b2:	7c44      	ldrb	r4, [r0, #17]
 80040b4:	750c      	strb	r4, [r1, #20]
			phistogram->histogram_config__high_amb_even_bin_4_5;

	pstatic->algo__crosstalk_compensation_valid_height_mm =
 80040b6:	7c84      	ldrb	r4, [r0, #18]
 80040b8:	754c      	strb	r4, [r1, #21]
			phistogram->histogram_config__high_amb_odd_bin_0_1;

	pstatic->spare_host_config__static_config_spare_0 =
 80040ba:	7cc4      	ldrb	r4, [r0, #19]
 80040bc:	758c      	strb	r4, [r1, #22]
			phistogram->histogram_config__high_amb_odd_bin_2_3;
	pstatic->spare_host_config__static_config_spare_1 =
 80040be:	7d04      	ldrb	r4, [r0, #20]
 80040c0:	75cc      	strb	r4, [r1, #23]
			phistogram->histogram_config__high_amb_odd_bin_4_5;

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 80040c2:	79c5      	ldrb	r5, [r0, #7]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 80040c4:	7a04      	ldrb	r4, [r0, #8]
{
 80040c6:	9a03      	ldr	r2, [sp, #12]
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 80040c8:	eb04 2405 	add.w	r4, r4, r5, lsl #8
	pstatic->algo__range_ignore_threshold_mcps =
 80040cc:	830c      	strh	r4, [r1, #24]

	pstatic->algo__range_ignore_valid_height_mm =
 80040ce:	7a44      	ldrb	r4, [r0, #9]
 80040d0:	768c      	strb	r4, [r1, #26]
			phistogram->histogram_config__mid_amb_even_bin_4_5;
	pstatic->algo__range_min_clip =
 80040d2:	7a84      	ldrb	r4, [r0, #10]
 80040d4:	76cc      	strb	r4, [r1, #27]
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
	pstatic->algo__consistency_check__tolerance =
 80040d6:	7ac4      	ldrb	r4, [r0, #11]
 80040d8:	770c      	strb	r4, [r1, #28]
			phistogram->histogram_config__mid_amb_odd_bin_2;

	pstatic->spare_host_config__static_config_spare_2 =
 80040da:	7b04      	ldrb	r4, [r0, #12]
 80040dc:	774c      	strb	r4, [r1, #29]
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
	pstatic->sd_config__reset_stages_msb =
 80040de:	7b44      	ldrb	r4, [r0, #13]
 80040e0:	778c      	strb	r4, [r1, #30]
			phistogram->histogram_config__mid_amb_odd_bin_5;

	pstatic->sd_config__reset_stages_lsb =
 80040e2:	7b84      	ldrb	r4, [r0, #14]
 80040e4:	77cc      	strb	r4, [r1, #31]
			phistogram->histogram_config__user_bin_offset;

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80040e6:	7844      	ldrb	r4, [r0, #1]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80040e8:	7881      	ldrb	r1, [r0, #2]
 80040ea:	eb01 2104 	add.w	r1, r1, r4, lsl #8
	ptiming->range_config__sigma_thresh =
 80040ee:	8159      	strh	r1, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80040f0:	78c4      	ldrb	r4, [r0, #3]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80040f2:	7901      	ldrb	r1, [r0, #4]
 80040f4:	eb01 2104 	add.w	r1, r1, r4, lsl #8
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80040f8:	8199      	strh	r1, [r3, #12]

	ptiming->range_config__valid_phase_low =
 80040fa:	7941      	ldrb	r1, [r0, #5]
 80040fc:	7399      	strb	r1, [r3, #14]
			phistogram->histogram_config__low_amb_odd_bin_2_3;
	ptiming->range_config__valid_phase_high =
 80040fe:	7981      	ldrb	r1, [r0, #6]
 8004100:	73d9      	strb	r1, [r3, #15]
			phistogram->histogram_config__low_amb_odd_bin_4_5;

	pdynamic->system__thresh_high =
 8004102:	8ac3      	ldrh	r3, [r0, #22]
 8004104:	8053      	strh	r3, [r2, #2]
			phistogram->histogram_config__amb_thresh_low;

	pdynamic->system__thresh_low =
 8004106:	8b03      	ldrh	r3, [r0, #24]
 8004108:	8093      	strh	r3, [r2, #4]
			phistogram->histogram_config__amb_thresh_high;

	pdynamic->system__enable_xtalk_per_quadrant =
 800410a:	7803      	ldrb	r3, [r0, #0]
 800410c:	7193      	strb	r3, [r2, #6]
			phistogram->histogram_config__spad_array_selection;

	LOG_FUNCTION_END(0);

}
 800410e:	bd30      	pop	{r4, r5, pc}

08004110 <VL53LX_preset_mode_histogram_ranging>:
{
 8004110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004114:	b08d      	sub	sp, #52	; 0x34
 8004116:	469b      	mov	fp, r3
	status =
 8004118:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800411a:	9303      	str	r3, [sp, #12]
 800411c:	9b19      	ldr	r3, [sp, #100]	; 0x64
{
 800411e:	9c16      	ldr	r4, [sp, #88]	; 0x58
	status =
 8004120:	9302      	str	r3, [sp, #8]
 8004122:	9b18      	ldr	r3, [sp, #96]	; 0x60
{
 8004124:	920a      	str	r2, [sp, #40]	; 0x28
 8004126:	468a      	mov	sl, r1
	status =
 8004128:	9301      	str	r3, [sp, #4]
 800412a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
{
 800412c:	900b      	str	r0, [sp, #44]	; 0x2c
	status =
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	465a      	mov	r2, fp
 8004132:	4623      	mov	r3, r4
 8004134:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004136:	4650      	mov	r0, sl
 8004138:	f7ff fefe 	bl	8003f38 <VL53LX_preset_mode_standard_ranging>
	if (status == VL53LX_ERROR_NONE) {
 800413c:	4605      	mov	r5, r0
 800413e:	2800      	cmp	r0, #0
 8004140:	d151      	bne.n	80041e6 <VL53LX_preset_mode_histogram_ranging+0xd6>
		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8004142:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004146:	f8aa 3000 	strh.w	r3, [sl]
		VL53LX_init_histogram_config_structure(
 800414a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800414c:	9308      	str	r3, [sp, #32]
 800414e:	2702      	movs	r7, #2
 8004150:	f04f 0904 	mov.w	r9, #4
 8004154:	f04f 0803 	mov.w	r8, #3
 8004158:	2601      	movs	r6, #1
 800415a:	2305      	movs	r3, #5
 800415c:	4601      	mov	r1, r0
 800415e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8004162:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8004166:	463b      	mov	r3, r7
 8004168:	4632      	mov	r2, r6
 800416a:	2007      	movs	r0, #7
 800416c:	e9cd 7804 	strd	r7, r8, [sp, #16]
 8004170:	e9cd 8900 	strd	r8, r9, [sp]
 8004174:	f000 fa96 	bl	80046a4 <VL53LX_init_histogram_config_structure>
		VL53LX_init_histogram_multizone_config_structure(
 8004178:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800417a:	443b      	add	r3, r7
 800417c:	9308      	str	r3, [sp, #32]
 800417e:	2305      	movs	r3, #5
 8004180:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8004184:	4632      	mov	r2, r6
 8004186:	463b      	mov	r3, r7
 8004188:	4629      	mov	r1, r5
 800418a:	2007      	movs	r0, #7
 800418c:	e9cd 7804 	strd	r7, r8, [sp, #16]
 8004190:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8004194:	e9cd 8900 	strd	r8, r9, [sp]
 8004198:	f000 fac9 	bl	800472e <VL53LX_init_histogram_multizone_config_structure>
		ptiming->range_config__vcsel_period_a = 0x09;
 800419c:	2309      	movs	r3, #9
 800419e:	71a3      	strb	r3, [r4, #6]
		pdynamic->sd_config__woi_sd0 = 0x09;
 80041a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
		VL53LX_copy_hist_cfg_to_static_cfg(
 80041a2:	980a      	ldr	r0, [sp, #40]	; 0x28
		ptiming->range_config__vcsel_period_b = 0x0B;
 80041a4:	230b      	movs	r3, #11
 80041a6:	7263      	strb	r3, [r4, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 80041a8:	f640 3309 	movw	r3, #2825	; 0xb09
 80041ac:	8113      	strh	r3, [r2, #8]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80041ae:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <VL53LX_preset_mode_histogram_ranging+0xe0>)
 80041b0:	6023      	str	r3, [r4, #0]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 80041b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80041b6:	80a3      	strh	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 80041b8:	2321      	movs	r3, #33	; 0x21
 80041ba:	7223      	strb	r3, [r4, #8]
		phistpostprocess->valid_phase_low = 0x08;
 80041bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80041be:	71e5      	strb	r5, [r4, #7]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80041c0:	23f5      	movs	r3, #245	; 0xf5
 80041c2:	f88b 3007 	strb.w	r3, [fp, #7]
		phistpostprocess->valid_phase_low = 0x08;
 80041c6:	f648 0308 	movw	r3, #34824	; 0x8808
 80041ca:	8413      	strh	r3, [r2, #32]
		VL53LX_copy_hist_cfg_to_static_cfg(
 80041cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	465a      	mov	r2, fp
 80041d2:	4623      	mov	r3, r4
 80041d4:	4651      	mov	r1, sl
 80041d6:	f7ff ff67 	bl	80040a8 <VL53LX_copy_hist_cfg_to_static_cfg>
		pdynamic->system__sequence_config =
 80041da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80041dc:	239b      	movs	r3, #155	; 0x9b
 80041de:	7453      	strb	r3, [r2, #17]
		psystem->system__mode_start =
 80041e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80041e2:	2326      	movs	r3, #38	; 0x26
 80041e4:	7113      	strb	r3, [r2, #4]
}
 80041e6:	4628      	mov	r0, r5
 80041e8:	b00d      	add	sp, #52	; 0x34
 80041ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ee:	bf00      	nop
 80041f0:	1a002000 	.word	0x1a002000

080041f4 <VL53LX_preset_mode_histogram_long_range>:
{
 80041f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f8:	b08f      	sub	sp, #60	; 0x3c
 80041fa:	e9dd 6518 	ldrd	r6, r5, [sp, #96]	; 0x60
	status =
 80041fe:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8004200:	9404      	str	r4, [sp, #16]
 8004202:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8004204:	9403      	str	r4, [sp, #12]
 8004206:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8004208:	9600      	str	r6, [sp, #0]
 800420a:	e9cd 5401 	strd	r5, r4, [sp, #4]
{
 800420e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004212:	920b      	str	r2, [sp, #44]	; 0x2c
 8004214:	469b      	mov	fp, r3
	status =
 8004216:	f7ff ff7b 	bl	8004110 <VL53LX_preset_mode_histogram_ranging>
	if (status == VL53LX_ERROR_NONE) {
 800421a:	4604      	mov	r4, r0
 800421c:	2800      	cmp	r0, #0
 800421e:	d14f      	bne.n	80042c0 <VL53LX_preset_mode_histogram_long_range+0xcc>
		VL53LX_init_histogram_config_structure(
 8004220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004222:	9308      	str	r3, [sp, #32]
 8004224:	f04f 0802 	mov.w	r8, #2
 8004228:	f04f 0a04 	mov.w	sl, #4
 800422c:	f04f 0903 	mov.w	r9, #3
 8004230:	2701      	movs	r7, #1
 8004232:	2305      	movs	r3, #5
 8004234:	4601      	mov	r1, r0
 8004236:	e9cd a306 	strd	sl, r3, [sp, #24]
 800423a:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800423e:	4643      	mov	r3, r8
 8004240:	463a      	mov	r2, r7
 8004242:	2007      	movs	r0, #7
 8004244:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8004248:	e9cd 9a00 	strd	r9, sl, [sp]
 800424c:	f000 fa2a 	bl	80046a4 <VL53LX_init_histogram_config_structure>
		VL53LX_init_histogram_multizone_config_structure(
 8004250:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004252:	4443      	add	r3, r8
 8004254:	9308      	str	r3, [sp, #32]
 8004256:	2305      	movs	r3, #5
 8004258:	e9cd a306 	strd	sl, r3, [sp, #24]
 800425c:	463a      	mov	r2, r7
 800425e:	4643      	mov	r3, r8
 8004260:	4621      	mov	r1, r4
 8004262:	2007      	movs	r0, #7
 8004264:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8004268:	e9cd 4702 	strd	r4, r7, [sp, #8]
 800426c:	e9cd 9a00 	strd	r9, sl, [sp]
 8004270:	f000 fa5d 	bl	800472e <VL53LX_init_histogram_multizone_config_structure>
		VL53LX_copy_hist_cfg_to_static_cfg(
 8004274:	4633      	mov	r3, r6
 8004276:	465a      	mov	r2, fp
 8004278:	9500      	str	r5, [sp, #0]
 800427a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800427c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800427e:	f7ff ff13 	bl	80040a8 <VL53LX_copy_hist_cfg_to_static_cfg>
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8004282:	4a11      	ldr	r2, [pc, #68]	; (80042c8 <VL53LX_preset_mode_histogram_long_range+0xd4>)
 8004284:	4b11      	ldr	r3, [pc, #68]	; (80042cc <VL53LX_preset_mode_histogram_long_range+0xd8>)
 8004286:	e9c6 2300 	strd	r2, r3, [r6]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800428a:	f640 3322 	movw	r3, #2850	; 0xb22
 800428e:	8133      	strh	r3, [r6, #8]
		pgeneral->cal_config__vcsel_start = 0x09;
 8004290:	2309      	movs	r3, #9
 8004292:	f88b 3003 	strb.w	r3, [fp, #3]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8004296:	23f5      	movs	r3, #245	; 0xf5
 8004298:	f88b 3007 	strb.w	r3, [fp, #7]
		pdynamic->sd_config__woi_sd0 = 0x09;
 800429c:	f640 3309 	movw	r3, #2825	; 0xb09
 80042a0:	812b      	strh	r3, [r5, #8]
		pdynamic->sd_config__initial_phase_sd0            =
 80042a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
		phistpostprocess->valid_phase_low = 0x08;
 80042a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		pdynamic->sd_config__initial_phase_sd0            =
 80042a6:	7b1b      	ldrb	r3, [r3, #12]
 80042a8:	72ab      	strb	r3, [r5, #10]
		pdynamic->sd_config__initial_phase_sd1            =
 80042aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80042ac:	7bdb      	ldrb	r3, [r3, #15]
 80042ae:	72eb      	strb	r3, [r5, #11]
		phistpostprocess->valid_phase_low = 0x08;
 80042b0:	f648 0308 	movw	r3, #34824	; 0x8808
 80042b4:	8413      	strh	r3, [r2, #32]
		pdynamic->system__sequence_config =
 80042b6:	239b      	movs	r3, #155	; 0x9b
		psystem->system__mode_start =
 80042b8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
		pdynamic->system__sequence_config =
 80042ba:	746b      	strb	r3, [r5, #17]
		psystem->system__mode_start =
 80042bc:	2326      	movs	r3, #38	; 0x26
 80042be:	7113      	strb	r3, [r2, #4]
}
 80042c0:	4620      	mov	r0, r4
 80042c2:	b00f      	add	sp, #60	; 0x3c
 80042c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c8:	1b002100 	.word	0x1b002100
 80042cc:	00092900 	.word	0x00092900

080042d0 <VL53LX_preset_mode_histogram_medium_range>:
{
 80042d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d4:	b08d      	sub	sp, #52	; 0x34
 80042d6:	e9dd 8716 	ldrd	r8, r7, [sp, #88]	; 0x58
	status =
 80042da:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80042dc:	9404      	str	r4, [sp, #16]
 80042de:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80042e0:	9403      	str	r4, [sp, #12]
 80042e2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80042e4:	f8cd 8000 	str.w	r8, [sp]
 80042e8:	e9cd 7401 	strd	r7, r4, [sp, #4]
{
 80042ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80042f0:	4691      	mov	r9, r2
 80042f2:	469a      	mov	sl, r3
	status =
 80042f4:	f7ff ff0c 	bl	8004110 <VL53LX_preset_mode_histogram_ranging>
	if (status == VL53LX_ERROR_NONE) {
 80042f8:	4606      	mov	r6, r0
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d14b      	bne.n	8004396 <VL53LX_preset_mode_histogram_medium_range+0xc6>
		VL53LX_init_histogram_config_structure(
 80042fe:	2402      	movs	r4, #2
 8004300:	2501      	movs	r5, #1
 8004302:	f04f 0b03 	mov.w	fp, #3
 8004306:	4601      	mov	r1, r0
 8004308:	e9cd 0502 	strd	r0, r5, [sp, #8]
 800430c:	462b      	mov	r3, r5
 800430e:	462a      	mov	r2, r5
 8004310:	2007      	movs	r0, #7
 8004312:	f8cd 9020 	str.w	r9, [sp, #32]
 8004316:	e9cd 4b06 	strd	r4, fp, [sp, #24]
 800431a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800431e:	e9cd 4400 	strd	r4, r4, [sp]
 8004322:	f000 f9bf 	bl	80046a4 <VL53LX_init_histogram_config_structure>
		VL53LX_init_histogram_multizone_config_structure(
 8004326:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004328:	9400      	str	r4, [sp, #0]
 800432a:	4423      	add	r3, r4
 800432c:	e9cd b307 	strd	fp, r3, [sp, #28]
 8004330:	462a      	mov	r2, r5
 8004332:	462b      	mov	r3, r5
 8004334:	4631      	mov	r1, r6
 8004336:	2007      	movs	r0, #7
 8004338:	e9cd 5405 	strd	r5, r4, [sp, #20]
 800433c:	e9cd 5403 	strd	r5, r4, [sp, #12]
 8004340:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004344:	f000 f9f3 	bl	800472e <VL53LX_init_histogram_multizone_config_structure>
		VL53LX_copy_hist_cfg_to_static_cfg(
 8004348:	4643      	mov	r3, r8
 800434a:	4652      	mov	r2, sl
 800434c:	9700      	str	r7, [sp, #0]
 800434e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004350:	4648      	mov	r0, r9
 8004352:	f7ff fea9 	bl	80040a8 <VL53LX_copy_hist_cfg_to_static_cfg>
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8004356:	4a12      	ldr	r2, [pc, #72]	; (80043a0 <VL53LX_preset_mode_histogram_medium_range+0xd0>)
 8004358:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <VL53LX_preset_mode_histogram_medium_range+0xd4>)
 800435a:	e9c8 2300 	strd	r2, r3, [r8]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800435e:	f240 7333 	movw	r3, #1843	; 0x733
 8004362:	f8a8 3008 	strh.w	r3, [r8, #8]
		pgeneral->cal_config__vcsel_start = 0x05;
 8004366:	2305      	movs	r3, #5
 8004368:	f88a 3003 	strb.w	r3, [sl, #3]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800436c:	23f5      	movs	r3, #245	; 0xf5
 800436e:	f88a 3007 	strb.w	r3, [sl, #7]
		pdynamic->sd_config__woi_sd0 = 0x05;
 8004372:	f240 7305 	movw	r3, #1797	; 0x705
 8004376:	813b      	strh	r3, [r7, #8]
		pdynamic->sd_config__initial_phase_sd0            =
 8004378:	9b19      	ldr	r3, [sp, #100]	; 0x64
		phistpostprocess->valid_phase_low = 0x08;
 800437a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		pdynamic->sd_config__initial_phase_sd0            =
 800437c:	7b5b      	ldrb	r3, [r3, #13]
 800437e:	72bb      	strb	r3, [r7, #10]
		pdynamic->sd_config__initial_phase_sd1            =
 8004380:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004382:	7c1b      	ldrb	r3, [r3, #16]
 8004384:	72fb      	strb	r3, [r7, #11]
		phistpostprocess->valid_phase_low = 0x08;
 8004386:	f644 0308 	movw	r3, #18440	; 0x4808
 800438a:	8413      	strh	r3, [r2, #32]
		pdynamic->system__sequence_config =
 800438c:	239b      	movs	r3, #155	; 0x9b
		psystem->system__mode_start =
 800438e:	9a18      	ldr	r2, [sp, #96]	; 0x60
		pdynamic->system__sequence_config =
 8004390:	747b      	strb	r3, [r7, #17]
		psystem->system__mode_start =
 8004392:	2326      	movs	r3, #38	; 0x26
 8004394:	7113      	strb	r3, [r2, #4]
}
 8004396:	4630      	mov	r0, r6
 8004398:	b00d      	add	sp, #52	; 0x34
 800439a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800439e:	bf00      	nop
 80043a0:	28003600 	.word	0x28003600
 80043a4:	00054400 	.word	0x00054400

080043a8 <VL53LX_preset_mode_histogram_short_range>:
{
 80043a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ac:	b08d      	sub	sp, #52	; 0x34
 80043ae:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
	status =
 80043b2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80043b4:	9404      	str	r4, [sp, #16]
 80043b6:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80043b8:	9403      	str	r4, [sp, #12]
 80043ba:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80043bc:	9700      	str	r7, [sp, #0]
 80043be:	e9cd 6401 	strd	r6, r4, [sp, #4]
{
 80043c2:	4681      	mov	r9, r0
 80043c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80043c6:	4693      	mov	fp, r2
 80043c8:	469a      	mov	sl, r3
	status =
 80043ca:	f7ff fea1 	bl	8004110 <VL53LX_preset_mode_histogram_ranging>
	if (status == VL53LX_ERROR_NONE) {
 80043ce:	4605      	mov	r5, r0
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d149      	bne.n	8004468 <VL53LX_preset_mode_histogram_short_range+0xc0>
		VL53LX_init_histogram_config_structure(
 80043d4:	2401      	movs	r4, #1
 80043d6:	f04f 0802 	mov.w	r8, #2
 80043da:	2107      	movs	r1, #7
 80043dc:	4602      	mov	r2, r0
 80043de:	e9cd 0402 	strd	r0, r4, [sp, #8]
 80043e2:	4623      	mov	r3, r4
 80043e4:	4608      	mov	r0, r1
 80043e6:	f8cd b020 	str.w	fp, [sp, #32]
 80043ea:	e9cd 8806 	strd	r8, r8, [sp, #24]
 80043ee:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80043f2:	e9cd 4400 	strd	r4, r4, [sp]
 80043f6:	f000 f955 	bl	80046a4 <VL53LX_init_histogram_config_structure>
		VL53LX_init_histogram_multizone_config_structure(
 80043fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80043fc:	9400      	str	r4, [sp, #0]
 80043fe:	2107      	movs	r1, #7
 8004400:	4443      	add	r3, r8
 8004402:	4608      	mov	r0, r1
 8004404:	e9cd 8307 	strd	r8, r3, [sp, #28]
 8004408:	462a      	mov	r2, r5
 800440a:	4623      	mov	r3, r4
 800440c:	e9cd 4805 	strd	r4, r8, [sp, #20]
 8004410:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004414:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8004418:	f000 f989 	bl	800472e <VL53LX_init_histogram_multizone_config_structure>
		VL53LX_copy_hist_cfg_to_static_cfg(
 800441c:	463b      	mov	r3, r7
 800441e:	4652      	mov	r2, sl
 8004420:	9600      	str	r6, [sp, #0]
 8004422:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004424:	4658      	mov	r0, fp
 8004426:	f7ff fe3f 	bl	80040a8 <VL53LX_copy_hist_cfg_to_static_cfg>
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 800442a:	4a11      	ldr	r2, [pc, #68]	; (8004470 <VL53LX_preset_mode_histogram_short_range+0xc8>)
 800442c:	4b11      	ldr	r3, [pc, #68]	; (8004474 <VL53LX_preset_mode_histogram_short_range+0xcc>)
 800442e:	e9c7 2300 	strd	r2, r3, [r7]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8004432:	f240 5344 	movw	r3, #1348	; 0x544
 8004436:	813b      	strh	r3, [r7, #8]
		pgeneral->cal_config__vcsel_start = 0x03;
 8004438:	2303      	movs	r3, #3
 800443a:	f88a 3003 	strb.w	r3, [sl, #3]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800443e:	23f5      	movs	r3, #245	; 0xf5
 8004440:	f88a 3007 	strb.w	r3, [sl, #7]
		pdynamic->sd_config__woi_sd0 = 0x03;
 8004444:	f240 5303 	movw	r3, #1283	; 0x503
 8004448:	8133      	strh	r3, [r6, #8]
		pdynamic->sd_config__initial_phase_sd0            =
 800444a:	9b19      	ldr	r3, [sp, #100]	; 0x64
		psystem->system__mode_start =
 800444c:	9a18      	ldr	r2, [sp, #96]	; 0x60
		pdynamic->sd_config__initial_phase_sd0            =
 800444e:	7b9b      	ldrb	r3, [r3, #14]
 8004450:	72b3      	strb	r3, [r6, #10]
		pdynamic->sd_config__initial_phase_sd1            =
 8004452:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004454:	7c5b      	ldrb	r3, [r3, #17]
 8004456:	72f3      	strb	r3, [r6, #11]
		phistpostprocess->valid_phase_low = 0x08;
 8004458:	f642 0308 	movw	r3, #10248	; 0x2808
 800445c:	f8a9 3020 	strh.w	r3, [r9, #32]
		pdynamic->system__sequence_config =
 8004460:	23bb      	movs	r3, #187	; 0xbb
 8004462:	7473      	strb	r3, [r6, #17]
		psystem->system__mode_start =
 8004464:	2326      	movs	r3, #38	; 0x26
 8004466:	7113      	strb	r3, [r2, #4]
}
 8004468:	4628      	mov	r0, r5
 800446a:	b00d      	add	sp, #52	; 0x34
 800446c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004470:	37005200 	.word	0x37005200
 8004474:	00036600 	.word	0x00036600

08004478 <VL53LX_copy_hist_bins_to_static_cfg>:
{


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
 8004478:	7bc3      	ldrb	r3, [r0, #15]
{
 800447a:	b510      	push	{r4, lr}
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800447c:	748b      	strb	r3, [r1, #18]
			phistogram->histogram_config__high_amb_even_bin_0_1;
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800447e:	7c03      	ldrb	r3, [r0, #16]
 8004480:	74cb      	strb	r3, [r1, #19]
			phistogram->histogram_config__high_amb_even_bin_2_3;
	pstatic->sigma_estimator__sigma_ref_mm =
 8004482:	7c43      	ldrb	r3, [r0, #17]
 8004484:	750b      	strb	r3, [r1, #20]
			phistogram->histogram_config__high_amb_even_bin_4_5;

	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8004486:	7c83      	ldrb	r3, [r0, #18]
 8004488:	754b      	strb	r3, [r1, #21]
			phistogram->histogram_config__high_amb_odd_bin_0_1;

	pstatic->spare_host_config__static_config_spare_0 =
 800448a:	7cc3      	ldrb	r3, [r0, #19]
 800448c:	758b      	strb	r3, [r1, #22]
			phistogram->histogram_config__high_amb_odd_bin_2_3;
	pstatic->spare_host_config__static_config_spare_1 =
 800448e:	7d03      	ldrb	r3, [r0, #20]
 8004490:	75cb      	strb	r3, [r1, #23]
			phistogram->histogram_config__high_amb_odd_bin_4_5;

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8004492:	79c4      	ldrb	r4, [r0, #7]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8004494:	7a03      	ldrb	r3, [r0, #8]
 8004496:	eb03 2304 	add.w	r3, r3, r4, lsl #8
	pstatic->algo__range_ignore_threshold_mcps =
 800449a:	830b      	strh	r3, [r1, #24]

	pstatic->algo__range_ignore_valid_height_mm =
 800449c:	7a43      	ldrb	r3, [r0, #9]
 800449e:	768b      	strb	r3, [r1, #26]
			phistogram->histogram_config__mid_amb_even_bin_4_5;
	pstatic->algo__range_min_clip =
 80044a0:	7a83      	ldrb	r3, [r0, #10]
 80044a2:	76cb      	strb	r3, [r1, #27]
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
	pstatic->algo__consistency_check__tolerance =
 80044a4:	7ac3      	ldrb	r3, [r0, #11]
 80044a6:	770b      	strb	r3, [r1, #28]
			phistogram->histogram_config__mid_amb_odd_bin_2;

	pstatic->spare_host_config__static_config_spare_2 =
 80044a8:	7b03      	ldrb	r3, [r0, #12]
 80044aa:	774b      	strb	r3, [r1, #29]
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
	pstatic->sd_config__reset_stages_msb =
 80044ac:	7b43      	ldrb	r3, [r0, #13]
 80044ae:	778b      	strb	r3, [r1, #30]
			phistogram->histogram_config__mid_amb_odd_bin_5;

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80044b0:	7841      	ldrb	r1, [r0, #1]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80044b2:	7883      	ldrb	r3, [r0, #2]
 80044b4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	ptiming->range_config__sigma_thresh =
 80044b8:	8153      	strh	r3, [r2, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80044ba:	78c1      	ldrb	r1, [r0, #3]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80044bc:	7903      	ldrb	r3, [r0, #4]
 80044be:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80044c2:	8193      	strh	r3, [r2, #12]

	ptiming->range_config__valid_phase_low =
 80044c4:	7943      	ldrb	r3, [r0, #5]
 80044c6:	7393      	strb	r3, [r2, #14]
			phistogram->histogram_config__low_amb_odd_bin_2_3;
	ptiming->range_config__valid_phase_high =
 80044c8:	7983      	ldrb	r3, [r0, #6]
 80044ca:	73d3      	strb	r3, [r2, #15]
			phistogram->histogram_config__low_amb_odd_bin_4_5;

	LOG_FUNCTION_END(0);

}
 80044cc:	bd10      	pop	{r4, pc}

080044ce <VL53LX_init_version>:
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 80044ce:	2300      	movs	r3, #0
 80044d0:	6243      	str	r3, [r0, #36]	; 0x24
 80044d2:	f240 1301 	movw	r3, #257	; 0x101
 80044d6:	8503      	strh	r3, [r0, #40]	; 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 80044d8:	2301      	movs	r3, #1
 80044da:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
 80044de:	4770      	bx	lr

080044e0 <VL53LX_init_ll_driver_state>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);

	pstate->cfg_device_state  = device_state;
	pstate->cfg_stream_count  = 0;
 80044e0:	2300      	movs	r3, #0
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80044e2:	2202      	movs	r2, #2
	pstate->cfg_device_state  = device_state;
 80044e4:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
	pstate->cfg_stream_count  = 0;
 80044e8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80044ec:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	pstate->cfg_timing_status = 0;
 80044f0:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	pstate->cfg_zone_id       = 0;
 80044f4:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32

	pstate->rd_device_state   = device_state;
 80044f8:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
	pstate->rd_stream_count   = 0;
 80044fc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8004500:	f880 2037 	strb.w	r2, [r0, #55]	; 0x37
	pstate->rd_timing_status  = 0;
 8004504:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	pstate->rd_zone_id        = 0;
 8004508:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

}
 800450c:	4770      	bx	lr

0800450e <VL53LX_check_ll_driver_rd_state>:
}


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 800450e:	b570      	push	{r4, r5, r6, lr}
	device_stream_count = psys_results->result__stream_count;



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 8004510:	f890 339c 	ldrb.w	r3, [r0, #924]	; 0x39c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 8004514:	f890 239e 	ldrb.w	r2, [r0, #926]	; 0x39e
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;

	if (histogram_mode)
 8004518:	f013 0102 	ands.w	r1, r3, #2
		device_gph_id = (phist_data->result__interrupt_status &
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800451c:	bf18      	it	ne
 800451e:	f890 2474 	ldrbne.w	r2, [r0, #1140]	; 0x474



	if (!((pdev->sys_ctrl.system__mode_start &
 8004522:	f013 0320 	ands.w	r3, r3, #32
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8004526:	ea4f 1222 	mov.w	r2, r2, asr #4
{
 800452a:	4604      	mov	r4, r0
		device_gph_id = (phist_data->result__interrupt_status &
 800452c:	f002 0202 	and.w	r2, r2, #2
	if (!((pdev->sys_ctrl.system__mode_start &
 8004530:	d03a      	beq.n	80045a8 <VL53LX_check_ll_driver_rd_state+0x9a>
			psys_results->result__range_status &
 8004532:	f890 339f 	ldrb.w	r3, [r0, #927]	; 0x39f
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 8004536:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
 800453a:	2806      	cmp	r0, #6
 800453c:	d108      	bne.n	8004550 <VL53LX_check_ll_driver_rd_state+0x42>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800453e:	bb99      	cbnz	r1, 80045a8 <VL53LX_check_ll_driver_rd_state+0x9a>
			if (device_range_status !=
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	2b12      	cmp	r3, #18
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8004546:	bf0c      	ite	eq
 8004548:	2000      	moveq	r0, #0
 800454a:	f06f 0010 	mvnne.w	r0, #16


ENDFUNC:
	LOG_FUNCTION_END(status);
	return status;
}
 800454e:	bd70      	pop	{r4, r5, r6, pc}
	device_stream_count = psys_results->result__stream_count;
 8004550:	f894 13a1 	ldrb.w	r1, [r4, #929]	; 0x3a1
		if (pstate->rd_stream_count != device_stream_count)
 8004554:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8004558:	428b      	cmp	r3, r1
		if (pstate->rd_gph_id != device_gph_id)
 800455a:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 800455e:	bf14      	ite	ne
 8004560:	f06f 0011 	mvnne.w	r0, #17
 8004564:	2000      	moveq	r0, #0
		if (pstate->rd_gph_id != device_gph_id)
 8004566:	4293      	cmp	r3, r2
 8004568:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800456c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004570:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		expected_gph_id =
 8004574:	f242 2583 	movw	r5, #8835	; 0x2283
		expected_stream_count =
 8004578:	f242 2682 	movw	r6, #8834	; 0x2282
		expected_gph_id =
 800457c:	5d5d      	ldrb	r5, [r3, r5]
		if (expected_stream_count != device_stream_count) {
 800457e:	5d9b      	ldrb	r3, [r3, r6]
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8004580:	bf18      	it	ne
 8004582:	f06f 0012 	mvnne.w	r0, #18
		if (expected_stream_count != device_stream_count) {
 8004586:	428b      	cmp	r3, r1
 8004588:	d006      	beq.n	8004598 <VL53LX_check_ll_driver_rd_state+0x8a>
			if (!((pdev->zone_cfg.active_zones == 0) &&
 800458a:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 800458e:	b943      	cbnz	r3, 80045a2 <VL53LX_check_ll_driver_rd_state+0x94>
 8004590:	29ff      	cmp	r1, #255	; 0xff
				status =
 8004592:	bf18      	it	ne
 8004594:	f06f 0013 	mvnne.w	r0, #19
		if (expected_gph_id != device_gph_id)
 8004598:	42aa      	cmp	r2, r5
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800459a:	bf18      	it	ne
 800459c:	f06f 0014 	mvnne.w	r0, #20
 80045a0:	e7d5      	b.n	800454e <VL53LX_check_ll_driver_rd_state+0x40>
				status =
 80045a2:	f06f 0013 	mvn.w	r0, #19
 80045a6:	e7f7      	b.n	8004598 <VL53LX_check_ll_driver_rd_state+0x8a>
	VL53LX_Error         status = VL53LX_ERROR_NONE;
 80045a8:	2000      	movs	r0, #0
 80045aa:	e7d0      	b.n	800454e <VL53LX_check_ll_driver_rd_state+0x40>

080045ac <VL53LX_copy_rtn_good_spads_to_buffer>:
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 80045ac:	7c03      	ldrb	r3, [r0, #16]
 80045ae:	700b      	strb	r3, [r1, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 80045b0:	7c43      	ldrb	r3, [r0, #17]
 80045b2:	704b      	strb	r3, [r1, #1]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 80045b4:	7c83      	ldrb	r3, [r0, #18]
 80045b6:	708b      	strb	r3, [r1, #2]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 80045b8:	7cc3      	ldrb	r3, [r0, #19]
 80045ba:	70cb      	strb	r3, [r1, #3]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 80045bc:	7d03      	ldrb	r3, [r0, #20]
 80045be:	710b      	strb	r3, [r1, #4]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 80045c0:	7d43      	ldrb	r3, [r0, #21]
 80045c2:	714b      	strb	r3, [r1, #5]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 80045c4:	7d83      	ldrb	r3, [r0, #22]
 80045c6:	718b      	strb	r3, [r1, #6]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 80045c8:	7dc3      	ldrb	r3, [r0, #23]
 80045ca:	71cb      	strb	r3, [r1, #7]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 80045cc:	7e03      	ldrb	r3, [r0, #24]
 80045ce:	720b      	strb	r3, [r1, #8]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 80045d0:	7e43      	ldrb	r3, [r0, #25]
 80045d2:	724b      	strb	r3, [r1, #9]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 80045d4:	7e83      	ldrb	r3, [r0, #26]
 80045d6:	728b      	strb	r3, [r1, #10]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 80045d8:	7ec3      	ldrb	r3, [r0, #27]
 80045da:	72cb      	strb	r3, [r1, #11]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 80045dc:	7f03      	ldrb	r3, [r0, #28]
 80045de:	730b      	strb	r3, [r1, #12]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 80045e0:	7f43      	ldrb	r3, [r0, #29]
 80045e2:	734b      	strb	r3, [r1, #13]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 80045e4:	7f83      	ldrb	r3, [r0, #30]
 80045e6:	738b      	strb	r3, [r1, #14]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 80045e8:	7fc3      	ldrb	r3, [r0, #31]
 80045ea:	73cb      	strb	r3, [r1, #15]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 80045ec:	f890 3020 	ldrb.w	r3, [r0, #32]
 80045f0:	740b      	strb	r3, [r1, #16]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 80045f2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80045f6:	744b      	strb	r3, [r1, #17]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 80045f8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80045fc:	748b      	strb	r3, [r1, #18]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 80045fe:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8004602:	74cb      	strb	r3, [r1, #19]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8004604:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004608:	750b      	strb	r3, [r1, #20]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800460a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800460e:	754b      	strb	r3, [r1, #21]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8004610:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8004614:	758b      	strb	r3, [r1, #22]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8004616:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800461a:	75cb      	strb	r3, [r1, #23]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800461c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8004620:	760b      	strb	r3, [r1, #24]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8004622:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8004626:	764b      	strb	r3, [r1, #25]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8004628:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800462c:	768b      	strb	r3, [r1, #26]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800462e:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8004632:	76cb      	strb	r3, [r1, #27]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8004634:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004638:	770b      	strb	r3, [r1, #28]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800463a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800463e:	774b      	strb	r3, [r1, #29]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8004640:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8004644:	778b      	strb	r3, [r1, #30]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8004646:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800464a:	77cb      	strb	r3, [r1, #31]
}
 800464c:	4770      	bx	lr

0800464e <VL53LX_init_system_results>:
void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{


	pdata->result__interrupt_status                       = 0xFF;
 800464e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004652:	8003      	strh	r3, [r0, #0]
	pdata->result__range_status                           = 0xFF;
 8004654:	8043      	strh	r3, [r0, #2]
	pdata->result__report_status                          = 0xFF;
	pdata->result__stream_count                           = 0xFF;
 8004656:	8083      	strh	r3, [r0, #4]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 8004658:	80c3      	strh	r3, [r0, #6]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800465a:	8103      	strh	r3, [r0, #8]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800465c:	8143      	strh	r3, [r0, #10]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800465e:	8183      	strh	r3, [r0, #12]
	pdata->result__phase_sd0                              = 0xFFFF;
 8004660:	81c3      	strh	r3, [r0, #14]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8004662:	8203      	strh	r3, [r0, #16]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8004664:	8243      	strh	r3, [r0, #18]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8004666:	8283      	strh	r3, [r0, #20]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 8004668:	82c3      	strh	r3, [r0, #22]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800466a:	8303      	strh	r3, [r0, #24]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800466c:	8343      	strh	r3, [r0, #26]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800466e:	8383      	strh	r3, [r0, #28]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 8004670:	83c3      	strh	r3, [r0, #30]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8004672:	8403      	strh	r3, [r0, #32]
	pdata->result__phase_sd1                              = 0xFFFF;
 8004674:	8443      	strh	r3, [r0, #34]	; 0x22
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8004676:	8483      	strh	r3, [r0, #36]	; 0x24
	pdata->result__spare_0_sd1                            = 0xFFFF;
 8004678:	84c3      	strh	r3, [r0, #38]	; 0x26
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800467a:	8503      	strh	r3, [r0, #40]	; 0x28
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800467c:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	pdata->result__spare_3_sd1                            = 0xFF;

}
 8004680:	4770      	bx	lr

08004682 <V53L1_init_zone_results_structure>:


	uint8_t  z = 0;
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 8004682:	2310      	movs	r3, #16
{
 8004684:	b510      	push	{r4, lr}
	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 8004686:	700b      	strb	r3, [r1, #0]
	pdata->active_zones = active_zones;
 8004688:	7048      	strb	r0, [r1, #1]
 800468a:	f501 6288 	add.w	r2, r1, #1088	; 0x440

	for (z = 0; z < pdata->max_zones; z++) {
		pobjects = &(pdata->VL53LX_p_003[z]);
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 800468e:	2303      	movs	r3, #3
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8004690:	2404      	movs	r4, #4
		pobjects->active_objects   = 0;
 8004692:	2000      	movs	r0, #0
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 8004694:	710b      	strb	r3, [r1, #4]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8004696:	714b      	strb	r3, [r1, #5]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8004698:	720c      	strb	r4, [r1, #8]
		pobjects->active_objects   = 0;
 800469a:	7248      	strb	r0, [r1, #9]
 800469c:	3144      	adds	r1, #68	; 0x44
	for (z = 0; z < pdata->max_zones; z++) {
 800469e:	4291      	cmp	r1, r2
 80046a0:	d1f8      	bne.n	8004694 <V53L1_init_zone_results_structure+0x12>
	}
}
 80046a2:	bd10      	pop	{r4, pc}

080046a4 <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 80046a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 80046a8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 80046ac:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80046b0:	f89d 201c 	ldrb.w	r2, [sp, #28]
{
 80046b4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80046b8:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 80046bc:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
 80046c0:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 80046c4:	f89d 5020 	ldrb.w	r5, [sp, #32]
{
 80046c8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
			(even_bin5 << 4) + even_bin4;
 80046ca:	eb06 1602 	add.w	r6, r6, r2, lsl #4
			(odd_bin1 << 4) + odd_bin0;
 80046ce:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 80046d2:	f884 800b 	strb.w	r8, [r4, #11]
			(even_bin3 << 4) + even_bin2;
 80046d6:	b2db      	uxtb	r3, r3
			(even_bin1 << 4) + even_bin0;
 80046d8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
			(odd_bin1 << 4) + odd_bin0;
 80046dc:	eb05 1502 	add.w	r5, r5, r2, lsl #4
			(odd_bin3 << 4) + odd_bin2;
 80046e0:	eb08 1007 	add.w	r0, r8, r7, lsl #4
			(odd_bin5 << 4) + odd_bin4;
 80046e4:	eb0e 120c 	add.w	r2, lr, ip, lsl #4
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 80046e8:	eb07 170e 	add.w	r7, r7, lr, lsl #4
			(even_bin1 << 4) + even_bin0;
 80046ec:	b2c9      	uxtb	r1, r1
			(even_bin5 << 4) + even_bin4;
 80046ee:	b2f6      	uxtb	r6, r6
			(odd_bin1 << 4) + odd_bin0;
 80046f0:	b2ed      	uxtb	r5, r5
	pdata->histogram_config__low_amb_even_bin_2_3  =
 80046f2:	70a3      	strb	r3, [r4, #2]
			(odd_bin3 << 4) + odd_bin2;
 80046f4:	b2c0      	uxtb	r0, r0
			(odd_bin5 << 4) + odd_bin4;
 80046f6:	b2d2      	uxtb	r2, r2
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 80046f8:	7223      	strb	r3, [r4, #8]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 80046fa:	7327      	strb	r7, [r4, #12]

	pdata->histogram_config__user_bin_offset       = 0x00;

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
	pdata->histogram_config__high_amb_even_bin_2_3 =
 80046fc:	7423      	strb	r3, [r4, #16]
	pdata->histogram_config__user_bin_offset       = 0x00;
 80046fe:	2700      	movs	r7, #0
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8004700:	f64f 73ff 	movw	r3, #65535	; 0xffff
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8004704:	7061      	strb	r1, [r4, #1]
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8004706:	70e6      	strb	r6, [r4, #3]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8004708:	7125      	strb	r5, [r4, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800470a:	7160      	strb	r0, [r4, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800470c:	71a2      	strb	r2, [r4, #6]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800470e:	71e1      	strb	r1, [r4, #7]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 8004710:	7266      	strb	r6, [r4, #9]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 8004712:	72a5      	strb	r5, [r4, #10]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8004714:	f884 c00d 	strb.w	ip, [r4, #13]
	pdata->histogram_config__user_bin_offset       = 0x00;
 8004718:	73a7      	strb	r7, [r4, #14]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800471a:	73e1      	strb	r1, [r4, #15]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800471c:	7466      	strb	r6, [r4, #17]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800471e:	74a5      	strb	r5, [r4, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8004720:	74e0      	strb	r0, [r4, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 8004722:	7522      	strb	r2, [r4, #20]
	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8004724:	82e3      	strh	r3, [r4, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8004726:	8323      	strh	r3, [r4, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8004728:	7027      	strb	r7, [r4, #0]

}
 800472a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800472e <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 800472e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004730:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004732:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
 8004736:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 800473a:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
 800473e:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8004742:	f89d 7014 	ldrb.w	r7, [sp, #20]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8004746:	72e6      	strb	r6, [r4, #11]
			(even_bin3 << 4) + even_bin2;
 8004748:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800474c:	b2db      	uxtb	r3, r3
			(even_bin1 << 4) + even_bin0;
 800474e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8004752:	b2c9      	uxtb	r1, r1
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8004754:	70a3      	strb	r3, [r4, #2]
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8004756:	7163      	strb	r3, [r4, #5]
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8004758:	7223      	strb	r3, [r4, #8]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800475a:	eb0e 1305 	add.w	r3, lr, r5, lsl #4
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800475e:	7061      	strb	r1, [r4, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8004760:	7121      	strb	r1, [r4, #4]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8004762:	71e1      	strb	r1, [r4, #7]
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 8004764:	72a1      	strb	r1, [r4, #10]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8004766:	7323      	strb	r3, [r4, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;

	pdata->histogram_config__user_bin_offset       = 0x00;

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 8004768:	f89d 1020 	ldrb.w	r1, [sp, #32]
 800476c:	f89d 301c 	ldrb.w	r3, [sp, #28]
			(even_bin5 << 4) + even_bin4;
 8004770:	f89d 2018 	ldrb.w	r2, [sp, #24]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8004774:	f884 c00d 	strb.w	ip, [r4, #13]
			(odd_bin1 << 4) + odd_bin0;
 8004778:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800477c:	b2db      	uxtb	r3, r3
			(even_bin5 << 4) + even_bin4;
 800477e:	eb07 1702 	add.w	r7, r7, r2, lsl #4
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 8004782:	eb06 160e 	add.w	r6, r6, lr, lsl #4
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 8004786:	eb05 150c 	add.w	r5, r5, ip, lsl #4
			(even_bin5 << 4) + even_bin4;
 800478a:	b2ff      	uxtb	r7, r7
	pdata->histogram_config__user_bin_offset       = 0x00;
 800478c:	2200      	movs	r2, #0
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800478e:	73e3      	strb	r3, [r4, #15]
			(odd_bin3 << 4) + odd_bin2;
 8004790:	b2f6      	uxtb	r6, r6
			(odd_bin5 << 4) + odd_bin4;
 8004792:	b2ed      	uxtb	r5, r5

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 8004794:	74a3      	strb	r3, [r4, #18]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8004796:	f64f 73ff 	movw	r3, #65535	; 0xffff
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800479a:	70e7      	strb	r7, [r4, #3]
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800479c:	71a7      	strb	r7, [r4, #6]
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800479e:	7267      	strb	r7, [r4, #9]
	pdata->histogram_config__user_bin_offset       = 0x00;
 80047a0:	73a2      	strb	r2, [r4, #14]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 80047a2:	7426      	strb	r6, [r4, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 80047a4:	7465      	strb	r5, [r4, #17]
		= pdata->histogram_config__high_amb_even_bin_2_3;
 80047a6:	74e6      	strb	r6, [r4, #19]
		= pdata->histogram_config__high_amb_even_bin_4_5;
 80047a8:	7525      	strb	r5, [r4, #20]
	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 80047aa:	82e3      	strh	r3, [r4, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 80047ac:	8323      	strh	r3, [r4, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 80047ae:	7022      	strb	r2, [r4, #0]
}
 80047b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047b2 <VL53LX_init_xtalk_bin_data_struct>:



	uint16_t          i = 0;

	pdata->zone_id                   = 0;
 80047b2:	2300      	movs	r3, #0
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;

	pdata->phasecal_result__reference_phase   = 0;
	pdata->phasecal_result__vcsel_start       = 0;
	pdata->cal_config__vcsel_start            = 0;
 80047b4:	e9c2 330f 	strd	r3, r3, [r2, #60]	; 0x3c
{
 80047b8:	b530      	push	{r4, r5, lr}
	pdata->time_stamp                = 0;
 80047ba:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	pdata->zone_id                   = 0;
 80047be:	7013      	strb	r3, [r2, #0]
	pdata->time_stamp                = 0;
 80047c0:	6053      	str	r3, [r2, #4]
 80047c2:	8114      	strh	r4, [r2, #8]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 80047c4:	7291      	strb	r1, [r2, #10]

	pdata->vcsel_width                        = 0;
	pdata->VL53LX_p_015                = 0;
 80047c6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
		if (i < VL53LX_p_021)
			pdata->bin_data[i] = bin_value;
		else
			pdata->bin_data[i] = 0;
 80047ca:	461d      	mov	r5, r3
		if (i < VL53LX_p_021)
 80047cc:	b29c      	uxth	r4, r3
 80047ce:	428c      	cmp	r4, r1
 80047d0:	ea4f 0483 	mov.w	r4, r3, lsl #2
			pdata->bin_data[i] = bin_value;
 80047d4:	4414      	add	r4, r2
 80047d6:	f103 0301 	add.w	r3, r3, #1
 80047da:	bf34      	ite	cc
 80047dc:	60e0      	strcc	r0, [r4, #12]
			pdata->bin_data[i] = 0;
 80047de:	60e5      	strcs	r5, [r4, #12]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 80047e0:	2b0c      	cmp	r3, #12
 80047e2:	d1f3      	bne.n	80047cc <VL53LX_init_xtalk_bin_data_struct+0x1a>
	}
}
 80047e4:	bd30      	pop	{r4, r5, pc}

080047e6 <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80047e6:	4411      	add	r1, r2
	uint16_t   i    = 0;
	uint16_t   VL53LX_p_003 = 0;

	VL53LX_p_003 =  ip_value;

	for (i = 0; i < count; i++) {
 80047e8:	4291      	cmp	r1, r2
 80047ea:	d100      	bne.n	80047ee <VL53LX_i2c_encode_uint16_t+0x8>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
		VL53LX_p_003 = VL53LX_p_003 >> 8;
	}
}
 80047ec:	4770      	bx	lr
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80047ee:	f801 0d01 	strb.w	r0, [r1, #-1]!
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80047f2:	0a00      	lsrs	r0, r0, #8
 80047f4:	e7f8      	b.n	80047e8 <VL53LX_i2c_encode_uint16_t+0x2>

080047f6 <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80047f6:	180b      	adds	r3, r1, r0


	uint16_t   value = 0x00;
 80047f8:	2000      	movs	r0, #0

	while (count-- > 0)
 80047fa:	4299      	cmp	r1, r3
 80047fc:	d100      	bne.n	8004800 <VL53LX_i2c_decode_uint16_t+0xa>
		value = (value << 8) | (uint16_t)*pbuffer++;

	return value;
}
 80047fe:	4770      	bx	lr
		value = (value << 8) | (uint16_t)*pbuffer++;
 8004800:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004804:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8004808:	b280      	uxth	r0, r0
 800480a:	e7f6      	b.n	80047fa <VL53LX_i2c_decode_uint16_t+0x4>

0800480c <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800480c:	4411      	add	r1, r2
	uint16_t   i    = 0;
	int16_t    VL53LX_p_003 = 0;

	VL53LX_p_003 =  ip_value;

	for (i = 0; i < count; i++) {
 800480e:	4291      	cmp	r1, r2
 8004810:	d100      	bne.n	8004814 <VL53LX_i2c_encode_int16_t+0x8>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
		VL53LX_p_003 = VL53LX_p_003 >> 8;
	}
}
 8004812:	4770      	bx	lr
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8004814:	f801 0d01 	strb.w	r0, [r1, #-1]!
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8004818:	1200      	asrs	r0, r0, #8
 800481a:	e7f8      	b.n	800480e <VL53LX_i2c_encode_int16_t+0x2>

0800481c <VL53LX_i2c_decode_int16_t>:


	int16_t    value = 0x00;


	if (*pbuffer >= 0x80)
 800481c:	f991 3000 	ldrsb.w	r3, [r1]
 8004820:	17db      	asrs	r3, r3, #31
 8004822:	b21b      	sxth	r3, r3
 8004824:	4408      	add	r0, r1
		value = 0xFFFF;

	while (count-- > 0)
 8004826:	4281      	cmp	r1, r0
 8004828:	d101      	bne.n	800482e <VL53LX_i2c_decode_int16_t+0x12>
		value = (value << 8) | (int16_t)*pbuffer++;

	return value;
}
 800482a:	4618      	mov	r0, r3
 800482c:	4770      	bx	lr
		value = (value << 8) | (int16_t)*pbuffer++;
 800482e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004832:	b25b      	sxtb	r3, r3
 8004834:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8004838:	e7f5      	b.n	8004826 <VL53LX_i2c_decode_int16_t+0xa>

0800483a <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800483a:	4411      	add	r1, r2
	uint16_t   i    = 0;
	uint32_t   VL53LX_p_003 = 0;

	VL53LX_p_003 =  ip_value;

	for (i = 0; i < count; i++) {
 800483c:	4291      	cmp	r1, r2
 800483e:	d100      	bne.n	8004842 <VL53LX_i2c_encode_uint32_t+0x8>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
		VL53LX_p_003 = VL53LX_p_003 >> 8;
	}
}
 8004840:	4770      	bx	lr
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8004842:	f801 0d01 	strb.w	r0, [r1, #-1]!
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8004846:	0a00      	lsrs	r0, r0, #8
 8004848:	e7f8      	b.n	800483c <VL53LX_i2c_encode_uint32_t+0x2>

0800484a <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800484a:	180b      	adds	r3, r1, r0


	uint32_t   value = 0x00;
 800484c:	2000      	movs	r0, #0

	while (count-- > 0)
 800484e:	4299      	cmp	r1, r3
 8004850:	d100      	bne.n	8004854 <VL53LX_i2c_decode_uint32_t+0xa>
		value = (value << 8) | (uint32_t)*pbuffer++;

	return value;
}
 8004852:	4770      	bx	lr
		value = (value << 8) | (uint32_t)*pbuffer++;
 8004854:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004858:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800485c:	e7f7      	b.n	800484e <VL53LX_i2c_decode_uint32_t+0x4>

0800485e <VL53LX_i2c_decode_int32_t>:


	int32_t    value = 0x00;


	if (*pbuffer >= 0x80)
 800485e:	f991 3000 	ldrsb.w	r3, [r1]
 8004862:	4408      	add	r0, r1
 8004864:	17db      	asrs	r3, r3, #31
		value = 0xFFFFFFFF;

	while (count-- > 0)
 8004866:	4281      	cmp	r1, r0
 8004868:	d101      	bne.n	800486e <VL53LX_i2c_decode_int32_t+0x10>
		value = (value << 8) | (int32_t)*pbuffer++;

	return value;
}
 800486a:	4618      	mov	r0, r3
 800486c:	4770      	bx	lr
		value = (value << 8) | (int32_t)*pbuffer++;
 800486e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004872:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8004876:	e7f6      	b.n	8004866 <VL53LX_i2c_decode_int32_t+0x8>

08004878 <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8004878:	460a      	mov	r2, r1


	VL53LX_Error status         = VL53LX_ERROR_NONE;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	pdev->sys_ctrl.firmware__enable = value;
 800487a:	f880 139a 	strb.w	r1, [r0, #922]	; 0x39a

	status = VL53LX_WrByte(
 800487e:	2185      	movs	r1, #133	; 0x85
 8004880:	f7fc be5c 	b.w	800153c <VL53LX_WrByte>

08004884 <VL53LX_enable_firmware>:

	VL53LX_Error status       = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 8004884:	2101      	movs	r1, #1
 8004886:	f7ff bff7 	b.w	8004878 <VL53LX_set_firmware_enable_register>

0800488a <VL53LX_disable_firmware>:

	VL53LX_Error status       = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 800488a:	2100      	movs	r1, #0
 800488c:	f7ff bff4 	b.w	8004878 <VL53LX_set_firmware_enable_register>

08004890 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8004890:	460a      	mov	r2, r1


	VL53LX_Error status       = VL53LX_ERROR_NONE;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	pdev->sys_ctrl.power_management__go1_power_force = value;
 8004892:	f880 1398 	strb.w	r1, [r0, #920]	; 0x398

	status = VL53LX_WrByte(
 8004896:	2183      	movs	r1, #131	; 0x83
 8004898:	f7fc be50 	b.w	800153c <VL53LX_WrByte>

0800489c <VL53LX_enable_powerforce>:

	VL53LX_Error status       = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 800489c:	2101      	movs	r1, #1
 800489e:	f7ff bff7 	b.w	8004890 <VL53LX_set_powerforce_register>

080048a2 <VL53LX_disable_powerforce>:

	VL53LX_Error status       = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 80048a2:	2100      	movs	r1, #0
 80048a4:	f7ff bff4 	b.w	8004890 <VL53LX_set_powerforce_register>

080048a8 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 80048a8:	b538      	push	{r3, r4, r5, lr}
 80048aa:	460d      	mov	r5, r1

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 80048ac:	f001 fa74 	bl	8005d98 <VL53LX_calc_pll_period_us>
 80048b0:	4604      	mov	r4, r0



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 80048b2:	4628      	mov	r0, r5
 80048b4:	f001 fbae 	bl	8006014 <VL53LX_decode_vcsel_period>



	macro_period_us =
 80048b8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80048bc:	4363      	muls	r3, r4
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 80048be:	099b      	lsrs	r3, r3, #6

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 80048c0:	4358      	muls	r0, r3


	LOG_FUNCTION_END(0);

	return macro_period_us;
}
 80048c2:	0980      	lsrs	r0, r0, #6
 80048c4:	bd38      	pop	{r3, r4, r5, pc}

080048c6 <VL53LX_calc_range_ignore_threshold>:



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);

	if (x_gradient < 0)
 80048c6:	2900      	cmp	r1, #0
		x_gradient_int = x_gradient * -1;
 80048c8:	bfba      	itte	lt
 80048ca:	4249      	neglt	r1, r1
 80048cc:	b209      	sxthlt	r1, r1
	int16_t    x_gradient_int           = 0;
 80048ce:	2100      	movge	r1, #0

	if (y_gradient < 0)
 80048d0:	2a00      	cmp	r2, #0
		y_gradient_int = y_gradient * -1;
 80048d2:	bfba      	itte	lt
 80048d4:	4252      	neglt	r2, r2
 80048d6:	b212      	sxthlt	r2, r2
	int16_t    y_gradient_int           = 0;
 80048d8:	2200      	movge	r2, #0





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 80048da:	4411      	add	r1, r2
{
 80048dc:	b510      	push	{r4, lr}
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80048de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 80048e2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80048e6:	0100      	lsls	r0, r0, #4
	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 80048e8:	0149      	lsls	r1, r1, #5
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 80048ea:	fb90 f0f4 	sdiv	r0, r0, r4
	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80048ee:	fb91 f1f2 	sdiv	r1, r1, r2



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 80048f2:	4408      	add	r0, r1



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 80048f4:	4358      	muls	r0, r3

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 80048f6:	3010      	adds	r0, #16
 80048f8:	2320      	movs	r3, #32
 80048fa:	fb90 f0f3 	sdiv	r0, r0, r3



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 80048fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004902:	4298      	cmp	r0, r3
 8004904:	bfa8      	it	ge
 8004906:	4618      	movge	r0, r3
}
 8004908:	b280      	uxth	r0, r0
 800490a:	bd10      	pop	{r4, pc}

0800490c <VL53LX_calc_timeout_mclks>:

	uint32_t timeout_mclks   = 0;

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800490c:	b121      	cbz	r1, 8004918 <VL53LX_calc_timeout_mclks+0xc>
		timeout_mclks = 0;
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800490e:	084b      	lsrs	r3, r1, #1
 8004910:	eb03 3000 	add.w	r0, r3, r0, lsl #12
		timeout_mclks   =
 8004914:	fbb0 f1f1 	udiv	r1, r0, r1
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
}
 8004918:	4608      	mov	r0, r1
 800491a:	4770      	bx	lr

0800491c <VL53LX_calc_timeout_us>:
	uint64_t tmp            = 0;

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
	tmp += 0x00800;
 800491c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004920:	2300      	movs	r3, #0
 8004922:	fbe1 2300 	umlal	r2, r3, r1, r0
	tmp  = tmp >> 12;
 8004926:	0b10      	lsrs	r0, r2, #12


	LOG_FUNCTION_END(0);

	return timeout_us;
}
 8004928:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800492c:	4770      	bx	lr

0800492e <VL53LX_calc_crosstalk_plane_offset_with_margin>:
	uint32_t plane_offset_with_margin = 0;
	int32_t  plane_offset_kcps_temp   = 0;

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
 800492e:	4408      	add	r0, r1

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;

}
 8004930:	f380 0012 	usat	r0, #18, r0
 8004934:	4770      	bx	lr

08004936 <VL53LX_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_mclks > 0) {
 8004936:	b150      	cbz	r0, 800494e <VL53LX_encode_timeout+0x18>
		ls_byte = timeout_mclks - 1;
 8004938:	3801      	subs	r0, #1
 800493a:	2300      	movs	r3, #0

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800493c:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 8004940:	b29a      	uxth	r2, r3
 8004942:	f103 0301 	add.w	r3, r3, #1
 8004946:	d103      	bne.n	8004950 <VL53LX_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 8004948:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 800494c:	b280      	uxth	r0, r0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;
}
 800494e:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 8004950:	0840      	lsrs	r0, r0, #1
 8004952:	e7f3      	b.n	800493c <VL53LX_encode_timeout+0x6>

08004954 <VL53LX_calc_encoded_timeout>:
{
 8004954:	b508      	push	{r3, lr}
	timeout_mclks   =
 8004956:	f7ff ffd9 	bl	800490c <VL53LX_calc_timeout_mclks>
}
 800495a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	timeout_encoded =
 800495e:	f7ff bfea 	b.w	8004936 <VL53LX_encode_timeout>

08004962 <VL53LX_decode_timeout>:
{


	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8004962:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8004964:	0a00      	lsrs	r0, r0, #8
 8004966:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 800496a:	3001      	adds	r0, #1
 800496c:	4770      	bx	lr

0800496e <VL53LX_calc_decoded_timeout_us>:
{
 800496e:	b508      	push	{r3, lr}
	timeout_mclks =
 8004970:	f7ff fff7 	bl	8004962 <VL53LX_decode_timeout>
	tmp += 0x00800;
 8004974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004978:	2300      	movs	r3, #0
 800497a:	fbe0 2301 	umlal	r2, r3, r0, r1
	tmp  = tmp >> 12;
 800497e:	0b10      	lsrs	r0, r2, #12
}
 8004980:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8004984:	bd08      	pop	{r3, pc}

08004986 <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 8004986:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800498a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800498c:	4681      	mov	r9, r0
 800498e:	4688      	mov	r8, r1
 8004990:	4617      	mov	r7, r2
	uint32_t timeout_mclks      = 0;
	uint16_t timeout_encoded    = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8004992:	461d      	mov	r5, r3
 8004994:	b38b      	cbz	r3, 80049fa <VL53LX_calc_timeout_register_values+0x74>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
	} else {

		macro_period_us =
 8004996:	4618      	mov	r0, r3
 8004998:	79a1      	ldrb	r1, [r4, #6]
 800499a:	f7ff ff85 	bl	80048a8 <VL53LX_calc_macro_period_us>
 800499e:	4606      	mov	r6, r0
				VL53LX_calc_macro_period_us(
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
 80049a0:	4601      	mov	r1, r0
 80049a2:	4648      	mov	r0, r9
 80049a4:	f7ff ffb2 	bl	800490c <VL53LX_calc_timeout_mclks>

		if (timeout_mclks > 0xFF)
			timeout_mclks = 0xFF;

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 80049a8:	9b08      	ldr	r3, [sp, #32]
 80049aa:	28ff      	cmp	r0, #255	; 0xff
 80049ac:	bf28      	it	cs
 80049ae:	20ff      	movcs	r0, #255	; 0xff
 80049b0:	71d8      	strb	r0, [r3, #7]


		timeout_encoded =
 80049b2:	4631      	mov	r1, r6
 80049b4:	4640      	mov	r0, r8
 80049b6:	f7ff ffcd 	bl	8004954 <VL53LX_calc_encoded_timeout>
			VL53LX_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80049ba:	0a03      	lsrs	r3, r0, #8
 80049bc:	7023      	strb	r3, [r4, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80049be:	7060      	strb	r0, [r4, #1]


		timeout_encoded =
 80049c0:	4631      	mov	r1, r6
 80049c2:	4638      	mov	r0, r7
 80049c4:	f7ff ffc6 	bl	8004954 <VL53LX_calc_encoded_timeout>
			VL53LX_calc_encoded_timeout(
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80049c8:	0a03      	lsrs	r3, r0, #8
 80049ca:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80049cc:	7160      	strb	r0, [r4, #5]


		macro_period_us =
 80049ce:	7a61      	ldrb	r1, [r4, #9]
 80049d0:	4628      	mov	r0, r5
 80049d2:	f7ff ff69 	bl	80048a8 <VL53LX_calc_macro_period_us>
				VL53LX_calc_macro_period_us(
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
 80049d6:	4601      	mov	r1, r0
		macro_period_us =
 80049d8:	4605      	mov	r5, r0
		timeout_encoded =
 80049da:	4640      	mov	r0, r8
 80049dc:	f7ff ffba 	bl	8004954 <VL53LX_calc_encoded_timeout>
				VL53LX_calc_encoded_timeout(
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80049e0:	0a03      	lsrs	r3, r0, #8
 80049e2:	70a3      	strb	r3, [r4, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80049e4:	70e0      	strb	r0, [r4, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 80049e6:	4629      	mov	r1, r5
 80049e8:	4638      	mov	r0, r7
 80049ea:	f7ff ffb3 	bl	8004954 <VL53LX_calc_encoded_timeout>
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80049ee:	0a03      	lsrs	r3, r0, #8
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80049f0:	7220      	strb	r0, [r4, #8]
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80049f2:	71e3      	strb	r3, [r4, #7]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 80049f4:	2000      	movs	r0, #0

	LOG_FUNCTION_END(0);

	return status;

}
 80049f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80049fa:	f06f 000e 	mvn.w	r0, #14
 80049fe:	e7fa      	b.n	80049f6 <VL53LX_calc_timeout_register_values+0x70>

08004a00 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 8004a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t  tmpo              = 0;

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 8004a04:	8842      	ldrh	r2, [r0, #2]
{
 8004a06:	b085      	sub	sp, #20
 8004a08:	460d      	mov	r5, r1
	if (pidata->result__dss_actual_effective_spads == 0) {
 8004a0a:	2a00      	cmp	r2, #0
 8004a0c:	d03f      	beq.n	8004a8e <VL53LX_hist_copy_and_scale_ambient_info+0x8e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 8004a0e:	7844      	ldrb	r4, [r0, #1]
 8004a10:	2c00      	cmp	r4, #0
 8004a12:	d03a      	beq.n	8004a8a <VL53LX_hist_copy_and_scale_ambient_info+0x8a>
 8004a14:	7acb      	ldrb	r3, [r1, #11]
 8004a16:	9303      	str	r3, [sp, #12]
 8004a18:	bbbb      	cbnz	r3, 8004a8a <VL53LX_hist_copy_and_scale_ambient_info+0x8a>
			podata->number_of_ambient_bins == 0) {



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 8004a1a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004a1e:	f04f 0b00 	mov.w	fp, #0
 8004a22:	1c5e      	adds	r6, r3, #1
 8004a24:	f14b 0700 	adc.w	r7, fp, #0
 8004a28:	e9cd 6700 	strd	r6, r7, [sp]
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8004a2c:	6886      	ldr	r6, [r0, #8]
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8004a2e:	68c0      	ldr	r0, [r0, #12]
			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8004a30:	f116 0a01 	adds.w	sl, r6, #1
			(int64_t)pidata->result__dss_actual_effective_spads;
 8004a34:	fa1f f882 	uxth.w	r8, r2
			(int64_t)podata->result__dss_actual_effective_spads;
 8004a38:	f8b1 607c 	ldrh.w	r6, [r1, #124]	; 0x7c
			tmpo   *=
 8004a3c:	9900      	ldr	r1, [sp, #0]
			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8004a3e:	f04f 0700 	mov.w	r7, #0
 8004a42:	f147 0b00 	adc.w	fp, r7, #0
			tmpi   *=
 8004a46:	fba8 230a 	umull	r2, r3, r8, sl
 8004a4a:	fb08 330b 	mla	r3, r8, fp, r3
			tmpo   *=
 8004a4e:	fba6 8901 	umull	r8, r9, r6, r1
 8004a52:	9901      	ldr	r1, [sp, #4]
				(int64_t)pidata->ambient_events_sum;
 8004a54:	17c7      	asrs	r7, r0, #31
			tmpo   *=
 8004a56:	fb06 9901 	mla	r9, r6, r1, r9
			evts  = tmpo *
 8004a5a:	fb08 f607 	mul.w	r6, r8, r7
 8004a5e:	fb00 6609 	mla	r6, r0, r9, r6
 8004a62:	fba8 8900 	umull	r8, r9, r8, r0
 8004a66:	44b1      	add	r9, r6
			evts += (tmpi/2);
 8004a68:	105f      	asrs	r7, r3, #1
 8004a6a:	ea4f 0632 	mov.w	r6, r2, rrx


			if (tmpi != 0)
				evts = do_division_s(evts, tmpi);
 8004a6e:	eb18 0006 	adds.w	r0, r8, r6
 8004a72:	eb49 0107 	adc.w	r1, r9, r7
 8004a76:	f7fc f89f 	bl	8000bb8 <__aeabi_ldivmod>

			podata->ambient_events_sum = (int32_t)evts;
 8004a7a:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
			podata->VL53LX_p_028 +=
 8004a7e:	eb00 0054 	add.w	r0, r0, r4, lsr #1
				((int32_t)pidata->number_of_ambient_bins / 2);
			podata->VL53LX_p_028 /=
 8004a82:	fb90 f4f4 	sdiv	r4, r0, r4
 8004a86:	f8c5 40a4 	str.w	r4, [r5, #164]	; 0xa4
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	e001      	b.n	8004a92 <VL53LX_hist_copy_and_scale_ambient_info+0x92>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8004a8e:	f06f 000e 	mvn.w	r0, #14
	}

	LOG_FUNCTION_END(0);

	return status;
}
 8004a92:	b005      	add	sp, #20
 8004a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004a98 <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8004a98:	b530      	push	{r4, r5, lr}
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8004a9a:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8004a9e:	f8b0 3332 	ldrh.w	r3, [r0, #818]	; 0x332
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 8004aa2:	f8b0 4334 	ldrh.w	r4, [r0, #820]	; 0x334
 8004aa6:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8004aaa:	07ed      	lsls	r5, r5, #31
	amb_thresh_low  = 1024 *
 8004aac:	ea4f 2383 	mov.w	r3, r3, lsl #10
	amb_thresh_high = 1024 *
 8004ab0:	ea4f 2484 	mov.w	r4, r4, lsl #10
	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8004ab4:	d45a      	bmi.n	8004b6c <VL53LX_hist_get_bin_sequence_config+0xd4>

		pdata->bin_seq[5] =
 8004ab6:	f890 5325 	ldrb.w	r5, [r0, #805]	; 0x325
 8004aba:	092d      	lsrs	r5, r5, #4
 8004abc:	744d      	strb	r5, [r1, #17]
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8004abe:	f890 5325 	ldrb.w	r5, [r0, #805]	; 0x325
 8004ac2:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[4] =
 8004ac6:	740d      	strb	r5, [r1, #16]
		pdata->bin_seq[3] =
 8004ac8:	f890 5324 	ldrb.w	r5, [r0, #804]	; 0x324
 8004acc:	092d      	lsrs	r5, r5, #4
 8004ace:	73cd      	strb	r5, [r1, #15]
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 8004ad0:	f890 5324 	ldrb.w	r5, [r0, #804]	; 0x324
 8004ad4:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[2] =
 8004ad8:	738d      	strb	r5, [r1, #14]
		pdata->bin_seq[1] =
 8004ada:	f890 5323 	ldrb.w	r5, [r0, #803]	; 0x323
 8004ade:	092d      	lsrs	r5, r5, #4
 8004ae0:	734d      	strb	r5, [r1, #13]
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 8004ae2:	f890 5323 	ldrb.w	r5, [r0, #803]	; 0x323

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8004ae6:	42a2      	cmp	r2, r4
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 8004ae8:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[0] =
 8004aec:	730d      	strb	r5, [r1, #12]
		if (pdata->ambient_events_sum > amb_thresh_high) {
 8004aee:	dd1a      	ble.n	8004b26 <VL53LX_hist_get_bin_sequence_config+0x8e>
			pdata->bin_seq[5] =
 8004af0:	f890 432d 	ldrb.w	r4, [r0, #813]	; 0x32d
 8004af4:	0924      	lsrs	r4, r4, #4
 8004af6:	744c      	strb	r4, [r1, #17]
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
			& 0x0F;
 8004af8:	f890 432d 	ldrb.w	r4, [r0, #813]	; 0x32d
 8004afc:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[4] =
 8004b00:	740c      	strb	r4, [r1, #16]
			pdata->bin_seq[3] =
 8004b02:	f890 432c 	ldrb.w	r4, [r0, #812]	; 0x32c
 8004b06:	0924      	lsrs	r4, r4, #4
 8004b08:	73cc      	strb	r4, [r1, #15]
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
			& 0x0F;
 8004b0a:	f890 432c 	ldrb.w	r4, [r0, #812]	; 0x32c
 8004b0e:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[2] =
 8004b12:	738c      	strb	r4, [r1, #14]
			pdata->bin_seq[1] =
 8004b14:	f890 432b 	ldrb.w	r4, [r0, #811]	; 0x32b
 8004b18:	0924      	lsrs	r4, r4, #4
 8004b1a:	734c      	strb	r4, [r1, #13]
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
			& 0x0F;
 8004b1c:	f890 432b 	ldrb.w	r4, [r0, #811]	; 0x32b
 8004b20:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[0] =
 8004b24:	730c      	strb	r4, [r1, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8004b26:	429a      	cmp	r2, r3
 8004b28:	da1a      	bge.n	8004b60 <VL53LX_hist_get_bin_sequence_config+0xc8>
			pdata->bin_seq[5] =
 8004b2a:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 8004b2e:	091b      	lsrs	r3, r3, #4
 8004b30:	744b      	strb	r3, [r1, #17]
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
			& 0x0F;
 8004b32:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 8004b36:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[4] =
 8004b3a:	740b      	strb	r3, [r1, #16]
			pdata->bin_seq[3] =
 8004b3c:	f890 331e 	ldrb.w	r3, [r0, #798]	; 0x31e
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	73cb      	strb	r3, [r1, #15]
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
			& 0x0F;
 8004b44:	f890 331e 	ldrb.w	r3, [r0, #798]	; 0x31e
 8004b48:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[2] =
 8004b4c:	738b      	strb	r3, [r1, #14]
			pdata->bin_seq[1] =
 8004b4e:	f890 331d 	ldrb.w	r3, [r0, #797]	; 0x31d
 8004b52:	091b      	lsrs	r3, r3, #4
 8004b54:	734b      	strb	r3, [r1, #13]
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
			& 0x0F;
 8004b56:	f890 331d 	ldrb.w	r3, [r0, #797]	; 0x31d
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
			& 0x0F;
 8004b5a:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[0] =
 8004b5e:	730b      	strb	r3, [r1, #12]
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
		pdata->bin_rep[i] = 1;
 8004b60:	f240 1301 	movw	r3, #257	; 0x101
 8004b64:	824b      	strh	r3, [r1, #18]
 8004b66:	828b      	strh	r3, [r1, #20]
 8004b68:	82cb      	strh	r3, [r1, #22]

	LOG_FUNCTION_END(0);

}
 8004b6a:	bd30      	pop	{r4, r5, pc}
			& 0x0F;
 8004b6c:	f890 5329 	ldrb.w	r5, [r0, #809]	; 0x329
 8004b70:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[5] =
 8004b74:	744d      	strb	r5, [r1, #17]
			& 0x0F;
 8004b76:	f890 5328 	ldrb.w	r5, [r0, #808]	; 0x328
 8004b7a:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[4] =
 8004b7e:	740d      	strb	r5, [r1, #16]
		pdata->bin_seq[3] =
 8004b80:	f890 5328 	ldrb.w	r5, [r0, #808]	; 0x328
 8004b84:	092d      	lsrs	r5, r5, #4
 8004b86:	73cd      	strb	r5, [r1, #15]
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 8004b88:	f890 5327 	ldrb.w	r5, [r0, #807]	; 0x327
 8004b8c:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[2] =
 8004b90:	738d      	strb	r5, [r1, #14]
		pdata->bin_seq[1] =
 8004b92:	f890 5326 	ldrb.w	r5, [r0, #806]	; 0x326
 8004b96:	092d      	lsrs	r5, r5, #4
 8004b98:	734d      	strb	r5, [r1, #13]
			& 0x0F;
 8004b9a:	f890 5326 	ldrb.w	r5, [r0, #806]	; 0x326
		if (pdata->ambient_events_sum > amb_thresh_high) {
 8004b9e:	42a2      	cmp	r2, r4
			& 0x0F;
 8004ba0:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[0] =
 8004ba4:	730d      	strb	r5, [r1, #12]
		if (pdata->ambient_events_sum > amb_thresh_high) {
 8004ba6:	dd1a      	ble.n	8004bde <VL53LX_hist_get_bin_sequence_config+0x146>
			pdata->bin_seq[5] =
 8004ba8:	f890 4330 	ldrb.w	r4, [r0, #816]	; 0x330
 8004bac:	0924      	lsrs	r4, r4, #4
 8004bae:	744c      	strb	r4, [r1, #17]
			& 0x0F;
 8004bb0:	f890 4330 	ldrb.w	r4, [r0, #816]	; 0x330
 8004bb4:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[4] =
 8004bb8:	740c      	strb	r4, [r1, #16]
			pdata->bin_seq[3] =
 8004bba:	f890 432f 	ldrb.w	r4, [r0, #815]	; 0x32f
 8004bbe:	0924      	lsrs	r4, r4, #4
 8004bc0:	73cc      	strb	r4, [r1, #15]
			& 0x0F;
 8004bc2:	f890 432f 	ldrb.w	r4, [r0, #815]	; 0x32f
 8004bc6:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[2] =
 8004bca:	738c      	strb	r4, [r1, #14]
			pdata->bin_seq[1] =
 8004bcc:	f890 432e 	ldrb.w	r4, [r0, #814]	; 0x32e
 8004bd0:	0924      	lsrs	r4, r4, #4
 8004bd2:	734c      	strb	r4, [r1, #13]
			& 0x0F;
 8004bd4:	f890 432e 	ldrb.w	r4, [r0, #814]	; 0x32e
 8004bd8:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[0] =
 8004bdc:	730c      	strb	r4, [r1, #12]
		if (pdata->ambient_events_sum < amb_thresh_low) {
 8004bde:	429a      	cmp	r2, r3
 8004be0:	dabe      	bge.n	8004b60 <VL53LX_hist_get_bin_sequence_config+0xc8>
			pdata->bin_seq[5] =
 8004be2:	f890 3322 	ldrb.w	r3, [r0, #802]	; 0x322
 8004be6:	091b      	lsrs	r3, r3, #4
 8004be8:	744b      	strb	r3, [r1, #17]
			& 0x0F;
 8004bea:	f890 3322 	ldrb.w	r3, [r0, #802]	; 0x322
 8004bee:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[4] =
 8004bf2:	740b      	strb	r3, [r1, #16]
			pdata->bin_seq[3] =
 8004bf4:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	73cb      	strb	r3, [r1, #15]
			& 0x0F;
 8004bfc:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 8004c00:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[2] =
 8004c04:	738b      	strb	r3, [r1, #14]
			pdata->bin_seq[1] =
 8004c06:	f890 3320 	ldrb.w	r3, [r0, #800]	; 0x320
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	734b      	strb	r3, [r1, #13]
			& 0x0F;
 8004c0e:	f890 3320 	ldrb.w	r3, [r0, #800]	; 0x320
 8004c12:	e7a2      	b.n	8004b5a <VL53LX_hist_get_bin_sequence_config+0xc2>

08004c14 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 8004c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c18:	4694      	mov	ip, r2
 8004c1a:	468b      	mov	fp, r1
 8004c1c:	461e      	mov	r6, r3
 8004c1e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int32_t   p_signal_events        = 0;
	uint32_t  noise_sq_sum           = 0;



	if (event_sigma == 0) {
 8004c20:	4682      	mov	sl, r0
 8004c22:	b930      	cbnz	r0, 8004c32 <VL53LX_hist_events_consistency_check+0x1e>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8004c24:	2309      	movs	r3, #9
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;

	if (*pevents_delta > *pevents_tolerance &&
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 8004c26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c




	return status;
}
 8004c28:	2000      	movs	r0, #0
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 8004c2a:	7013      	strb	r3, [r2, #0]
}
 8004c2c:	b003      	add	sp, #12
 8004c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 8004c32:	6890      	ldr	r0, [r2, #8]
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 8004c34:	f8b7 8016 	ldrh.w	r8, [r7, #22]
	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 8004c38:	1c43      	adds	r3, r0, #1
 8004c3a:	f04f 0100 	mov.w	r1, #0
 8004c3e:	f141 0400 	adc.w	r4, r1, #0
 8004c42:	e9cd 3400 	strd	r3, r4, [sp]
	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 8004c46:	69bc      	ldr	r4, [r7, #24]
 8004c48:	2500      	movs	r5, #0
 8004c4a:	1c60      	adds	r0, r4, #1
 8004c4c:	f145 0100 	adc.w	r1, r5, #0
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 8004c50:	fba8 2300 	umull	r2, r3, r8, r0
 8004c54:	fb08 3301 	mla	r3, r8, r1, r3
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 8004c58:	f8bc 8002 	ldrh.w	r8, [ip, #2]
 8004c5c:	9900      	ldr	r1, [sp, #0]
 8004c5e:	fba8 4501 	umull	r4, r5, r8, r1
 8004c62:	9901      	ldr	r1, [sp, #4]
 8004c64:	fb08 5501 	mla	r5, r8, r1, r5
	events_scaler  = tmpp * 4096;
 8004c68:	ea4f 3905 	mov.w	r9, r5, lsl #12
	if (tmpc != 0) {
 8004c6c:	ea52 0103 	orrs.w	r1, r2, r3
	events_scaler  = tmpp * 4096;
 8004c70:	ea49 5914 	orr.w	r9, r9, r4, lsr #20
 8004c74:	ea4f 3804 	mov.w	r8, r4, lsl #12
	if (tmpc != 0) {
 8004c78:	d00a      	beq.n	8004c90 <VL53LX_hist_events_consistency_check+0x7c>
		events_scaler += (tmpc/2);
 8004c7a:	105d      	asrs	r5, r3, #1
 8004c7c:	ea4f 0432 	mov.w	r4, r2, rrx
		events_scaler  = do_division_s(events_scaler, tmpc);
 8004c80:	eb18 0004 	adds.w	r0, r8, r4
 8004c84:	eb49 0105 	adc.w	r1, r9, r5
 8004c88:	f7fb ff96 	bl	8000bb8 <__aeabi_ldivmod>
 8004c8c:	4680      	mov	r8, r0
 8004c8e:	4689      	mov	r9, r1
	events_scaler_sq  = events_scaler * events_scaler;
 8004c90:	fb08 f309 	mul.w	r3, r8, r9
 8004c94:	fba8 4508 	umull	r4, r5, r8, r8
	events_scaler_sq += 2048;
 8004c98:	f514 6100 	adds.w	r1, r4, #2048	; 0x800
	events_scaler_sq  = events_scaler * events_scaler;
 8004c9c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
	events_scaler_sq += 2048;
 8004ca0:	f145 0200 	adc.w	r2, r5, #0
	events_scaler_sq /= 4096;
 8004ca4:	0b0b      	lsrs	r3, r1, #12
 8004ca6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004caa:	ea4f 3e22 	mov.w	lr, r2, asr #12
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 8004cae:	e9d7 2c09 	ldrd	r2, ip, [r7, #36]	; 0x24
 8004cb2:	ebbc 0002 	subs.w	r0, ip, r2
 8004cb6:	eb6c 010c 	sbc.w	r1, ip, ip
	c_signal_events *= (int64_t)events_scaler;
 8004cba:	fb08 f501 	mul.w	r5, r8, r1
 8004cbe:	fb00 5509 	mla	r5, r0, r9, r5
 8004cc2:	fba8 0100 	umull	r0, r1, r8, r0
	c_signal_events += 2048;
 8004cc6:	f510 6400 	adds.w	r4, r0, #2048	; 0x800
	c_signal_events *= (int64_t)events_scaler;
 8004cca:	4429      	add	r1, r5
	c_signal_events += 2048;
 8004ccc:	f141 0500 	adc.w	r5, r1, #0
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 8004cd0:	fba3 010c 	umull	r0, r1, r3, ip
	c_sig_noise_sq += 2048;
 8004cd4:	f510 6800 	adds.w	r8, r0, #2048	; 0x800
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 8004cd8:	fb0c 110e 	mla	r1, ip, lr, r1
	c_sig_noise_sq += 2048;
 8004cdc:	f141 0900 	adc.w	r9, r1, #0
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 8004ce0:	fba3 0102 	umull	r0, r1, r3, r2
	c_signal_events += 2048;
 8004ce4:	e9cd 4500 	strd	r4, r5, [sp]
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 8004ce8:	fb02 110e 	mla	r1, r2, lr, r1
	c_amb_noise_sq /= 4096;
 8004cec:	f510 6400 	adds.w	r4, r0, #2048	; 0x800
 8004cf0:	f141 0500 	adc.w	r5, r1, #0
 8004cf4:	2c00      	cmp	r4, #0
 8004cf6:	f175 0300 	sbcs.w	r3, r5, #0
 8004cfa:	da04      	bge.n	8004d06 <VL53LX_hist_events_consistency_check+0xf2>
 8004cfc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004d00:	2300      	movs	r3, #0
 8004d02:	18a4      	adds	r4, r4, r2
 8004d04:	415d      	adcs	r5, r3
 8004d06:	0b23      	lsrs	r3, r4, #12
 8004d08:	ea43 5105 	orr.w	r1, r3, r5, lsl #20
	c_amb_noise_sq += 2;
 8004d0c:	1c8c      	adds	r4, r1, #2
	c_amb_noise_sq /= 4096;
 8004d0e:	ea4f 3225 	mov.w	r2, r5, asr #12
	c_amb_noise_sq += 2;
 8004d12:	f142 0500 	adc.w	r5, r2, #0
	p_amb_noise_sq  =
 8004d16:	6832      	ldr	r2, [r6, #0]
 8004d18:	2300      	movs	r3, #0
	p_amb_noise_sq += 2;
 8004d1a:	1c90      	adds	r0, r2, #2
 8004d1c:	f143 0100 	adc.w	r1, r3, #0
	p_amb_noise_sq /= 4;
 8004d20:	ea4f 0c90 	mov.w	ip, r0, lsr #2
	c_sig_noise_sq /= 4096;
 8004d24:	f1b8 0f00 	cmp.w	r8, #0
		(uint32_t)c_sig_noise_sq +
 8004d28:	6870      	ldr	r0, [r6, #4]
	p_amb_noise_sq /= 4;
 8004d2a:	ea4c 7c81 	orr.w	ip, ip, r1, lsl #30
	c_sig_noise_sq /= 4096;
 8004d2e:	f179 0300 	sbcs.w	r3, r9, #0
		(uint32_t)c_sig_noise_sq +
 8004d32:	4484      	add	ip, r0
	c_sig_noise_sq /= 4096;
 8004d34:	da06      	bge.n	8004d44 <VL53LX_hist_events_consistency_check+0x130>
 8004d36:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	eb18 0802 	adds.w	r8, r8, r2
 8004d40:	eb49 0903 	adc.w	r9, r9, r3
 8004d44:	ea4f 3018 	mov.w	r0, r8, lsr #12
	c_amb_noise_sq /= 4;
 8004d48:	2c00      	cmp	r4, #0
	c_sig_noise_sq /= 4096;
 8004d4a:	ea40 5009 	orr.w	r0, r0, r9, lsl #20
	c_amb_noise_sq /= 4;
 8004d4e:	f175 0300 	sbcs.w	r3, r5, #0
		(uint32_t)c_sig_noise_sq +
 8004d52:	4460      	add	r0, ip
	c_amb_noise_sq /= 4;
 8004d54:	da00      	bge.n	8004d58 <VL53LX_hist_events_consistency_check+0x144>
 8004d56:	3403      	adds	r4, #3
	noise_sq_sum =
 8004d58:	eb00 0094 	add.w	r0, r0, r4, lsr #2
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 8004d5c:	0100      	lsls	r0, r0, #4
 8004d5e:	f001 f85b 	bl	8005e18 <VL53LX_isqrt>
	*pevents_tolerance /= 64;
 8004d62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	*pevents_tolerance *= (int32_t)event_sigma;
 8004d64:	fb0a f000 	mul.w	r0, sl, r0
	*pevents_tolerance += 32;
 8004d68:	3020      	adds	r0, #32
	*pevents_tolerance /= 64;
 8004d6a:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8004d6e:	fb90 f0fa 	sdiv	r0, r0, sl
 8004d72:	6018      	str	r0, [r3, #0]
	c_signal_events /= 4096;
 8004d74:	e9dd 0100 	ldrd	r0, r1, [sp]
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 8004d78:	e9d6 3400 	ldrd	r3, r4, [r6]
	c_signal_events /= 4096;
 8004d7c:	2800      	cmp	r0, #0
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 8004d7e:	eba4 0403 	sub.w	r4, r4, r3
	c_signal_events /= 4096;
 8004d82:	f171 0300 	sbcs.w	r3, r1, #0
 8004d86:	da04      	bge.n	8004d92 <VL53LX_hist_events_consistency_check+0x17e>
 8004d88:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	1880      	adds	r0, r0, r2
 8004d90:	4159      	adcs	r1, r3
 8004d92:	0b03      	lsrs	r3, r0, #12
 8004d94:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
	if ((int32_t)c_signal_events > p_signal_events)
 8004d98:	429c      	cmp	r4, r3
			(int32_t)c_signal_events - p_signal_events;
 8004d9a:	bfb4      	ite	lt
 8004d9c:	1b1c      	sublt	r4, r3, r4
			p_signal_events - (int32_t)c_signal_events;
 8004d9e:	1ae4      	subge	r4, r4, r3
		*pevents_delta =
 8004da0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004da2:	601c      	str	r4, [r3, #0]
	if (*pevents_delta > *pevents_tolerance &&
 8004da4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	f77f af39 	ble.w	8004c24 <VL53LX_hist_events_consistency_check+0x10>
 8004db2:	8afb      	ldrh	r3, [r7, #22]
 8004db4:	455b      	cmp	r3, fp
 8004db6:	f67f af35 	bls.w	8004c24 <VL53LX_hist_events_consistency_check+0x10>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 8004dba:	2314      	movs	r3, #20
 8004dbc:	e733      	b.n	8004c26 <VL53LX_hist_events_consistency_check+0x12>

08004dbe <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 8004dbe:	b530      	push	{r4, r5, lr}


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
	int16_t       delta_mm = 0;

	if (pdata->max_range_mm > pdata->min_range_mm)
 8004dc0:	f9b1 4044 	ldrsh.w	r4, [r1, #68]	; 0x44
 8004dc4:	f9b1 5048 	ldrsh.w	r5, [r1, #72]	; 0x48
 8004dc8:	b2a3      	uxth	r3, r4
 8004dca:	42a5      	cmp	r5, r4
 8004dcc:	b2a9      	uxth	r1, r5
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 8004dce:	bfcc      	ite	gt
 8004dd0:	1acb      	subgt	r3, r1, r3
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 8004dd2:	1a5b      	suble	r3, r3, r1

	if (min_max_tolerance_mm > 0 &&
 8004dd4:	2800      	cmp	r0, #0
		delta_mm =
 8004dd6:	b21b      	sxth	r3, r3
	if (min_max_tolerance_mm > 0 &&
 8004dd8:	dd05      	ble.n	8004de6 <VL53LX_hist_merged_pulse_check+0x28>
 8004dda:	4283      	cmp	r3, r0
 8004ddc:	dd03      	ble.n	8004de6 <VL53LX_hist_merged_pulse_check+0x28>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 8004dde:	2316      	movs	r3, #22
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8004de0:	7013      	strb	r3, [r2, #0]

	return status;
}
 8004de2:	2000      	movs	r0, #0
 8004de4:	bd30      	pop	{r4, r5, pc}
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8004de6:	2309      	movs	r3, #9
 8004de8:	e7fa      	b.n	8004de0 <VL53LX_hist_merged_pulse_check+0x22>

08004dea <VL53LX_hist_phase_consistency_check>:
{
 8004dea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dee:	461e      	mov	r6, r3
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 8004df0:	7853      	ldrb	r3, [r2, #1]
{
 8004df2:	b08d      	sub	sp, #52	; 0x34
	if (prange_prev->rd_device_state !=
 8004df4:	3b07      	subs	r3, #7
	int32_t   events_delta     = 0;
 8004df6:	2500      	movs	r5, #0
	if (prange_prev->rd_device_state !=
 8004df8:	2b01      	cmp	r3, #1
{
 8004dfa:	9107      	str	r1, [sp, #28]
 8004dfc:	4617      	mov	r7, r2
	int32_t   events_tolerance = 0;
 8004dfe:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
	VL53LX_DeviceError  range_status = 0;
 8004e02:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
	if (prange_prev->rd_device_state !=
 8004e06:	d86c      	bhi.n	8004ee2 <VL53LX_hist_phase_consistency_check+0xf8>
	phase_tolerance = (uint16_t)pht;
 8004e08:	f890 326e 	ldrb.w	r3, [r0, #622]	; 0x26e
	if (phase_tolerance == 0)
 8004e0c:	ea4f 2b03 	mov.w	fp, r3, lsl #8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d068      	beq.n	8004ee6 <VL53LX_hist_phase_consistency_check+0xfc>
	event_sigma =
 8004e14:	f890 326f 	ldrb.w	r3, [r0, #623]	; 0x26f
 8004e18:	9304      	str	r3, [sp, #16]
	event_min_spad_count =
 8004e1a:	f8b0 3270 	ldrh.w	r3, [r0, #624]	; 0x270
 8004e1e:	9305      	str	r3, [sp, #20]
	min_max_tolerance =
 8004e20:	f8b0 3272 	ldrh.w	r3, [r0, #626]	; 0x272
 8004e24:	9306      	str	r3, [sp, #24]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004e26:	4628      	mov	r0, r5
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8004e28:	f04f 094c 	mov.w	r9, #76	; 0x4c
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8004e2c:	7cb3      	ldrb	r3, [r6, #18]
 8004e2e:	b2ec      	uxtb	r4, r5
 8004e30:	42a3      	cmp	r3, r4
 8004e32:	d802      	bhi.n	8004e3a <VL53LX_hist_phase_consistency_check+0x50>
}
 8004e34:	b00d      	add	sp, #52	; 0x34
 8004e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8004e3a:	fb09 6304 	mla	r3, r9, r4, r6
 8004e3e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8004e42:	2b09      	cmp	r3, #9
 8004e44:	d001      	beq.n	8004e4a <VL53LX_hist_phase_consistency_check+0x60>
 8004e46:	2b13      	cmp	r3, #19
 8004e48:	d106      	bne.n	8004e58 <VL53LX_hist_phase_consistency_check+0x6e>
		if (prange_prev->active_objects == 0)
 8004e4a:	797b      	ldrb	r3, [r7, #5]
 8004e4c:	b933      	cbnz	r3, 8004e5c <VL53LX_hist_phase_consistency_check+0x72>
			prange_curr->VL53LX_p_003[lc].range_status =
 8004e4e:	fb09 6404 	mla	r4, r9, r4, r6
 8004e52:	2317      	movs	r3, #23
 8004e54:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
 8004e58:	3501      	adds	r5, #1
 8004e5a:	e7e7      	b.n	8004e2c <VL53LX_hist_phase_consistency_check+0x42>
			prange_curr->VL53LX_p_003[lc].range_status =
 8004e5c:	fb09 f404 	mul.w	r4, r9, r4
 8004e60:	eb06 0804 	add.w	r8, r6, r4
 8004e64:	f04f 0307 	mov.w	r3, #7
					VL53LX_hist_events_consistency_check(
 8004e68:	3414      	adds	r4, #20
			prange_curr->VL53LX_p_003[lc].range_status =
 8004e6a:	f888 305e 	strb.w	r3, [r8, #94]	; 0x5e
					VL53LX_hist_events_consistency_check(
 8004e6e:	4434      	add	r4, r6
 8004e70:	f04f 0a00 	mov.w	sl, #0
		for (p = 0; p < prange_prev->active_objects; p++) {
 8004e74:	797a      	ldrb	r2, [r7, #5]
 8004e76:	fa5f f38a 	uxtb.w	r3, sl
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d9ec      	bls.n	8004e58 <VL53LX_hist_phase_consistency_check+0x6e>
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8004e7e:	220c      	movs	r2, #12
 8004e80:	fb02 7203 	mla	r2, r2, r3, r7
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8004e84:	f8b8 1054 	ldrh.w	r1, [r8, #84]	; 0x54
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8004e88:	8a12      	ldrh	r2, [r2, #16]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8004e8a:	4291      	cmp	r1, r2
				phase_delta =
 8004e8c:	bf8c      	ite	hi
 8004e8e:	1a8a      	subhi	r2, r1, r2
				phase_delta =
 8004e90:	1a52      	subls	r2, r2, r1
 8004e92:	b292      	uxth	r2, r2
			if (phase_delta < phase_tolerance) {
 8004e94:	455a      	cmp	r2, fp
 8004e96:	d221      	bcs.n	8004edc <VL53LX_hist_phase_consistency_check+0xf2>
				if (status == VL53LX_ERROR_NONE)
 8004e98:	b9e0      	cbnz	r0, 8004ed4 <VL53LX_hist_phase_consistency_check+0xea>
					VL53LX_hist_events_consistency_check(
 8004e9a:	220c      	movs	r2, #12
 8004e9c:	fb02 7303 	mla	r3, r2, r3, r7
					status =
 8004ea0:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8004ea4:	9203      	str	r2, [sp, #12]
 8004ea6:	aa0a      	add	r2, sp, #40	; 0x28
 8004ea8:	9202      	str	r2, [sp, #8]
 8004eaa:	aa0b      	add	r2, sp, #44	; 0x2c
 8004eac:	e9cd 4200 	strd	r4, r2, [sp]
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	9a07      	ldr	r2, [sp, #28]
 8004eb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004eb8:	f7ff feac 	bl	8004c14 <VL53LX_hist_events_consistency_check>
				if (status == VL53LX_ERROR_NONE &&
 8004ebc:	b950      	cbnz	r0, 8004ed4 <VL53LX_hist_phase_consistency_check+0xea>
 8004ebe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8004ec2:	2b09      	cmp	r3, #9
 8004ec4:	d106      	bne.n	8004ed4 <VL53LX_hist_phase_consistency_check+0xea>
					status =
 8004ec6:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8004eca:	4621      	mov	r1, r4
 8004ecc:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8004ed0:	f7ff ff75 	bl	8004dbe <VL53LX_hist_merged_pulse_check>
				prange_curr->VL53LX_p_003[lc].range_status =
 8004ed4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8004ed8:	f888 305e 	strb.w	r3, [r8, #94]	; 0x5e
 8004edc:	f10a 0a01 	add.w	sl, sl, #1
 8004ee0:	e7c8      	b.n	8004e74 <VL53LX_hist_phase_consistency_check+0x8a>
		return status;
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	e7a6      	b.n	8004e34 <VL53LX_hist_phase_consistency_check+0x4a>
 8004ee6:	4658      	mov	r0, fp
 8004ee8:	e7a4      	b.n	8004e34 <VL53LX_hist_phase_consistency_check+0x4a>

08004eea <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 8004eea:	b570      	push	{r4, r5, r6, lr}

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
	min_spad_count =
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8004eec:	f893 504a 	ldrb.w	r5, [r3, #74]	; 0x4a
{
 8004ef0:	b086      	sub	sp, #24
	int32_t   events_delta     = 0;
 8004ef2:	2400      	movs	r4, #0
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8004ef4:	2d09      	cmp	r5, #9
{
 8004ef6:	460e      	mov	r6, r1
	int32_t   events_tolerance = 0;
 8004ef8:	e9cd 4404 	strd	r4, r4, [sp, #16]
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8004efc:	d002      	beq.n	8004f04 <VL53LX_hist_xmonitor_consistency_check+0x1a>
 8004efe:	3d13      	subs	r5, #19
 8004f00:	2d01      	cmp	r5, #1
 8004f02:	d81c      	bhi.n	8004f3e <VL53LX_hist_xmonitor_consistency_check+0x54>
		prange_curr->range_status ==
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 8004f04:	f892 4042 	ldrb.w	r4, [r2, #66]	; 0x42
 8004f08:	2c09      	cmp	r4, #9
 8004f0a:	d002      	beq.n	8004f12 <VL53LX_hist_xmonitor_consistency_check+0x28>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8004f0c:	3c13      	subs	r4, #19
 8004f0e:	2c01      	cmp	r4, #1
 8004f10:	d815      	bhi.n	8004f3e <VL53LX_hist_xmonitor_consistency_check+0x54>
			prange_prev->xmonitor.range_status ==
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 8004f12:	461c      	mov	r4, r3
	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 8004f14:	f890 5288 	ldrb.w	r5, [r0, #648]	; 0x288
	min_spad_count =
 8004f18:	f8b0 1270 	ldrh.w	r1, [r0, #624]	; 0x270
			prange_curr->range_status =
 8004f1c:	2009      	movs	r0, #9
 8004f1e:	f804 0f4a 	strb.w	r0, [r4, #74]!
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
 8004f22:	a804      	add	r0, sp, #16
 8004f24:	9002      	str	r0, [sp, #8]
 8004f26:	a805      	add	r0, sp, #20
 8004f28:	e9cd 3000 	strd	r3, r0, [sp]
 8004f2c:	9403      	str	r4, [sp, #12]
 8004f2e:	f102 0338 	add.w	r3, r2, #56	; 0x38
 8004f32:	4628      	mov	r0, r5
 8004f34:	4632      	mov	r2, r6
 8004f36:	f7ff fe6d 	bl	8004c14 <VL53LX_hist_events_consistency_check>

		}
	}

	return status;
}
 8004f3a:	b006      	add	sp, #24
 8004f3c:	bd70      	pop	{r4, r5, r6, pc}
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004f3e:	2000      	movs	r0, #0
 8004f40:	e7fb      	b.n	8004f3a <VL53LX_hist_xmonitor_consistency_check+0x50>

08004f42 <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 8004f42:	b538      	push	{r3, r4, r5, lr}
	uint32_t  wrap_dmax_phase      = 0;
	uint32_t  range_mm             = 0;

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	8013      	strh	r3, [r2, #0]
{
 8004f48:	4605      	mov	r5, r0


	if (pcurrent->VL53LX_p_015 != 0) {
 8004f4a:	f8b1 0086 	ldrh.w	r0, [r1, #134]	; 0x86
{
 8004f4e:	4614      	mov	r4, r2
	if (pcurrent->VL53LX_p_015 != 0) {
 8004f50:	b148      	cbz	r0, 8004f66 <VL53LX_hist_wrap_dmax+0x24>



		pll_period_mm =
 8004f52:	f000 ffca 	bl	8005eea <VL53LX_calc_pll_period_mm>
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 8004f56:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
		wrap_dmax_phase =
 8004f5a:	021b      	lsls	r3, r3, #8



		range_mm = wrap_dmax_phase * pll_period_mm;
 8004f5c:	4358      	muls	r0, r3
		range_mm = (range_mm + (1<<14)) >> 15;
 8004f5e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8004f62:	0bc0      	lsrs	r0, r0, #15

		*pwrap_dmax_mm = (int16_t)range_mm;
 8004f64:	8020      	strh	r0, [r4, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004f66:	2000      	movs	r0, #0
 8004f68:	bd38      	pop	{r3, r4, r5, pc}

08004f6a <VL53LX_encode_row_col>:
	uint8_t  col,
	uint8_t *pspad_number)
{


	if (row > 7)
 8004f6a:	2807      	cmp	r0, #7
		*pspad_number = 128 + (col << 3) + (15-row);
 8004f6c:	bf8b      	itete	hi
 8004f6e:	ebc0 00c1 	rsbhi	r0, r0, r1, lsl #3
	else
		*pspad_number = ((15-col) << 3) + row;
 8004f72:	f1c1 010f 	rsbls	r1, r1, #15
		*pspad_number = 128 + (col << 3) + (15-row);
 8004f76:	3871      	subhi	r0, #113	; 0x71
		*pspad_number = ((15-col) << 3) + row;
 8004f78:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
 8004f7c:	7010      	strb	r0, [r2, #0]

}
 8004f7e:	4770      	bx	lr

08004f80 <VL53LX_encode_zone_size>:
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{


	*pencoded_xy_size = (height << 4) + width;
 8004f80:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8004f84:	7011      	strb	r1, [r2, #0]

}
 8004f86:	4770      	bx	lr

08004f88 <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 8004f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f8a:	460d      	mov	r5, r1
 8004f8c:	4616      	mov	r6, r2
 8004f8e:	461c      	mov	r4, r3
	uint8_t width    = 0;
	uint8_t height   = 0;



	VL53LX_decode_row_col(
 8004f90:	f10d 0206 	add.w	r2, sp, #6
	uint8_t x_centre = 0;
 8004f94:	2300      	movs	r3, #0
	VL53LX_decode_row_col(
 8004f96:	f10d 0107 	add.w	r1, sp, #7
	uint8_t x_centre = 0;
 8004f9a:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t y_centre = 0;
 8004f9e:	f88d 3007 	strb.w	r3, [sp, #7]
	VL53LX_decode_row_col(
 8004fa2:	f001 f899 	bl	80060d8 <VL53LX_decode_row_col>
	*pheight = encoded_xy_size >> 4;
 8004fa6:	0929      	lsrs	r1, r5, #4
	*pwidth  = encoded_xy_size & 0x0F;
 8004fa8:	f005 050f 	and.w	r5, r5, #15
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 8004fac:	1c68      	adds	r0, r5, #1
 8004fae:	2302      	movs	r3, #2
 8004fb0:	fb90 f7f3 	sdiv	r7, r0, r3
 8004fb4:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8004fb8:	9a08      	ldr	r2, [sp, #32]
 8004fba:	1bc0      	subs	r0, r0, r7
 8004fbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8004fc0:	8030      	strh	r0, [r6, #0]
	if (*px_ll < 0)
		*px_ll = 0;

	*px_ur = *px_ll + (int16_t)width;
 8004fc2:	4428      	add	r0, r5
 8004fc4:	b280      	uxth	r0, r0
 8004fc6:	280f      	cmp	r0, #15
 8004fc8:	bf28      	it	cs
 8004fca:	200f      	movcs	r0, #15
 8004fcc:	8010      	strh	r0, [r2, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 8004fce:	1c4a      	adds	r2, r1, #1
 8004fd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8004fd4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004fd8:	1ad2      	subs	r2, r2, r3
 8004fda:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004fde:	8022      	strh	r2, [r4, #0]
	if (*py_ll < 0)
		*py_ll = 0;

	*py_ur = *py_ll + (int16_t)height;
 8004fe0:	440a      	add	r2, r1
 8004fe2:	b292      	uxth	r2, r2
 8004fe4:	2a0f      	cmp	r2, #15
 8004fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fe8:	bf28      	it	cs
 8004fea:	220f      	movcs	r2, #15
 8004fec:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
}
 8004fee:	b003      	add	sp, #12
 8004ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ff2 <VL53LX_is_aperture_location>:

	uint8_t is_aperture = 0;
	uint8_t mod_row     = row % 4;
	uint8_t mod_col     = col % 4;

	if (mod_row == 0 && mod_col == 2)
 8004ff2:	f010 0003 	ands.w	r0, r0, #3
	uint8_t mod_col     = col % 4;
 8004ff6:	f001 0103 	and.w	r1, r1, #3
	if (mod_row == 0 && mod_col == 2)
 8004ffa:	d103      	bne.n	8005004 <VL53LX_is_aperture_location+0x12>
	uint8_t is_aperture = 0;
 8004ffc:	1e8b      	subs	r3, r1, #2
 8004ffe:	4258      	negs	r0, r3
 8005000:	4158      	adcs	r0, r3
 8005002:	4770      	bx	lr
		is_aperture = 1;

	if (mod_row == 2 && mod_col == 0)
 8005004:	2802      	cmp	r0, #2
	uint8_t is_aperture = 0;
 8005006:	bf06      	itte	eq
 8005008:	fab1 f081 	clzeq	r0, r1
 800500c:	0940      	lsreq	r0, r0, #5
 800500e:	2000      	movne	r0, #0
		is_aperture = 1;

	return is_aperture;
}
 8005010:	4770      	bx	lr

08005012 <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 8005012:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005016:	b087      	sub	sp, #28
 8005018:	4699      	mov	r9, r3

	uint8_t   is_aperture = 0;



	VL53LX_decode_zone_limits(
 800501a:	f10d 0316 	add.w	r3, sp, #22
{
 800501e:	9e10      	ldr	r6, [sp, #64]	; 0x40
	VL53LX_decode_zone_limits(
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	ab05      	add	r3, sp, #20
	int16_t   zone_x_ll = 0;
 8005024:	2400      	movs	r4, #0
	VL53LX_decode_zone_limits(
 8005026:	9300      	str	r3, [sp, #0]
{
 8005028:	4690      	mov	r8, r2
	VL53LX_decode_zone_limits(
 800502a:	f10d 0312 	add.w	r3, sp, #18
 800502e:	aa04      	add	r2, sp, #16
	int16_t   zone_x_ll = 0;
 8005030:	f8ad 4010 	strh.w	r4, [sp, #16]
	int16_t   zone_y_ll = 0;
 8005034:	f8ad 4012 	strh.w	r4, [sp, #18]
	int16_t   zone_x_ur = 0;
 8005038:	f8ad 4014 	strh.w	r4, [sp, #20]
	int16_t   zone_y_ur = 0;
 800503c:	f8ad 4016 	strh.w	r4, [sp, #22]
	uint8_t   spad_number = 0;
 8005040:	f88d 400f 	strb.w	r4, [sp, #15]
	VL53LX_decode_zone_limits(
 8005044:	f7ff ffa0 	bl	8004f88 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 8005048:	8034      	strh	r4, [r6, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800504a:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
	*pbit_mask    = 0x01 << *pbit_index;
 800504e:	f04f 0a01 	mov.w	sl, #1
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8005052:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8005056:	42a3      	cmp	r3, r4
 8005058:	da02      	bge.n	8005060 <VL53LX_calc_max_effective_spads+0x4e>
					*pmax_effective_spads += 0x0100;

			}
		}
	}
}
 800505a:	b007      	add	sp, #28
 800505c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8005060:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
			VL53LX_encode_row_col(
 8005064:	b2e7      	uxtb	r7, r4
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8005066:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800506a:	42ab      	cmp	r3, r5
 800506c:	da02      	bge.n	8005074 <VL53LX_calc_max_effective_spads+0x62>
 800506e:	3401      	adds	r4, #1
 8005070:	b224      	sxth	r4, r4
 8005072:	e7ee      	b.n	8005052 <VL53LX_calc_max_effective_spads+0x40>
			VL53LX_encode_row_col(
 8005074:	fa5f fb85 	uxtb.w	fp, r5
 8005078:	f10d 020f 	add.w	r2, sp, #15
 800507c:	4659      	mov	r1, fp
 800507e:	4638      	mov	r0, r7
 8005080:	f7ff ff73 	bl	8004f6a <VL53LX_encode_row_col>
			VL53LX_spad_number_to_byte_bit_index(
 8005084:	f89d 300f 	ldrb.w	r3, [sp, #15]
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8005088:	08da      	lsrs	r2, r3, #3
	*pbit_mask    = 0x01 << *pbit_index;
 800508a:	f003 0307 	and.w	r3, r3, #7
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800508e:	f818 2002 	ldrb.w	r2, [r8, r2]
	*pbit_mask    = 0x01 << *pbit_index;
 8005092:	fa0a f303 	lsl.w	r3, sl, r3
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8005096:	421a      	tst	r2, r3
 8005098:	d007      	beq.n	80050aa <VL53LX_calc_max_effective_spads+0x98>
				is_aperture = VL53LX_is_aperture_location(
 800509a:	4659      	mov	r1, fp
 800509c:	4638      	mov	r0, r7
 800509e:	f7ff ffa8 	bl	8004ff2 <VL53LX_is_aperture_location>
 80050a2:	8833      	ldrh	r3, [r6, #0]
				if (is_aperture > 0)
 80050a4:	b120      	cbz	r0, 80050b0 <VL53LX_calc_max_effective_spads+0x9e>
					*pmax_effective_spads +=
 80050a6:	444b      	add	r3, r9
					*pmax_effective_spads += 0x0100;
 80050a8:	8033      	strh	r3, [r6, #0]
 80050aa:	3501      	adds	r5, #1
 80050ac:	b22d      	sxth	r5, r5
 80050ae:	e7da      	b.n	8005066 <VL53LX_calc_max_effective_spads+0x54>
 80050b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80050b4:	e7f8      	b.n	80050a8 <VL53LX_calc_max_effective_spads+0x96>

080050b6 <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 80050b6:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	4699      	mov	r9, r3
	uint8_t   is_aperture = 0;
	uint16_t  spad_attenuation = 0;



	VL53LX_decode_zone_limits(
 80050be:	f10d 0316 	add.w	r3, sp, #22
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	ab05      	add	r3, sp, #20
	int16_t   mm_x_ll   = 0;
 80050c6:	2400      	movs	r4, #0
{
 80050c8:	4615      	mov	r5, r2
	VL53LX_decode_zone_limits(
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	aa04      	add	r2, sp, #16
 80050ce:	f10d 0312 	add.w	r3, sp, #18
{
 80050d2:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	int16_t   mm_x_ll   = 0;
 80050d6:	f8ad 4010 	strh.w	r4, [sp, #16]
	int16_t   mm_y_ll   = 0;
 80050da:	f8ad 4012 	strh.w	r4, [sp, #18]
	int16_t   mm_x_ur   = 0;
 80050de:	f8ad 4014 	strh.w	r4, [sp, #20]
	int16_t   mm_y_ur   = 0;
 80050e2:	f8ad 4016 	strh.w	r4, [sp, #22]
	int16_t   zone_x_ll = 0;
 80050e6:	f8ad 4018 	strh.w	r4, [sp, #24]
	int16_t   zone_y_ll = 0;
 80050ea:	f8ad 401a 	strh.w	r4, [sp, #26]
	int16_t   zone_x_ur = 0;
 80050ee:	f8ad 401c 	strh.w	r4, [sp, #28]
	int16_t   zone_y_ur = 0;
 80050f2:	f8ad 401e 	strh.w	r4, [sp, #30]
	uint8_t   spad_number = 0;
 80050f6:	f88d 400f 	strb.w	r4, [sp, #15]
{
 80050fa:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
	VL53LX_decode_zone_limits(
 80050fe:	f7ff ff43 	bl	8004f88 <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 8005102:	f10d 031e 	add.w	r3, sp, #30
 8005106:	9301      	str	r3, [sp, #4]
 8005108:	ab07      	add	r3, sp, #28
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	aa06      	add	r2, sp, #24
 800510e:	f10d 031a 	add.w	r3, sp, #26
 8005112:	4649      	mov	r1, r9
 8005114:	4628      	mov	r0, r5
 8005116:	f7ff ff37 	bl	8004f88 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800511a:	803c      	strh	r4, [r7, #0]
	*pmm_outer_effective_spads = 0;
 800511c:	8034      	strh	r4, [r6, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800511e:	f9bd 401a 	ldrsh.w	r4, [sp, #26]
	*pbit_mask    = 0x01 << *pbit_index;
 8005122:	f04f 0b01 	mov.w	fp, #1
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8005126:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800512a:	42a3      	cmp	r3, r4
 800512c:	da02      	bge.n	8005134 <VL53LX_calc_mm_effective_spads+0x7e>
					*pmm_outer_effective_spads +=
						spad_attenuation;
			}
		}
	}
}
 800512e:	b008      	add	sp, #32
 8005130:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8005134:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
			VL53LX_encode_row_col(
 8005138:	fa5f f984 	uxtb.w	r9, r4
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800513c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8005140:	42ab      	cmp	r3, r5
 8005142:	da02      	bge.n	800514a <VL53LX_calc_mm_effective_spads+0x94>
 8005144:	3401      	adds	r4, #1
 8005146:	b224      	sxth	r4, r4
 8005148:	e7ed      	b.n	8005126 <VL53LX_calc_mm_effective_spads+0x70>
			VL53LX_encode_row_col(
 800514a:	b2eb      	uxtb	r3, r5
 800514c:	f10d 020f 	add.w	r2, sp, #15
 8005150:	4619      	mov	r1, r3
 8005152:	4648      	mov	r0, r9
 8005154:	f7ff ff09 	bl	8004f6a <VL53LX_encode_row_col>
			VL53LX_spad_number_to_byte_bit_index(
 8005158:	f89d 200f 	ldrb.w	r2, [sp, #15]
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800515c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800515e:	08d1      	lsrs	r1, r2, #3
	*pbit_mask    = 0x01 << *pbit_index;
 8005160:	f002 0207 	and.w	r2, r2, #7
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8005164:	5c41      	ldrb	r1, [r0, r1]
	*pbit_mask    = 0x01 << *pbit_index;
 8005166:	fa0b f202 	lsl.w	r2, fp, r2
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800516a:	4211      	tst	r1, r2
 800516c:	d01b      	beq.n	80051a6 <VL53LX_calc_mm_effective_spads+0xf0>
				is_aperture = VL53LX_is_aperture_location(
 800516e:	4619      	mov	r1, r3
 8005170:	4648      	mov	r0, r9
 8005172:	f7ff ff3e 	bl	8004ff2 <VL53LX_is_aperture_location>
				if (x >= mm_x_ll && x <= mm_x_ur &&
 8005176:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
					spad_attenuation = 0x0100;
 800517a:	2800      	cmp	r0, #0
 800517c:	bf14      	ite	ne
 800517e:	4653      	movne	r3, sl
 8005180:	f44f 7380 	moveq.w	r3, #256	; 0x100
				if (x >= mm_x_ll && x <= mm_x_ur &&
 8005184:	42aa      	cmp	r2, r5
 8005186:	dc11      	bgt.n	80051ac <VL53LX_calc_mm_effective_spads+0xf6>
 8005188:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800518c:	42aa      	cmp	r2, r5
 800518e:	db0d      	blt.n	80051ac <VL53LX_calc_mm_effective_spads+0xf6>
 8005190:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8005194:	42a2      	cmp	r2, r4
 8005196:	dc09      	bgt.n	80051ac <VL53LX_calc_mm_effective_spads+0xf6>
					y >= mm_y_ll && y <= mm_y_ur)
 8005198:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 800519c:	42a2      	cmp	r2, r4
 800519e:	db05      	blt.n	80051ac <VL53LX_calc_mm_effective_spads+0xf6>
					*pmm_inner_effective_spads +=
 80051a0:	883a      	ldrh	r2, [r7, #0]
 80051a2:	4413      	add	r3, r2
 80051a4:	803b      	strh	r3, [r7, #0]
 80051a6:	3501      	adds	r5, #1
 80051a8:	b22d      	sxth	r5, r5
 80051aa:	e7c7      	b.n	800513c <VL53LX_calc_mm_effective_spads+0x86>
					*pmm_outer_effective_spads +=
 80051ac:	8832      	ldrh	r2, [r6, #0]
 80051ae:	4413      	add	r3, r2
 80051b0:	8033      	strh	r3, [r6, #0]
 80051b2:	e7f8      	b.n	80051a6 <VL53LX_calc_mm_effective_spads+0xf0>

080051b4 <VL53LX_hist_combine_mm1_mm2_offsets>:
{
 80051b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b8:	b086      	sub	sp, #24
 80051ba:	461f      	mov	r7, r3
 80051bc:	e9dd 5810 	ldrd	r5, r8, [sp, #64]	; 0x40
	uint16_t max_mm_inner_effective_spads = 0;
 80051c0:	2300      	movs	r3, #0
{
 80051c2:	f8bd 9048 	ldrh.w	r9, [sp, #72]	; 0x48
	uint16_t max_mm_inner_effective_spads = 0;
 80051c6:	f8ad 3010 	strh.w	r3, [sp, #16]
	uint16_t max_mm_outer_effective_spads = 0;
 80051ca:	f8ad 3012 	strh.w	r3, [sp, #18]
	uint16_t mm_inner_effective_spads     = 0;
 80051ce:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint16_t mm_outer_effective_spads     = 0;
 80051d2:	f8ad 3016 	strh.w	r3, [sp, #22]
	VL53LX_calc_mm_effective_spads(
 80051d6:	f10d 0312 	add.w	r3, sp, #18
{
 80051da:	4616      	mov	r6, r2
	VL53LX_calc_mm_effective_spads(
 80051dc:	9303      	str	r3, [sp, #12]
 80051de:	ab04      	add	r3, sp, #16
 80051e0:	e9cd 9301 	strd	r9, r3, [sp, #4]
{
 80051e4:	4682      	mov	sl, r0
 80051e6:	460c      	mov	r4, r1
	VL53LX_calc_mm_effective_spads(
 80051e8:	4630      	mov	r0, r6
 80051ea:	f8cd 8000 	str.w	r8, [sp]
 80051ee:	23ff      	movs	r3, #255	; 0xff
 80051f0:	22c7      	movs	r2, #199	; 0xc7
 80051f2:	4639      	mov	r1, r7
 80051f4:	f7ff ff5f 	bl	80050b6 <VL53LX_calc_mm_effective_spads>
	if ((max_mm_inner_effective_spads == 0) ||
 80051f8:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80051fc:	b358      	cbz	r0, 8005256 <VL53LX_hist_combine_mm1_mm2_offsets+0xa2>
 80051fe:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 8005202:	b340      	cbz	r0, 8005256 <VL53LX_hist_combine_mm1_mm2_offsets+0xa2>
	VL53LX_calc_mm_effective_spads(
 8005204:	f10d 0316 	add.w	r3, sp, #22
 8005208:	9303      	str	r3, [sp, #12]
 800520a:	ab05      	add	r3, sp, #20
 800520c:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005210:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8005214:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8005218:	f8cd 8000 	str.w	r8, [sp]
 800521c:	4639      	mov	r1, r7
 800521e:	4630      	mov	r0, r6
 8005220:	f7ff ff49 	bl	80050b6 <VL53LX_calc_mm_effective_spads>
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 8005224:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	scaled_mm1_peak_rate_mcps  =
 8005228:	88ab      	ldrh	r3, [r5, #4]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800522a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800522e:	4353      	muls	r3, r2
	scaled_mm2_peak_rate_mcps  =
 8005230:	88ea      	ldrh	r2, [r5, #6]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 8005232:	434a      	muls	r2, r1
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 8005234:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8005238:	fbb3 f3f1 	udiv	r3, r3, r1
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800523c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8005240:	fbb2 f2f1 	udiv	r2, r2, r1
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 8005244:	fb02 f004 	mul.w	r0, r2, r4
 8005248:	fb03 000a 	mla	r0, r3, sl, r0
	if (tmp1 != 0)
 800524c:	189b      	adds	r3, r3, r2
		tmp0 = (tmp0 * 4) / tmp1;
 800524e:	bf1c      	itt	ne
 8005250:	0080      	lslne	r0, r0, #2
 8005252:	fb90 f0f3 	sdivne	r0, r0, r3
	*prange_offset_mm = (int16_t)tmp0;
 8005256:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005258:	8018      	strh	r0, [r3, #0]
}
 800525a:	b006      	add	sp, #24
 800525c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005260 <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4604      	mov	r4, r0

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 8005264:	4610      	mov	r0, r2
{
 8005266:	461d      	mov	r5, r3
	VL53LX_init_system_results(psys);
 8005268:	f7ff f9f1 	bl	800464e <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800526c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8005270:	7013      	strb	r3, [r2, #0]
	psys->result__range_status     = phist->active_results;
 8005272:	7c8b      	ldrb	r3, [r1, #18]
 8005274:	7053      	strb	r3, [r2, #1]
	psys->result__report_status    = pbins->result__report_status;
 8005276:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
 800527a:	7090      	strb	r0, [r2, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800527c:	f894 007b 	ldrb.w	r0, [r4, #123]	; 0x7b
 8005280:	70d0      	strb	r0, [r2, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 8005282:	3114      	adds	r1, #20

	for (i = 0; i < phist->active_results; i++) {
 8005284:	2400      	movs	r4, #0
 8005286:	b2e0      	uxtb	r0, r4
 8005288:	4283      	cmp	r3, r0
 800528a:	d800      	bhi.n	800528e <VL53LX_hist_copy_results_to_sys_and_core+0x2e>
		pdata++;
	}

	LOG_FUNCTION_END(0);

}
 800528c:	bd38      	pop	{r3, r4, r5, pc}
		switch (i) {
 800528e:	b120      	cbz	r0, 800529a <VL53LX_hist_copy_results_to_sys_and_core+0x3a>
 8005290:	2801      	cmp	r0, #1
 8005292:	d01d      	beq.n	80052d0 <VL53LX_hist_copy_results_to_sys_and_core+0x70>
		pdata++;
 8005294:	314c      	adds	r1, #76	; 0x4c
 8005296:	3401      	adds	r4, #1
 8005298:	e7f5      	b.n	8005286 <VL53LX_hist_copy_results_to_sys_and_core+0x26>
					pdata->VL53LX_p_004;
 800529a:	8ac8      	ldrh	r0, [r1, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800529c:	8090      	strh	r0, [r2, #4]
					pdata->peak_signal_count_rate_mcps;
 800529e:	8e08      	ldrh	r0, [r1, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 80052a0:	80d0      	strh	r0, [r2, #6]
					pdata->avg_signal_count_rate_mcps;
 80052a2:	8e48      	ldrh	r0, [r1, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 80052a4:	82d0      	strh	r0, [r2, #22]
					pdata->ambient_count_rate_mcps;
 80052a6:	8e88      	ldrh	r0, [r1, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 80052a8:	8110      	strh	r0, [r2, #8]
			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 80052aa:	8f88      	ldrh	r0, [r1, #60]	; 0x3c
 80052ac:	8150      	strh	r0, [r2, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 80052ae:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 80052b2:	8190      	strh	r0, [r2, #12]
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 80052b4:	f8b1 0046 	ldrh.w	r0, [r1, #70]	; 0x46
 80052b8:	81d0      	strh	r0, [r2, #14]
			psys->result__phase_sd1  = pdata->zero_distance_phase;
 80052ba:	8a88      	ldrh	r0, [r1, #20]
 80052bc:	8410      	strh	r0, [r2, #32]
					pdata->VL53LX_p_017;
 80052be:	6a88      	ldr	r0, [r1, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 80052c0:	6068      	str	r0, [r5, #4]
					pdata->VL53LX_p_010;
 80052c2:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 80052c4:	60a8      	str	r0, [r5, #8]
					pdata->total_periods_elapsed;
 80052c6:	6988      	ldr	r0, [r1, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 80052c8:	60e8      	str	r0, [r5, #12]
					pdata->VL53LX_p_016;
 80052ca:	6a48      	ldr	r0, [r1, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 80052cc:	6028      	str	r0, [r5, #0]
			break;
 80052ce:	e7e1      	b.n	8005294 <VL53LX_hist_copy_results_to_sys_and_core+0x34>
				pdata->VL53LX_p_004;
 80052d0:	8ac8      	ldrh	r0, [r1, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 80052d2:	8310      	strh	r0, [r2, #24]
				pdata->peak_signal_count_rate_mcps;
 80052d4:	8e08      	ldrh	r0, [r1, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 80052d6:	8350      	strh	r0, [r2, #26]
				pdata->ambient_count_rate_mcps;
 80052d8:	8e88      	ldrh	r0, [r1, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 80052da:	8390      	strh	r0, [r2, #28]
			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 80052dc:	8f88      	ldrh	r0, [r1, #60]	; 0x3c
 80052de:	83d0      	strh	r0, [r2, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 80052e0:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 80052e4:	8410      	strh	r0, [r2, #32]
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 80052e6:	f8b1 0046 	ldrh.w	r0, [r1, #70]	; 0x46
 80052ea:	8450      	strh	r0, [r2, #34]	; 0x22
				pdata->VL53LX_p_017;
 80052ec:	6a88      	ldr	r0, [r1, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 80052ee:	6168      	str	r0, [r5, #20]
				pdata->VL53LX_p_010;
 80052f0:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 80052f2:	61a8      	str	r0, [r5, #24]
				pdata->total_periods_elapsed;
 80052f4:	6988      	ldr	r0, [r1, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 80052f6:	61e8      	str	r0, [r5, #28]
				pdata->VL53LX_p_016;
 80052f8:	6a48      	ldr	r0, [r1, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 80052fa:	6128      	str	r0, [r5, #16]
			break;
 80052fc:	e7ca      	b.n	8005294 <VL53LX_hist_copy_results_to_sys_and_core+0x34>

080052fe <VL53LX_save_cfg_data>:
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 80052fe:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32

	pzone_dyn_cfg->expected_stream_count =
 8005302:	f500 5203 	add.w	r2, r0, #8384	; 0x20c0
 8005306:	3220      	adds	r2, #32
 8005308:	210a      	movs	r1, #10
 800530a:	fb01 2303 	mla	r3, r1, r3, r2
 800530e:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 8005312:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
			pdev->ll_state.cfg_stream_count;

	pzone_dyn_cfg->expected_gph_id =
 8005316:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 800531a:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
			pdev->ll_state.cfg_gph_id;

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800531e:	f890 2393 	ldrb.w	r2, [r0, #915]	; 0x393
 8005322:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
		pdynamic->roi_config__user_roi_centre_spad;

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 8005326:	f890 2394 	ldrb.w	r2, [r0, #916]	; 0x394
 800532a:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
		pdynamic->roi_config__user_roi_requested_global_xy_size;

	LOG_FUNCTION_END(status);

	return status;
}
 800532e:	2000      	movs	r0, #0
 8005330:	4770      	bx	lr

08005332 <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 8005332:	b5f0      	push	{r4, r5, r6, r7, lr}
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 8005334:	f8b0 3336 	ldrh.w	r3, [r0, #822]	; 0x336
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 8005338:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800533c:	f8b1 204a 	ldrh.w	r2, [r1, #74]	; 0x4a

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 8005340:	7c8f      	ldrb	r7, [r1, #18]
 8005342:	2400      	movs	r4, #0

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 8005344:	f04f 0c4c 	mov.w	ip, #76	; 0x4c
 8005348:	3401      	adds	r4, #1
	for (i = 1; i < presults->active_results; i++) {
 800534a:	b2e6      	uxtb	r6, r4
 800534c:	42b7      	cmp	r7, r6
 800534e:	d810      	bhi.n	8005372 <VL53LX_dynamic_zone_update+0x40>
 8005350:	f64f 71ff 	movw	r1, #65535	; 0xffff
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;

	}

	if (max_total_rate_per_spads == 0) {
 8005354:	b1aa      	cbz	r2, 8005382 <VL53LX_dynamic_zone_update+0x50>

		temp = 0xFFFF;
	} else {

		temp = target_rate << 14;
 8005356:	039b      	lsls	r3, r3, #14
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 8005358:	fbb3 f3f2 	udiv	r3, r3, r2
 800535c:	428b      	cmp	r3, r1
 800535e:	bf28      	it	cs
 8005360:	460b      	movcs	r3, r1
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 8005362:	220a      	movs	r2, #10
 8005364:	f500 500a 	add.w	r0, r0, #8832	; 0x2280
 8005368:	fb02 0005 	mla	r0, r2, r5, r0
			(uint16_t)temp;
 800536c:	80c3      	strh	r3, [r0, #6]
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
}
 800536e:	2000      	movs	r0, #0
 8005370:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 8005372:	fb0c 1604 	mla	r6, ip, r4, r1
 8005376:	f8b6 604a 	ldrh.w	r6, [r6, #74]	; 0x4a
 800537a:	42b2      	cmp	r2, r6
 800537c:	bf38      	it	cc
 800537e:	4632      	movcc	r2, r6
 8005380:	e7e2      	b.n	8005348 <VL53LX_dynamic_zone_update+0x16>
		temp = 0xFFFF;
 8005382:	460b      	mov	r3, r1
 8005384:	e7ed      	b.n	8005362 <VL53LX_dynamic_zone_update+0x30>

08005386 <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 8005386:	b538      	push	{r3, r4, r5, lr}
 8005388:	4601      	mov	r1, r0
	VL53LX_Error status = VL53LX_ERROR_NONE;

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800538a:	f500 7047 	add.w	r0, r0, #796	; 0x31c
	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800538e:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 8005392:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 8005396:	440a      	add	r2, r1
	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 8005398:	f003 0301 	and.w	r3, r3, #1
	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800539c:	f892 211e 	ldrb.w	r2, [r2, #286]	; 0x11e
 80053a0:	2a01      	cmp	r2, #1
 80053a2:	d114      	bne.n	80053ce <VL53LX_multizone_hist_bins_update+0x48>
 80053a4:	f891 50c5 	ldrb.w	r5, [r1, #197]	; 0xc5
 80053a8:	f891 40c6 	ldrb.w	r4, [r1, #198]	; 0xc6
 80053ac:	f891 20c7 	ldrb.w	r2, [r1, #199]	; 0xc7
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 80053b0:	b9fb      	cbnz	r3, 80053f2 <VL53LX_multizone_hist_bins_update+0x6c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 80053b2:	f881 531d 	strb.w	r5, [r1, #797]	; 0x31d
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 80053b6:	f881 431e 	strb.w	r4, [r1, #798]	; 0x31e
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 80053ba:	f881 231f 	strb.w	r2, [r1, #799]	; 0x31f
	}



	if (status == VL53LX_ERROR_NONE) {
		VL53LX_copy_hist_bins_to_static_cfg(
 80053be:	f501 725b 	add.w	r2, r1, #876	; 0x36c
 80053c2:	f201 3136 	addw	r1, r1, #822	; 0x336
 80053c6:	f7ff f857 	bl	8004478 <VL53LX_copy_hist_bins_to_static_cfg>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80053ca:	2000      	movs	r0, #0
 80053cc:	bd38      	pop	{r3, r4, r5, pc}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 80053ce:	2a02      	cmp	r2, #2
 80053d0:	d106      	bne.n	80053e0 <VL53LX_multizone_hist_bins_update+0x5a>
 80053d2:	f891 50cb 	ldrb.w	r5, [r1, #203]	; 0xcb
 80053d6:	f891 40cc 	ldrb.w	r4, [r1, #204]	; 0xcc
 80053da:	f891 20cd 	ldrb.w	r2, [r1, #205]	; 0xcd
 80053de:	e7e7      	b.n	80053b0 <VL53LX_multizone_hist_bins_update+0x2a>
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 80053e0:	2a03      	cmp	r2, #3
 80053e2:	d1ec      	bne.n	80053be <VL53LX_multizone_hist_bins_update+0x38>
 80053e4:	f891 50d3 	ldrb.w	r5, [r1, #211]	; 0xd3
 80053e8:	f891 40d4 	ldrb.w	r4, [r1, #212]	; 0xd4
 80053ec:	f891 20d5 	ldrb.w	r2, [r1, #213]	; 0xd5
 80053f0:	e7de      	b.n	80053b0 <VL53LX_multizone_hist_bins_update+0x2a>
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 80053f2:	f881 5320 	strb.w	r5, [r1, #800]	; 0x320
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 80053f6:	f881 4321 	strb.w	r4, [r1, #801]	; 0x321
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 80053fa:	f881 2322 	strb.w	r2, [r1, #802]	; 0x322
 80053fe:	e7de      	b.n	80053be <VL53LX_multizone_hist_bins_update+0x38>

08005400 <VL53LX_update_internal_stream_counters>:
	VL53LX_LLDriverData_t  *pdev =
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 8005400:	f890 0357 	ldrb.w	r0, [r0, #855]	; 0x357

	if (stream_divider == 0) {
 8005404:	b910      	cbnz	r0, 800540c <VL53LX_update_internal_stream_counters+0xc>


		*pinternal_stream_count = external_stream_count;
 8005406:	7011      	strb	r1, [r2, #0]
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
}
 8005408:	2000      	movs	r0, #0
 800540a:	4770      	bx	lr
	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800540c:	7819      	ldrb	r1, [r3, #0]
 800540e:	3801      	subs	r0, #1
 8005410:	4281      	cmp	r1, r0
 8005412:	d108      	bne.n	8005426 <VL53LX_update_internal_stream_counters+0x26>
		if (*pinternal_stream_count == 0xFF)
 8005414:	7811      	ldrb	r1, [r2, #0]
 8005416:	29ff      	cmp	r1, #255	; 0xff
			*pinternal_stream_count = 0x80;
 8005418:	bf0c      	ite	eq
 800541a:	2180      	moveq	r1, #128	; 0x80
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800541c:	3101      	addne	r1, #1
 800541e:	7011      	strb	r1, [r2, #0]
		*pinternal_stream_count_val = 0;
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]
 8005424:	e7f0      	b.n	8005408 <VL53LX_update_internal_stream_counters+0x8>
		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 8005426:	3101      	adds	r1, #1
 8005428:	7019      	strb	r1, [r3, #0]
 800542a:	e7ed      	b.n	8005408 <VL53LX_update_internal_stream_counters+0x8>

0800542c <VL53LX_update_ll_driver_rd_state>:
{
 800542c:	b510      	push	{r4, lr}
 800542e:	4604      	mov	r4, r0
	if ((pdev->sys_ctrl.system__mode_start &
 8005430:	f890 039c 	ldrb.w	r0, [r0, #924]	; 0x39c
 8005434:	f010 00f0 	ands.w	r0, r0, #240	; 0xf0
 8005438:	d110      	bne.n	800545c <VL53LX_update_ll_driver_rd_state+0x30>
		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 800543a:	2303      	movs	r3, #3
 800543c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8005440:	2302      	movs	r3, #2
		pstate->rd_stream_count  = 0;
 8005442:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
		pstate->rd_internal_stream_count = 0;
 8005446:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
		pstate->rd_internal_stream_count_val = 0;
 800544a:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800544e:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		pstate->rd_timing_status = 0;
 8005452:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
		pstate->rd_zone_id       = 0;
 8005456:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 800545a:	bd10      	pop	{r4, pc}
		if (pstate->rd_stream_count == 0xFF)
 800545c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005460:	2bff      	cmp	r3, #255	; 0xff
			pstate->rd_stream_count = 0x80;
 8005462:	bf0c      	ite	eq
 8005464:	2380      	moveq	r3, #128	; 0x80
			pstate->rd_stream_count++;
 8005466:	3301      	addne	r3, #1
 8005468:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		status = VL53LX_update_internal_stream_counters(Dev,
 800546c:	f104 0235 	add.w	r2, r4, #53	; 0x35
 8005470:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8005474:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8005478:	4620      	mov	r0, r4
 800547a:	f7ff ffc1 	bl	8005400 <VL53LX_update_internal_stream_counters>
		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800547e:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8005482:	f083 0302 	eor.w	r3, r3, #2
 8005486:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		switch (pstate->rd_device_state) {
 800548a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800548e:	3b03      	subs	r3, #3
 8005490:	2b05      	cmp	r3, #5
 8005492:	d846      	bhi.n	8005522 <VL53LX_update_ll_driver_rd_state+0xf6>
 8005494:	e8df f003 	tbb	[pc, r3]
 8005498:	1f454503 	.word	0x1f454503
 800549c:	3b2d      	.short	0x3b2d
			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800549e:	f894 3396 	ldrb.w	r3, [r4, #918]	; 0x396
 80054a2:	079b      	lsls	r3, r3, #30
 80054a4:	d50e      	bpl.n	80054c4 <VL53LX_update_ll_driver_rd_state+0x98>
				pstate->rd_device_state =
 80054a6:	2306      	movs	r3, #6
					pstate->rd_device_state =
 80054a8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
			pstate->rd_stream_count  = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			pstate->rd_internal_stream_count = 0;
 80054b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			pstate->rd_internal_stream_count_val = 0;
 80054b6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			pstate->rd_timing_status = 0;
 80054ba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			pstate->rd_zone_id       = 0;
 80054be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			break;
 80054c2:	e7ca      	b.n	800545a <VL53LX_update_ll_driver_rd_state+0x2e>
				if (pstate->rd_zone_id >=
 80054c4:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 80054c8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80054cc:	429a      	cmp	r2, r3
					pstate->rd_device_state =
 80054ce:	bf2c      	ite	cs
 80054d0:	2308      	movcs	r3, #8
					pstate->rd_device_state =
 80054d2:	2307      	movcc	r3, #7
 80054d4:	e7e8      	b.n	80054a8 <VL53LX_update_ll_driver_rd_state+0x7c>
			pstate->rd_stream_count = 0;
 80054d6:	2300      	movs	r3, #0
 80054d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			pstate->rd_internal_stream_count = 0;
 80054dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			pstate->rd_internal_stream_count_val = 0;
 80054e0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			pstate->rd_zone_id      = 0;
 80054e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if (pstate->rd_zone_id >=
 80054e8:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 80054ec:	b15b      	cbz	r3, 8005506 <VL53LX_update_ll_driver_rd_state+0xda>
				pstate->rd_device_state =
 80054ee:	2307      	movs	r3, #7
 80054f0:	e00a      	b.n	8005508 <VL53LX_update_ll_driver_rd_state+0xdc>
			pstate->rd_zone_id++;
 80054f2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
			if (pstate->rd_zone_id >=
 80054f6:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
			pstate->rd_zone_id++;
 80054fa:	3301      	adds	r3, #1
 80054fc:	b2db      	uxtb	r3, r3
			if (pstate->rd_zone_id >=
 80054fe:	429a      	cmp	r2, r3
			pstate->rd_zone_id++;
 8005500:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if (pstate->rd_zone_id >=
 8005504:	d8f3      	bhi.n	80054ee <VL53LX_update_ll_driver_rd_state+0xc2>
				pstate->rd_device_state =
 8005506:	2308      	movs	r3, #8
 8005508:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 800550c:	e7a5      	b.n	800545a <VL53LX_update_ll_driver_rd_state+0x2e>
			pstate->rd_zone_id        = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			pstate->rd_timing_status ^= 0x01;
 8005514:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005518:	f083 0301 	eor.w	r3, r3, #1
 800551c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8005520:	e7e2      	b.n	80054e8 <VL53LX_update_ll_driver_rd_state+0xbc>
			pstate->rd_device_state  =
 8005522:	2303      	movs	r3, #3
 8005524:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8005528:	2202      	movs	r2, #2
			pstate->rd_stream_count  = 0;
 800552a:	2300      	movs	r3, #0
 800552c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			pstate->rd_internal_stream_count = 0;
 8005530:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			pstate->rd_internal_stream_count_val = 0;
 8005534:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8005538:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
 800553c:	e7bd      	b.n	80054ba <VL53LX_update_ll_driver_rd_state+0x8e>

0800553e <VL53LX_update_ll_driver_cfg_state>:
{
 800553e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((pdev->sys_ctrl.system__mode_start &
 8005540:	f890 539c 	ldrb.w	r5, [r0, #924]	; 0x39c
 8005544:	f015 05f0 	ands.w	r5, r5, #240	; 0xf0
{
 8005548:	4604      	mov	r4, r0
	if ((pdev->sys_ctrl.system__mode_start &
 800554a:	d126      	bne.n	800559a <VL53LX_update_ll_driver_cfg_state+0x5c>
		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 800554c:	2303      	movs	r3, #3
 800554e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8005552:	2302      	movs	r3, #2
		pstate->cfg_stream_count  = 0;
 8005554:	f880 502d 	strb.w	r5, [r0, #45]	; 0x2d
		pstate->cfg_internal_stream_count = 0;
 8005558:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e
		pstate->cfg_internal_stream_count_val = 0;
 800555c:	f880 502f 	strb.w	r5, [r0, #47]	; 0x2f
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8005560:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
		pstate->cfg_timing_status = 0;
 8005564:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
		pstate->cfg_zone_id       = 0;
 8005568:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
		prev_cfg_gph_id           = 0;
 800556c:	462f      	mov	r7, r5
		prev_cfg_zone_id          = 0;
 800556e:	462e      	mov	r6, r5
	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8005570:	4628      	mov	r0, r5
	if (pdev->zone_cfg.active_zones == 0) {
 8005572:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8005576:	2b00      	cmp	r3, #0
 8005578:	f040 808c 	bne.w	8005694 <VL53LX_update_ll_driver_cfg_state+0x156>
			= prev_cfg_stream_count - 1;
 800557c:	f504 520a 	add.w	r2, r4, #8832	; 0x2280
 8005580:	210a      	movs	r1, #10
 8005582:	fb01 2606 	mla	r6, r1, r6, r2
 8005586:	3d01      	subs	r5, #1
 8005588:	70b5      	strb	r5, [r6, #2]
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 800558a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800558e:	fb01 2303 	mla	r3, r1, r3, r2
 8005592:	f087 0702 	eor.w	r7, r7, #2
 8005596:	70df      	strb	r7, [r3, #3]
}
 8005598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800559a:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800559e:	f890 7030 	ldrb.w	r7, [r0, #48]	; 0x30
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 80055a2:	f890 6032 	ldrb.w	r6, [r0, #50]	; 0x32
		if (pstate->cfg_stream_count == 0xFF)
 80055a6:	2dff      	cmp	r5, #255	; 0xff
			pstate->cfg_stream_count = 0x80;
 80055a8:	bf0c      	ite	eq
 80055aa:	2380      	moveq	r3, #128	; 0x80
			pstate->cfg_stream_count++;
 80055ac:	1c6b      	addne	r3, r5, #1
 80055ae:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		status = VL53LX_update_internal_stream_counters(
 80055b2:	f100 022e 	add.w	r2, r0, #46	; 0x2e
 80055b6:	f100 032f 	add.w	r3, r0, #47	; 0x2f
 80055ba:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
 80055be:	f7ff ff1f 	bl	8005400 <VL53LX_update_internal_stream_counters>
		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80055c2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80055c6:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
 80055ca:	f083 0302 	eor.w	r3, r3, #2
 80055ce:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		switch (pstate->cfg_device_state) {
 80055d2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d023      	beq.n	8005622 <VL53LX_update_ll_driver_cfg_state+0xe4>
 80055da:	2b05      	cmp	r3, #5
 80055dc:	d036      	beq.n	800564c <VL53LX_update_ll_driver_cfg_state+0x10e>
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d146      	bne.n	8005670 <VL53LX_update_ll_driver_cfg_state+0x132>
			pstate->cfg_zone_id = 1;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			if (pstate->cfg_zone_id >
 80055e8:	b93a      	cbnz	r2, 80055fa <VL53LX_update_ll_driver_cfg_state+0xbc>
				pstate->cfg_timing_status ^= 0x01;
 80055ea:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
				pstate->cfg_zone_id = 0;
 80055ee:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
				pstate->cfg_timing_status ^= 0x01;
 80055f2:	f083 0301 	eor.w	r3, r3, #1
 80055f6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 80055fa:	f894 2357 	ldrb.w	r2, [r4, #855]	; 0x357
			pstate->cfg_stream_count = 1;
 80055fe:	2301      	movs	r3, #1
 8005600:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 8005604:	b93a      	cbnz	r2, 8005616 <VL53LX_update_ll_driver_cfg_state+0xd8>
				pstate->cfg_internal_stream_count = 1;
 8005606:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
				pstate->cfg_internal_stream_count_val = 0;
 800560a:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
			pstate->cfg_device_state =
 800560e:	2304      	movs	r3, #4
					pstate->cfg_device_state =
 8005610:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8005614:	e7ad      	b.n	8005572 <VL53LX_update_ll_driver_cfg_state+0x34>
				pstate->cfg_internal_stream_count = 0;
 8005616:	2200      	movs	r2, #0
 8005618:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
				pstate->cfg_internal_stream_count_val = 1;
 800561c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8005620:	e7f5      	b.n	800560e <VL53LX_update_ll_driver_cfg_state+0xd0>
			pstate->cfg_zone_id++;
 8005622:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8005626:	3301      	adds	r3, #1
 8005628:	b2db      	uxtb	r3, r3
			if (pstate->cfg_zone_id >
 800562a:	4293      	cmp	r3, r2
			pstate->cfg_zone_id++;
 800562c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			if (pstate->cfg_zone_id >
 8005630:	d99f      	bls.n	8005572 <VL53LX_update_ll_driver_cfg_state+0x34>
				pstate->cfg_zone_id = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
				pstate->cfg_timing_status ^= 0x01;
 8005638:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800563c:	f083 0301 	eor.w	r3, r3, #1
 8005640:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
				if (pdev->zone_cfg.active_zones > 0) {
 8005644:	2a00      	cmp	r2, #0
 8005646:	d094      	beq.n	8005572 <VL53LX_update_ll_driver_cfg_state+0x34>
					pstate->cfg_device_state =
 8005648:	2305      	movs	r3, #5
 800564a:	e7e1      	b.n	8005610 <VL53LX_update_ll_driver_cfg_state+0xd2>
			pstate->cfg_zone_id++;
 800564c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8005650:	3301      	adds	r3, #1
 8005652:	b2db      	uxtb	r3, r3
			if (pstate->cfg_zone_id >
 8005654:	429a      	cmp	r2, r3
			pstate->cfg_zone_id++;
 8005656:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			if (pstate->cfg_zone_id >
 800565a:	d28a      	bcs.n	8005572 <VL53LX_update_ll_driver_cfg_state+0x34>
				pstate->cfg_zone_id = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
				pstate->cfg_timing_status ^= 0x01;
 8005662:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8005666:	f083 0301 	eor.w	r3, r3, #1
 800566a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 800566e:	e780      	b.n	8005572 <VL53LX_update_ll_driver_cfg_state+0x34>
			pstate->cfg_device_state =
 8005670:	2303      	movs	r3, #3
 8005672:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			pstate->cfg_gph_id =
 8005676:	2202      	movs	r2, #2
			pstate->cfg_stream_count = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
			pstate->cfg_internal_stream_count = 0;
 800567e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
			pstate->cfg_internal_stream_count_val = 0;
 8005682:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			pstate->cfg_gph_id =
 8005686:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
			pstate->cfg_timing_status = 0;
 800568a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
			pstate->cfg_zone_id       = 0;
 800568e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			break;
 8005692:	e76e      	b.n	8005572 <VL53LX_update_ll_driver_cfg_state+0x34>
 8005694:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8005698:	eb04 0446 	add.w	r4, r4, r6, lsl #1
			= prev_cfg_stream_count;
 800569c:	f242 2382 	movw	r3, #8834	; 0x2282
 80056a0:	54e5      	strb	r5, [r4, r3]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 80056a2:	f242 2383 	movw	r3, #8835	; 0x2283
 80056a6:	54e7      	strb	r7, [r4, r3]
 80056a8:	e776      	b.n	8005598 <VL53LX_update_ll_driver_cfg_state+0x5a>

080056aa <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 80056aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 80056ae:	f500 5508 	add.w	r5, r0, #8704	; 0x2200
{
 80056b2:	4604      	mov	r4, r0
	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 80056b4:	6c2e      	ldr	r6, [r5, #64]	; 0x40
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 80056b6:	e9d5 3012 	ldrd	r3, r0, [r5, #72]	; 0x48
 80056ba:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
		pxmonitor->VL53LX_p_016;
	if (peak_duration_us == 0)
		peak_duration_us = 1000;
 80056be:	2e00      	cmp	r6, #0
 80056c0:	bf08      	it	eq
 80056c2:	463e      	moveq	r6, r7
	temp64a = pxmonitor->VL53LX_p_017 +
 80056c4:	4418      	add	r0, r3
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 80056c6:	4632      	mov	r2, r6
 80056c8:	2300      	movs	r3, #0
 80056ca:	fba0 0107 	umull	r0, r1, r0, r7
 80056ce:	f7fb fac3 	bl	8000c58 <__aeabi_uldivmod>
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 80056d2:	fba0 8907 	umull	r8, r9, r0, r7
 80056d6:	fb07 9901 	mla	r9, r7, r1, r9
 80056da:	4632      	mov	r2, r6
 80056dc:	2300      	movs	r3, #0
 80056de:	4640      	mov	r0, r8
 80056e0:	4649      	mov	r1, r9
 80056e2:	f7fb fab9 	bl	8000c58 <__aeabi_uldivmod>

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 80056e6:	f504 539e 	add.w	r3, r4, #5056	; 0x13c0
 80056ea:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
 80056ec:	695d      	ldr	r5, [r3, #20]
	if (temp64z == 0)
		temp64z = 1;
	temp64a = temp64a * 1000 * 256;
 80056ee:	f44f 367a 	mov.w	r6, #256000	; 0x3e800
	if (temp64z == 0)
 80056f2:	4355      	muls	r5, r2
 80056f4:	bf08      	it	eq
 80056f6:	2501      	moveq	r5, #1
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 80056f8:	460f      	mov	r7, r1
	temp64a = temp64a * 1000 * 256;
 80056fa:	fba0 0106 	umull	r0, r1, r0, r6
	temp64a = do_division_u(temp64a, temp64z);
 80056fe:	462a      	mov	r2, r5
	temp64a = temp64a * 1000 * 256;
 8005700:	fb06 1107 	mla	r1, r6, r7, r1
	temp64a = do_division_u(temp64a, temp64z);
 8005704:	2300      	movs	r3, #0
 8005706:	f7fb faa7 	bl	8000c58 <__aeabi_uldivmod>
 800570a:	460b      	mov	r3, r1
	temp64a = temp64a * 1000 * 256;
 800570c:	fba0 0106 	umull	r0, r1, r0, r6
	temp64a = do_division_u(temp64a, temp64z);
 8005710:	462a      	mov	r2, r5
	temp64a = temp64a * 1000 * 256;
 8005712:	fb06 1103 	mla	r1, r6, r3, r1
	temp64a = do_division_u(temp64a, temp64z);
 8005716:	2300      	movs	r3, #0
 8005718:	f7fb fa9e 	bl	8000c58 <__aeabi_uldivmod>
 800571c:	f504 53a0 	add.w	r3, r4, #5120	; 0x1400

	pint->required_samples = (uint32_t)temp64a;


	if (pint->required_samples < 2)
 8005720:	2801      	cmp	r0, #1
 8005722:	f103 0310 	add.w	r3, r3, #16
		pint->required_samples = 2;
 8005726:	bf96      	itet	ls
 8005728:	2202      	movls	r2, #2
	pint->required_samples = (uint32_t)temp64a;
 800572a:	6058      	strhi	r0, [r3, #4]
		pint->required_samples = 2;
 800572c:	605a      	strls	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
}
 800572e:	2000      	movs	r0, #0
 8005730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005734 <VL53LX_dynamic_xtalk_correction_output_init>:
	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);

	pdata->smudge_corr_valid = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
	pdata->smudge_corr_clipped = 0;
	pdata->single_xtalk_delta_flag = 0;
	pdata->averaged_xtalk_delta_flag = 0;
 800573a:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
	pdata->sample_limit_exceeded_flag = 0;
	pdata->gradient_zero_flag = 0;
 800573e:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
	pdata->new_xtalk_applied_flag = 0;

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 8005742:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
 8005746:	f8c0 319c 	str.w	r3, [r0, #412]	; 0x19c
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;

	LOG_FUNCTION_END(status);

	return status;
}
 800574a:	4618      	mov	r0, r3
 800574c:	4770      	bx	lr

0800574e <VL53LX_dynamic_xtalk_correction_data_init>:
{
 800574e:	b538      	push	{r3, r4, r5, lr}
	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 8005750:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8005754:	f240 1201 	movw	r2, #257	; 0x101
 8005758:	52c2      	strh	r2, [r0, r3]
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800575a:	f241 33ce 	movw	r3, #5070	; 0x13ce
 800575e:	2200      	movs	r2, #0
 8005760:	54c2      	strb	r2, [r0, r3]
	pdev->smudge_correct_config.smudge_margin =
 8005762:	f241 33d0 	movw	r3, #5072	; 0x13d0
	pdev->smudge_correct_config.noise_margin =
 8005766:	2164      	movs	r1, #100	; 0x64
	pdev->smudge_correct_config.smudge_margin =
 8005768:	52c2      	strh	r2, [r0, r3]
	pdev->smudge_correct_config.noise_margin =
 800576a:	f241 33d4 	movw	r3, #5076	; 0x13d4
	pdev->smudge_corrector_internals.accumulator = 0;
 800576e:	2400      	movs	r4, #0
	pdev->smudge_correct_config.noise_margin =
 8005770:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 8005772:	f241 33d8 	movw	r3, #5080	; 0x13d8
	pdev->smudge_correct_config.sample_limit =
 8005776:	21c8      	movs	r1, #200	; 0xc8
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 8005778:	50c2      	str	r2, [r0, r3]
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800577a:	f241 33dc 	movw	r3, #5084	; 0x13dc
	pdev->smudge_corrector_internals.accumulator = 0;
 800577e:	2500      	movs	r5, #0
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 8005780:	54c2      	strb	r2, [r0, r3]
	pdev->smudge_correct_config.sample_limit =
 8005782:	f500 539f 	add.w	r3, r0, #5088	; 0x13e0
 8005786:	6019      	str	r1, [r3, #0]
	pdev->smudge_correct_config.single_xtalk_delta =
 8005788:	f241 33e4 	movw	r3, #5092	; 0x13e4
 800578c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005790:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.averaged_xtalk_delta =
 8005792:	f241 33e8 	movw	r3, #5096	; 0x13e8
 8005796:	f44f 719a 	mov.w	r1, #308	; 0x134
 800579a:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800579c:	f241 33ec 	movw	r3, #5100	; 0x13ec
 80057a0:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 80057a4:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 80057a6:	f241 33f0 	movw	r3, #5104	; 0x13f0
 80057aa:	2180      	movs	r1, #128	; 0x80
 80057ac:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.scaler_calc_method =
 80057ae:	f241 33f4 	movw	r3, #5108	; 0x13f4
	pdev->smudge_correct_config.x_gradient_scaler =
 80057b2:	f241 31f6 	movw	r1, #5110	; 0x13f6
	pdev->smudge_correct_config.scaler_calc_method =
 80057b6:	54c2      	strb	r2, [r0, r3]
	pdev->smudge_correct_config.x_gradient_scaler =
 80057b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057bc:	5243      	strh	r3, [r0, r1]
	pdev->smudge_correct_config.y_gradient_scaler =
 80057be:	f241 31f8 	movw	r1, #5112	; 0x13f8
 80057c2:	5243      	strh	r3, [r0, r1]
	pdev->smudge_correct_config.user_scaler_set =
 80057c4:	f241 33fa 	movw	r3, #5114	; 0x13fa
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 80057c8:	f04f 715c 	mov.w	r1, #57671680	; 0x3700000
	pdev->smudge_correct_config.user_scaler_set =
 80057cc:	54c2      	strb	r2, [r0, r3]
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 80057ce:	f241 33fc 	movw	r3, #5116	; 0x13fc
 80057d2:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.nodetect_sample_limit =
 80057d4:	f500 53a0 	add.w	r3, r0, #5120	; 0x1400
 80057d8:	2128      	movs	r1, #40	; 0x28
 80057da:	6019      	str	r1, [r3, #0]
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 80057dc:	f241 4304 	movw	r3, #5124	; 0x1404
 80057e0:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80057e4:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.nodetect_min_range_mm =
 80057e6:	f241 4308 	movw	r3, #5128	; 0x1408
 80057ea:	f44f 7161 	mov.w	r1, #900	; 0x384
 80057ee:	52c1      	strh	r1, [r0, r3]
	pdev->smudge_correct_config.max_smudge_factor =
 80057f0:	f241 430c 	movw	r3, #5132	; 0x140c
 80057f4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80057f8:	50c1      	str	r1, [r0, r3]
	pdev->smudge_corrector_internals.current_samples = 0;
 80057fa:	f241 4310 	movw	r3, #5136	; 0x1410
 80057fe:	50c2      	str	r2, [r0, r3]
	pdev->smudge_corrector_internals.required_samples = 0;
 8005800:	f241 4314 	movw	r3, #5140	; 0x1414
 8005804:	50c2      	str	r2, [r0, r3]
	pdev->smudge_corrector_internals.accumulator = 0;
 8005806:	f500 53a0 	add.w	r3, r0, #5120	; 0x1400
 800580a:	e9c3 4506 	strd	r4, r5, [r3, #24]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800580e:	f500 53a1 	add.w	r3, r0, #5152	; 0x1420
	VL53LX_dynamic_xtalk_correction_output_init(pres);
 8005812:	f500 5003 	add.w	r0, r0, #8384	; 0x20c0
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 8005816:	601a      	str	r2, [r3, #0]
	VL53LX_dynamic_xtalk_correction_output_init(pres);
 8005818:	3020      	adds	r0, #32
 800581a:	f7ff ff8b 	bl	8005734 <VL53LX_dynamic_xtalk_correction_output_init>
}
 800581e:	4610      	mov	r0, r2
 8005820:	bd38      	pop	{r3, r4, r5, pc}

08005822 <VL53LX_xtalk_cal_data_init>:

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 8005822:	f241 2374 	movw	r3, #4724	; 0x1274
{
 8005826:	b510      	push	{r4, lr}
	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 8005828:	2400      	movs	r4, #0
 800582a:	50c4      	str	r4, [r0, r3]
 800582c:	f241 2378 	movw	r3, #4728	; 0x1278
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 8005830:	2218      	movs	r2, #24
	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 8005832:	50c4      	str	r4, [r0, r3]
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 8005834:	f500 5093 	add.w	r0, r0, #4704	; 0x1260
 8005838:	4621      	mov	r1, r4
 800583a:	301c      	adds	r0, #28
 800583c:	f004 f889 	bl	8009952 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
}
 8005840:	4620      	mov	r0, r4
 8005842:	bd10      	pop	{r4, pc}

08005844 <VL53LX_low_power_auto_data_init>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8005844:	f241 4328 	movw	r3, #5160	; 0x1428
 8005848:	2203      	movs	r2, #3
 800584a:	50c2      	str	r2, [r0, r3]
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800584c:	f241 422c 	movw	r2, #5164	; 0x142c
 8005850:	2300      	movs	r3, #0
 8005852:	5283      	strh	r3, [r0, r2]
	pdev->low_power_auto_data.saved_vhv_init = 0;
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8005854:	f241 422e 	movw	r2, #5166	; 0x142e
 8005858:	5483      	strb	r3, [r0, r2]
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800585a:	f241 4230 	movw	r2, #5168	; 0x1430
 800585e:	5083      	str	r3, [r0, r2]
	pdev->low_power_auto_data.dss__required_spads = 0;
 8005860:	f241 4234 	movw	r2, #5172	; 0x1434
 8005864:	5283      	strh	r3, [r0, r2]

	LOG_FUNCTION_END(status);

	return status;
}
 8005866:	4618      	mov	r0, r3
 8005868:	4770      	bx	lr

0800586a <VL53LX_low_power_auto_setup_manual_calibration>:
	VL53LX_Error  status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
 800586a:	f241 432c 	movw	r3, #5164	; 0x142c
		pdev->stat_nvm.vhv_config__init;
 800586e:	f890 231b 	ldrb.w	r2, [r0, #795]	; 0x31b
	pdev->low_power_auto_data.saved_vhv_init =
 8005872:	54c2      	strb	r2, [r0, r3]
	pdev->low_power_auto_data.saved_vhv_timeout =
 8005874:	f241 412d 	movw	r1, #5165	; 0x142d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8005878:	f890 3318 	ldrb.w	r3, [r0, #792]	; 0x318
	pdev->low_power_auto_data.saved_vhv_timeout =
 800587c:	5443      	strb	r3, [r0, r1]


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800587e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005882:	f880 231b 	strb.w	r2, [r0, #795]	; 0x31b

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8005886:	f241 4228 	movw	r2, #5160	; 0x1428
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800588a:	f003 0303 	and.w	r3, r3, #3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800588e:	5c82      	ldrb	r2, [r0, r2]
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8005890:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8005894:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318

	pdev->gen_cfg.phasecal_config__override = 0x01;
 8005898:	2301      	movs	r3, #1
 800589a:	f880 335f 	strb.w	r3, [r0, #863]	; 0x35f
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800589e:	f241 3396 	movw	r3, #5014	; 0x1396
	pdev->low_power_auto_data.first_run_phasecal_result =
 80058a2:	f241 422e 	movw	r2, #5166	; 0x142e
		pdev->dbg_results.phasecal_result__vcsel_start;
 80058a6:	5cc3      	ldrb	r3, [r0, r3]
	pdev->low_power_auto_data.first_run_phasecal_result =
 80058a8:	5483      	strb	r3, [r0, r2]
	pdev->gen_cfg.cal_config__vcsel_start =
 80058aa:	f880 3359 	strb.w	r3, [r0, #857]	; 0x359
		pdev->low_power_auto_data.first_run_phasecal_result;

	LOG_FUNCTION_END(status);

	return status;
}
 80058ae:	2000      	movs	r0, #0
 80058b0:	4770      	bx	lr

080058b2 <VL53LX_low_power_auto_update_DSS>:


	utemp32a = utemp32a << 16;


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 80058b2:	f8b0 33a2 	ldrh.w	r3, [r0, #930]	; 0x3a2
 80058b6:	b31b      	cbz	r3, 8005900 <VL53LX_low_power_auto_update_DSS+0x4e>
		 + pS->result__ambient_count_rate_mcps_sd0;
 80058b8:	f8b0 13a6 	ldrh.w	r1, [r0, #934]	; 0x3a6
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 80058bc:	f8b0 23ae 	ldrh.w	r2, [r0, #942]	; 0x3ae
		 + pS->result__ambient_count_rate_mcps_sd0;
 80058c0:	440a      	add	r2, r1
 80058c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80058c6:	428a      	cmp	r2, r1
 80058c8:	bfa8      	it	ge
 80058ca:	460a      	movge	r2, r1
	utemp32a = utemp32a << 16;
 80058cc:	0412      	lsls	r2, r2, #16
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
	else {

		utemp32a = utemp32a /
 80058ce:	fbb2 f3f3 	udiv	r3, r2, r3
		pdev->sys_results.result__dss_actual_effective_spads_sd0;

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 80058d2:	f241 4230 	movw	r2, #5168	; 0x1430
 80058d6:	5083      	str	r3, [r0, r2]

		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 80058d8:	b193      	cbz	r3, 8005900 <VL53LX_low_power_auto_update_DSS+0x4e>
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 80058da:	f8b0 2336 	ldrh.w	r2, [r0, #822]	; 0x336
 80058de:	0412      	lsls	r2, r2, #16
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
		else {

			utemp32a = utemp32a /
 80058e0:	fbb2 f3f3 	udiv	r3, r2, r3
			if (utemp32a > 0xFFFF)
				utemp32a = 0xFFFF;


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 80058e4:	428b      	cmp	r3, r1
 80058e6:	bf28      	it	cs
 80058e8:	460b      	movcs	r3, r1
 80058ea:	b29b      	uxth	r3, r3

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 80058ec:	f241 4234 	movw	r2, #5172	; 0x1434
 80058f0:	5283      	strh	r3, [r0, r2]


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80058f2:	f8a0 3366 	strh.w	r3, [r0, #870]	; 0x366
			pdev->low_power_auto_data.dss__required_spads;
		pdev->gen_cfg.dss_config__roi_mode_control =
 80058f6:	2302      	movs	r3, #2
 80058f8:	f880 3360 	strb.w	r3, [r0, #864]	; 0x360
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80058fc:	2000      	movs	r0, #0
 80058fe:	4770      	bx	lr
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 8005900:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005904:	e7f2      	b.n	80058ec <VL53LX_low_power_auto_update_DSS+0x3a>

08005906 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 8005906:	b5f0      	push	{r4, r5, r6, r7, lr}
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_Error  status = VL53LX_ERROR_NONE;
	uint8_t i, timing;
	uint8_t sum = 0;

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 8005908:	f890 4408 	ldrb.w	r4, [r0, #1032]	; 0x408
 800590c:	1fe2      	subs	r2, r4, #7
 800590e:	4253      	negs	r3, r2
 8005910:	4153      	adcs	r3, r2
 8005912:	2460      	movs	r4, #96	; 0x60
 8005914:	2200      	movs	r2, #0
 8005916:	435c      	muls	r4, r3
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 8005918:	26c0      	movs	r6, #192	; 0xc0
	uint8_t sum = 0;
 800591a:	4613      	mov	r3, r2
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800591c:	f641 4764 	movw	r7, #7268	; 0x1c64
 8005920:	fb06 4502 	mla	r5, r6, r2, r4
 8005924:	443d      	add	r5, r7
 8005926:	3201      	adds	r2, #1
 8005928:	5945      	ldr	r5, [r0, r5]
 800592a:	2d00      	cmp	r5, #0
			sum++;
 800592c:	bfc4      	itt	gt
 800592e:	3301      	addgt	r3, #1
 8005930:	b2db      	uxtbgt	r3, r3
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 8005932:	2a06      	cmp	r2, #6
 8005934:	d1f4      	bne.n	8005920 <VL53LX_compute_histo_merge_nb+0x1a>
	*histo_merge_nb = sum;
 8005936:	700b      	strb	r3, [r1, #0]

	return status;
}
 8005938:	2000      	movs	r0, #0
 800593a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800593c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
{
 800593c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800593e:	461c      	mov	r4, r3
	if (add_smudge == 1) {
 8005940:	f89d 3020 	ldrb.w	r3, [sp, #32]
{
 8005944:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
	if (add_smudge == 1) {
 8005948:	2b01      	cmp	r3, #1
			(uint32_t)pconfig->smudge_margin;
 800594a:	bf08      	it	eq
 800594c:	8893      	ldrheq	r3, [r2, #4]
{
 800594e:	4616      	mov	r6, r2
			(uint32_t)xtalk_offset_out +
 8005950:	bf08      	it	eq
 8005952:	18c9      	addeq	r1, r1, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 8005954:	60a1      	str	r1, [r4, #8]
{
 8005956:	4605      	mov	r5, r0
	if (((pconfig->user_scaler_set == 0) ||
 8005958:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
	orig_xtalk_offset =
 800595c:	f8d0 22cc 	ldr.w	r2, [r0, #716]	; 0x2cc
	orig_y_gradient =
 8005960:	f9b5 12d2 	ldrsh.w	r1, [r5, #722]	; 0x2d2
	orig_x_gradient =
 8005964:	f9b0 02d0 	ldrsh.w	r0, [r0, #720]	; 0x2d0
	if (((pconfig->user_scaler_set == 0) ||
 8005968:	b11b      	cbz	r3, 8005972 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x36>
 800596a:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 800596e:	2b01      	cmp	r3, #1
 8005970:	d123      	bne.n	80059ba <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x7e>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 8005972:	f241 2374 	movw	r3, #4724	; 0x1274
		(pconfig->scaler_calc_method == 1)) &&
 8005976:	58eb      	ldr	r3, [r5, r3]
 8005978:	b1fb      	cbz	r3, 80059ba <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x7e>
		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800597a:	f10d 0107 	add.w	r1, sp, #7
 800597e:	4628      	mov	r0, r5
 8005980:	f7ff ffc1 	bl	8005906 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8005984:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005988:	b913      	cbnz	r3, 8005990 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x54>
			histo_merge_nb = 1;
 800598a:	2301      	movs	r3, #1
 800598c:	f88d 3007 	strb.w	r3, [sp, #7]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 8005990:	f895 31b4 	ldrb.w	r3, [r5, #436]	; 0x1b4
 8005994:	2b01      	cmp	r3, #1
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 8005996:	bf08      	it	eq
 8005998:	f89d 2007 	ldrbeq.w	r2, [sp, #7]
 800599c:	f505 5393 	add.w	r3, r5, #4704	; 0x1260
 80059a0:	f103 0314 	add.w	r3, r3, #20
			orig_xtalk_offset =
 80059a4:	bf15      	itete	ne
 80059a6:	f241 2274 	movwne	r2, #4724	; 0x1274
			orig_xtalk_offset =
 80059aa:	3201      	addeq	r2, #1
			orig_xtalk_offset =
 80059ac:	58aa      	ldrne	r2, [r5, r2]
			orig_xtalk_offset =
 80059ae:	f853 2022 	ldreq.w	r2, [r3, r2, lsl #2]
		orig_x_gradient =
 80059b2:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
		orig_y_gradient =
 80059b6:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 80059ba:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
 80059be:	b9d3      	cbnz	r3, 80059f6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xba>
 80059c0:	b918      	cbnz	r0, 80059ca <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x8e>
		pout->gradient_zero_flag |= 0x01;
 80059c2:	7963      	ldrb	r3, [r4, #5]
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	7163      	strb	r3, [r4, #5]
	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 80059ca:	b919      	cbnz	r1, 80059d4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x98>
		pout->gradient_zero_flag |= 0x02;
 80059cc:	7963      	ldrb	r3, [r4, #5]
 80059ce:	f043 0302 	orr.w	r3, r3, #2
 80059d2:	7163      	strb	r3, [r4, #5]
		orig_xtalk_offset = 1;
 80059d4:	2a00      	cmp	r2, #0
 80059d6:	bf08      	it	eq
 80059d8:	2201      	moveq	r2, #1
		x_gradient_scaler = (int16_t)do_division_s(
 80059da:	0183      	lsls	r3, r0, #6
		y_gradient_scaler = (int16_t)do_division_s(
 80059dc:	ea4f 1c81 	mov.w	ip, r1, lsl #6
		x_gradient_scaler = (int16_t)do_division_s(
 80059e0:	fbb3 f3f2 	udiv	r3, r3, r2
		y_gradient_scaler = (int16_t)do_division_s(
 80059e4:	fbbc fcf2 	udiv	ip, ip, r2
		x_gradient_scaler = (int16_t)do_division_s(
 80059e8:	b21b      	sxth	r3, r3
		y_gradient_scaler = (int16_t)do_division_s(
 80059ea:	fa0f fc8c 	sxth.w	ip, ip
		pconfig->x_gradient_scaler = x_gradient_scaler;
 80059ee:	8573      	strh	r3, [r6, #42]	; 0x2a
		pconfig->y_gradient_scaler = y_gradient_scaler;
 80059f0:	f8a6 c02c 	strh.w	ip, [r6, #44]	; 0x2c
 80059f4:	e008      	b.n	8005a08 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xcc>
		orig_xtalk_offset = 1;
 80059f6:	2a00      	cmp	r2, #0
 80059f8:	bf08      	it	eq
 80059fa:	2201      	moveq	r2, #1
	if (pconfig->user_scaler_set == 1) {
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d1ec      	bne.n	80059da <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x9e>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 8005a00:	f9b6 302a 	ldrsh.w	r3, [r6, #42]	; 0x2a
		y_gradient_scaler = pconfig->y_gradient_scaler;
 8005a04:	f9b6 c02c 	ldrsh.w	ip, [r6, #44]	; 0x2c
	if (pconfig->scaler_calc_method == 0) {
 8005a08:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
 8005a0c:	f1be 0f00 	cmp.w	lr, #0
 8005a10:	d148      	bne.n	8005aa4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x168>
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 8005a12:	68a2      	ldr	r2, [r4, #8]
 8005a14:	4353      	muls	r3, r2
			(int16_t)itemp32;
 8005a16:	f64f 71ff 	movw	r1, #65535	; 0xffff
		itemp32 = itemp32 >> 6;
 8005a1a:	119b      	asrs	r3, r3, #6
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 8005a1c:	fb02 f20c 	mul.w	r2, r2, ip
			(int16_t)itemp32;
 8005a20:	428b      	cmp	r3, r1
		itemp32 = itemp32 >> 6;
 8005a22:	ea4f 12a2 	mov.w	r2, r2, asr #6
			(int16_t)itemp32;
 8005a26:	bfa8      	it	ge
 8005a28:	460b      	movge	r3, r1
			(int16_t)itemp32;
 8005a2a:	428a      	cmp	r2, r1
			(int16_t)itemp32;
 8005a2c:	81a3      	strh	r3, [r4, #12]
			(int16_t)itemp32;
 8005a2e:	bfa8      	it	ge
 8005a30:	460a      	movge	r2, r1
			(int16_t)itemp32;
 8005a32:	81e2      	strh	r2, [r4, #14]
	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 8005a34:	7873      	ldrb	r3, [r6, #1]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d15e      	bne.n	8005af8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1bc>
 8005a3a:	2f01      	cmp	r7, #1
 8005a3c:	d05e      	beq.n	8005afc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1c0>
		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8005a3e:	f10d 0107 	add.w	r1, sp, #7
		pout->new_xtalk_applied_flag = 1;
 8005a42:	71a3      	strb	r3, [r4, #6]
		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8005a44:	4628      	mov	r0, r5
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 8005a46:	68a7      	ldr	r7, [r4, #8]
		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8005a48:	f7ff ff5d 	bl	8005906 <VL53LX_compute_histo_merge_nb>
		if ((histo_merge_nb > 0) &&
 8005a4c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005a50:	b1a1      	cbz	r1, 8005a7c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x140>
 8005a52:	f895 31b4 	ldrb.w	r3, [r5, #436]	; 0x1b4
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d110      	bne.n	8005a7c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x140>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 8005a5a:	b17f      	cbz	r7, 8005a7c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x140>
			cXtalk =
 8005a5c:	f505 5393 	add.w	r3, r5, #4704	; 0x1260
 8005a60:	3101      	adds	r1, #1
 8005a62:	3314      	adds	r3, #20
			if (SmudgeFactor >= pconfig->max_smudge_factor)
 8005a64:	6c30      	ldr	r0, [r6, #64]	; 0x40
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 8005a66:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8005a6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005a6e:	434a      	muls	r2, r1
 8005a70:	fbb2 f2f7 	udiv	r2, r2, r7
			if (SmudgeFactor >= pconfig->max_smudge_factor)
 8005a74:	4290      	cmp	r0, r2
 8005a76:	d82e      	bhi.n	8005ad6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x19a>
				pout->new_xtalk_applied_flag = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	71a3      	strb	r3, [r4, #6]
		if (pout->new_xtalk_applied_flag) {
 8005a7c:	79a3      	ldrb	r3, [r4, #6]
 8005a7e:	b173      	cbz	r3, 8005a9e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x162>
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 8005a80:	68a3      	ldr	r3, [r4, #8]
 8005a82:	f8c5 32c4 	str.w	r3, [r5, #708]	; 0x2c4
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8005a86:	89a3      	ldrh	r3, [r4, #12]
 8005a88:	f8a5 32c8 	strh.w	r3, [r5, #712]	; 0x2c8
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8005a8c:	89e3      	ldrh	r3, [r4, #14]
 8005a8e:	f8a5 32ca 	strh.w	r3, [r5, #714]	; 0x2ca
		if (pconfig->smudge_corr_single_apply == 1) {
 8005a92:	78b3      	ldrb	r3, [r6, #2]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d102      	bne.n	8005a9e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x162>
			pconfig->smudge_corr_apply_enabled = 0;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	7073      	strb	r3, [r6, #1]
			pconfig->smudge_corr_single_apply = 0;
 8005a9c:	70b3      	strb	r3, [r6, #2]
		pout->smudge_corr_valid = 1;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	7023      	strb	r3, [r4, #0]
	return status;
 8005aa2:	e02b      	b.n	8005afc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1c0>
	} else if (pconfig->scaler_calc_method == 1) {
 8005aa4:	f1be 0f01 	cmp.w	lr, #1
 8005aa8:	d1c4      	bne.n	8005a34 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xf8>
		itemp32 = (int32_t)(orig_xtalk_offset -
 8005aaa:	68a3      	ldr	r3, [r4, #8]
 8005aac:	1ad2      	subs	r2, r2, r3
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 8005aae:	2310      	movs	r3, #16
 8005ab0:	fb92 f3f3 	sdiv	r3, r2, r3
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 8005ab4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
			(int16_t)itemp32;
 8005ab8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005abc:	4283      	cmp	r3, r0
 8005abe:	bfa8      	it	ge
 8005ac0:	4603      	movge	r3, r0
 8005ac2:	81a3      	strh	r3, [r4, #12]
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 8005ac4:	2350      	movs	r3, #80	; 0x50
 8005ac6:	fb92 f2f3 	sdiv	r2, r2, r3
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 8005aca:	eb01 0282 	add.w	r2, r1, r2, lsl #2
			(int16_t)itemp32;
 8005ace:	4282      	cmp	r2, r0
 8005ad0:	bfa8      	it	ge
 8005ad2:	4602      	movge	r2, r0
 8005ad4:	e7ad      	b.n	8005a32 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xf6>
			else if (SmudgeFactor > 0)
 8005ad6:	2a00      	cmp	r2, #0
 8005ad8:	d0d0      	beq.n	8005a7c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x140>
 8005ada:	f895 71bc 	ldrb.w	r7, [r5, #444]	; 0x1bc
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 8005ade:	3308      	adds	r3, #8
 8005ae0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
				*pcpo *= 1000;
 8005ae4:	4608      	mov	r0, r1
				for (i = 0; i < max; i++) {
 8005ae6:	429f      	cmp	r7, r3
 8005ae8:	d0c8      	beq.n	8005a7c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x140>
				*pcpo *= 1000;
 8005aea:	6819      	ldr	r1, [r3, #0]
 8005aec:	4341      	muls	r1, r0
				*pcpo /= SmudgeFactor;
 8005aee:	fbb1 f1f2 	udiv	r1, r1, r2
 8005af2:	f843 1b04 	str.w	r1, [r3], #4
 8005af6:	e7f6      	b.n	8005ae6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1aa>
	if (soft_update != 1)
 8005af8:	2f01      	cmp	r7, #1
 8005afa:	d1d0      	bne.n	8005a9e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x162>
}
 8005afc:	2000      	movs	r0, #0
 8005afe:	b003      	add	sp, #12
 8005b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005b04 <VL53LX_dynamic_xtalk_correction_corrector>:
{
 8005b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b08:	b087      	sub	sp, #28
	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8005b0a:	f10d 0117 	add.w	r1, sp, #23
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 8005b0e:	f500 5703 	add.w	r7, r0, #8384	; 0x20c0
	VL53LX_smudge_corrector_config_t *pconfig =
 8005b12:	f500 559e 	add.w	r5, r0, #5056	; 0x13c0
{
 8005b16:	4604      	mov	r4, r0
	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8005b18:	f7ff fef5 	bl	8005906 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 8005b1c:	f89d 3017 	ldrb.w	r3, [sp, #23]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 8005b20:	3720      	adds	r7, #32
	VL53LX_smudge_corrector_config_t *pconfig =
 8005b22:	350c      	adds	r5, #12
	VL53LX_smudge_corrector_data_t *pout =
 8005b24:	f507 78c8 	add.w	r8, r7, #400	; 0x190
	if ((histo_merge_nb == 0) ||
 8005b28:	b11b      	cbz	r3, 8005b32 <VL53LX_dynamic_xtalk_correction_corrector+0x2e>
 8005b2a:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d002      	beq.n	8005b38 <VL53LX_dynamic_xtalk_correction_corrector+0x34>
		histo_merge_nb = 1;
 8005b32:	2301      	movs	r3, #1
 8005b34:	f88d 3017 	strb.w	r3, [sp, #23]
	VL53LX_dynamic_xtalk_correction_output_init(pres);
 8005b38:	4638      	mov	r0, r7
 8005b3a:	f7ff fdfb 	bl	8005734 <VL53LX_dynamic_xtalk_correction_output_init>
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 8005b3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b40:	b32b      	cbz	r3, 8005b8e <VL53LX_dynamic_xtalk_correction_corrector+0x8a>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 8005b42:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8005b46:	4353      	muls	r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 8005b48:	f8b7 2178 	ldrh.w	r2, [r7, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	bf94      	ite	ls
 8005b50:	2300      	movls	r3, #0
 8005b52:	2301      	movhi	r3, #1
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 8005b54:	f894 21b4 	ldrb.w	r2, [r4, #436]	; 0x1b4
 8005b58:	2a01      	cmp	r2, #1
 8005b5a:	d11a      	bne.n	8005b92 <VL53LX_dynamic_xtalk_correction_corrector+0x8e>
 8005b5c:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
 8005b60:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8005b64:	1a51      	subs	r1, r2, r1
 8005b66:	424a      	negs	r2, r1
 8005b68:	414a      	adcs	r2, r1
		(pconfig->smudge_corr_enabled == 1) &&
 8005b6a:	f241 31cc 	movw	r1, #5068	; 0x13cc
 8005b6e:	5c66      	ldrb	r6, [r4, r1]
 8005b70:	f897 118e 	ldrb.w	r1, [r7, #398]	; 0x18e
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 8005b74:	2e01      	cmp	r6, #1
 8005b76:	d106      	bne.n	8005b86 <VL53LX_dynamic_xtalk_correction_corrector+0x82>
		(pconfig->smudge_corr_enabled == 1) &&
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d050      	beq.n	8005c1e <VL53LX_dynamic_xtalk_correction_corrector+0x11a>
		ambient_check &&
 8005b7c:	2909      	cmp	r1, #9
 8005b7e:	d150      	bne.n	8005c22 <VL53LX_dynamic_xtalk_correction_corrector+0x11e>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 8005b80:	2a00      	cmp	r2, #0
 8005b82:	f040 8086 	bne.w	8005c92 <VL53LX_dynamic_xtalk_correction_corrector+0x18e>
}
 8005b86:	2000      	movs	r0, #0
 8005b88:	b007      	add	sp, #28
 8005b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e7e0      	b.n	8005b54 <VL53LX_dynamic_xtalk_correction_corrector+0x50>
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 8005b92:	2201      	movs	r2, #1
 8005b94:	e7e9      	b.n	8005b6a <VL53LX_dynamic_xtalk_correction_corrector+0x66>
			if (pR->VL53LX_p_003[i].range_status ==
 8005b96:	f893 e004 	ldrb.w	lr, [r3, #4]
 8005b9a:	f1be 0f09 	cmp.w	lr, #9
 8005b9e:	d10e      	bne.n	8005bbe <VL53LX_dynamic_xtalk_correction_corrector+0xba>
				if (pR->VL53LX_p_003[i].median_range_mm
 8005ba0:	f9b3 9000 	ldrsh.w	r9, [r3]
					pconfig->nodetect_min_range_mm) {
 8005ba4:	f8b5 e03c 	ldrh.w	lr, [r5, #60]	; 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 8005ba8:	45f1      	cmp	r9, lr
 8005baa:	dd06      	ble.n	8005bba <VL53LX_dynamic_xtalk_correction_corrector+0xb6>
					if (run_nodetect == 2) {
 8005bac:	f1bc 0f02 	cmp.w	ip, #2
 8005bb0:	d105      	bne.n	8005bbe <VL53LX_dynamic_xtalk_correction_corrector+0xba>
 8005bb2:	4602      	mov	r2, r0
						run_nodetect = 1;
 8005bb4:	f04f 0c01 	mov.w	ip, #1
 8005bb8:	e001      	b.n	8005bbe <VL53LX_dynamic_xtalk_correction_corrector+0xba>
					run_nodetect = 0;
 8005bba:	f04f 0c00 	mov.w	ip, #0
 8005bbe:	3101      	adds	r1, #1
 8005bc0:	334c      	adds	r3, #76	; 0x4c
 8005bc2:	e036      	b.n	8005c32 <VL53LX_dynamic_xtalk_correction_corrector+0x12e>
			pint->accumulator = pint->accumulator +
 8005bc4:	e9d9 0102 	ldrd	r0, r1, [r9, #8]
 8005bc8:	eb10 0b03 	adds.w	fp, r0, r3
 8005bcc:	f141 0c00 	adc.w	ip, r1, #0
 8005bd0:	4658      	mov	r0, fp
 8005bd2:	4661      	mov	r1, ip
 8005bd4:	e9c9 0102 	strd	r0, r1, [r9, #8]
	uint8_t continue_processing = CONT_CONTINUE;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	e090      	b.n	8005cfe <VL53LX_dynamic_xtalk_correction_corrector+0x1fa>
			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 8005bdc:	e9cd 3300 	strd	r3, r3, [sp]
 8005be0:	462a      	mov	r2, r5
 8005be2:	4643      	mov	r3, r8
 8005be4:	4620      	mov	r0, r4
 8005be6:	f7ff fea9 	bl	800593c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
		if (continue_processing == CONT_RESET) {
 8005bea:	2e02      	cmp	r6, #2
 8005bec:	d1cb      	bne.n	8005b86 <VL53LX_dynamic_xtalk_correction_corrector+0x82>
 8005bee:	e0c6      	b.n	8005d7e <VL53LX_dynamic_xtalk_correction_corrector+0x27a>
			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 8005bf0:	4643      	mov	r3, r8
 8005bf2:	462a      	mov	r2, r5
 8005bf4:	e9cd 6600 	strd	r6, r6, [sp]
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f7ff fe9f 	bl	800593c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
			pout->smudge_corr_valid = 2;
 8005bfe:	f242 2370 	movw	r3, #8816	; 0x2270
 8005c02:	2202      	movs	r2, #2
 8005c04:	54e2      	strb	r2, [r4, r3]
			pint->accumulator = 0;
 8005c06:	2200      	movs	r2, #0
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e9c7 2302 	strd	r2, r3, [r7, #8]
			pint->current_samples = 0;
 8005c0e:	f844 6009 	str.w	r6, [r4, r9]
			pint->nodetect_counter = 0;
 8005c12:	613e      	str	r6, [r7, #16]
 8005c14:	e7b7      	b.n	8005b86 <VL53LX_dynamic_xtalk_correction_corrector+0x82>
 8005c16:	4288      	cmp	r0, r1
 8005c18:	bf38      	it	cc
 8005c1a:	4608      	movcc	r0, r1
 8005c1c:	e09f      	b.n	8005d5e <VL53LX_dynamic_xtalk_correction_corrector+0x25a>
	if ((pR->xmonitor.range_status
 8005c1e:	2909      	cmp	r1, #9
 8005c20:	d0b1      	beq.n	8005b86 <VL53LX_dynamic_xtalk_correction_corrector+0x82>
 8005c22:	f504 5304 	add.w	r3, r4, #8448	; 0x2100
		for (i = 0; i < pR->active_results; i++) {
 8005c26:	2100      	movs	r1, #0
 8005c28:	7cbe      	ldrb	r6, [r7, #18]
 8005c2a:	333a      	adds	r3, #58	; 0x3a
	uint8_t nodetect_index = 0;
 8005c2c:	460a      	mov	r2, r1
		run_nodetect = 2;
 8005c2e:	f04f 0c02 	mov.w	ip, #2
 8005c32:	b2c8      	uxtb	r0, r1
		for (i = 0; i < pR->active_results; i++) {
 8005c34:	4286      	cmp	r6, r0
 8005c36:	d8ae      	bhi.n	8005b96 <VL53LX_dynamic_xtalk_correction_corrector+0x92>
		if (run_nodetect == 1) {
 8005c38:	f1bc 0f01 	cmp.w	ip, #1
 8005c3c:	d1a3      	bne.n	8005b86 <VL53LX_dynamic_xtalk_correction_corrector+0x82>
		amr =
 8005c3e:	234c      	movs	r3, #76	; 0x4c
 8005c40:	fb03 7702 	mla	r7, r3, r2, r7
			utemp64 = 1000 * ((uint64_t)amr);
 8005c44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c48:	f8b7 0048 	ldrh.w	r0, [r7, #72]	; 0x48
			if (utemp64 < pconfig->nodetect_ambient_threshold)
 8005c4c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
			utemp64 = 1000 * ((uint64_t)amr);
 8005c4e:	fba0 0103 	umull	r0, r1, r0, r3
			utemp64 = utemp64 << 9;
 8005c52:	024b      	lsls	r3, r1, #9
			if (utemp64 < pconfig->nodetect_ambient_threshold)
 8005c54:	2700      	movs	r7, #0
			utemp64 = utemp64 << 9;
 8005c56:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8005c5a:	0242      	lsls	r2, r0, #9
	if (run_nodetect == 1) {
 8005c5c:	42bb      	cmp	r3, r7
 8005c5e:	bf08      	it	eq
 8005c60:	42b2      	cmpeq	r2, r6
 8005c62:	d290      	bcs.n	8005b86 <VL53LX_dynamic_xtalk_correction_corrector+0x82>
		pint->nodetect_counter += 1;
 8005c64:	f241 4910 	movw	r9, #5136	; 0x1410
 8005c68:	eb04 0709 	add.w	r7, r4, r9
		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 8005c6c:	e9d5 210d 	ldrd	r2, r1, [r5, #52]	; 0x34
		pint->nodetect_counter += 1;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	3301      	adds	r3, #1
		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 8005c74:	4293      	cmp	r3, r2
		pint->nodetect_counter += 1;
 8005c76:	613b      	str	r3, [r7, #16]
 8005c78:	f04f 0600 	mov.w	r6, #0
		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 8005c7c:	d2b8      	bcs.n	8005bf0 <VL53LX_dynamic_xtalk_correction_corrector+0xec>
			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 8005c7e:	e9cd 6c00 	strd	r6, ip, [sp]
 8005c82:	4643      	mov	r3, r8
 8005c84:	462a      	mov	r2, r5
 8005c86:	4620      	mov	r0, r4
 8005c88:	f7ff fe58 	bl	800593c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
 8005c8c:	e77b      	b.n	8005b86 <VL53LX_dynamic_xtalk_correction_corrector+0x82>
		pout->smudge_corr_clipped = 0;
 8005c8e:	707e      	strb	r6, [r7, #1]
 8005c90:	e05c      	b.n	8005d4c <VL53LX_dynamic_xtalk_correction_corrector+0x248>
		pint->nodetect_counter = 0;
 8005c92:	f504 59a0 	add.w	r9, r4, #5120	; 0x1400
 8005c96:	f109 0910 	add.w	r9, r9, #16
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f8c9 3010 	str.w	r3, [r9, #16]
		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f7ff fd02 	bl	80056aa <VL53LX_dynamic_xtalk_correction_calc_required_samples>
		current_xtalk = ((uint32_t)cco) << 2;
 8005ca6:	f8d4 22c4 	ldr.w	r2, [r4, #708]	; 0x2c4
				((uint32_t)(pconfig->smudge_margin)) << 2;
 8005caa:	f8b5 a004 	ldrh.w	sl, [r5, #4]
		xtalk_offset_in =
 8005cae:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 8005cb2:	69a9      	ldr	r1, [r5, #24]
		current_xtalk = ((uint32_t)cco) << 2;
 8005cb4:	0092      	lsls	r2, r2, #2
		smudge_margin_adjusted =
 8005cb6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
		current_xtalk = ((uint32_t)cco) << 2;
 8005cba:	9202      	str	r2, [sp, #8]
 8005cbc:	ebaa 0202 	sub.w	r2, sl, r2
 8005cc0:	9203      	str	r2, [sp, #12]
		itemp32 = xtalk_offset_in - current_xtalk +
 8005cc2:	189a      	adds	r2, r3, r2
		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 8005cc4:	2a00      	cmp	r2, #0
 8005cc6:	bfb8      	it	lt
 8005cc8:	4252      	neglt	r2, r2
 8005cca:	f504 5709 	add.w	r7, r4, #8768	; 0x2240
 8005cce:	4291      	cmp	r1, r2
 8005cd0:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8005cd4:	da07      	bge.n	8005ce6 <VL53LX_dynamic_xtalk_correction_corrector+0x1e2>
				((int32_t)current_xtalk -
 8005cd6:	9a02      	ldr	r2, [sp, #8]
 8005cd8:	eba2 020a 	sub.w	r2, r2, sl
			if ((int32_t)xtalk_offset_in >
 8005cdc:	429a      	cmp	r2, r3
				pout->single_xtalk_delta_flag = 2;
 8005cde:	bfaa      	itet	ge
 8005ce0:	2202      	movge	r2, #2
				pout->single_xtalk_delta_flag = 1;
 8005ce2:	70be      	strblt	r6, [r7, #2]
				pout->single_xtalk_delta_flag = 2;
 8005ce4:	70ba      	strbge	r2, [r7, #2]
		pint->current_samples = pint->current_samples + 1;
 8005ce6:	f241 4110 	movw	r1, #5136	; 0x1410
 8005cea:	5862      	ldr	r2, [r4, r1]
 8005cec:	3201      	adds	r2, #1
 8005cee:	5062      	str	r2, [r4, r1]
		if (pint->current_samples > pconfig->sample_limit) {
 8005cf0:	6969      	ldr	r1, [r5, #20]
 8005cf2:	428a      	cmp	r2, r1
 8005cf4:	f67f af66 	bls.w	8005bc4 <VL53LX_dynamic_xtalk_correction_corrector+0xc0>
			pout->sample_limit_exceeded_flag = 1;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	713b      	strb	r3, [r7, #4]
			continue_processing = CONT_RESET;
 8005cfc:	2302      	movs	r3, #2
		if (pint->current_samples < pint->required_samples)
 8005cfe:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005d02:	428a      	cmp	r2, r1
 8005d04:	bf28      	it	cs
 8005d06:	461e      	movcs	r6, r3
		(uint32_t)(do_division_u(pint->accumulator,
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e9d9 0102 	ldrd	r0, r1, [r9, #8]
 8005d0e:	f7fa ffa3 	bl	8000c58 <__aeabi_uldivmod>
		if (continue_processing == CONT_CONTINUE &&
 8005d12:	b97e      	cbnz	r6, 8005d34 <VL53LX_dynamic_xtalk_correction_corrector+0x230>
		itemp32 = xtalk_offset_out - current_xtalk +
 8005d14:	9b03      	ldr	r3, [sp, #12]
		if (continue_processing == CONT_CONTINUE &&
 8005d16:	69ea      	ldr	r2, [r5, #28]
		itemp32 = xtalk_offset_out - current_xtalk +
 8005d18:	4403      	add	r3, r0
		if (continue_processing == CONT_CONTINUE &&
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	bfb8      	it	lt
 8005d1e:	425b      	neglt	r3, r3
 8005d20:	429a      	cmp	r2, r3
 8005d22:	dcb4      	bgt.n	8005c8e <VL53LX_dynamic_xtalk_correction_corrector+0x18a>
				((int32_t)current_xtalk -
 8005d24:	9b02      	ldr	r3, [sp, #8]
 8005d26:	eba3 0a0a 	sub.w	sl, r3, sl
			if ((int32_t)xtalk_offset_out >
 8005d2a:	4582      	cmp	sl, r0
				pout->averaged_xtalk_delta_flag = 1;
 8005d2c:	bfb4      	ite	lt
 8005d2e:	2301      	movlt	r3, #1
				pout->averaged_xtalk_delta_flag = 2;
 8005d30:	2302      	movge	r3, #2
 8005d32:	70fb      	strb	r3, [r7, #3]
		pout->smudge_corr_clipped = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	707b      	strb	r3, [r7, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 8005d38:	b94e      	cbnz	r6, 8005d4e <VL53LX_dynamic_xtalk_correction_corrector+0x24a>
			(pconfig->smudge_corr_clip_limit != 0)) {
 8005d3a:	6a2b      	ldr	r3, [r5, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 8005d3c:	b13b      	cbz	r3, 8005d4e <VL53LX_dynamic_xtalk_correction_corrector+0x24a>
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 8005d3e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8005d42:	4353      	muls	r3, r2
			if (xtalk_offset_out >
 8005d44:	4283      	cmp	r3, r0
 8005d46:	d202      	bcs.n	8005d4e <VL53LX_dynamic_xtalk_correction_corrector+0x24a>
				pout->smudge_corr_clipped = 1;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	707b      	strb	r3, [r7, #1]
				continue_processing = CONT_RESET;
 8005d4c:	2602      	movs	r6, #2
		if (pconfig->user_xtalk_offset_limit_hi &&
 8005d4e:	7c2b      	ldrb	r3, [r5, #16]
 8005d50:	68e9      	ldr	r1, [r5, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f43f af5f 	beq.w	8005c16 <VL53LX_dynamic_xtalk_correction_corrector+0x112>
 8005d58:	4288      	cmp	r0, r1
 8005d5a:	bf28      	it	cs
 8005d5c:	4608      	movcs	r0, r1
		xtalk_offset_out = xtalk_offset_out >> 2;
 8005d5e:	0881      	lsrs	r1, r0, #2
 8005d60:	480c      	ldr	r0, [pc, #48]	; (8005d94 <VL53LX_dynamic_xtalk_correction_corrector+0x290>)
 8005d62:	4281      	cmp	r1, r0
 8005d64:	bf28      	it	cs
 8005d66:	4601      	movcs	r1, r0
 8005d68:	2301      	movs	r3, #1
		if (continue_processing == CONT_CONTINUE) {
 8005d6a:	2e00      	cmp	r6, #0
 8005d6c:	f47f af36 	bne.w	8005bdc <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 8005d70:	e9cd 3600 	strd	r3, r6, [sp]
 8005d74:	462a      	mov	r2, r5
 8005d76:	4643      	mov	r3, r8
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f7ff fddf 	bl	800593c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
			pint->accumulator = 0;
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2300      	movs	r3, #0
 8005d82:	e9c9 2302 	strd	r2, r3, [r9, #8]
			pint->current_samples = 0;
 8005d86:	f241 4210 	movw	r2, #5136	; 0x1410
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	50a3      	str	r3, [r4, r2]
			pint->nodetect_counter = 0;
 8005d8e:	f8c9 3010 	str.w	r3, [r9, #16]
 8005d92:	e6f8      	b.n	8005b86 <VL53LX_dynamic_xtalk_correction_corrector+0x82>
 8005d94:	0003ffff 	.word	0x0003ffff

08005d98 <VL53LX_calc_pll_period_us>:

	uint32_t  pll_period_us        = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 8005d98:	b118      	cbz	r0, 8005da2 <VL53LX_calc_pll_period_us+0xa>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8005d9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d9e:	fb93 f0f0 	sdiv	r0, r3, r0


	LOG_FUNCTION_END(0);

	return pll_period_us;
}
 8005da2:	4770      	bx	lr

08005da4 <VL53LX_duration_maths>:

	uint64_t  tmp_long_int = 0;
	uint32_t  duration_us  = 0;


	duration_us = window_vclks * pll_period_us;
 8005da4:	4342      	muls	r2, r0


	tmp_long_int = (uint64_t)duration_us;


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 8005da6:	434b      	muls	r3, r1
{
 8005da8:	b510      	push	{r4, lr}
	duration_us = duration_us >> 12;
 8005daa:	0b12      	lsrs	r2, r2, #12


	duration_us = duration_us >> 4;
 8005dac:	091b      	lsrs	r3, r3, #4


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 8005dae:	fba3 3402 	umull	r3, r4, r3, r2


	tmp_long_int = tmp_long_int >> 12;
 8005db2:	0b1a      	lsrs	r2, r3, #12


	if (tmp_long_int > 0xFFFFFFFF)
		tmp_long_int = 0xFFFFFFFF;

	duration_us  = (uint32_t)tmp_long_int;
 8005db4:	0b21      	lsrs	r1, r4, #12
 8005db6:	2300      	movs	r3, #0
 8005db8:	ea42 5004 	orr.w	r0, r2, r4, lsl #20
 8005dbc:	428b      	cmp	r3, r1
 8005dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc2:	bf08      	it	eq
 8005dc4:	4282      	cmpeq	r2, r0
 8005dc6:	bf38      	it	cc
 8005dc8:	4610      	movcc	r0, r2

	return duration_us;
}
 8005dca:	bd10      	pop	{r4, pc}

08005dcc <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 8005dcc:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
 8005dd0:	4614      	mov	r4, r2


	uint64_t dividend = ((uint64_t)VL53LX_p_010
			* 1000 * 256);

	if (num_spads != 0)
 8005dd2:	b1f1      	cbz	r1, 8005e12 <VL53LX_events_per_spad_maths+0x46>
		total_hist_counts = do_division_u(
 8005dd4:	460a      	mov	r2, r1
 8005dd6:	f44f 317a 	mov.w	r1, #256000	; 0x3e800
 8005dda:	2300      	movs	r3, #0
 8005ddc:	fb80 0101 	smull	r0, r1, r0, r1
 8005de0:	f7fa ff3a 	bl	8000c58 <__aeabi_uldivmod>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	ea4f 2cc3 	mov.w	ip, r3, lsl #11
 8005dec:	ea4c 5c52 	orr.w	ip, ip, r2, lsr #21
 8005df0:	ea4f 2bc2 	mov.w	fp, r2, lsl #11
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 8005df4:	b154      	cbz	r4, 8005e0c <VL53LX_events_per_spad_maths+0x40>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
			+ ((uint64_t)duration / 2));
 8005df6:	0865      	lsrs	r5, r4, #1

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 8005df8:	eb1b 0005 	adds.w	r0, fp, r5
 8005dfc:	4622      	mov	r2, r4
 8005dfe:	f04f 0300 	mov.w	r3, #0
 8005e02:	f14c 0100 	adc.w	r1, ip, #0
 8005e06:	f7fa ff27 	bl	8000c58 <__aeabi_uldivmod>
 8005e0a:	4683      	mov	fp, r0
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;

	return rate_per_spad_kcps;
}
 8005e0c:	4658      	mov	r0, fp
 8005e0e:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
	uint64_t total_hist_counts  = 0;
 8005e12:	460a      	mov	r2, r1
 8005e14:	460b      	mov	r3, r1
 8005e16:	e7e7      	b.n	8005de8 <VL53LX_events_per_spad_maths+0x1c>

08005e18 <VL53LX_isqrt>:
{



	uint32_t  res = 0;
	uint32_t  bit = 1 << 30;
 8005e18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000


	while (bit > num)
 8005e1c:	4283      	cmp	r3, r0
 8005e1e:	d803      	bhi.n	8005e28 <VL53LX_isqrt+0x10>
	uint32_t  res = 0;
 8005e20:	2200      	movs	r2, #0
		bit >>= 2;

	while (bit != 0) {
 8005e22:	b91b      	cbnz	r3, 8005e2c <VL53LX_isqrt+0x14>
		}
		bit >>= 2;
	}

	return res;
}
 8005e24:	4610      	mov	r0, r2
 8005e26:	4770      	bx	lr
		bit >>= 2;
 8005e28:	089b      	lsrs	r3, r3, #2
 8005e2a:	e7f7      	b.n	8005e1c <VL53LX_isqrt+0x4>
		if (num >= res + bit)  {
 8005e2c:	18d1      	adds	r1, r2, r3
 8005e2e:	4281      	cmp	r1, r0
 8005e30:	ea4f 0252 	mov.w	r2, r2, lsr #1
			res = (res >> 1) + bit;
 8005e34:	bf9c      	itt	ls
 8005e36:	18d2      	addls	r2, r2, r3
			num -= res + bit;
 8005e38:	1a40      	subls	r0, r0, r1
		bit >>= 2;
 8005e3a:	089b      	lsrs	r3, r3, #2
 8005e3c:	e7f1      	b.n	8005e22 <VL53LX_isqrt+0xa>

08005e3e <VL53LX_hist_calc_zero_distance_phase>:
{


	uint8_t VL53LX_p_030 = 0;

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 8005e3e:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 8005e42:	f8b0 207e 	ldrh.w	r2, [r0, #126]	; 0x7e
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 8005e46:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 8005e4a:	3301      	adds	r3, #1
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 8005e4c:	031b      	lsls	r3, r3, #12
	if (period != 0)
 8005e4e:	f413 23fe 	ands.w	r3, r3, #520192	; 0x7f000
{
 8005e52:	b510      	push	{r4, lr}
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 8005e54:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
	if (period != 0)
 8005e58:	d008      	beq.n	8005e6c <VL53LX_hist_calc_zero_distance_phase+0x2e>
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 8005e5a:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
 8005e5e:	eba2 22c1 	sub.w	r2, r2, r1, lsl #11
 8005e62:	441a      	add	r2, r3
		VL53LX_p_014  = VL53LX_p_014 % period;
 8005e64:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e68:	fb03 2311 	mls	r3, r3, r1, r2
	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 8005e6c:	f8a0 309c 	strh.w	r3, [r0, #156]	; 0x9c
}
 8005e70:	bd10      	pop	{r4, pc}

08005e72 <VL53LX_hist_remove_ambient_bins>:
	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 8005e72:	7b03      	ldrb	r3, [r0, #12]
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	2b07      	cmp	r3, #7
{
 8005e7a:	b530      	push	{r4, r5, lr}
	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 8005e7c:	d002      	beq.n	8005e84 <VL53LX_hist_remove_ambient_bins+0x12>
	if (pdata->number_of_ambient_bins > 0) {
 8005e7e:	7ac2      	ldrb	r2, [r0, #11]
 8005e80:	bb02      	cbnz	r2, 8005ec4 <VL53LX_hist_remove_ambient_bins+0x52>
}
 8005e82:	bd30      	pop	{r4, r5, pc}
 8005e84:	f100 020c 	add.w	r2, r0, #12
 8005e88:	f100 0512 	add.w	r5, r0, #18
		i = 0;
 8005e8c:	2300      	movs	r3, #0
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 8005e8e:	f812 4b01 	ldrb.w	r4, [r2], #1
 8005e92:	f004 0107 	and.w	r1, r4, #7
 8005e96:	2907      	cmp	r1, #7
 8005e98:	d005      	beq.n	8005ea6 <VL53LX_hist_remove_ambient_bins+0x34>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 8005e9a:	18c1      	adds	r1, r0, r3
				i++;
 8005e9c:	3301      	adds	r3, #1
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 8005e9e:	730c      	strb	r4, [r1, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 8005ea0:	7954      	ldrb	r4, [r2, #5]
 8005ea2:	748c      	strb	r4, [r1, #18]
				i++;
 8005ea4:	b2db      	uxtb	r3, r3
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8005ea6:	42aa      	cmp	r2, r5
 8005ea8:	d1f1      	bne.n	8005e8e <VL53LX_hist_remove_ambient_bins+0x1c>
 8005eaa:	f103 020b 	add.w	r2, r3, #11
 8005eae:	4402      	add	r2, r0
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 8005eb0:	2110      	movs	r1, #16
			pdata->bin_rep[lc] = 0;
 8005eb2:	2400      	movs	r4, #0
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8005eb4:	2b05      	cmp	r3, #5
 8005eb6:	d8e2      	bhi.n	8005e7e <VL53LX_hist_remove_ambient_bins+0xc>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 8005eb8:	f802 1f01 	strb.w	r1, [r2, #1]!
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8005ebc:	3301      	adds	r3, #1
			pdata->bin_rep[lc] = 0;
 8005ebe:	7194      	strb	r4, [r2, #6]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	e7f7      	b.n	8005eb4 <VL53LX_hist_remove_ambient_bins+0x42>
				bin < pdata->VL53LX_p_020; bin++) {
 8005ec4:	7a44      	ldrb	r4, [r0, #9]
 8005ec6:	f100 0118 	add.w	r1, r0, #24
 8005eca:	4613      	mov	r3, r2
		for (bin = pdata->number_of_ambient_bins;
 8005ecc:	429c      	cmp	r4, r3
 8005ece:	d805      	bhi.n	8005edc <VL53LX_hist_remove_ambient_bins+0x6a>
				pdata->VL53LX_p_021 -
 8005ed0:	7a83      	ldrb	r3, [r0, #10]
 8005ed2:	1a9a      	subs	r2, r3, r2
		pdata->number_of_ambient_bins = 0;
 8005ed4:	2300      	movs	r3, #0
		pdata->VL53LX_p_021 =
 8005ed6:	7282      	strb	r2, [r0, #10]
		pdata->number_of_ambient_bins = 0;
 8005ed8:	72c3      	strb	r3, [r0, #11]
}
 8005eda:	e7d2      	b.n	8005e82 <VL53LX_hist_remove_ambient_bins+0x10>
				pdata->bin_data[bin];
 8005edc:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 8005ee0:	f841 5b04 	str.w	r5, [r1], #4
				bin < pdata->VL53LX_p_020; bin++) {
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	e7f0      	b.n	8005ecc <VL53LX_hist_remove_ambient_bins+0x5a>

08005eea <VL53LX_calc_pll_period_mm>:
	if (fast_osc_frequency > 0)
 8005eea:	b118      	cbz	r0, 8005ef4 <VL53LX_calc_pll_period_mm+0xa>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8005eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ef0:	fb93 f0f0 	sdiv	r0, r3, r0
	pll_period_mm =
 8005ef4:	f249 2357 	movw	r3, #37463	; 0x9257
			(pll_period_us >> 2);
 8005ef8:	0880      	lsrs	r0, r0, #2
	pll_period_mm =
 8005efa:	4358      	muls	r0, r3
	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 8005efc:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
}
 8005f00:	0c00      	lsrs	r0, r0, #16
 8005f02:	4770      	bx	lr

08005f04 <VL53LX_rate_maths>:
	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 8005f04:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8005f08:	da16      	bge.n	8005f38 <VL53LX_rate_maths+0x34>
	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 8005f0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005f0e:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 8005f12:	dd14      	ble.n	8005f3e <VL53LX_rate_maths+0x3a>
	if (time_us > 0)
 8005f14:	b141      	cbz	r1, 8005f28 <VL53LX_rate_maths+0x24>
 8005f16:	2203      	movs	r2, #3
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 8005f18:	4093      	lsls	r3, r2
	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 8005f1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 8005f1e:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8005f22:	fbb3 f3f1 	udiv	r3, r3, r1
	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 8005f26:	dd00      	ble.n	8005f2a <VL53LX_rate_maths+0x26>
		tmp_int = tmp_int << 4;
 8005f28:	011b      	lsls	r3, r3, #4
	rate_mcps =  (uint16_t)tmp_int;
 8005f2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005f2e:	4283      	cmp	r3, r0
 8005f30:	bf28      	it	cs
 8005f32:	4603      	movcs	r3, r0
	return rate_mcps;
 8005f34:	b298      	uxth	r0, r3
}
 8005f36:	4770      	bx	lr
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 8005f38:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8005f3c:	e7ea      	b.n	8005f14 <VL53LX_rate_maths+0x10>
	if (time_us > 0)
 8005f3e:	2900      	cmp	r1, #0
 8005f40:	d0f3      	beq.n	8005f2a <VL53LX_rate_maths+0x26>
		frac_bits = 7;
 8005f42:	2207      	movs	r2, #7
 8005f44:	e7e8      	b.n	8005f18 <VL53LX_rate_maths+0x14>

08005f46 <VL53LX_rate_per_spad_maths>:
{
 8005f46:	b510      	push	{r4, lr}
	if (num_spads > 0) {
 8005f48:	b152      	cbz	r2, 8005f60 <VL53LX_rate_per_spad_maths+0x1a>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 8005f4a:	020c      	lsls	r4, r1, #8
 8005f4c:	4084      	lsls	r4, r0
		tmp_int = (tmp_int +
 8005f4e:	eb04 0452 	add.w	r4, r4, r2, lsr #1
 8005f52:	fbb4 f0f2 	udiv	r0, r4, r2
	rate_per_spad = (uint16_t)tmp_int;
 8005f56:	4298      	cmp	r0, r3
 8005f58:	bf28      	it	cs
 8005f5a:	4618      	movcs	r0, r3
}
 8005f5c:	b280      	uxth	r0, r0
 8005f5e:	bd10      	pop	{r4, pc}
		tmp_int = ((peak_count_rate) << frac_bits);
 8005f60:	fa01 f000 	lsl.w	r0, r1, r0
 8005f64:	e7f7      	b.n	8005f56 <VL53LX_rate_per_spad_maths+0x10>
	...

08005f68 <VL53LX_range_maths>:
{
 8005f68:	b5d0      	push	{r4, r6, r7, lr}
 8005f6a:	461c      	mov	r4, r3
	if (fast_osc_frequency > 0)
 8005f6c:	b118      	cbz	r0, 8005f76 <VL53LX_range_maths+0xe>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8005f6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f72:	fb93 f0f0 	sdiv	r0, r3, r0
	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 8005f76:	1a8e      	subs	r6, r1, r2
 8005f78:	eb61 0701 	sbc.w	r7, r1, r1
	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 8005f7c:	fba0 2306 	umull	r2, r3, r0, r6
 8005f80:	fb00 3307 	mla	r3, r0, r7, r3
	tmp_long_int =  tmp_long_int / (0x01 << 9);
 8005f84:	461f      	mov	r7, r3
 8005f86:	2a00      	cmp	r2, #0
 8005f88:	f177 0300 	sbcs.w	r3, r7, #0
 8005f8c:	4616      	mov	r6, r2
 8005f8e:	da04      	bge.n	8005f9a <VL53LX_range_maths+0x32>
 8005f90:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f94:	2100      	movs	r1, #0
 8005f96:	1816      	adds	r6, r2, r0
 8005f98:	414f      	adcs	r7, r1
 8005f9a:	0a72      	lsrs	r2, r6, #9
 8005f9c:	ea42 52c7 	orr.w	r2, r2, r7, lsl #23
	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 8005fa0:	f249 2157 	movw	r1, #37463	; 0x9257
 8005fa4:	fba2 2301 	umull	r2, r3, r2, r1
	tmp_long_int =  tmp_long_int / (0x01 << 9);
 8005fa8:	1278      	asrs	r0, r7, #9
	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 8005faa:	fb01 3300 	mla	r3, r1, r0, r3
	tmp_long_int =  tmp_long_int / (0x01 << 22);
 8005fae:	461f      	mov	r7, r3
 8005fb0:	2a00      	cmp	r2, #0
 8005fb2:	f177 0300 	sbcs.w	r3, r7, #0
 8005fb6:	4616      	mov	r6, r2
 8005fb8:	da03      	bge.n	8005fc2 <VL53LX_range_maths+0x5a>
 8005fba:	4815      	ldr	r0, [pc, #84]	; (8006010 <VL53LX_range_maths+0xa8>)
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	1816      	adds	r6, r2, r0
 8005fc0:	414f      	adcs	r7, r1
	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 8005fc2:	9b05      	ldr	r3, [sp, #20]
	tmp_long_int =  tmp_long_int / (0x01 << 22);
 8005fc4:	0db2      	lsrs	r2, r6, #22
 8005fc6:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 8005fca:	441a      	add	r2, r3
	range_mm *= gain_factor;
 8005fcc:	9b04      	ldr	r3, [sp, #16]
 8005fce:	4353      	muls	r3, r2
	range_mm += 0x0400;
 8005fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
	range_mm /= 0x0800;
 8005fd4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005fd8:	fb93 f0f0 	sdiv	r0, r3, r0
	if (fractional_bits == 0) {
 8005fdc:	b98c      	cbnz	r4, 8006002 <VL53LX_range_maths+0x9a>
		range_mm_10 = range_mm * 10;
 8005fde:	210a      	movs	r1, #10
 8005fe0:	fb01 f300 	mul.w	r3, r1, r0
		range_mm_10 = range_mm_10 / (0x01 << 2);
 8005fe4:	2204      	movs	r2, #4
 8005fe6:	2028      	movs	r0, #40	; 0x28
 8005fe8:	fb93 f0f0 	sdiv	r0, r3, r0
 8005fec:	fb93 f3f2 	sdiv	r3, r3, r2
		if ((range_mm_10 % 10) < 5)
 8005ff0:	fb93 f2f1 	sdiv	r2, r3, r1
 8005ff4:	fb01 3312 	mls	r3, r1, r2, r3
 8005ff8:	2b04      	cmp	r3, #4
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 8005ffa:	bfc8      	it	gt
 8005ffc:	3001      	addgt	r0, #1
 8005ffe:	b200      	sxth	r0, r0
}
 8006000:	bdd0      	pop	{r4, r6, r7, pc}
	} else if (fractional_bits == 1)
 8006002:	2c01      	cmp	r4, #1
		range_mm = range_mm / (0x01 << 1);
 8006004:	bf04      	itt	eq
 8006006:	f44f 5080 	moveq.w	r0, #4096	; 0x1000
 800600a:	fb93 f0f0 	sdiveq	r0, r3, r0
	return range_mm;
 800600e:	e7f7      	b.n	8006000 <VL53LX_range_maths+0x98>
 8006010:	003fffff 	.word	0x003fffff

08006014 <VL53LX_decode_vcsel_period>:
	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 8006014:	3001      	adds	r0, #1
 8006016:	0040      	lsls	r0, r0, #1

	return VL53LX_p_030;
}
 8006018:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 800601c:	4770      	bx	lr

0800601e <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{


	phist->cal_config__vcsel_start =
 800601e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8006022:	f881 3081 	strb.w	r3, [r1, #129]	; 0x81
			pxtalk->cal_config__vcsel_start;
	phist->VL53LX_p_015 =
 8006026:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
 800602a:	f8a1 3086 	strh.w	r3, [r1, #134]	; 0x86
			pxtalk->VL53LX_p_015;
	phist->VL53LX_p_019 =
 800602e:	7a03      	ldrb	r3, [r0, #8]
 8006030:	720b      	strb	r3, [r1, #8]
			pxtalk->VL53LX_p_019;

	phist->phasecal_result__reference_phase   =
 8006032:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8006034:	f8a1 307e 	strh.w	r3, [r1, #126]	; 0x7e
			pxtalk->phasecal_result__reference_phase;
	phist->phasecal_result__vcsel_start       =
 8006038:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800603c:	f881 3080 	strb.w	r3, [r1, #128]	; 0x80
			pxtalk->phasecal_result__vcsel_start;

	phist->vcsel_width =
 8006040:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8006044:	f8a1 3082 	strh.w	r3, [r1, #130]	; 0x82
			pxtalk->vcsel_width;
	phist->zero_distance_phase =
 8006048:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800604c:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
			pxtalk->zero_distance_phase;

	phist->zone_id      = pxtalk->zone_id;
 8006050:	7803      	ldrb	r3, [r0, #0]
 8006052:	708b      	strb	r3, [r1, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 8006054:	7a43      	ldrb	r3, [r0, #9]
 8006056:	724b      	strb	r3, [r1, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 8006058:	6843      	ldr	r3, [r0, #4]
 800605a:	604b      	str	r3, [r1, #4]
}
 800605c:	4770      	bx	lr

0800605e <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800605e:	b530      	push	{r4, r5, lr}
	pdata->number_of_ambient_samples          = 0;
	pdata->ambient_events_sum                 = 0;
	pdata->VL53LX_p_028             = 0;

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
		pdata->bin_seq[i] = (uint8_t)i;
 8006060:	2502      	movs	r5, #2
 8006062:	7395      	strb	r5, [r2, #14]
 8006064:	2503      	movs	r5, #3
	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 8006066:	f240 3303 	movw	r3, #771	; 0x303
	pdata->time_stamp                = 0;
 800606a:	f44f 54c0 	mov.w	r4, #6144	; 0x1800
		pdata->bin_seq[i] = (uint8_t)i;
 800606e:	73d5      	strb	r5, [r2, #15]
 8006070:	2504      	movs	r5, #4
	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 8006072:	8013      	strh	r3, [r2, #0]
	pdata->time_stamp                = 0;
 8006074:	8114      	strh	r4, [r2, #8]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 8006076:	2300      	movs	r3, #0
		pdata->bin_seq[i] = (uint8_t)i;
 8006078:	2401      	movs	r4, #1
 800607a:	7415      	strb	r5, [r2, #16]
 800607c:	2505      	movs	r5, #5
 800607e:	7354      	strb	r4, [r2, #13]

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
		pdata->bin_rep[i] = 1;
 8006080:	7494      	strb	r4, [r2, #18]
 8006082:	74d4      	strb	r4, [r2, #19]
 8006084:	7514      	strb	r4, [r2, #20]
 8006086:	7554      	strb	r4, [r2, #21]
 8006088:	7594      	strb	r4, [r2, #22]
 800608a:	75d4      	strb	r4, [r2, #23]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800608c:	7093      	strb	r3, [r2, #2]
	pdata->time_stamp                = 0;
 800608e:	6053      	str	r3, [r2, #4]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 8006090:	7291      	strb	r1, [r2, #10]
	pdata->number_of_ambient_bins    = 0;
 8006092:	72d3      	strb	r3, [r2, #11]
	pdata->result__stream_count               = 0;
 8006094:	e9c2 331e 	strd	r3, r3, [r2, #120]	; 0x78
	pdata->phasecal_result__reference_phase   = 0;
 8006098:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	pdata->vcsel_width                        = 0;
 800609c:	f882 3084 	strb.w	r3, [r2, #132]	; 0x84
	pdata->VL53LX_p_015                = 0;
 80060a0:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 80060a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	pdata->max_bin_value                      = 0;
 80060a8:	e9c2 3325 	strd	r3, r3, [r2, #148]	; 0x94
	pdata->zero_distance_phase                = 0;
 80060ac:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 80060b0:	f882 309e 	strb.w	r3, [r2, #158]	; 0x9e
	pdata->VL53LX_p_028             = 0;
 80060b4:	e9c2 3328 	strd	r3, r3, [r2, #160]	; 0xa0
		pdata->bin_seq[i] = (uint8_t)i;
 80060b8:	7313      	strb	r3, [r2, #12]
 80060ba:	7455      	strb	r5, [r2, #17]

	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
		if (i < VL53LX_p_021)
			pdata->bin_data[i] = bin_value;
		else
			pdata->bin_data[i] = 0;
 80060bc:	461c      	mov	r4, r3
 80060be:	3218      	adds	r2, #24
		if (i < VL53LX_p_021)
 80060c0:	b29d      	uxth	r5, r3
 80060c2:	42a9      	cmp	r1, r5
 80060c4:	f103 0301 	add.w	r3, r3, #1
			pdata->bin_data[i] = bin_value;
 80060c8:	bf8c      	ite	hi
 80060ca:	6010      	strhi	r0, [r2, #0]
			pdata->bin_data[i] = 0;
 80060cc:	6014      	strls	r4, [r2, #0]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 80060ce:	2b18      	cmp	r3, #24
 80060d0:	f102 0204 	add.w	r2, r2, #4
 80060d4:	d1f4      	bne.n	80060c0 <VL53LX_init_histogram_bin_data_struct+0x62>


}
 80060d6:	bd30      	pop	{r4, r5, pc}

080060d8 <VL53LX_decode_row_col>:
	uint8_t  *pcol)
{



	if (spad_number > 127) {
 80060d8:	0603      	lsls	r3, r0, #24
		*prow = 8 + ((255-spad_number) & 0x07);
 80060da:	bf49      	itett	mi
 80060dc:	43c3      	mvnmi	r3, r0
		*pcol = (spad_number-128) >> 3;
	} else {
		*prow = spad_number & 0x07;
 80060de:	f000 0307 	andpl.w	r3, r0, #7
		*prow = 8 + ((255-spad_number) & 0x07);
 80060e2:	f003 0307 	andmi.w	r3, r3, #7
		*pcol = (spad_number-128) >> 3;
 80060e6:	3880      	submi	r0, #128	; 0x80
		*pcol = (127-spad_number) >> 3;
 80060e8:	bf54      	ite	pl
 80060ea:	f1c0 007f 	rsbpl	r0, r0, #127	; 0x7f
		*prow = 8 + ((255-spad_number) & 0x07);
 80060ee:	3308      	addmi	r3, #8
		*pcol = (127-spad_number) >> 3;
 80060f0:	ea4f 00e0 	mov.w	r0, r0, asr #3
		*prow = 8 + ((255-spad_number) & 0x07);
 80060f4:	bf4c      	ite	mi
 80060f6:	700b      	strbmi	r3, [r1, #0]
		*prow = spad_number & 0x07;
 80060f8:	700b      	strbpl	r3, [r1, #0]
		*pcol = (127-spad_number) >> 3;
 80060fa:	7010      	strb	r0, [r2, #0]
	}
}
 80060fc:	4770      	bx	lr

080060fe <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 80060fe:	b570      	push	{r4, r5, r6, lr}

	uint8_t  bin            = 0;

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 8006100:	7a85      	ldrb	r5, [r0, #10]
 8006102:	f100 0318 	add.w	r3, r0, #24
 8006106:	2100      	movs	r1, #0
 8006108:	b2ca      	uxtb	r2, r1
 800610a:	42aa      	cmp	r2, r5
 800610c:	d300      	bcc.n	8006110 <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	681c      	ldr	r4, [r3, #0]
		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 8006112:	b15a      	cbz	r2, 800612c <VL53LX_hist_find_min_max_bin_values+0x2e>
 8006114:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
 8006118:	42a6      	cmp	r6, r4
 800611a:	da07      	bge.n	800612c <VL53LX_hist_find_min_max_bin_values+0x2e>
		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800611c:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4294      	cmp	r4, r2
 8006124:	dd06      	ble.n	8006134 <VL53LX_hist_find_min_max_bin_values+0x36>
 8006126:	3101      	adds	r1, #1
 8006128:	3304      	adds	r3, #4
 800612a:	e7ed      	b.n	8006108 <VL53LX_hist_find_min_max_bin_values+0xa>
			pdata->min_bin_value = pdata->bin_data[bin];
 800612c:	f8c0 4094 	str.w	r4, [r0, #148]	; 0x94
		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 8006130:	2a00      	cmp	r2, #0
 8006132:	d1f3      	bne.n	800611c <VL53LX_hist_find_min_max_bin_values+0x1e>
			pdata->max_bin_value = pdata->bin_data[bin];
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
 800613a:	e7f4      	b.n	8006126 <VL53LX_hist_find_min_max_bin_values+0x28>

0800613c <VL53LX_hist_estimate_ambient_from_thresholded_bins>:
{
 800613c:	b570      	push	{r4, r5, r6, lr}
 800613e:	460c      	mov	r4, r1
 8006140:	4605      	mov	r5, r0
	VL53LX_hist_find_min_max_bin_values(pdata);
 8006142:	4608      	mov	r0, r1
 8006144:	f7ff ffdb 	bl	80060fe <VL53LX_hist_find_min_max_bin_values>
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 8006148:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
 800614c:	4630      	mov	r0, r6
 800614e:	f7ff fe63 	bl	8005e18 <VL53LX_isqrt>
 8006152:	7aa1      	ldrb	r1, [r4, #10]
	VL53LX_p_031 *= ambient_threshold_sigma;
 8006154:	4368      	muls	r0, r5
	pdata->number_of_ambient_samples = 0;
 8006156:	2300      	movs	r3, #0
	VL53LX_p_031 += 0x07;
 8006158:	3007      	adds	r0, #7
 800615a:	f104 0218 	add.w	r2, r4, #24
	VL53LX_p_031 += pdata->min_bin_value;
 800615e:	eb06 1020 	add.w	r0, r6, r0, asr #4
	pdata->number_of_ambient_samples = 0;
 8006162:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 8006166:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800616a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800616e:	428a      	cmp	r2, r1
 8006170:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 8006174:	d109      	bne.n	800618a <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x4e>
	if (pdata->number_of_ambient_samples > 0) {
 8006176:	b13b      	cbz	r3, 8006188 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x4c>
		pdata->VL53LX_p_028 +=
 8006178:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 800617c:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		pdata->VL53LX_p_028 /=
 8006180:	fb92 f3f3 	sdiv	r3, r2, r3
 8006184:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
 8006188:	bd70      	pop	{r4, r5, r6, pc}
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800618a:	f852 6b04 	ldr.w	r6, [r2], #4
 800618e:	4286      	cmp	r6, r0
 8006190:	daed      	bge.n	800616e <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x32>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 8006192:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 8006196:	3301      	adds	r3, #1
			pdata->ambient_events_sum += pdata->bin_data[bin];
 8006198:	4435      	add	r5, r6
 800619a:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800619e:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
 80061a2:	e7e4      	b.n	800616e <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x32>

080061a4 <VL53LX_hist_estimate_ambient_from_ambient_bins>:

	uint8_t  bin            = 0;

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 80061a4:	7ac2      	ldrb	r2, [r0, #11]
{
 80061a6:	b530      	push	{r4, r5, lr}
	if (pdata->number_of_ambient_bins > 0) {
 80061a8:	b192      	cbz	r2, 80061d0 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>
		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;



		pdata->ambient_events_sum = 0;
 80061aa:	2300      	movs	r3, #0
 80061ac:	f100 0118 	add.w	r1, r0, #24
		pdata->number_of_ambient_samples =
 80061b0:	f880 209e 	strb.w	r2, [r0, #158]	; 0x9e
		pdata->ambient_events_sum = 0;
 80061b4:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 80061b8:	eb01 0582 	add.w	r5, r1, r2, lsl #2
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 80061bc:	42a9      	cmp	r1, r5
 80061be:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 80061c2:	d106      	bne.n	80061d2 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2e>
			pdata->ambient_events_sum += pdata->bin_data[bin];

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
		pdata->VL53LX_p_028 +=
 80061c4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
				((int32_t)pdata->number_of_ambient_bins / 2);
		pdata->VL53LX_p_028 /=
 80061c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80061cc:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;

	}

	LOG_FUNCTION_END(0);
}
 80061d0:	bd30      	pop	{r4, r5, pc}
			pdata->ambient_events_sum += pdata->bin_data[bin];
 80061d2:	f851 4b04 	ldr.w	r4, [r1], #4
 80061d6:	4423      	add	r3, r4
 80061d8:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 80061dc:	e7ee      	b.n	80061bc <VL53LX_hist_estimate_ambient_from_ambient_bins+0x18>

080061de <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 80061de:	b570      	push	{r4, r5, r6, lr}
 80061e0:	461c      	mov	r4, r3

	tmp32 = 4 * events_threshold;



	tmp32 += ((uint32_t)signal_thresh_sigma *
 80061e2:	435b      	muls	r3, r3
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 80061e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 80061e8:	460e      	mov	r6, r1
 80061ea:	4615      	mov	r5, r2
	tmp32  = VL53LX_isqrt(tmp32);
 80061ec:	f7ff fe14 	bl	8005e18 <VL53LX_isqrt>
	tmp32 += (uint32_t)signal_thresh_sigma;
 80061f0:	4404      	add	r4, r0



	range_mm =
 80061f2:	0130      	lsls	r0, r6, #4
 80061f4:	f7ff fe10 	bl	8005e18 <VL53LX_isqrt>
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
	range_mm *= ref_distance_mm;
 80061f8:	4368      	muls	r0, r5
	if (tmp32 != 0) {
 80061fa:	b11c      	cbz	r4, 8006204 <VL53LX_f_002+0x26>
		range_mm += (tmp32);
 80061fc:	4420      	add	r0, r4
		range_mm /= (2*tmp32);
 80061fe:	0064      	lsls	r4, r4, #1
 8006200:	fbb0 f0f4 	udiv	r0, r0, r4
	}

	return range_mm;

}
 8006204:	bd70      	pop	{r4, r5, r6, pc}

08006206 <VL53LX_f_001>:
{
 8006206:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620a:	b085      	sub	sp, #20
	pdata->VL53LX_p_009    = 0x0000;
 800620c:	f04f 0800 	mov.w	r8, #0
{
 8006210:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006212:	9003      	str	r0, [sp, #12]
 8006214:	461d      	mov	r5, r3
	pdata->VL53LX_p_009    = 0x0000;
 8006216:	e9c4 8804 	strd	r8, r8, [r4, #16]
	pdata->VL53LX_p_004     = 0x0000;
 800621a:	e9c4 8806 	strd	r8, r8, [r4, #24]
	pdata->VL53LX_p_035 = 0x0000;
 800621e:	e9c4 8808 	strd	r8, r8, [r4, #32]
	*pambient_dmax_mm  = 0;
 8006222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006224:	f8a3 8000 	strh.w	r8, [r3]
	if ((pbins->VL53LX_p_015        != 0) &&
 8006228:	f8b5 0086 	ldrh.w	r0, [r5, #134]	; 0x86
{
 800622c:	460f      	mov	r7, r1
 800622e:	4616      	mov	r6, r2
	if ((pbins->VL53LX_p_015        != 0) &&
 8006230:	2800      	cmp	r0, #0
 8006232:	d03f      	beq.n	80062b4 <VL53LX_f_001+0xae>
 8006234:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8006238:	2b00      	cmp	r3, #0
 800623a:	d03b      	beq.n	80062b4 <VL53LX_f_001+0xae>
		pll_period_us   =
 800623c:	f7ff fdac 	bl	8005d98 <VL53LX_calc_pll_period_us>
		periods_elapsed = pbins->total_periods_elapsed + 1;
 8006240:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
			VL53LX_duration_maths(
 8006244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006248:	3301      	adds	r3, #1
 800624a:	2110      	movs	r1, #16
 800624c:	f7ff fdaa 	bl	8005da4 <VL53LX_duration_maths>
 8006250:	4601      	mov	r1, r0
		pdata->VL53LX_p_037  =
 8006252:	6020      	str	r0, [r4, #0]
			VL53LX_rate_maths(
 8006254:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 8006258:	f7ff fe54 	bl	8005f04 <VL53LX_rate_maths>
			VL53LX_events_per_spad_maths(
 800625c:	6822      	ldr	r2, [r4, #0]
		pdata->VL53LX_p_034 =
 800625e:	8320      	strh	r0, [r4, #24]
			VL53LX_events_per_spad_maths(
 8006260:	f8b5 107c 	ldrh.w	r1, [r5, #124]	; 0x7c
 8006264:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 8006268:	f7ff fdb0 	bl	8005dcc <VL53LX_events_per_spad_maths>
		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800626c:	8af3      	ldrh	r3, [r6, #22]
		pdata->VL53LX_p_033   =
 800626e:	6160      	str	r0, [r4, #20]
		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	81a3      	strh	r3, [r4, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 8006274:	8363      	strh	r3, [r4, #26]
		if (pdata->VL53LX_p_033 > 0) {
 8006276:	b1e8      	cbz	r0, 80062b4 <VL53LX_f_001+0xae>
			tmp64  *= 1000;
 8006278:	8b32      	ldrh	r2, [r6, #24]
 800627a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800627e:	fba2 2303 	umull	r2, r3, r2, r3
			tmp32 = pdata->VL53LX_p_033/2;
 8006282:	0841      	lsrs	r1, r0, #1
			tmp64 <<= (11+1);
 8006284:	ea4f 3b03 	mov.w	fp, r3, lsl #12
 8006288:	ea4f 3a02 	mov.w	sl, r2, lsl #12
			tmp64 = do_division_u(tmp64,
 800628c:	4643      	mov	r3, r8
			tmp64 <<= (11+1);
 800628e:	ea4b 5b12 	orr.w	fp, fp, r2, lsr #20
			tmp64 = do_division_u(tmp64,
 8006292:	eb1a 0801 	adds.w	r8, sl, r1
 8006296:	f14b 0900 	adc.w	r9, fp, #0
 800629a:	4602      	mov	r2, r0
 800629c:	4649      	mov	r1, r9
 800629e:	4640      	mov	r0, r8
 80062a0:	f7fa fcda 	bl	8000c58 <__aeabi_uldivmod>
			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 80062a4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80062a8:	2300      	movs	r3, #0
 80062aa:	4299      	cmp	r1, r3
 80062ac:	bf08      	it	eq
 80062ae:	4290      	cmpeq	r0, r2
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 80062b0:	bf38      	it	cc
 80062b2:	8360      	strhcc	r0, [r4, #26]
	if ((pcal->ref__actual_effective_spads != 0) &&
 80062b4:	883a      	ldrh	r2, [r7, #0]
 80062b6:	2a00      	cmp	r2, #0
 80062b8:	f000 80af 	beq.w	800641a <VL53LX_f_001+0x214>
 80062bc:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 80aa 	beq.w	800641a <VL53LX_f_001+0x214>
		(pcal->ref_reflectance_pc          != 0) &&
 80062c6:	f8b7 b006 	ldrh.w	fp, [r7, #6]
		(pbins->VL53LX_p_015        != 0) &&
 80062ca:	f1bb 0f00 	cmp.w	fp, #0
 80062ce:	f000 80a4 	beq.w	800641a <VL53LX_f_001+0x214>
		(pcal->ref_reflectance_pc          != 0) &&
 80062d2:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 809f 	beq.w	800641a <VL53LX_f_001+0x214>
		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 80062dc:	f8b7 8002 	ldrh.w	r8, [r7, #2]
		tmp64 *= (1000 * 256);
 80062e0:	f44f 307a 	mov.w	r0, #256000	; 0x3e800
		tmp32  = pcal->ref__actual_effective_spads/2;
 80062e4:	ea4f 0c52 	mov.w	ip, r2, lsr #1
		tmp64 *= (1000 * 256);
 80062e8:	fba8 8900 	umull	r8, r9, r8, r0
		tmp64  = do_division_u(tmp64,
 80062ec:	eb18 000c 	adds.w	r0, r8, ip
 80062f0:	f149 0100 	adc.w	r1, r9, #0
 80062f4:	2300      	movs	r3, #0
 80062f6:	f7fa fcaf 	bl	8000c58 <__aeabi_uldivmod>
		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	9301      	str	r3, [sp, #4]
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 80062fe:	9a01      	ldr	r2, [sp, #4]
 8006300:	6963      	ldr	r3, [r4, #20]
 8006302:	fba2 8903 	umull	r8, r9, r2, r3
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 8006306:	8b63      	ldrh	r3, [r4, #26]
 8006308:	9302      	str	r3, [sp, #8]
		pdata->VL53LX_p_009 <<= 4;
 800630a:	ea4f 1a00 	mov.w	sl, r0, lsl #4
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800630e:	f8bd 0008 	ldrh.w	r0, [sp, #8]
		pdata->VL53LX_p_009 <<= 4;
 8006312:	f8c4 a010 	str.w	sl, [r4, #16]
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 8006316:	fba0 2308 	umull	r2, r3, r0, r8
 800631a:	fb00 3309 	mla	r3, r0, r9, r3
		tmp64  += (1<<(11+7));
 800631e:	f512 2080 	adds.w	r0, r2, #262144	; 0x40000
 8006322:	f143 0100 	adc.w	r1, r3, #0
		tmp64 >>= (11+8);
 8006326:	ea4f 48d0 	mov.w	r8, r0, lsr #19
 800632a:	ea48 3841 	orr.w	r8, r8, r1, lsl #13
		tmp64   = do_division_u(tmp64, 1000);
 800632e:	f518 70fa 	adds.w	r0, r8, #500	; 0x1f4
		tmp64 >>= (11+8);
 8006332:	ea4f 49d1 	mov.w	r9, r1, lsr #19
		tmp64   = do_division_u(tmp64, 1000);
 8006336:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800633a:	f04f 0300 	mov.w	r3, #0
 800633e:	f149 0100 	adc.w	r1, r9, #0
 8006342:	f7fa fc89 	bl	8000c58 <__aeabi_uldivmod>
		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 8006346:	2300      	movs	r3, #0
 8006348:	428b      	cmp	r3, r1
 800634a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800634e:	bf08      	it	eq
 8006350:	4282      	cmpeq	r2, r0
 8006352:	bf38      	it	cc
 8006354:	4610      	movcc	r0, r2
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 8006356:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800635a:	4680      	mov	r8, r0
 800635c:	61e0      	str	r0, [r4, #28]
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800635e:	fba3 0102 	umull	r0, r1, r3, r2
 8006362:	fba0 230a 	umull	r2, r3, r0, sl
		tmp64  += (1<<(11+7));
 8006366:	f512 2080 	adds.w	r0, r2, #262144	; 0x40000
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800636a:	fb0a 3301 	mla	r3, sl, r1, r3
		tmp64  += (1<<(11+7));
 800636e:	f143 0100 	adc.w	r1, r3, #0
		tmp64 >>= (11+8);
 8006372:	0cc2      	lsrs	r2, r0, #19
 8006374:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
		tmp64  *= ((uint64_t)target_reflectance *
 8006378:	8938      	ldrh	r0, [r7, #8]
		tmp64 >>= (11+8);
 800637a:	0ccb      	lsrs	r3, r1, #19
		tmp64  *= ((uint64_t)target_reflectance *
 800637c:	9903      	ldr	r1, [sp, #12]
 800637e:	fba0 0101 	umull	r0, r1, r0, r1
 8006382:	4343      	muls	r3, r0
 8006384:	fb02 3301 	mla	r3, r2, r1, r3
 8006388:	fba0 0102 	umull	r0, r1, r0, r2
		tmp64  = do_division_u(tmp64,
 800638c:	f04f 0c80 	mov.w	ip, #128	; 0x80
		tmp64  *= ((uint64_t)target_reflectance *
 8006390:	4419      	add	r1, r3
		tmp64  = do_division_u(tmp64,
 8006392:	fbeb 010c 	umlal	r0, r1, fp, ip
 8006396:	ea4f 220b 	mov.w	r2, fp, lsl #8
 800639a:	2300      	movs	r3, #0
 800639c:	f7fa fc5c 	bl	8000c58 <__aeabi_uldivmod>
		tmp64  = do_division_u(tmp64, 1000);
 80063a0:	f510 70fa 	adds.w	r0, r0, #500	; 0x1f4
 80063a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	f141 0100 	adc.w	r1, r1, #0
 80063b0:	f7fa fc52 	bl	8000c58 <__aeabi_uldivmod>
		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 80063b4:	2300      	movs	r3, #0
 80063b6:	428b      	cmp	r3, r1
 80063b8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80063bc:	bf08      	it	eq
 80063be:	4282      	cmpeq	r2, r0
 80063c0:	bf38      	it	cc
 80063c2:	4610      	movcc	r0, r2
 80063c4:	6220      	str	r0, [r4, #32]
		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 80063c6:	ea4f 2008 	mov.w	r0, r8, lsl #8
 80063ca:	f7ff fd25 	bl	8005e18 <VL53LX_isqrt>
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 80063ce:	7873      	ldrb	r3, [r6, #1]
		if (pdata->VL53LX_p_028 <
 80063d0:	69e2      	ldr	r2, [r4, #28]
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 80063d2:	4358      	muls	r0, r3
			(uint32_t)pcfg->min_ambient_thresh_events) {
 80063d4:	6873      	ldr	r3, [r6, #4]
		if (pdata->VL53LX_p_028 <
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d204      	bcs.n	80063e4 <VL53LX_f_001+0x1de>
			amb_thres_delta =
 80063da:	1a9b      	subs	r3, r3, r2
			amb_thres_delta <<= 8;
 80063dc:	021b      	lsls	r3, r3, #8
 80063de:	4298      	cmp	r0, r3
 80063e0:	bf38      	it	cc
 80063e2:	4618      	movcc	r0, r3
			(int16_t)VL53LX_f_002(
 80063e4:	7833      	ldrb	r3, [r6, #0]
 80063e6:	88ba      	ldrh	r2, [r7, #4]
 80063e8:	6a21      	ldr	r1, [r4, #32]
 80063ea:	f7ff fef8 	bl	80061de <VL53LX_f_002>
		tmp32 *= (uint32_t)pbins->vcsel_width;
 80063ee:	f8b5 3082 	ldrh.w	r3, [r5, #130]	; 0x82
		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 80063f2:	6a21      	ldr	r1, [r4, #32]
			(int16_t)VL53LX_f_002(
 80063f4:	84e0      	strh	r0, [r4, #38]	; 0x26
		tmp32 *= (uint32_t)pbins->vcsel_width;
 80063f6:	4359      	muls	r1, r3
			(int16_t)VL53LX_f_002(
 80063f8:	68b0      	ldr	r0, [r6, #8]
 80063fa:	7833      	ldrb	r3, [r6, #0]
 80063fc:	88ba      	ldrh	r2, [r7, #4]
		tmp32 += (1 << 3);
 80063fe:	3108      	adds	r1, #8
			(int16_t)VL53LX_f_002(
 8006400:	0909      	lsrs	r1, r1, #4
 8006402:	0200      	lsls	r0, r0, #8
 8006404:	f7ff feeb 	bl	80061de <VL53LX_f_002>
		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 8006408:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
			(int16_t)VL53LX_f_002(
 800640c:	b200      	sxth	r0, r0
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800640e:	4298      	cmp	r0, r3
		pdata->VL53LX_p_036 =
 8006410:	84a0      	strh	r0, [r4, #36]	; 0x24
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 8006412:	bfa8      	it	ge
 8006414:	4618      	movge	r0, r3
 8006416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006418:	8018      	strh	r0, [r3, #0]
}
 800641a:	2000      	movs	r0, #0
 800641c:	b005      	add	sp, #20
 800641e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006422 <VL53LX_f_003>:


	uint8_t  lb                 = 0;

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
	palgo->VL53LX_p_019                = 0;
 8006422:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
{
 8006426:	b510      	push	{r4, lr}
	palgo->VL53LX_p_019                = 0;
 8006428:	8003      	strh	r3, [r0, #0]
	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800642a:	2300      	movs	r3, #0
{
 800642c:	4604      	mov	r4, r0
	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800642e:	7083      	strb	r3, [r0, #2]
	palgo->VL53LX_p_021           = 0;
	palgo->VL53LX_p_039         = 0;
 8006430:	7103      	strb	r3, [r0, #4]
	palgo->VL53LX_p_028   = 0;
	palgo->VL53LX_p_031 = 0;
 8006432:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8006436:	f100 0210 	add.w	r2, r0, #16
 800643a:	f100 01b8 	add.w	r1, r0, #184	; 0xb8
 800643e:	3028      	adds	r0, #40	; 0x28

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
		palgo->VL53LX_p_040[lb]      = 0;
 8006440:	f802 3b01 	strb.w	r3, [r2], #1
		palgo->VL53LX_p_041[lb] = 0;
 8006444:	75d3      	strb	r3, [r2, #23]
		palgo->VL53LX_p_042[lb]     = 0;
 8006446:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
		palgo->VL53LX_p_043[lb]      = 0;
 800644a:	f841 3b04 	str.w	r3, [r1], #4
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800644e:	4282      	cmp	r2, r0
		palgo->VL53LX_p_018[lb]     = 0;
 8006450:	65cb      	str	r3, [r1, #92]	; 0x5c
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 8006452:	d1f5      	bne.n	8006440 <VL53LX_f_003+0x1e>
	}

	palgo->VL53LX_p_044 = 0;
 8006454:	f44f 6200 	mov.w	r2, #2048	; 0x800
	palgo->VL53LX_p_045               = VL53LX_D_001;
 8006458:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	palgo->VL53LX_p_044 = 0;
 800645c:	f8a4 2178 	strh.w	r2, [r4, #376]	; 0x178
	palgo->VL53LX_p_046             = 0;



	VL53LX_init_histogram_bin_data_struct(
 8006460:	2118      	movs	r1, #24
 8006462:	f504 7227 	add.w	r2, r4, #668	; 0x29c
 8006466:	2000      	movs	r0, #0
 8006468:	f7ff fdf9 	bl	800605e <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800646c:	f504 7252 	add.w	r2, r4, #840	; 0x348
 8006470:	2118      	movs	r1, #24
 8006472:	2000      	movs	r0, #0
 8006474:	f7ff fdf3 	bl	800605e <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 8006478:	f504 727d 	add.w	r2, r4, #1012	; 0x3f4
 800647c:	2118      	movs	r1, #24
 800647e:	2000      	movs	r0, #0
 8006480:	f7ff fded 	bl	800605e <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 8006484:	f504 6294 	add.w	r2, r4, #1184	; 0x4a0
 8006488:	2118      	movs	r1, #24
 800648a:	2000      	movs	r0, #0
 800648c:	f7ff fde7 	bl	800605e <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 8006490:	f204 524c 	addw	r2, r4, #1356	; 0x54c
 8006494:	2118      	movs	r1, #24
 8006496:	2000      	movs	r0, #0
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 8006498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	VL53LX_init_histogram_bin_data_struct(
 800649c:	f7ff bddf 	b.w	800605e <VL53LX_init_histogram_bin_data_struct>

080064a0 <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 80064a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80064a8:	461f      	mov	r7, r3
	int32_t  samples      = 0;

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 80064aa:	7a6b      	ldrb	r3, [r5, #9]
 80064ac:	7063      	strb	r3, [r4, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 80064ae:	7a2b      	ldrb	r3, [r5, #8]
 80064b0:	7023      	strb	r3, [r4, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 80064b2:	7aab      	ldrb	r3, [r5, #10]
 80064b4:	70a3      	strb	r3, [r4, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 80064b6:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 80064ba:	60a3      	str	r3, [r4, #8]
{
 80064bc:	4680      	mov	r8, r0



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 80064be:	f895 0084 	ldrb.w	r0, [r5, #132]	; 0x84
{
 80064c2:	4689      	mov	r9, r1
 80064c4:	4616      	mov	r6, r2
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 80064c6:	f7ff fda5 	bl	8006014 <VL53LX_decode_vcsel_period>
	palgo->VL53LX_p_030 =
 80064ca:	70e0      	strb	r0, [r4, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
	tmp *= (int64_t)ambient_threshold_events_scaler;
	tmp += 2048;
 80064cc:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 80064d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064d4:	2300      	movs	r3, #0
 80064d6:	fbc8 2301 	smlal	r2, r3, r8, r1
	tmp = do_division_s(tmp, 4096);
 80064da:	2a00      	cmp	r2, #0
 80064dc:	f173 0100 	sbcs.w	r1, r3, #0
 80064e0:	da04      	bge.n	80064ec <VL53LX_f_006+0x4c>
 80064e2:	f640 70ff 	movw	r0, #4095	; 0xfff
 80064e6:	2100      	movs	r1, #0
 80064e8:	1812      	adds	r2, r2, r0
 80064ea:	414b      	adcs	r3, r1
 80064ec:	ea4f 3b12 	mov.w	fp, r2, lsr #12
 80064f0:	ea4b 5b03 	orr.w	fp, fp, r3, lsl #20
	amb_events = (int32_t)tmp;



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 80064f4:	f04f 0a00 	mov.w	sl, #0

			VL53LX_p_018 += (samples/2);
			VL53LX_p_018 /= samples;
			VL53LX_p_018 *= ambient_threshold_sigma;
			VL53LX_p_018 += 8;
			VL53LX_p_018 /= 16;
 80064f8:	2110      	movs	r1, #16
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 80064fa:	7aab      	ldrb	r3, [r5, #10]
 80064fc:	fa5f f88a 	uxtb.w	r8, sl
 8006500:	4543      	cmp	r3, r8
 8006502:	d80a      	bhi.n	800651a <VL53LX_f_006+0x7a>

	}



	palgo->VL53LX_p_039 = 0;
 8006504:	2200      	movs	r2, #0
 8006506:	7122      	strb	r2, [r4, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 8006508:	7a2b      	ldrb	r3, [r5, #8]

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
			palgo->VL53LX_p_040[lb]      = 1;
 800650a:	2601      	movs	r6, #1
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800650c:	7aa9      	ldrb	r1, [r5, #10]
 800650e:	4299      	cmp	r1, r3
 8006510:	d830      	bhi.n	8006574 <VL53LX_f_006+0xd4>

	LOG_FUNCTION_END(status);

	return status;

}
 8006512:	2000      	movs	r0, #0
 8006514:	b003      	add	sp, #12
 8006516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800651a:	eb05 0398 	add.w	r3, r5, r8, lsr #2
 800651e:	7c9b      	ldrb	r3, [r3, #18]
		if (samples > 0) {
 8006520:	b313      	cbz	r3, 8006568 <VL53LX_f_006+0xc8>
			if (lb < pxtalk->VL53LX_p_021 &&
 8006522:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006524:	7a90      	ldrb	r0, [r2, #10]
 8006526:	4540      	cmp	r0, r8
 8006528:	d921      	bls.n	800656e <VL53LX_f_006+0xce>
 800652a:	b307      	cbz	r7, 800656e <VL53LX_f_006+0xce>
					pxtalk->bin_data[lb]);
 800652c:	f108 0006 	add.w	r0, r8, #6
				VL53LX_p_018 = samples * (amb_events +
 8006530:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8006534:	4458      	add	r0, fp
 8006536:	4358      	muls	r0, r3
 8006538:	e9cd 3100 	strd	r3, r1, [sp]
			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800653c:	f7ff fc6c 	bl	8005e18 <VL53LX_isqrt>
			VL53LX_p_018 += (samples/2);
 8006540:	9b00      	ldr	r3, [sp, #0]
			VL53LX_p_018 /= 16;
 8006542:	9901      	ldr	r1, [sp, #4]
			VL53LX_p_018 += (samples/2);
 8006544:	eb00 0053 	add.w	r0, r0, r3, lsr #1
			VL53LX_p_018 /= samples;
 8006548:	fb90 f3f3 	sdiv	r3, r0, r3
			VL53LX_p_018 *= ambient_threshold_sigma;
 800654c:	fb09 f303 	mul.w	r3, r9, r3
			VL53LX_p_018 += 8;
 8006550:	3308      	adds	r3, #8
			VL53LX_p_018 /= 16;
 8006552:	fb93 f3f1 	sdiv	r3, r3, r1
			VL53LX_p_018 += amb_events;
 8006556:	445b      	add	r3, fp
 8006558:	42b3      	cmp	r3, r6
			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800655a:	f108 0816 	add.w	r8, r8, #22
 800655e:	bfb8      	it	lt
 8006560:	4633      	movlt	r3, r6
 8006562:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 8006566:	60e3      	str	r3, [r4, #12]
 8006568:	f10a 0a01 	add.w	sl, sl, #1
 800656c:	e7c5      	b.n	80064fa <VL53LX_f_006+0x5a>
				VL53LX_p_018 = samples *  amb_events;
 800656e:	fb03 f00b 	mul.w	r0, r3, fp
 8006572:	e7e1      	b.n	8006538 <VL53LX_f_006+0x98>
		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 8006574:	1d98      	adds	r0, r3, #6
 8006576:	f103 0116 	add.w	r1, r3, #22
 800657a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800657e:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8006582:	4288      	cmp	r0, r1
 8006584:	eb04 0103 	add.w	r1, r4, r3
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 8006588:	f103 0301 	add.w	r3, r3, #1
			palgo->VL53LX_p_040[lb]      = 1;
 800658c:	bfc3      	ittte	gt
 800658e:	740e      	strbgt	r6, [r1, #16]
			palgo->VL53LX_p_041[lb] = 1;
 8006590:	f881 6028 	strbgt.w	r6, [r1, #40]	; 0x28
			palgo->VL53LX_p_039++;
 8006594:	7921      	ldrbgt	r1, [r4, #4]
			palgo->VL53LX_p_040[lb]      = 0;
 8006596:	740a      	strble	r2, [r1, #16]
			palgo->VL53LX_p_039++;
 8006598:	bfc6      	itte	gt
 800659a:	3101      	addgt	r1, #1
 800659c:	7121      	strbgt	r1, [r4, #4]
			palgo->VL53LX_p_041[lb] = 0;
 800659e:	f881 2028 	strble.w	r2, [r1, #40]	; 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	e7b2      	b.n	800650c <VL53LX_f_006+0x6c>

080065a6 <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 80065a6:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t  j            = 0;
	uint8_t  found        = 0;

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 80065a8:	2300      	movs	r3, #0

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 80065aa:	78c4      	ldrb	r4, [r0, #3]
	palgo->VL53LX_p_044 = 0;
 80065ac:	f880 3178 	strb.w	r3, [r0, #376]	; 0x178
	uint8_t  found        = 0;
 80065b0:	461e      	mov	r6, r3
 80065b2:	b2d9      	uxtb	r1, r3
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 80065b4:	428c      	cmp	r4, r1
 80065b6:	d801      	bhi.n	80065bc <VL53LX_f_007+0x16>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80065b8:	2000      	movs	r0, #0
 80065ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 80065bc:	7887      	ldrb	r7, [r0, #2]
 80065be:	428f      	cmp	r7, r1
 80065c0:	f103 0501 	add.w	r5, r3, #1
 80065c4:	d914      	bls.n	80065f0 <VL53LX_f_007+0x4a>
		j = (i + 1) % palgo->VL53LX_p_030;
 80065c6:	fb95 f2f4 	sdiv	r2, r5, r4
 80065ca:	fb04 5212 	mls	r2, r4, r2, r5
		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 80065ce:	fa5f fc82 	uxtb.w	ip, r2
 80065d2:	4567      	cmp	r7, ip
 80065d4:	d90c      	bls.n	80065f0 <VL53LX_f_007+0x4a>
			if (palgo->VL53LX_p_041[i] == 0 &&
 80065d6:	4403      	add	r3, r0
 80065d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065dc:	b943      	cbnz	r3, 80065f0 <VL53LX_f_007+0x4a>
				palgo->VL53LX_p_041[j] == 1 &&
 80065de:	4402      	add	r2, r0
 80065e0:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d103      	bne.n	80065f0 <VL53LX_f_007+0x4a>
				palgo->VL53LX_p_041[j] == 1 &&
 80065e8:	b916      	cbnz	r6, 80065f0 <VL53LX_f_007+0x4a>
				palgo->VL53LX_p_044 = i;
 80065ea:	f880 1178 	strb.w	r1, [r0, #376]	; 0x178
				found = 1;
 80065ee:	461e      	mov	r6, r3
 80065f0:	462b      	mov	r3, r5
 80065f2:	e7de      	b.n	80065b2 <VL53LX_f_007+0xc>

080065f4 <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 80065f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t  j            = 0;
	uint8_t  lb            = 0;

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 80065f6:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
 80065fa:	78c4      	ldrb	r4, [r0, #3]
		lb < (palgo->VL53LX_p_044 +
 80065fc:	191e      	adds	r6, r3, r4
	for (lb = palgo->VL53LX_p_044;
 80065fe:	42b3      	cmp	r3, r6
 8006600:	db01      	blt.n	8006606 <VL53LX_f_008+0x12>

	LOG_FUNCTION_END(status);

	return status;

}
 8006602:	2000      	movs	r0, #0
 8006604:	bdf0      	pop	{r4, r5, r6, r7, pc}
		i =  lb      % palgo->VL53LX_p_030;
 8006606:	fbb3 f2f4 	udiv	r2, r3, r4
		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800660a:	7885      	ldrb	r5, [r0, #2]
		i =  lb      % palgo->VL53LX_p_030;
 800660c:	fb04 3212 	mls	r2, r4, r2, r3
 8006610:	b2d2      	uxtb	r2, r2
		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 8006612:	4295      	cmp	r5, r2
 8006614:	f103 0301 	add.w	r3, r3, #1
 8006618:	d921      	bls.n	800665e <VL53LX_f_008+0x6a>
		j = (lb + 1) % palgo->VL53LX_p_030;
 800661a:	fb93 f1f4 	sdiv	r1, r3, r4
 800661e:	fb04 3111 	mls	r1, r4, r1, r3
		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 8006622:	b2cf      	uxtb	r7, r1
 8006624:	42bd      	cmp	r5, r7
 8006626:	d91a      	bls.n	800665e <VL53LX_f_008+0x6a>
			if (palgo->VL53LX_p_041[i] == 0 &&
 8006628:	4402      	add	r2, r0
 800662a:	f892 5028 	ldrb.w	r5, [r2, #40]	; 0x28
 800662e:	b94d      	cbnz	r5, 8006644 <VL53LX_f_008+0x50>
				palgo->VL53LX_p_041[j] == 1)
 8006630:	4401      	add	r1, r0
			if (palgo->VL53LX_p_041[i] == 0 &&
 8006632:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8006636:	2901      	cmp	r1, #1
				palgo->VL53LX_p_046++;
 8006638:	bf02      	ittt	eq
 800663a:	f890 117a 	ldrbeq.w	r1, [r0, #378]	; 0x17a
 800663e:	3101      	addeq	r1, #1
 8006640:	f880 117a 	strbeq.w	r1, [r0, #378]	; 0x17a
			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 8006644:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
 8006648:	f890 717a 	ldrb.w	r7, [r0, #378]	; 0x17a
 800664c:	428f      	cmp	r7, r1
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800664e:	bf88      	it	hi
 8006650:	f880 117a 	strbhi.w	r1, [r0, #378]	; 0x17a
			if (palgo->VL53LX_p_041[i] > 0)
 8006654:	b12d      	cbz	r5, 8006662 <VL53LX_f_008+0x6e>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 8006656:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
 800665a:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
		lb++) {
 800665e:	b2db      	uxtb	r3, r3
 8006660:	e7cd      	b.n	80065fe <VL53LX_f_008+0xa>
				palgo->VL53LX_p_042[i] = 0;
 8006662:	f882 5040 	strb.w	r5, [r2, #64]	; 0x40
 8006666:	e7fa      	b.n	800665e <VL53LX_f_008+0x6a>

08006668 <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 8006668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800666c:	78c1      	ldrb	r1, [r0, #3]
	max_filter_half_width = max_filter_half_width >> 1;

	for (blb = palgo->VL53LX_p_044;
 800666e:	f890 e178 	ldrb.w	lr, [r0, #376]	; 0x178
	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 8006672:	1e4d      	subs	r5, r1, #1
	max_filter_half_width = max_filter_half_width >> 1;
 8006674:	f3c5 0546 	ubfx	r5, r5, #1, #7
		blb < (palgo->VL53LX_p_044 +
 8006678:	eb0e 0701 	add.w	r7, lr, r1
				pulse_no = palgo->VL53LX_p_042[i] - 1;

				if (pulse_no < palgo->VL53LX_p_045) {
					pdata = &(palgo->VL53LX_p_003[pulse_no]);

					pdata->VL53LX_p_024    = blb;
 800667c:	2624      	movs	r6, #36	; 0x24
					pdata->VL53LX_p_023   = 0xFF;
 800667e:	f04f 0cff 	mov.w	ip, #255	; 0xff
	for (blb = palgo->VL53LX_p_044;
 8006682:	45be      	cmp	lr, r7
 8006684:	db02      	blt.n	800668c <VL53LX_f_009+0x24>

	LOG_FUNCTION_END(status);

	return status;

}
 8006686:	2000      	movs	r0, #0
 8006688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		i =  blb      % palgo->VL53LX_p_030;
 800668c:	fbbe f3f1 	udiv	r3, lr, r1
		if (i < palgo->VL53LX_p_021 &&
 8006690:	f890 9002 	ldrb.w	r9, [r0, #2]
		i =  blb      % palgo->VL53LX_p_030;
 8006694:	fb01 e313 	mls	r3, r1, r3, lr
 8006698:	b2db      	uxtb	r3, r3
 800669a:	f10e 0801 	add.w	r8, lr, #1
		if (i < palgo->VL53LX_p_021 &&
 800669e:	4599      	cmp	r9, r3
 80066a0:	fa5f f488 	uxtb.w	r4, r8
 80066a4:	d922      	bls.n	80066ec <VL53LX_f_009+0x84>
		j = (blb + 1) % palgo->VL53LX_p_030;
 80066a6:	fb98 f2f1 	sdiv	r2, r8, r1
 80066aa:	fb01 8212 	mls	r2, r1, r2, r8
		if (i < palgo->VL53LX_p_021 &&
 80066ae:	fa5f f882 	uxtb.w	r8, r2
 80066b2:	45c1      	cmp	r9, r8
 80066b4:	d91a      	bls.n	80066ec <VL53LX_f_009+0x84>
			if (palgo->VL53LX_p_042[i] == 0 &&
 80066b6:	4403      	add	r3, r0
 80066b8:	4402      	add	r2, r0
 80066ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
					palgo->VL53LX_p_042[j] > 0) {
 80066be:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 80066c2:	b9ab      	cbnz	r3, 80066f0 <VL53LX_f_009+0x88>
 80066c4:	b192      	cbz	r2, 80066ec <VL53LX_f_009+0x84>
				pulse_no = palgo->VL53LX_p_042[j] - 1;
 80066c6:	3a01      	subs	r2, #1
				if (pulse_no < palgo->VL53LX_p_045) {
 80066c8:	f890 8179 	ldrb.w	r8, [r0, #377]	; 0x179
				pulse_no = palgo->VL53LX_p_042[j] - 1;
 80066cc:	b2d2      	uxtb	r2, r2
				if (pulse_no < palgo->VL53LX_p_045) {
 80066ce:	4590      	cmp	r8, r2
 80066d0:	d90c      	bls.n	80066ec <VL53LX_f_009+0x84>
					pdata->VL53LX_p_012 = blb;
 80066d2:	4372      	muls	r2, r6
 80066d4:	eb00 0802 	add.w	r8, r0, r2
 80066d8:	f502 72bc 	add.w	r2, r2, #376	; 0x178
 80066dc:	4402      	add	r2, r0
 80066de:	f888 e17c 	strb.w	lr, [r8, #380]	; 0x17c
					pdata->VL53LX_p_019    = blb + 1;
 80066e2:	f888 417d 	strb.w	r4, [r8, #381]	; 0x17d
					pdata->VL53LX_p_023   = 0xFF;
 80066e6:	f8a2 c006 	strh.w	ip, [r2, #6]
					pdata->VL53LX_p_024     = 0;
 80066ea:	7213      	strb	r3, [r2, #8]
		blb++) {
 80066ec:	46a6      	mov	lr, r4
 80066ee:	e7c8      	b.n	8006682 <VL53LX_f_009+0x1a>
				&& palgo->VL53LX_p_042[j] == 0) {
 80066f0:	2a00      	cmp	r2, #0
 80066f2:	d1fb      	bne.n	80066ec <VL53LX_f_009+0x84>
				pulse_no = palgo->VL53LX_p_042[i] - 1;
 80066f4:	3b01      	subs	r3, #1
				if (pulse_no < palgo->VL53LX_p_045) {
 80066f6:	f890 2179 	ldrb.w	r2, [r0, #377]	; 0x179
				pulse_no = palgo->VL53LX_p_042[i] - 1;
 80066fa:	b2db      	uxtb	r3, r3
				if (pulse_no < palgo->VL53LX_p_045) {
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d9f5      	bls.n	80066ec <VL53LX_f_009+0x84>
					pdata->VL53LX_p_024    = blb;
 8006700:	fb06 0303 	mla	r3, r6, r3, r0
						(pdata->VL53LX_p_024 + 1) -
 8006704:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
					pdata->VL53LX_p_024    = blb;
 8006708:	f883 e17f 	strb.w	lr, [r3, #383]	; 0x17f
						(pdata->VL53LX_p_024 + 1) -
 800670c:	f10e 0e01 	add.w	lr, lr, #1
 8006710:	ebae 0e02 	sub.w	lr, lr, r2
					pdata->VL53LX_p_025 =
 8006714:	f883 e181 	strb.w	lr, [r3, #385]	; 0x181
						(pdata->VL53LX_p_013 + 1) -
 8006718:	f893 e17c 	ldrb.w	lr, [r3, #380]	; 0x17c
					pdata->VL53LX_p_013  = blb + 1;
 800671c:	f883 4180 	strb.w	r4, [r3, #384]	; 0x180
						(pdata->VL53LX_p_013 + 1) -
 8006720:	1c62      	adds	r2, r4, #1
 8006722:	eba2 020e 	sub.w	r2, r2, lr
 8006726:	b2d2      	uxtb	r2, r2
					pdata->VL53LX_p_051 =
 8006728:	42aa      	cmp	r2, r5
 800672a:	bf28      	it	cs
 800672c:	462a      	movcs	r2, r5
 800672e:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
 8006732:	e7db      	b.n	80066ec <VL53LX_f_009+0x84>

08006734 <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 8006734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t i       = 0;
	uint8_t swapped = 1;

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 8006738:	f891 317a 	ldrb.w	r3, [r1, #378]	; 0x17a
 800673c:	2b01      	cmp	r3, #1
{
 800673e:	b08a      	sub	sp, #40	; 0x28
 8006740:	4684      	mov	ip, r0
 8006742:	460c      	mov	r4, r1
	if (!(palgo->VL53LX_p_046 > 1))
 8006744:	f200 8083 	bhi.w	800684e <VL53LX_f_016+0x11a>
ENDFUNC:
	LOG_FUNCTION_END(status);

	return status;

}
 8006748:	2000      	movs	r0, #0
 800674a:	b00a      	add	sp, #40	; 0x28
 800674c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			p0 = &(palgo->VL53LX_p_003[i-1]);
 8006750:	1e69      	subs	r1, r5, #1
 8006752:	4371      	muls	r1, r6
 8006754:	f501 73be 	add.w	r3, r1, #380	; 0x17c
			p1 = &(palgo->VL53LX_p_003[i]);
 8006758:	f501 72d0 	add.w	r2, r1, #416	; 0x1a0
 800675c:	fb06 fe05 	mul.w	lr, r6, r5
			if (target_order
 8006760:	f1bc 0f02 	cmp.w	ip, #2
			p0 = &(palgo->VL53LX_p_003[i-1]);
 8006764:	4423      	add	r3, r4
			p1 = &(palgo->VL53LX_p_003[i]);
 8006766:	4422      	add	r2, r4
 8006768:	4421      	add	r1, r4
						p1->VL53LX_p_010) {
 800676a:	44a6      	add	lr, r4
			if (target_order
 800676c:	d13f      	bne.n	80067ee <VL53LX_f_016+0xba>
				if (p0->VL53LX_p_010 <
 800676e:	f8d1 818c 	ldr.w	r8, [r1, #396]	; 0x18c
 8006772:	f8de 118c 	ldr.w	r1, [lr, #396]	; 0x18c
 8006776:	4588      	cmp	r8, r1
 8006778:	da2c      	bge.n	80067d4 <VL53LX_f_016+0xa0>
					memcpy(ptmp,
 800677a:	4696      	mov	lr, r2
 800677c:	f10d 0804 	add.w	r8, sp, #4
 8006780:	f102 0a20 	add.w	sl, r2, #32
 8006784:	f8de 0000 	ldr.w	r0, [lr]
 8006788:	f8de 1004 	ldr.w	r1, [lr, #4]
 800678c:	46c1      	mov	r9, r8
 800678e:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 8006792:	f10e 0e08 	add.w	lr, lr, #8
 8006796:	45d6      	cmp	lr, sl
 8006798:	46c8      	mov	r8, r9
 800679a:	d1f3      	bne.n	8006784 <VL53LX_f_016+0x50>
 800679c:	f8de 0000 	ldr.w	r0, [lr]
 80067a0:	f8c9 0000 	str.w	r0, [r9]
					memcpy(p1,
 80067a4:	4619      	mov	r1, r3
 80067a6:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80067aa:	f851 eb04 	ldr.w	lr, [r1], #4
 80067ae:	f842 eb04 	str.w	lr, [r2], #4
 80067b2:	4281      	cmp	r1, r0
 80067b4:	d1f9      	bne.n	80067aa <VL53LX_f_016+0x76>
					memcpy(p0,
 80067b6:	f10d 0e04 	add.w	lr, sp, #4
 80067ba:	4672      	mov	r2, lr
 80067bc:	ca03      	ldmia	r2!, {r0, r1}
 80067be:	42ba      	cmp	r2, r7
 80067c0:	6018      	str	r0, [r3, #0]
 80067c2:	6059      	str	r1, [r3, #4]
 80067c4:	4696      	mov	lr, r2
 80067c6:	f103 0308 	add.w	r3, r3, #8
 80067ca:	d1f6      	bne.n	80067ba <VL53LX_f_016+0x86>
					memcpy(p0,
 80067cc:	f8de 0000 	ldr.w	r0, [lr]
 80067d0:	6018      	str	r0, [r3, #0]
					swapped = 1;
 80067d2:	2001      	movs	r0, #1
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 80067d4:	3501      	adds	r5, #1
 80067d6:	4603      	mov	r3, r0
 80067d8:	b2e8      	uxtb	r0, r5
		swapped = 0;
 80067da:	4605      	mov	r5, r0
 80067dc:	4618      	mov	r0, r3
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 80067de:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
 80067e2:	42ab      	cmp	r3, r5
 80067e4:	d8b4      	bhi.n	8006750 <VL53LX_f_016+0x1c>
	while (swapped > 0) {
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d0ae      	beq.n	8006748 <VL53LX_f_016+0x14>
		swapped = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e7f5      	b.n	80067da <VL53LX_f_016+0xa6>
				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 80067ee:	f8d1 8194 	ldr.w	r8, [r1, #404]	; 0x194
 80067f2:	f8de 1194 	ldr.w	r1, [lr, #404]	; 0x194
 80067f6:	4588      	cmp	r8, r1
 80067f8:	d9ec      	bls.n	80067d4 <VL53LX_f_016+0xa0>
					memcpy(ptmp,
 80067fa:	4696      	mov	lr, r2
 80067fc:	f10d 0804 	add.w	r8, sp, #4
 8006800:	f102 0a20 	add.w	sl, r2, #32
 8006804:	f8de 0000 	ldr.w	r0, [lr]
 8006808:	f8de 1004 	ldr.w	r1, [lr, #4]
 800680c:	46c1      	mov	r9, r8
 800680e:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 8006812:	f10e 0e08 	add.w	lr, lr, #8
 8006816:	45d6      	cmp	lr, sl
 8006818:	46c8      	mov	r8, r9
 800681a:	d1f3      	bne.n	8006804 <VL53LX_f_016+0xd0>
 800681c:	f8de 0000 	ldr.w	r0, [lr]
 8006820:	f8c9 0000 	str.w	r0, [r9]
					memcpy(p1,
 8006824:	4619      	mov	r1, r3
 8006826:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800682a:	f851 eb04 	ldr.w	lr, [r1], #4
 800682e:	f842 eb04 	str.w	lr, [r2], #4
 8006832:	4281      	cmp	r1, r0
 8006834:	d1f9      	bne.n	800682a <VL53LX_f_016+0xf6>
					memcpy(p0,
 8006836:	f10d 0e04 	add.w	lr, sp, #4
 800683a:	4672      	mov	r2, lr
 800683c:	ca03      	ldmia	r2!, {r0, r1}
 800683e:	42ba      	cmp	r2, r7
 8006840:	6018      	str	r0, [r3, #0]
 8006842:	6059      	str	r1, [r3, #4]
 8006844:	4696      	mov	lr, r2
 8006846:	f103 0308 	add.w	r3, r3, #8
 800684a:	d1f6      	bne.n	800683a <VL53LX_f_016+0x106>
 800684c:	e7be      	b.n	80067cc <VL53LX_f_016+0x98>
 800684e:	2624      	movs	r6, #36	; 0x24
		swapped = 0;
 8006850:	2000      	movs	r0, #0
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 8006852:	2501      	movs	r5, #1
					memcpy(p0,
 8006854:	eb0d 0706 	add.w	r7, sp, r6
 8006858:	e7c1      	b.n	80067de <VL53LX_f_016+0xaa>

0800685a <VL53LX_f_010>:

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800685a:	2324      	movs	r3, #36	; 0x24
 800685c:	fb03 2000 	mla	r0, r3, r0, r2
{
 8006860:	b5f0      	push	{r4, r5, r6, r7, lr}
	pdata->VL53LX_p_017  = 0;
 8006862:	2300      	movs	r3, #0
	pdata->VL53LX_p_016 = 0;

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 8006864:	f890 417c 	ldrb.w	r4, [r0, #380]	; 0x17c
 8006868:	f890 6180 	ldrb.w	r6, [r0, #384]	; 0x180
	pdata->VL53LX_p_017  = 0;
 800686c:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
	pdata->VL53LX_p_016 = 0;
 8006870:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 8006874:	42a6      	cmp	r6, r4
 8006876:	f8d0 5188 	ldr.w	r5, [r0, #392]	; 0x188
 800687a:	d206      	bcs.n	800688a <VL53LX_f_010+0x30>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800687c:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8006880:	1aed      	subs	r5, r5, r3
	pdata->VL53LX_p_010 =
 8006882:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c

	LOG_FUNCTION_END(status);

	return status;
}
 8006886:	2000      	movs	r0, #0
 8006888:	bdf0      	pop	{r4, r5, r6, r7, pc}
		i =  lb % palgo->VL53LX_p_030;
 800688a:	78d7      	ldrb	r7, [r2, #3]
 800688c:	fbb4 f3f7 	udiv	r3, r4, r7
 8006890:	fb07 4313 	mls	r3, r7, r3, r4
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 8006894:	b2db      	uxtb	r3, r3
 8006896:	3306      	adds	r3, #6
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 8006898:	3401      	adds	r4, #1
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800689a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800689e:	441d      	add	r5, r3
 80068a0:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 80068a4:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 80068a8:	6895      	ldr	r5, [r2, #8]
 80068aa:	442b      	add	r3, r5
 80068ac:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 80068b0:	b2e4      	uxtb	r4, r4
 80068b2:	e7df      	b.n	8006874 <VL53LX_f_010+0x1a>

080068b4 <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 80068b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b8:	b085      	sub	sp, #20
	int64_t event_sum     = 0;
	int64_t weighted_sum  = 0;

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 80068ba:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80068be:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
 80068c0:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 80068c4:	602c      	str	r4, [r5, #0]

	if (VL53LX_p_030 != 0)
 80068c6:	2a00      	cmp	r2, #0
 80068c8:	d15d      	bne.n	8006986 <VL53LX_f_020+0xd2>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80068ca:	2000      	movs	r0, #0
 80068cc:	b005      	add	sp, #20
 80068ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (lb < 0)
 80068d2:	2800      	cmp	r0, #0
 80068d4:	bfb2      	itee	lt
 80068d6:	1814      	addlt	r4, r2, r0
			i = lb % (int16_t)VL53LX_p_030;
 80068d8:	fb90 f4f2 	sdivge	r4, r0, r2
 80068dc:	fb02 0414 	mlsge	r4, r2, r4, r0
 80068e0:	b224      	sxth	r4, r4
		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 80068e2:	b2a5      	uxth	r5, r4
 80068e4:	2d17      	cmp	r5, #23
 80068e6:	d831      	bhi.n	800694c <VL53LX_f_020+0x98>
				(int64_t)pbins->bin_data[i] -
 80068e8:	3406      	adds	r4, #6
				(int64_t)pbins->VL53LX_p_028;
 80068ea:	f8de 60a4 	ldr.w	r6, [lr, #164]	; 0xa4
				(int64_t)pbins->bin_data[i] -
 80068ee:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 80068f2:	17e5      	asrs	r5, r4, #31
			VL53LX_p_018 =
 80068f4:	ebb4 0a06 	subs.w	sl, r4, r6
 80068f8:	eb65 7be6 	sbc.w	fp, r5, r6, asr #31
			if (clip_events > 0 && VL53LX_p_018 < 0)
 80068fc:	b14b      	cbz	r3, 8006912 <VL53LX_f_020+0x5e>
 80068fe:	4654      	mov	r4, sl
 8006900:	2c00      	cmp	r4, #0
 8006902:	f17b 0400 	sbcs.w	r4, fp, #0
 8006906:	465d      	mov	r5, fp
 8006908:	bfbf      	itttt	lt
 800690a:	2400      	movlt	r4, #0
 800690c:	2500      	movlt	r5, #0
 800690e:	46a2      	movlt	sl, r4
 8006910:	46ab      	movlt	fp, r5
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 8006912:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8006916:	2700      	movs	r7, #0
 8006918:	fbc0 670c 	smlal	r6, r7, r0, ip
 800691c:	e9cd 6702 	strd	r6, r7, [sp, #8]
			event_sum += VL53LX_p_018;
 8006920:	eb1a 0408 	adds.w	r4, sl, r8
 8006924:	eb4b 0509 	adc.w	r5, fp, r9
 8006928:	46a0      	mov	r8, r4
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800692a:	9c02      	ldr	r4, [sp, #8]
			event_sum += VL53LX_p_018;
 800692c:	46a9      	mov	r9, r5
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800692e:	465d      	mov	r5, fp
 8006930:	4365      	muls	r5, r4
 8006932:	9c03      	ldr	r4, [sp, #12]
 8006934:	fb0a 5704 	mla	r7, sl, r4, r5
 8006938:	9c02      	ldr	r4, [sp, #8]
 800693a:	fba4 450a 	umull	r4, r5, r4, sl
 800693e:	443d      	add	r5, r7
			weighted_sum +=
 8006940:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006944:	1936      	adds	r6, r6, r4
 8006946:	416f      	adcs	r7, r5
 8006948:	e9cd 6700 	strd	r6, r7, [sp]
 800694c:	3001      	adds	r0, #1
 800694e:	b200      	sxth	r0, r0
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 8006950:	4281      	cmp	r1, r0
 8006952:	dabe      	bge.n	80068d2 <VL53LX_f_020+0x1e>
	if (event_sum  > 0) {
 8006954:	f1b8 0f01 	cmp.w	r8, #1
 8006958:	f179 0300 	sbcs.w	r3, r9, #0
 800695c:	dbb5      	blt.n	80068ca <VL53LX_f_020+0x16>
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800695e:	e9dd 0100 	ldrd	r0, r1, [sp]
		weighted_sum += do_division_s(event_sum, 2);
 8006962:	ea5f 0569 	movs.w	r5, r9, asr #1
 8006966:	ea4f 0438 	mov.w	r4, r8, rrx
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800696a:	1900      	adds	r0, r0, r4
 800696c:	464b      	mov	r3, r9
 800696e:	4169      	adcs	r1, r5
 8006970:	4642      	mov	r2, r8
 8006972:	f7fa f921 	bl	8000bb8 <__aeabi_ldivmod>
		*pphase = (uint32_t)weighted_sum;
 8006976:	2800      	cmp	r0, #0
 8006978:	f171 0300 	sbcs.w	r3, r1, #0
 800697c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800697e:	bfb8      	it	lt
 8006980:	2000      	movlt	r0, #0
 8006982:	6018      	str	r0, [r3, #0]
 8006984:	e7a1      	b.n	80068ca <VL53LX_f_020+0x16>
	int64_t weighted_sum  = 0;
 8006986:	2400      	movs	r4, #0
 8006988:	2500      	movs	r5, #0
 800698a:	e9cd 4500 	strd	r4, r5, [sp]
	int64_t event_sum     = 0;
 800698e:	46a0      	mov	r8, r4
 8006990:	46a9      	mov	r9, r5
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 8006992:	f44f 6c00 	mov.w	ip, #2048	; 0x800
 8006996:	e7db      	b.n	8006950 <VL53LX_f_020+0x9c>

08006998 <VL53LX_f_015>:
{
 8006998:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800699c:	461e      	mov	r6, r3
	if (pdata->VL53LX_p_023 == 0xFF)
 800699e:	2324      	movs	r3, #36	; 0x24
{
 80069a0:	4690      	mov	r8, r2
	if (pdata->VL53LX_p_023 == 0xFF)
 80069a2:	fb03 6200 	mla	r2, r3, r0, r6
{
 80069a6:	460f      	mov	r7, r1
	if (pdata->VL53LX_p_023 == 0xFF)
 80069a8:	f892 117e 	ldrb.w	r1, [r2, #382]	; 0x17e
 80069ac:	29ff      	cmp	r1, #255	; 0xff
		pdata->VL53LX_p_023 = 1;
 80069ae:	bf08      	it	eq
 80069b0:	2101      	moveq	r1, #1
	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 80069b2:	fb03 6300 	mla	r3, r3, r0, r6
		pdata->VL53LX_p_023 = 1;
 80069b6:	bf08      	it	eq
 80069b8:	f882 117e 	strbeq.w	r1, [r2, #382]	; 0x17e
	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 80069bc:	f893 117e 	ldrb.w	r1, [r3, #382]	; 0x17e
 80069c0:	78f2      	ldrb	r2, [r6, #3]
 80069c2:	fbb1 f4f2 	udiv	r4, r1, r2
 80069c6:	fb02 1414 	mls	r4, r2, r4, r1
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 80069ca:	b2e4      	uxtb	r4, r4
{
 80069cc:	4605      	mov	r5, r0
 80069ce:	1a64      	subs	r4, r4, r1
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 80069d0:	f893 017c 	ldrb.w	r0, [r3, #380]	; 0x17c
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 80069d4:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 80069d8:	b2a4      	uxth	r4, r4
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 80069da:	4420      	add	r0, r4
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 80069dc:	441c      	add	r4, r3
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 80069de:	b280      	uxth	r0, r0
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 80069e0:	b2a4      	uxth	r4, r4
	window_width = VL53LX_p_013 - VL53LX_p_012;
 80069e2:	eba4 0900 	sub.w	r9, r4, r0
 80069e6:	fa0f f989 	sxth.w	r9, r9
			VL53LX_p_012 + window_width,
 80069ea:	f1b9 0f03 	cmp.w	r9, #3
 80069ee:	eb05 0ac5 	add.w	sl, r5, r5, lsl #3
 80069f2:	bfa8      	it	ge
 80069f4:	f04f 0903 	movge.w	r9, #3
 80069f8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80069fc:	fa1f f989 	uxth.w	r9, r9
		VL53LX_f_020(
 8006a00:	f50a 73c8 	add.w	r3, sl, #400	; 0x190
			VL53LX_p_012 + window_width,
 8006a04:	eb00 0109 	add.w	r1, r0, r9
		VL53LX_f_020(
 8006a08:	4433      	add	r3, r6
	status =
 8006a0a:	e9cd 8300 	strd	r8, r3, [sp]
 8006a0e:	b209      	sxth	r1, r1
 8006a10:	463b      	mov	r3, r7
 8006a12:	b200      	sxth	r0, r0
 8006a14:	f7ff ff4e 	bl	80068b4 <VL53LX_f_020>
	if (status == VL53LX_ERROR_NONE)
 8006a18:	b968      	cbnz	r0, 8006a36 <VL53LX_f_015+0x9e>
			VL53LX_f_020(
 8006a1a:	f50a 7acc 	add.w	sl, sl, #408	; 0x198
 8006a1e:	eb06 030a 	add.w	r3, r6, sl
				VL53LX_p_013 - window_width,
 8006a22:	eba4 0009 	sub.w	r0, r4, r9
		status =
 8006a26:	e9cd 8300 	strd	r8, r3, [sp]
 8006a2a:	78f2      	ldrb	r2, [r6, #3]
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	b221      	sxth	r1, r4
 8006a30:	b200      	sxth	r0, r0
 8006a32:	f7ff ff3f 	bl	80068b4 <VL53LX_f_020>
	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 8006a36:	2324      	movs	r3, #36	; 0x24
 8006a38:	fb03 6205 	mla	r2, r3, r5, r6
	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 8006a3c:	fb03 6305 	mla	r3, r3, r5, r6
	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 8006a40:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
 8006a44:	f8d2 4198 	ldr.w	r4, [r2, #408]	; 0x198
 8006a48:	42a1      	cmp	r1, r4
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 8006a4a:	bf84      	itt	hi
 8006a4c:	f8c2 4190 	strhi.w	r4, [r2, #400]	; 0x190
		pdata->VL53LX_p_027 = tmp_phase;
 8006a50:	f8c2 1198 	strhi.w	r1, [r2, #408]	; 0x198
	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 8006a54:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 8006a58:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
 8006a5c:	428a      	cmp	r2, r1
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 8006a5e:	bf38      	it	cc
 8006a60:	f8c3 2190 	strcc.w	r2, [r3, #400]	; 0x190
	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 8006a64:	2324      	movs	r3, #36	; 0x24
 8006a66:	fb03 6505 	mla	r5, r3, r5, r6
 8006a6a:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
 8006a6e:	f8d5 2198 	ldr.w	r2, [r5, #408]	; 0x198
 8006a72:	4293      	cmp	r3, r2
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 8006a74:	bf88      	it	hi
 8006a76:	f8c5 3198 	strhi.w	r3, [r5, #408]	; 0x198
}
 8006a7a:	b002      	add	sp, #8
 8006a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006a80 <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 8006a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a82:	9e06      	ldr	r6, [sp, #24]
 8006a84:	4614      	mov	r4, r2
 8006a86:	4605      	mov	r5, r0

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 8006a88:	22ac      	movs	r2, #172	; 0xac
 8006a8a:	4630      	mov	r0, r6
{
 8006a8c:	461f      	mov	r7, r3
	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 8006a8e:	f002 ff55 	bl	800993c <memcpy>
	for (lb = palgo->VL53LX_p_044;
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 8006a92:	2024      	movs	r0, #36	; 0x24
	for (lb = palgo->VL53LX_p_044;
 8006a94:	f894 2178 	ldrb.w	r2, [r4, #376]	; 0x178
		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 8006a98:	fb00 4005 	mla	r0, r0, r5, r4
		palgo->VL53LX_p_030);
 8006a9c:	78e3      	ldrb	r3, [r4, #3]
		lb < (palgo->VL53LX_p_044 +
 8006a9e:	f894 5178 	ldrb.w	r5, [r4, #376]	; 0x178
 8006aa2:	441d      	add	r5, r3
	for (lb = palgo->VL53LX_p_044;
 8006aa4:	42aa      	cmp	r2, r5
 8006aa6:	db01      	blt.n	8006aac <VL53LX_f_011+0x2c>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 8006aac:	f890 117c 	ldrb.w	r1, [r0, #380]	; 0x17c
 8006ab0:	4291      	cmp	r1, r2
 8006ab2:	d803      	bhi.n	8006abc <VL53LX_f_011+0x3c>
 8006ab4:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
 8006ab8:	4291      	cmp	r1, r2
 8006aba:	d20a      	bcs.n	8006ad2 <VL53LX_f_011+0x52>
			i =  lb % palgo->VL53LX_p_030;
 8006abc:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ac0:	fb03 2111 	mls	r1, r3, r1, r2
			if (i < ppulse->VL53LX_p_021)
 8006ac4:	7ab3      	ldrb	r3, [r6, #10]
			i =  lb % palgo->VL53LX_p_030;
 8006ac6:	b2c9      	uxtb	r1, r1
			if (i < ppulse->VL53LX_p_021)
 8006ac8:	428b      	cmp	r3, r1
				ppulse->bin_data[i] = pad_value;
 8006aca:	bf84      	itt	hi
 8006acc:	3106      	addhi	r1, #6
 8006ace:	f846 7021 	strhi.w	r7, [r6, r1, lsl #2]
		lb++) {
 8006ad2:	3201      	adds	r2, #1
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	e7e1      	b.n	8006a9c <VL53LX_f_011+0x1c>

08006ad8 <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 8006ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006adc:	b090      	sub	sp, #64	; 0x40
 8006ade:	4698      	mov	r8, r3

	VL53LX_Error status      = VL53LX_ERROR_NONE;
	VL53LX_Error func_status = VL53LX_ERROR_NONE;

	uint8_t  i    = 0;
	int32_t  VL53LX_p_007    = 0;
 8006ae0:	2300      	movs	r3, #0
{
 8006ae2:	4689      	mov	r9, r1
 8006ae4:	f89d a060 	ldrb.w	sl, [sp, #96]	; 0x60
 8006ae8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006aea:	9d1c      	ldr	r5, [sp, #112]	; 0x70
	int32_t  VL53LX_p_032    = 0;
 8006aec:	e9cd 3308 	strd	r3, r3, [sp, #32]
	int32_t  VL53LX_p_001    = 0;
	int32_t  a_zp = 0;
 8006af0:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
	int32_t  c_zp = 0;
	int32_t  ax   = 0;
 8006af4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
	int32_t  bx   = 0;
	int32_t  cx   = 0;
 8006af8:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38


	if (VL53LX_p_030 == 0) {
 8006afc:	b93a      	cbnz	r2, 8006b0e <VL53LX_f_014+0x36>
		*psigma_est = 0xFFFF;
 8006afe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b02:	802b      	strh	r3, [r5, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 8006b04:	f06f 000e 	mvn.w	r0, #14
	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
		*psigma_est = 0xFFFF;


	return status;
}
 8006b08:	b010      	add	sp, #64	; 0x40
 8006b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = bin % VL53LX_p_030;
 8006b0e:	fbb0 f4f2 	udiv	r4, r0, r2
 8006b12:	fb02 0414 	mls	r4, r2, r4, r0
 8006b16:	b2e4      	uxtb	r4, r4
	VL53LX_f_022(
 8006b18:	ab0c      	add	r3, sp, #48	; 0x30
 8006b1a:	af09      	add	r7, sp, #36	; 0x24
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006b20:	9700      	str	r7, [sp, #0]
 8006b22:	ab0b      	add	r3, sp, #44	; 0x2c
 8006b24:	4641      	mov	r1, r8
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 fae5 	bl	80070f6 <VL53LX_f_022>
	VL53LX_f_022(
 8006b2c:	ab0a      	add	r3, sp, #40	; 0x28
 8006b2e:	e9cd 7300 	strd	r7, r3, [sp]
 8006b32:	4632      	mov	r2, r6
 8006b34:	ab08      	add	r3, sp, #32
 8006b36:	4641      	mov	r1, r8
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f000 fadc 	bl	80070f6 <VL53LX_f_022>
	if (crosstalk_compensation_enable > 0)
 8006b3e:	f1ba 0f00 	cmp.w	sl, #0
 8006b42:	d009      	beq.n	8006b58 <VL53LX_f_014+0x80>
		VL53LX_f_022(
 8006b44:	ab0f      	add	r3, sp, #60	; 0x3c
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	ab0e      	add	r3, sp, #56	; 0x38
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006b4e:	ab0d      	add	r3, sp, #52	; 0x34
 8006b50:	4641      	mov	r1, r8
 8006b52:	4620      	mov	r0, r4
 8006b54:	f000 facf 	bl	80070f6 <VL53LX_f_022>
	func_status =
 8006b58:	9507      	str	r5, [sp, #28]
 8006b5a:	f8b6 3086 	ldrh.w	r3, [r6, #134]	; 0x86
 8006b5e:	9306      	str	r3, [sp, #24]
 8006b60:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 8006b64:	9305      	str	r3, [sp, #20]
 8006b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b68:	9304      	str	r3, [sp, #16]
 8006b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b6c:	9303      	str	r3, [sp, #12]
 8006b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b70:	9302      	str	r3, [sp, #8]
 8006b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b74:	9301      	str	r3, [sp, #4]
 8006b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	9908      	ldr	r1, [sp, #32]
 8006b7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b80:	4648      	mov	r0, r9
 8006b82:	f001 fb2c 	bl	80081de <VL53LX_f_023>
	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 8006b86:	300f      	adds	r0, #15
		*psigma_est = 0xFFFF;
 8006b88:	bf04      	itt	eq
 8006b8a:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8006b8e:	802b      	strheq	r3, [r5, #0]
	return status;
 8006b90:	2000      	movs	r0, #0
 8006b92:	e7b9      	b.n	8006b08 <VL53LX_f_014+0x30>

08006b94 <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 8006b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b96:	9c07      	ldr	r4, [sp, #28]
 8006b98:	e9dd c505 	ldrd	ip, r5, [sp, #20]
	uint16_t  lower_phase_limit = 0;
	uint16_t  upper_phase_limit = 0;



	pdata->range_id              = range_id;
 8006b9c:	7020      	strb	r0, [r4, #0]
	pdata->time_stamp            = 0;
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	6060      	str	r0, [r4, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 8006ba2:	782e      	ldrb	r6, [r5, #0]
 8006ba4:	7226      	strb	r6, [r4, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 8006ba6:	7868      	ldrb	r0, [r5, #1]
 8006ba8:	7260      	strb	r0, [r4, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 8006baa:	78a8      	ldrb	r0, [r5, #2]
 8006bac:	72a0      	strb	r0, [r4, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 8006bae:	78e8      	ldrb	r0, [r5, #3]
 8006bb0:	72e0      	strb	r0, [r4, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 8006bb2:	7928      	ldrb	r0, [r5, #4]
 8006bb4:	7320      	strb	r0, [r4, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 8006bb6:	3001      	adds	r0, #1
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 8006bb8:	796f      	ldrb	r7, [r5, #5]
 8006bba:	7367      	strb	r7, [r4, #13]
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 8006bbc:	1b80      	subs	r0, r0, r6
	pdata->VL53LX_p_029  =
 8006bbe:	7420      	strb	r0, [r4, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 8006bc0:	696e      	ldr	r6, [r5, #20]
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 8006bc2:	69ef      	ldr	r7, [r5, #28]
	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 8006bc4:	f8bc 009c 	ldrh.w	r0, [ip, #156]	; 0x9c
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 8006bc8:	f8b5 e020 	ldrh.w	lr, [r5, #32]
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 8006bcc:	87e6      	strh	r6, [r4, #62]	; 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 8006bce:	8b2e      	ldrh	r6, [r5, #24]
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 8006bd0:	f8a4 7042 	strh.w	r7, [r4, #66]	; 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 8006bd4:	68ef      	ldr	r7, [r5, #12]
 8006bd6:	62a7      	str	r7, [r4, #40]	; 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 8006bd8:	692f      	ldr	r7, [r5, #16]
	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 8006bda:	82a0      	strh	r0, [r4, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 8006bdc:	f8a4 e03c 	strh.w	lr, [r4, #60]	; 0x3c
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 8006be0:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 8006be4:	62e7      	str	r7, [r4, #44]	; 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 8006be6:	68ad      	ldr	r5, [r5, #8]
 8006be8:	6265      	str	r5, [r4, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 8006bea:	f8dc 5088 	ldr.w	r5, [ip, #136]	; 0x88
 8006bee:	61a5      	str	r5, [r4, #24]


	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;


	if (sigma_thres > 0 &&
 8006bf0:	b993      	cbnz	r3, 8006c18 <VL53LX_f_017+0x84>
	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8006bf2:	2313      	movs	r3, #19
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 8006bf4:	0209      	lsls	r1, r1, #8
	if (lower_phase_limit < pdata->zero_distance_phase)
 8006bf6:	4288      	cmp	r0, r1
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 8006bf8:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (lower_phase_limit < pdata->zero_distance_phase)
 8006bfc:	d903      	bls.n	8006c06 <VL53LX_f_017+0x72>
		lower_phase_limit =
 8006bfe:	1a41      	subs	r1, r0, r1
		lower_phase_limit  = 0;

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
	upper_phase_limit += pbins->zero_distance_phase;

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 8006c00:	b289      	uxth	r1, r1
 8006c02:	428e      	cmp	r6, r1
 8006c04:	d304      	bcc.n	8006c10 <VL53LX_f_017+0x7c>
	upper_phase_limit += pbins->zero_distance_phase;
 8006c06:	eb00 2002 	add.w	r0, r0, r2, lsl #8
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 8006c0a:	b280      	uxth	r0, r0
 8006c0c:	4286      	cmp	r6, r0
 8006c0e:	d902      	bls.n	8006c16 <VL53LX_f_017+0x82>
		pdata->VL53LX_p_011 > upper_phase_limit)
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 8006c10:	2305      	movs	r3, #5
 8006c12:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a

}
 8006c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sigma_thres > 0 &&
 8006c18:	ebbe 1f43 	cmp.w	lr, r3, lsl #5
 8006c1c:	d9e9      	bls.n	8006bf2 <VL53LX_f_017+0x5e>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 8006c1e:	2306      	movs	r3, #6
 8006c20:	e7e8      	b.n	8006bf4 <VL53LX_f_017+0x60>

08006c22 <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 8006c22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	461f      	mov	r7, r3

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);

	uint8_t  lb     = 0;
	uint8_t  i     = 0;
	int32_t  suma  = 0;
 8006c2a:	2300      	movs	r3, #0
	int32_t  sumb  = 0;
 8006c2c:	e9cd 3303 	strd	r3, r3, [sp, #12]
	int32_t  sumc  = 0;
 8006c30:	9305      	str	r3, [sp, #20]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 8006c32:	7853      	ldrb	r3, [r2, #1]
 8006c34:	707b      	strb	r3, [r7, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 8006c36:	7813      	ldrb	r3, [r2, #0]
 8006c38:	703b      	strb	r3, [r7, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 8006c3a:	2524      	movs	r5, #36	; 0x24
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 8006c3c:	7893      	ldrb	r3, [r2, #2]
 8006c3e:	70bb      	strb	r3, [r7, #2]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 8006c40:	fb05 2500 	mla	r5, r5, r0, r2
{
 8006c44:	4688      	mov	r8, r1
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 8006c46:	f895 417c 	ldrb.w	r4, [r5, #380]	; 0x17c
{
 8006c4a:	4616      	mov	r6, r2

		i =  lb  % palgo3->VL53LX_p_030;


		VL53LX_f_022(
 8006c4c:	f10d 0914 	add.w	r9, sp, #20
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 8006c50:	f895 3180 	ldrb.w	r3, [r5, #384]	; 0x180
 8006c54:	42a3      	cmp	r3, r4
 8006c56:	d203      	bcs.n	8006c60 <VL53LX_f_026+0x3e>
			(sumb + sumc) -
			(suma + palgo3->VL53LX_p_028);
	}

	return status;
}
 8006c58:	2000      	movs	r0, #0
 8006c5a:	b006      	add	sp, #24
 8006c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i =  lb  % palgo3->VL53LX_p_030;
 8006c60:	f896 a003 	ldrb.w	sl, [r6, #3]
 8006c64:	fbb4 f3fa 	udiv	r3, r4, sl
 8006c68:	fb0a 4313 	mls	r3, sl, r3, r4
 8006c6c:	fa5f fa83 	uxtb.w	sl, r3
		VL53LX_f_022(
 8006c70:	ab04      	add	r3, sp, #16
 8006c72:	f895 1182 	ldrb.w	r1, [r5, #386]	; 0x182
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	4650      	mov	r0, sl
 8006c7a:	ab03      	add	r3, sp, #12
 8006c7c:	4642      	mov	r2, r8
 8006c7e:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c82:	f000 fa38 	bl	80070f6 <VL53LX_f_022>
 8006c86:	eb07 038a 	add.w	r3, r7, sl, lsl #2
		pfiltered->VL53LX_p_007[i] = suma;
 8006c8a:	f8dd e00c 	ldr.w	lr, [sp, #12]
			(sumc + palgo3->VL53LX_p_028);
 8006c8e:	f8d6 a008 	ldr.w	sl, [r6, #8]
		pfiltered->VL53LX_p_032[i] = sumb;
 8006c92:	9a04      	ldr	r2, [sp, #16]
		pfiltered->VL53LX_p_001[i] = sumc;
 8006c94:	9805      	ldr	r0, [sp, #20]
		pfiltered->VL53LX_p_032[i] = sumb;
 8006c96:	665a      	str	r2, [r3, #100]	; 0x64
			(suma + sumb) -
 8006c98:	eb0e 0c02 	add.w	ip, lr, r2
			(sumc + palgo3->VL53LX_p_028);
 8006c9c:	eb00 010a 	add.w	r1, r0, sl
			(suma + sumb) -
 8006ca0:	ebac 0101 	sub.w	r1, ip, r1
		pfiltered->VL53LX_p_053[i] =
 8006ca4:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
			(sumb + sumc) -
 8006ca8:	4402      	add	r2, r0
			(suma + palgo3->VL53LX_p_028);
 8006caa:	eb0e 010a 	add.w	r1, lr, sl
			(sumb + sumc) -
 8006cae:	1a52      	subs	r2, r2, r1
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 8006cb0:	3401      	adds	r4, #1
		pfiltered->VL53LX_p_007[i] = suma;
 8006cb2:	f8c3 e004 	str.w	lr, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 8006cb6:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
		pfiltered->VL53LX_p_054[i] =
 8006cba:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 8006cbe:	b2e4      	uxtb	r4, r4
 8006cc0:	e7c6      	b.n	8006c50 <VL53LX_f_026+0x2e>

08006cc2 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 8006cc2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
	int64_t  half_b_minus_amb = 0;


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 8006cc6:	461c      	mov	r4, r3
 8006cc8:	17dd      	asrs	r5, r3, #31
 8006cca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ccc:	1ae7      	subs	r7, r4, r3
 8006cce:	eb65 78e3 	sbc.w	r8, r5, r3, asr #31
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 8006cd2:	1a7c      	subs	r4, r7, r1
 8006cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd6:	eb68 75e1 	sbc.w	r5, r8, r1, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 8006cda:	990b      	ldr	r1, [sp, #44]	; 0x2c
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 8006cdc:	ebb4 0a03 	subs.w	sl, r4, r3
 8006ce0:	eb65 7be3 	sbc.w	fp, r5, r3, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 8006ce4:	17d5      	asrs	r5, r2, #31
 8006ce6:	1a52      	subs	r2, r2, r1
 8006ce8:	eb65 73e1 	sbc.w	r3, r5, r1, asr #31
		(int64_t)bx - (int64_t)VL53LX_p_028);
 8006cec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006cee:	ebb2 0801 	subs.w	r8, r2, r1
 8006cf2:	eb63 79e1 	sbc.w	r9, r3, r1, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 8006cf6:	ea4f 3509 	mov.w	r5, r9, lsl #12
 8006cfa:	ea45 5518 	orr.w	r5, r5, r8, lsr #20
 8006cfe:	ea4f 3408 	mov.w	r4, r8, lsl #12
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 8006d02:	ea4f 370b 	mov.w	r7, fp, lsl #12

	if (half_b_minus_amb != 0) {
 8006d06:	ea54 0305 	orrs.w	r3, r4, r5
{
 8006d0a:	4606      	mov	r6, r0
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 8006d0c:	ea47 571a 	orr.w	r7, r7, sl, lsr #20
 8006d10:	ea4f 3c0a 	mov.w	ip, sl, lsl #12
	if (half_b_minus_amb != 0) {
 8006d14:	d043      	beq.n	8006d9e <VL53LX_f_028+0xdc>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 8006d16:	1922      	adds	r2, r4, r4
		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 8006d18:	ea4f 3907 	mov.w	r9, r7, lsl #12
 8006d1c:	ea4f 680a 	mov.w	r8, sl, lsl #24
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 8006d20:	eb45 0305 	adc.w	r3, r5, r5
		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 8006d24:	ea49 591c 	orr.w	r9, r9, ip, lsr #20
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 8006d28:	eb14 0008 	adds.w	r0, r4, r8
 8006d2c:	eb45 0109 	adc.w	r1, r5, r9
 8006d30:	f7f9 ff42 	bl	8000bb8 <__aeabi_ldivmod>

		mean_phase  +=  2048;
		mean_phase  += (4096 * (int64_t)bin);
 8006d34:	b2f6      	uxtb	r6, r6
		mean_phase  +=  2048;
 8006d36:	f510 6400 	adds.w	r4, r0, #2048	; 0x800
		mean_phase  += (4096 * (int64_t)bin);
 8006d3a:	ea4f 3006 	mov.w	r0, r6, lsl #12
		mean_phase  +=  2048;
 8006d3e:	f141 0500 	adc.w	r5, r1, #0
		mean_phase  += (4096 * (int64_t)bin);
 8006d42:	1902      	adds	r2, r0, r4
 8006d44:	ea4f 5116 	mov.w	r1, r6, lsr #20
 8006d48:	eb41 0305 	adc.w	r3, r1, r5


		mean_phase  = do_division_s((mean_phase + 1), 2);
 8006d4c:	1c54      	adds	r4, r2, #1
 8006d4e:	f143 0500 	adc.w	r5, r3, #0
 8006d52:	0fe9      	lsrs	r1, r5, #31
 8006d54:	1862      	adds	r2, r4, r1
 8006d56:	f145 0300 	adc.w	r3, r5, #0
 8006d5a:	105b      	asrs	r3, r3, #1
 8006d5c:	ea4f 0232 	mov.w	r2, r2, rrx
 8006d60:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006d64:	4290      	cmp	r0, r2
 8006d66:	f04f 0100 	mov.w	r1, #0
 8006d6a:	eb71 0403 	sbcs.w	r4, r1, r3
 8006d6e:	bfbc      	itt	lt
 8006d70:	4602      	movlt	r2, r0
 8006d72:	460b      	movlt	r3, r1
			mean_phase = 0;
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;


		mean_phase32 = (int32_t)mean_phase;
 8006d74:	461d      	mov	r5, r3
 8006d76:	2a00      	cmp	r2, #0
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 8006d78:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		mean_phase32 = (int32_t)mean_phase;
 8006d7c:	f175 0300 	sbcs.w	r3, r5, #0
 8006d80:	4614      	mov	r4, r2
			((int32_t)VL53LX_p_030 * 2048);
 8006d82:	ea4f 21c1 	mov.w	r1, r1, lsl #11
		mean_phase32 = (int32_t)mean_phase;
 8006d86:	bfb8      	it	lt
 8006d88:	2400      	movlt	r4, #0
		mean_phase32 = mean_phase32 %
 8006d8a:	fb94 f3f1 	sdiv	r3, r4, r1
 8006d8e:	fb01 4213 	mls	r2, r1, r3, r4
		mean_phase = mean_phase32;
 8006d92:	4611      	mov	r1, r2

		status = VL53LX_ERROR_NONE;
 8006d94:	2000      	movs	r0, #0

	}

	*pmean_phase = (uint32_t)mean_phase;
 8006d96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d98:	6019      	str	r1, [r3, #0]

	return status;
}
 8006d9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 8006d9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8006da2:	f06f 000e 	mvn.w	r0, #14
 8006da6:	e7f6      	b.n	8006d96 <VL53LX_f_028+0xd4>

08006da8 <VL53LX_f_027>:
{
 8006da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 8006dac:	2524      	movs	r5, #36	; 0x24
 8006dae:	fb05 3600 	mla	r6, r5, r0, r3
{
 8006db2:	b089      	sub	sp, #36	; 0x24
 8006db4:	461f      	mov	r7, r3
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 8006db6:	f896 c17c 	ldrb.w	ip, [r6, #380]	; 0x17c
					VL53LX_f_028(
 8006dba:	f506 73ca 	add.w	r3, r6, #404	; 0x194
{
 8006dbe:	4691      	mov	r9, r2
					VL53LX_f_028(
 8006dc0:	9307      	str	r3, [sp, #28]
				func_status =
 8006dc2:	f04f 0800 	mov.w	r8, #0
				pfiltered->VL53LX_p_040[i] = 1;
 8006dc6:	f04f 0b01 	mov.w	fp, #1
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 8006dca:	f896 3180 	ldrb.w	r3, [r6, #384]	; 0x180
 8006dce:	4563      	cmp	r3, ip
 8006dd0:	d803      	bhi.n	8006dda <VL53LX_f_027+0x32>
}
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	b009      	add	sp, #36	; 0x24
 8006dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		i =  lb    % palgo3->VL53LX_p_030;
 8006dda:	78f8      	ldrb	r0, [r7, #3]
		if (i < palgo3->VL53LX_p_021 &&
 8006ddc:	78ba      	ldrb	r2, [r7, #2]
		i =  lb    % palgo3->VL53LX_p_030;
 8006dde:	fbbc f4f0 	udiv	r4, ip, r0
 8006de2:	fb00 c414 	mls	r4, r0, r4, ip
 8006de6:	b2e4      	uxtb	r4, r4
		if (i < palgo3->VL53LX_p_021 &&
 8006de8:	42a2      	cmp	r2, r4
 8006dea:	f10c 0a01 	add.w	sl, ip, #1
 8006dee:	d92a      	bls.n	8006e46 <VL53LX_f_027+0x9e>
		j = (lb+1) % palgo3->VL53LX_p_030;
 8006df0:	fb9a f3f0 	sdiv	r3, sl, r0
 8006df4:	fb00 a313 	mls	r3, r0, r3, sl
		if (i < palgo3->VL53LX_p_021 &&
 8006df8:	b2d9      	uxtb	r1, r3
 8006dfa:	428a      	cmp	r2, r1
 8006dfc:	d923      	bls.n	8006e46 <VL53LX_f_027+0x9e>
 8006dfe:	eb09 0184 	add.w	r1, r9, r4, lsl #2
 8006e02:	444c      	add	r4, r9
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 8006e04:	f8d1 5124 	ldr.w	r5, [r1, #292]	; 0x124
 8006e08:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
 8006e0c:	2d00      	cmp	r5, #0
 8006e0e:	d11d      	bne.n	8006e4c <VL53LX_f_027+0xa4>
 8006e10:	b9ea      	cbnz	r2, 8006e4e <VL53LX_f_027+0xa6>
				pfiltered->VL53LX_p_040[i] = 0;
 8006e12:	f884 21e4 	strb.w	r2, [r4, #484]	; 0x1e4
			if (pfiltered->VL53LX_p_040[i] > 0) {
 8006e16:	f894 31e4 	ldrb.w	r3, [r4, #484]	; 0x1e4
 8006e1a:	b1a3      	cbz	r3, 8006e46 <VL53LX_f_027+0x9e>
				func_status =
 8006e1c:	9b07      	ldr	r3, [sp, #28]
				pdata->VL53LX_p_023 = lb;
 8006e1e:	f886 c17e 	strb.w	ip, [r6, #382]	; 0x17e
				func_status =
 8006e22:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	e9cd 8800 	strd	r8, r8, [sp]
 8006e2c:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8006e30:	4660      	mov	r0, ip
 8006e32:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
 8006e36:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 8006e38:	6849      	ldr	r1, [r1, #4]
 8006e3a:	f7ff ff42 	bl	8006cc2 <VL53LX_f_028>
				if (func_status ==
 8006e3e:	300f      	adds	r0, #15
					pfiltered->VL53LX_p_040[i] = 0;
 8006e40:	bf08      	it	eq
 8006e42:	f884 81e4 	strbeq.w	r8, [r4, #484]	; 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 8006e46:	fa5f fc8a 	uxtb.w	ip, sl
 8006e4a:	e7be      	b.n	8006dca <VL53LX_f_027+0x22>
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 8006e4c:	db04      	blt.n	8006e58 <VL53LX_f_027+0xb0>
 8006e4e:	2a00      	cmp	r2, #0
 8006e50:	db0e      	blt.n	8006e70 <VL53LX_f_027+0xc8>
				pfiltered->VL53LX_p_040[i] = 1;
 8006e52:	f884 b1e4 	strb.w	fp, [r4, #484]	; 0x1e4
 8006e56:	e7de      	b.n	8006e16 <VL53LX_f_027+0x6e>
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 8006e58:	2a00      	cmp	r2, #0
 8006e5a:	db09      	blt.n	8006e70 <VL53LX_f_027+0xc8>
 8006e5c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 8006e60:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8006e64:	2a00      	cmp	r2, #0
 8006e66:	db03      	blt.n	8006e70 <VL53LX_f_027+0xc8>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 8006e68:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	dbf0      	blt.n	8006e52 <VL53LX_f_027+0xaa>
				pfiltered->VL53LX_p_040[i] = 0;
 8006e70:	f884 81e4 	strb.w	r8, [r4, #484]	; 0x1e4
 8006e74:	e7cf      	b.n	8006e16 <VL53LX_f_027+0x6e>

08006e76 <VL53LX_f_025>:
{
 8006e76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7a:	b089      	sub	sp, #36	; 0x24
 8006e7c:	4698      	mov	r8, r3
 8006e7e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006e80:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8006e84:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8006e86:	9307      	str	r3, [sp, #28]
		&(palgo3->VL53LX_p_006),
 8006e88:	f504 7727 	add.w	r7, r4, #668	; 0x29c
{
 8006e8c:	4682      	mov	sl, r0
	VL53LX_f_003(palgo3);
 8006e8e:	4620      	mov	r0, r4
{
 8006e90:	4615      	mov	r5, r2
 8006e92:	4689      	mov	r9, r1
	VL53LX_f_003(palgo3);
 8006e94:	f7ff fac5 	bl	8006422 <VL53LX_f_003>
	memcpy(
 8006e98:	22ac      	movs	r2, #172	; 0xac
 8006e9a:	4641      	mov	r1, r8
 8006e9c:	4638      	mov	r0, r7
 8006e9e:	f002 fd4d 	bl	800993c <memcpy>
	presults->cfg_device_state = pbins_input->cfg_device_state;
 8006ea2:	f898 3000 	ldrb.w	r3, [r8]
 8006ea6:	7033      	strb	r3, [r6, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 8006ea8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006eac:	7073      	strb	r3, [r6, #1]
	presults->zone_id          = pbins_input->zone_id;
 8006eae:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006eb2:	70b3      	strb	r3, [r6, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 8006eb4:	f898 307b 	ldrb.w	r3, [r8, #123]	; 0x7b
 8006eb8:	70f3      	strb	r3, [r6, #3]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 8006eba:	2304      	movs	r3, #4
 8006ebc:	7473      	strb	r3, [r6, #17]
	presults->active_results   = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	74b3      	strb	r3, [r6, #18]
		presults->VL53LX_p_022[p] = 0;
 8006ec2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8006ec6:	60f3      	str	r3, [r6, #12]
	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 8006ec8:	4638      	mov	r0, r7
 8006eca:	f7fe ffb8 	bl	8005e3e <VL53LX_hist_calc_zero_distance_phase>
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 8006ece:	4639      	mov	r1, r7
 8006ed0:	7968      	ldrb	r0, [r5, #5]
 8006ed2:	f7ff f933 	bl	800613c <VL53LX_hist_estimate_ambient_from_thresholded_bins>
	VL53LX_hist_estimate_ambient_from_ambient_bins(
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	f7ff f964 	bl	80061a4 <VL53LX_hist_estimate_ambient_from_ambient_bins>
	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 8006edc:	4638      	mov	r0, r7
 8006ede:	f7fe ffc8 	bl	8005e72 <VL53LX_hist_remove_ambient_bins>
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8006ee2:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8006ee6:	b12b      	cbz	r3, 8006ef4 <VL53LX_f_025+0x7e>
		VL53LX_f_005(
 8006ee8:	f504 7252 	add.w	r2, r4, #840	; 0x348
 8006eec:	4639      	mov	r1, r7
 8006eee:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006ef0:	f000 f9c1 	bl	8007276 <VL53LX_f_005>
	pdmax_cfg->ambient_thresh_sigma =
 8006ef4:	79ab      	ldrb	r3, [r5, #6]
 8006ef6:	f889 3001 	strb.w	r3, [r9, #1]
 8006efa:	f04f 0800 	mov.w	r8, #0
	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 8006efe:	4643      	mov	r3, r8
			status =
 8006f00:	f106 0b04 	add.w	fp, r6, #4
		if (status == VL53LX_ERROR_NONE) {
 8006f04:	b96b      	cbnz	r3, 8006f22 <VL53LX_f_025+0xac>
			VL53LX_f_001(
 8006f06:	eb09 0308 	add.w	r3, r9, r8
			status =
 8006f0a:	464a      	mov	r2, r9
 8006f0c:	8998      	ldrh	r0, [r3, #12]
 8006f0e:	eb0b 0308 	add.w	r3, fp, r8
 8006f12:	9301      	str	r3, [sp, #4]
 8006f14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	4651      	mov	r1, sl
 8006f1a:	463b      	mov	r3, r7
 8006f1c:	f7ff f973 	bl	8006206 <VL53LX_f_001>
 8006f20:	4603      	mov	r3, r0
 8006f22:	f108 0802 	add.w	r8, r8, #2
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 8006f26:	f1b8 0f0a 	cmp.w	r8, #10
 8006f2a:	d1eb      	bne.n	8006f04 <VL53LX_f_025+0x8e>
	if (status == VL53LX_ERROR_NONE)
 8006f2c:	b9e3      	cbnz	r3, 8006f68 <VL53LX_f_025+0xf2>
			VL53LX_f_006(
 8006f2e:	f504 7252 	add.w	r2, r4, #840	; 0x348
 8006f32:	f899 1001 	ldrb.w	r1, [r9, #1]
		status =
 8006f36:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8006f3a:	8928      	ldrh	r0, [r5, #8]
 8006f3c:	9402      	str	r4, [sp, #8]
 8006f3e:	e9cd 7200 	strd	r7, r2, [sp]
 8006f42:	68ea      	ldr	r2, [r5, #12]
 8006f44:	f7ff faac 	bl	80064a0 <VL53LX_f_006>
	if (status == VL53LX_ERROR_NONE)
 8006f48:	4603      	mov	r3, r0
 8006f4a:	b968      	cbnz	r0, 8006f68 <VL53LX_f_025+0xf2>
		status =
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f7ff fb2a 	bl	80065a6 <VL53LX_f_007>
	if (status == VL53LX_ERROR_NONE)
 8006f52:	4603      	mov	r3, r0
 8006f54:	b940      	cbnz	r0, 8006f68 <VL53LX_f_025+0xf2>
		status =
 8006f56:	4620      	mov	r0, r4
 8006f58:	f7ff fb4c 	bl	80065f4 <VL53LX_f_008>
	if (status == VL53LX_ERROR_NONE)
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	b918      	cbnz	r0, 8006f68 <VL53LX_f_025+0xf2>
		status =
 8006f60:	4620      	mov	r0, r4
 8006f62:	f7ff fb81 	bl	8006668 <VL53LX_f_009>
 8006f66:	4603      	mov	r3, r0
				VL53LX_f_011(
 8006f68:	f504 6294 	add.w	r2, r4, #1184	; 0x4a0
	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 8006f6c:	f04f 0900 	mov.w	r9, #0
				VL53LX_f_011(
 8006f70:	f504 7a7d 	add.w	sl, r4, #1012	; 0x3f4
				VL53LX_f_011(
 8006f74:	9206      	str	r2, [sp, #24]
				VL53LX_f_011(
 8006f76:	f204 5b4c 	addw	fp, r4, #1356	; 0x54c
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 8006f7a:	f894 217a 	ldrb.w	r2, [r4, #378]	; 0x17a
 8006f7e:	fa5f f889 	uxtb.w	r8, r9
 8006f82:	4542      	cmp	r2, r8
 8006f84:	d815      	bhi.n	8006fb2 <VL53LX_f_025+0x13c>
	if (status == VL53LX_ERROR_NONE)
 8006f86:	b923      	cbnz	r3, 8006f92 <VL53LX_f_025+0x11c>
		status =
 8006f88:	4621      	mov	r1, r4
 8006f8a:	7868      	ldrb	r0, [r5, #1]
 8006f8c:	f7ff fbd2 	bl	8006734 <VL53LX_f_016>
 8006f90:	4603      	mov	r3, r0
	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 8006f92:	f04f 0900 	mov.w	r9, #0
			prange_data =
 8006f96:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
 8006f9a:	f04f 0b14 	mov.w	fp, #20
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 8006f9e:	f894 117a 	ldrb.w	r1, [r4, #378]	; 0x17a
 8006fa2:	fa5f f289 	uxtb.w	r2, r9
 8006fa6:	4291      	cmp	r1, r2
 8006fa8:	d864      	bhi.n	8007074 <VL53LX_f_025+0x1fe>
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	b009      	add	sp, #36	; 0x24
 8006fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (status == VL53LX_ERROR_NONE)
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d15b      	bne.n	800706e <VL53LX_f_025+0x1f8>
			status =
 8006fb6:	4622      	mov	r2, r4
 8006fb8:	4639      	mov	r1, r7
 8006fba:	4640      	mov	r0, r8
 8006fbc:	f7ff fc4d 	bl	800685a <VL53LX_f_010>
		if (status == VL53LX_ERROR_NONE)
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	d153      	bne.n	800706e <VL53LX_f_025+0x1f8>
			status =
 8006fc6:	f8cd a000 	str.w	sl, [sp]
 8006fca:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8006fce:	4622      	mov	r2, r4
 8006fd0:	4639      	mov	r1, r7
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	f7ff fd54 	bl	8006a80 <VL53LX_f_011>
		if (status == VL53LX_ERROR_NONE) {
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d147      	bne.n	800706e <VL53LX_f_025+0x1f8>
			status =
 8006fde:	9a06      	ldr	r2, [sp, #24]
 8006fe0:	9200      	str	r2, [sp, #0]
 8006fe2:	4639      	mov	r1, r7
 8006fe4:	4622      	mov	r2, r4
 8006fe6:	4640      	mov	r0, r8
 8006fe8:	f7ff fd4a 	bl	8006a80 <VL53LX_f_011>
		if (status == VL53LX_ERROR_NONE) {
 8006fec:	4603      	mov	r3, r0
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d13d      	bne.n	800706e <VL53LX_f_025+0x1f8>
			status =
 8006ff2:	f8cd b000 	str.w	fp, [sp]
 8006ff6:	4622      	mov	r2, r4
 8006ff8:	f504 7152 	add.w	r1, r4, #840	; 0x348
 8006ffc:	4640      	mov	r0, r8
 8006ffe:	f7ff fd3f 	bl	8006a80 <VL53LX_f_011>
		if (status == VL53LX_ERROR_NONE)
 8007002:	4603      	mov	r3, r0
 8007004:	bb98      	cbnz	r0, 800706e <VL53LX_f_025+0x1f8>
			status =
 8007006:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007008:	4622      	mov	r2, r4
 800700a:	4651      	mov	r1, sl
 800700c:	4640      	mov	r0, r8
 800700e:	f7ff fe08 	bl	8006c22 <VL53LX_f_026>
		if (status == VL53LX_ERROR_NONE)
 8007012:	4603      	mov	r3, r0
 8007014:	bb58      	cbnz	r0, 800706e <VL53LX_f_025+0x1f8>
			status =
 8007016:	4623      	mov	r3, r4
 8007018:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800701a:	8a29      	ldrh	r1, [r5, #16]
 800701c:	4640      	mov	r0, r8
 800701e:	f7ff fec3 	bl	8006da8 <VL53LX_f_027>
		if (status == VL53LX_ERROR_NONE)
 8007022:	4603      	mov	r3, r0
 8007024:	bb18      	cbnz	r0, 800706e <VL53LX_f_025+0x1f8>
			VL53LX_f_014(
 8007026:	f04f 0c24 	mov.w	ip, #36	; 0x24
 800702a:	fb0c fc08 	mul.w	ip, ip, r8
 800702e:	eb04 000c 	add.w	r0, r4, ip
 8007032:	f50c 7cce 	add.w	ip, ip, #412	; 0x19c
			status =
 8007036:	f890 e182 	ldrb.w	lr, [r0, #386]	; 0x182
 800703a:	9b06      	ldr	r3, [sp, #24]
 800703c:	78e2      	ldrb	r2, [r4, #3]
 800703e:	f890 017e 	ldrb.w	r0, [r0, #382]	; 0x17e
 8007042:	7e29      	ldrb	r1, [r5, #24]
			VL53LX_f_014(
 8007044:	44a4      	add	ip, r4
			status =
 8007046:	e9cd bc03 	strd	fp, ip, [sp, #12]
 800704a:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
 800704e:	f8cd c000 	str.w	ip, [sp]
 8007052:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007056:	4673      	mov	r3, lr
 8007058:	f7ff fd3e 	bl	8006ad8 <VL53LX_f_014>
		if (status == VL53LX_ERROR_NONE)
 800705c:	4603      	mov	r3, r0
 800705e:	b930      	cbnz	r0, 800706e <VL53LX_f_025+0x1f8>
			status =
 8007060:	4623      	mov	r3, r4
 8007062:	463a      	mov	r2, r7
 8007064:	2101      	movs	r1, #1
 8007066:	4640      	mov	r0, r8
 8007068:	f7ff fc96 	bl	8006998 <VL53LX_f_015>
 800706c:	4603      	mov	r3, r0
 800706e:	f109 0901 	add.w	r9, r9, #1
 8007072:	e782      	b.n	8006f7a <VL53LX_f_025+0x104>
		if (!(presults->active_results < presults->max_results))
 8007074:	7cb0      	ldrb	r0, [r6, #18]
 8007076:	7c71      	ldrb	r1, [r6, #17]
 8007078:	4281      	cmp	r1, r0
 800707a:	d939      	bls.n	80070f0 <VL53LX_f_025+0x27a>
		if (ppulse_data->VL53LX_p_010 >
 800707c:	2124      	movs	r1, #36	; 0x24
 800707e:	fb01 fc02 	mul.w	ip, r1, r2
 8007082:	eb04 0e0c 	add.w	lr, r4, ip
 8007086:	696a      	ldr	r2, [r5, #20]
 8007088:	f8de 118c 	ldr.w	r1, [lr, #396]	; 0x18c
 800708c:	4291      	cmp	r1, r2
 800708e:	dd2f      	ble.n	80070f0 <VL53LX_f_025+0x27a>
			ppost_cfg->signal_total_events_limit &&
 8007090:	f89e 217e 	ldrb.w	r2, [lr, #382]	; 0x17e
 8007094:	2aff      	cmp	r2, #255	; 0xff
 8007096:	d02b      	beq.n	80070f0 <VL53LX_f_025+0x27a>
			if (status == VL53LX_ERROR_NONE)
 8007098:	bb3b      	cbnz	r3, 80070ea <VL53LX_f_025+0x274>
			prange_data =
 800709a:	fb1a b800 	smlabb	r8, sl, r0, fp
		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800709e:	f50c 7cbe 	add.w	ip, ip, #380	; 0x17c
 80070a2:	44a4      	add	ip, r4
			prange_data =
 80070a4:	44b0      	add	r8, r6
				VL53LX_f_017(
 80070a6:	8b6b      	ldrh	r3, [r5, #26]
 80070a8:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 80070ac:	f895 1020 	ldrb.w	r1, [r5, #32]
 80070b0:	f8cd 8008 	str.w	r8, [sp, #8]
 80070b4:	e9cd 7c00 	strd	r7, ip, [sp]
 80070b8:	f7ff fd6c 	bl	8006b94 <VL53LX_f_017>
				status =
 80070bc:	9a07      	ldr	r2, [sp, #28]
 80070be:	f8b4 3318 	ldrh.w	r3, [r4, #792]	; 0x318
 80070c2:	f8b4 1322 	ldrh.w	r1, [r4, #802]	; 0x322
 80070c6:	f8b4 031e 	ldrh.w	r0, [r4, #798]	; 0x31e
 80070ca:	e9cd 8200 	strd	r8, r2, [sp]
 80070ce:	f8d4 2324 	ldr.w	r2, [r4, #804]	; 0x324
 80070d2:	f000 f841 	bl	8007158 <VL53LX_f_018>
			if (status == VL53LX_ERROR_NONE)
 80070d6:	4603      	mov	r3, r0
 80070d8:	b938      	cbnz	r0, 80070ea <VL53LX_f_025+0x274>
 80070da:	9006      	str	r0, [sp, #24]
				VL53LX_f_019(
 80070dc:	4642      	mov	r2, r8
 80070de:	f9b5 101c 	ldrsh.w	r1, [r5, #28]
 80070e2:	8be8      	ldrh	r0, [r5, #30]
 80070e4:	f000 f87f 	bl	80071e6 <VL53LX_f_019>
 80070e8:	9b06      	ldr	r3, [sp, #24]
			presults->active_results++;
 80070ea:	7cb2      	ldrb	r2, [r6, #18]
 80070ec:	3201      	adds	r2, #1
 80070ee:	74b2      	strb	r2, [r6, #18]
 80070f0:	f109 0901 	add.w	r9, r9, #1
 80070f4:	e753      	b.n	8006f9e <VL53LX_f_025+0x128>

080070f6 <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 80070f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


	uint8_t w = 0;
	uint8_t j = 0;

	*pa = 0;
 80070fa:	2500      	movs	r5, #0
	*pb = pbins->bin_data[VL53LX_p_032];
 80070fc:	1d84      	adds	r4, r0, #6
	*pa = 0;
 80070fe:	601d      	str	r5, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 8007100:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
{
 8007104:	9e07      	ldr	r6, [sp, #28]
	*pb = pbins->bin_data[VL53LX_p_032];
 8007106:	9c06      	ldr	r4, [sp, #24]
	*pc = 0;

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8007108:	ea4f 0c41 	mov.w	ip, r1, lsl #1
	*pb = pbins->bin_data[VL53LX_p_032];
 800710c:	6027      	str	r7, [r4, #0]
	*pc = 0;
 800710e:	6035      	str	r5, [r6, #0]
 8007110:	fa5f fe85 	uxtb.w	lr, r5
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8007114:	45f4      	cmp	ip, lr
 8007116:	da01      	bge.n	800711c <VL53LX_f_022+0x26>
		if (w < filter_woi)
			*pa += pbins->bin_data[j];
		else if (w > filter_woi)
			*pc += pbins->bin_data[j];
	}
}
 8007118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800711c:	f892 800a 	ldrb.w	r8, [r2, #10]
 8007120:	eb00 040e 	add.w	r4, r0, lr
 8007124:	4444      	add	r4, r8
 8007126:	1a67      	subs	r7, r4, r1
		if (w < filter_woi)
 8007128:	458e      	cmp	lr, r1
			filter_woi) % pbins->VL53LX_p_021;
 800712a:	fb97 f4f8 	sdiv	r4, r7, r8
 800712e:	fb08 7414 	mls	r4, r8, r4, r7
		if (w < filter_woi)
 8007132:	d208      	bcs.n	8007146 <VL53LX_f_022+0x50>
			*pa += pbins->bin_data[j];
 8007134:	b2e4      	uxtb	r4, r4
 8007136:	3406      	adds	r4, #6
 8007138:	681f      	ldr	r7, [r3, #0]
 800713a:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 800713e:	4427      	add	r7, r4
 8007140:	601f      	str	r7, [r3, #0]
 8007142:	3501      	adds	r5, #1
 8007144:	e7e4      	b.n	8007110 <VL53LX_f_022+0x1a>
		else if (w > filter_woi)
 8007146:	d9fc      	bls.n	8007142 <VL53LX_f_022+0x4c>
			*pc += pbins->bin_data[j];
 8007148:	b2e4      	uxtb	r4, r4
 800714a:	3406      	adds	r4, #6
 800714c:	6837      	ldr	r7, [r6, #0]
 800714e:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8007152:	4427      	add	r7, r4
 8007154:	6037      	str	r7, [r6, #0]
 8007156:	e7f4      	b.n	8007142 <VL53LX_f_022+0x4c>

08007158 <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	9c06      	ldr	r4, [sp, #24]
 800715c:	f89d 601c 	ldrb.w	r6, [sp, #28]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 8007160:	81e0      	strh	r0, [r4, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 8007162:	8261      	strh	r1, [r4, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 8007164:	61a2      	str	r2, [r4, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 8007166:	82e3      	strh	r3, [r4, #22]



	if (pdata->fast_osc_frequency == 0)
 8007168:	b101      	cbz	r1, 800716c <VL53LX_f_018+0x14>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;

	if (pdata->total_periods_elapsed == 0)
 800716a:	b912      	cbnz	r2, 8007172 <VL53LX_f_018+0x1a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800716c:	f06f 000e 	mvn.w	r0, #14

	}

	LOG_FUNCTION_END(status);

	return status;
 8007170:	e038      	b.n	80071e4 <VL53LX_f_018+0x8c>
		pll_period_us =
 8007172:	4608      	mov	r0, r1
 8007174:	f7fe fe10 	bl	8005d98 <VL53LX_calc_pll_period_us>
		periods_elapsed      = pdata->total_periods_elapsed + 1;
 8007178:	69a5      	ldr	r5, [r4, #24]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800717a:	89e1      	ldrh	r1, [r4, #14]
		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800717c:	3501      	adds	r5, #1
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800717e:	462b      	mov	r3, r5
 8007180:	f44f 6200 	mov.w	r2, #2048	; 0x800
		pll_period_us =
 8007184:	4607      	mov	r7, r0
		pdata->peak_duration_us    = VL53LX_duration_maths(
 8007186:	f7fe fe0d 	bl	8005da4 <VL53LX_duration_maths>
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800718a:	7c21      	ldrb	r1, [r4, #16]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800718c:	61e0      	str	r0, [r4, #28]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800718e:	462b      	mov	r3, r5
 8007190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007194:	0109      	lsls	r1, r1, #4
 8007196:	4638      	mov	r0, r7
 8007198:	f7fe fe04 	bl	8005da4 <VL53LX_duration_maths>
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800719c:	69e1      	ldr	r1, [r4, #28]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800719e:	6220      	str	r0, [r4, #32]
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 80071a0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80071a2:	f7fe feaf 	bl	8005f04 <VL53LX_rate_maths>
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 80071a6:	6a21      	ldr	r1, [r4, #32]
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 80071a8:	8620      	strh	r0, [r4, #48]	; 0x30
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 80071aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80071ac:	f7fe feaa 	bl	8005f04 <VL53LX_rate_maths>
 80071b0:	8660      	strh	r0, [r4, #50]	; 0x32
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 80071b2:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 80071b6:	f7fe fea5 	bl	8005f04 <VL53LX_rate_maths>
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 80071ba:	8e21      	ldrh	r1, [r4, #48]	; 0x30
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 80071bc:	86a0      	strh	r0, [r4, #52]	; 0x34
		count_rate_total =
 80071be:	4401      	add	r1, r0
		if (histo_merge_nb > 1)
 80071c0:	2e01      	cmp	r6, #1
			VL53LX_rate_per_spad_maths(
 80071c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
			count_rate_total /= histo_merge_nb;
 80071c6:	bf88      	it	hi
 80071c8:	fbb1 f1f6 	udivhi	r1, r1, r6
			VL53LX_rate_per_spad_maths(
 80071cc:	8ae2      	ldrh	r2, [r4, #22]
 80071ce:	2006      	movs	r0, #6
 80071d0:	f7fe feb9 	bl	8005f46 <VL53LX_rate_per_spad_maths>
			VL53LX_events_per_spad_maths(
 80071d4:	69e2      	ldr	r2, [r4, #28]
		pdata->total_rate_per_spad_mcps   =
 80071d6:	86e0      	strh	r0, [r4, #54]	; 0x36
			VL53LX_events_per_spad_maths(
 80071d8:	8ae1      	ldrh	r1, [r4, #22]
 80071da:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80071dc:	f7fe fdf6 	bl	8005dcc <VL53LX_events_per_spad_maths>
		pdata->VL53LX_p_009   =
 80071e0:	63a0      	str	r0, [r4, #56]	; 0x38
 80071e2:	2000      	movs	r0, #0
}
 80071e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071e6 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 80071e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071e8:	4614      	mov	r4, r2
 80071ea:	4605      	mov	r5, r0
 80071ec:	460e      	mov	r6, r1
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 80071ee:	8a92      	ldrh	r2, [r2, #20]
 80071f0:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80071f2:	8a60      	ldrh	r0, [r4, #18]
 80071f4:	e9cd 5600 	strd	r5, r6, [sp]
 80071f8:	2300      	movs	r3, #0
 80071fa:	f7fe feb5 	bl	8005f68 <VL53LX_range_maths>
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 80071fe:	8aa2      	ldrh	r2, [r4, #20]
		(int16_t)VL53LX_range_maths(
 8007200:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
		(int16_t)VL53LX_range_maths(
 8007204:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8007208:	8a60      	ldrh	r0, [r4, #18]
 800720a:	e9cd 5600 	strd	r5, r6, [sp]
 800720e:	2300      	movs	r3, #0
 8007210:	f7fe feaa 	bl	8005f68 <VL53LX_range_maths>
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 8007214:	8aa2      	ldrh	r2, [r4, #20]
		(int16_t)VL53LX_range_maths(
 8007216:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
		(int16_t)VL53LX_range_maths(
 800721a:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 800721e:	8a60      	ldrh	r0, [r4, #18]
 8007220:	e9cd 5600 	strd	r5, r6, [sp]
 8007224:	2300      	movs	r3, #0
 8007226:	f7fe fe9f 	bl	8005f68 <VL53LX_range_maths>
 800722a:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 800722e:	b002      	add	sp, #8
 8007230:	bd70      	pop	{r4, r5, r6, pc}

08007232 <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 8007232:	b538      	push	{r3, r4, r5, lr}
 8007234:	4604      	mov	r4, r0
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 8007236:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
{
 800723a:	460d      	mov	r5, r1
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800723c:	f7fe feea 	bl	8006014 <VL53LX_decode_vcsel_period>

	if (period != 0)
 8007240:	02c3      	lsls	r3, r0, #11
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 8007242:	bf18      	it	ne
 8007244:	f8b5 209c 	ldrhne.w	r2, [r5, #156]	; 0x9c


	phase_delta = (int32_t)pdata1->zero_distance_phase
 8007248:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
		remapped_phase =
 800724c:	bf1c      	itt	ne
 800724e:	fbb2 f1f3 	udivne	r1, r2, r3
 8007252:	fb03 2311 	mlsne	r3, r3, r1, r2
	phase_delta = (int32_t)pdata1->zero_distance_phase
 8007256:	1ac0      	subs	r0, r0, r3
				- (int32_t)remapped_phase;



	if (phase_delta > 0)
 8007258:	2800      	cmp	r0, #0
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800725a:	bfd5      	itete	le
 800725c:	f5a0 6080 	suble.w	r0, r0, #1024	; 0x400
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 8007260:	f500 6080 	addgt.w	r0, r0, #1024	; 0x400
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 8007264:	f44f 6300 	movle.w	r3, #2048	; 0x800
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 8007268:	f340 20c7 	sbfxgt	r0, r0, #11, #8
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800726c:	bfdc      	itt	le
 800726e:	fb90 f0f3 	sdivle	r0, r0, r3
 8007272:	b240      	sxtble	r0, r0

	LOG_FUNCTION_END(0);

	return bin_offset;
}
 8007274:	bd38      	pop	{r3, r4, r5, pc}

08007276 <VL53LX_f_005>:
{
 8007276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800727a:	4614      	mov	r4, r2
 800727c:	4606      	mov	r6, r0
	memcpy(
 800727e:	22ac      	movs	r2, #172	; 0xac
 8007280:	4620      	mov	r0, r4
{
 8007282:	460d      	mov	r5, r1
	memcpy(
 8007284:	f002 fb5a 	bl	800993c <memcpy>
 8007288:	7a62      	ldrb	r2, [r4, #9]
 800728a:	f104 0318 	add.w	r3, r4, #24
 800728e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
		pxtalk_realigned->bin_data[i] = 0;
 8007292:	2100      	movs	r1, #0
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 8007294:	4293      	cmp	r3, r2
 8007296:	d114      	bne.n	80072c2 <VL53LX_f_005+0x4c>
	bin_offset =  VL53LX_f_030(
 8007298:	4631      	mov	r1, r6
 800729a:	4628      	mov	r0, r5
 800729c:	f7ff ffc9 	bl	8007232 <VL53LX_f_030>
	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 80072a0:	7aaa      	ldrb	r2, [r5, #10]
 80072a2:	7ab7      	ldrb	r7, [r6, #10]
 80072a4:	4297      	cmp	r7, r2
 80072a6:	bf28      	it	cs
 80072a8:	4617      	movcs	r7, r2
 80072aa:	f106 0118 	add.w	r1, r6, #24
 80072ae:	b252      	sxtb	r2, r2
	for (i = 0 ; i <  min_bins ; i++) {
 80072b0:	2600      	movs	r6, #0
					% (int8_t)pbins->VL53LX_p_021;
 80072b2:	eb02 0c00 	add.w	ip, r2, r0
			pbins->bin_data[(uint8_t)bin_access] = 0;
 80072b6:	46b6      	mov	lr, r6
	for (i = 0 ; i <  min_bins ; i++) {
 80072b8:	b2f3      	uxtb	r3, r6
 80072ba:	429f      	cmp	r7, r3
 80072bc:	d804      	bhi.n	80072c8 <VL53LX_f_005+0x52>
}
 80072be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxtalk_realigned->bin_data[i] = 0;
 80072c2:	f843 1b04 	str.w	r1, [r3], #4
 80072c6:	e7e5      	b.n	8007294 <VL53LX_f_005+0x1e>
		if (bin_offset >= 0)
 80072c8:	2800      	cmp	r0, #0
 80072ca:	eb00 0806 	add.w	r8, r0, r6
					% (int8_t)pbins->VL53LX_p_021;
 80072ce:	bfb8      	it	lt
 80072d0:	eb0c 0806 	addlt.w	r8, ip, r6
 80072d4:	fb98 f3f2 	sdiv	r3, r8, r2
 80072d8:	fb02 8313 	mls	r3, r2, r3, r8
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 80072dc:	b25b      	sxtb	r3, r3
		if (pbins->bin_data[(uint8_t)bin_access] >
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	eb05 0983 	add.w	r9, r5, r3, lsl #2
			pxtalk->bin_data[i]) {
 80072e4:	f8d1 a000 	ldr.w	sl, [r1]
		if (pbins->bin_data[(uint8_t)bin_access] >
 80072e8:	f8d9 8018 	ldr.w	r8, [r9, #24]
 80072ec:	45d0      	cmp	r8, sl
				- pxtalk->bin_data[i];
 80072ee:	bfc6      	itte	gt
 80072f0:	eba8 080a 	subgt.w	r8, r8, sl
			pbins->bin_data[(uint8_t)bin_access] =
 80072f4:	f8c9 8018 	strgt.w	r8, [r9, #24]
			pbins->bin_data[(uint8_t)bin_access] = 0;
 80072f8:	f8c9 e018 	strle.w	lr, [r9, #24]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 80072fc:	3306      	adds	r3, #6
			pxtalk->bin_data[i];
 80072fe:	f851 8b04 	ldr.w	r8, [r1], #4
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8007302:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
 8007306:	3601      	adds	r6, #1
 8007308:	e7d6      	b.n	80072b8 <VL53LX_f_005+0x42>

0800730a <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800730a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800730c:	460b      	mov	r3, r1

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800730e:	22ac      	movs	r2, #172	; 0xac
 8007310:	4601      	mov	r1, r0
{
 8007312:	b089      	sub	sp, #36	; 0x24
 8007314:	4605      	mov	r5, r0
	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 8007316:	4618      	mov	r0, r3
 8007318:	f002 fb10 	bl	800993c <memcpy>


	podata->VL53LX_p_021 = 0;

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800731c:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8007320:	60c2      	str	r2, [r0, #12]
	podata->VL53LX_p_021 = 0;
 8007322:	2100      	movs	r1, #0
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 8007324:	f241 0210 	movw	r2, #4112	; 0x1010
 8007328:	8202      	strh	r2, [r0, #16]
	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800732a:	4603      	mov	r3, r0
 800732c:	f100 0218 	add.w	r2, r0, #24
	podata->VL53LX_p_021 = 0;
 8007330:	7281      	strb	r1, [r0, #10]
 8007332:	7a40      	ldrb	r0, [r0, #9]
 8007334:	eb02 0080 	add.w	r0, r2, r0, lsl #2

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 8007338:	4282      	cmp	r2, r0
 800733a:	d173      	bne.n	8007424 <VL53LX_f_031+0x11a>
 800733c:	2200      	movs	r2, #0
		podata->bin_data[lc] = 0;



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
		bin_initial_index[lc] = 0x00;
 800733e:	4611      	mov	r1, r2
		bin_repeat_count[lc]  = 0x00;
 8007340:	ac04      	add	r4, sp, #16
		bin_initial_index[lc] = 0x00;
 8007342:	f80d 1002 	strb.w	r1, [sp, r2]
		bin_repeat_count[lc]  = 0x00;
 8007346:	5511      	strb	r1, [r2, r4]
 8007348:	3201      	adds	r2, #1
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800734a:	2a10      	cmp	r2, #16
 800734c:	d1f9      	bne.n	8007342 <VL53LX_f_031+0x38>
 800734e:	f105 060c 	add.w	r6, r5, #12
 8007352:	4628      	mov	r0, r5
 8007354:	f105 0c12 	add.w	ip, r5, #18
	}




	bin_seq_length = 0x00;
 8007358:	2200      	movs	r2, #0

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {

		bin_cfg = pidata->bin_seq[lc];
 800735a:	f816 7b01 	ldrb.w	r7, [r6], #1



		if (bin_repeat_count[bin_cfg] == 0) {
 800735e:	a908      	add	r1, sp, #32
 8007360:	4439      	add	r1, r7
 8007362:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8007366:	b94d      	cbnz	r5, 800737c <VL53LX_f_031+0x72>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 8007368:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 800736c:	f801 ec20 	strb.w	lr, [r1, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 8007370:	eb03 0e02 	add.w	lr, r3, r2
			bin_seq_length++;
 8007374:	3201      	adds	r2, #1
			podata->bin_seq[bin_seq_length] = bin_cfg;
 8007376:	f88e 700c 	strb.w	r7, [lr, #12]
			bin_seq_length++;
 800737a:	b2d2      	uxtb	r2, r2
		}

		bin_repeat_count[bin_cfg]++;
 800737c:	3501      	adds	r5, #1
 800737e:	f801 5c10 	strb.w	r5, [r1, #-16]
 8007382:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 8007386:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800738a:	3114      	adds	r1, #20



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800738c:	2500      	movs	r5, #0

		for (i = 0 ; i < 4 ; i++)
			podata->bin_data[VL53LX_p_032+i] +=
				pidata->bin_data[lc*4+i];
 800738e:	eb00 0e05 	add.w	lr, r0, r5
			podata->bin_data[VL53LX_p_032+i] +=
 8007392:	f851 7f04 	ldr.w	r7, [r1, #4]!
 8007396:	f8de e018 	ldr.w	lr, [lr, #24]
 800739a:	3504      	adds	r5, #4
 800739c:	4477      	add	r7, lr
		for (i = 0 ; i < 4 ; i++)
 800739e:	2d10      	cmp	r5, #16
			podata->bin_data[VL53LX_p_032+i] +=
 80073a0:	600f      	str	r7, [r1, #0]
		for (i = 0 ; i < 4 ; i++)
 80073a2:	d1f4      	bne.n	800738e <VL53LX_f_031+0x84>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80073a4:	4566      	cmp	r6, ip
 80073a6:	f100 0010 	add.w	r0, r0, #16
 80073aa:	d1d6      	bne.n	800735a <VL53LX_f_031+0x50>
 80073ac:	f103 010c 	add.w	r1, r3, #12
 80073b0:	f103 0512 	add.w	r5, r3, #18

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
		else
			podata->bin_rep[lc] = 0;
 80073b4:	2600      	movs	r6, #0
		bin_cfg = podata->bin_seq[lc];
 80073b6:	f811 0b01 	ldrb.w	r0, [r1], #1
		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 80073ba:	280f      	cmp	r0, #15
				bin_repeat_count[bin_cfg];
 80073bc:	bf9b      	ittet	ls
 80073be:	af08      	addls	r7, sp, #32
 80073c0:	19c0      	addls	r0, r0, r7
			podata->bin_rep[lc] = 0;
 80073c2:	714e      	strbhi	r6, [r1, #5]
			podata->bin_rep[lc] =
 80073c4:	f810 0c10 	ldrbls.w	r0, [r0, #-16]
 80073c8:	bf98      	it	ls
 80073ca:	7148      	strbls	r0, [r1, #5]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80073cc:	42a9      	cmp	r1, r5
 80073ce:	d1f2      	bne.n	80073b6 <VL53LX_f_031+0xac>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 80073d0:	0092      	lsls	r2, r2, #2
 80073d2:	729a      	strb	r2, [r3, #10]
 80073d4:	2100      	movs	r1, #0
 80073d6:	f103 0724 	add.w	r7, r3, #36	; 0x24
 80073da:	f04f 0c04 	mov.w	ip, #4



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {

		repeat_count = (int32_t)bin_repeat_count[lc];
 80073de:	5c66      	ldrb	r6, [r4, r1]

		if (repeat_count > 0) {
 80073e0:	b186      	cbz	r6, 8007404 <VL53LX_f_031+0xfa>

			VL53LX_p_032 = bin_initial_index[lc];
 80073e2:	f81d 0001 	ldrb.w	r0, [sp, r1]
 80073e6:	eb03 0280 	add.w	r2, r3, r0, lsl #2

			for (i = 0 ; i < 4 ; i++) {
				podata->bin_data[VL53LX_p_032+i] +=
					(repeat_count/2);
 80073ea:	ea4f 0e66 	mov.w	lr, r6, asr #1
 80073ee:	3214      	adds	r2, #20
 80073f0:	fb1c 7500 	smlabb	r5, ip, r0, r7
				podata->bin_data[VL53LX_p_032+i] +=
 80073f4:	f852 0f04 	ldr.w	r0, [r2, #4]!
			for (i = 0 ; i < 4 ; i++) {
 80073f8:	4295      	cmp	r5, r2
				podata->bin_data[VL53LX_p_032+i] +=
 80073fa:	4470      	add	r0, lr
				podata->bin_data[VL53LX_p_032+i] /=
 80073fc:	fb90 f0f6 	sdiv	r0, r0, r6
 8007400:	6010      	str	r0, [r2, #0]
			for (i = 0 ; i < 4 ; i++) {
 8007402:	d1f7      	bne.n	80073f4 <VL53LX_f_031+0xea>
 8007404:	3101      	adds	r1, #1
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8007406:	2910      	cmp	r1, #16
 8007408:	d1e9      	bne.n	80073de <VL53LX_f_031+0xd4>
		}
	}



	podata->number_of_ambient_bins = 0;
 800740a:	2200      	movs	r2, #0
 800740c:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800740e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8007412:	b912      	cbnz	r2, 800741a <VL53LX_f_031+0x110>
 8007414:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8007418:	b10a      	cbz	r2, 800741e <VL53LX_f_031+0x114>
		(bin_repeat_count[15] > 0))
		podata->number_of_ambient_bins = 4;
 800741a:	2204      	movs	r2, #4
 800741c:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
}
 800741e:	2000      	movs	r0, #0
 8007420:	b009      	add	sp, #36	; 0x24
 8007422:	bdf0      	pop	{r4, r5, r6, r7, pc}
		podata->bin_data[lc] = 0;
 8007424:	f842 1b04 	str.w	r1, [r2], #4
 8007428:	e786      	b.n	8007338 <VL53LX_f_031+0x2e>

0800742a <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800742a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742e:	b0c1      	sub	sp, #260	; 0x104
	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 8007430:	2700      	movs	r7, #0
{
 8007432:	9e4a      	ldr	r6, [sp, #296]	; 0x128
 8007434:	9d4d      	ldr	r5, [sp, #308]	; 0x134
	uint32_t xtalk_rate_kcps               = 0;
 8007436:	970a      	str	r7, [sp, #40]	; 0x28
			pbins_input,
			pbins_averaged);



	VL53LX_init_histogram_bin_data_struct(
 8007438:	f106 0948 	add.w	r9, r6, #72	; 0x48
{
 800743c:	4682      	mov	sl, r0
 800743e:	468b      	mov	fp, r1
	VL53LX_f_031(
 8007440:	4618      	mov	r0, r3
 8007442:	a915      	add	r1, sp, #84	; 0x54
{
 8007444:	4698      	mov	r8, r3
 8007446:	4614      	mov	r4, r2
	VL53LX_f_031(
 8007448:	f7ff ff5f 	bl	800730a <VL53LX_f_031>
	VL53LX_init_histogram_bin_data_struct(
 800744c:	464a      	mov	r2, r9
 800744e:	7ab1      	ldrb	r1, [r6, #10]
 8007450:	4638      	mov	r0, r7
 8007452:	f7fe fe04 	bl	800605e <VL53LX_init_histogram_bin_data_struct>
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 8007456:	4649      	mov	r1, r9
 8007458:	4630      	mov	r0, r6
 800745a:	f7fe fde0 	bl	800601e <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800745e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007462:	b94b      	cbnz	r3, 8007478 <VL53LX_hist_process_data+0x4e>
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 8007464:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007468:	b1e3      	cbz	r3, 80074a4 <VL53LX_hist_process_data+0x7a>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
		status =
 800746a:	464b      	mov	r3, r9
 800746c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800746e:	4631      	mov	r1, r6
 8007470:	a815      	add	r0, sp, #84	; 0x54
 8007472:	f001 f87a 	bl	800856a <VL53LX_f_033>
 8007476:	e015      	b.n	80074a4 <VL53LX_hist_process_data+0x7a>
		status =
 8007478:	ab0a      	add	r3, sp, #40	; 0x28
 800747a:	9304      	str	r3, [sp, #16]
 800747c:	f898 30a9 	ldrb.w	r3, [r8, #169]	; 0xa9
 8007480:	9303      	str	r3, [sp, #12]
 8007482:	f898 30a8 	ldrb.w	r3, [r8, #168]	; 0xa8
 8007486:	9302      	str	r3, [sp, #8]
 8007488:	f8b8 307c 	ldrh.w	r3, [r8, #124]	; 0x7c
 800748c:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 8007490:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8007494:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007496:	e9cd 7300 	strd	r7, r3, [sp]
 800749a:	463b      	mov	r3, r7
 800749c:	f000 ffcd 	bl	800843a <VL53LX_f_032>
	if ((status == VL53LX_ERROR_NONE) &&
 80074a0:	2800      	cmp	r0, #0
 80074a2:	d0df      	beq.n	8007464 <VL53LX_hist_process_data+0x3a>





	presults->xmonitor.total_periods_elapsed =
 80074a4:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80074a6:	f8c5 315c 	str.w	r3, [r5, #348]	; 0x15c
		pbins_averaged->total_periods_elapsed;
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 80074aa:	2600      	movs	r6, #0
	presults->xmonitor.VL53LX_p_004 =
 80074ac:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
 80074b0:	f8a5 315a 	strh.w	r3, [r5, #346]	; 0x15a
	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 80074b4:	f8a5 6174 	strh.w	r6, [r5, #372]	; 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 80074b8:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 80074bc:	f885 6144 	strb.w	r6, [r5, #324]	; 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 80074c0:	f885 618e 	strb.w	r6, [r5, #398]	; 0x18e



	xtalk_enable = 0;
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 80074c4:	f894 8028 	ldrb.w	r8, [r4, #40]	; 0x28
			delta_mm <
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {



				memcpy(
 80074c8:	f505 73a2 	add.w	r3, r5, #324	; 0x144
	xtalk_enable = 0;
 80074cc:	ebb8 0806 	subs.w	r8, r8, r6
 80074d0:	bf18      	it	ne
 80074d2:	f04f 0801 	movne.w	r8, #1
				memcpy(
 80074d6:	9308      	str	r3, [sp, #32]
		status =
 80074d8:	9b4e      	ldr	r3, [sp, #312]	; 0x138
		ppost_cfg->algo__crosstalk_compensation_enable = r;
 80074da:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
		status =
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	e9cd 5304 	strd	r5, r3, [sp, #16]
 80074e4:	ab0b      	add	r3, sp, #44	; 0x2c
 80074e6:	9303      	str	r3, [sp, #12]
 80074e8:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 80074ea:	9302      	str	r3, [sp, #8]
 80074ec:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 80074ee:	4622      	mov	r2, r4
 80074f0:	e9cd 9300 	strd	r9, r3, [sp]
 80074f4:	4659      	mov	r1, fp
 80074f6:	ab15      	add	r3, sp, #84	; 0x54
 80074f8:	4650      	mov	r0, sl
 80074fa:	f7ff fcbc 	bl	8006e76 <VL53LX_f_025>
		if (!(status == VL53LX_ERROR_NONE && r == 0))
 80074fe:	4603      	mov	r3, r0
 8007500:	b148      	cbz	r0, 8007516 <VL53LX_hist_process_data+0xec>
 8007502:	3601      	adds	r6, #1
	for (r = 0 ; r <= xtalk_enable ; r++) {
 8007504:	b2f2      	uxtb	r2, r6
 8007506:	4590      	cmp	r8, r2
 8007508:	d2e6      	bcs.n	80074d8 <VL53LX_hist_process_data+0xae>
	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;

	LOG_FUNCTION_END(status);

	return status;
}
 800750a:	4618      	mov	r0, r3
	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800750c:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
}
 8007510:	b041      	add	sp, #260	; 0x104
 8007512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(status == VL53LX_ERROR_NONE && r == 0))
 8007516:	2e00      	cmp	r6, #0
 8007518:	d1f3      	bne.n	8007502 <VL53LX_hist_process_data+0xd8>
		if (presults->active_results == 0) {
 800751a:	7ca9      	ldrb	r1, [r5, #18]
 800751c:	b931      	cbnz	r1, 800752c <VL53LX_hist_process_data+0x102>
			pdata->ambient_count_rate_mcps =
 800751e:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8007522:	f8a5 2048 	strh.w	r2, [r5, #72]	; 0x48
			pdata->VL53LX_p_004 =
 8007526:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 800752a:	856a      	strh	r2, [r5, #42]	; 0x2a
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800752c:	984e      	ldr	r0, [sp, #312]	; 0x138
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800752e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8007530:	7800      	ldrb	r0, [r0, #0]
 8007532:	4342      	muls	r2, r0
		max_xtalk_rate_per_spad_kcps <<= 4;
 8007534:	0112      	lsls	r2, r2, #4
 8007536:	9206      	str	r2, [sp, #24]
 8007538:	f105 0714 	add.w	r7, r5, #20
 800753c:	224c      	movs	r2, #76	; 0x4c
 800753e:	fb12 7201 	smlabb	r2, r2, r1, r7
 8007542:	9207      	str	r2, [sp, #28]
		for (t = 0 ; t < presults->active_results ; t++) {
 8007544:	9a07      	ldr	r2, [sp, #28]
 8007546:	4297      	cmp	r7, r2
 8007548:	d0db      	beq.n	8007502 <VL53LX_hist_process_data+0xd8>
			if (pdata->max_range_mm > pdata->min_range_mm)
 800754a:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	; 0x48
 800754e:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
			if (pdata->median_range_mm  >
 8007552:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
			if (pdata->max_range_mm > pdata->min_range_mm)
 8007556:	4291      	cmp	r1, r2
					pdata->max_range_mm -
 8007558:	bfcc      	ite	gt
 800755a:	1a8a      	subgt	r2, r1, r2
					pdata->min_range_mm -
 800755c:	1a52      	suble	r2, r2, r1
			if (pdata->median_range_mm  >
 800755e:	f9b7 1046 	ldrsh.w	r1, [r7, #70]	; 0x46
 8007562:	4288      	cmp	r0, r1
				delta_mm =
 8007564:	b212      	sxth	r2, r2
			if (pdata->median_range_mm  >
 8007566:	da19      	bge.n	800759c <VL53LX_hist_process_data+0x172>
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8007568:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 800756c:	4288      	cmp	r0, r1
 800756e:	dd15      	ble.n	800759c <VL53LX_hist_process_data+0x172>
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8007570:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007572:	9806      	ldr	r0, [sp, #24]
 8007574:	4281      	cmp	r1, r0
 8007576:	d211      	bcs.n	800759c <VL53LX_hist_process_data+0x172>
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8007578:	984e      	ldr	r0, [sp, #312]	; 0x138
			XtalkDetectMaxSigma =
 800757a:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800757c:	7800      	ldrb	r0, [r0, #0]
 800757e:	4341      	muls	r1, r0
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 8007580:	8fb8      	ldrh	r0, [r7, #60]	; 0x3c
			max_xtalk_rate_per_spad_kcps &&
 8007582:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 8007586:	d209      	bcs.n	800759c <VL53LX_hist_process_data+0x172>
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8007588:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800758a:	428a      	cmp	r2, r1
 800758c:	da06      	bge.n	800759c <VL53LX_hist_process_data+0x172>
				memcpy(
 800758e:	224c      	movs	r2, #76	; 0x4c
 8007590:	4639      	mov	r1, r7
 8007592:	9808      	ldr	r0, [sp, #32]
 8007594:	9309      	str	r3, [sp, #36]	; 0x24
 8007596:	f002 f9d1 	bl	800993c <memcpy>
 800759a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800759c:	374c      	adds	r7, #76	; 0x4c
 800759e:	e7d1      	b.n	8007544 <VL53LX_hist_process_data+0x11a>

080075a0 <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	4604      	mov	r4, r0
 80075a4:	460d      	mov	r5, r1
 80075a6:	4616      	mov	r6, r2




	if (status == VL53LX_ERROR_NONE)
		status = VL53LX_disable_firmware(Dev);
 80075a8:	f7fd f96f 	bl	800488a <VL53LX_disable_firmware>




	if (status == VL53LX_ERROR_NONE)
 80075ac:	bb50      	cbnz	r0, 8007604 <VL53LX_nvm_enable+0x64>
		status = VL53LX_enable_powerforce(Dev);
 80075ae:	4620      	mov	r0, r4
 80075b0:	f7fd f974 	bl	800489c <VL53LX_enable_powerforce>



	if (status == VL53LX_ERROR_NONE)
 80075b4:	bb30      	cbnz	r0, 8007604 <VL53LX_nvm_enable+0x64>
		status = VL53LX_WaitUs(
 80075b6:	21fa      	movs	r1, #250	; 0xfa
 80075b8:	4620      	mov	r0, r4
 80075ba:	f7fa f81b 	bl	80015f4 <VL53LX_WaitUs>
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 80075be:	bb08      	cbnz	r0, 8007604 <VL53LX_nvm_enable+0x64>
		status = VL53LX_WrByte(
 80075c0:	2201      	movs	r2, #1
 80075c2:	f240 7181 	movw	r1, #1921	; 0x781
 80075c6:	4620      	mov	r0, r4
 80075c8:	f7f9 ffb8 	bl	800153c <VL53LX_WrByte>
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 80075cc:	b9d0      	cbnz	r0, 8007604 <VL53LX_nvm_enable+0x64>
		status = VL53LX_WrByte(
 80075ce:	2205      	movs	r2, #5
 80075d0:	f240 6183 	movw	r1, #1667	; 0x683
 80075d4:	4620      	mov	r0, r4
 80075d6:	f7f9 ffb1 	bl	800153c <VL53LX_WrByte>
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 80075da:	b998      	cbnz	r0, 8007604 <VL53LX_nvm_enable+0x64>
		status = VL53LX_WaitUs(
 80075dc:	4631      	mov	r1, r6
 80075de:	4620      	mov	r0, r4
 80075e0:	f7fa f808 	bl	80015f4 <VL53LX_WaitUs>
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 80075e4:	b970      	cbnz	r0, 8007604 <VL53LX_nvm_enable+0x64>
		status = VL53LX_WrByte(
 80075e6:	2201      	movs	r2, #1
 80075e8:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80075ec:	4620      	mov	r0, r4
 80075ee:	f7f9 ffa5 	bl	800153c <VL53LX_WrByte>
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 80075f2:	b938      	cbnz	r0, 8007604 <VL53LX_nvm_enable+0x64>
		status = VL53LX_WrWord(
 80075f4:	462a      	mov	r2, r5
 80075f6:	4620      	mov	r0, r4
 80075f8:	f240 7184 	movw	r1, #1924	; 0x784

	LOG_FUNCTION_END(status);

	return status;

}
 80075fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		status = VL53LX_WrWord(
 8007600:	f7f9 bfae 	b.w	8001560 <VL53LX_WrWord>
}
 8007604:	bd70      	pop	{r4, r5, r6, pc}

08007606 <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 8007606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007608:	4605      	mov	r5, r0
 800760a:	461e      	mov	r6, r3
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800760c:	460c      	mov	r4, r1
	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800760e:	2000      	movs	r0, #0
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8007610:	188f      	adds	r7, r1, r2
	for (nvm_addr = start_address;
 8007612:	42bc      	cmp	r4, r7
 8007614:	db00      	blt.n	8007618 <VL53LX_nvm_read+0x12>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8007616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (status == VL53LX_ERROR_NONE)
 8007618:	bb00      	cbnz	r0, 800765c <VL53LX_nvm_read+0x56>
			status = VL53LX_WrByte(
 800761a:	4622      	mov	r2, r4
 800761c:	f240 7194 	movw	r1, #1940	; 0x794
 8007620:	4628      	mov	r0, r5
 8007622:	f7f9 ff8b 	bl	800153c <VL53LX_WrByte>
		if (status == VL53LX_ERROR_NONE)
 8007626:	b9c8      	cbnz	r0, 800765c <VL53LX_nvm_read+0x56>
			status = VL53LX_WrByte(
 8007628:	4602      	mov	r2, r0
 800762a:	f240 7183 	movw	r1, #1923	; 0x783
 800762e:	4628      	mov	r0, r5
 8007630:	f7f9 ff84 	bl	800153c <VL53LX_WrByte>
		if (status == VL53LX_ERROR_NONE)
 8007634:	b990      	cbnz	r0, 800765c <VL53LX_nvm_read+0x56>
			status = VL53LX_WaitUs(
 8007636:	2105      	movs	r1, #5
 8007638:	4628      	mov	r0, r5
 800763a:	f7f9 ffdb 	bl	80015f4 <VL53LX_WaitUs>
		if (status == VL53LX_ERROR_NONE)
 800763e:	b968      	cbnz	r0, 800765c <VL53LX_nvm_read+0x56>
			status = VL53LX_WrByte(
 8007640:	2201      	movs	r2, #1
 8007642:	f240 7183 	movw	r1, #1923	; 0x783
 8007646:	4628      	mov	r0, r5
 8007648:	f7f9 ff78 	bl	800153c <VL53LX_WrByte>
		if (status == VL53LX_ERROR_NONE)
 800764c:	b930      	cbnz	r0, 800765c <VL53LX_nvm_read+0x56>
			status = VL53LX_ReadMulti(
 800764e:	2304      	movs	r3, #4
 8007650:	4632      	mov	r2, r6
 8007652:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8007656:	4628      	mov	r0, r5
 8007658:	f7f9 ff58 	bl	800150c <VL53LX_ReadMulti>
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800765c:	3401      	adds	r4, #1
		pdata = pdata + 4;
 800765e:	3604      	adds	r6, #4
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8007660:	b2e4      	uxtb	r4, r4
 8007662:	e7d6      	b.n	8007612 <VL53LX_nvm_read+0xc>

08007664 <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 8007664:	b510      	push	{r4, lr}
	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
		status = VL53LX_WrByte(
 8007666:	2201      	movs	r2, #1
 8007668:	f240 7183 	movw	r1, #1923	; 0x783
{
 800766c:	4604      	mov	r4, r0
		status = VL53LX_WrByte(
 800766e:	f7f9 ff65 	bl	800153c <VL53LX_WrByte>
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 8007672:	b978      	cbnz	r0, 8007694 <VL53LX_nvm_disable+0x30>
		status = VL53LX_WrByte(
 8007674:	4602      	mov	r2, r0
 8007676:	f240 7181 	movw	r1, #1921	; 0x781
 800767a:	4620      	mov	r0, r4
 800767c:	f7f9 ff5e 	bl	800153c <VL53LX_WrByte>
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 8007680:	b940      	cbnz	r0, 8007694 <VL53LX_nvm_disable+0x30>
		status = VL53LX_disable_powerforce(Dev);
 8007682:	4620      	mov	r0, r4
 8007684:	f7fd f90d 	bl	80048a2 <VL53LX_disable_powerforce>



	if (status == VL53LX_ERROR_NONE)
 8007688:	b920      	cbnz	r0, 8007694 <VL53LX_nvm_disable+0x30>
		status = VL53LX_enable_firmware(Dev);
 800768a:	4620      	mov	r0, r4

	LOG_FUNCTION_END(status);

	return status;

}
 800768c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		status = VL53LX_enable_firmware(Dev);
 8007690:	f7fd b8f8 	b.w	8004884 <VL53LX_enable_firmware>
}
 8007694:	bd10      	pop	{r4, pc}

08007696 <VL53LX_nvm_decode_cal_peak_rate_map>:
	VL53LX_Error status   = VL53LX_ERROR_NONE;

	uint8_t   *ptmp = NULL;
	uint8_t       i = 0;

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 8007696:	2837      	cmp	r0, #55	; 0x37
{
 8007698:	b570      	push	{r4, r5, r6, lr}
 800769a:	460d      	mov	r5, r1
 800769c:	4614      	mov	r4, r2
	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800769e:	d91c      	bls.n	80076da <VL53LX_nvm_decode_cal_peak_rate_map+0x44>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 80076a0:	2002      	movs	r0, #2
 80076a2:	f7fd f8a8 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 80076a6:	1ca9      	adds	r1, r5, #2
	pdata->cal_distance_mm =
 80076a8:	8020      	strh	r0, [r4, #0]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 80076aa:	2002      	movs	r0, #2
 80076ac:	f7fd f8a3 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 80076b0:	2319      	movs	r3, #25
 80076b2:	80a3      	strh	r3, [r4, #4]
	pdata->cal_reflectance_pc =
 80076b4:	0980      	lsrs	r0, r0, #6
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 80076b6:	2305      	movs	r3, #5
	pdata->cal_reflectance_pc =
 80076b8:	8060      	strh	r0, [r4, #2]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 80076ba:	80e3      	strh	r3, [r4, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 80076bc:	8123      	strh	r3, [r4, #8]

	ptmp = pbuffer + 4;
 80076be:	1d2e      	adds	r6, r5, #4
 80076c0:	340a      	adds	r4, #10
 80076c2:	3536      	adds	r5, #54	; 0x36
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
		pdata->peak_rate_mcps[i] =
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 80076c4:	4631      	mov	r1, r6
 80076c6:	2002      	movs	r0, #2
 80076c8:	f7fd f895 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
		ptmp += 2;
 80076cc:	3602      	adds	r6, #2
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 80076ce:	42ae      	cmp	r6, r5
		pdata->peak_rate_mcps[i] =
 80076d0:	f824 0b02 	strh.w	r0, [r4], #2
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 80076d4:	d1f6      	bne.n	80076c4 <VL53LX_nvm_decode_cal_peak_rate_map+0x2e>
	}

	return status;
 80076d6:	2000      	movs	r0, #0
}
 80076d8:	bd70      	pop	{r4, r5, r6, pc}
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 80076da:	f06f 0008 	mvn.w	r0, #8
 80076de:	e7fb      	b.n	80076d8 <VL53LX_nvm_decode_cal_peak_rate_map+0x42>

080076e0 <VL53LX_nvm_decode_additional_offset_cal_data>:
	VL53LX_additional_offset_cal_data_t *pdata)
{

	VL53LX_Error status   = VL53LX_ERROR_NONE;

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 80076e0:	2807      	cmp	r0, #7
{
 80076e2:	b538      	push	{r3, r4, r5, lr}
 80076e4:	460d      	mov	r5, r1
 80076e6:	4614      	mov	r4, r2
	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 80076e8:	d914      	bls.n	8007714 <VL53LX_nvm_decode_additional_offset_cal_data+0x34>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 80076ea:	2002      	movs	r0, #2
 80076ec:	f7fd f883 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 80076f0:	1ca9      	adds	r1, r5, #2
	pdata->result__mm_inner_actual_effective_spads =
 80076f2:	8020      	strh	r0, [r4, #0]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 80076f4:	2002      	movs	r0, #2
 80076f6:	f7fd f87e 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 80076fa:	1d29      	adds	r1, r5, #4
	pdata->result__mm_outer_actual_effective_spads =
 80076fc:	8060      	strh	r0, [r4, #2]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 80076fe:	2002      	movs	r0, #2
 8007700:	f7fd f879 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 8007704:	1da9      	adds	r1, r5, #6
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 8007706:	80a0      	strh	r0, [r4, #4]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 8007708:	2002      	movs	r0, #2
 800770a:	f7fd f874 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800770e:	80e0      	strh	r0, [r4, #6]

	return status;
 8007710:	2000      	movs	r0, #0
}
 8007712:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 8007714:	f06f 0008 	mvn.w	r0, #8
 8007718:	e7fb      	b.n	8007712 <VL53LX_nvm_decode_additional_offset_cal_data+0x32>

0800771a <VL53LX_nvm_decode_fmt_range_results_data>:
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{

	VL53LX_Error status   = VL53LX_ERROR_NONE;

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800771a:	280f      	cmp	r0, #15
{
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	460d      	mov	r5, r1
 8007720:	4614      	mov	r4, r2
	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 8007722:	d92b      	bls.n	800777c <VL53LX_nvm_decode_fmt_range_results_data+0x62>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8007724:	2002      	movs	r0, #2
 8007726:	f7fd f866 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__actual_effective_rtn_spads =
 800772a:	8020      	strh	r0, [r4, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800772c:	78ab      	ldrb	r3, [r5, #2]
 800772e:	70a3      	strb	r3, [r4, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 8007730:	78eb      	ldrb	r3, [r5, #3]
 8007732:	70e3      	strb	r3, [r4, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 8007734:	1d29      	adds	r1, r5, #4
 8007736:	2002      	movs	r0, #2
 8007738:	f7fd f85d 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800773c:	1da9      	adds	r1, r5, #6
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800773e:	80a0      	strh	r0, [r4, #4]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 8007740:	2002      	movs	r0, #2
 8007742:	f7fd f858 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 8007746:	f105 0108 	add.w	r1, r5, #8
	pdata->result__ambient_count_rate_rtn_mcps =
 800774a:	80e0      	strh	r0, [r4, #6]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800774c:	2002      	movs	r0, #2
 800774e:	f7fd f852 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 8007752:	f105 010a 	add.w	r1, r5, #10
	pdata->result__peak_signal_count_rate_ref_mcps =
 8007756:	8120      	strh	r0, [r4, #8]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 8007758:	2002      	movs	r0, #2
 800775a:	f7fd f84c 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800775e:	f105 010c 	add.w	r1, r5, #12
	pdata->result__ambient_count_rate_ref_mcps =
 8007762:	8160      	strh	r0, [r4, #10]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 8007764:	2002      	movs	r0, #2
 8007766:	f7fd f846 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800776a:	f105 010e 	add.w	r1, r5, #14
	pdata->measured_distance_mm =
 800776e:	81a0      	strh	r0, [r4, #12]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 8007770:	2002      	movs	r0, #2
 8007772:	f7fd f840 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->measured_distance_stdev_mm =
 8007776:	81e0      	strh	r0, [r4, #14]

	return status;
 8007778:	2000      	movs	r0, #0
}
 800777a:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800777c:	f06f 0008 	mvn.w	r0, #8
 8007780:	e7fb      	b.n	800777a <VL53LX_nvm_decode_fmt_range_results_data+0x60>

08007782 <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 8007782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007784:	460d      	mov	r5, r1
 8007786:	4616      	mov	r6, r2
	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
		status = VL53LX_nvm_enable(
 8007788:	2104      	movs	r1, #4
 800778a:	2232      	movs	r2, #50	; 0x32
{
 800778c:	4604      	mov	r4, r0
 800778e:	461f      	mov	r7, r3
		status = VL53LX_nvm_enable(
 8007790:	f7ff ff06 	bl	80075a0 <VL53LX_nvm_enable>
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 8007794:	b958      	cbnz	r0, 80077ae <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_read(
 8007796:	463b      	mov	r3, r7
 8007798:	4632      	mov	r2, r6
 800779a:	4629      	mov	r1, r5
 800779c:	4620      	mov	r0, r4
 800779e:	f7ff ff32 	bl	8007606 <VL53LX_nvm_read>
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 80077a2:	b920      	cbnz	r0, 80077ae <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_disable(Dev);
 80077a4:	4620      	mov	r0, r4

	LOG_FUNCTION_END(status);

	return status;

}
 80077a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		status = VL53LX_nvm_disable(Dev);
 80077aa:	f7ff bf5b 	b.w	8007664 <VL53LX_nvm_disable>
}
 80077ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080077b0 <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 80077b0:	b513      	push	{r0, r1, r4, lr}

	LOG_FUNCTION_START("");



	status =
 80077b2:	2201      	movs	r2, #1
{
 80077b4:	460c      	mov	r4, r1
	status =
 80077b6:	ab01      	add	r3, sp, #4
 80077b8:	212e      	movs	r1, #46	; 0x2e
 80077ba:	f7ff ffe2 	bl	8007782 <VL53LX_read_nvm_raw_data>
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 80077be:	b960      	cbnz	r0, 80077da <VL53LX_read_nvm_optical_centre+0x2a>
	tmp -= (uint16_t)*(pbuffer + 2);
 80077c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80077c4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80077c8:	b29b      	uxth	r3, r3
	if (tmp > 0x0FF)
 80077ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
		tmp = 0;
 80077ce:	bf08      	it	eq
 80077d0:	2300      	moveq	r3, #0
	pdata->x_centre = (uint8_t)tmp;
 80077d2:	7023      	strb	r3, [r4, #0]
	pdata->y_centre = *(pbuffer + 3);
 80077d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80077d8:	7063      	strb	r3, [r4, #1]
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
}
 80077da:	b002      	add	sp, #8
 80077dc:	bd10      	pop	{r4, pc}

080077de <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 80077de:	b510      	push	{r4, lr}
 80077e0:	b08e      	sub	sp, #56	; 0x38
 80077e2:	460c      	mov	r4, r1

	LOG_FUNCTION_START("");



	status =
 80077e4:	466b      	mov	r3, sp
 80077e6:	220e      	movs	r2, #14
 80077e8:	2157      	movs	r1, #87	; 0x57
 80077ea:	f7ff ffca 	bl	8007782 <VL53LX_read_nvm_raw_data>
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 80077ee:	b920      	cbnz	r0, 80077fa <VL53LX_read_nvm_cal_peak_rate_map+0x1c>
		status =
 80077f0:	4622      	mov	r2, r4
 80077f2:	4669      	mov	r1, sp
 80077f4:	2038      	movs	r0, #56	; 0x38
 80077f6:	f7ff ff4e 	bl	8007696 <VL53LX_nvm_decode_cal_peak_rate_map>
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
}
 80077fa:	b00e      	add	sp, #56	; 0x38
 80077fc:	bd10      	pop	{r4, pc}

080077fe <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 80077fe:	b513      	push	{r0, r1, r4, lr}

	LOG_FUNCTION_START("");



	status =
 8007800:	2202      	movs	r2, #2
{
 8007802:	460c      	mov	r4, r1
	status =
 8007804:	466b      	mov	r3, sp
 8007806:	2165      	movs	r1, #101	; 0x65
 8007808:	f7ff ffbb 	bl	8007782 <VL53LX_read_nvm_raw_data>
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800780c:	b920      	cbnz	r0, 8007818 <VL53LX_read_nvm_additional_offset_cal_data+0x1a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 800780e:	4622      	mov	r2, r4
 8007810:	4669      	mov	r1, sp
 8007812:	2008      	movs	r0, #8
 8007814:	f7ff ff64 	bl	80076e0 <VL53LX_nvm_decode_additional_offset_cal_data>

	LOG_FUNCTION_END(status);

	return status;

}
 8007818:	b002      	add	sp, #8
 800781a:	bd10      	pop	{r4, pc}

0800781c <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 800781c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800781e:	4614      	mov	r4, r2

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 8007820:	466b      	mov	r3, sp
 8007822:	2204      	movs	r2, #4
 8007824:	f3c1 0187 	ubfx	r1, r1, #2, #8
 8007828:	f7ff ffab 	bl	8007782 <VL53LX_read_nvm_raw_data>
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800782c:	b920      	cbnz	r0, 8007838 <VL53LX_read_nvm_fmt_range_results_data+0x1c>
		status =
 800782e:	4622      	mov	r2, r4
 8007830:	4669      	mov	r1, sp
 8007832:	2010      	movs	r0, #16
 8007834:	f7ff ff71 	bl	800771a <VL53LX_nvm_decode_fmt_range_results_data>

	LOG_FUNCTION_END(status);

	return status;

}
 8007838:	b004      	add	sp, #16
 800783a:	bd10      	pop	{r4, pc}

0800783c <VL53LX_i2c_encode_static_nvm_managed>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800783c:	290a      	cmp	r1, #10
{
 800783e:	b538      	push	{r3, r4, r5, lr}
 8007840:	4605      	mov	r5, r0
 8007842:	4614      	mov	r4, r2
	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8007844:	d924      	bls.n	8007890 <VL53LX_i2c_encode_static_nvm_managed+0x54>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8007846:	7803      	ldrb	r3, [r0, #0]
 8007848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   0) =
 800784c:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800784e:	7843      	ldrb	r3, [r0, #1]
 8007850:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   1) =
 8007854:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8007856:	7883      	ldrb	r3, [r0, #2]
 8007858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   2) =
 800785c:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800785e:	78c3      	ldrb	r3, [r0, #3]
 8007860:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 8007864:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8007866:	7903      	ldrb	r3, [r0, #4]
 8007868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   4) =
 800786c:	7113      	strb	r3, [r2, #4]
	VL53LX_i2c_encode_uint16_t(
 800786e:	88c0      	ldrh	r0, [r0, #6]
 8007870:	3205      	adds	r2, #5
 8007872:	2102      	movs	r1, #2
 8007874:	f7fc ffb7 	bl	80047e6 <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
		pdata->vhv_config__timeout_macrop_loop_bound;
 8007878:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   7) =
 800787a:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->vhv_config__count_thresh;
 800787c:	7a6b      	ldrb	r3, [r5, #9]
	*(pbuffer +   8) =
 800787e:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8007880:	7aab      	ldrb	r3, [r5, #10]
 8007882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   9) =
 8007886:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  10) =
		pdata->vhv_config__init;
 8007888:	7aeb      	ldrb	r3, [r5, #11]
	*(pbuffer +  10) =
 800788a:	72a3      	strb	r3, [r4, #10]
	LOG_FUNCTION_END(status);


	return status;
 800788c:	2000      	movs	r0, #0
}
 800788e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007890:	f06f 0009 	mvn.w	r0, #9
 8007894:	e7fb      	b.n	800788e <VL53LX_i2c_encode_static_nvm_managed+0x52>

08007896 <VL53LX_i2c_decode_static_nvm_managed>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8007896:	280a      	cmp	r0, #10
{
 8007898:	b538      	push	{r3, r4, r5, lr}
 800789a:	460d      	mov	r5, r1
 800789c:	4614      	mov	r4, r2
	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800789e:	d924      	bls.n	80078ea <VL53LX_i2c_decode_static_nvm_managed+0x54>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 80078a0:	780b      	ldrb	r3, [r1, #0]
 80078a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->i2c_slave__device_address =
 80078a6:	7013      	strb	r3, [r2, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80078a8:	784b      	ldrb	r3, [r1, #1]
 80078aa:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__vhv_ref_sel_vddpix =
 80078ae:	7053      	strb	r3, [r2, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80078b0:	788b      	ldrb	r3, [r1, #2]
 80078b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__vhv_ref_sel_vquench =
 80078b6:	7093      	strb	r3, [r2, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80078b8:	78cb      	ldrb	r3, [r1, #3]
 80078ba:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__reg_avdd1v2_sel =
 80078be:	70d3      	strb	r3, [r2, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 80078c0:	790b      	ldrb	r3, [r1, #4]
 80078c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim =
 80078c6:	7113      	strb	r3, [r2, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 80078c8:	3105      	adds	r1, #5
 80078ca:	2002      	movs	r0, #2
 80078cc:	f7fc ff93 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->osc_measured__fast_osc__frequency =
 80078d0:	80e0      	strh	r0, [r4, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 80078d2:	79eb      	ldrb	r3, [r5, #7]
 80078d4:	7223      	strb	r3, [r4, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 80078d6:	7a2b      	ldrb	r3, [r5, #8]
 80078d8:	7263      	strb	r3, [r4, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 80078da:	7a6b      	ldrb	r3, [r5, #9]
 80078dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_config__offset =
 80078e0:	72a3      	strb	r3, [r4, #10]
	pdata->vhv_config__init =
 80078e2:	7aab      	ldrb	r3, [r5, #10]
 80078e4:	72e3      	strb	r3, [r4, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 80078e6:	2000      	movs	r0, #0
}
 80078e8:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80078ea:	f06f 0009 	mvn.w	r0, #9
 80078ee:	e7fb      	b.n	80078e8 <VL53LX_i2c_decode_static_nvm_managed+0x52>

080078f0 <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 80078f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078f2:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
		status = VL53LX_ReadMulti(
 80078f4:	230b      	movs	r3, #11
 80078f6:	aa01      	add	r2, sp, #4
 80078f8:	2101      	movs	r1, #1
 80078fa:	f7f9 fe07 	bl	800150c <VL53LX_ReadMulti>
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 80078fe:	b920      	cbnz	r0, 800790a <VL53LX_get_static_nvm_managed+0x1a>
		status = VL53LX_i2c_decode_static_nvm_managed(
 8007900:	4622      	mov	r2, r4
 8007902:	a901      	add	r1, sp, #4
 8007904:	200b      	movs	r0, #11
 8007906:	f7ff ffc6 	bl	8007896 <VL53LX_i2c_decode_static_nvm_managed>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800790a:	b004      	add	sp, #16
 800790c:	bd10      	pop	{r4, pc}

0800790e <VL53LX_i2c_encode_customer_nvm_managed>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800790e:	2916      	cmp	r1, #22
{
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	4604      	mov	r4, r0
 8007914:	4615      	mov	r5, r2
	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8007916:	d948      	bls.n	80079aa <VL53LX_i2c_encode_customer_nvm_managed+0x9c>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8007918:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 800791a:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__spad_enables_ref_1;
 800791c:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800791e:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->global_config__spad_enables_ref_2;
 8007920:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 8007922:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->global_config__spad_enables_ref_3;
 8007924:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 8007926:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->global_config__spad_enables_ref_4;
 8007928:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 800792a:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800792c:	7943      	ldrb	r3, [r0, #5]
 800792e:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   5) =
 8007932:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->global_config__ref_en_start_select;
 8007934:	7983      	ldrb	r3, [r0, #6]
	*(pbuffer +   6) =
 8007936:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8007938:	79c3      	ldrb	r3, [r0, #7]
 800793a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   7) =
 800793e:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8007940:	7a03      	ldrb	r3, [r0, #8]
 8007942:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   8) =
 8007946:	7213      	strb	r3, [r2, #8]
	VL53LX_i2c_encode_uint16_t(
 8007948:	2102      	movs	r1, #2
 800794a:	3209      	adds	r2, #9
 800794c:	8940      	ldrh	r0, [r0, #10]
 800794e:	f7fc ff4a 	bl	80047e6 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 8007952:	f105 020b 	add.w	r2, r5, #11
 8007956:	2102      	movs	r1, #2
 8007958:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800795c:	f7fc ff56 	bl	800480c <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 8007960:	f105 020d 	add.w	r2, r5, #13
 8007964:	2102      	movs	r1, #2
 8007966:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800796a:	f7fc ff4f 	bl	800480c <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 800796e:	f105 020f 	add.w	r2, r5, #15
 8007972:	2102      	movs	r1, #2
 8007974:	8a20      	ldrh	r0, [r4, #16]
 8007976:	f7fc ff36 	bl	80047e6 <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
 800797a:	8a60      	ldrh	r0, [r4, #18]
 800797c:	f105 0211 	add.w	r2, r5, #17
 8007980:	2102      	movs	r1, #2
 8007982:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007986:	f7fc ff41 	bl	800480c <VL53LX_i2c_encode_int16_t>
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 800798a:	f105 0213 	add.w	r2, r5, #19
 800798e:	2102      	movs	r1, #2
 8007990:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8007994:	f7fc ff3a 	bl	800480c <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 8007998:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 800799c:	f105 0215 	add.w	r2, r5, #21
 80079a0:	2102      	movs	r1, #2
 80079a2:	f7fc ff33 	bl	800480c <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 80079a6:	2000      	movs	r0, #0
}
 80079a8:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80079aa:	f06f 0009 	mvn.w	r0, #9
 80079ae:	e7fb      	b.n	80079a8 <VL53LX_i2c_encode_customer_nvm_managed+0x9a>

080079b0 <VL53LX_i2c_decode_customer_nvm_managed>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80079b0:	2816      	cmp	r0, #22
{
 80079b2:	b538      	push	{r3, r4, r5, lr}
 80079b4:	460d      	mov	r5, r1
 80079b6:	4614      	mov	r4, r2
	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80079b8:	d944      	bls.n	8007a44 <VL53LX_i2c_decode_customer_nvm_managed+0x94>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80079ba:	780b      	ldrb	r3, [r1, #0]
	pdata->global_config__spad_enables_ref_0 =
 80079bc:	7013      	strb	r3, [r2, #0]
	pdata->global_config__spad_enables_ref_1 =
 80079be:	784b      	ldrb	r3, [r1, #1]
 80079c0:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 80079c2:	788b      	ldrb	r3, [r1, #2]
 80079c4:	7093      	strb	r3, [r2, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 80079c6:	78cb      	ldrb	r3, [r1, #3]
 80079c8:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 80079ca:	790b      	ldrb	r3, [r1, #4]
 80079cc:	7113      	strb	r3, [r2, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 80079ce:	794b      	ldrb	r3, [r1, #5]
 80079d0:	f003 030f 	and.w	r3, r3, #15
	pdata->global_config__spad_enables_ref_5 =
 80079d4:	7153      	strb	r3, [r2, #5]
	pdata->global_config__ref_en_start_select =
 80079d6:	798b      	ldrb	r3, [r1, #6]
 80079d8:	7193      	strb	r3, [r2, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 80079da:	79cb      	ldrb	r3, [r1, #7]
 80079dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_man__num_requested_ref_spads =
 80079e0:	71d3      	strb	r3, [r2, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 80079e2:	7a0b      	ldrb	r3, [r1, #8]
 80079e4:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_man__ref_location =
 80079e8:	7213      	strb	r3, [r2, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 80079ea:	3109      	adds	r1, #9
 80079ec:	2002      	movs	r0, #2
 80079ee:	f7fc ff02 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 80079f2:	f105 010b 	add.w	r1, r5, #11
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 80079f6:	8160      	strh	r0, [r4, #10]
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 80079f8:	2002      	movs	r0, #2
 80079fa:	f7fc ff0f 	bl	800481c <VL53LX_i2c_decode_int16_t>
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 80079fe:	f105 010d 	add.w	r1, r5, #13
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8007a02:	81a0      	strh	r0, [r4, #12]
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 8007a04:	2002      	movs	r0, #2
 8007a06:	f7fc ff09 	bl	800481c <VL53LX_i2c_decode_int16_t>
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 8007a0a:	f105 010f 	add.w	r1, r5, #15
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8007a0e:	81e0      	strh	r0, [r4, #14]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 8007a10:	2002      	movs	r0, #2
 8007a12:	f7fc fef0 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8007a16:	f105 0111 	add.w	r1, r5, #17
	pdata->ref_spad_char__total_rate_target_mcps =
 8007a1a:	8220      	strh	r0, [r4, #16]
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8007a1c:	2002      	movs	r0, #2
 8007a1e:	f7fc fefd 	bl	800481c <VL53LX_i2c_decode_int16_t>
 8007a22:	f3c0 000c 	ubfx	r0, r0, #0, #13
	pdata->algo__part_to_part_range_offset_mm =
 8007a26:	8260      	strh	r0, [r4, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 8007a28:	f105 0113 	add.w	r1, r5, #19
 8007a2c:	2002      	movs	r0, #2
 8007a2e:	f7fc fef5 	bl	800481c <VL53LX_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 8007a32:	f105 0115 	add.w	r1, r5, #21
	pdata->mm_config__inner_offset_mm =
 8007a36:	82a0      	strh	r0, [r4, #20]
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 8007a38:	2002      	movs	r0, #2
 8007a3a:	f7fc feef 	bl	800481c <VL53LX_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
 8007a3e:	82e0      	strh	r0, [r4, #22]

	LOG_FUNCTION_END(status);

	return status;
 8007a40:	2000      	movs	r0, #0
}
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007a44:	f06f 0009 	mvn.w	r0, #9
 8007a48:	e7fb      	b.n	8007a42 <VL53LX_i2c_decode_customer_nvm_managed+0x92>

08007a4a <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 8007a4a:	b510      	push	{r4, lr}
 8007a4c:	b086      	sub	sp, #24
 8007a4e:	460c      	mov	r4, r1
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
		status = VL53LX_ReadMulti(
 8007a50:	2317      	movs	r3, #23
 8007a52:	466a      	mov	r2, sp
 8007a54:	210d      	movs	r1, #13
 8007a56:	f7f9 fd59 	bl	800150c <VL53LX_ReadMulti>
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 8007a5a:	b9a0      	cbnz	r0, 8007a86 <VL53LX_get_customer_nvm_managed+0x3c>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 8007a5c:	4622      	mov	r2, r4
 8007a5e:	4669      	mov	r1, sp
 8007a60:	2017      	movs	r0, #23
 8007a62:	f7ff ffa5 	bl	80079b0 <VL53LX_i2c_decode_customer_nvm_managed>
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 8007a66:	b970      	cbnz	r0, 8007a86 <VL53LX_get_customer_nvm_managed+0x3c>
		offset = pdata->algo__part_to_part_range_offset_mm;
 8007a68:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
		offset = offset / 4;
 8007a6c:	2204      	movs	r2, #4
 8007a6e:	fb93 f3f2 	sdiv	r3, r3, r2
		if (offset >= 1024)
 8007a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
			offset -= 2048;
 8007a76:	bfa4      	itt	ge
 8007a78:	f5a3 6300 	subge.w	r3, r3, #2048	; 0x800
 8007a7c:	b21b      	sxthge	r3, r3
		pdata->algo__part_to_part_range_offset_mm = 0;
 8007a7e:	2200      	movs	r2, #0
 8007a80:	8262      	strh	r2, [r4, #18]
		pdata->mm_config__inner_offset_mm = offset;
 8007a82:	82a3      	strh	r3, [r4, #20]
		pdata->mm_config__outer_offset_mm = offset;
 8007a84:	82e3      	strh	r3, [r4, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8007a86:	b006      	add	sp, #24
 8007a88:	bd10      	pop	{r4, pc}

08007a8a <VL53LX_i2c_encode_static_config>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 8007a8a:	291f      	cmp	r1, #31
{
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	4604      	mov	r4, r0
 8007a90:	4615      	mov	r5, r2
	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 8007a92:	d965      	bls.n	8007b60 <VL53LX_i2c_encode_static_config+0xd6>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	VL53LX_i2c_encode_uint16_t(
 8007a94:	2102      	movs	r1, #2
 8007a96:	8800      	ldrh	r0, [r0, #0]
 8007a98:	f7fc fea5 	bl	80047e6 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8007a9c:	78a3      	ldrb	r3, [r4, #2]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 8007aa2:	70ab      	strb	r3, [r5, #2]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8007aa4:	78e3      	ldrb	r3, [r4, #3]
 8007aa6:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   3) =
 8007aaa:	70eb      	strb	r3, [r5, #3]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8007aac:	7923      	ldrb	r3, [r4, #4]
 8007aae:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 8007ab2:	712b      	strb	r3, [r5, #4]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8007ab4:	7963      	ldrb	r3, [r4, #5]
 8007ab6:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +   5) =
 8007aba:	716b      	strb	r3, [r5, #5]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8007abc:	79a3      	ldrb	r3, [r4, #6]
 8007abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 8007ac2:	71ab      	strb	r3, [r5, #6]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8007ac4:	79e3      	ldrb	r3, [r4, #7]
 8007ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   7) =
 8007aca:	71eb      	strb	r3, [r5, #7]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8007acc:	7a23      	ldrb	r3, [r4, #8]
 8007ace:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   8) =
 8007ad2:	722b      	strb	r3, [r5, #8]
	*(pbuffer +   9) =
		pdata->pad_i2c_hv__config;
 8007ad4:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   9) =
 8007ad6:	726b      	strb	r3, [r5, #9]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8007ad8:	7aa3      	ldrb	r3, [r4, #10]
 8007ada:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  10) =
 8007ade:	72ab      	strb	r3, [r5, #10]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8007ae0:	7ae3      	ldrb	r3, [r4, #11]
 8007ae2:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 8007ae6:	72eb      	strb	r3, [r5, #11]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8007ae8:	7b23      	ldrb	r3, [r4, #12]
 8007aea:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  12) =
 8007aee:	732b      	strb	r3, [r5, #12]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8007af0:	7b63      	ldrb	r3, [r4, #13]
 8007af2:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  13) =
 8007af6:	736b      	strb	r3, [r5, #13]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8007af8:	7ba3      	ldrb	r3, [r4, #14]
 8007afa:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  14) =
 8007afe:	73ab      	strb	r3, [r5, #14]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8007b00:	7be3      	ldrb	r3, [r4, #15]
 8007b02:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  15) =
 8007b06:	73eb      	strb	r3, [r5, #15]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8007b08:	7c23      	ldrb	r3, [r4, #16]
 8007b0a:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  16) =
 8007b0e:	742b      	strb	r3, [r5, #16]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8007b10:	7c63      	ldrb	r3, [r4, #17]
 8007b12:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  17) =
 8007b16:	746b      	strb	r3, [r5, #17]
	*(pbuffer +  18) =
		pdata->sigma_estimator__effective_pulse_width_ns;
 8007b18:	7ca3      	ldrb	r3, [r4, #18]
	*(pbuffer +  18) =
 8007b1a:	74ab      	strb	r3, [r5, #18]
	*(pbuffer +  19) =
		pdata->sigma_estimator__effective_ambient_width_ns;
 8007b1c:	7ce3      	ldrb	r3, [r4, #19]
	*(pbuffer +  19) =
 8007b1e:	74eb      	strb	r3, [r5, #19]
	*(pbuffer +  20) =
		pdata->sigma_estimator__sigma_ref_mm;
 8007b20:	7d23      	ldrb	r3, [r4, #20]
	*(pbuffer +  20) =
 8007b22:	752b      	strb	r3, [r5, #20]
	*(pbuffer +  21) =
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8007b24:	7d63      	ldrb	r3, [r4, #21]
	*(pbuffer +  21) =
 8007b26:	756b      	strb	r3, [r5, #21]
	*(pbuffer +  22) =
		pdata->spare_host_config__static_config_spare_0;
 8007b28:	7da3      	ldrb	r3, [r4, #22]
	*(pbuffer +  22) =
 8007b2a:	75ab      	strb	r3, [r5, #22]
	*(pbuffer +  23) =
		pdata->spare_host_config__static_config_spare_1;
 8007b2c:	7de3      	ldrb	r3, [r4, #23]
	*(pbuffer +  23) =
 8007b2e:	75eb      	strb	r3, [r5, #23]
	VL53LX_i2c_encode_uint16_t(
 8007b30:	8b20      	ldrh	r0, [r4, #24]
 8007b32:	f105 0218 	add.w	r2, r5, #24
 8007b36:	2102      	movs	r1, #2
 8007b38:	f7fc fe55 	bl	80047e6 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
		pdata->algo__range_ignore_valid_height_mm;
 8007b3c:	7ea3      	ldrb	r3, [r4, #26]
	*(pbuffer +  26) =
 8007b3e:	76ab      	strb	r3, [r5, #26]
	*(pbuffer +  27) =
		pdata->algo__range_min_clip;
 8007b40:	7ee3      	ldrb	r3, [r4, #27]
	*(pbuffer +  27) =
 8007b42:	76eb      	strb	r3, [r5, #27]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8007b44:	7f23      	ldrb	r3, [r4, #28]
 8007b46:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  28) =
 8007b4a:	772b      	strb	r3, [r5, #28]
	*(pbuffer +  29) =
		pdata->spare_host_config__static_config_spare_2;
 8007b4c:	7f63      	ldrb	r3, [r4, #29]
	*(pbuffer +  29) =
 8007b4e:	776b      	strb	r3, [r5, #29]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8007b50:	7fa3      	ldrb	r3, [r4, #30]
 8007b52:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  30) =
 8007b56:	77ab      	strb	r3, [r5, #30]
	*(pbuffer +  31) =
		pdata->sd_config__reset_stages_lsb;
 8007b58:	7fe3      	ldrb	r3, [r4, #31]
	*(pbuffer +  31) =
 8007b5a:	77eb      	strb	r3, [r5, #31]
	LOG_FUNCTION_END(status);


	return status;
 8007b5c:	2000      	movs	r0, #0
}
 8007b5e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007b60:	f06f 0009 	mvn.w	r0, #9
 8007b64:	e7fb      	b.n	8007b5e <VL53LX_i2c_encode_static_config+0xd4>

08007b66 <VL53LX_i2c_encode_general_config>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8007b66:	2915      	cmp	r1, #21
{
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4605      	mov	r5, r0
 8007b6c:	4614      	mov	r4, r2
	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8007b6e:	d93c      	bls.n	8007bea <VL53LX_i2c_encode_general_config+0x84>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8007b70:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 8007b72:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__stream_divider;
 8007b74:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 8007b76:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->system__interrupt_config_gpio;
 8007b78:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 8007b7a:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8007b7c:	78c3      	ldrb	r3, [r0, #3]
 8007b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   3) =
 8007b82:	70d3      	strb	r3, [r2, #3]
	VL53LX_i2c_encode_uint16_t(
 8007b84:	8880      	ldrh	r0, [r0, #4]
 8007b86:	3204      	adds	r2, #4
 8007b88:	2102      	movs	r1, #2
 8007b8a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8007b8e:	f7fc fe2a 	bl	80047e6 <VL53LX_i2c_encode_uint16_t>
		pdata->cal_config__repeat_rate & 0xFFF,
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8007b92:	79ab      	ldrb	r3, [r5, #6]
 8007b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 8007b98:	71a3      	strb	r3, [r4, #6]
	*(pbuffer +   7) =
		pdata->phasecal_config__timeout_macrop;
 8007b9a:	79eb      	ldrb	r3, [r5, #7]
	*(pbuffer +   7) =
 8007b9c:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->phasecal_config__target;
 8007b9e:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   8) =
 8007ba0:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8007ba2:	7a6b      	ldrb	r3, [r5, #9]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   9) =
 8007ba8:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8007baa:	7aab      	ldrb	r3, [r5, #10]
 8007bac:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  11) =
 8007bb0:	72e3      	strb	r3, [r4, #11]
	VL53LX_i2c_encode_uint16_t(
 8007bb2:	f104 020c 	add.w	r2, r4, #12
 8007bb6:	2102      	movs	r1, #2
 8007bb8:	89a8      	ldrh	r0, [r5, #12]
 8007bba:	f7fc fe14 	bl	80047e6 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 8007bbe:	f104 020e 	add.w	r2, r4, #14
 8007bc2:	2102      	movs	r1, #2
 8007bc4:	89e8      	ldrh	r0, [r5, #14]
 8007bc6:	f7fc fe0e 	bl	80047e6 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 8007bca:	8a28      	ldrh	r0, [r5, #16]
 8007bcc:	f104 0210 	add.w	r2, r4, #16
 8007bd0:	2102      	movs	r1, #2
 8007bd2:	f7fc fe08 	bl	80047e6 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
		pdata->dss_config__manual_block_select;
 8007bd6:	7cab      	ldrb	r3, [r5, #18]
	*(pbuffer +  18) =
 8007bd8:	74a3      	strb	r3, [r4, #18]
	*(pbuffer +  19) =
		pdata->dss_config__aperture_attenuation;
 8007bda:	7ceb      	ldrb	r3, [r5, #19]
	*(pbuffer +  19) =
 8007bdc:	74e3      	strb	r3, [r4, #19]
	*(pbuffer +  20) =
		pdata->dss_config__max_spads_limit;
 8007bde:	7d2b      	ldrb	r3, [r5, #20]
	*(pbuffer +  20) =
 8007be0:	7523      	strb	r3, [r4, #20]
	*(pbuffer +  21) =
		pdata->dss_config__min_spads_limit;
 8007be2:	7d6b      	ldrb	r3, [r5, #21]
	*(pbuffer +  21) =
 8007be4:	7563      	strb	r3, [r4, #21]
	LOG_FUNCTION_END(status);


	return status;
 8007be6:	2000      	movs	r0, #0
}
 8007be8:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007bea:	f06f 0009 	mvn.w	r0, #9
 8007bee:	e7fb      	b.n	8007be8 <VL53LX_i2c_encode_general_config+0x82>

08007bf0 <VL53LX_i2c_encode_timing_config>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 8007bf0:	2916      	cmp	r1, #22
{
 8007bf2:	b538      	push	{r3, r4, r5, lr}
 8007bf4:	4605      	mov	r5, r0
 8007bf6:	4614      	mov	r4, r2
	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 8007bf8:	d93a      	bls.n	8007c70 <VL53LX_i2c_encode_timing_config+0x80>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8007bfa:	7803      	ldrb	r3, [r0, #0]
 8007bfc:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   0) =
 8007c00:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->mm_config__timeout_macrop_a_lo;
 8007c02:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 8007c04:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8007c06:	7883      	ldrb	r3, [r0, #2]
 8007c08:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   2) =
 8007c0c:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->mm_config__timeout_macrop_b_lo;
 8007c0e:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 8007c10:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8007c12:	7903      	ldrb	r3, [r0, #4]
 8007c14:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 8007c18:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->range_config__timeout_macrop_a_lo;
 8007c1a:	7943      	ldrb	r3, [r0, #5]
	*(pbuffer +   5) =
 8007c1c:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8007c1e:	7983      	ldrb	r3, [r0, #6]
 8007c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   6) =
 8007c24:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8007c26:	79c3      	ldrb	r3, [r0, #7]
 8007c28:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   7) =
 8007c2c:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->range_config__timeout_macrop_b_lo;
 8007c2e:	7a03      	ldrb	r3, [r0, #8]
	*(pbuffer +   8) =
 8007c30:	7213      	strb	r3, [r2, #8]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8007c32:	7a43      	ldrb	r3, [r0, #9]
 8007c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   9) =
 8007c38:	7253      	strb	r3, [r2, #9]
	VL53LX_i2c_encode_uint16_t(
 8007c3a:	2102      	movs	r1, #2
 8007c3c:	320a      	adds	r2, #10
 8007c3e:	8940      	ldrh	r0, [r0, #10]
 8007c40:	f7fc fdd1 	bl	80047e6 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 8007c44:	f104 020c 	add.w	r2, r4, #12
 8007c48:	2102      	movs	r1, #2
 8007c4a:	89a8      	ldrh	r0, [r5, #12]
 8007c4c:	f7fc fdcb 	bl	80047e6 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
		pdata->range_config__valid_phase_low;
 8007c50:	7bab      	ldrb	r3, [r5, #14]
	*(pbuffer +  14) =
 8007c52:	73a3      	strb	r3, [r4, #14]
	*(pbuffer +  15) =
		pdata->range_config__valid_phase_high;
 8007c54:	7beb      	ldrb	r3, [r5, #15]
	*(pbuffer +  15) =
 8007c56:	73e3      	strb	r3, [r4, #15]
	VL53LX_i2c_encode_uint32_t(
 8007c58:	6928      	ldr	r0, [r5, #16]
 8007c5a:	f104 0212 	add.w	r2, r4, #18
 8007c5e:	2104      	movs	r1, #4
 8007c60:	f7fc fdeb 	bl	800483a <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8007c64:	7d2b      	ldrb	r3, [r5, #20]
 8007c66:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  22) =
 8007c6a:	75a3      	strb	r3, [r4, #22]
	LOG_FUNCTION_END(status);


	return status;
 8007c6c:	2000      	movs	r0, #0
}
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007c70:	f06f 0009 	mvn.w	r0, #9
 8007c74:	e7fb      	b.n	8007c6e <VL53LX_i2c_encode_timing_config+0x7e>

08007c76 <VL53LX_i2c_encode_dynamic_config>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8007c76:	2911      	cmp	r1, #17
{
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	4615      	mov	r5, r2
	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8007c7e:	d939      	bls.n	8007cf4 <VL53LX_i2c_encode_dynamic_config+0x7e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8007c80:	7803      	ldrb	r3, [r0, #0]
 8007c82:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   0) =
 8007c86:	f802 3b01 	strb.w	r3, [r2], #1
	VL53LX_i2c_encode_uint16_t(
 8007c8a:	2102      	movs	r1, #2
 8007c8c:	8840      	ldrh	r0, [r0, #2]
 8007c8e:	f7fc fdaa 	bl	80047e6 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 8007c92:	88a0      	ldrh	r0, [r4, #4]
 8007c94:	1cea      	adds	r2, r5, #3
 8007c96:	2102      	movs	r1, #2
 8007c98:	f7fc fda5 	bl	80047e6 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8007c9c:	79a3      	ldrb	r3, [r4, #6]
 8007c9e:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   5) =
 8007ca2:	716b      	strb	r3, [r5, #5]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8007ca4:	79e3      	ldrb	r3, [r4, #7]
 8007ca6:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +   6) =
 8007caa:	71ab      	strb	r3, [r5, #6]
	*(pbuffer +   7) =
		pdata->sd_config__woi_sd0;
 8007cac:	7a23      	ldrb	r3, [r4, #8]
	*(pbuffer +   7) =
 8007cae:	71eb      	strb	r3, [r5, #7]
	*(pbuffer +   8) =
		pdata->sd_config__woi_sd1;
 8007cb0:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   8) =
 8007cb2:	722b      	strb	r3, [r5, #8]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8007cb4:	7aa3      	ldrb	r3, [r4, #10]
 8007cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   9) =
 8007cba:	726b      	strb	r3, [r5, #9]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8007cbc:	7ae3      	ldrb	r3, [r4, #11]
 8007cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +  10) =
 8007cc2:	72ab      	strb	r3, [r5, #10]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8007cc4:	7b23      	ldrb	r3, [r4, #12]
 8007cc6:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 8007cca:	72eb      	strb	r3, [r5, #11]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8007ccc:	7b63      	ldrb	r3, [r4, #13]
 8007cce:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  12) =
 8007cd2:	732b      	strb	r3, [r5, #12]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8007cd4:	7ba3      	ldrb	r3, [r4, #14]
 8007cd6:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  13) =
 8007cda:	736b      	strb	r3, [r5, #13]
	*(pbuffer +  14) =
		pdata->roi_config__user_roi_centre_spad;
 8007cdc:	7be3      	ldrb	r3, [r4, #15]
	*(pbuffer +  14) =
 8007cde:	73ab      	strb	r3, [r5, #14]
	*(pbuffer +  15) =
		pdata->roi_config__user_roi_requested_global_xy_size;
 8007ce0:	7c23      	ldrb	r3, [r4, #16]
	*(pbuffer +  15) =
 8007ce2:	73eb      	strb	r3, [r5, #15]
	*(pbuffer +  16) =
		pdata->system__sequence_config;
 8007ce4:	7c63      	ldrb	r3, [r4, #17]
	*(pbuffer +  16) =
 8007ce6:	742b      	strb	r3, [r5, #16]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8007ce8:	7ca3      	ldrb	r3, [r4, #18]
 8007cea:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  17) =
 8007cee:	746b      	strb	r3, [r5, #17]
	LOG_FUNCTION_END(status);


	return status;
 8007cf0:	2000      	movs	r0, #0
}
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007cf4:	f06f 0009 	mvn.w	r0, #9
 8007cf8:	e7fb      	b.n	8007cf2 <VL53LX_i2c_encode_dynamic_config+0x7c>

08007cfa <VL53LX_i2c_encode_system_control>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8007cfa:	2904      	cmp	r1, #4
 8007cfc:	d913      	bls.n	8007d26 <VL53LX_i2c_encode_system_control+0x2c>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8007cfe:	7803      	ldrb	r3, [r0, #0]
 8007d00:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   0) =
 8007d04:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8007d06:	7843      	ldrb	r3, [r0, #1]
 8007d08:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   1) =
 8007d0c:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8007d0e:	7883      	ldrb	r3, [r0, #2]
 8007d10:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 8007d14:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8007d16:	78c3      	ldrb	r3, [r0, #3]
 8007d18:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 8007d1c:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->system__mode_start;
 8007d1e:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 8007d20:	7113      	strb	r3, [r2, #4]
	LOG_FUNCTION_END(status);


	return status;
 8007d22:	2000      	movs	r0, #0
 8007d24:	4770      	bx	lr
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007d26:	f06f 0009 	mvn.w	r0, #9
}
 8007d2a:	4770      	bx	lr

08007d2c <VL53LX_i2c_decode_system_results>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8007d2c:	282b      	cmp	r0, #43	; 0x2b
{
 8007d2e:	b538      	push	{r3, r4, r5, lr}
 8007d30:	460d      	mov	r5, r1
 8007d32:	4614      	mov	r4, r2
	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8007d34:	f240 8086 	bls.w	8007e44 <VL53LX_i2c_decode_system_results+0x118>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8007d38:	780b      	ldrb	r3, [r1, #0]
 8007d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->result__interrupt_status =
 8007d3e:	7013      	strb	r3, [r2, #0]
	pdata->result__range_status =
 8007d40:	784b      	ldrb	r3, [r1, #1]
 8007d42:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8007d44:	788b      	ldrb	r3, [r1, #2]
 8007d46:	f003 030f 	and.w	r3, r3, #15
	pdata->result__report_status =
 8007d4a:	7093      	strb	r3, [r2, #2]
	pdata->result__stream_count =
 8007d4c:	78cb      	ldrb	r3, [r1, #3]
 8007d4e:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 8007d50:	3104      	adds	r1, #4
 8007d52:	2002      	movs	r0, #2
 8007d54:	f7fc fd4f 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 8007d58:	1da9      	adds	r1, r5, #6
	pdata->result__dss_actual_effective_spads_sd0 =
 8007d5a:	80a0      	strh	r0, [r4, #4]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 8007d5c:	2002      	movs	r0, #2
 8007d5e:	f7fc fd4a 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 8007d62:	f105 0108 	add.w	r1, r5, #8
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8007d66:	80e0      	strh	r0, [r4, #6]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 8007d68:	2002      	movs	r0, #2
 8007d6a:	f7fc fd44 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 8007d6e:	f105 010a 	add.w	r1, r5, #10
	pdata->result__ambient_count_rate_mcps_sd0 =
 8007d72:	8120      	strh	r0, [r4, #8]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 8007d74:	2002      	movs	r0, #2
 8007d76:	f7fc fd3e 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 8007d7a:	f105 010c 	add.w	r1, r5, #12
	pdata->result__sigma_sd0 =
 8007d7e:	8160      	strh	r0, [r4, #10]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 8007d80:	2002      	movs	r0, #2
 8007d82:	f7fc fd38 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 8007d86:	f105 010e 	add.w	r1, r5, #14
	pdata->result__phase_sd0 =
 8007d8a:	81a0      	strh	r0, [r4, #12]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 8007d8c:	2002      	movs	r0, #2
 8007d8e:	f7fc fd32 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 8007d92:	f105 0110 	add.w	r1, r5, #16
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8007d96:	81e0      	strh	r0, [r4, #14]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 8007d98:	2002      	movs	r0, #2
 8007d9a:	f7fc fd2c 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 8007d9e:	f105 0112 	add.w	r1, r5, #18
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8007da2:	8220      	strh	r0, [r4, #16]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 8007da4:	2002      	movs	r0, #2
 8007da6:	f7fc fd26 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 8007daa:	f105 0114 	add.w	r1, r5, #20
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8007dae:	8260      	strh	r0, [r4, #18]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 8007db0:	2002      	movs	r0, #2
 8007db2:	f7fc fd20 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8007db6:	f105 0116 	add.w	r1, r5, #22
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8007dba:	82a0      	strh	r0, [r4, #20]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8007dbc:	2002      	movs	r0, #2
 8007dbe:	f7fc fd1a 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8007dc2:	f105 0118 	add.w	r1, r5, #24
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8007dc6:	82e0      	strh	r0, [r4, #22]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8007dc8:	2002      	movs	r0, #2
 8007dca:	f7fc fd14 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 8007dce:	f105 011a 	add.w	r1, r5, #26
	pdata->result__dss_actual_effective_spads_sd1 =
 8007dd2:	8320      	strh	r0, [r4, #24]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 8007dd4:	2002      	movs	r0, #2
 8007dd6:	f7fc fd0e 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 8007dda:	f105 011c 	add.w	r1, r5, #28
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8007dde:	8360      	strh	r0, [r4, #26]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 8007de0:	2002      	movs	r0, #2
 8007de2:	f7fc fd08 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 8007de6:	f105 011e 	add.w	r1, r5, #30
	pdata->result__ambient_count_rate_mcps_sd1 =
 8007dea:	83a0      	strh	r0, [r4, #28]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 8007dec:	2002      	movs	r0, #2
 8007dee:	f7fc fd02 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 8007df2:	f105 0120 	add.w	r1, r5, #32
	pdata->result__sigma_sd1 =
 8007df6:	83e0      	strh	r0, [r4, #30]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 8007df8:	2002      	movs	r0, #2
 8007dfa:	f7fc fcfc 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 8007dfe:	f105 0122 	add.w	r1, r5, #34	; 0x22
	pdata->result__phase_sd1 =
 8007e02:	8420      	strh	r0, [r4, #32]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 8007e04:	2002      	movs	r0, #2
 8007e06:	f7fc fcf6 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 8007e0a:	f105 0124 	add.w	r1, r5, #36	; 0x24
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8007e0e:	8460      	strh	r0, [r4, #34]	; 0x22
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 8007e10:	2002      	movs	r0, #2
 8007e12:	f7fc fcf0 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 8007e16:	f105 0126 	add.w	r1, r5, #38	; 0x26
	pdata->result__spare_0_sd1 =
 8007e1a:	84a0      	strh	r0, [r4, #36]	; 0x24
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 8007e1c:	2002      	movs	r0, #2
 8007e1e:	f7fc fcea 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 8007e22:	f105 0128 	add.w	r1, r5, #40	; 0x28
	pdata->result__spare_1_sd1 =
 8007e26:	84e0      	strh	r0, [r4, #38]	; 0x26
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 8007e28:	2002      	movs	r0, #2
 8007e2a:	f7fc fce4 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
 8007e2e:	8520      	strh	r0, [r4, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8007e30:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 8007e34:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8007e38:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8007e3c:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8007e40:	2000      	movs	r0, #0
}
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007e44:	f06f 0009 	mvn.w	r0, #9
 8007e48:	e7fb      	b.n	8007e42 <VL53LX_i2c_decode_system_results+0x116>

08007e4a <VL53LX_i2c_decode_core_results>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 8007e4a:	2820      	cmp	r0, #32
{
 8007e4c:	b538      	push	{r3, r4, r5, lr}
 8007e4e:	460d      	mov	r5, r1
 8007e50:	4614      	mov	r4, r2
	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 8007e52:	d932      	bls.n	8007eba <VL53LX_i2c_decode_core_results+0x70>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 8007e54:	2004      	movs	r0, #4
 8007e56:	f7fc fcf8 	bl	800484a <VL53LX_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 8007e5a:	1d29      	adds	r1, r5, #4
	pdata->result_core__ambient_window_events_sd0 =
 8007e5c:	6020      	str	r0, [r4, #0]
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 8007e5e:	2004      	movs	r0, #4
 8007e60:	f7fc fcf3 	bl	800484a <VL53LX_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 8007e64:	f105 0108 	add.w	r1, r5, #8
	pdata->result_core__ranging_total_events_sd0 =
 8007e68:	6060      	str	r0, [r4, #4]
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 8007e6a:	2004      	movs	r0, #4
 8007e6c:	f7fc fcf7 	bl	800485e <VL53LX_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 8007e70:	f105 010c 	add.w	r1, r5, #12
	pdata->result_core__signal_total_events_sd0 =
 8007e74:	60a0      	str	r0, [r4, #8]
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 8007e76:	2004      	movs	r0, #4
 8007e78:	f7fc fce7 	bl	800484a <VL53LX_i2c_decode_uint32_t>
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 8007e7c:	f105 0110 	add.w	r1, r5, #16
	pdata->result_core__total_periods_elapsed_sd0 =
 8007e80:	60e0      	str	r0, [r4, #12]
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 8007e82:	2004      	movs	r0, #4
 8007e84:	f7fc fce1 	bl	800484a <VL53LX_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 8007e88:	f105 0114 	add.w	r1, r5, #20
	pdata->result_core__ambient_window_events_sd1 =
 8007e8c:	6120      	str	r0, [r4, #16]
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 8007e8e:	2004      	movs	r0, #4
 8007e90:	f7fc fcdb 	bl	800484a <VL53LX_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 8007e94:	f105 0118 	add.w	r1, r5, #24
	pdata->result_core__ranging_total_events_sd1 =
 8007e98:	6160      	str	r0, [r4, #20]
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 8007e9a:	2004      	movs	r0, #4
 8007e9c:	f7fc fcdf 	bl	800485e <VL53LX_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 8007ea0:	f105 011c 	add.w	r1, r5, #28
	pdata->result_core__signal_total_events_sd1 =
 8007ea4:	61a0      	str	r0, [r4, #24]
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 8007ea6:	2004      	movs	r0, #4
 8007ea8:	f7fc fccf 	bl	800484a <VL53LX_i2c_decode_uint32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
 8007eac:	61e0      	str	r0, [r4, #28]
	pdata->result_core__spare_0 =
 8007eae:	f895 3020 	ldrb.w	r3, [r5, #32]
 8007eb2:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8007eb6:	2000      	movs	r0, #0
}
 8007eb8:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007eba:	f06f 0009 	mvn.w	r0, #9
 8007ebe:	e7fb      	b.n	8007eb8 <VL53LX_i2c_decode_core_results+0x6e>

08007ec0 <VL53LX_i2c_decode_debug_results>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8007ec0:	2837      	cmp	r0, #55	; 0x37
{
 8007ec2:	b538      	push	{r3, r4, r5, lr}
 8007ec4:	460d      	mov	r5, r1
 8007ec6:	4614      	mov	r4, r2
	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8007ec8:	f240 80d0 	bls.w	800806c <VL53LX_i2c_decode_debug_results+0x1ac>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 8007ecc:	2002      	movs	r0, #2
 8007ece:	f7fc fc92 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->phasecal_result__reference_phase =
 8007ed2:	8020      	strh	r0, [r4, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8007ed4:	78ab      	ldrb	r3, [r5, #2]
 8007ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->phasecal_result__vcsel_start =
 8007eda:	70a3      	strb	r3, [r4, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8007edc:	78eb      	ldrb	r3, [r5, #3]
 8007ede:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8007ee2:	70e3      	strb	r3, [r4, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8007ee4:	792b      	ldrb	r3, [r5, #4]
 8007ee6:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_char_result__ref_location =
 8007eea:	7123      	strb	r3, [r4, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8007eec:	796b      	ldrb	r3, [r5, #5]
 8007eee:	f003 0301 	and.w	r3, r3, #1
	pdata->vhv_result__coldboot_status =
 8007ef2:	7163      	strb	r3, [r4, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8007ef4:	79ab      	ldrb	r3, [r5, #6]
 8007ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__search_result =
 8007efa:	71a3      	strb	r3, [r4, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8007efc:	79eb      	ldrb	r3, [r5, #7]
 8007efe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__latest_setting =
 8007f02:	71e3      	strb	r3, [r4, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8007f04:	f105 0108 	add.w	r1, r5, #8
 8007f08:	2002      	movs	r0, #2
 8007f0a:	f7fc fc74 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
 8007f0e:	f3c0 0009 	ubfx	r0, r0, #0, #10
	pdata->result__osc_calibrate_val =
 8007f12:	8120      	strh	r0, [r4, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8007f14:	7aab      	ldrb	r3, [r5, #10]
 8007f16:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__powerdown_go1 =
 8007f1a:	72a3      	strb	r3, [r4, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8007f1c:	7aeb      	ldrb	r3, [r5, #11]
 8007f1e:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__ref_bg_ctrl =
 8007f22:	72e3      	strb	r3, [r4, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8007f24:	7b2b      	ldrb	r3, [r5, #12]
 8007f26:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__regdvdd1v2_ctrl =
 8007f2a:	7323      	strb	r3, [r4, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8007f2c:	7b6b      	ldrb	r3, [r5, #13]
 8007f2e:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__osc_slow_ctrl =
 8007f32:	7363      	strb	r3, [r4, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8007f34:	7bab      	ldrb	r3, [r5, #14]
 8007f36:	f003 0301 	and.w	r3, r3, #1
	pdata->test_mode__status =
 8007f3a:	73a3      	strb	r3, [r4, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8007f3c:	7beb      	ldrb	r3, [r5, #15]
 8007f3e:	f003 0303 	and.w	r3, r3, #3
	pdata->firmware__system_status =
 8007f42:	73e3      	strb	r3, [r4, #15]
	pdata->firmware__mode_status =
 8007f44:	7c2b      	ldrb	r3, [r5, #16]
 8007f46:	7423      	strb	r3, [r4, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8007f48:	7c6b      	ldrb	r3, [r5, #17]
 8007f4a:	7463      	strb	r3, [r4, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8007f4c:	f105 0112 	add.w	r1, r5, #18
 8007f50:	2002      	movs	r0, #2
 8007f52:	f7fc fc50 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
 8007f56:	f3c0 000b 	ubfx	r0, r0, #0, #12
	pdata->firmware__cal_repeat_rate_counter =
 8007f5a:	8260      	strh	r0, [r4, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8007f5c:	f105 0116 	add.w	r1, r5, #22
 8007f60:	2002      	movs	r0, #2
 8007f62:	f7fc fc48 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8007f66:	f105 0118 	add.w	r1, r5, #24
	pdata->gph__system__thresh_high =
 8007f6a:	82a0      	strh	r0, [r4, #20]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8007f6c:	2002      	movs	r0, #2
 8007f6e:	f7fc fc42 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
 8007f72:	82e0      	strh	r0, [r4, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8007f74:	7eab      	ldrb	r3, [r5, #26]
 8007f76:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__system__enable_xtalk_per_quadrant =
 8007f7a:	7623      	strb	r3, [r4, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8007f7c:	7eeb      	ldrb	r3, [r5, #27]
 8007f7e:	f003 0307 	and.w	r3, r3, #7
	pdata->gph__spare_0 =
 8007f82:	7663      	strb	r3, [r4, #25]
	pdata->gph__sd_config__woi_sd0 =
 8007f84:	7f2b      	ldrb	r3, [r5, #28]
 8007f86:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8007f88:	7f6b      	ldrb	r3, [r5, #29]
 8007f8a:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8007f8c:	7fab      	ldrb	r3, [r5, #30]
 8007f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd0 =
 8007f92:	7723      	strb	r3, [r4, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8007f94:	7feb      	ldrb	r3, [r5, #31]
 8007f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd1 =
 8007f9a:	7763      	strb	r3, [r4, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8007f9c:	f895 3020 	ldrb.w	r3, [r5, #32]
 8007fa0:	f003 0303 	and.w	r3, r3, #3
	pdata->gph__sd_config__first_order_select =
 8007fa4:	77a3      	strb	r3, [r4, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8007fa6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8007faa:	f003 030f 	and.w	r3, r3, #15
	pdata->gph__sd_config__quantifier =
 8007fae:	77e3      	strb	r3, [r4, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8007fb0:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8007fb4:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8007fb8:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8007fbc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8007fc0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8007fc4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8007fc8:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8007fcc:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__gph_id =
 8007fd0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8007fd4:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8007fd8:	f003 0303 	and.w	r3, r3, #3
	pdata->system__interrupt_set =
 8007fdc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8007fe0:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 8007fe4:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__enables =
 8007fe8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8007fec:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8007ff0:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__clear =
 8007ff4:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8007ff8:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8007ffc:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__status =
 8008000:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8008004:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 8008008:	f003 0301 	and.w	r3, r3, #1
	pdata->mcu_to_host_bank__wr_access_en =
 800800c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8008010:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8008014:	f003 0301 	and.w	r3, r3, #1
	pdata->power_management__go1_reset_status =
 8008018:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800801c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8008020:	f003 0303 	and.w	r3, r3, #3
	pdata->pad_startup_mode__value_ro =
 8008024:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8008028:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800802c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->pad_startup_mode__value_ctrl =
 8008030:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8008034:	f105 012e 	add.w	r1, r5, #46	; 0x2e
 8008038:	2004      	movs	r0, #4
 800803a:	f7fc fc06 	bl	800484a <VL53LX_i2c_decode_uint32_t>
 800803e:	f3c0 0011 	ubfx	r0, r0, #0, #18
	pdata->pll_period_us =
 8008042:	62e0      	str	r0, [r4, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 8008044:	f105 0132 	add.w	r1, r5, #50	; 0x32
 8008048:	2004      	movs	r0, #4
 800804a:	f7fc fbfe 	bl	800484a <VL53LX_i2c_decode_uint32_t>
	pdata->interrupt_scheduler__data_out =
 800804e:	6320      	str	r0, [r4, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8008050:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 8008054:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__complete =
 8008058:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800805c:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 8008060:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__status =
 8008064:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8008068:	2000      	movs	r0, #0
}
 800806a:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800806c:	f06f 0009 	mvn.w	r0, #9
 8008070:	e7fb      	b.n	800806a <VL53LX_i2c_decode_debug_results+0x1aa>

08008072 <VL53LX_i2c_decode_nvm_copy_data>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 8008072:	2830      	cmp	r0, #48	; 0x30
{
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	460d      	mov	r5, r1
 8008078:	4614      	mov	r4, r2
	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 800807a:	f240 809c 	bls.w	80081b6 <VL53LX_i2c_decode_nvm_copy_data+0x144>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800807e:	780b      	ldrb	r3, [r1, #0]
	pdata->identification__model_id =
 8008080:	7013      	strb	r3, [r2, #0]
	pdata->identification__module_type =
 8008082:	784b      	ldrb	r3, [r1, #1]
 8008084:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8008086:	788b      	ldrb	r3, [r1, #2]
 8008088:	7093      	strb	r3, [r2, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 800808a:	3103      	adds	r1, #3
 800808c:	2002      	movs	r0, #2
 800808e:	f7fc fbb2 	bl	80047f6 <VL53LX_i2c_decode_uint16_t>
	pdata->identification__module_id =
 8008092:	80a0      	strh	r0, [r4, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8008094:	796b      	ldrb	r3, [r5, #5]
 8008096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim_max =
 800809a:	71a3      	strb	r3, [r4, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800809c:	79ab      	ldrb	r3, [r5, #6]
 800809e:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__fast_osc__freq_set =
 80080a2:	71e3      	strb	r3, [r4, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80080a4:	79eb      	ldrb	r3, [r5, #7]
 80080a6:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__vcsel_trim =
 80080aa:	7223      	strb	r3, [r4, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 80080ac:	7a2b      	ldrb	r3, [r5, #8]
 80080ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion =
 80080b2:	7263      	strb	r3, [r4, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 80080b4:	7a6b      	ldrb	r3, [r5, #9]
 80080b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion_max =
 80080ba:	72a3      	strb	r3, [r4, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 80080bc:	7aab      	ldrb	r3, [r5, #10]
 80080be:	f003 0301 	and.w	r3, r3, #1
	pdata->protected_laser_safety__lock_bit =
 80080c2:	72e3      	strb	r3, [r4, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 80080c4:	7aeb      	ldrb	r3, [r5, #11]
 80080c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->laser_safety__key =
 80080ca:	7323      	strb	r3, [r4, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 80080cc:	7b2b      	ldrb	r3, [r5, #12]
 80080ce:	f003 0301 	and.w	r3, r3, #1
	pdata->laser_safety__key_ro =
 80080d2:	7363      	strb	r3, [r4, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 80080d4:	7b6b      	ldrb	r3, [r5, #13]
 80080d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__clip =
 80080da:	73a3      	strb	r3, [r4, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 80080dc:	7bab      	ldrb	r3, [r5, #14]
 80080de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__mult =
 80080e2:	73e3      	strb	r3, [r4, #15]
	pdata->global_config__spad_enables_rtn_0 =
 80080e4:	7beb      	ldrb	r3, [r5, #15]
 80080e6:	7423      	strb	r3, [r4, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80080e8:	7c2b      	ldrb	r3, [r5, #16]
 80080ea:	7463      	strb	r3, [r4, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 80080ec:	7c6b      	ldrb	r3, [r5, #17]
 80080ee:	74a3      	strb	r3, [r4, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80080f0:	7cab      	ldrb	r3, [r5, #18]
 80080f2:	74e3      	strb	r3, [r4, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 80080f4:	7ceb      	ldrb	r3, [r5, #19]
 80080f6:	7523      	strb	r3, [r4, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80080f8:	7d2b      	ldrb	r3, [r5, #20]
 80080fa:	7563      	strb	r3, [r4, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 80080fc:	7d6b      	ldrb	r3, [r5, #21]
 80080fe:	75a3      	strb	r3, [r4, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8008100:	7dab      	ldrb	r3, [r5, #22]
 8008102:	75e3      	strb	r3, [r4, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8008104:	7deb      	ldrb	r3, [r5, #23]
 8008106:	7623      	strb	r3, [r4, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8008108:	7e2b      	ldrb	r3, [r5, #24]
 800810a:	7663      	strb	r3, [r4, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800810c:	7e6b      	ldrb	r3, [r5, #25]
 800810e:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8008110:	7eab      	ldrb	r3, [r5, #26]
 8008112:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8008114:	7eeb      	ldrb	r3, [r5, #27]
 8008116:	7723      	strb	r3, [r4, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8008118:	7f2b      	ldrb	r3, [r5, #28]
 800811a:	7763      	strb	r3, [r4, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800811c:	7f6b      	ldrb	r3, [r5, #29]
 800811e:	77a3      	strb	r3, [r4, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8008120:	7fab      	ldrb	r3, [r5, #30]
 8008122:	77e3      	strb	r3, [r4, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8008124:	7feb      	ldrb	r3, [r5, #31]
 8008126:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800812a:	f895 3020 	ldrb.w	r3, [r5, #32]
 800812e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8008132:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8008136:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800813a:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800813e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8008142:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8008146:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800814a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800814e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8008152:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8008156:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800815a:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 800815e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8008162:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 8008166:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800816a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800816e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8008172:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8008176:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800817a:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800817e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8008182:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8008186:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800818a:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800818e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8008192:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8008196:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800819a:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 800819e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 80081a2:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80081a6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 80081aa:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80081ae:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80081b2:	2000      	movs	r0, #0
}
 80081b4:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80081b6:	f06f 0009 	mvn.w	r0, #9
 80081ba:	e7fb      	b.n	80081b4 <VL53LX_i2c_decode_nvm_copy_data+0x142>

080081bc <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 80081bc:	b510      	push	{r4, lr}
 80081be:	b08e      	sub	sp, #56	; 0x38
 80081c0:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
		status = VL53LX_ReadMulti(
 80081c2:	2331      	movs	r3, #49	; 0x31
 80081c4:	aa01      	add	r2, sp, #4
 80081c6:	f240 110f 	movw	r1, #271	; 0x10f
 80081ca:	f7f9 f99f 	bl	800150c <VL53LX_ReadMulti>
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 80081ce:	b920      	cbnz	r0, 80081da <VL53LX_get_nvm_copy_data+0x1e>
		status = VL53LX_i2c_decode_nvm_copy_data(
 80081d0:	4622      	mov	r2, r4
 80081d2:	a901      	add	r1, sp, #4
 80081d4:	2031      	movs	r0, #49	; 0x31
 80081d6:	f7ff ff4c 	bl	8008072 <VL53LX_i2c_decode_nvm_copy_data>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 80081da:	b00e      	add	sp, #56	; 0x38
 80081dc:	bd10      	pop	{r4, pc}

080081de <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 80081de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e2:	4681      	mov	r9, r0
 80081e4:	4617      	mov	r7, r2
 80081e6:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
	uint64_t tmp0        = 0;
	uint64_t tmp1        = 0;
	uint64_t b_minus_amb = 0;
	uint64_t VL53LX_p_055   = 0;

	*psigma_est  = VL53LX_D_002;
 80081ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
{
 80081ec:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80081ee:	461d      	mov	r5, r3
	*psigma_est  = VL53LX_D_002;
 80081f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 80081f4:	460c      	mov	r4, r1
	*psigma_est  = VL53LX_D_002;
 80081f6:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 80081f8:	b920      	cbnz	r0, 8008204 <VL53LX_f_023+0x26>
	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80081fa:	f06f 000e 	mvn.w	r0, #14
		}

	}

	return status;
}
 80081fe:	b003      	add	sp, #12
 8008200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 8008204:	f7fd fe71 	bl	8005eea <VL53LX_calc_pll_period_mm>
		if (VL53LX_p_028 > VL53LX_p_032)
 8008208:	42be      	cmp	r6, r7
		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 800820a:	4680      	mov	r8, r0
 800820c:	46ba      	mov	sl, r7
 800820e:	f04f 0b00 	mov.w	fp, #0
 8008212:	4630      	mov	r0, r6
 8008214:	f04f 0100 	mov.w	r1, #0
		if (VL53LX_p_028 > VL53LX_p_032)
 8008218:	f240 80cf 	bls.w	80083ba <VL53LX_f_023+0x1dc>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 800821c:	ebb6 060a 	subs.w	r6, r6, sl
 8008220:	eb61 070b 	sbc.w	r7, r1, fp
 8008224:	462a      	mov	r2, r5
 8008226:	2300      	movs	r3, #0
 8008228:	e9cd 2300 	strd	r2, r3, [sp]
		if (VL53LX_p_007 > VL53LX_p_001)
 800822c:	42ac      	cmp	r4, r5
 800822e:	4622      	mov	r2, r4
 8008230:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8008234:	e9dd 4500 	ldrd	r4, r5, [sp]
		if (VL53LX_p_007 > VL53LX_p_001)
 8008238:	f240 80c4 	bls.w	80083c4 <VL53LX_f_023+0x1e6>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 800823c:	1b14      	subs	r4, r2, r4
 800823e:	eb63 0505 	sbc.w	r5, r3, r5
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8008242:	4622      	mov	r2, r4
		if (b_minus_amb != 0) {
 8008244:	ea56 0407 	orrs.w	r4, r6, r7
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8008248:	462b      	mov	r3, r5
		if (b_minus_amb != 0) {
 800824a:	d0d6      	beq.n	80081fa <VL53LX_f_023+0x1c>
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 800824c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800824e:	eb1a 0404 	adds.w	r4, sl, r4
 8008252:	f14b 0500 	adc.w	r5, fp, #0
 8008256:	eb14 0a00 	adds.w	sl, r4, r0
 800825a:	eb45 0b01 	adc.w	fp, r5, r1
 800825e:	2100      	movs	r1, #0
 8008260:	4559      	cmp	r1, fp
 8008262:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008266:	bf08      	it	eq
 8008268:	4550      	cmpeq	r0, sl
			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 800826a:	fba2 4502 	umull	r4, r5, r2, r2
 800826e:	bf38      	it	cc
 8008270:	468b      	movcc	fp, r1
 8008272:	fb02 f103 	mul.w	r1, r2, r3
 8008276:	eb05 0541 	add.w	r5, r5, r1, lsl #1
			tmp1 = tmp1 << 8;
 800827a:	ea4f 2305 	mov.w	r3, r5, lsl #8
 800827e:	ea43 6114 	orr.w	r1, r3, r4, lsr #24
 8008282:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008286:	bf38      	it	cc
 8008288:	4682      	movcc	sl, r0
 800828a:	f04f 32ff 	mov.w	r2, #4294967295
 800828e:	428b      	cmp	r3, r1
 8008290:	ea4f 2004 	mov.w	r0, r4, lsl #8
 8008294:	bf08      	it	eq
 8008296:	4282      	cmpeq	r2, r0
 8008298:	bf3c      	itt	cc
 800829a:	4610      	movcc	r0, r2
 800829c:	4619      	movcc	r1, r3
			tmp1 = do_division_u(tmp1, b_minus_amb);
 800829e:	4632      	mov	r2, r6
 80082a0:	463b      	mov	r3, r7
 80082a2:	f7f8 fcd9 	bl	8000c58 <__aeabi_uldivmod>
			tmp1 = do_division_u(tmp1, b_minus_amb);
 80082a6:	4632      	mov	r2, r6
 80082a8:	463b      	mov	r3, r7
 80082aa:	f7f8 fcd5 	bl	8000c58 <__aeabi_uldivmod>
			tmp0 = tmp1 * tmp0;
 80082ae:	237f      	movs	r3, #127	; 0x7f
 80082b0:	428b      	cmp	r3, r1
 80082b2:	f04f 32ff 	mov.w	r2, #4294967295
 80082b6:	bf08      	it	eq
 80082b8:	4282      	cmpeq	r2, r0
 80082ba:	bf3c      	itt	cc
 80082bc:	4610      	movcc	r0, r2
 80082be:	4619      	movcc	r1, r3
 80082c0:	fb00 f30b 	mul.w	r3, r0, fp
 80082c4:	fb0a 3301 	mla	r3, sl, r1, r3
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80082c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80082ca:	990c      	ldr	r1, [sp, #48]	; 0x30
			tmp0 = tmp1 * tmp0;
 80082cc:	fba0 450a 	umull	r4, r5, r0, sl
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80082d0:	eb12 0a01 	adds.w	sl, r2, r1
 80082d4:	9910      	ldr	r1, [sp, #64]	; 0x40
			tmp0 = tmp1 * tmp0;
 80082d6:	441d      	add	r5, r3
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80082d8:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80082dc:	f143 0b00 	adc.w	fp, r3, #0
 80082e0:	eb1a 0201 	adds.w	r2, sl, r1
 80082e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80082e6:	f14b 0300 	adc.w	r3, fp, #0
 80082ea:	eb12 0a01 	adds.w	sl, r2, r1
 80082ee:	f143 0b00 	adc.w	fp, r3, #0
 80082f2:	2100      	movs	r1, #0
 80082f4:	4559      	cmp	r1, fp
 80082f6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80082fa:	bf08      	it	eq
 80082fc:	4550      	cmpeq	r0, sl
 80082fe:	bf3c      	itt	cc
 8008300:	4682      	movcc	sl, r0
 8008302:	468b      	movcc	fp, r1
			tmp1 = tmp1 << 8;
 8008304:	ea4f 210b 	mov.w	r1, fp, lsl #8
 8008308:	ea4f 200a 	mov.w	r0, sl, lsl #8
 800830c:	ea41 611a 	orr.w	r1, r1, sl, lsr #24
			tmp0 = tmp1 + tmp0;
 8008310:	eb14 0a00 	adds.w	sl, r4, r0
 8008314:	eb45 0b01 	adc.w	fp, r5, r1
			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8008318:	f1bb 0f01 	cmp.w	fp, #1
 800831c:	bf08      	it	eq
 800831e:	f1ba 0f00 	cmpeq.w	sl, #0
 8008322:	d353      	bcc.n	80083cc <VL53LX_f_023+0x1ee>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8008324:	463b      	mov	r3, r7
 8008326:	4632      	mov	r2, r6
 8008328:	4650      	mov	r0, sl
 800832a:	4659      	mov	r1, fp
 800832c:	f7f8 fc94 	bl	8000c58 <__aeabi_uldivmod>
 8008330:	460b      	mov	r3, r1
				tmp0 = tmp0 * pll_period_mm;
 8008332:	fba0 0108 	umull	r0, r1, r0, r8
 8008336:	fb08 1103 	mla	r1, r8, r3, r1
			if (tmp0 > (uint64_t)VL53LX_D_006)
 800833a:	2800      	cmp	r0, #0
 800833c:	f171 0300 	sbcs.w	r3, r1, #0
 8008340:	db4d      	blt.n	80083de <VL53LX_f_023+0x200>
			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8008342:	2901      	cmp	r1, #1
 8008344:	bf08      	it	eq
 8008346:	2800      	cmpeq	r0, #0
 8008348:	d34e      	bcc.n	80083e8 <VL53LX_f_023+0x20a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 800834a:	4632      	mov	r2, r6
 800834c:	463b      	mov	r3, r7
 800834e:	f7f8 fc83 	bl	8000c58 <__aeabi_uldivmod>
				tmp0 = do_division_u(tmp0, 4);
 8008352:	0882      	lsrs	r2, r0, #2
 8008354:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
				tmp0 = tmp0 * pll_period_mm;
 8008358:	fba2 6708 	umull	r6, r7, r2, r8
				tmp0 = do_division_u(tmp0, 4);
 800835c:	0889      	lsrs	r1, r1, #2
				tmp0 = tmp0 * pll_period_mm;
 800835e:	fb08 7701 	mla	r7, r8, r1, r7
			if (tmp0 > (uint64_t)VL53LX_D_006)
 8008362:	2e00      	cmp	r6, #0
 8008364:	f177 0300 	sbcs.w	r3, r7, #0
				tmp0 = (uint64_t)VL53LX_D_006;
 8008368:	bfbc      	itt	lt
 800836a:	f06f 4700 	mvnlt.w	r7, #2147483648	; 0x80000000
 800836e:	f04f 36ff 	movlt.w	r6, #4294967295
			tmp0 = tmp0 >> 2;
 8008372:	08b2      	lsrs	r2, r6, #2
 8008374:	08bd      	lsrs	r5, r7, #2
 8008376:	2300      	movs	r3, #0
 8008378:	ea42 7487 	orr.w	r4, r2, r7, lsl #30
 800837c:	42ab      	cmp	r3, r5
 800837e:	f04f 32ff 	mov.w	r2, #4294967295
 8008382:	bf08      	it	eq
 8008384:	42a2      	cmpeq	r2, r4
			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8008386:	ea4f 10c9 	mov.w	r0, r9, lsl #7
			tmp1 = tmp1 * tmp1;
 800838a:	fba0 0100 	umull	r0, r1, r0, r0
 800838e:	bf3c      	itt	cc
 8008390:	4614      	movcc	r4, r2
 8008392:	461d      	movcc	r5, r3
			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 8008394:	1906      	adds	r6, r0, r4
 8008396:	f04f 0300 	mov.w	r3, #0
 800839a:	eb41 0705 	adc.w	r7, r1, r5
 800839e:	42bb      	cmp	r3, r7
 80083a0:	f04f 32ff 	mov.w	r2, #4294967295
 80083a4:	bf08      	it	eq
 80083a6:	42b2      	cmpeq	r2, r6
 80083a8:	bf38      	it	cc
 80083aa:	4616      	movcc	r6, r2
 80083ac:	4630      	mov	r0, r6
 80083ae:	f7fd fd33 	bl	8005e18 <VL53LX_isqrt>
			*psigma_est = (uint16_t)sigma_int;
 80083b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083b4:	8018      	strh	r0, [r3, #0]
			status = VL53LX_ERROR_NONE;
 80083b6:	2000      	movs	r0, #0
 80083b8:	e721      	b.n	80081fe <VL53LX_f_023+0x20>
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 80083ba:	ebba 0600 	subs.w	r6, sl, r0
 80083be:	eb6b 0701 	sbc.w	r7, fp, r1
 80083c2:	e72f      	b.n	8008224 <VL53LX_f_023+0x46>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 80083c4:	1aa4      	subs	r4, r4, r2
 80083c6:	eb65 0503 	sbc.w	r5, r5, r3
 80083ca:	e73a      	b.n	8008242 <VL53LX_f_023+0x64>
				tmp0 = tmp0 * pll_period_mm;
 80083cc:	fbaa 0108 	umull	r0, r1, sl, r8
 80083d0:	fb08 110b 	mla	r1, r8, fp, r1
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80083d4:	4632      	mov	r2, r6
 80083d6:	463b      	mov	r3, r7
 80083d8:	f7f8 fc3e 	bl	8000c58 <__aeabi_uldivmod>
 80083dc:	e7ad      	b.n	800833a <VL53LX_f_023+0x15c>
				tmp0 = (uint64_t)VL53LX_D_006;
 80083de:	f04f 30ff 	mov.w	r0, #4294967295
 80083e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083e6:	e7b0      	b.n	800834a <VL53LX_f_023+0x16c>
				tmp0 = tmp0 * pll_period_mm;
 80083e8:	fba0 4508 	umull	r4, r5, r0, r8
 80083ec:	fb08 5501 	mla	r5, r8, r1, r5
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80083f0:	4632      	mov	r2, r6
 80083f2:	463b      	mov	r3, r7
 80083f4:	4620      	mov	r0, r4
 80083f6:	4629      	mov	r1, r5
 80083f8:	f7f8 fc2e 	bl	8000c58 <__aeabi_uldivmod>
				tmp0 = do_division_u(tmp0, 4);
 80083fc:	0886      	lsrs	r6, r0, #2
 80083fe:	ea46 7681 	orr.w	r6, r6, r1, lsl #30
 8008402:	088f      	lsrs	r7, r1, #2
 8008404:	e7ad      	b.n	8008362 <VL53LX_f_023+0x184>

08008406 <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 8008406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008408:	460e      	mov	r6, r1

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 800840a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
{
 800840e:	4605      	mov	r5, r0
	status = VL53LX_WaitUs(
 8008410:	f7f9 f8f0 	bl	80015f4 <VL53LX_WaitUs>
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 8008414:	4604      	mov	r4, r0
 8008416:	b968      	cbnz	r0, 8008434 <VL53LX_poll_for_boot_completion+0x2e>
		status =
 8008418:	2301      	movs	r3, #1
 800841a:	e9cd 3300 	strd	r3, r3, [sp]
 800841e:	22e5      	movs	r2, #229	; 0xe5
 8008420:	4631      	mov	r1, r6
 8008422:	4628      	mov	r0, r5
 8008424:	f7f9 f8f0 	bl	8001608 <VL53LX_WaitValueMaskEx>
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 8008428:	4604      	mov	r4, r0
 800842a:	b918      	cbnz	r0, 8008434 <VL53LX_poll_for_boot_completion+0x2e>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 800842c:	2103      	movs	r1, #3
 800842e:	4628      	mov	r0, r5
 8008430:	f7fc f856 	bl	80044e0 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
}
 8008434:	4620      	mov	r0, r4
 8008436:	b002      	add	sp, #8
 8008438:	bd70      	pop	{r4, r5, r6, pc}

0800843a <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 800843a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800843e:	4615      	mov	r5, r2


	VL53LX_Error status = VL53LX_ERROR_NONE;

	uint8_t row = 0;
	uint8_t col = 0;
 8008440:	aa04      	add	r2, sp, #16
{
 8008442:	461f      	mov	r7, r3
	uint8_t row = 0;
 8008444:	2300      	movs	r3, #0
{
 8008446:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
	uint8_t col = 0;
 800844a:	f802 3d01 	strb.w	r3, [r2, #-1]!
{
 800844e:	4606      	mov	r6, r0
 8008450:	460c      	mov	r4, r1




	if (status == VL53LX_ERROR_NONE) {
		VL53LX_decode_row_col(
 8008452:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
	uint8_t row = 0;
 8008456:	f88d 300e 	strb.w	r3, [sp, #14]
		VL53LX_decode_row_col(
 800845a:	f10d 010e 	add.w	r1, sp, #14
 800845e:	f7fd fe3b 	bl	80060d8 <VL53LX_decode_row_col>
 8008462:	f89d a00f 	ldrb.w	sl, [sp, #15]
 8008466:	f89d 000e 	ldrb.w	r0, [sp, #14]
	if (status == VL53LX_ERROR_NONE) {
		bound_l_x =  (2 * bound_l_x) - 15 +
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 800846a:	f99d c030 	ldrsb.w	ip, [sp, #48]	; 0x30
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 800846e:	f019 0f10 	tst.w	r9, #16
 8008472:	ea4f 1159 	mov.w	r1, r9, lsr #5
			bound_l_x = (int16_t) col -
 8008476:	bf18      	it	ne
 8008478:	f10a 38ff 	addne.w	r8, sl, #4294967295
 800847c:	f009 020f 	and.w	r2, r9, #15
			bound_l_x = (int16_t) col -
 8008480:	bf0c      	ite	eq
 8008482:	ebaa 0801 	subeq.w	r8, sl, r1
			bound_l_x = (int16_t) col -
 8008486:	eba8 0801 	subne.w	r8, r8, r1
		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 800848a:	f019 0f01 	tst.w	r9, #1
 800848e:	ea4f 0e52 	mov.w	lr, r2, lsr #1
			bound_d_y = (int16_t) row -
 8008492:	bf1a      	itte	ne
 8008494:	f100 32ff 	addne.w	r2, r0, #4294967295
 8008498:	eba2 020e 	subne.w	r2, r2, lr
			(((int16_t)roi_xy_size & 0x0f) / 2);
 800849c:	2302      	moveq	r3, #2
		bound_u_y =  (2 * bound_u_y) - 15 +
 800849e:	fa1f fc8c 	uxth.w	ip, ip
			(((int16_t)roi_xy_size & 0x0f) / 2);
 80084a2:	bf04      	itt	eq
 80084a4:	fb92 f2f3 	sdiveq	r2, r2, r3
			bound_d_y = (int16_t) row -
 80084a8:	1a82      	subeq	r2, r0, r2
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 80084aa:	4462      	add	r2, ip
		bound_l_x =  (2 * bound_l_x) - 15 +
 80084ac:	b2bf      	uxth	r7, r7
		bound_d_y =  (2 * bound_d_y) - 15 +
 80084ae:	0052      	lsls	r2, r2, #1
		bound_l_x =  (2 * bound_l_x) - 15 +
 80084b0:	44b8      	add	r8, r7
		bound_d_y =  (2 * bound_d_y) - 15 +
 80084b2:	3a0f      	subs	r2, #15
		bound_l_x =  (2 * bound_l_x) - 15 +
 80084b4:	ea4f 0848 	mov.w	r8, r8, lsl #1



	if (status == VL53LX_ERROR_NONE) {
		xtalk_rate_ll  = ((int64_t)bound_l_x *
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80084b8:	b212      	sxth	r2, r2
		bound_l_x =  (2 * bound_l_x) - 15 +
 80084ba:	f1a8 080f 	sub.w	r8, r8, #15
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80084be:	fb82 2305 	smull	r2, r3, r2, r5
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80084c2:	fbc8 2384 	smlalbb	r2, r3, r8, r4
					((int64_t)ygradient));
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 80084c6:	f112 0801 	adds.w	r8, r2, #1
 80084ca:	f143 0900 	adc.w	r9, r3, #0
 80084ce:	e9cd 8900 	strd	r8, r9, [sp]
 80084d2:	9b01      	ldr	r3, [sp, #4]
		bound_u_y =  (2 * bound_u_y) - 15 +
 80084d4:	4460      	add	r0, ip
		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 80084d6:	fa1f fa8a 	uxth.w	sl, sl
		bound_u_y =  (2 * bound_u_y) - 15 +
 80084da:	4470      	add	r0, lr
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 80084dc:	ea4f 78d3 	mov.w	r8, r3, lsr #31
		bound_r_x =  (2 * bound_r_x) - 15 +
 80084e0:	4457      	add	r7, sl
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 80084e2:	e9dd 2300 	ldrd	r2, r3, [sp]
		bound_u_y =  (2 * bound_u_y) - 15 +
 80084e6:	0040      	lsls	r0, r0, #1
		bound_r_x =  (2 * bound_r_x) - 15 +
 80084e8:	440f      	add	r7, r1
		bound_u_y =  (2 * bound_u_y) - 15 +
 80084ea:	380f      	subs	r0, #15
		bound_r_x =  (2 * bound_r_x) - 15 +
 80084ec:	007f      	lsls	r7, r7, #1
		xtalk_rate_ll += ((int64_t)mean_offset * 4);

		xtalk_rate_ur  = ((int64_t)bound_r_x *
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80084ee:	b200      	sxth	r0, r0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 80084f0:	eb12 0208 	adds.w	r2, r2, r8
		bound_r_x =  (2 * bound_r_x) - 15 +
 80084f4:	f1a7 070f 	sub.w	r7, r7, #15
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80084f8:	fb80 0105 	smull	r0, r1, r0, r5
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80084fc:	fbc4 0187 	smlalbb	r0, r1, r4, r7
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8008500:	f143 0300 	adc.w	r3, r3, #0
 8008504:	105b      	asrs	r3, r3, #1
 8008506:	ea4f 0232 	mov.w	r2, r2, rrx
			((int64_t)ygradient));
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 800850a:	1c45      	adds	r5, r0, #1
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 800850c:	ea4f 7996 	mov.w	r9, r6, lsr #30
 8008510:	ea4f 0886 	mov.w	r8, r6, lsl #2
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8008514:	f141 0600 	adc.w	r6, r1, #0
 8008518:	0ff4      	lsrs	r4, r6, #31
 800851a:	1928      	adds	r0, r5, r4
 800851c:	f146 0100 	adc.w	r1, r6, #0
 8008520:	104d      	asrs	r5, r1, #1
 8008522:	ea4f 0430 	mov.w	r4, r0, rrx
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8008526:	eb12 0608 	adds.w	r6, r2, r8
 800852a:	eb43 0709 	adc.w	r7, r3, r9
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 800852e:	eb14 0008 	adds.w	r0, r4, r8
 8008532:	eb45 0109 	adc.w	r1, r5, r9
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
		xtalk_avg = do_division_s(
 8008536:	1832      	adds	r2, r6, r0
 8008538:	eb47 0301 	adc.w	r3, r7, r1
 800853c:	1c54      	adds	r4, r2, #1
 800853e:	f143 0500 	adc.w	r5, r3, #0
 8008542:	0fe9      	lsrs	r1, r5, #31
 8008544:	1862      	adds	r2, r4, r1
 8008546:	f145 0300 	adc.w	r3, r5, #0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 800854a:	105b      	asrs	r3, r3, #1
 800854c:	ea4f 0232 	mov.w	r2, r2, rrx
 8008550:	4611      	mov	r1, r2
 8008552:	2900      	cmp	r1, #0
 8008554:	461a      	mov	r2, r3
 8008556:	f172 0300 	sbcs.w	r3, r2, #0
 800855a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800855c:	bfb8      	it	lt
 800855e:	2100      	movlt	r1, #0
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
}
 8008560:	2000      	movs	r0, #0
	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8008562:	6019      	str	r1, [r3, #0]
}
 8008564:	b004      	add	sp, #16
 8008566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800856a <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 800856a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800856e:	461e      	mov	r6, r3
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8008570:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 8008574:	4604      	mov	r4, r0
 8008576:	460f      	mov	r7, r1
	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8008578:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800857c:	2100      	movs	r1, #0
 800857e:	fbe3 0102 	umlal	r0, r1, r3, r2
 8008582:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008586:	2300      	movs	r3, #0
 8008588:	f7f8 fb66 	bl	8000c58 <__aeabi_uldivmod>




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 800858c:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
	xtalk_total_events = xtalk_events_per_spad *
 8008590:	fba0 4502 	umull	r4, r5, r0, r2
 8008594:	fb01 5502 	mla	r5, r1, r2, r5

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8008598:	0a22      	lsrs	r2, r4, #8
 800859a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 800859e:	f512 6480 	adds.w	r4, r2, #1024	; 0x400
	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 80085a2:	ea4f 2315 	mov.w	r3, r5, lsr #8
	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 80085a6:	f143 0500 	adc.w	r5, r3, #0
 80085aa:	0ae2      	lsrs	r2, r4, #11
 80085ac:	0ae9      	lsrs	r1, r5, #11
 80085ae:	2300      	movs	r3, #0
 80085b0:	ea42 5045 	orr.w	r0, r2, r5, lsl #21
 80085b4:	428b      	cmp	r3, r1
 80085b6:	f04f 32ff 	mov.w	r2, #4294967295
 80085ba:	7abd      	ldrb	r5, [r7, #10]
 80085bc:	bf08      	it	eq
 80085be:	4282      	cmpeq	r2, r0
 80085c0:	f107 040c 	add.w	r4, r7, #12
 80085c4:	bf3c      	itt	cc
 80085c6:	4610      	movcc	r0, r2
 80085c8:	4619      	movcc	r1, r3
 80085ca:	3618      	adds	r6, #24
 80085cc:	eb04 0585 	add.w	r5, r4, r5, lsl #2





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 80085d0:	42ac      	cmp	r4, r5
 80085d2:	d102      	bne.n	80085da <VL53LX_f_033+0x70>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80085d4:	2000      	movs	r0, #0
 80085d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 80085da:	f854 7b04 	ldr.w	r7, [r4], #4
 80085de:	fba7 2300 	umull	r2, r3, r7, r0
 80085e2:	fb07 3301 	mla	r3, r7, r1, r3
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 80085e6:	f512 7700 	adds.w	r7, r2, #512	; 0x200
 80085ea:	f143 0800 	adc.w	r8, r3, #0
 80085ee:	0aba      	lsrs	r2, r7, #10
 80085f0:	ea42 5288 	orr.w	r2, r2, r8, lsl #22
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 80085f4:	f846 2b04 	str.w	r2, [r6], #4
 80085f8:	e7ea      	b.n	80085d0 <VL53LX_f_033+0x66>
	...

080085fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80085fc:	4b05      	ldr	r3, [pc, #20]	; (8008614 <SystemInit+0x18>)
 80085fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008602:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8008606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800860a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800860e:	609a      	str	r2, [r3, #8]
#endif
}
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	e000ed00 	.word	0xe000ed00

08008618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008618:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800861a:	4a0e      	ldr	r2, [pc, #56]	; (8008654 <HAL_InitTick+0x3c>)
 800861c:	4e0e      	ldr	r6, [pc, #56]	; (8008658 <HAL_InitTick+0x40>)
{
 800861e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008624:	7830      	ldrb	r0, [r6, #0]
 8008626:	fbb3 f3f0 	udiv	r3, r3, r0
 800862a:	6810      	ldr	r0, [r2, #0]
 800862c:	fbb0 f0f3 	udiv	r0, r0, r3
 8008630:	f000 f8a8 	bl	8008784 <HAL_SYSTICK_Config>
 8008634:	4604      	mov	r4, r0
 8008636:	b950      	cbnz	r0, 800864e <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008638:	2d0f      	cmp	r5, #15
 800863a:	d808      	bhi.n	800864e <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800863c:	4602      	mov	r2, r0
 800863e:	4629      	mov	r1, r5
 8008640:	f04f 30ff 	mov.w	r0, #4294967295
 8008644:	f000 f85c 	bl	8008700 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008648:	6075      	str	r5, [r6, #4]
 800864a:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800864c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800864e:	2001      	movs	r0, #1
 8008650:	e7fc      	b.n	800864c <HAL_InitTick+0x34>
 8008652:	bf00      	nop
 8008654:	20000030 	.word	0x20000030
 8008658:	20000034 	.word	0x20000034

0800865c <HAL_Init>:
{
 800865c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800865e:	4b0b      	ldr	r3, [pc, #44]	; (800868c <HAL_Init+0x30>)
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008666:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800866e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008676:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008678:	2003      	movs	r0, #3
 800867a:	f000 f82f 	bl	80086dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800867e:	2000      	movs	r0, #0
 8008680:	f7ff ffca 	bl	8008618 <HAL_InitTick>
  HAL_MspInit();
 8008684:	f7f8 fe5a 	bl	800133c <HAL_MspInit>
}
 8008688:	2000      	movs	r0, #0
 800868a:	bd08      	pop	{r3, pc}
 800868c:	40023c00 	.word	0x40023c00

08008690 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008690:	4a03      	ldr	r2, [pc, #12]	; (80086a0 <HAL_IncTick+0x10>)
 8008692:	4b04      	ldr	r3, [pc, #16]	; (80086a4 <HAL_IncTick+0x14>)
 8008694:	6811      	ldr	r1, [r2, #0]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	440b      	add	r3, r1
 800869a:	6013      	str	r3, [r2, #0]
}
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	20002fb0 	.word	0x20002fb0
 80086a4:	20000034 	.word	0x20000034

080086a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80086a8:	4b01      	ldr	r3, [pc, #4]	; (80086b0 <HAL_GetTick+0x8>)
 80086aa:	6818      	ldr	r0, [r3, #0]
}
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	20002fb0 	.word	0x20002fb0

080086b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80086b8:	f7ff fff6 	bl	80086a8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80086bc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80086be:	bf1c      	itt	ne
 80086c0:	4b05      	ldrne	r3, [pc, #20]	; (80086d8 <HAL_Delay+0x24>)
 80086c2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80086c4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80086c6:	bf18      	it	ne
 80086c8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80086ca:	f7ff ffed 	bl	80086a8 <HAL_GetTick>
 80086ce:	1b40      	subs	r0, r0, r5
 80086d0:	42a0      	cmp	r0, r4
 80086d2:	d3fa      	bcc.n	80086ca <HAL_Delay+0x16>
  {
  }
}
 80086d4:	bd38      	pop	{r3, r4, r5, pc}
 80086d6:	bf00      	nop
 80086d8:	20000034 	.word	0x20000034

080086dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80086dc:	4a07      	ldr	r2, [pc, #28]	; (80086fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80086de:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80086e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80086e4:	041b      	lsls	r3, r3, #16
 80086e6:	0c1b      	lsrs	r3, r3, #16
 80086e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80086ec:	0200      	lsls	r0, r0, #8
 80086ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80086f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80086f8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80086fa:	4770      	bx	lr
 80086fc:	e000ed00 	.word	0xe000ed00

08008700 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008700:	4b17      	ldr	r3, [pc, #92]	; (8008760 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008702:	b570      	push	{r4, r5, r6, lr}
 8008704:	68dc      	ldr	r4, [r3, #12]
 8008706:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800870a:	f1c4 0507 	rsb	r5, r4, #7
 800870e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008710:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008714:	bf28      	it	cs
 8008716:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008718:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800871c:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800871e:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008722:	bf8c      	ite	hi
 8008724:	3c03      	subhi	r4, #3
 8008726:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008728:	ea21 0303 	bic.w	r3, r1, r3
 800872c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800872e:	fa06 f404 	lsl.w	r4, r6, r4
 8008732:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8008736:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008738:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800873c:	bfa8      	it	ge
 800873e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8008742:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008746:	bfbc      	itt	lt
 8008748:	f000 000f 	andlt.w	r0, r0, #15
 800874c:	4a05      	ldrlt	r2, [pc, #20]	; (8008764 <HAL_NVIC_SetPriority+0x64>)
 800874e:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008750:	bfaa      	itet	ge
 8008752:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008756:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008758:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800875c:	bd70      	pop	{r4, r5, r6, pc}
 800875e:	bf00      	nop
 8008760:	e000ed00 	.word	0xe000ed00
 8008764:	e000ed14 	.word	0xe000ed14

08008768 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008768:	2800      	cmp	r0, #0
 800876a:	db08      	blt.n	800877e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800876c:	0942      	lsrs	r2, r0, #5
 800876e:	2301      	movs	r3, #1
 8008770:	f000 001f 	and.w	r0, r0, #31
 8008774:	fa03 f000 	lsl.w	r0, r3, r0
 8008778:	4b01      	ldr	r3, [pc, #4]	; (8008780 <HAL_NVIC_EnableIRQ+0x18>)
 800877a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800877e:	4770      	bx	lr
 8008780:	e000e100 	.word	0xe000e100

08008784 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008784:	3801      	subs	r0, #1
 8008786:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800878a:	d20a      	bcs.n	80087a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800878c:	4b06      	ldr	r3, [pc, #24]	; (80087a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800878e:	4a07      	ldr	r2, [pc, #28]	; (80087ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008790:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008792:	21f0      	movs	r1, #240	; 0xf0
 8008794:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008798:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800879a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800879c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800879e:	601a      	str	r2, [r3, #0]
 80087a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80087a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	e000e010 	.word	0xe000e010
 80087ac:	e000ed00 	.word	0xe000ed00

080087b0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80087b0:	4b04      	ldr	r3, [pc, #16]	; (80087c4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80087b2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80087b4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80087b6:	bf0c      	ite	eq
 80087b8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80087bc:	f022 0204 	bicne.w	r2, r2, #4
 80087c0:	601a      	str	r2, [r3, #0]
  }
}
 80087c2:	4770      	bx	lr
 80087c4:	e000e010 	.word	0xe000e010

080087c8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80087c8:	4770      	bx	lr

080087ca <HAL_SYSTICK_IRQHandler>:
{
 80087ca:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80087cc:	f7ff fffc 	bl	80087c8 <HAL_SYSTICK_Callback>
}
 80087d0:	bd08      	pop	{r3, pc}
	...

080087d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80087da:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087dc:	f8df 818c 	ldr.w	r8, [pc, #396]	; 800896c <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80087e0:	4a60      	ldr	r2, [pc, #384]	; (8008964 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80087e2:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80087e4:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80087e8:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80087ea:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80087ec:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80087f0:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80087f2:	42ac      	cmp	r4, r5
 80087f4:	f040 80a6 	bne.w	8008944 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80087f8:	684c      	ldr	r4, [r1, #4]
 80087fa:	f024 0c10 	bic.w	ip, r4, #16
 80087fe:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8008802:	2603      	movs	r6, #3
 8008804:	f10c 37ff 	add.w	r7, ip, #4294967295
 8008808:	fa06 f60e 	lsl.w	r6, r6, lr
 800880c:	2f01      	cmp	r7, #1
 800880e:	ea6f 0606 	mvn.w	r6, r6
 8008812:	d811      	bhi.n	8008838 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 8008814:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008816:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800881a:	68cf      	ldr	r7, [r1, #12]
 800881c:	fa07 f70e 	lsl.w	r7, r7, lr
 8008820:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8008824:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8008826:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008828:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800882c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8008830:	409f      	lsls	r7, r3
 8008832:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8008836:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8008838:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800883a:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800883e:	688f      	ldr	r7, [r1, #8]
 8008840:	fa07 f70e 	lsl.w	r7, r7, lr
 8008844:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008848:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 800884c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800884e:	d116      	bne.n	800887e <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8008850:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8008854:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008858:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800885c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008860:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8008864:	f04f 0c0f 	mov.w	ip, #15
 8008868:	fa0c fc0b 	lsl.w	ip, ip, fp
 800886c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008870:	690f      	ldr	r7, [r1, #16]
 8008872:	fa07 f70b 	lsl.w	r7, r7, fp
 8008876:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800887a:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800887e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008880:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008882:	f004 0703 	and.w	r7, r4, #3
 8008886:	fa07 fe0e 	lsl.w	lr, r7, lr
 800888a:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800888e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008890:	00e6      	lsls	r6, r4, #3
 8008892:	d557      	bpl.n	8008944 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008894:	f04f 0b00 	mov.w	fp, #0
 8008898:	f8cd b00c 	str.w	fp, [sp, #12]
 800889c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80088a0:	4e31      	ldr	r6, [pc, #196]	; (8008968 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088a2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80088a6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80088aa:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80088ae:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80088b2:	9703      	str	r7, [sp, #12]
 80088b4:	9f03      	ldr	r7, [sp, #12]
 80088b6:	f023 0703 	bic.w	r7, r3, #3
 80088ba:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80088be:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80088c2:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80088c6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80088ca:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80088ce:	f04f 0c0f 	mov.w	ip, #15
 80088d2:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80088d6:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80088d8:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80088dc:	d039      	beq.n	8008952 <HAL_GPIO_Init+0x17e>
 80088de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80088e2:	42b0      	cmp	r0, r6
 80088e4:	d037      	beq.n	8008956 <HAL_GPIO_Init+0x182>
 80088e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80088ea:	42b0      	cmp	r0, r6
 80088ec:	d035      	beq.n	800895a <HAL_GPIO_Init+0x186>
 80088ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80088f2:	42b0      	cmp	r0, r6
 80088f4:	d033      	beq.n	800895e <HAL_GPIO_Init+0x18a>
 80088f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80088fa:	42b0      	cmp	r0, r6
 80088fc:	bf14      	ite	ne
 80088fe:	2607      	movne	r6, #7
 8008900:	2604      	moveq	r6, #4
 8008902:	fa06 f60e 	lsl.w	r6, r6, lr
 8008906:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 800890a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800890c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800890e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008910:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8008914:	bf0c      	ite	eq
 8008916:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8008918:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800891a:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800891c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800891e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8008922:	bf0c      	ite	eq
 8008924:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8008926:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8008928:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800892a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800892c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8008930:	bf0c      	ite	eq
 8008932:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8008934:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8008936:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8008938:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800893a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800893c:	bf54      	ite	pl
 800893e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8008940:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8008942:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008944:	3301      	adds	r3, #1
 8008946:	2b10      	cmp	r3, #16
 8008948:	f47f af4f 	bne.w	80087ea <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800894c:	b005      	add	sp, #20
 800894e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008952:	465e      	mov	r6, fp
 8008954:	e7d5      	b.n	8008902 <HAL_GPIO_Init+0x12e>
 8008956:	2601      	movs	r6, #1
 8008958:	e7d3      	b.n	8008902 <HAL_GPIO_Init+0x12e>
 800895a:	2602      	movs	r6, #2
 800895c:	e7d1      	b.n	8008902 <HAL_GPIO_Init+0x12e>
 800895e:	2603      	movs	r6, #3
 8008960:	e7cf      	b.n	8008902 <HAL_GPIO_Init+0x12e>
 8008962:	bf00      	nop
 8008964:	40013c00 	.word	0x40013c00
 8008968:	40020000 	.word	0x40020000
 800896c:	40023800 	.word	0x40023800

08008970 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008970:	6903      	ldr	r3, [r0, #16]
 8008972:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008974:	bf14      	ite	ne
 8008976:	2001      	movne	r0, #1
 8008978:	2000      	moveq	r0, #0
 800897a:	4770      	bx	lr

0800897c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800897c:	b10a      	cbz	r2, 8008982 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800897e:	6181      	str	r1, [r0, #24]
  }
}
 8008980:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008982:	0409      	lsls	r1, r1, #16
 8008984:	e7fb      	b.n	800897e <HAL_GPIO_WritePin+0x2>
	...

08008988 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008988:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800898a:	4b04      	ldr	r3, [pc, #16]	; (800899c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800898c:	6959      	ldr	r1, [r3, #20]
 800898e:	4201      	tst	r1, r0
 8008990:	d002      	beq.n	8008998 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008992:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008994:	f7f8 fb1a 	bl	8000fcc <HAL_GPIO_EXTI_Callback>
  }
}
 8008998:	bd08      	pop	{r3, pc}
 800899a:	bf00      	nop
 800899c:	40013c00 	.word	0x40013c00

080089a0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089a0:	6801      	ldr	r1, [r0, #0]
 80089a2:	694b      	ldr	r3, [r1, #20]
 80089a4:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80089a8:	f04f 0200 	mov.w	r2, #0
 80089ac:	d010      	beq.n	80089d0 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089ae:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80089b2:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80089b4:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80089b6:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80089b8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089bc:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089c0:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089c2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089c6:	f043 0304 	orr.w	r3, r3, #4
 80089ca:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80089cc:	2001      	movs	r0, #1
 80089ce:	4770      	bx	lr
  }
  return HAL_OK;
 80089d0:	4618      	mov	r0, r3
}
 80089d2:	4770      	bx	lr

080089d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80089d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d8:	4604      	mov	r4, r0
 80089da:	4616      	mov	r6, r2
 80089dc:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80089de:	b28f      	uxth	r7, r1
 80089e0:	6825      	ldr	r5, [r4, #0]
 80089e2:	6968      	ldr	r0, [r5, #20]
 80089e4:	ea37 0000 	bics.w	r0, r7, r0
 80089e8:	d017      	beq.n	8008a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089ea:	696b      	ldr	r3, [r5, #20]
 80089ec:	055a      	lsls	r2, r3, #21
 80089ee:	d516      	bpl.n	8008a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80089f6:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089f8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80089fc:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80089fe:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a00:	2300      	movs	r3, #0
 8008a02:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a04:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a08:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008a0e:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a12:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008a14:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8008a18:	2001      	movs	r0, #1
}
 8008a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8008a1e:	1c73      	adds	r3, r6, #1
 8008a20:	d0df      	beq.n	80089e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a22:	f7ff fe41 	bl	80086a8 <HAL_GetTick>
 8008a26:	eba0 0008 	sub.w	r0, r0, r8
 8008a2a:	42b0      	cmp	r0, r6
 8008a2c:	d801      	bhi.n	8008a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8008a2e:	2e00      	cmp	r6, #0
 8008a30:	d1d6      	bne.n	80089e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a32:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a34:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a36:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a38:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a40:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008a42:	f042 0220 	orr.w	r2, r2, #32
 8008a46:	e7e4      	b.n	8008a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08008a48 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8008a48:	b570      	push	{r4, r5, r6, lr}
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	460d      	mov	r5, r1
 8008a4e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	075b      	lsls	r3, r3, #29
 8008a56:	d501      	bpl.n	8008a5c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8008a58:	2000      	movs	r0, #0
}
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f7ff ff9f 	bl	80089a0 <I2C_IsAcknowledgeFailed>
 8008a62:	b9a8      	cbnz	r0, 8008a90 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8008a64:	1c6a      	adds	r2, r5, #1
 8008a66:	d0f3      	beq.n	8008a50 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a68:	f7ff fe1e 	bl	80086a8 <HAL_GetTick>
 8008a6c:	1b80      	subs	r0, r0, r6
 8008a6e:	42a8      	cmp	r0, r5
 8008a70:	d801      	bhi.n	8008a76 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8008a72:	2d00      	cmp	r5, #0
 8008a74:	d1ec      	bne.n	8008a50 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008a76:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8008a78:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008a7a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008a7c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008a80:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008a84:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008a86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008a8a:	f042 0220 	orr.w	r2, r2, #32
 8008a8e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008a90:	2001      	movs	r0, #1
 8008a92:	e7e2      	b.n	8008a5a <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08008a94 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8008a94:	b570      	push	{r4, r5, r6, lr}
 8008a96:	4604      	mov	r4, r0
 8008a98:	460d      	mov	r5, r1
 8008a9a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a9c:	6820      	ldr	r0, [r4, #0]
 8008a9e:	6943      	ldr	r3, [r0, #20]
 8008aa0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8008aa4:	d001      	beq.n	8008aaa <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	e010      	b.n	8008acc <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008aaa:	6942      	ldr	r2, [r0, #20]
 8008aac:	06d2      	lsls	r2, r2, #27
 8008aae:	d50e      	bpl.n	8008ace <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ab0:	f06f 0210 	mvn.w	r2, #16
 8008ab4:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ab6:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ab8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008aba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008abe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008ac2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008ac4:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008ac6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8008aca:	2001      	movs	r0, #1
}
 8008acc:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ace:	f7ff fdeb 	bl	80086a8 <HAL_GetTick>
 8008ad2:	1b80      	subs	r0, r0, r6
 8008ad4:	42a8      	cmp	r0, r5
 8008ad6:	d801      	bhi.n	8008adc <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8008ad8:	2d00      	cmp	r5, #0
 8008ada:	d1df      	bne.n	8008a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008adc:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8008ade:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008ae0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008ae2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008ae6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008aea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008aec:	f042 0220 	orr.w	r2, r2, #32
 8008af0:	e7e8      	b.n	8008ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08008af2 <I2C_WaitOnFlagUntilTimeout>:
{
 8008af2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008af6:	9e08      	ldr	r6, [sp, #32]
 8008af8:	4604      	mov	r4, r0
 8008afa:	4690      	mov	r8, r2
 8008afc:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008afe:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8008b02:	b28d      	uxth	r5, r1
 8008b04:	6821      	ldr	r1, [r4, #0]
 8008b06:	f1b9 0f01 	cmp.w	r9, #1
 8008b0a:	bf0c      	ite	eq
 8008b0c:	694b      	ldreq	r3, [r1, #20]
 8008b0e:	698b      	ldrne	r3, [r1, #24]
 8008b10:	ea35 0303 	bics.w	r3, r5, r3
 8008b14:	bf0c      	ite	eq
 8008b16:	2301      	moveq	r3, #1
 8008b18:	2300      	movne	r3, #0
 8008b1a:	4598      	cmp	r8, r3
 8008b1c:	d001      	beq.n	8008b22 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8008b1e:	2000      	movs	r0, #0
 8008b20:	e016      	b.n	8008b50 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8008b22:	1c7b      	adds	r3, r7, #1
 8008b24:	d0ef      	beq.n	8008b06 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b26:	f7ff fdbf 	bl	80086a8 <HAL_GetTick>
 8008b2a:	1b80      	subs	r0, r0, r6
 8008b2c:	42b8      	cmp	r0, r7
 8008b2e:	d801      	bhi.n	8008b34 <I2C_WaitOnFlagUntilTimeout+0x42>
 8008b30:	2f00      	cmp	r7, #0
 8008b32:	d1e7      	bne.n	8008b04 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008b34:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8008b36:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008b38:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008b3a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008b3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008b42:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008b44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008b48:	f042 0220 	orr.w	r2, r2, #32
 8008b4c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008b4e:	2001      	movs	r0, #1
}
 8008b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008b54 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	4604      	mov	r4, r0
 8008b58:	460d      	mov	r5, r1
 8008b5a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b5c:	6823      	ldr	r3, [r4, #0]
 8008b5e:	695b      	ldr	r3, [r3, #20]
 8008b60:	061b      	lsls	r3, r3, #24
 8008b62:	d501      	bpl.n	8008b68 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8008b64:	2000      	movs	r0, #0
}
 8008b66:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f7ff ff19 	bl	80089a0 <I2C_IsAcknowledgeFailed>
 8008b6e:	b9a8      	cbnz	r0, 8008b9c <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8008b70:	1c6a      	adds	r2, r5, #1
 8008b72:	d0f3      	beq.n	8008b5c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b74:	f7ff fd98 	bl	80086a8 <HAL_GetTick>
 8008b78:	1b80      	subs	r0, r0, r6
 8008b7a:	42a8      	cmp	r0, r5
 8008b7c:	d801      	bhi.n	8008b82 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8008b7e:	2d00      	cmp	r5, #0
 8008b80:	d1ec      	bne.n	8008b5c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008b82:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8008b84:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008b86:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008b88:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008b8c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008b90:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008b92:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008b96:	f042 0220 	orr.w	r2, r2, #32
 8008b9a:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008b9c:	2001      	movs	r0, #1
 8008b9e:	e7e2      	b.n	8008b66 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08008ba0 <HAL_I2C_Init>:
{
 8008ba0:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	b908      	cbnz	r0, 8008baa <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8008ba6:	2001      	movs	r0, #1
}
 8008ba8:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008baa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008bae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008bb2:	b91b      	cbnz	r3, 8008bbc <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8008bb4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8008bb8:	f7f8 fbf0 	bl	800139c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008bbc:	2324      	movs	r3, #36	; 0x24
 8008bbe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	f022 0201 	bic.w	r2, r2, #1
 8008bca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008bda:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008bdc:	f000 fd48 	bl	8009670 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008be0:	6863      	ldr	r3, [r4, #4]
 8008be2:	4a41      	ldr	r2, [pc, #260]	; (8008ce8 <HAL_I2C_Init+0x148>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d84d      	bhi.n	8008c84 <HAL_I2C_Init+0xe4>
 8008be8:	4a40      	ldr	r2, [pc, #256]	; (8008cec <HAL_I2C_Init+0x14c>)
 8008bea:	4290      	cmp	r0, r2
 8008bec:	d9db      	bls.n	8008ba6 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008bee:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8008bf0:	493f      	ldr	r1, [pc, #252]	; (8008cf0 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008bf2:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8008bf4:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008bf8:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8008bfc:	430d      	orrs	r5, r1
 8008bfe:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008c00:	6a15      	ldr	r5, [r2, #32]
 8008c02:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8008c06:	3101      	adds	r1, #1
 8008c08:	4329      	orrs	r1, r5
 8008c0a:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008c0c:	69d1      	ldr	r1, [r2, #28]
 8008c0e:	4d36      	ldr	r5, [pc, #216]	; (8008ce8 <HAL_I2C_Init+0x148>)
 8008c10:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8008c14:	42ab      	cmp	r3, r5
 8008c16:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008c1a:	f100 30ff 	add.w	r0, r0, #4294967295
 8008c1e:	d848      	bhi.n	8008cb2 <HAL_I2C_Init+0x112>
 8008c20:	005b      	lsls	r3, r3, #1
 8008c22:	fbb0 f0f3 	udiv	r0, r0, r3
 8008c26:	1c43      	adds	r3, r0, #1
 8008c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c2c:	2b04      	cmp	r3, #4
 8008c2e:	bf38      	it	cc
 8008c30:	2304      	movcc	r3, #4
 8008c32:	430b      	orrs	r3, r1
 8008c34:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008c36:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8008c3a:	6811      	ldr	r1, [r2, #0]
 8008c3c:	4303      	orrs	r3, r0
 8008c3e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8008c42:	430b      	orrs	r3, r1
 8008c44:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008c46:	6891      	ldr	r1, [r2, #8]
 8008c48:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8008c4c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8008c50:	4303      	orrs	r3, r0
 8008c52:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008c56:	430b      	orrs	r3, r1
 8008c58:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008c5a:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8008c5e:	68d1      	ldr	r1, [r2, #12]
 8008c60:	4303      	orrs	r3, r0
 8008c62:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008c66:	430b      	orrs	r3, r1
 8008c68:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8008c6a:	6813      	ldr	r3, [r2, #0]
 8008c6c:	f043 0301 	orr.w	r3, r3, #1
 8008c70:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c72:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8008c74:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c76:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008c78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c7c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c7e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8008c82:	e791      	b.n	8008ba8 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008c84:	4a1b      	ldr	r2, [pc, #108]	; (8008cf4 <HAL_I2C_Init+0x154>)
 8008c86:	4290      	cmp	r0, r2
 8008c88:	d98d      	bls.n	8008ba6 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008c8a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8008c8c:	4e18      	ldr	r6, [pc, #96]	; (8008cf0 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008c8e:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8008c90:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008c94:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8008c98:	4335      	orrs	r5, r6
 8008c9a:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008c9c:	6a15      	ldr	r5, [r2, #32]
 8008c9e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008ca2:	4371      	muls	r1, r6
 8008ca4:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8008ca8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8008cac:	fbb1 f1f6 	udiv	r1, r1, r6
 8008cb0:	e7a9      	b.n	8008c06 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008cb2:	68a5      	ldr	r5, [r4, #8]
 8008cb4:	b955      	cbnz	r5, 8008ccc <HAL_I2C_Init+0x12c>
 8008cb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008cba:	fbb0 f0f3 	udiv	r0, r0, r3
 8008cbe:	1c43      	adds	r3, r0, #1
 8008cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cc4:	b16b      	cbz	r3, 8008ce2 <HAL_I2C_Init+0x142>
 8008cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cca:	e7b2      	b.n	8008c32 <HAL_I2C_Init+0x92>
 8008ccc:	2519      	movs	r5, #25
 8008cce:	436b      	muls	r3, r5
 8008cd0:	fbb0 f0f3 	udiv	r0, r0, r3
 8008cd4:	1c43      	adds	r3, r0, #1
 8008cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cda:	b113      	cbz	r3, 8008ce2 <HAL_I2C_Init+0x142>
 8008cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ce0:	e7a7      	b.n	8008c32 <HAL_I2C_Init+0x92>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e7a5      	b.n	8008c32 <HAL_I2C_Init+0x92>
 8008ce6:	bf00      	nop
 8008ce8:	000186a0 	.word	0x000186a0
 8008cec:	001e847f 	.word	0x001e847f
 8008cf0:	000f4240 	.word	0x000f4240
 8008cf4:	003d08ff 	.word	0x003d08ff

08008cf8 <HAL_I2C_Master_Transmit>:
{
 8008cf8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	461f      	mov	r7, r3
 8008d00:	460d      	mov	r5, r1
 8008d02:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8008d04:	f7ff fcd0 	bl	80086a8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d08:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008d0c:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8008d0e:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d10:	d004      	beq.n	8008d1c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8008d12:	2502      	movs	r5, #2
}
 8008d14:	4628      	mov	r0, r5
 8008d16:	b004      	add	sp, #16
 8008d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d1c:	9000      	str	r0, [sp, #0]
 8008d1e:	2319      	movs	r3, #25
 8008d20:	2201      	movs	r2, #1
 8008d22:	495b      	ldr	r1, [pc, #364]	; (8008e90 <HAL_I2C_Master_Transmit+0x198>)
 8008d24:	4620      	mov	r0, r4
 8008d26:	f7ff fee4 	bl	8008af2 <I2C_WaitOnFlagUntilTimeout>
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	d1f1      	bne.n	8008d12 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8008d2e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d0ed      	beq.n	8008d12 <HAL_I2C_Master_Transmit+0x1a>
 8008d36:	2301      	movs	r3, #1
 8008d38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8008d42:	bf5e      	ittt	pl
 8008d44:	681a      	ldrpl	r2, [r3, #0]
 8008d46:	f042 0201 	orrpl.w	r2, r2, #1
 8008d4a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d52:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008d54:	2221      	movs	r2, #33	; 0x21
 8008d56:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008d5a:	2210      	movs	r2, #16
 8008d5c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008d60:	2200      	movs	r2, #0
 8008d62:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8008d64:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008d66:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008d68:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d6a:	4a4a      	ldr	r2, [pc, #296]	; (8008e94 <HAL_I2C_Master_Transmit+0x19c>)
 8008d6c:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008d6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8008d70:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008d74:	2a08      	cmp	r2, #8
 8008d76:	d004      	beq.n	8008d82 <HAL_I2C_Master_Transmit+0x8a>
 8008d78:	2a01      	cmp	r2, #1
 8008d7a:	d002      	beq.n	8008d82 <HAL_I2C_Master_Transmit+0x8a>
 8008d7c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8008d80:	d104      	bne.n	8008d8c <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	e002      	b.n	8008d92 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008d8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008d8e:	2a12      	cmp	r2, #18
 8008d90:	d0f7      	beq.n	8008d82 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d92:	2200      	movs	r2, #0
 8008d94:	9600      	str	r6, [sp, #0]
 8008d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f7ff fea8 	bl	8008af2 <I2C_WaitOnFlagUntilTimeout>
 8008da2:	6822      	ldr	r2, [r4, #0]
 8008da4:	b138      	cbz	r0, 8008db6 <HAL_I2C_Master_Transmit+0xbe>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8008da6:	6813      	ldr	r3, [r2, #0]
 8008da8:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008daa:	bf44      	itt	mi
 8008dac:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8008db0:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008db2:	2501      	movs	r5, #1
 8008db4:	e7ae      	b.n	8008d14 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008db6:	6923      	ldr	r3, [r4, #16]
 8008db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dbc:	d121      	bne.n	8008e02 <HAL_I2C_Master_Transmit+0x10a>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008dbe:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8008dc2:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008dc4:	4633      	mov	r3, r6
 8008dc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dc8:	4933      	ldr	r1, [pc, #204]	; (8008e98 <HAL_I2C_Master_Transmit+0x1a0>)
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f7ff fe02 	bl	80089d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d1ed      	bne.n	8008db2 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	9003      	str	r0, [sp, #12]
 8008dda:	695a      	ldr	r2, [r3, #20]
 8008ddc:	9203      	str	r2, [sp, #12]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	9303      	str	r3, [sp, #12]
 8008de2:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8008de4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008de6:	b9f3      	cbnz	r3, 8008e26 <HAL_I2C_Master_Transmit+0x12e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008de8:	6821      	ldr	r1, [r4, #0]
 8008dea:	680a      	ldr	r2, [r1, #0]
 8008dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008df0:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008df2:	2220      	movs	r2, #32
 8008df4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8008df8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dfc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8008e00:	e788      	b.n	8008d14 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008e02:	11eb      	asrs	r3, r5, #7
 8008e04:	f003 0306 	and.w	r3, r3, #6
 8008e08:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8008e0c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008e0e:	4923      	ldr	r1, [pc, #140]	; (8008e9c <HAL_I2C_Master_Transmit+0x1a4>)
 8008e10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e12:	4633      	mov	r3, r6
 8008e14:	4620      	mov	r0, r4
 8008e16:	f7ff fddd 	bl	80089d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	d1c9      	bne.n	8008db2 <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008e1e:	6823      	ldr	r3, [r4, #0]
 8008e20:	b2ed      	uxtb	r5, r5
 8008e22:	611d      	str	r5, [r3, #16]
 8008e24:	e7ce      	b.n	8008dc4 <HAL_I2C_Master_Transmit+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e26:	4632      	mov	r2, r6
 8008e28:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f7ff fe92 	bl	8008b54 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e30:	b140      	cbz	r0, 8008e44 <HAL_I2C_Master_Transmit+0x14c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e34:	2b04      	cmp	r3, #4
 8008e36:	d1bc      	bne.n	8008db2 <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e38:	6822      	ldr	r2, [r4, #0]
 8008e3a:	6813      	ldr	r3, [r2, #0]
 8008e3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	e7b6      	b.n	8008db2 <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e46:	6820      	ldr	r0, [r4, #0]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008e4e:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8008e50:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008e52:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008e54:	3a01      	subs	r2, #1
 8008e56:	b292      	uxth	r2, r2
 8008e58:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008e5a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008e5c:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8008e5e:	1e51      	subs	r1, r2, #1
 8008e60:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008e62:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8008e64:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008e66:	d50a      	bpl.n	8008e7e <HAL_I2C_Master_Transmit+0x186>
 8008e68:	b149      	cbz	r1, 8008e7e <HAL_I2C_Master_Transmit+0x186>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e6a:	7859      	ldrb	r1, [r3, #1]
 8008e6c:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8008e6e:	3302      	adds	r3, #2
 8008e70:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8008e72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008e74:	3b01      	subs	r3, #1
 8008e76:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8008e78:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8008e7a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8008e7c:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e7e:	4632      	mov	r2, r6
 8008e80:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e82:	4620      	mov	r0, r4
 8008e84:	f7ff fde0 	bl	8008a48 <I2C_WaitOnBTFFlagUntilTimeout>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d0ab      	beq.n	8008de4 <HAL_I2C_Master_Transmit+0xec>
 8008e8c:	e7d1      	b.n	8008e32 <HAL_I2C_Master_Transmit+0x13a>
 8008e8e:	bf00      	nop
 8008e90:	00100002 	.word	0x00100002
 8008e94:	ffff0000 	.word	0xffff0000
 8008e98:	00010002 	.word	0x00010002
 8008e9c:	00010008 	.word	0x00010008

08008ea0 <HAL_I2C_Master_Receive>:
{
 8008ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	b089      	sub	sp, #36	; 0x24
 8008ea8:	4698      	mov	r8, r3
 8008eaa:	460e      	mov	r6, r1
 8008eac:	4691      	mov	r9, r2
 8008eae:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8008eb0:	f7ff fbfa 	bl	80086a8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008eb4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008eb8:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8008eba:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ebc:	d004      	beq.n	8008ec8 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8008ebe:	2602      	movs	r6, #2
}
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	b009      	add	sp, #36	; 0x24
 8008ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008ec8:	9000      	str	r0, [sp, #0]
 8008eca:	2319      	movs	r3, #25
 8008ecc:	2201      	movs	r2, #1
 8008ece:	499b      	ldr	r1, [pc, #620]	; (800913c <HAL_I2C_Master_Receive+0x29c>)
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f7ff fe0e 	bl	8008af2 <I2C_WaitOnFlagUntilTimeout>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d1f1      	bne.n	8008ebe <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8008eda:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d0ed      	beq.n	8008ebe <HAL_I2C_Master_Receive+0x1e>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8008eee:	bf5e      	ittt	pl
 8008ef0:	681a      	ldrpl	r2, [r3, #0]
 8008ef2:	f042 0201 	orrpl.w	r2, r2, #1
 8008ef6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008efe:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008f00:	2222      	movs	r2, #34	; 0x22
 8008f02:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008f06:	2210      	movs	r2, #16
 8008f08:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8008f10:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008f14:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008f16:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f18:	4a89      	ldr	r2, [pc, #548]	; (8009140 <HAL_I2C_Master_Receive+0x2a0>)
 8008f1a:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008f1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f1e:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 8008f20:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f24:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008f28:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f2a:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008f2c:	d004      	beq.n	8008f38 <HAL_I2C_Master_Receive+0x98>
 8008f2e:	2a01      	cmp	r2, #1
 8008f30:	d002      	beq.n	8008f38 <HAL_I2C_Master_Receive+0x98>
 8008f32:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8008f36:	d104      	bne.n	8008f42 <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f3e:	601a      	str	r2, [r3, #0]
 8008f40:	e002      	b.n	8008f48 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008f42:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008f44:	2a11      	cmp	r2, #17
 8008f46:	d0f7      	beq.n	8008f38 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f48:	463b      	mov	r3, r7
 8008f4a:	9500      	str	r5, [sp, #0]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f52:	4620      	mov	r0, r4
 8008f54:	f7ff fdcd 	bl	8008af2 <I2C_WaitOnFlagUntilTimeout>
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	b138      	cbz	r0, 8008f6c <HAL_I2C_Master_Receive+0xcc>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8008f5c:	681b      	ldr	r3, [r3, #0]
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8008f5e:	05d8      	lsls	r0, r3, #23
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f60:	bf44      	itt	mi
 8008f62:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8008f66:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008f68:	2601      	movs	r6, #1
 8008f6a:	e7a9      	b.n	8008ec0 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f6c:	6922      	ldr	r2, [r4, #16]
 8008f6e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8008f72:	d123      	bne.n	8008fbc <HAL_I2C_Master_Receive+0x11c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008f74:	f046 0601 	orr.w	r6, r6, #1
 8008f78:	b2f6      	uxtb	r6, r6
 8008f7a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f7c:	462b      	mov	r3, r5
 8008f7e:	463a      	mov	r2, r7
 8008f80:	4970      	ldr	r1, [pc, #448]	; (8009144 <HAL_I2C_Master_Receive+0x2a4>)
 8008f82:	4620      	mov	r0, r4
 8008f84:	f7ff fd26 	bl	80089d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f88:	4606      	mov	r6, r0
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d1ec      	bne.n	8008f68 <HAL_I2C_Master_Receive+0xc8>
    if (hi2c->XferSize == 0U)
 8008f8e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	2a00      	cmp	r2, #0
 8008f94:	d147      	bne.n	8009026 <HAL_I2C_Master_Receive+0x186>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f96:	9003      	str	r0, [sp, #12]
 8008f98:	695a      	ldr	r2, [r3, #20]
 8008f9a:	9203      	str	r2, [sp, #12]
 8008f9c:	699a      	ldr	r2, [r3, #24]
 8008f9e:	9203      	str	r2, [sp, #12]
 8008fa0:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fa8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008faa:	2320      	movs	r3, #32
 8008fac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8008fb6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8008fba:	e781      	b.n	8008ec0 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008fbc:	ea4f 18e6 	mov.w	r8, r6, asr #7
 8008fc0:	f008 0806 	and.w	r8, r8, #6
 8008fc4:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8008fc8:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008fca:	495f      	ldr	r1, [pc, #380]	; (8009148 <HAL_I2C_Master_Receive+0x2a8>)
 8008fcc:	462b      	mov	r3, r5
 8008fce:	463a      	mov	r2, r7
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f7ff fcff 	bl	80089d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d1c6      	bne.n	8008f68 <HAL_I2C_Master_Receive+0xc8>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008fda:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008fdc:	4959      	ldr	r1, [pc, #356]	; (8009144 <HAL_I2C_Master_Receive+0x2a4>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008fde:	b2f6      	uxtb	r6, r6
 8008fe0:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008fe2:	463a      	mov	r2, r7
 8008fe4:	462b      	mov	r3, r5
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f7ff fcf4 	bl	80089d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fec:	4602      	mov	r2, r0
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d1ba      	bne.n	8008f68 <HAL_I2C_Master_Receive+0xc8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	9007      	str	r0, [sp, #28]
 8008ff6:	6959      	ldr	r1, [r3, #20]
 8008ff8:	9107      	str	r1, [sp, #28]
 8008ffa:	6999      	ldr	r1, [r3, #24]
 8008ffc:	9107      	str	r1, [sp, #28]
 8008ffe:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009000:	6819      	ldr	r1, [r3, #0]
 8009002:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009006:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009008:	4620      	mov	r0, r4
 800900a:	9500      	str	r5, [sp, #0]
 800900c:	463b      	mov	r3, r7
 800900e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009012:	f7ff fd6e 	bl	8008af2 <I2C_WaitOnFlagUntilTimeout>
 8009016:	6822      	ldr	r2, [r4, #0]
 8009018:	b108      	cbz	r0, 800901e <HAL_I2C_Master_Receive+0x17e>
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800901a:	6813      	ldr	r3, [r2, #0]
 800901c:	e79f      	b.n	8008f5e <HAL_I2C_Master_Receive+0xbe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800901e:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8009022:	6113      	str	r3, [r2, #16]
 8009024:	e7aa      	b.n	8008f7c <HAL_I2C_Master_Receive+0xdc>
    else if (hi2c->XferSize == 1U)
 8009026:	2a01      	cmp	r2, #1
 8009028:	d12c      	bne.n	8009084 <HAL_I2C_Master_Receive+0x1e4>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009030:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009032:	9004      	str	r0, [sp, #16]
 8009034:	695a      	ldr	r2, [r3, #20]
 8009036:	9204      	str	r2, [sp, #16]
 8009038:	699a      	ldr	r2, [r3, #24]
 800903a:	9204      	str	r2, [sp, #16]
 800903c:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009044:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009046:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800914c <HAL_I2C_Master_Receive+0x2ac>
    while (hi2c->XferSize > 0U)
 800904a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800904c:	2b00      	cmp	r3, #0
 800904e:	d0ac      	beq.n	8008faa <HAL_I2C_Master_Receive+0x10a>
      if (hi2c->XferSize <= 3U)
 8009050:	2b03      	cmp	r3, #3
 8009052:	d87d      	bhi.n	8009150 <HAL_I2C_Master_Receive+0x2b0>
        if (hi2c->XferSize == 1U)
 8009054:	2b01      	cmp	r3, #1
 8009056:	d130      	bne.n	80090ba <HAL_I2C_Master_Receive+0x21a>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009058:	462a      	mov	r2, r5
 800905a:	4639      	mov	r1, r7
 800905c:	4620      	mov	r0, r4
 800905e:	f7ff fd19 	bl	8008a94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009062:	2800      	cmp	r0, #0
 8009064:	d180      	bne.n	8008f68 <HAL_I2C_Master_Receive+0xc8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	691a      	ldr	r2, [r3, #16]
 800906a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800906c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800906e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009070:	3301      	adds	r3, #1
 8009072:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8009074:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009076:	3b01      	subs	r3, #1
 8009078:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800907a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800907c:	3b01      	subs	r3, #1
 800907e:	b29b      	uxth	r3, r3
 8009080:	8563      	strh	r3, [r4, #42]	; 0x2a
 8009082:	e7e2      	b.n	800904a <HAL_I2C_Master_Receive+0x1aa>
    else if (hi2c->XferSize == 2U)
 8009084:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009086:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8009088:	d10d      	bne.n	80090a6 <HAL_I2C_Master_Receive+0x206>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800908a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800908e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009096:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009098:	9005      	str	r0, [sp, #20]
 800909a:	695a      	ldr	r2, [r3, #20]
 800909c:	9205      	str	r2, [sp, #20]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	9305      	str	r3, [sp, #20]
 80090a2:	9b05      	ldr	r3, [sp, #20]
 80090a4:	e7cf      	b.n	8009046 <HAL_I2C_Master_Receive+0x1a6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090aa:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090ac:	9006      	str	r0, [sp, #24]
 80090ae:	695a      	ldr	r2, [r3, #20]
 80090b0:	9206      	str	r2, [sp, #24]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	9306      	str	r3, [sp, #24]
 80090b6:	9b06      	ldr	r3, [sp, #24]
 80090b8:	e7c5      	b.n	8009046 <HAL_I2C_Master_Receive+0x1a6>
        else if (hi2c->XferSize == 2U)
 80090ba:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80090bc:	9500      	str	r5, [sp, #0]
 80090be:	463b      	mov	r3, r7
 80090c0:	f04f 0200 	mov.w	r2, #0
 80090c4:	4641      	mov	r1, r8
 80090c6:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 80090c8:	d11a      	bne.n	8009100 <HAL_I2C_Master_Receive+0x260>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80090ca:	f7ff fd12 	bl	8008af2 <I2C_WaitOnFlagUntilTimeout>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	f47f af4a 	bne.w	8008f68 <HAL_I2C_Master_Receive+0xc8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090dc:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090de:	691a      	ldr	r2, [r3, #16]
 80090e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090e2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80090e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80090e6:	1c53      	adds	r3, r2, #1
 80090e8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80090ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80090ec:	3b01      	subs	r3, #1
 80090ee:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80090f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80090f2:	3b01      	subs	r3, #1
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090f8:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	7053      	strb	r3, [r2, #1]
 80090fe:	e7b6      	b.n	800906e <HAL_I2C_Master_Receive+0x1ce>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009100:	f7ff fcf7 	bl	8008af2 <I2C_WaitOnFlagUntilTimeout>
 8009104:	4602      	mov	r2, r0
 8009106:	2800      	cmp	r0, #0
 8009108:	f47f af2e 	bne.w	8008f68 <HAL_I2C_Master_Receive+0xc8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	6819      	ldr	r1, [r3, #0]
 8009110:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8009114:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009116:	6919      	ldr	r1, [r3, #16]
 8009118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800911a:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 800911c:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800911e:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 8009120:	3301      	adds	r3, #1
 8009122:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8009124:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009126:	3b01      	subs	r3, #1
 8009128:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800912a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800912c:	3b01      	subs	r3, #1
 800912e:	b29b      	uxth	r3, r3
 8009130:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009132:	4641      	mov	r1, r8
 8009134:	463b      	mov	r3, r7
 8009136:	4620      	mov	r0, r4
 8009138:	e7c7      	b.n	80090ca <HAL_I2C_Master_Receive+0x22a>
 800913a:	bf00      	nop
 800913c:	00100002 	.word	0x00100002
 8009140:	ffff0000 	.word	0xffff0000
 8009144:	00010002 	.word	0x00010002
 8009148:	00010008 	.word	0x00010008
 800914c:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009150:	462a      	mov	r2, r5
 8009152:	4639      	mov	r1, r7
 8009154:	4620      	mov	r0, r4
 8009156:	f7ff fc9d 	bl	8008a94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800915a:	2800      	cmp	r0, #0
 800915c:	f47f af04 	bne.w	8008f68 <HAL_I2C_Master_Receive+0xc8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	691a      	ldr	r2, [r3, #16]
 8009164:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009166:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009168:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800916a:	1c53      	adds	r3, r2, #1
 800916c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800916e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009170:	3b01      	subs	r3, #1
 8009172:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8009174:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009176:	3b01      	subs	r3, #1
 8009178:	b29b      	uxth	r3, r3
 800917a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	6959      	ldr	r1, [r3, #20]
 8009180:	0749      	lsls	r1, r1, #29
 8009182:	f57f af62 	bpl.w	800904a <HAL_I2C_Master_Receive+0x1aa>
 8009186:	e7b8      	b.n	80090fa <HAL_I2C_Master_Receive+0x25a>

08009188 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009188:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800918c:	4604      	mov	r4, r0
 800918e:	b908      	cbnz	r0, 8009194 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8009190:	2001      	movs	r0, #1
 8009192:	e03f      	b.n	8009214 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009194:	6803      	ldr	r3, [r0, #0]
 8009196:	07dd      	lsls	r5, r3, #31
 8009198:	d410      	bmi.n	80091bc <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	0798      	lsls	r0, r3, #30
 800919e:	d45a      	bmi.n	8009256 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091a0:	6823      	ldr	r3, [r4, #0]
 80091a2:	071a      	lsls	r2, r3, #28
 80091a4:	f100 809c 	bmi.w	80092e0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	075b      	lsls	r3, r3, #29
 80091ac:	f100 80ba 	bmi.w	8009324 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091b0:	69a0      	ldr	r0, [r4, #24]
 80091b2:	2800      	cmp	r0, #0
 80091b4:	f040 811b 	bne.w	80093ee <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80091b8:	2000      	movs	r0, #0
 80091ba:	e02b      	b.n	8009214 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091bc:	4ba7      	ldr	r3, [pc, #668]	; (800945c <HAL_RCC_OscConfig+0x2d4>)
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	f002 020c 	and.w	r2, r2, #12
 80091c4:	2a04      	cmp	r2, #4
 80091c6:	d007      	beq.n	80091d8 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091c8:	689a      	ldr	r2, [r3, #8]
 80091ca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091ce:	2a08      	cmp	r2, #8
 80091d0:	d10a      	bne.n	80091e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	0259      	lsls	r1, r3, #9
 80091d6:	d507      	bpl.n	80091e8 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091d8:	4ba0      	ldr	r3, [pc, #640]	; (800945c <HAL_RCC_OscConfig+0x2d4>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	039a      	lsls	r2, r3, #14
 80091de:	d5dc      	bpl.n	800919a <HAL_RCC_OscConfig+0x12>
 80091e0:	6863      	ldr	r3, [r4, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1d9      	bne.n	800919a <HAL_RCC_OscConfig+0x12>
 80091e6:	e7d3      	b.n	8009190 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091e8:	6863      	ldr	r3, [r4, #4]
 80091ea:	4d9c      	ldr	r5, [pc, #624]	; (800945c <HAL_RCC_OscConfig+0x2d4>)
 80091ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091f0:	d113      	bne.n	800921a <HAL_RCC_OscConfig+0x92>
 80091f2:	682b      	ldr	r3, [r5, #0]
 80091f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80091fa:	f7ff fa55 	bl	80086a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091fe:	4d97      	ldr	r5, [pc, #604]	; (800945c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8009200:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009202:	682b      	ldr	r3, [r5, #0]
 8009204:	039b      	lsls	r3, r3, #14
 8009206:	d4c8      	bmi.n	800919a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009208:	f7ff fa4e 	bl	80086a8 <HAL_GetTick>
 800920c:	1b80      	subs	r0, r0, r6
 800920e:	2864      	cmp	r0, #100	; 0x64
 8009210:	d9f7      	bls.n	8009202 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8009212:	2003      	movs	r0, #3
}
 8009214:	b002      	add	sp, #8
 8009216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800921a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800921e:	d104      	bne.n	800922a <HAL_RCC_OscConfig+0xa2>
 8009220:	682b      	ldr	r3, [r5, #0]
 8009222:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009226:	602b      	str	r3, [r5, #0]
 8009228:	e7e3      	b.n	80091f2 <HAL_RCC_OscConfig+0x6a>
 800922a:	682a      	ldr	r2, [r5, #0]
 800922c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009230:	602a      	str	r2, [r5, #0]
 8009232:	682a      	ldr	r2, [r5, #0]
 8009234:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009238:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1dd      	bne.n	80091fa <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800923e:	f7ff fa33 	bl	80086a8 <HAL_GetTick>
 8009242:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	039f      	lsls	r7, r3, #14
 8009248:	d5a7      	bpl.n	800919a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800924a:	f7ff fa2d 	bl	80086a8 <HAL_GetTick>
 800924e:	1b80      	subs	r0, r0, r6
 8009250:	2864      	cmp	r0, #100	; 0x64
 8009252:	d9f7      	bls.n	8009244 <HAL_RCC_OscConfig+0xbc>
 8009254:	e7dd      	b.n	8009212 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009256:	4b81      	ldr	r3, [pc, #516]	; (800945c <HAL_RCC_OscConfig+0x2d4>)
 8009258:	689a      	ldr	r2, [r3, #8]
 800925a:	f012 0f0c 	tst.w	r2, #12
 800925e:	d007      	beq.n	8009270 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009260:	689a      	ldr	r2, [r3, #8]
 8009262:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009266:	2a08      	cmp	r2, #8
 8009268:	d111      	bne.n	800928e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	025e      	lsls	r6, r3, #9
 800926e:	d40e      	bmi.n	800928e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009270:	4b7a      	ldr	r3, [pc, #488]	; (800945c <HAL_RCC_OscConfig+0x2d4>)
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	0795      	lsls	r5, r2, #30
 8009276:	d502      	bpl.n	800927e <HAL_RCC_OscConfig+0xf6>
 8009278:	68e2      	ldr	r2, [r4, #12]
 800927a:	2a01      	cmp	r2, #1
 800927c:	d188      	bne.n	8009190 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	6921      	ldr	r1, [r4, #16]
 8009282:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8009286:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800928a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800928c:	e788      	b.n	80091a0 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800928e:	68e2      	ldr	r2, [r4, #12]
 8009290:	4b73      	ldr	r3, [pc, #460]	; (8009460 <HAL_RCC_OscConfig+0x2d8>)
 8009292:	b1b2      	cbz	r2, 80092c2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8009294:	2201      	movs	r2, #1
 8009296:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009298:	f7ff fa06 	bl	80086a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800929c:	4d6f      	ldr	r5, [pc, #444]	; (800945c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800929e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	0798      	lsls	r0, r3, #30
 80092a4:	d507      	bpl.n	80092b6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092a6:	682b      	ldr	r3, [r5, #0]
 80092a8:	6922      	ldr	r2, [r4, #16]
 80092aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80092ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80092b2:	602b      	str	r3, [r5, #0]
 80092b4:	e774      	b.n	80091a0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092b6:	f7ff f9f7 	bl	80086a8 <HAL_GetTick>
 80092ba:	1b80      	subs	r0, r0, r6
 80092bc:	2802      	cmp	r0, #2
 80092be:	d9ef      	bls.n	80092a0 <HAL_RCC_OscConfig+0x118>
 80092c0:	e7a7      	b.n	8009212 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80092c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80092c4:	f7ff f9f0 	bl	80086a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092c8:	4d64      	ldr	r5, [pc, #400]	; (800945c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80092ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	0799      	lsls	r1, r3, #30
 80092d0:	f57f af66 	bpl.w	80091a0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092d4:	f7ff f9e8 	bl	80086a8 <HAL_GetTick>
 80092d8:	1b80      	subs	r0, r0, r6
 80092da:	2802      	cmp	r0, #2
 80092dc:	d9f6      	bls.n	80092cc <HAL_RCC_OscConfig+0x144>
 80092de:	e798      	b.n	8009212 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80092e0:	6962      	ldr	r2, [r4, #20]
 80092e2:	4b60      	ldr	r3, [pc, #384]	; (8009464 <HAL_RCC_OscConfig+0x2dc>)
 80092e4:	b17a      	cbz	r2, 8009306 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80092e6:	2201      	movs	r2, #1
 80092e8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80092ea:	f7ff f9dd 	bl	80086a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092ee:	4d5b      	ldr	r5, [pc, #364]	; (800945c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80092f0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092f2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80092f4:	079f      	lsls	r7, r3, #30
 80092f6:	f53f af57 	bmi.w	80091a8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80092fa:	f7ff f9d5 	bl	80086a8 <HAL_GetTick>
 80092fe:	1b80      	subs	r0, r0, r6
 8009300:	2802      	cmp	r0, #2
 8009302:	d9f6      	bls.n	80092f2 <HAL_RCC_OscConfig+0x16a>
 8009304:	e785      	b.n	8009212 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8009306:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8009308:	f7ff f9ce 	bl	80086a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800930c:	4d53      	ldr	r5, [pc, #332]	; (800945c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800930e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009310:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009312:	0798      	lsls	r0, r3, #30
 8009314:	f57f af48 	bpl.w	80091a8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009318:	f7ff f9c6 	bl	80086a8 <HAL_GetTick>
 800931c:	1b80      	subs	r0, r0, r6
 800931e:	2802      	cmp	r0, #2
 8009320:	d9f6      	bls.n	8009310 <HAL_RCC_OscConfig+0x188>
 8009322:	e776      	b.n	8009212 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009324:	4b4d      	ldr	r3, [pc, #308]	; (800945c <HAL_RCC_OscConfig+0x2d4>)
 8009326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009328:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800932c:	d128      	bne.n	8009380 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800932e:	9201      	str	r2, [sp, #4]
 8009330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009332:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009336:	641a      	str	r2, [r3, #64]	; 0x40
 8009338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800933e:	9301      	str	r3, [sp, #4]
 8009340:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009342:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009344:	4d48      	ldr	r5, [pc, #288]	; (8009468 <HAL_RCC_OscConfig+0x2e0>)
 8009346:	682b      	ldr	r3, [r5, #0]
 8009348:	05d9      	lsls	r1, r3, #23
 800934a:	d51b      	bpl.n	8009384 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800934c:	68a3      	ldr	r3, [r4, #8]
 800934e:	4d43      	ldr	r5, [pc, #268]	; (800945c <HAL_RCC_OscConfig+0x2d4>)
 8009350:	2b01      	cmp	r3, #1
 8009352:	d127      	bne.n	80093a4 <HAL_RCC_OscConfig+0x21c>
 8009354:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009356:	f043 0301 	orr.w	r3, r3, #1
 800935a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800935c:	f7ff f9a4 	bl	80086a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009360:	4d3e      	ldr	r5, [pc, #248]	; (800945c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8009362:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009364:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009368:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800936a:	079b      	lsls	r3, r3, #30
 800936c:	d539      	bpl.n	80093e2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800936e:	2e00      	cmp	r6, #0
 8009370:	f43f af1e 	beq.w	80091b0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009374:	4a39      	ldr	r2, [pc, #228]	; (800945c <HAL_RCC_OscConfig+0x2d4>)
 8009376:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800937c:	6413      	str	r3, [r2, #64]	; 0x40
 800937e:	e717      	b.n	80091b0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8009380:	2600      	movs	r6, #0
 8009382:	e7df      	b.n	8009344 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009384:	682b      	ldr	r3, [r5, #0]
 8009386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800938a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800938c:	f7ff f98c 	bl	80086a8 <HAL_GetTick>
 8009390:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009392:	682b      	ldr	r3, [r5, #0]
 8009394:	05da      	lsls	r2, r3, #23
 8009396:	d4d9      	bmi.n	800934c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009398:	f7ff f986 	bl	80086a8 <HAL_GetTick>
 800939c:	1bc0      	subs	r0, r0, r7
 800939e:	2802      	cmp	r0, #2
 80093a0:	d9f7      	bls.n	8009392 <HAL_RCC_OscConfig+0x20a>
 80093a2:	e736      	b.n	8009212 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093a4:	2b05      	cmp	r3, #5
 80093a6:	d104      	bne.n	80093b2 <HAL_RCC_OscConfig+0x22a>
 80093a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80093aa:	f043 0304 	orr.w	r3, r3, #4
 80093ae:	672b      	str	r3, [r5, #112]	; 0x70
 80093b0:	e7d0      	b.n	8009354 <HAL_RCC_OscConfig+0x1cc>
 80093b2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80093b4:	f022 0201 	bic.w	r2, r2, #1
 80093b8:	672a      	str	r2, [r5, #112]	; 0x70
 80093ba:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80093bc:	f022 0204 	bic.w	r2, r2, #4
 80093c0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1ca      	bne.n	800935c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80093c6:	f7ff f96f 	bl	80086a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093ca:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80093ce:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80093d2:	0798      	lsls	r0, r3, #30
 80093d4:	d5cb      	bpl.n	800936e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093d6:	f7ff f967 	bl	80086a8 <HAL_GetTick>
 80093da:	1bc0      	subs	r0, r0, r7
 80093dc:	4540      	cmp	r0, r8
 80093de:	d9f7      	bls.n	80093d0 <HAL_RCC_OscConfig+0x248>
 80093e0:	e717      	b.n	8009212 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093e2:	f7ff f961 	bl	80086a8 <HAL_GetTick>
 80093e6:	1bc0      	subs	r0, r0, r7
 80093e8:	4540      	cmp	r0, r8
 80093ea:	d9bd      	bls.n	8009368 <HAL_RCC_OscConfig+0x1e0>
 80093ec:	e711      	b.n	8009212 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80093ee:	4d1b      	ldr	r5, [pc, #108]	; (800945c <HAL_RCC_OscConfig+0x2d4>)
 80093f0:	68ab      	ldr	r3, [r5, #8]
 80093f2:	f003 030c 	and.w	r3, r3, #12
 80093f6:	2b08      	cmp	r3, #8
 80093f8:	d047      	beq.n	800948a <HAL_RCC_OscConfig+0x302>
 80093fa:	4e1c      	ldr	r6, [pc, #112]	; (800946c <HAL_RCC_OscConfig+0x2e4>)
 80093fc:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093fe:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8009400:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009402:	d135      	bne.n	8009470 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8009404:	f7ff f950 	bl	80086a8 <HAL_GetTick>
 8009408:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800940a:	682b      	ldr	r3, [r5, #0]
 800940c:	0199      	lsls	r1, r3, #6
 800940e:	d41e      	bmi.n	800944e <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009410:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8009414:	4313      	orrs	r3, r2
 8009416:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009418:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800941c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800941e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009422:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009424:	4c0d      	ldr	r4, [pc, #52]	; (800945c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009426:	0852      	lsrs	r2, r2, #1
 8009428:	3a01      	subs	r2, #1
 800942a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800942e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8009430:	2301      	movs	r3, #1
 8009432:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8009434:	f7ff f938 	bl	80086a8 <HAL_GetTick>
 8009438:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	019a      	lsls	r2, r3, #6
 800943e:	f53f aebb 	bmi.w	80091b8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009442:	f7ff f931 	bl	80086a8 <HAL_GetTick>
 8009446:	1b40      	subs	r0, r0, r5
 8009448:	2802      	cmp	r0, #2
 800944a:	d9f6      	bls.n	800943a <HAL_RCC_OscConfig+0x2b2>
 800944c:	e6e1      	b.n	8009212 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800944e:	f7ff f92b 	bl	80086a8 <HAL_GetTick>
 8009452:	1bc0      	subs	r0, r0, r7
 8009454:	2802      	cmp	r0, #2
 8009456:	d9d8      	bls.n	800940a <HAL_RCC_OscConfig+0x282>
 8009458:	e6db      	b.n	8009212 <HAL_RCC_OscConfig+0x8a>
 800945a:	bf00      	nop
 800945c:	40023800 	.word	0x40023800
 8009460:	42470000 	.word	0x42470000
 8009464:	42470e80 	.word	0x42470e80
 8009468:	40007000 	.word	0x40007000
 800946c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8009470:	f7ff f91a 	bl	80086a8 <HAL_GetTick>
 8009474:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009476:	682b      	ldr	r3, [r5, #0]
 8009478:	019b      	lsls	r3, r3, #6
 800947a:	f57f ae9d 	bpl.w	80091b8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800947e:	f7ff f913 	bl	80086a8 <HAL_GetTick>
 8009482:	1b00      	subs	r0, r0, r4
 8009484:	2802      	cmp	r0, #2
 8009486:	d9f6      	bls.n	8009476 <HAL_RCC_OscConfig+0x2ee>
 8009488:	e6c3      	b.n	8009212 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800948a:	2801      	cmp	r0, #1
 800948c:	f43f aec2 	beq.w	8009214 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8009490:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009492:	69e3      	ldr	r3, [r4, #28]
 8009494:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8009498:	429a      	cmp	r2, r3
 800949a:	f47f ae79 	bne.w	8009190 <HAL_RCC_OscConfig+0x8>
 800949e:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80094a0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094a4:	4293      	cmp	r3, r2
 80094a6:	f47f ae73 	bne.w	8009190 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80094aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80094ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80094b0:	4003      	ands	r3, r0
 80094b2:	4293      	cmp	r3, r2
 80094b4:	f47f ae6c 	bne.w	8009190 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80094b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80094ba:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80094be:	4293      	cmp	r3, r2
 80094c0:	f47f ae66 	bne.w	8009190 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80094c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80094c6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 80094ca:	1ac0      	subs	r0, r0, r3
 80094cc:	bf18      	it	ne
 80094ce:	2001      	movne	r0, #1
 80094d0:	e6a0      	b.n	8009214 <HAL_RCC_OscConfig+0x8c>
 80094d2:	bf00      	nop

080094d4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094d4:	4913      	ldr	r1, [pc, #76]	; (8009524 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80094d6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094d8:	688b      	ldr	r3, [r1, #8]
 80094da:	f003 030c 	and.w	r3, r3, #12
 80094de:	2b04      	cmp	r3, #4
 80094e0:	d003      	beq.n	80094ea <HAL_RCC_GetSysClockFreq+0x16>
 80094e2:	2b08      	cmp	r3, #8
 80094e4:	d003      	beq.n	80094ee <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80094e6:	4810      	ldr	r0, [pc, #64]	; (8009528 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 80094e8:	e000      	b.n	80094ec <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 80094ea:	4810      	ldr	r0, [pc, #64]	; (800952c <HAL_RCC_GetSysClockFreq+0x58>)
}
 80094ec:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80094ee:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80094f0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094f2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80094f4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094f8:	bf14      	ite	ne
 80094fa:	480c      	ldrne	r0, [pc, #48]	; (800952c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094fc:	480a      	ldreq	r0, [pc, #40]	; (8009528 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094fe:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8009502:	bf18      	it	ne
 8009504:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009506:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800950a:	fba1 0100 	umull	r0, r1, r1, r0
 800950e:	f7f7 fba3 	bl	8000c58 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009512:	4b04      	ldr	r3, [pc, #16]	; (8009524 <HAL_RCC_GetSysClockFreq+0x50>)
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800951a:	3301      	adds	r3, #1
 800951c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800951e:	fbb0 f0f3 	udiv	r0, r0, r3
 8009522:	e7e3      	b.n	80094ec <HAL_RCC_GetSysClockFreq+0x18>
 8009524:	40023800 	.word	0x40023800
 8009528:	00f42400 	.word	0x00f42400
 800952c:	007a1200 	.word	0x007a1200

08009530 <HAL_RCC_ClockConfig>:
{
 8009530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009534:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8009536:	4604      	mov	r4, r0
 8009538:	b910      	cbnz	r0, 8009540 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800953a:	2001      	movs	r0, #1
}
 800953c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009540:	4b43      	ldr	r3, [pc, #268]	; (8009650 <HAL_RCC_ClockConfig+0x120>)
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	f002 020f 	and.w	r2, r2, #15
 8009548:	428a      	cmp	r2, r1
 800954a:	d328      	bcc.n	800959e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800954c:	6821      	ldr	r1, [r4, #0]
 800954e:	078f      	lsls	r7, r1, #30
 8009550:	d42d      	bmi.n	80095ae <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009552:	07c8      	lsls	r0, r1, #31
 8009554:	d440      	bmi.n	80095d8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009556:	4b3e      	ldr	r3, [pc, #248]	; (8009650 <HAL_RCC_ClockConfig+0x120>)
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	f002 020f 	and.w	r2, r2, #15
 800955e:	42aa      	cmp	r2, r5
 8009560:	d865      	bhi.n	800962e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009562:	6822      	ldr	r2, [r4, #0]
 8009564:	0751      	lsls	r1, r2, #29
 8009566:	d46b      	bmi.n	8009640 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009568:	0713      	lsls	r3, r2, #28
 800956a:	d507      	bpl.n	800957c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800956c:	4a39      	ldr	r2, [pc, #228]	; (8009654 <HAL_RCC_ClockConfig+0x124>)
 800956e:	6921      	ldr	r1, [r4, #16]
 8009570:	6893      	ldr	r3, [r2, #8]
 8009572:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009576:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800957a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800957c:	f7ff ffaa 	bl	80094d4 <HAL_RCC_GetSysClockFreq>
 8009580:	4b34      	ldr	r3, [pc, #208]	; (8009654 <HAL_RCC_ClockConfig+0x124>)
 8009582:	4a35      	ldr	r2, [pc, #212]	; (8009658 <HAL_RCC_ClockConfig+0x128>)
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800958a:	5cd3      	ldrb	r3, [r2, r3]
 800958c:	40d8      	lsrs	r0, r3
 800958e:	4b33      	ldr	r3, [pc, #204]	; (800965c <HAL_RCC_ClockConfig+0x12c>)
 8009590:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8009592:	4b33      	ldr	r3, [pc, #204]	; (8009660 <HAL_RCC_ClockConfig+0x130>)
 8009594:	6818      	ldr	r0, [r3, #0]
 8009596:	f7ff f83f 	bl	8008618 <HAL_InitTick>
  return HAL_OK;
 800959a:	2000      	movs	r0, #0
 800959c:	e7ce      	b.n	800953c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800959e:	b2ca      	uxtb	r2, r1
 80095a0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 030f 	and.w	r3, r3, #15
 80095a8:	428b      	cmp	r3, r1
 80095aa:	d1c6      	bne.n	800953a <HAL_RCC_ClockConfig+0xa>
 80095ac:	e7ce      	b.n	800954c <HAL_RCC_ClockConfig+0x1c>
 80095ae:	4b29      	ldr	r3, [pc, #164]	; (8009654 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095b0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80095b4:	bf1e      	ittt	ne
 80095b6:	689a      	ldrne	r2, [r3, #8]
 80095b8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80095bc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095be:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80095c0:	bf42      	ittt	mi
 80095c2:	689a      	ldrmi	r2, [r3, #8]
 80095c4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80095c8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095ca:	689a      	ldr	r2, [r3, #8]
 80095cc:	68a0      	ldr	r0, [r4, #8]
 80095ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80095d2:	4302      	orrs	r2, r0
 80095d4:	609a      	str	r2, [r3, #8]
 80095d6:	e7bc      	b.n	8009552 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095d8:	6862      	ldr	r2, [r4, #4]
 80095da:	4b1e      	ldr	r3, [pc, #120]	; (8009654 <HAL_RCC_ClockConfig+0x124>)
 80095dc:	2a01      	cmp	r2, #1
 80095de:	d11c      	bne.n	800961a <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095e6:	d0a8      	beq.n	800953a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80095e8:	4e1a      	ldr	r6, [pc, #104]	; (8009654 <HAL_RCC_ClockConfig+0x124>)
 80095ea:	68b3      	ldr	r3, [r6, #8]
 80095ec:	f023 0303 	bic.w	r3, r3, #3
 80095f0:	4313      	orrs	r3, r2
 80095f2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80095f4:	f7ff f858 	bl	80086a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095f8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80095fc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095fe:	68b3      	ldr	r3, [r6, #8]
 8009600:	6862      	ldr	r2, [r4, #4]
 8009602:	f003 030c 	and.w	r3, r3, #12
 8009606:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800960a:	d0a4      	beq.n	8009556 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800960c:	f7ff f84c 	bl	80086a8 <HAL_GetTick>
 8009610:	1bc0      	subs	r0, r0, r7
 8009612:	4540      	cmp	r0, r8
 8009614:	d9f3      	bls.n	80095fe <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8009616:	2003      	movs	r0, #3
 8009618:	e790      	b.n	800953c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800961a:	1e91      	subs	r1, r2, #2
 800961c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800961e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009620:	d802      	bhi.n	8009628 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009622:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009626:	e7de      	b.n	80095e6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009628:	f013 0f02 	tst.w	r3, #2
 800962c:	e7db      	b.n	80095e6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800962e:	b2ea      	uxtb	r2, r5
 8009630:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 030f 	and.w	r3, r3, #15
 8009638:	42ab      	cmp	r3, r5
 800963a:	f47f af7e 	bne.w	800953a <HAL_RCC_ClockConfig+0xa>
 800963e:	e790      	b.n	8009562 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009640:	4904      	ldr	r1, [pc, #16]	; (8009654 <HAL_RCC_ClockConfig+0x124>)
 8009642:	68e0      	ldr	r0, [r4, #12]
 8009644:	688b      	ldr	r3, [r1, #8]
 8009646:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800964a:	4303      	orrs	r3, r0
 800964c:	608b      	str	r3, [r1, #8]
 800964e:	e78b      	b.n	8009568 <HAL_RCC_ClockConfig+0x38>
 8009650:	40023c00 	.word	0x40023c00
 8009654:	40023800 	.word	0x40023800
 8009658:	0800c1c6 	.word	0x0800c1c6
 800965c:	20000030 	.word	0x20000030
 8009660:	20000038 	.word	0x20000038

08009664 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8009664:	4b01      	ldr	r3, [pc, #4]	; (800966c <HAL_RCC_GetHCLKFreq+0x8>)
 8009666:	6818      	ldr	r0, [r3, #0]
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	20000030 	.word	0x20000030

08009670 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009670:	4b04      	ldr	r3, [pc, #16]	; (8009684 <HAL_RCC_GetPCLK1Freq+0x14>)
 8009672:	4a05      	ldr	r2, [pc, #20]	; (8009688 <HAL_RCC_GetPCLK1Freq+0x18>)
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800967a:	5cd3      	ldrb	r3, [r2, r3]
 800967c:	4a03      	ldr	r2, [pc, #12]	; (800968c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800967e:	6810      	ldr	r0, [r2, #0]
}
 8009680:	40d8      	lsrs	r0, r3
 8009682:	4770      	bx	lr
 8009684:	40023800 	.word	0x40023800
 8009688:	0800c1d6 	.word	0x0800c1d6
 800968c:	20000030 	.word	0x20000030

08009690 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009690:	4b04      	ldr	r3, [pc, #16]	; (80096a4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8009692:	4a05      	ldr	r2, [pc, #20]	; (80096a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800969a:	5cd3      	ldrb	r3, [r2, r3]
 800969c:	4a03      	ldr	r2, [pc, #12]	; (80096ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 800969e:	6810      	ldr	r0, [r2, #0]
}
 80096a0:	40d8      	lsrs	r0, r3
 80096a2:	4770      	bx	lr
 80096a4:	40023800 	.word	0x40023800
 80096a8:	0800c1d6 	.word	0x0800c1d6
 80096ac:	20000030 	.word	0x20000030

080096b0 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096b0:	6803      	ldr	r3, [r0, #0]
 80096b2:	68c1      	ldr	r1, [r0, #12]
 80096b4:	691a      	ldr	r2, [r3, #16]
{
 80096b6:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096b8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 80096bc:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096be:	430a      	orrs	r2, r1
 80096c0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80096c2:	6925      	ldr	r5, [r4, #16]
 80096c4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80096c6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80096c8:	69c0      	ldr	r0, [r0, #28]
 80096ca:	432a      	orrs	r2, r5
 80096cc:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80096ce:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80096d2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80096d4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80096d8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80096da:	430a      	orrs	r2, r1
 80096dc:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096de:	695a      	ldr	r2, [r3, #20]
 80096e0:	69a1      	ldr	r1, [r4, #24]
 80096e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80096e6:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096e8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096ec:	615a      	str	r2, [r3, #20]
 80096ee:	4a26      	ldr	r2, [pc, #152]	; (8009788 <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096f0:	d129      	bne.n	8009746 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d003      	beq.n	80096fe <UART_SetConfig+0x4e>
 80096f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d120      	bne.n	8009740 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096fe:	f7ff ffc7 	bl	8009690 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009702:	6862      	ldr	r2, [r4, #4]
 8009704:	2600      	movs	r6, #0
 8009706:	1892      	adds	r2, r2, r2
 8009708:	f04f 0119 	mov.w	r1, #25
 800970c:	eb46 0306 	adc.w	r3, r6, r6
 8009710:	fba0 0101 	umull	r0, r1, r0, r1
 8009714:	f7f7 faa0 	bl	8000c58 <__aeabi_uldivmod>
 8009718:	2164      	movs	r1, #100	; 0x64
 800971a:	fbb0 f5f1 	udiv	r5, r0, r1
 800971e:	fb01 0315 	mls	r3, r1, r5, r0
 8009722:	00db      	lsls	r3, r3, #3
 8009724:	3332      	adds	r3, #50	; 0x32
 8009726:	fbb3 f3f1 	udiv	r3, r3, r1
 800972a:	f003 0207 	and.w	r2, r3, #7
 800972e:	005b      	lsls	r3, r3, #1
 8009730:	6821      	ldr	r1, [r4, #0]
 8009732:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8009736:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800973a:	4413      	add	r3, r2
 800973c:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800973e:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8009740:	f7ff ff96 	bl	8009670 <HAL_RCC_GetPCLK1Freq>
 8009744:	e7dd      	b.n	8009702 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009746:	4293      	cmp	r3, r2
 8009748:	d002      	beq.n	8009750 <UART_SetConfig+0xa0>
 800974a:	4a10      	ldr	r2, [pc, #64]	; (800978c <UART_SetConfig+0xdc>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d117      	bne.n	8009780 <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009750:	f7ff ff9e 	bl	8009690 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009754:	6863      	ldr	r3, [r4, #4]
 8009756:	2119      	movs	r1, #25
 8009758:	009a      	lsls	r2, r3, #2
 800975a:	fba0 0101 	umull	r0, r1, r0, r1
 800975e:	0f9b      	lsrs	r3, r3, #30
 8009760:	f7f7 fa7a 	bl	8000c58 <__aeabi_uldivmod>
 8009764:	2264      	movs	r2, #100	; 0x64
 8009766:	fbb0 f1f2 	udiv	r1, r0, r2
 800976a:	fb02 0311 	mls	r3, r2, r1, r0
 800976e:	6824      	ldr	r4, [r4, #0]
 8009770:	011b      	lsls	r3, r3, #4
 8009772:	3332      	adds	r3, #50	; 0x32
 8009774:	fbb3 f3f2 	udiv	r3, r3, r2
 8009778:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800977c:	60a3      	str	r3, [r4, #8]
}
 800977e:	e7de      	b.n	800973e <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009780:	f7ff ff76 	bl	8009670 <HAL_RCC_GetPCLK1Freq>
 8009784:	e7e6      	b.n	8009754 <UART_SetConfig+0xa4>
 8009786:	bf00      	nop
 8009788:	40011000 	.word	0x40011000
 800978c:	40011400 	.word	0x40011400

08009790 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	4604      	mov	r4, r0
 8009794:	460e      	mov	r6, r1
 8009796:	4617      	mov	r7, r2
 8009798:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800979a:	6821      	ldr	r1, [r4, #0]
 800979c:	680b      	ldr	r3, [r1, #0]
 800979e:	ea36 0303 	bics.w	r3, r6, r3
 80097a2:	d101      	bne.n	80097a8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80097a4:	2000      	movs	r0, #0
 80097a6:	e014      	b.n	80097d2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 80097a8:	1c6b      	adds	r3, r5, #1
 80097aa:	d0f7      	beq.n	800979c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80097ac:	b995      	cbnz	r5, 80097d4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	68da      	ldr	r2, [r3, #12]
 80097b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80097b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b8:	695a      	ldr	r2, [r3, #20]
 80097ba:	f022 0201 	bic.w	r2, r2, #1
 80097be:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80097c0:	2320      	movs	r3, #32
 80097c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80097c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80097ca:	2300      	movs	r3, #0
 80097cc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80097d0:	2003      	movs	r0, #3
}
 80097d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80097d4:	f7fe ff68 	bl	80086a8 <HAL_GetTick>
 80097d8:	1bc0      	subs	r0, r0, r7
 80097da:	4285      	cmp	r5, r0
 80097dc:	d2dd      	bcs.n	800979a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80097de:	e7e6      	b.n	80097ae <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080097e0 <HAL_UART_Init>:
{
 80097e0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80097e2:	4604      	mov	r4, r0
 80097e4:	b340      	cbz	r0, 8009838 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80097e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80097ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80097ee:	b91b      	cbnz	r3, 80097f8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80097f0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80097f4:	f7f7 fdfc 	bl	80013f0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80097f8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80097fa:	2324      	movs	r3, #36	; 0x24
 80097fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8009800:	68d3      	ldr	r3, [r2, #12]
 8009802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009806:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8009808:	4620      	mov	r0, r4
 800980a:	f7ff ff51 	bl	80096b0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800980e:	6823      	ldr	r3, [r4, #0]
 8009810:	691a      	ldr	r2, [r3, #16]
 8009812:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009816:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009818:	695a      	ldr	r2, [r3, #20]
 800981a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800981e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009826:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009828:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800982a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800982c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800982e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009832:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8009836:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009838:	2001      	movs	r0, #1
 800983a:	e7fc      	b.n	8009836 <HAL_UART_Init+0x56>

0800983c <HAL_UART_Transmit>:
{
 800983c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009840:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8009842:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8009846:	2b20      	cmp	r3, #32
{
 8009848:	4604      	mov	r4, r0
 800984a:	460d      	mov	r5, r1
 800984c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800984e:	d14f      	bne.n	80098f0 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8009850:	2900      	cmp	r1, #0
 8009852:	d04b      	beq.n	80098ec <HAL_UART_Transmit+0xb0>
 8009854:	2a00      	cmp	r2, #0
 8009856:	d049      	beq.n	80098ec <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8009858:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800985c:	2b01      	cmp	r3, #1
 800985e:	d047      	beq.n	80098f0 <HAL_UART_Transmit+0xb4>
 8009860:	2301      	movs	r3, #1
 8009862:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009866:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800986a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800986c:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009870:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8009874:	f7fe ff18 	bl	80086a8 <HAL_GetTick>
    huart->TxXferSize = Size;
 8009878:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800987c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800987e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8009882:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8009886:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8009888:	b29b      	uxth	r3, r3
 800988a:	b953      	cbnz	r3, 80098a2 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800988c:	463b      	mov	r3, r7
 800988e:	4632      	mov	r2, r6
 8009890:	2140      	movs	r1, #64	; 0x40
 8009892:	4620      	mov	r0, r4
 8009894:	f7ff ff7c 	bl	8009790 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8009898:	b998      	cbnz	r0, 80098c2 <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 800989a:	2320      	movs	r3, #32
 800989c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80098a0:	e010      	b.n	80098c4 <HAL_UART_Transmit+0x88>
      huart->TxXferCount--;
 80098a2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80098a4:	3b01      	subs	r3, #1
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80098aa:	68a3      	ldr	r3, [r4, #8]
 80098ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80098b0:	4632      	mov	r2, r6
 80098b2:	463b      	mov	r3, r7
 80098b4:	f04f 0180 	mov.w	r1, #128	; 0x80
 80098b8:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80098ba:	d10e      	bne.n	80098da <HAL_UART_Transmit+0x9e>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80098bc:	f7ff ff68 	bl	8009790 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80098c0:	b110      	cbz	r0, 80098c8 <HAL_UART_Transmit+0x8c>
          return HAL_TIMEOUT;
 80098c2:	2003      	movs	r0, #3
}
 80098c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80098c8:	882b      	ldrh	r3, [r5, #0]
 80098ca:	6822      	ldr	r2, [r4, #0]
 80098cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098d0:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80098d2:	6923      	ldr	r3, [r4, #16]
 80098d4:	b943      	cbnz	r3, 80098e8 <HAL_UART_Transmit+0xac>
          pData += 2U;
 80098d6:	3502      	adds	r5, #2
 80098d8:	e7d5      	b.n	8009886 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80098da:	f7ff ff59 	bl	8009790 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80098de:	2800      	cmp	r0, #0
 80098e0:	d1ef      	bne.n	80098c2 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80098e2:	6823      	ldr	r3, [r4, #0]
 80098e4:	782a      	ldrb	r2, [r5, #0]
 80098e6:	605a      	str	r2, [r3, #4]
 80098e8:	3501      	adds	r5, #1
 80098ea:	e7cc      	b.n	8009886 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 80098ec:	2001      	movs	r0, #1
 80098ee:	e7e9      	b.n	80098c4 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 80098f0:	2002      	movs	r0, #2
 80098f2:	e7e7      	b.n	80098c4 <HAL_UART_Transmit+0x88>

080098f4 <__libc_init_array>:
 80098f4:	b570      	push	{r4, r5, r6, lr}
 80098f6:	4e0d      	ldr	r6, [pc, #52]	; (800992c <__libc_init_array+0x38>)
 80098f8:	4c0d      	ldr	r4, [pc, #52]	; (8009930 <__libc_init_array+0x3c>)
 80098fa:	1ba4      	subs	r4, r4, r6
 80098fc:	10a4      	asrs	r4, r4, #2
 80098fe:	2500      	movs	r5, #0
 8009900:	42a5      	cmp	r5, r4
 8009902:	d109      	bne.n	8009918 <__libc_init_array+0x24>
 8009904:	4e0b      	ldr	r6, [pc, #44]	; (8009934 <__libc_init_array+0x40>)
 8009906:	4c0c      	ldr	r4, [pc, #48]	; (8009938 <__libc_init_array+0x44>)
 8009908:	f002 fc42 	bl	800c190 <_init>
 800990c:	1ba4      	subs	r4, r4, r6
 800990e:	10a4      	asrs	r4, r4, #2
 8009910:	2500      	movs	r5, #0
 8009912:	42a5      	cmp	r5, r4
 8009914:	d105      	bne.n	8009922 <__libc_init_array+0x2e>
 8009916:	bd70      	pop	{r4, r5, r6, pc}
 8009918:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800991c:	4798      	blx	r3
 800991e:	3501      	adds	r5, #1
 8009920:	e7ee      	b.n	8009900 <__libc_init_array+0xc>
 8009922:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009926:	4798      	blx	r3
 8009928:	3501      	adds	r5, #1
 800992a:	e7f2      	b.n	8009912 <__libc_init_array+0x1e>
 800992c:	0800c5a8 	.word	0x0800c5a8
 8009930:	0800c5a8 	.word	0x0800c5a8
 8009934:	0800c5a8 	.word	0x0800c5a8
 8009938:	0800c5ac 	.word	0x0800c5ac

0800993c <memcpy>:
 800993c:	b510      	push	{r4, lr}
 800993e:	1e43      	subs	r3, r0, #1
 8009940:	440a      	add	r2, r1
 8009942:	4291      	cmp	r1, r2
 8009944:	d100      	bne.n	8009948 <memcpy+0xc>
 8009946:	bd10      	pop	{r4, pc}
 8009948:	f811 4b01 	ldrb.w	r4, [r1], #1
 800994c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009950:	e7f7      	b.n	8009942 <memcpy+0x6>

08009952 <memset>:
 8009952:	4402      	add	r2, r0
 8009954:	4603      	mov	r3, r0
 8009956:	4293      	cmp	r3, r2
 8009958:	d100      	bne.n	800995c <memset+0xa>
 800995a:	4770      	bx	lr
 800995c:	f803 1b01 	strb.w	r1, [r3], #1
 8009960:	e7f9      	b.n	8009956 <memset+0x4>

08009962 <__cvt>:
 8009962:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009966:	ec55 4b10 	vmov	r4, r5, d0
 800996a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800996c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009970:	2d00      	cmp	r5, #0
 8009972:	460e      	mov	r6, r1
 8009974:	4691      	mov	r9, r2
 8009976:	4619      	mov	r1, r3
 8009978:	bfb8      	it	lt
 800997a:	4622      	movlt	r2, r4
 800997c:	462b      	mov	r3, r5
 800997e:	f027 0720 	bic.w	r7, r7, #32
 8009982:	bfbb      	ittet	lt
 8009984:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009988:	461d      	movlt	r5, r3
 800998a:	2300      	movge	r3, #0
 800998c:	232d      	movlt	r3, #45	; 0x2d
 800998e:	bfb8      	it	lt
 8009990:	4614      	movlt	r4, r2
 8009992:	2f46      	cmp	r7, #70	; 0x46
 8009994:	700b      	strb	r3, [r1, #0]
 8009996:	d004      	beq.n	80099a2 <__cvt+0x40>
 8009998:	2f45      	cmp	r7, #69	; 0x45
 800999a:	d100      	bne.n	800999e <__cvt+0x3c>
 800999c:	3601      	adds	r6, #1
 800999e:	2102      	movs	r1, #2
 80099a0:	e000      	b.n	80099a4 <__cvt+0x42>
 80099a2:	2103      	movs	r1, #3
 80099a4:	ab03      	add	r3, sp, #12
 80099a6:	9301      	str	r3, [sp, #4]
 80099a8:	ab02      	add	r3, sp, #8
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	4632      	mov	r2, r6
 80099ae:	4653      	mov	r3, sl
 80099b0:	ec45 4b10 	vmov	d0, r4, r5
 80099b4:	f000 fe24 	bl	800a600 <_dtoa_r>
 80099b8:	2f47      	cmp	r7, #71	; 0x47
 80099ba:	4680      	mov	r8, r0
 80099bc:	d102      	bne.n	80099c4 <__cvt+0x62>
 80099be:	f019 0f01 	tst.w	r9, #1
 80099c2:	d026      	beq.n	8009a12 <__cvt+0xb0>
 80099c4:	2f46      	cmp	r7, #70	; 0x46
 80099c6:	eb08 0906 	add.w	r9, r8, r6
 80099ca:	d111      	bne.n	80099f0 <__cvt+0x8e>
 80099cc:	f898 3000 	ldrb.w	r3, [r8]
 80099d0:	2b30      	cmp	r3, #48	; 0x30
 80099d2:	d10a      	bne.n	80099ea <__cvt+0x88>
 80099d4:	2200      	movs	r2, #0
 80099d6:	2300      	movs	r3, #0
 80099d8:	4620      	mov	r0, r4
 80099da:	4629      	mov	r1, r5
 80099dc:	f7f7 f87c 	bl	8000ad8 <__aeabi_dcmpeq>
 80099e0:	b918      	cbnz	r0, 80099ea <__cvt+0x88>
 80099e2:	f1c6 0601 	rsb	r6, r6, #1
 80099e6:	f8ca 6000 	str.w	r6, [sl]
 80099ea:	f8da 3000 	ldr.w	r3, [sl]
 80099ee:	4499      	add	r9, r3
 80099f0:	2200      	movs	r2, #0
 80099f2:	2300      	movs	r3, #0
 80099f4:	4620      	mov	r0, r4
 80099f6:	4629      	mov	r1, r5
 80099f8:	f7f7 f86e 	bl	8000ad8 <__aeabi_dcmpeq>
 80099fc:	b938      	cbnz	r0, 8009a0e <__cvt+0xac>
 80099fe:	2230      	movs	r2, #48	; 0x30
 8009a00:	9b03      	ldr	r3, [sp, #12]
 8009a02:	454b      	cmp	r3, r9
 8009a04:	d205      	bcs.n	8009a12 <__cvt+0xb0>
 8009a06:	1c59      	adds	r1, r3, #1
 8009a08:	9103      	str	r1, [sp, #12]
 8009a0a:	701a      	strb	r2, [r3, #0]
 8009a0c:	e7f8      	b.n	8009a00 <__cvt+0x9e>
 8009a0e:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a12:	9b03      	ldr	r3, [sp, #12]
 8009a14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a16:	eba3 0308 	sub.w	r3, r3, r8
 8009a1a:	4640      	mov	r0, r8
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	b004      	add	sp, #16
 8009a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009a24 <__exponent>:
 8009a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a26:	2900      	cmp	r1, #0
 8009a28:	4604      	mov	r4, r0
 8009a2a:	bfba      	itte	lt
 8009a2c:	4249      	neglt	r1, r1
 8009a2e:	232d      	movlt	r3, #45	; 0x2d
 8009a30:	232b      	movge	r3, #43	; 0x2b
 8009a32:	2909      	cmp	r1, #9
 8009a34:	f804 2b02 	strb.w	r2, [r4], #2
 8009a38:	7043      	strb	r3, [r0, #1]
 8009a3a:	dd20      	ble.n	8009a7e <__exponent+0x5a>
 8009a3c:	f10d 0307 	add.w	r3, sp, #7
 8009a40:	461f      	mov	r7, r3
 8009a42:	260a      	movs	r6, #10
 8009a44:	fb91 f5f6 	sdiv	r5, r1, r6
 8009a48:	fb06 1115 	mls	r1, r6, r5, r1
 8009a4c:	3130      	adds	r1, #48	; 0x30
 8009a4e:	2d09      	cmp	r5, #9
 8009a50:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a54:	f103 32ff 	add.w	r2, r3, #4294967295
 8009a58:	4629      	mov	r1, r5
 8009a5a:	dc09      	bgt.n	8009a70 <__exponent+0x4c>
 8009a5c:	3130      	adds	r1, #48	; 0x30
 8009a5e:	3b02      	subs	r3, #2
 8009a60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009a64:	42bb      	cmp	r3, r7
 8009a66:	4622      	mov	r2, r4
 8009a68:	d304      	bcc.n	8009a74 <__exponent+0x50>
 8009a6a:	1a10      	subs	r0, r2, r0
 8009a6c:	b003      	add	sp, #12
 8009a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a70:	4613      	mov	r3, r2
 8009a72:	e7e7      	b.n	8009a44 <__exponent+0x20>
 8009a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a78:	f804 2b01 	strb.w	r2, [r4], #1
 8009a7c:	e7f2      	b.n	8009a64 <__exponent+0x40>
 8009a7e:	2330      	movs	r3, #48	; 0x30
 8009a80:	4419      	add	r1, r3
 8009a82:	7083      	strb	r3, [r0, #2]
 8009a84:	1d02      	adds	r2, r0, #4
 8009a86:	70c1      	strb	r1, [r0, #3]
 8009a88:	e7ef      	b.n	8009a6a <__exponent+0x46>
	...

08009a8c <_printf_float>:
 8009a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a90:	b08d      	sub	sp, #52	; 0x34
 8009a92:	460c      	mov	r4, r1
 8009a94:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009a98:	4616      	mov	r6, r2
 8009a9a:	461f      	mov	r7, r3
 8009a9c:	4605      	mov	r5, r0
 8009a9e:	f001 fce1 	bl	800b464 <_localeconv_r>
 8009aa2:	6803      	ldr	r3, [r0, #0]
 8009aa4:	9304      	str	r3, [sp, #16]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7f6 fb9a 	bl	80001e0 <strlen>
 8009aac:	2300      	movs	r3, #0
 8009aae:	930a      	str	r3, [sp, #40]	; 0x28
 8009ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ab4:	9005      	str	r0, [sp, #20]
 8009ab6:	3307      	adds	r3, #7
 8009ab8:	f023 0307 	bic.w	r3, r3, #7
 8009abc:	f103 0208 	add.w	r2, r3, #8
 8009ac0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009ac4:	f8d4 b000 	ldr.w	fp, [r4]
 8009ac8:	f8c8 2000 	str.w	r2, [r8]
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009ad4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009ad8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009adc:	9307      	str	r3, [sp, #28]
 8009ade:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae6:	4ba7      	ldr	r3, [pc, #668]	; (8009d84 <_printf_float+0x2f8>)
 8009ae8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aec:	f7f7 f826 	bl	8000b3c <__aeabi_dcmpun>
 8009af0:	bb70      	cbnz	r0, 8009b50 <_printf_float+0xc4>
 8009af2:	f04f 32ff 	mov.w	r2, #4294967295
 8009af6:	4ba3      	ldr	r3, [pc, #652]	; (8009d84 <_printf_float+0x2f8>)
 8009af8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009afc:	f7f7 f800 	bl	8000b00 <__aeabi_dcmple>
 8009b00:	bb30      	cbnz	r0, 8009b50 <_printf_float+0xc4>
 8009b02:	2200      	movs	r2, #0
 8009b04:	2300      	movs	r3, #0
 8009b06:	4640      	mov	r0, r8
 8009b08:	4649      	mov	r1, r9
 8009b0a:	f7f6 ffef 	bl	8000aec <__aeabi_dcmplt>
 8009b0e:	b110      	cbz	r0, 8009b16 <_printf_float+0x8a>
 8009b10:	232d      	movs	r3, #45	; 0x2d
 8009b12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b16:	4a9c      	ldr	r2, [pc, #624]	; (8009d88 <_printf_float+0x2fc>)
 8009b18:	4b9c      	ldr	r3, [pc, #624]	; (8009d8c <_printf_float+0x300>)
 8009b1a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009b1e:	bf8c      	ite	hi
 8009b20:	4690      	movhi	r8, r2
 8009b22:	4698      	movls	r8, r3
 8009b24:	2303      	movs	r3, #3
 8009b26:	f02b 0204 	bic.w	r2, fp, #4
 8009b2a:	6123      	str	r3, [r4, #16]
 8009b2c:	6022      	str	r2, [r4, #0]
 8009b2e:	f04f 0900 	mov.w	r9, #0
 8009b32:	9700      	str	r7, [sp, #0]
 8009b34:	4633      	mov	r3, r6
 8009b36:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b38:	4621      	mov	r1, r4
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	f000 f9e6 	bl	8009f0c <_printf_common>
 8009b40:	3001      	adds	r0, #1
 8009b42:	f040 808d 	bne.w	8009c60 <_printf_float+0x1d4>
 8009b46:	f04f 30ff 	mov.w	r0, #4294967295
 8009b4a:	b00d      	add	sp, #52	; 0x34
 8009b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b50:	4642      	mov	r2, r8
 8009b52:	464b      	mov	r3, r9
 8009b54:	4640      	mov	r0, r8
 8009b56:	4649      	mov	r1, r9
 8009b58:	f7f6 fff0 	bl	8000b3c <__aeabi_dcmpun>
 8009b5c:	b110      	cbz	r0, 8009b64 <_printf_float+0xd8>
 8009b5e:	4a8c      	ldr	r2, [pc, #560]	; (8009d90 <_printf_float+0x304>)
 8009b60:	4b8c      	ldr	r3, [pc, #560]	; (8009d94 <_printf_float+0x308>)
 8009b62:	e7da      	b.n	8009b1a <_printf_float+0x8e>
 8009b64:	6861      	ldr	r1, [r4, #4]
 8009b66:	1c4b      	adds	r3, r1, #1
 8009b68:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009b6c:	a80a      	add	r0, sp, #40	; 0x28
 8009b6e:	d13e      	bne.n	8009bee <_printf_float+0x162>
 8009b70:	2306      	movs	r3, #6
 8009b72:	6063      	str	r3, [r4, #4]
 8009b74:	2300      	movs	r3, #0
 8009b76:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009b7a:	ab09      	add	r3, sp, #36	; 0x24
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	ec49 8b10 	vmov	d0, r8, r9
 8009b82:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b86:	6022      	str	r2, [r4, #0]
 8009b88:	f8cd a004 	str.w	sl, [sp, #4]
 8009b8c:	6861      	ldr	r1, [r4, #4]
 8009b8e:	4628      	mov	r0, r5
 8009b90:	f7ff fee7 	bl	8009962 <__cvt>
 8009b94:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009b98:	2b47      	cmp	r3, #71	; 0x47
 8009b9a:	4680      	mov	r8, r0
 8009b9c:	d109      	bne.n	8009bb2 <_printf_float+0x126>
 8009b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba0:	1cd8      	adds	r0, r3, #3
 8009ba2:	db02      	blt.n	8009baa <_printf_float+0x11e>
 8009ba4:	6862      	ldr	r2, [r4, #4]
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	dd47      	ble.n	8009c3a <_printf_float+0x1ae>
 8009baa:	f1aa 0a02 	sub.w	sl, sl, #2
 8009bae:	fa5f fa8a 	uxtb.w	sl, sl
 8009bb2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009bb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bb8:	d824      	bhi.n	8009c04 <_printf_float+0x178>
 8009bba:	3901      	subs	r1, #1
 8009bbc:	4652      	mov	r2, sl
 8009bbe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009bc2:	9109      	str	r1, [sp, #36]	; 0x24
 8009bc4:	f7ff ff2e 	bl	8009a24 <__exponent>
 8009bc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bca:	1813      	adds	r3, r2, r0
 8009bcc:	2a01      	cmp	r2, #1
 8009bce:	4681      	mov	r9, r0
 8009bd0:	6123      	str	r3, [r4, #16]
 8009bd2:	dc02      	bgt.n	8009bda <_printf_float+0x14e>
 8009bd4:	6822      	ldr	r2, [r4, #0]
 8009bd6:	07d1      	lsls	r1, r2, #31
 8009bd8:	d501      	bpl.n	8009bde <_printf_float+0x152>
 8009bda:	3301      	adds	r3, #1
 8009bdc:	6123      	str	r3, [r4, #16]
 8009bde:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d0a5      	beq.n	8009b32 <_printf_float+0xa6>
 8009be6:	232d      	movs	r3, #45	; 0x2d
 8009be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bec:	e7a1      	b.n	8009b32 <_printf_float+0xa6>
 8009bee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009bf2:	f000 8177 	beq.w	8009ee4 <_printf_float+0x458>
 8009bf6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009bfa:	d1bb      	bne.n	8009b74 <_printf_float+0xe8>
 8009bfc:	2900      	cmp	r1, #0
 8009bfe:	d1b9      	bne.n	8009b74 <_printf_float+0xe8>
 8009c00:	2301      	movs	r3, #1
 8009c02:	e7b6      	b.n	8009b72 <_printf_float+0xe6>
 8009c04:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009c08:	d119      	bne.n	8009c3e <_printf_float+0x1b2>
 8009c0a:	2900      	cmp	r1, #0
 8009c0c:	6863      	ldr	r3, [r4, #4]
 8009c0e:	dd0c      	ble.n	8009c2a <_printf_float+0x19e>
 8009c10:	6121      	str	r1, [r4, #16]
 8009c12:	b913      	cbnz	r3, 8009c1a <_printf_float+0x18e>
 8009c14:	6822      	ldr	r2, [r4, #0]
 8009c16:	07d2      	lsls	r2, r2, #31
 8009c18:	d502      	bpl.n	8009c20 <_printf_float+0x194>
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	440b      	add	r3, r1
 8009c1e:	6123      	str	r3, [r4, #16]
 8009c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c22:	65a3      	str	r3, [r4, #88]	; 0x58
 8009c24:	f04f 0900 	mov.w	r9, #0
 8009c28:	e7d9      	b.n	8009bde <_printf_float+0x152>
 8009c2a:	b913      	cbnz	r3, 8009c32 <_printf_float+0x1a6>
 8009c2c:	6822      	ldr	r2, [r4, #0]
 8009c2e:	07d0      	lsls	r0, r2, #31
 8009c30:	d501      	bpl.n	8009c36 <_printf_float+0x1aa>
 8009c32:	3302      	adds	r3, #2
 8009c34:	e7f3      	b.n	8009c1e <_printf_float+0x192>
 8009c36:	2301      	movs	r3, #1
 8009c38:	e7f1      	b.n	8009c1e <_printf_float+0x192>
 8009c3a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009c3e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009c42:	4293      	cmp	r3, r2
 8009c44:	db05      	blt.n	8009c52 <_printf_float+0x1c6>
 8009c46:	6822      	ldr	r2, [r4, #0]
 8009c48:	6123      	str	r3, [r4, #16]
 8009c4a:	07d1      	lsls	r1, r2, #31
 8009c4c:	d5e8      	bpl.n	8009c20 <_printf_float+0x194>
 8009c4e:	3301      	adds	r3, #1
 8009c50:	e7e5      	b.n	8009c1e <_printf_float+0x192>
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bfd4      	ite	le
 8009c56:	f1c3 0302 	rsble	r3, r3, #2
 8009c5a:	2301      	movgt	r3, #1
 8009c5c:	4413      	add	r3, r2
 8009c5e:	e7de      	b.n	8009c1e <_printf_float+0x192>
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	055a      	lsls	r2, r3, #21
 8009c64:	d407      	bmi.n	8009c76 <_printf_float+0x1ea>
 8009c66:	6923      	ldr	r3, [r4, #16]
 8009c68:	4642      	mov	r2, r8
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	47b8      	blx	r7
 8009c70:	3001      	adds	r0, #1
 8009c72:	d12b      	bne.n	8009ccc <_printf_float+0x240>
 8009c74:	e767      	b.n	8009b46 <_printf_float+0xba>
 8009c76:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009c7a:	f240 80dc 	bls.w	8009e36 <_printf_float+0x3aa>
 8009c7e:	2200      	movs	r2, #0
 8009c80:	2300      	movs	r3, #0
 8009c82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c86:	f7f6 ff27 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	d033      	beq.n	8009cf6 <_printf_float+0x26a>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	4a41      	ldr	r2, [pc, #260]	; (8009d98 <_printf_float+0x30c>)
 8009c92:	4631      	mov	r1, r6
 8009c94:	4628      	mov	r0, r5
 8009c96:	47b8      	blx	r7
 8009c98:	3001      	adds	r0, #1
 8009c9a:	f43f af54 	beq.w	8009b46 <_printf_float+0xba>
 8009c9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	db02      	blt.n	8009cac <_printf_float+0x220>
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	07d8      	lsls	r0, r3, #31
 8009caa:	d50f      	bpl.n	8009ccc <_printf_float+0x240>
 8009cac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cb0:	4631      	mov	r1, r6
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	47b8      	blx	r7
 8009cb6:	3001      	adds	r0, #1
 8009cb8:	f43f af45 	beq.w	8009b46 <_printf_float+0xba>
 8009cbc:	f04f 0800 	mov.w	r8, #0
 8009cc0:	f104 091a 	add.w	r9, r4, #26
 8009cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	4543      	cmp	r3, r8
 8009cca:	dc09      	bgt.n	8009ce0 <_printf_float+0x254>
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	079b      	lsls	r3, r3, #30
 8009cd0:	f100 8103 	bmi.w	8009eda <_printf_float+0x44e>
 8009cd4:	68e0      	ldr	r0, [r4, #12]
 8009cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cd8:	4298      	cmp	r0, r3
 8009cda:	bfb8      	it	lt
 8009cdc:	4618      	movlt	r0, r3
 8009cde:	e734      	b.n	8009b4a <_printf_float+0xbe>
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	464a      	mov	r2, r9
 8009ce4:	4631      	mov	r1, r6
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	47b8      	blx	r7
 8009cea:	3001      	adds	r0, #1
 8009cec:	f43f af2b 	beq.w	8009b46 <_printf_float+0xba>
 8009cf0:	f108 0801 	add.w	r8, r8, #1
 8009cf4:	e7e6      	b.n	8009cc4 <_printf_float+0x238>
 8009cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	dc2b      	bgt.n	8009d54 <_printf_float+0x2c8>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	4a26      	ldr	r2, [pc, #152]	; (8009d98 <_printf_float+0x30c>)
 8009d00:	4631      	mov	r1, r6
 8009d02:	4628      	mov	r0, r5
 8009d04:	47b8      	blx	r7
 8009d06:	3001      	adds	r0, #1
 8009d08:	f43f af1d 	beq.w	8009b46 <_printf_float+0xba>
 8009d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d0e:	b923      	cbnz	r3, 8009d1a <_printf_float+0x28e>
 8009d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d12:	b913      	cbnz	r3, 8009d1a <_printf_float+0x28e>
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	07d9      	lsls	r1, r3, #31
 8009d18:	d5d8      	bpl.n	8009ccc <_printf_float+0x240>
 8009d1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d1e:	4631      	mov	r1, r6
 8009d20:	4628      	mov	r0, r5
 8009d22:	47b8      	blx	r7
 8009d24:	3001      	adds	r0, #1
 8009d26:	f43f af0e 	beq.w	8009b46 <_printf_float+0xba>
 8009d2a:	f04f 0900 	mov.w	r9, #0
 8009d2e:	f104 0a1a 	add.w	sl, r4, #26
 8009d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d34:	425b      	negs	r3, r3
 8009d36:	454b      	cmp	r3, r9
 8009d38:	dc01      	bgt.n	8009d3e <_printf_float+0x2b2>
 8009d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d3c:	e794      	b.n	8009c68 <_printf_float+0x1dc>
 8009d3e:	2301      	movs	r3, #1
 8009d40:	4652      	mov	r2, sl
 8009d42:	4631      	mov	r1, r6
 8009d44:	4628      	mov	r0, r5
 8009d46:	47b8      	blx	r7
 8009d48:	3001      	adds	r0, #1
 8009d4a:	f43f aefc 	beq.w	8009b46 <_printf_float+0xba>
 8009d4e:	f109 0901 	add.w	r9, r9, #1
 8009d52:	e7ee      	b.n	8009d32 <_printf_float+0x2a6>
 8009d54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	bfa8      	it	ge
 8009d5c:	461a      	movge	r2, r3
 8009d5e:	2a00      	cmp	r2, #0
 8009d60:	4691      	mov	r9, r2
 8009d62:	dd07      	ble.n	8009d74 <_printf_float+0x2e8>
 8009d64:	4613      	mov	r3, r2
 8009d66:	4631      	mov	r1, r6
 8009d68:	4642      	mov	r2, r8
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	47b8      	blx	r7
 8009d6e:	3001      	adds	r0, #1
 8009d70:	f43f aee9 	beq.w	8009b46 <_printf_float+0xba>
 8009d74:	f104 031a 	add.w	r3, r4, #26
 8009d78:	f04f 0b00 	mov.w	fp, #0
 8009d7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d80:	9306      	str	r3, [sp, #24]
 8009d82:	e015      	b.n	8009db0 <_printf_float+0x324>
 8009d84:	7fefffff 	.word	0x7fefffff
 8009d88:	0800c2e8 	.word	0x0800c2e8
 8009d8c:	0800c2e4 	.word	0x0800c2e4
 8009d90:	0800c2f0 	.word	0x0800c2f0
 8009d94:	0800c2ec 	.word	0x0800c2ec
 8009d98:	0800c2f4 	.word	0x0800c2f4
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	9a06      	ldr	r2, [sp, #24]
 8009da0:	4631      	mov	r1, r6
 8009da2:	4628      	mov	r0, r5
 8009da4:	47b8      	blx	r7
 8009da6:	3001      	adds	r0, #1
 8009da8:	f43f aecd 	beq.w	8009b46 <_printf_float+0xba>
 8009dac:	f10b 0b01 	add.w	fp, fp, #1
 8009db0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009db4:	ebaa 0309 	sub.w	r3, sl, r9
 8009db8:	455b      	cmp	r3, fp
 8009dba:	dcef      	bgt.n	8009d9c <_printf_float+0x310>
 8009dbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	44d0      	add	r8, sl
 8009dc4:	db15      	blt.n	8009df2 <_printf_float+0x366>
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	07da      	lsls	r2, r3, #31
 8009dca:	d412      	bmi.n	8009df2 <_printf_float+0x366>
 8009dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dd0:	eba3 020a 	sub.w	r2, r3, sl
 8009dd4:	eba3 0a01 	sub.w	sl, r3, r1
 8009dd8:	4592      	cmp	sl, r2
 8009dda:	bfa8      	it	ge
 8009ddc:	4692      	movge	sl, r2
 8009dde:	f1ba 0f00 	cmp.w	sl, #0
 8009de2:	dc0e      	bgt.n	8009e02 <_printf_float+0x376>
 8009de4:	f04f 0800 	mov.w	r8, #0
 8009de8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009dec:	f104 091a 	add.w	r9, r4, #26
 8009df0:	e019      	b.n	8009e26 <_printf_float+0x39a>
 8009df2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009df6:	4631      	mov	r1, r6
 8009df8:	4628      	mov	r0, r5
 8009dfa:	47b8      	blx	r7
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d1e5      	bne.n	8009dcc <_printf_float+0x340>
 8009e00:	e6a1      	b.n	8009b46 <_printf_float+0xba>
 8009e02:	4653      	mov	r3, sl
 8009e04:	4642      	mov	r2, r8
 8009e06:	4631      	mov	r1, r6
 8009e08:	4628      	mov	r0, r5
 8009e0a:	47b8      	blx	r7
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	d1e9      	bne.n	8009de4 <_printf_float+0x358>
 8009e10:	e699      	b.n	8009b46 <_printf_float+0xba>
 8009e12:	2301      	movs	r3, #1
 8009e14:	464a      	mov	r2, r9
 8009e16:	4631      	mov	r1, r6
 8009e18:	4628      	mov	r0, r5
 8009e1a:	47b8      	blx	r7
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	f43f ae92 	beq.w	8009b46 <_printf_float+0xba>
 8009e22:	f108 0801 	add.w	r8, r8, #1
 8009e26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e2a:	1a9b      	subs	r3, r3, r2
 8009e2c:	eba3 030a 	sub.w	r3, r3, sl
 8009e30:	4543      	cmp	r3, r8
 8009e32:	dcee      	bgt.n	8009e12 <_printf_float+0x386>
 8009e34:	e74a      	b.n	8009ccc <_printf_float+0x240>
 8009e36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e38:	2a01      	cmp	r2, #1
 8009e3a:	dc01      	bgt.n	8009e40 <_printf_float+0x3b4>
 8009e3c:	07db      	lsls	r3, r3, #31
 8009e3e:	d53a      	bpl.n	8009eb6 <_printf_float+0x42a>
 8009e40:	2301      	movs	r3, #1
 8009e42:	4642      	mov	r2, r8
 8009e44:	4631      	mov	r1, r6
 8009e46:	4628      	mov	r0, r5
 8009e48:	47b8      	blx	r7
 8009e4a:	3001      	adds	r0, #1
 8009e4c:	f43f ae7b 	beq.w	8009b46 <_printf_float+0xba>
 8009e50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e54:	4631      	mov	r1, r6
 8009e56:	4628      	mov	r0, r5
 8009e58:	47b8      	blx	r7
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	f108 0801 	add.w	r8, r8, #1
 8009e60:	f43f ae71 	beq.w	8009b46 <_printf_float+0xba>
 8009e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e66:	2200      	movs	r2, #0
 8009e68:	f103 3aff 	add.w	sl, r3, #4294967295
 8009e6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e70:	2300      	movs	r3, #0
 8009e72:	f7f6 fe31 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e76:	b9c8      	cbnz	r0, 8009eac <_printf_float+0x420>
 8009e78:	4653      	mov	r3, sl
 8009e7a:	4642      	mov	r2, r8
 8009e7c:	4631      	mov	r1, r6
 8009e7e:	4628      	mov	r0, r5
 8009e80:	47b8      	blx	r7
 8009e82:	3001      	adds	r0, #1
 8009e84:	d10e      	bne.n	8009ea4 <_printf_float+0x418>
 8009e86:	e65e      	b.n	8009b46 <_printf_float+0xba>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	4652      	mov	r2, sl
 8009e8c:	4631      	mov	r1, r6
 8009e8e:	4628      	mov	r0, r5
 8009e90:	47b8      	blx	r7
 8009e92:	3001      	adds	r0, #1
 8009e94:	f43f ae57 	beq.w	8009b46 <_printf_float+0xba>
 8009e98:	f108 0801 	add.w	r8, r8, #1
 8009e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	4543      	cmp	r3, r8
 8009ea2:	dcf1      	bgt.n	8009e88 <_printf_float+0x3fc>
 8009ea4:	464b      	mov	r3, r9
 8009ea6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009eaa:	e6de      	b.n	8009c6a <_printf_float+0x1de>
 8009eac:	f04f 0800 	mov.w	r8, #0
 8009eb0:	f104 0a1a 	add.w	sl, r4, #26
 8009eb4:	e7f2      	b.n	8009e9c <_printf_float+0x410>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e7df      	b.n	8009e7a <_printf_float+0x3ee>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	464a      	mov	r2, r9
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	47b8      	blx	r7
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	f43f ae3e 	beq.w	8009b46 <_printf_float+0xba>
 8009eca:	f108 0801 	add.w	r8, r8, #1
 8009ece:	68e3      	ldr	r3, [r4, #12]
 8009ed0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ed2:	1a9b      	subs	r3, r3, r2
 8009ed4:	4543      	cmp	r3, r8
 8009ed6:	dcf0      	bgt.n	8009eba <_printf_float+0x42e>
 8009ed8:	e6fc      	b.n	8009cd4 <_printf_float+0x248>
 8009eda:	f04f 0800 	mov.w	r8, #0
 8009ede:	f104 0919 	add.w	r9, r4, #25
 8009ee2:	e7f4      	b.n	8009ece <_printf_float+0x442>
 8009ee4:	2900      	cmp	r1, #0
 8009ee6:	f43f ae8b 	beq.w	8009c00 <_printf_float+0x174>
 8009eea:	2300      	movs	r3, #0
 8009eec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009ef0:	ab09      	add	r3, sp, #36	; 0x24
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	ec49 8b10 	vmov	d0, r8, r9
 8009ef8:	6022      	str	r2, [r4, #0]
 8009efa:	f8cd a004 	str.w	sl, [sp, #4]
 8009efe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f02:	4628      	mov	r0, r5
 8009f04:	f7ff fd2d 	bl	8009962 <__cvt>
 8009f08:	4680      	mov	r8, r0
 8009f0a:	e648      	b.n	8009b9e <_printf_float+0x112>

08009f0c <_printf_common>:
 8009f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f10:	4691      	mov	r9, r2
 8009f12:	461f      	mov	r7, r3
 8009f14:	688a      	ldr	r2, [r1, #8]
 8009f16:	690b      	ldr	r3, [r1, #16]
 8009f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	bfb8      	it	lt
 8009f20:	4613      	movlt	r3, r2
 8009f22:	f8c9 3000 	str.w	r3, [r9]
 8009f26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	b112      	cbz	r2, 8009f36 <_printf_common+0x2a>
 8009f30:	3301      	adds	r3, #1
 8009f32:	f8c9 3000 	str.w	r3, [r9]
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	0699      	lsls	r1, r3, #26
 8009f3a:	bf42      	ittt	mi
 8009f3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009f40:	3302      	addmi	r3, #2
 8009f42:	f8c9 3000 	strmi.w	r3, [r9]
 8009f46:	6825      	ldr	r5, [r4, #0]
 8009f48:	f015 0506 	ands.w	r5, r5, #6
 8009f4c:	d107      	bne.n	8009f5e <_printf_common+0x52>
 8009f4e:	f104 0a19 	add.w	sl, r4, #25
 8009f52:	68e3      	ldr	r3, [r4, #12]
 8009f54:	f8d9 2000 	ldr.w	r2, [r9]
 8009f58:	1a9b      	subs	r3, r3, r2
 8009f5a:	42ab      	cmp	r3, r5
 8009f5c:	dc28      	bgt.n	8009fb0 <_printf_common+0xa4>
 8009f5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009f62:	6822      	ldr	r2, [r4, #0]
 8009f64:	3300      	adds	r3, #0
 8009f66:	bf18      	it	ne
 8009f68:	2301      	movne	r3, #1
 8009f6a:	0692      	lsls	r2, r2, #26
 8009f6c:	d42d      	bmi.n	8009fca <_printf_common+0xbe>
 8009f6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f72:	4639      	mov	r1, r7
 8009f74:	4630      	mov	r0, r6
 8009f76:	47c0      	blx	r8
 8009f78:	3001      	adds	r0, #1
 8009f7a:	d020      	beq.n	8009fbe <_printf_common+0xb2>
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	68e5      	ldr	r5, [r4, #12]
 8009f80:	f8d9 2000 	ldr.w	r2, [r9]
 8009f84:	f003 0306 	and.w	r3, r3, #6
 8009f88:	2b04      	cmp	r3, #4
 8009f8a:	bf08      	it	eq
 8009f8c:	1aad      	subeq	r5, r5, r2
 8009f8e:	68a3      	ldr	r3, [r4, #8]
 8009f90:	6922      	ldr	r2, [r4, #16]
 8009f92:	bf0c      	ite	eq
 8009f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f98:	2500      	movne	r5, #0
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	bfc4      	itt	gt
 8009f9e:	1a9b      	subgt	r3, r3, r2
 8009fa0:	18ed      	addgt	r5, r5, r3
 8009fa2:	f04f 0900 	mov.w	r9, #0
 8009fa6:	341a      	adds	r4, #26
 8009fa8:	454d      	cmp	r5, r9
 8009faa:	d11a      	bne.n	8009fe2 <_printf_common+0xd6>
 8009fac:	2000      	movs	r0, #0
 8009fae:	e008      	b.n	8009fc2 <_printf_common+0xb6>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	4652      	mov	r2, sl
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	47c0      	blx	r8
 8009fba:	3001      	adds	r0, #1
 8009fbc:	d103      	bne.n	8009fc6 <_printf_common+0xba>
 8009fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc6:	3501      	adds	r5, #1
 8009fc8:	e7c3      	b.n	8009f52 <_printf_common+0x46>
 8009fca:	18e1      	adds	r1, r4, r3
 8009fcc:	1c5a      	adds	r2, r3, #1
 8009fce:	2030      	movs	r0, #48	; 0x30
 8009fd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fd4:	4422      	add	r2, r4
 8009fd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fde:	3302      	adds	r3, #2
 8009fe0:	e7c5      	b.n	8009f6e <_printf_common+0x62>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	4622      	mov	r2, r4
 8009fe6:	4639      	mov	r1, r7
 8009fe8:	4630      	mov	r0, r6
 8009fea:	47c0      	blx	r8
 8009fec:	3001      	adds	r0, #1
 8009fee:	d0e6      	beq.n	8009fbe <_printf_common+0xb2>
 8009ff0:	f109 0901 	add.w	r9, r9, #1
 8009ff4:	e7d8      	b.n	8009fa8 <_printf_common+0x9c>
	...

08009ff8 <_printf_i>:
 8009ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ffc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a000:	460c      	mov	r4, r1
 800a002:	7e09      	ldrb	r1, [r1, #24]
 800a004:	b085      	sub	sp, #20
 800a006:	296e      	cmp	r1, #110	; 0x6e
 800a008:	4617      	mov	r7, r2
 800a00a:	4606      	mov	r6, r0
 800a00c:	4698      	mov	r8, r3
 800a00e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a010:	f000 80b3 	beq.w	800a17a <_printf_i+0x182>
 800a014:	d822      	bhi.n	800a05c <_printf_i+0x64>
 800a016:	2963      	cmp	r1, #99	; 0x63
 800a018:	d036      	beq.n	800a088 <_printf_i+0x90>
 800a01a:	d80a      	bhi.n	800a032 <_printf_i+0x3a>
 800a01c:	2900      	cmp	r1, #0
 800a01e:	f000 80b9 	beq.w	800a194 <_printf_i+0x19c>
 800a022:	2958      	cmp	r1, #88	; 0x58
 800a024:	f000 8083 	beq.w	800a12e <_printf_i+0x136>
 800a028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a02c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a030:	e032      	b.n	800a098 <_printf_i+0xa0>
 800a032:	2964      	cmp	r1, #100	; 0x64
 800a034:	d001      	beq.n	800a03a <_printf_i+0x42>
 800a036:	2969      	cmp	r1, #105	; 0x69
 800a038:	d1f6      	bne.n	800a028 <_printf_i+0x30>
 800a03a:	6820      	ldr	r0, [r4, #0]
 800a03c:	6813      	ldr	r3, [r2, #0]
 800a03e:	0605      	lsls	r5, r0, #24
 800a040:	f103 0104 	add.w	r1, r3, #4
 800a044:	d52a      	bpl.n	800a09c <_printf_i+0xa4>
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6011      	str	r1, [r2, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	da03      	bge.n	800a056 <_printf_i+0x5e>
 800a04e:	222d      	movs	r2, #45	; 0x2d
 800a050:	425b      	negs	r3, r3
 800a052:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a056:	486f      	ldr	r0, [pc, #444]	; (800a214 <_printf_i+0x21c>)
 800a058:	220a      	movs	r2, #10
 800a05a:	e039      	b.n	800a0d0 <_printf_i+0xd8>
 800a05c:	2973      	cmp	r1, #115	; 0x73
 800a05e:	f000 809d 	beq.w	800a19c <_printf_i+0x1a4>
 800a062:	d808      	bhi.n	800a076 <_printf_i+0x7e>
 800a064:	296f      	cmp	r1, #111	; 0x6f
 800a066:	d020      	beq.n	800a0aa <_printf_i+0xb2>
 800a068:	2970      	cmp	r1, #112	; 0x70
 800a06a:	d1dd      	bne.n	800a028 <_printf_i+0x30>
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	f043 0320 	orr.w	r3, r3, #32
 800a072:	6023      	str	r3, [r4, #0]
 800a074:	e003      	b.n	800a07e <_printf_i+0x86>
 800a076:	2975      	cmp	r1, #117	; 0x75
 800a078:	d017      	beq.n	800a0aa <_printf_i+0xb2>
 800a07a:	2978      	cmp	r1, #120	; 0x78
 800a07c:	d1d4      	bne.n	800a028 <_printf_i+0x30>
 800a07e:	2378      	movs	r3, #120	; 0x78
 800a080:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a084:	4864      	ldr	r0, [pc, #400]	; (800a218 <_printf_i+0x220>)
 800a086:	e055      	b.n	800a134 <_printf_i+0x13c>
 800a088:	6813      	ldr	r3, [r2, #0]
 800a08a:	1d19      	adds	r1, r3, #4
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	6011      	str	r1, [r2, #0]
 800a090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a098:	2301      	movs	r3, #1
 800a09a:	e08c      	b.n	800a1b6 <_printf_i+0x1be>
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6011      	str	r1, [r2, #0]
 800a0a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0a4:	bf18      	it	ne
 800a0a6:	b21b      	sxthne	r3, r3
 800a0a8:	e7cf      	b.n	800a04a <_printf_i+0x52>
 800a0aa:	6813      	ldr	r3, [r2, #0]
 800a0ac:	6825      	ldr	r5, [r4, #0]
 800a0ae:	1d18      	adds	r0, r3, #4
 800a0b0:	6010      	str	r0, [r2, #0]
 800a0b2:	0628      	lsls	r0, r5, #24
 800a0b4:	d501      	bpl.n	800a0ba <_printf_i+0xc2>
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	e002      	b.n	800a0c0 <_printf_i+0xc8>
 800a0ba:	0668      	lsls	r0, r5, #25
 800a0bc:	d5fb      	bpl.n	800a0b6 <_printf_i+0xbe>
 800a0be:	881b      	ldrh	r3, [r3, #0]
 800a0c0:	4854      	ldr	r0, [pc, #336]	; (800a214 <_printf_i+0x21c>)
 800a0c2:	296f      	cmp	r1, #111	; 0x6f
 800a0c4:	bf14      	ite	ne
 800a0c6:	220a      	movne	r2, #10
 800a0c8:	2208      	moveq	r2, #8
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0d0:	6865      	ldr	r5, [r4, #4]
 800a0d2:	60a5      	str	r5, [r4, #8]
 800a0d4:	2d00      	cmp	r5, #0
 800a0d6:	f2c0 8095 	blt.w	800a204 <_printf_i+0x20c>
 800a0da:	6821      	ldr	r1, [r4, #0]
 800a0dc:	f021 0104 	bic.w	r1, r1, #4
 800a0e0:	6021      	str	r1, [r4, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d13d      	bne.n	800a162 <_printf_i+0x16a>
 800a0e6:	2d00      	cmp	r5, #0
 800a0e8:	f040 808e 	bne.w	800a208 <_printf_i+0x210>
 800a0ec:	4665      	mov	r5, ip
 800a0ee:	2a08      	cmp	r2, #8
 800a0f0:	d10b      	bne.n	800a10a <_printf_i+0x112>
 800a0f2:	6823      	ldr	r3, [r4, #0]
 800a0f4:	07db      	lsls	r3, r3, #31
 800a0f6:	d508      	bpl.n	800a10a <_printf_i+0x112>
 800a0f8:	6923      	ldr	r3, [r4, #16]
 800a0fa:	6862      	ldr	r2, [r4, #4]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	bfde      	ittt	le
 800a100:	2330      	movle	r3, #48	; 0x30
 800a102:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a106:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a10a:	ebac 0305 	sub.w	r3, ip, r5
 800a10e:	6123      	str	r3, [r4, #16]
 800a110:	f8cd 8000 	str.w	r8, [sp]
 800a114:	463b      	mov	r3, r7
 800a116:	aa03      	add	r2, sp, #12
 800a118:	4621      	mov	r1, r4
 800a11a:	4630      	mov	r0, r6
 800a11c:	f7ff fef6 	bl	8009f0c <_printf_common>
 800a120:	3001      	adds	r0, #1
 800a122:	d14d      	bne.n	800a1c0 <_printf_i+0x1c8>
 800a124:	f04f 30ff 	mov.w	r0, #4294967295
 800a128:	b005      	add	sp, #20
 800a12a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a12e:	4839      	ldr	r0, [pc, #228]	; (800a214 <_printf_i+0x21c>)
 800a130:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a134:	6813      	ldr	r3, [r2, #0]
 800a136:	6821      	ldr	r1, [r4, #0]
 800a138:	1d1d      	adds	r5, r3, #4
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	6015      	str	r5, [r2, #0]
 800a13e:	060a      	lsls	r2, r1, #24
 800a140:	d50b      	bpl.n	800a15a <_printf_i+0x162>
 800a142:	07ca      	lsls	r2, r1, #31
 800a144:	bf44      	itt	mi
 800a146:	f041 0120 	orrmi.w	r1, r1, #32
 800a14a:	6021      	strmi	r1, [r4, #0]
 800a14c:	b91b      	cbnz	r3, 800a156 <_printf_i+0x15e>
 800a14e:	6822      	ldr	r2, [r4, #0]
 800a150:	f022 0220 	bic.w	r2, r2, #32
 800a154:	6022      	str	r2, [r4, #0]
 800a156:	2210      	movs	r2, #16
 800a158:	e7b7      	b.n	800a0ca <_printf_i+0xd2>
 800a15a:	064d      	lsls	r5, r1, #25
 800a15c:	bf48      	it	mi
 800a15e:	b29b      	uxthmi	r3, r3
 800a160:	e7ef      	b.n	800a142 <_printf_i+0x14a>
 800a162:	4665      	mov	r5, ip
 800a164:	fbb3 f1f2 	udiv	r1, r3, r2
 800a168:	fb02 3311 	mls	r3, r2, r1, r3
 800a16c:	5cc3      	ldrb	r3, [r0, r3]
 800a16e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a172:	460b      	mov	r3, r1
 800a174:	2900      	cmp	r1, #0
 800a176:	d1f5      	bne.n	800a164 <_printf_i+0x16c>
 800a178:	e7b9      	b.n	800a0ee <_printf_i+0xf6>
 800a17a:	6813      	ldr	r3, [r2, #0]
 800a17c:	6825      	ldr	r5, [r4, #0]
 800a17e:	6961      	ldr	r1, [r4, #20]
 800a180:	1d18      	adds	r0, r3, #4
 800a182:	6010      	str	r0, [r2, #0]
 800a184:	0628      	lsls	r0, r5, #24
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	d501      	bpl.n	800a18e <_printf_i+0x196>
 800a18a:	6019      	str	r1, [r3, #0]
 800a18c:	e002      	b.n	800a194 <_printf_i+0x19c>
 800a18e:	066a      	lsls	r2, r5, #25
 800a190:	d5fb      	bpl.n	800a18a <_printf_i+0x192>
 800a192:	8019      	strh	r1, [r3, #0]
 800a194:	2300      	movs	r3, #0
 800a196:	6123      	str	r3, [r4, #16]
 800a198:	4665      	mov	r5, ip
 800a19a:	e7b9      	b.n	800a110 <_printf_i+0x118>
 800a19c:	6813      	ldr	r3, [r2, #0]
 800a19e:	1d19      	adds	r1, r3, #4
 800a1a0:	6011      	str	r1, [r2, #0]
 800a1a2:	681d      	ldr	r5, [r3, #0]
 800a1a4:	6862      	ldr	r2, [r4, #4]
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f7f6 f821 	bl	80001f0 <memchr>
 800a1ae:	b108      	cbz	r0, 800a1b4 <_printf_i+0x1bc>
 800a1b0:	1b40      	subs	r0, r0, r5
 800a1b2:	6060      	str	r0, [r4, #4]
 800a1b4:	6863      	ldr	r3, [r4, #4]
 800a1b6:	6123      	str	r3, [r4, #16]
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1be:	e7a7      	b.n	800a110 <_printf_i+0x118>
 800a1c0:	6923      	ldr	r3, [r4, #16]
 800a1c2:	462a      	mov	r2, r5
 800a1c4:	4639      	mov	r1, r7
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	47c0      	blx	r8
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	d0aa      	beq.n	800a124 <_printf_i+0x12c>
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	079b      	lsls	r3, r3, #30
 800a1d2:	d413      	bmi.n	800a1fc <_printf_i+0x204>
 800a1d4:	68e0      	ldr	r0, [r4, #12]
 800a1d6:	9b03      	ldr	r3, [sp, #12]
 800a1d8:	4298      	cmp	r0, r3
 800a1da:	bfb8      	it	lt
 800a1dc:	4618      	movlt	r0, r3
 800a1de:	e7a3      	b.n	800a128 <_printf_i+0x130>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	464a      	mov	r2, r9
 800a1e4:	4639      	mov	r1, r7
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	47c0      	blx	r8
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	d09a      	beq.n	800a124 <_printf_i+0x12c>
 800a1ee:	3501      	adds	r5, #1
 800a1f0:	68e3      	ldr	r3, [r4, #12]
 800a1f2:	9a03      	ldr	r2, [sp, #12]
 800a1f4:	1a9b      	subs	r3, r3, r2
 800a1f6:	42ab      	cmp	r3, r5
 800a1f8:	dcf2      	bgt.n	800a1e0 <_printf_i+0x1e8>
 800a1fa:	e7eb      	b.n	800a1d4 <_printf_i+0x1dc>
 800a1fc:	2500      	movs	r5, #0
 800a1fe:	f104 0919 	add.w	r9, r4, #25
 800a202:	e7f5      	b.n	800a1f0 <_printf_i+0x1f8>
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1ac      	bne.n	800a162 <_printf_i+0x16a>
 800a208:	7803      	ldrb	r3, [r0, #0]
 800a20a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a20e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a212:	e76c      	b.n	800a0ee <_printf_i+0xf6>
 800a214:	0800c2f6 	.word	0x0800c2f6
 800a218:	0800c307 	.word	0x0800c307

0800a21c <iprintf>:
 800a21c:	b40f      	push	{r0, r1, r2, r3}
 800a21e:	4b0a      	ldr	r3, [pc, #40]	; (800a248 <iprintf+0x2c>)
 800a220:	b513      	push	{r0, r1, r4, lr}
 800a222:	681c      	ldr	r4, [r3, #0]
 800a224:	b124      	cbz	r4, 800a230 <iprintf+0x14>
 800a226:	69a3      	ldr	r3, [r4, #24]
 800a228:	b913      	cbnz	r3, 800a230 <iprintf+0x14>
 800a22a:	4620      	mov	r0, r4
 800a22c:	f001 f890 	bl	800b350 <__sinit>
 800a230:	ab05      	add	r3, sp, #20
 800a232:	9a04      	ldr	r2, [sp, #16]
 800a234:	68a1      	ldr	r1, [r4, #8]
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	4620      	mov	r0, r4
 800a23a:	f001 fd49 	bl	800bcd0 <_vfiprintf_r>
 800a23e:	b002      	add	sp, #8
 800a240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a244:	b004      	add	sp, #16
 800a246:	4770      	bx	lr
 800a248:	2000003c 	.word	0x2000003c

0800a24c <putchar>:
 800a24c:	b538      	push	{r3, r4, r5, lr}
 800a24e:	4b08      	ldr	r3, [pc, #32]	; (800a270 <putchar+0x24>)
 800a250:	681c      	ldr	r4, [r3, #0]
 800a252:	4605      	mov	r5, r0
 800a254:	b124      	cbz	r4, 800a260 <putchar+0x14>
 800a256:	69a3      	ldr	r3, [r4, #24]
 800a258:	b913      	cbnz	r3, 800a260 <putchar+0x14>
 800a25a:	4620      	mov	r0, r4
 800a25c:	f001 f878 	bl	800b350 <__sinit>
 800a260:	68a2      	ldr	r2, [r4, #8]
 800a262:	4629      	mov	r1, r5
 800a264:	4620      	mov	r0, r4
 800a266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a26a:	f001 be47 	b.w	800befc <_putc_r>
 800a26e:	bf00      	nop
 800a270:	2000003c 	.word	0x2000003c

0800a274 <_puts_r>:
 800a274:	b570      	push	{r4, r5, r6, lr}
 800a276:	460e      	mov	r6, r1
 800a278:	4605      	mov	r5, r0
 800a27a:	b118      	cbz	r0, 800a284 <_puts_r+0x10>
 800a27c:	6983      	ldr	r3, [r0, #24]
 800a27e:	b90b      	cbnz	r3, 800a284 <_puts_r+0x10>
 800a280:	f001 f866 	bl	800b350 <__sinit>
 800a284:	69ab      	ldr	r3, [r5, #24]
 800a286:	68ac      	ldr	r4, [r5, #8]
 800a288:	b913      	cbnz	r3, 800a290 <_puts_r+0x1c>
 800a28a:	4628      	mov	r0, r5
 800a28c:	f001 f860 	bl	800b350 <__sinit>
 800a290:	4b23      	ldr	r3, [pc, #140]	; (800a320 <_puts_r+0xac>)
 800a292:	429c      	cmp	r4, r3
 800a294:	d117      	bne.n	800a2c6 <_puts_r+0x52>
 800a296:	686c      	ldr	r4, [r5, #4]
 800a298:	89a3      	ldrh	r3, [r4, #12]
 800a29a:	071b      	lsls	r3, r3, #28
 800a29c:	d51d      	bpl.n	800a2da <_puts_r+0x66>
 800a29e:	6923      	ldr	r3, [r4, #16]
 800a2a0:	b1db      	cbz	r3, 800a2da <_puts_r+0x66>
 800a2a2:	3e01      	subs	r6, #1
 800a2a4:	68a3      	ldr	r3, [r4, #8]
 800a2a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	60a3      	str	r3, [r4, #8]
 800a2ae:	b9e9      	cbnz	r1, 800a2ec <_puts_r+0x78>
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	da2e      	bge.n	800a312 <_puts_r+0x9e>
 800a2b4:	4622      	mov	r2, r4
 800a2b6:	210a      	movs	r1, #10
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	f000 f855 	bl	800a368 <__swbuf_r>
 800a2be:	3001      	adds	r0, #1
 800a2c0:	d011      	beq.n	800a2e6 <_puts_r+0x72>
 800a2c2:	200a      	movs	r0, #10
 800a2c4:	e011      	b.n	800a2ea <_puts_r+0x76>
 800a2c6:	4b17      	ldr	r3, [pc, #92]	; (800a324 <_puts_r+0xb0>)
 800a2c8:	429c      	cmp	r4, r3
 800a2ca:	d101      	bne.n	800a2d0 <_puts_r+0x5c>
 800a2cc:	68ac      	ldr	r4, [r5, #8]
 800a2ce:	e7e3      	b.n	800a298 <_puts_r+0x24>
 800a2d0:	4b15      	ldr	r3, [pc, #84]	; (800a328 <_puts_r+0xb4>)
 800a2d2:	429c      	cmp	r4, r3
 800a2d4:	bf08      	it	eq
 800a2d6:	68ec      	ldreq	r4, [r5, #12]
 800a2d8:	e7de      	b.n	800a298 <_puts_r+0x24>
 800a2da:	4621      	mov	r1, r4
 800a2dc:	4628      	mov	r0, r5
 800a2de:	f000 f895 	bl	800a40c <__swsetup_r>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d0dd      	beq.n	800a2a2 <_puts_r+0x2e>
 800a2e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ea:	bd70      	pop	{r4, r5, r6, pc}
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	da04      	bge.n	800a2fa <_puts_r+0x86>
 800a2f0:	69a2      	ldr	r2, [r4, #24]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	dc06      	bgt.n	800a304 <_puts_r+0x90>
 800a2f6:	290a      	cmp	r1, #10
 800a2f8:	d004      	beq.n	800a304 <_puts_r+0x90>
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	1c5a      	adds	r2, r3, #1
 800a2fe:	6022      	str	r2, [r4, #0]
 800a300:	7019      	strb	r1, [r3, #0]
 800a302:	e7cf      	b.n	800a2a4 <_puts_r+0x30>
 800a304:	4622      	mov	r2, r4
 800a306:	4628      	mov	r0, r5
 800a308:	f000 f82e 	bl	800a368 <__swbuf_r>
 800a30c:	3001      	adds	r0, #1
 800a30e:	d1c9      	bne.n	800a2a4 <_puts_r+0x30>
 800a310:	e7e9      	b.n	800a2e6 <_puts_r+0x72>
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	200a      	movs	r0, #10
 800a316:	1c5a      	adds	r2, r3, #1
 800a318:	6022      	str	r2, [r4, #0]
 800a31a:	7018      	strb	r0, [r3, #0]
 800a31c:	e7e5      	b.n	800a2ea <_puts_r+0x76>
 800a31e:	bf00      	nop
 800a320:	0800c348 	.word	0x0800c348
 800a324:	0800c368 	.word	0x0800c368
 800a328:	0800c328 	.word	0x0800c328

0800a32c <puts>:
 800a32c:	4b02      	ldr	r3, [pc, #8]	; (800a338 <puts+0xc>)
 800a32e:	4601      	mov	r1, r0
 800a330:	6818      	ldr	r0, [r3, #0]
 800a332:	f7ff bf9f 	b.w	800a274 <_puts_r>
 800a336:	bf00      	nop
 800a338:	2000003c 	.word	0x2000003c

0800a33c <strncpy>:
 800a33c:	b570      	push	{r4, r5, r6, lr}
 800a33e:	3901      	subs	r1, #1
 800a340:	4604      	mov	r4, r0
 800a342:	b902      	cbnz	r2, 800a346 <strncpy+0xa>
 800a344:	bd70      	pop	{r4, r5, r6, pc}
 800a346:	4623      	mov	r3, r4
 800a348:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a34c:	f803 5b01 	strb.w	r5, [r3], #1
 800a350:	1e56      	subs	r6, r2, #1
 800a352:	b92d      	cbnz	r5, 800a360 <strncpy+0x24>
 800a354:	4414      	add	r4, r2
 800a356:	42a3      	cmp	r3, r4
 800a358:	d0f4      	beq.n	800a344 <strncpy+0x8>
 800a35a:	f803 5b01 	strb.w	r5, [r3], #1
 800a35e:	e7fa      	b.n	800a356 <strncpy+0x1a>
 800a360:	461c      	mov	r4, r3
 800a362:	4632      	mov	r2, r6
 800a364:	e7ed      	b.n	800a342 <strncpy+0x6>
	...

0800a368 <__swbuf_r>:
 800a368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36a:	460e      	mov	r6, r1
 800a36c:	4614      	mov	r4, r2
 800a36e:	4605      	mov	r5, r0
 800a370:	b118      	cbz	r0, 800a37a <__swbuf_r+0x12>
 800a372:	6983      	ldr	r3, [r0, #24]
 800a374:	b90b      	cbnz	r3, 800a37a <__swbuf_r+0x12>
 800a376:	f000 ffeb 	bl	800b350 <__sinit>
 800a37a:	4b21      	ldr	r3, [pc, #132]	; (800a400 <__swbuf_r+0x98>)
 800a37c:	429c      	cmp	r4, r3
 800a37e:	d12a      	bne.n	800a3d6 <__swbuf_r+0x6e>
 800a380:	686c      	ldr	r4, [r5, #4]
 800a382:	69a3      	ldr	r3, [r4, #24]
 800a384:	60a3      	str	r3, [r4, #8]
 800a386:	89a3      	ldrh	r3, [r4, #12]
 800a388:	071a      	lsls	r2, r3, #28
 800a38a:	d52e      	bpl.n	800a3ea <__swbuf_r+0x82>
 800a38c:	6923      	ldr	r3, [r4, #16]
 800a38e:	b363      	cbz	r3, 800a3ea <__swbuf_r+0x82>
 800a390:	6923      	ldr	r3, [r4, #16]
 800a392:	6820      	ldr	r0, [r4, #0]
 800a394:	1ac0      	subs	r0, r0, r3
 800a396:	6963      	ldr	r3, [r4, #20]
 800a398:	b2f6      	uxtb	r6, r6
 800a39a:	4283      	cmp	r3, r0
 800a39c:	4637      	mov	r7, r6
 800a39e:	dc04      	bgt.n	800a3aa <__swbuf_r+0x42>
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	f000 ff6a 	bl	800b27c <_fflush_r>
 800a3a8:	bb28      	cbnz	r0, 800a3f6 <__swbuf_r+0x8e>
 800a3aa:	68a3      	ldr	r3, [r4, #8]
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	60a3      	str	r3, [r4, #8]
 800a3b0:	6823      	ldr	r3, [r4, #0]
 800a3b2:	1c5a      	adds	r2, r3, #1
 800a3b4:	6022      	str	r2, [r4, #0]
 800a3b6:	701e      	strb	r6, [r3, #0]
 800a3b8:	6963      	ldr	r3, [r4, #20]
 800a3ba:	3001      	adds	r0, #1
 800a3bc:	4283      	cmp	r3, r0
 800a3be:	d004      	beq.n	800a3ca <__swbuf_r+0x62>
 800a3c0:	89a3      	ldrh	r3, [r4, #12]
 800a3c2:	07db      	lsls	r3, r3, #31
 800a3c4:	d519      	bpl.n	800a3fa <__swbuf_r+0x92>
 800a3c6:	2e0a      	cmp	r6, #10
 800a3c8:	d117      	bne.n	800a3fa <__swbuf_r+0x92>
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	f000 ff55 	bl	800b27c <_fflush_r>
 800a3d2:	b190      	cbz	r0, 800a3fa <__swbuf_r+0x92>
 800a3d4:	e00f      	b.n	800a3f6 <__swbuf_r+0x8e>
 800a3d6:	4b0b      	ldr	r3, [pc, #44]	; (800a404 <__swbuf_r+0x9c>)
 800a3d8:	429c      	cmp	r4, r3
 800a3da:	d101      	bne.n	800a3e0 <__swbuf_r+0x78>
 800a3dc:	68ac      	ldr	r4, [r5, #8]
 800a3de:	e7d0      	b.n	800a382 <__swbuf_r+0x1a>
 800a3e0:	4b09      	ldr	r3, [pc, #36]	; (800a408 <__swbuf_r+0xa0>)
 800a3e2:	429c      	cmp	r4, r3
 800a3e4:	bf08      	it	eq
 800a3e6:	68ec      	ldreq	r4, [r5, #12]
 800a3e8:	e7cb      	b.n	800a382 <__swbuf_r+0x1a>
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	f000 f80d 	bl	800a40c <__swsetup_r>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d0cc      	beq.n	800a390 <__swbuf_r+0x28>
 800a3f6:	f04f 37ff 	mov.w	r7, #4294967295
 800a3fa:	4638      	mov	r0, r7
 800a3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3fe:	bf00      	nop
 800a400:	0800c348 	.word	0x0800c348
 800a404:	0800c368 	.word	0x0800c368
 800a408:	0800c328 	.word	0x0800c328

0800a40c <__swsetup_r>:
 800a40c:	4b32      	ldr	r3, [pc, #200]	; (800a4d8 <__swsetup_r+0xcc>)
 800a40e:	b570      	push	{r4, r5, r6, lr}
 800a410:	681d      	ldr	r5, [r3, #0]
 800a412:	4606      	mov	r6, r0
 800a414:	460c      	mov	r4, r1
 800a416:	b125      	cbz	r5, 800a422 <__swsetup_r+0x16>
 800a418:	69ab      	ldr	r3, [r5, #24]
 800a41a:	b913      	cbnz	r3, 800a422 <__swsetup_r+0x16>
 800a41c:	4628      	mov	r0, r5
 800a41e:	f000 ff97 	bl	800b350 <__sinit>
 800a422:	4b2e      	ldr	r3, [pc, #184]	; (800a4dc <__swsetup_r+0xd0>)
 800a424:	429c      	cmp	r4, r3
 800a426:	d10f      	bne.n	800a448 <__swsetup_r+0x3c>
 800a428:	686c      	ldr	r4, [r5, #4]
 800a42a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a42e:	b29a      	uxth	r2, r3
 800a430:	0715      	lsls	r5, r2, #28
 800a432:	d42c      	bmi.n	800a48e <__swsetup_r+0x82>
 800a434:	06d0      	lsls	r0, r2, #27
 800a436:	d411      	bmi.n	800a45c <__swsetup_r+0x50>
 800a438:	2209      	movs	r2, #9
 800a43a:	6032      	str	r2, [r6, #0]
 800a43c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a440:	81a3      	strh	r3, [r4, #12]
 800a442:	f04f 30ff 	mov.w	r0, #4294967295
 800a446:	e03e      	b.n	800a4c6 <__swsetup_r+0xba>
 800a448:	4b25      	ldr	r3, [pc, #148]	; (800a4e0 <__swsetup_r+0xd4>)
 800a44a:	429c      	cmp	r4, r3
 800a44c:	d101      	bne.n	800a452 <__swsetup_r+0x46>
 800a44e:	68ac      	ldr	r4, [r5, #8]
 800a450:	e7eb      	b.n	800a42a <__swsetup_r+0x1e>
 800a452:	4b24      	ldr	r3, [pc, #144]	; (800a4e4 <__swsetup_r+0xd8>)
 800a454:	429c      	cmp	r4, r3
 800a456:	bf08      	it	eq
 800a458:	68ec      	ldreq	r4, [r5, #12]
 800a45a:	e7e6      	b.n	800a42a <__swsetup_r+0x1e>
 800a45c:	0751      	lsls	r1, r2, #29
 800a45e:	d512      	bpl.n	800a486 <__swsetup_r+0x7a>
 800a460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a462:	b141      	cbz	r1, 800a476 <__swsetup_r+0x6a>
 800a464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a468:	4299      	cmp	r1, r3
 800a46a:	d002      	beq.n	800a472 <__swsetup_r+0x66>
 800a46c:	4630      	mov	r0, r6
 800a46e:	f001 fb5d 	bl	800bb2c <_free_r>
 800a472:	2300      	movs	r3, #0
 800a474:	6363      	str	r3, [r4, #52]	; 0x34
 800a476:	89a3      	ldrh	r3, [r4, #12]
 800a478:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a47c:	81a3      	strh	r3, [r4, #12]
 800a47e:	2300      	movs	r3, #0
 800a480:	6063      	str	r3, [r4, #4]
 800a482:	6923      	ldr	r3, [r4, #16]
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	89a3      	ldrh	r3, [r4, #12]
 800a488:	f043 0308 	orr.w	r3, r3, #8
 800a48c:	81a3      	strh	r3, [r4, #12]
 800a48e:	6923      	ldr	r3, [r4, #16]
 800a490:	b94b      	cbnz	r3, 800a4a6 <__swsetup_r+0x9a>
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a49c:	d003      	beq.n	800a4a6 <__swsetup_r+0x9a>
 800a49e:	4621      	mov	r1, r4
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f001 f811 	bl	800b4c8 <__smakebuf_r>
 800a4a6:	89a2      	ldrh	r2, [r4, #12]
 800a4a8:	f012 0301 	ands.w	r3, r2, #1
 800a4ac:	d00c      	beq.n	800a4c8 <__swsetup_r+0xbc>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	60a3      	str	r3, [r4, #8]
 800a4b2:	6963      	ldr	r3, [r4, #20]
 800a4b4:	425b      	negs	r3, r3
 800a4b6:	61a3      	str	r3, [r4, #24]
 800a4b8:	6923      	ldr	r3, [r4, #16]
 800a4ba:	b953      	cbnz	r3, 800a4d2 <__swsetup_r+0xc6>
 800a4bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a4c4:	d1ba      	bne.n	800a43c <__swsetup_r+0x30>
 800a4c6:	bd70      	pop	{r4, r5, r6, pc}
 800a4c8:	0792      	lsls	r2, r2, #30
 800a4ca:	bf58      	it	pl
 800a4cc:	6963      	ldrpl	r3, [r4, #20]
 800a4ce:	60a3      	str	r3, [r4, #8]
 800a4d0:	e7f2      	b.n	800a4b8 <__swsetup_r+0xac>
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	e7f7      	b.n	800a4c6 <__swsetup_r+0xba>
 800a4d6:	bf00      	nop
 800a4d8:	2000003c 	.word	0x2000003c
 800a4dc:	0800c348 	.word	0x0800c348
 800a4e0:	0800c368 	.word	0x0800c368
 800a4e4:	0800c328 	.word	0x0800c328

0800a4e8 <quorem>:
 800a4e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ec:	6903      	ldr	r3, [r0, #16]
 800a4ee:	690c      	ldr	r4, [r1, #16]
 800a4f0:	42a3      	cmp	r3, r4
 800a4f2:	4680      	mov	r8, r0
 800a4f4:	f2c0 8082 	blt.w	800a5fc <quorem+0x114>
 800a4f8:	3c01      	subs	r4, #1
 800a4fa:	f101 0714 	add.w	r7, r1, #20
 800a4fe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a502:	f100 0614 	add.w	r6, r0, #20
 800a506:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a50a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a50e:	eb06 030c 	add.w	r3, r6, ip
 800a512:	3501      	adds	r5, #1
 800a514:	eb07 090c 	add.w	r9, r7, ip
 800a518:	9301      	str	r3, [sp, #4]
 800a51a:	fbb0 f5f5 	udiv	r5, r0, r5
 800a51e:	b395      	cbz	r5, 800a586 <quorem+0x9e>
 800a520:	f04f 0a00 	mov.w	sl, #0
 800a524:	4638      	mov	r0, r7
 800a526:	46b6      	mov	lr, r6
 800a528:	46d3      	mov	fp, sl
 800a52a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a52e:	b293      	uxth	r3, r2
 800a530:	fb05 a303 	mla	r3, r5, r3, sl
 800a534:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a538:	b29b      	uxth	r3, r3
 800a53a:	ebab 0303 	sub.w	r3, fp, r3
 800a53e:	0c12      	lsrs	r2, r2, #16
 800a540:	f8de b000 	ldr.w	fp, [lr]
 800a544:	fb05 a202 	mla	r2, r5, r2, sl
 800a548:	fa13 f38b 	uxtah	r3, r3, fp
 800a54c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a550:	fa1f fb82 	uxth.w	fp, r2
 800a554:	f8de 2000 	ldr.w	r2, [lr]
 800a558:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a55c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a560:	b29b      	uxth	r3, r3
 800a562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a566:	4581      	cmp	r9, r0
 800a568:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a56c:	f84e 3b04 	str.w	r3, [lr], #4
 800a570:	d2db      	bcs.n	800a52a <quorem+0x42>
 800a572:	f856 300c 	ldr.w	r3, [r6, ip]
 800a576:	b933      	cbnz	r3, 800a586 <quorem+0x9e>
 800a578:	9b01      	ldr	r3, [sp, #4]
 800a57a:	3b04      	subs	r3, #4
 800a57c:	429e      	cmp	r6, r3
 800a57e:	461a      	mov	r2, r3
 800a580:	d330      	bcc.n	800a5e4 <quorem+0xfc>
 800a582:	f8c8 4010 	str.w	r4, [r8, #16]
 800a586:	4640      	mov	r0, r8
 800a588:	f001 f9fc 	bl	800b984 <__mcmp>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	db25      	blt.n	800a5dc <quorem+0xf4>
 800a590:	3501      	adds	r5, #1
 800a592:	4630      	mov	r0, r6
 800a594:	f04f 0c00 	mov.w	ip, #0
 800a598:	f857 2b04 	ldr.w	r2, [r7], #4
 800a59c:	f8d0 e000 	ldr.w	lr, [r0]
 800a5a0:	b293      	uxth	r3, r2
 800a5a2:	ebac 0303 	sub.w	r3, ip, r3
 800a5a6:	0c12      	lsrs	r2, r2, #16
 800a5a8:	fa13 f38e 	uxtah	r3, r3, lr
 800a5ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a5b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5ba:	45b9      	cmp	r9, r7
 800a5bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a5c0:	f840 3b04 	str.w	r3, [r0], #4
 800a5c4:	d2e8      	bcs.n	800a598 <quorem+0xb0>
 800a5c6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a5ca:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a5ce:	b92a      	cbnz	r2, 800a5dc <quorem+0xf4>
 800a5d0:	3b04      	subs	r3, #4
 800a5d2:	429e      	cmp	r6, r3
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	d30b      	bcc.n	800a5f0 <quorem+0x108>
 800a5d8:	f8c8 4010 	str.w	r4, [r8, #16]
 800a5dc:	4628      	mov	r0, r5
 800a5de:	b003      	add	sp, #12
 800a5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e4:	6812      	ldr	r2, [r2, #0]
 800a5e6:	3b04      	subs	r3, #4
 800a5e8:	2a00      	cmp	r2, #0
 800a5ea:	d1ca      	bne.n	800a582 <quorem+0x9a>
 800a5ec:	3c01      	subs	r4, #1
 800a5ee:	e7c5      	b.n	800a57c <quorem+0x94>
 800a5f0:	6812      	ldr	r2, [r2, #0]
 800a5f2:	3b04      	subs	r3, #4
 800a5f4:	2a00      	cmp	r2, #0
 800a5f6:	d1ef      	bne.n	800a5d8 <quorem+0xf0>
 800a5f8:	3c01      	subs	r4, #1
 800a5fa:	e7ea      	b.n	800a5d2 <quorem+0xea>
 800a5fc:	2000      	movs	r0, #0
 800a5fe:	e7ee      	b.n	800a5de <quorem+0xf6>

0800a600 <_dtoa_r>:
 800a600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a604:	ec57 6b10 	vmov	r6, r7, d0
 800a608:	b097      	sub	sp, #92	; 0x5c
 800a60a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a60c:	9106      	str	r1, [sp, #24]
 800a60e:	4604      	mov	r4, r0
 800a610:	920b      	str	r2, [sp, #44]	; 0x2c
 800a612:	9312      	str	r3, [sp, #72]	; 0x48
 800a614:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a618:	e9cd 6700 	strd	r6, r7, [sp]
 800a61c:	b93d      	cbnz	r5, 800a62e <_dtoa_r+0x2e>
 800a61e:	2010      	movs	r0, #16
 800a620:	f000 ff92 	bl	800b548 <malloc>
 800a624:	6260      	str	r0, [r4, #36]	; 0x24
 800a626:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a62a:	6005      	str	r5, [r0, #0]
 800a62c:	60c5      	str	r5, [r0, #12]
 800a62e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a630:	6819      	ldr	r1, [r3, #0]
 800a632:	b151      	cbz	r1, 800a64a <_dtoa_r+0x4a>
 800a634:	685a      	ldr	r2, [r3, #4]
 800a636:	604a      	str	r2, [r1, #4]
 800a638:	2301      	movs	r3, #1
 800a63a:	4093      	lsls	r3, r2
 800a63c:	608b      	str	r3, [r1, #8]
 800a63e:	4620      	mov	r0, r4
 800a640:	f000 ffbe 	bl	800b5c0 <_Bfree>
 800a644:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a646:	2200      	movs	r2, #0
 800a648:	601a      	str	r2, [r3, #0]
 800a64a:	1e3b      	subs	r3, r7, #0
 800a64c:	bfbb      	ittet	lt
 800a64e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a652:	9301      	strlt	r3, [sp, #4]
 800a654:	2300      	movge	r3, #0
 800a656:	2201      	movlt	r2, #1
 800a658:	bfac      	ite	ge
 800a65a:	f8c8 3000 	strge.w	r3, [r8]
 800a65e:	f8c8 2000 	strlt.w	r2, [r8]
 800a662:	4baf      	ldr	r3, [pc, #700]	; (800a920 <_dtoa_r+0x320>)
 800a664:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a668:	ea33 0308 	bics.w	r3, r3, r8
 800a66c:	d114      	bne.n	800a698 <_dtoa_r+0x98>
 800a66e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a670:	f242 730f 	movw	r3, #9999	; 0x270f
 800a674:	6013      	str	r3, [r2, #0]
 800a676:	9b00      	ldr	r3, [sp, #0]
 800a678:	b923      	cbnz	r3, 800a684 <_dtoa_r+0x84>
 800a67a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a67e:	2800      	cmp	r0, #0
 800a680:	f000 8542 	beq.w	800b108 <_dtoa_r+0xb08>
 800a684:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a686:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a934 <_dtoa_r+0x334>
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	f000 8544 	beq.w	800b118 <_dtoa_r+0xb18>
 800a690:	f10b 0303 	add.w	r3, fp, #3
 800a694:	f000 bd3e 	b.w	800b114 <_dtoa_r+0xb14>
 800a698:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a69c:	2200      	movs	r2, #0
 800a69e:	2300      	movs	r3, #0
 800a6a0:	4630      	mov	r0, r6
 800a6a2:	4639      	mov	r1, r7
 800a6a4:	f7f6 fa18 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6a8:	4681      	mov	r9, r0
 800a6aa:	b168      	cbz	r0, 800a6c8 <_dtoa_r+0xc8>
 800a6ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	6013      	str	r3, [r2, #0]
 800a6b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f000 8524 	beq.w	800b102 <_dtoa_r+0xb02>
 800a6ba:	4b9a      	ldr	r3, [pc, #616]	; (800a924 <_dtoa_r+0x324>)
 800a6bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a6be:	f103 3bff 	add.w	fp, r3, #4294967295
 800a6c2:	6013      	str	r3, [r2, #0]
 800a6c4:	f000 bd28 	b.w	800b118 <_dtoa_r+0xb18>
 800a6c8:	aa14      	add	r2, sp, #80	; 0x50
 800a6ca:	a915      	add	r1, sp, #84	; 0x54
 800a6cc:	ec47 6b10 	vmov	d0, r6, r7
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f001 f9ce 	bl	800ba72 <__d2b>
 800a6d6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a6da:	9004      	str	r0, [sp, #16]
 800a6dc:	2d00      	cmp	r5, #0
 800a6de:	d07c      	beq.n	800a7da <_dtoa_r+0x1da>
 800a6e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a6e4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a6e8:	46b2      	mov	sl, r6
 800a6ea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a6ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a6f2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	4b8b      	ldr	r3, [pc, #556]	; (800a928 <_dtoa_r+0x328>)
 800a6fa:	4650      	mov	r0, sl
 800a6fc:	4659      	mov	r1, fp
 800a6fe:	f7f5 fdcb 	bl	8000298 <__aeabi_dsub>
 800a702:	a381      	add	r3, pc, #516	; (adr r3, 800a908 <_dtoa_r+0x308>)
 800a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a708:	f7f5 ff7e 	bl	8000608 <__aeabi_dmul>
 800a70c:	a380      	add	r3, pc, #512	; (adr r3, 800a910 <_dtoa_r+0x310>)
 800a70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a712:	f7f5 fdc3 	bl	800029c <__adddf3>
 800a716:	4606      	mov	r6, r0
 800a718:	4628      	mov	r0, r5
 800a71a:	460f      	mov	r7, r1
 800a71c:	f7f5 ff0a 	bl	8000534 <__aeabi_i2d>
 800a720:	a37d      	add	r3, pc, #500	; (adr r3, 800a918 <_dtoa_r+0x318>)
 800a722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a726:	f7f5 ff6f 	bl	8000608 <__aeabi_dmul>
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	4630      	mov	r0, r6
 800a730:	4639      	mov	r1, r7
 800a732:	f7f5 fdb3 	bl	800029c <__adddf3>
 800a736:	4606      	mov	r6, r0
 800a738:	460f      	mov	r7, r1
 800a73a:	f7f6 fa15 	bl	8000b68 <__aeabi_d2iz>
 800a73e:	2200      	movs	r2, #0
 800a740:	4682      	mov	sl, r0
 800a742:	2300      	movs	r3, #0
 800a744:	4630      	mov	r0, r6
 800a746:	4639      	mov	r1, r7
 800a748:	f7f6 f9d0 	bl	8000aec <__aeabi_dcmplt>
 800a74c:	b148      	cbz	r0, 800a762 <_dtoa_r+0x162>
 800a74e:	4650      	mov	r0, sl
 800a750:	f7f5 fef0 	bl	8000534 <__aeabi_i2d>
 800a754:	4632      	mov	r2, r6
 800a756:	463b      	mov	r3, r7
 800a758:	f7f6 f9be 	bl	8000ad8 <__aeabi_dcmpeq>
 800a75c:	b908      	cbnz	r0, 800a762 <_dtoa_r+0x162>
 800a75e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a762:	f1ba 0f16 	cmp.w	sl, #22
 800a766:	d859      	bhi.n	800a81c <_dtoa_r+0x21c>
 800a768:	4970      	ldr	r1, [pc, #448]	; (800a92c <_dtoa_r+0x32c>)
 800a76a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a76e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a772:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a776:	f7f6 f9d7 	bl	8000b28 <__aeabi_dcmpgt>
 800a77a:	2800      	cmp	r0, #0
 800a77c:	d050      	beq.n	800a820 <_dtoa_r+0x220>
 800a77e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a782:	2300      	movs	r3, #0
 800a784:	930f      	str	r3, [sp, #60]	; 0x3c
 800a786:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a788:	1b5d      	subs	r5, r3, r5
 800a78a:	f1b5 0801 	subs.w	r8, r5, #1
 800a78e:	bf49      	itett	mi
 800a790:	f1c5 0301 	rsbmi	r3, r5, #1
 800a794:	2300      	movpl	r3, #0
 800a796:	9305      	strmi	r3, [sp, #20]
 800a798:	f04f 0800 	movmi.w	r8, #0
 800a79c:	bf58      	it	pl
 800a79e:	9305      	strpl	r3, [sp, #20]
 800a7a0:	f1ba 0f00 	cmp.w	sl, #0
 800a7a4:	db3e      	blt.n	800a824 <_dtoa_r+0x224>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	44d0      	add	r8, sl
 800a7aa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a7ae:	9307      	str	r3, [sp, #28]
 800a7b0:	9b06      	ldr	r3, [sp, #24]
 800a7b2:	2b09      	cmp	r3, #9
 800a7b4:	f200 8090 	bhi.w	800a8d8 <_dtoa_r+0x2d8>
 800a7b8:	2b05      	cmp	r3, #5
 800a7ba:	bfc4      	itt	gt
 800a7bc:	3b04      	subgt	r3, #4
 800a7be:	9306      	strgt	r3, [sp, #24]
 800a7c0:	9b06      	ldr	r3, [sp, #24]
 800a7c2:	f1a3 0302 	sub.w	r3, r3, #2
 800a7c6:	bfcc      	ite	gt
 800a7c8:	2500      	movgt	r5, #0
 800a7ca:	2501      	movle	r5, #1
 800a7cc:	2b03      	cmp	r3, #3
 800a7ce:	f200 808f 	bhi.w	800a8f0 <_dtoa_r+0x2f0>
 800a7d2:	e8df f003 	tbb	[pc, r3]
 800a7d6:	7f7d      	.short	0x7f7d
 800a7d8:	7131      	.short	0x7131
 800a7da:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a7de:	441d      	add	r5, r3
 800a7e0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a7e4:	2820      	cmp	r0, #32
 800a7e6:	dd13      	ble.n	800a810 <_dtoa_r+0x210>
 800a7e8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a7ec:	9b00      	ldr	r3, [sp, #0]
 800a7ee:	fa08 f800 	lsl.w	r8, r8, r0
 800a7f2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a7f6:	fa23 f000 	lsr.w	r0, r3, r0
 800a7fa:	ea48 0000 	orr.w	r0, r8, r0
 800a7fe:	f7f5 fe89 	bl	8000514 <__aeabi_ui2d>
 800a802:	2301      	movs	r3, #1
 800a804:	4682      	mov	sl, r0
 800a806:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a80a:	3d01      	subs	r5, #1
 800a80c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a80e:	e772      	b.n	800a6f6 <_dtoa_r+0xf6>
 800a810:	9b00      	ldr	r3, [sp, #0]
 800a812:	f1c0 0020 	rsb	r0, r0, #32
 800a816:	fa03 f000 	lsl.w	r0, r3, r0
 800a81a:	e7f0      	b.n	800a7fe <_dtoa_r+0x1fe>
 800a81c:	2301      	movs	r3, #1
 800a81e:	e7b1      	b.n	800a784 <_dtoa_r+0x184>
 800a820:	900f      	str	r0, [sp, #60]	; 0x3c
 800a822:	e7b0      	b.n	800a786 <_dtoa_r+0x186>
 800a824:	9b05      	ldr	r3, [sp, #20]
 800a826:	eba3 030a 	sub.w	r3, r3, sl
 800a82a:	9305      	str	r3, [sp, #20]
 800a82c:	f1ca 0300 	rsb	r3, sl, #0
 800a830:	9307      	str	r3, [sp, #28]
 800a832:	2300      	movs	r3, #0
 800a834:	930e      	str	r3, [sp, #56]	; 0x38
 800a836:	e7bb      	b.n	800a7b0 <_dtoa_r+0x1b0>
 800a838:	2301      	movs	r3, #1
 800a83a:	930a      	str	r3, [sp, #40]	; 0x28
 800a83c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a83e:	2b00      	cmp	r3, #0
 800a840:	dd59      	ble.n	800a8f6 <_dtoa_r+0x2f6>
 800a842:	9302      	str	r3, [sp, #8]
 800a844:	4699      	mov	r9, r3
 800a846:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a848:	2200      	movs	r2, #0
 800a84a:	6072      	str	r2, [r6, #4]
 800a84c:	2204      	movs	r2, #4
 800a84e:	f102 0014 	add.w	r0, r2, #20
 800a852:	4298      	cmp	r0, r3
 800a854:	6871      	ldr	r1, [r6, #4]
 800a856:	d953      	bls.n	800a900 <_dtoa_r+0x300>
 800a858:	4620      	mov	r0, r4
 800a85a:	f000 fe7d 	bl	800b558 <_Balloc>
 800a85e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a860:	6030      	str	r0, [r6, #0]
 800a862:	f1b9 0f0e 	cmp.w	r9, #14
 800a866:	f8d3 b000 	ldr.w	fp, [r3]
 800a86a:	f200 80e6 	bhi.w	800aa3a <_dtoa_r+0x43a>
 800a86e:	2d00      	cmp	r5, #0
 800a870:	f000 80e3 	beq.w	800aa3a <_dtoa_r+0x43a>
 800a874:	ed9d 7b00 	vldr	d7, [sp]
 800a878:	f1ba 0f00 	cmp.w	sl, #0
 800a87c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a880:	dd74      	ble.n	800a96c <_dtoa_r+0x36c>
 800a882:	4a2a      	ldr	r2, [pc, #168]	; (800a92c <_dtoa_r+0x32c>)
 800a884:	f00a 030f 	and.w	r3, sl, #15
 800a888:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a88c:	ed93 7b00 	vldr	d7, [r3]
 800a890:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a894:	06f0      	lsls	r0, r6, #27
 800a896:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a89a:	d565      	bpl.n	800a968 <_dtoa_r+0x368>
 800a89c:	4b24      	ldr	r3, [pc, #144]	; (800a930 <_dtoa_r+0x330>)
 800a89e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a8a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8a6:	f7f5 ffd9 	bl	800085c <__aeabi_ddiv>
 800a8aa:	e9cd 0100 	strd	r0, r1, [sp]
 800a8ae:	f006 060f 	and.w	r6, r6, #15
 800a8b2:	2503      	movs	r5, #3
 800a8b4:	4f1e      	ldr	r7, [pc, #120]	; (800a930 <_dtoa_r+0x330>)
 800a8b6:	e04c      	b.n	800a952 <_dtoa_r+0x352>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	930a      	str	r3, [sp, #40]	; 0x28
 800a8bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8be:	4453      	add	r3, sl
 800a8c0:	f103 0901 	add.w	r9, r3, #1
 800a8c4:	9302      	str	r3, [sp, #8]
 800a8c6:	464b      	mov	r3, r9
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	bfb8      	it	lt
 800a8cc:	2301      	movlt	r3, #1
 800a8ce:	e7ba      	b.n	800a846 <_dtoa_r+0x246>
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	e7b2      	b.n	800a83a <_dtoa_r+0x23a>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	e7f0      	b.n	800a8ba <_dtoa_r+0x2ba>
 800a8d8:	2501      	movs	r5, #1
 800a8da:	2300      	movs	r3, #0
 800a8dc:	9306      	str	r3, [sp, #24]
 800a8de:	950a      	str	r5, [sp, #40]	; 0x28
 800a8e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e4:	9302      	str	r3, [sp, #8]
 800a8e6:	4699      	mov	r9, r3
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	2312      	movs	r3, #18
 800a8ec:	920b      	str	r2, [sp, #44]	; 0x2c
 800a8ee:	e7aa      	b.n	800a846 <_dtoa_r+0x246>
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a8f4:	e7f4      	b.n	800a8e0 <_dtoa_r+0x2e0>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	9302      	str	r3, [sp, #8]
 800a8fa:	4699      	mov	r9, r3
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	e7f5      	b.n	800a8ec <_dtoa_r+0x2ec>
 800a900:	3101      	adds	r1, #1
 800a902:	6071      	str	r1, [r6, #4]
 800a904:	0052      	lsls	r2, r2, #1
 800a906:	e7a2      	b.n	800a84e <_dtoa_r+0x24e>
 800a908:	636f4361 	.word	0x636f4361
 800a90c:	3fd287a7 	.word	0x3fd287a7
 800a910:	8b60c8b3 	.word	0x8b60c8b3
 800a914:	3fc68a28 	.word	0x3fc68a28
 800a918:	509f79fb 	.word	0x509f79fb
 800a91c:	3fd34413 	.word	0x3fd34413
 800a920:	7ff00000 	.word	0x7ff00000
 800a924:	0800c2f5 	.word	0x0800c2f5
 800a928:	3ff80000 	.word	0x3ff80000
 800a92c:	0800c3b0 	.word	0x0800c3b0
 800a930:	0800c388 	.word	0x0800c388
 800a934:	0800c321 	.word	0x0800c321
 800a938:	07f1      	lsls	r1, r6, #31
 800a93a:	d508      	bpl.n	800a94e <_dtoa_r+0x34e>
 800a93c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a940:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a944:	f7f5 fe60 	bl	8000608 <__aeabi_dmul>
 800a948:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a94c:	3501      	adds	r5, #1
 800a94e:	1076      	asrs	r6, r6, #1
 800a950:	3708      	adds	r7, #8
 800a952:	2e00      	cmp	r6, #0
 800a954:	d1f0      	bne.n	800a938 <_dtoa_r+0x338>
 800a956:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a95a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a95e:	f7f5 ff7d 	bl	800085c <__aeabi_ddiv>
 800a962:	e9cd 0100 	strd	r0, r1, [sp]
 800a966:	e01a      	b.n	800a99e <_dtoa_r+0x39e>
 800a968:	2502      	movs	r5, #2
 800a96a:	e7a3      	b.n	800a8b4 <_dtoa_r+0x2b4>
 800a96c:	f000 80a0 	beq.w	800aab0 <_dtoa_r+0x4b0>
 800a970:	f1ca 0600 	rsb	r6, sl, #0
 800a974:	4b9f      	ldr	r3, [pc, #636]	; (800abf4 <_dtoa_r+0x5f4>)
 800a976:	4fa0      	ldr	r7, [pc, #640]	; (800abf8 <_dtoa_r+0x5f8>)
 800a978:	f006 020f 	and.w	r2, r6, #15
 800a97c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a988:	f7f5 fe3e 	bl	8000608 <__aeabi_dmul>
 800a98c:	e9cd 0100 	strd	r0, r1, [sp]
 800a990:	1136      	asrs	r6, r6, #4
 800a992:	2300      	movs	r3, #0
 800a994:	2502      	movs	r5, #2
 800a996:	2e00      	cmp	r6, #0
 800a998:	d17f      	bne.n	800aa9a <_dtoa_r+0x49a>
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1e1      	bne.n	800a962 <_dtoa_r+0x362>
 800a99e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f000 8087 	beq.w	800aab4 <_dtoa_r+0x4b4>
 800a9a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	4b93      	ldr	r3, [pc, #588]	; (800abfc <_dtoa_r+0x5fc>)
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	4639      	mov	r1, r7
 800a9b2:	f7f6 f89b 	bl	8000aec <__aeabi_dcmplt>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d07c      	beq.n	800aab4 <_dtoa_r+0x4b4>
 800a9ba:	f1b9 0f00 	cmp.w	r9, #0
 800a9be:	d079      	beq.n	800aab4 <_dtoa_r+0x4b4>
 800a9c0:	9b02      	ldr	r3, [sp, #8]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	dd35      	ble.n	800aa32 <_dtoa_r+0x432>
 800a9c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a9ca:	9308      	str	r3, [sp, #32]
 800a9cc:	4639      	mov	r1, r7
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	4b8b      	ldr	r3, [pc, #556]	; (800ac00 <_dtoa_r+0x600>)
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f7f5 fe18 	bl	8000608 <__aeabi_dmul>
 800a9d8:	e9cd 0100 	strd	r0, r1, [sp]
 800a9dc:	9f02      	ldr	r7, [sp, #8]
 800a9de:	3501      	adds	r5, #1
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	f7f5 fda7 	bl	8000534 <__aeabi_i2d>
 800a9e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9ea:	f7f5 fe0d 	bl	8000608 <__aeabi_dmul>
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	4b84      	ldr	r3, [pc, #528]	; (800ac04 <_dtoa_r+0x604>)
 800a9f2:	f7f5 fc53 	bl	800029c <__adddf3>
 800a9f6:	4605      	mov	r5, r0
 800a9f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a9fc:	2f00      	cmp	r7, #0
 800a9fe:	d15d      	bne.n	800aabc <_dtoa_r+0x4bc>
 800aa00:	2200      	movs	r2, #0
 800aa02:	4b81      	ldr	r3, [pc, #516]	; (800ac08 <_dtoa_r+0x608>)
 800aa04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa08:	f7f5 fc46 	bl	8000298 <__aeabi_dsub>
 800aa0c:	462a      	mov	r2, r5
 800aa0e:	4633      	mov	r3, r6
 800aa10:	e9cd 0100 	strd	r0, r1, [sp]
 800aa14:	f7f6 f888 	bl	8000b28 <__aeabi_dcmpgt>
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	f040 8288 	bne.w	800af2e <_dtoa_r+0x92e>
 800aa1e:	462a      	mov	r2, r5
 800aa20:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aa24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa28:	f7f6 f860 	bl	8000aec <__aeabi_dcmplt>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	f040 827c 	bne.w	800af2a <_dtoa_r+0x92a>
 800aa32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa36:	e9cd 2300 	strd	r2, r3, [sp]
 800aa3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f2c0 8150 	blt.w	800ace2 <_dtoa_r+0x6e2>
 800aa42:	f1ba 0f0e 	cmp.w	sl, #14
 800aa46:	f300 814c 	bgt.w	800ace2 <_dtoa_r+0x6e2>
 800aa4a:	4b6a      	ldr	r3, [pc, #424]	; (800abf4 <_dtoa_r+0x5f4>)
 800aa4c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aa50:	ed93 7b00 	vldr	d7, [r3]
 800aa54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aa5c:	f280 80d8 	bge.w	800ac10 <_dtoa_r+0x610>
 800aa60:	f1b9 0f00 	cmp.w	r9, #0
 800aa64:	f300 80d4 	bgt.w	800ac10 <_dtoa_r+0x610>
 800aa68:	f040 825e 	bne.w	800af28 <_dtoa_r+0x928>
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	4b66      	ldr	r3, [pc, #408]	; (800ac08 <_dtoa_r+0x608>)
 800aa70:	ec51 0b17 	vmov	r0, r1, d7
 800aa74:	f7f5 fdc8 	bl	8000608 <__aeabi_dmul>
 800aa78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa7c:	f7f6 f84a 	bl	8000b14 <__aeabi_dcmpge>
 800aa80:	464f      	mov	r7, r9
 800aa82:	464e      	mov	r6, r9
 800aa84:	2800      	cmp	r0, #0
 800aa86:	f040 8234 	bne.w	800aef2 <_dtoa_r+0x8f2>
 800aa8a:	2331      	movs	r3, #49	; 0x31
 800aa8c:	f10b 0501 	add.w	r5, fp, #1
 800aa90:	f88b 3000 	strb.w	r3, [fp]
 800aa94:	f10a 0a01 	add.w	sl, sl, #1
 800aa98:	e22f      	b.n	800aefa <_dtoa_r+0x8fa>
 800aa9a:	07f2      	lsls	r2, r6, #31
 800aa9c:	d505      	bpl.n	800aaaa <_dtoa_r+0x4aa>
 800aa9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaa2:	f7f5 fdb1 	bl	8000608 <__aeabi_dmul>
 800aaa6:	3501      	adds	r5, #1
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	1076      	asrs	r6, r6, #1
 800aaac:	3708      	adds	r7, #8
 800aaae:	e772      	b.n	800a996 <_dtoa_r+0x396>
 800aab0:	2502      	movs	r5, #2
 800aab2:	e774      	b.n	800a99e <_dtoa_r+0x39e>
 800aab4:	f8cd a020 	str.w	sl, [sp, #32]
 800aab8:	464f      	mov	r7, r9
 800aaba:	e791      	b.n	800a9e0 <_dtoa_r+0x3e0>
 800aabc:	4b4d      	ldr	r3, [pc, #308]	; (800abf4 <_dtoa_r+0x5f4>)
 800aabe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aac2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800aac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d047      	beq.n	800ab5c <_dtoa_r+0x55c>
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	2000      	movs	r0, #0
 800aad2:	494e      	ldr	r1, [pc, #312]	; (800ac0c <_dtoa_r+0x60c>)
 800aad4:	f7f5 fec2 	bl	800085c <__aeabi_ddiv>
 800aad8:	462a      	mov	r2, r5
 800aada:	4633      	mov	r3, r6
 800aadc:	f7f5 fbdc 	bl	8000298 <__aeabi_dsub>
 800aae0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800aae4:	465d      	mov	r5, fp
 800aae6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aaea:	f7f6 f83d 	bl	8000b68 <__aeabi_d2iz>
 800aaee:	4606      	mov	r6, r0
 800aaf0:	f7f5 fd20 	bl	8000534 <__aeabi_i2d>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aafc:	f7f5 fbcc 	bl	8000298 <__aeabi_dsub>
 800ab00:	3630      	adds	r6, #48	; 0x30
 800ab02:	f805 6b01 	strb.w	r6, [r5], #1
 800ab06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ab0a:	e9cd 0100 	strd	r0, r1, [sp]
 800ab0e:	f7f5 ffed 	bl	8000aec <__aeabi_dcmplt>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d163      	bne.n	800abde <_dtoa_r+0x5de>
 800ab16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	4937      	ldr	r1, [pc, #220]	; (800abfc <_dtoa_r+0x5fc>)
 800ab1e:	f7f5 fbbb 	bl	8000298 <__aeabi_dsub>
 800ab22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ab26:	f7f5 ffe1 	bl	8000aec <__aeabi_dcmplt>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	f040 80b7 	bne.w	800ac9e <_dtoa_r+0x69e>
 800ab30:	eba5 030b 	sub.w	r3, r5, fp
 800ab34:	429f      	cmp	r7, r3
 800ab36:	f77f af7c 	ble.w	800aa32 <_dtoa_r+0x432>
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	4b30      	ldr	r3, [pc, #192]	; (800ac00 <_dtoa_r+0x600>)
 800ab3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab42:	f7f5 fd61 	bl	8000608 <__aeabi_dmul>
 800ab46:	2200      	movs	r2, #0
 800ab48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ab4c:	4b2c      	ldr	r3, [pc, #176]	; (800ac00 <_dtoa_r+0x600>)
 800ab4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab52:	f7f5 fd59 	bl	8000608 <__aeabi_dmul>
 800ab56:	e9cd 0100 	strd	r0, r1, [sp]
 800ab5a:	e7c4      	b.n	800aae6 <_dtoa_r+0x4e6>
 800ab5c:	462a      	mov	r2, r5
 800ab5e:	4633      	mov	r3, r6
 800ab60:	f7f5 fd52 	bl	8000608 <__aeabi_dmul>
 800ab64:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ab68:	eb0b 0507 	add.w	r5, fp, r7
 800ab6c:	465e      	mov	r6, fp
 800ab6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab72:	f7f5 fff9 	bl	8000b68 <__aeabi_d2iz>
 800ab76:	4607      	mov	r7, r0
 800ab78:	f7f5 fcdc 	bl	8000534 <__aeabi_i2d>
 800ab7c:	3730      	adds	r7, #48	; 0x30
 800ab7e:	4602      	mov	r2, r0
 800ab80:	460b      	mov	r3, r1
 800ab82:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab86:	f7f5 fb87 	bl	8000298 <__aeabi_dsub>
 800ab8a:	f806 7b01 	strb.w	r7, [r6], #1
 800ab8e:	42ae      	cmp	r6, r5
 800ab90:	e9cd 0100 	strd	r0, r1, [sp]
 800ab94:	f04f 0200 	mov.w	r2, #0
 800ab98:	d126      	bne.n	800abe8 <_dtoa_r+0x5e8>
 800ab9a:	4b1c      	ldr	r3, [pc, #112]	; (800ac0c <_dtoa_r+0x60c>)
 800ab9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aba0:	f7f5 fb7c 	bl	800029c <__adddf3>
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abac:	f7f5 ffbc 	bl	8000b28 <__aeabi_dcmpgt>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d174      	bne.n	800ac9e <_dtoa_r+0x69e>
 800abb4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800abb8:	2000      	movs	r0, #0
 800abba:	4914      	ldr	r1, [pc, #80]	; (800ac0c <_dtoa_r+0x60c>)
 800abbc:	f7f5 fb6c 	bl	8000298 <__aeabi_dsub>
 800abc0:	4602      	mov	r2, r0
 800abc2:	460b      	mov	r3, r1
 800abc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abc8:	f7f5 ff90 	bl	8000aec <__aeabi_dcmplt>
 800abcc:	2800      	cmp	r0, #0
 800abce:	f43f af30 	beq.w	800aa32 <_dtoa_r+0x432>
 800abd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abd6:	2b30      	cmp	r3, #48	; 0x30
 800abd8:	f105 32ff 	add.w	r2, r5, #4294967295
 800abdc:	d002      	beq.n	800abe4 <_dtoa_r+0x5e4>
 800abde:	f8dd a020 	ldr.w	sl, [sp, #32]
 800abe2:	e04a      	b.n	800ac7a <_dtoa_r+0x67a>
 800abe4:	4615      	mov	r5, r2
 800abe6:	e7f4      	b.n	800abd2 <_dtoa_r+0x5d2>
 800abe8:	4b05      	ldr	r3, [pc, #20]	; (800ac00 <_dtoa_r+0x600>)
 800abea:	f7f5 fd0d 	bl	8000608 <__aeabi_dmul>
 800abee:	e9cd 0100 	strd	r0, r1, [sp]
 800abf2:	e7bc      	b.n	800ab6e <_dtoa_r+0x56e>
 800abf4:	0800c3b0 	.word	0x0800c3b0
 800abf8:	0800c388 	.word	0x0800c388
 800abfc:	3ff00000 	.word	0x3ff00000
 800ac00:	40240000 	.word	0x40240000
 800ac04:	401c0000 	.word	0x401c0000
 800ac08:	40140000 	.word	0x40140000
 800ac0c:	3fe00000 	.word	0x3fe00000
 800ac10:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ac14:	465d      	mov	r5, fp
 800ac16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	4639      	mov	r1, r7
 800ac1e:	f7f5 fe1d 	bl	800085c <__aeabi_ddiv>
 800ac22:	f7f5 ffa1 	bl	8000b68 <__aeabi_d2iz>
 800ac26:	4680      	mov	r8, r0
 800ac28:	f7f5 fc84 	bl	8000534 <__aeabi_i2d>
 800ac2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac30:	f7f5 fcea 	bl	8000608 <__aeabi_dmul>
 800ac34:	4602      	mov	r2, r0
 800ac36:	460b      	mov	r3, r1
 800ac38:	4630      	mov	r0, r6
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ac40:	f7f5 fb2a 	bl	8000298 <__aeabi_dsub>
 800ac44:	f805 6b01 	strb.w	r6, [r5], #1
 800ac48:	eba5 060b 	sub.w	r6, r5, fp
 800ac4c:	45b1      	cmp	r9, r6
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	d139      	bne.n	800acc8 <_dtoa_r+0x6c8>
 800ac54:	f7f5 fb22 	bl	800029c <__adddf3>
 800ac58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac5c:	4606      	mov	r6, r0
 800ac5e:	460f      	mov	r7, r1
 800ac60:	f7f5 ff62 	bl	8000b28 <__aeabi_dcmpgt>
 800ac64:	b9c8      	cbnz	r0, 800ac9a <_dtoa_r+0x69a>
 800ac66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	4639      	mov	r1, r7
 800ac6e:	f7f5 ff33 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac72:	b110      	cbz	r0, 800ac7a <_dtoa_r+0x67a>
 800ac74:	f018 0f01 	tst.w	r8, #1
 800ac78:	d10f      	bne.n	800ac9a <_dtoa_r+0x69a>
 800ac7a:	9904      	ldr	r1, [sp, #16]
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f000 fc9f 	bl	800b5c0 <_Bfree>
 800ac82:	2300      	movs	r3, #0
 800ac84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac86:	702b      	strb	r3, [r5, #0]
 800ac88:	f10a 0301 	add.w	r3, sl, #1
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f000 8241 	beq.w	800b118 <_dtoa_r+0xb18>
 800ac96:	601d      	str	r5, [r3, #0]
 800ac98:	e23e      	b.n	800b118 <_dtoa_r+0xb18>
 800ac9a:	f8cd a020 	str.w	sl, [sp, #32]
 800ac9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aca2:	2a39      	cmp	r2, #57	; 0x39
 800aca4:	f105 33ff 	add.w	r3, r5, #4294967295
 800aca8:	d108      	bne.n	800acbc <_dtoa_r+0x6bc>
 800acaa:	459b      	cmp	fp, r3
 800acac:	d10a      	bne.n	800acc4 <_dtoa_r+0x6c4>
 800acae:	9b08      	ldr	r3, [sp, #32]
 800acb0:	3301      	adds	r3, #1
 800acb2:	9308      	str	r3, [sp, #32]
 800acb4:	2330      	movs	r3, #48	; 0x30
 800acb6:	f88b 3000 	strb.w	r3, [fp]
 800acba:	465b      	mov	r3, fp
 800acbc:	781a      	ldrb	r2, [r3, #0]
 800acbe:	3201      	adds	r2, #1
 800acc0:	701a      	strb	r2, [r3, #0]
 800acc2:	e78c      	b.n	800abde <_dtoa_r+0x5de>
 800acc4:	461d      	mov	r5, r3
 800acc6:	e7ea      	b.n	800ac9e <_dtoa_r+0x69e>
 800acc8:	2200      	movs	r2, #0
 800acca:	4b9b      	ldr	r3, [pc, #620]	; (800af38 <_dtoa_r+0x938>)
 800accc:	f7f5 fc9c 	bl	8000608 <__aeabi_dmul>
 800acd0:	2200      	movs	r2, #0
 800acd2:	2300      	movs	r3, #0
 800acd4:	4606      	mov	r6, r0
 800acd6:	460f      	mov	r7, r1
 800acd8:	f7f5 fefe 	bl	8000ad8 <__aeabi_dcmpeq>
 800acdc:	2800      	cmp	r0, #0
 800acde:	d09a      	beq.n	800ac16 <_dtoa_r+0x616>
 800ace0:	e7cb      	b.n	800ac7a <_dtoa_r+0x67a>
 800ace2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ace4:	2a00      	cmp	r2, #0
 800ace6:	f000 808b 	beq.w	800ae00 <_dtoa_r+0x800>
 800acea:	9a06      	ldr	r2, [sp, #24]
 800acec:	2a01      	cmp	r2, #1
 800acee:	dc6e      	bgt.n	800adce <_dtoa_r+0x7ce>
 800acf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800acf2:	2a00      	cmp	r2, #0
 800acf4:	d067      	beq.n	800adc6 <_dtoa_r+0x7c6>
 800acf6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800acfa:	9f07      	ldr	r7, [sp, #28]
 800acfc:	9d05      	ldr	r5, [sp, #20]
 800acfe:	9a05      	ldr	r2, [sp, #20]
 800ad00:	2101      	movs	r1, #1
 800ad02:	441a      	add	r2, r3
 800ad04:	4620      	mov	r0, r4
 800ad06:	9205      	str	r2, [sp, #20]
 800ad08:	4498      	add	r8, r3
 800ad0a:	f000 fcf9 	bl	800b700 <__i2b>
 800ad0e:	4606      	mov	r6, r0
 800ad10:	2d00      	cmp	r5, #0
 800ad12:	dd0c      	ble.n	800ad2e <_dtoa_r+0x72e>
 800ad14:	f1b8 0f00 	cmp.w	r8, #0
 800ad18:	dd09      	ble.n	800ad2e <_dtoa_r+0x72e>
 800ad1a:	4545      	cmp	r5, r8
 800ad1c:	9a05      	ldr	r2, [sp, #20]
 800ad1e:	462b      	mov	r3, r5
 800ad20:	bfa8      	it	ge
 800ad22:	4643      	movge	r3, r8
 800ad24:	1ad2      	subs	r2, r2, r3
 800ad26:	9205      	str	r2, [sp, #20]
 800ad28:	1aed      	subs	r5, r5, r3
 800ad2a:	eba8 0803 	sub.w	r8, r8, r3
 800ad2e:	9b07      	ldr	r3, [sp, #28]
 800ad30:	b1eb      	cbz	r3, 800ad6e <_dtoa_r+0x76e>
 800ad32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d067      	beq.n	800ae08 <_dtoa_r+0x808>
 800ad38:	b18f      	cbz	r7, 800ad5e <_dtoa_r+0x75e>
 800ad3a:	4631      	mov	r1, r6
 800ad3c:	463a      	mov	r2, r7
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 fd7e 	bl	800b840 <__pow5mult>
 800ad44:	9a04      	ldr	r2, [sp, #16]
 800ad46:	4601      	mov	r1, r0
 800ad48:	4606      	mov	r6, r0
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 fce1 	bl	800b712 <__multiply>
 800ad50:	9904      	ldr	r1, [sp, #16]
 800ad52:	9008      	str	r0, [sp, #32]
 800ad54:	4620      	mov	r0, r4
 800ad56:	f000 fc33 	bl	800b5c0 <_Bfree>
 800ad5a:	9b08      	ldr	r3, [sp, #32]
 800ad5c:	9304      	str	r3, [sp, #16]
 800ad5e:	9b07      	ldr	r3, [sp, #28]
 800ad60:	1bda      	subs	r2, r3, r7
 800ad62:	d004      	beq.n	800ad6e <_dtoa_r+0x76e>
 800ad64:	9904      	ldr	r1, [sp, #16]
 800ad66:	4620      	mov	r0, r4
 800ad68:	f000 fd6a 	bl	800b840 <__pow5mult>
 800ad6c:	9004      	str	r0, [sp, #16]
 800ad6e:	2101      	movs	r1, #1
 800ad70:	4620      	mov	r0, r4
 800ad72:	f000 fcc5 	bl	800b700 <__i2b>
 800ad76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad78:	4607      	mov	r7, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f000 81d0 	beq.w	800b120 <_dtoa_r+0xb20>
 800ad80:	461a      	mov	r2, r3
 800ad82:	4601      	mov	r1, r0
 800ad84:	4620      	mov	r0, r4
 800ad86:	f000 fd5b 	bl	800b840 <__pow5mult>
 800ad8a:	9b06      	ldr	r3, [sp, #24]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	4607      	mov	r7, r0
 800ad90:	dc40      	bgt.n	800ae14 <_dtoa_r+0x814>
 800ad92:	9b00      	ldr	r3, [sp, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d139      	bne.n	800ae0c <_dtoa_r+0x80c>
 800ad98:	9b01      	ldr	r3, [sp, #4]
 800ad9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d136      	bne.n	800ae10 <_dtoa_r+0x810>
 800ada2:	9b01      	ldr	r3, [sp, #4]
 800ada4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ada8:	0d1b      	lsrs	r3, r3, #20
 800adaa:	051b      	lsls	r3, r3, #20
 800adac:	b12b      	cbz	r3, 800adba <_dtoa_r+0x7ba>
 800adae:	9b05      	ldr	r3, [sp, #20]
 800adb0:	3301      	adds	r3, #1
 800adb2:	9305      	str	r3, [sp, #20]
 800adb4:	f108 0801 	add.w	r8, r8, #1
 800adb8:	2301      	movs	r3, #1
 800adba:	9307      	str	r3, [sp, #28]
 800adbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d12a      	bne.n	800ae18 <_dtoa_r+0x818>
 800adc2:	2001      	movs	r0, #1
 800adc4:	e030      	b.n	800ae28 <_dtoa_r+0x828>
 800adc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800adc8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800adcc:	e795      	b.n	800acfa <_dtoa_r+0x6fa>
 800adce:	9b07      	ldr	r3, [sp, #28]
 800add0:	f109 37ff 	add.w	r7, r9, #4294967295
 800add4:	42bb      	cmp	r3, r7
 800add6:	bfbf      	itttt	lt
 800add8:	9b07      	ldrlt	r3, [sp, #28]
 800adda:	9707      	strlt	r7, [sp, #28]
 800addc:	1afa      	sublt	r2, r7, r3
 800adde:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ade0:	bfbb      	ittet	lt
 800ade2:	189b      	addlt	r3, r3, r2
 800ade4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ade6:	1bdf      	subge	r7, r3, r7
 800ade8:	2700      	movlt	r7, #0
 800adea:	f1b9 0f00 	cmp.w	r9, #0
 800adee:	bfb5      	itete	lt
 800adf0:	9b05      	ldrlt	r3, [sp, #20]
 800adf2:	9d05      	ldrge	r5, [sp, #20]
 800adf4:	eba3 0509 	sublt.w	r5, r3, r9
 800adf8:	464b      	movge	r3, r9
 800adfa:	bfb8      	it	lt
 800adfc:	2300      	movlt	r3, #0
 800adfe:	e77e      	b.n	800acfe <_dtoa_r+0x6fe>
 800ae00:	9f07      	ldr	r7, [sp, #28]
 800ae02:	9d05      	ldr	r5, [sp, #20]
 800ae04:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ae06:	e783      	b.n	800ad10 <_dtoa_r+0x710>
 800ae08:	9a07      	ldr	r2, [sp, #28]
 800ae0a:	e7ab      	b.n	800ad64 <_dtoa_r+0x764>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	e7d4      	b.n	800adba <_dtoa_r+0x7ba>
 800ae10:	9b00      	ldr	r3, [sp, #0]
 800ae12:	e7d2      	b.n	800adba <_dtoa_r+0x7ba>
 800ae14:	2300      	movs	r3, #0
 800ae16:	9307      	str	r3, [sp, #28]
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ae1e:	6918      	ldr	r0, [r3, #16]
 800ae20:	f000 fc20 	bl	800b664 <__hi0bits>
 800ae24:	f1c0 0020 	rsb	r0, r0, #32
 800ae28:	4440      	add	r0, r8
 800ae2a:	f010 001f 	ands.w	r0, r0, #31
 800ae2e:	d047      	beq.n	800aec0 <_dtoa_r+0x8c0>
 800ae30:	f1c0 0320 	rsb	r3, r0, #32
 800ae34:	2b04      	cmp	r3, #4
 800ae36:	dd3b      	ble.n	800aeb0 <_dtoa_r+0x8b0>
 800ae38:	9b05      	ldr	r3, [sp, #20]
 800ae3a:	f1c0 001c 	rsb	r0, r0, #28
 800ae3e:	4403      	add	r3, r0
 800ae40:	9305      	str	r3, [sp, #20]
 800ae42:	4405      	add	r5, r0
 800ae44:	4480      	add	r8, r0
 800ae46:	9b05      	ldr	r3, [sp, #20]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	dd05      	ble.n	800ae58 <_dtoa_r+0x858>
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	9904      	ldr	r1, [sp, #16]
 800ae50:	4620      	mov	r0, r4
 800ae52:	f000 fd43 	bl	800b8dc <__lshift>
 800ae56:	9004      	str	r0, [sp, #16]
 800ae58:	f1b8 0f00 	cmp.w	r8, #0
 800ae5c:	dd05      	ble.n	800ae6a <_dtoa_r+0x86a>
 800ae5e:	4639      	mov	r1, r7
 800ae60:	4642      	mov	r2, r8
 800ae62:	4620      	mov	r0, r4
 800ae64:	f000 fd3a 	bl	800b8dc <__lshift>
 800ae68:	4607      	mov	r7, r0
 800ae6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae6c:	b353      	cbz	r3, 800aec4 <_dtoa_r+0x8c4>
 800ae6e:	4639      	mov	r1, r7
 800ae70:	9804      	ldr	r0, [sp, #16]
 800ae72:	f000 fd87 	bl	800b984 <__mcmp>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	da24      	bge.n	800aec4 <_dtoa_r+0x8c4>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	220a      	movs	r2, #10
 800ae7e:	9904      	ldr	r1, [sp, #16]
 800ae80:	4620      	mov	r0, r4
 800ae82:	f000 fbb4 	bl	800b5ee <__multadd>
 800ae86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae88:	9004      	str	r0, [sp, #16]
 800ae8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f000 814d 	beq.w	800b12e <_dtoa_r+0xb2e>
 800ae94:	2300      	movs	r3, #0
 800ae96:	4631      	mov	r1, r6
 800ae98:	220a      	movs	r2, #10
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f000 fba7 	bl	800b5ee <__multadd>
 800aea0:	9b02      	ldr	r3, [sp, #8]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	4606      	mov	r6, r0
 800aea6:	dc4f      	bgt.n	800af48 <_dtoa_r+0x948>
 800aea8:	9b06      	ldr	r3, [sp, #24]
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	dd4c      	ble.n	800af48 <_dtoa_r+0x948>
 800aeae:	e011      	b.n	800aed4 <_dtoa_r+0x8d4>
 800aeb0:	d0c9      	beq.n	800ae46 <_dtoa_r+0x846>
 800aeb2:	9a05      	ldr	r2, [sp, #20]
 800aeb4:	331c      	adds	r3, #28
 800aeb6:	441a      	add	r2, r3
 800aeb8:	9205      	str	r2, [sp, #20]
 800aeba:	441d      	add	r5, r3
 800aebc:	4498      	add	r8, r3
 800aebe:	e7c2      	b.n	800ae46 <_dtoa_r+0x846>
 800aec0:	4603      	mov	r3, r0
 800aec2:	e7f6      	b.n	800aeb2 <_dtoa_r+0x8b2>
 800aec4:	f1b9 0f00 	cmp.w	r9, #0
 800aec8:	dc38      	bgt.n	800af3c <_dtoa_r+0x93c>
 800aeca:	9b06      	ldr	r3, [sp, #24]
 800aecc:	2b02      	cmp	r3, #2
 800aece:	dd35      	ble.n	800af3c <_dtoa_r+0x93c>
 800aed0:	f8cd 9008 	str.w	r9, [sp, #8]
 800aed4:	9b02      	ldr	r3, [sp, #8]
 800aed6:	b963      	cbnz	r3, 800aef2 <_dtoa_r+0x8f2>
 800aed8:	4639      	mov	r1, r7
 800aeda:	2205      	movs	r2, #5
 800aedc:	4620      	mov	r0, r4
 800aede:	f000 fb86 	bl	800b5ee <__multadd>
 800aee2:	4601      	mov	r1, r0
 800aee4:	4607      	mov	r7, r0
 800aee6:	9804      	ldr	r0, [sp, #16]
 800aee8:	f000 fd4c 	bl	800b984 <__mcmp>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	f73f adcc 	bgt.w	800aa8a <_dtoa_r+0x48a>
 800aef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aef4:	465d      	mov	r5, fp
 800aef6:	ea6f 0a03 	mvn.w	sl, r3
 800aefa:	f04f 0900 	mov.w	r9, #0
 800aefe:	4639      	mov	r1, r7
 800af00:	4620      	mov	r0, r4
 800af02:	f000 fb5d 	bl	800b5c0 <_Bfree>
 800af06:	2e00      	cmp	r6, #0
 800af08:	f43f aeb7 	beq.w	800ac7a <_dtoa_r+0x67a>
 800af0c:	f1b9 0f00 	cmp.w	r9, #0
 800af10:	d005      	beq.n	800af1e <_dtoa_r+0x91e>
 800af12:	45b1      	cmp	r9, r6
 800af14:	d003      	beq.n	800af1e <_dtoa_r+0x91e>
 800af16:	4649      	mov	r1, r9
 800af18:	4620      	mov	r0, r4
 800af1a:	f000 fb51 	bl	800b5c0 <_Bfree>
 800af1e:	4631      	mov	r1, r6
 800af20:	4620      	mov	r0, r4
 800af22:	f000 fb4d 	bl	800b5c0 <_Bfree>
 800af26:	e6a8      	b.n	800ac7a <_dtoa_r+0x67a>
 800af28:	2700      	movs	r7, #0
 800af2a:	463e      	mov	r6, r7
 800af2c:	e7e1      	b.n	800aef2 <_dtoa_r+0x8f2>
 800af2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800af32:	463e      	mov	r6, r7
 800af34:	e5a9      	b.n	800aa8a <_dtoa_r+0x48a>
 800af36:	bf00      	nop
 800af38:	40240000 	.word	0x40240000
 800af3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af3e:	f8cd 9008 	str.w	r9, [sp, #8]
 800af42:	2b00      	cmp	r3, #0
 800af44:	f000 80fa 	beq.w	800b13c <_dtoa_r+0xb3c>
 800af48:	2d00      	cmp	r5, #0
 800af4a:	dd05      	ble.n	800af58 <_dtoa_r+0x958>
 800af4c:	4631      	mov	r1, r6
 800af4e:	462a      	mov	r2, r5
 800af50:	4620      	mov	r0, r4
 800af52:	f000 fcc3 	bl	800b8dc <__lshift>
 800af56:	4606      	mov	r6, r0
 800af58:	9b07      	ldr	r3, [sp, #28]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d04c      	beq.n	800aff8 <_dtoa_r+0x9f8>
 800af5e:	6871      	ldr	r1, [r6, #4]
 800af60:	4620      	mov	r0, r4
 800af62:	f000 faf9 	bl	800b558 <_Balloc>
 800af66:	6932      	ldr	r2, [r6, #16]
 800af68:	3202      	adds	r2, #2
 800af6a:	4605      	mov	r5, r0
 800af6c:	0092      	lsls	r2, r2, #2
 800af6e:	f106 010c 	add.w	r1, r6, #12
 800af72:	300c      	adds	r0, #12
 800af74:	f7fe fce2 	bl	800993c <memcpy>
 800af78:	2201      	movs	r2, #1
 800af7a:	4629      	mov	r1, r5
 800af7c:	4620      	mov	r0, r4
 800af7e:	f000 fcad 	bl	800b8dc <__lshift>
 800af82:	9b00      	ldr	r3, [sp, #0]
 800af84:	f8cd b014 	str.w	fp, [sp, #20]
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	46b1      	mov	r9, r6
 800af8e:	9307      	str	r3, [sp, #28]
 800af90:	4606      	mov	r6, r0
 800af92:	4639      	mov	r1, r7
 800af94:	9804      	ldr	r0, [sp, #16]
 800af96:	f7ff faa7 	bl	800a4e8 <quorem>
 800af9a:	4649      	mov	r1, r9
 800af9c:	4605      	mov	r5, r0
 800af9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800afa2:	9804      	ldr	r0, [sp, #16]
 800afa4:	f000 fcee 	bl	800b984 <__mcmp>
 800afa8:	4632      	mov	r2, r6
 800afaa:	9000      	str	r0, [sp, #0]
 800afac:	4639      	mov	r1, r7
 800afae:	4620      	mov	r0, r4
 800afb0:	f000 fd02 	bl	800b9b8 <__mdiff>
 800afb4:	68c3      	ldr	r3, [r0, #12]
 800afb6:	4602      	mov	r2, r0
 800afb8:	bb03      	cbnz	r3, 800affc <_dtoa_r+0x9fc>
 800afba:	4601      	mov	r1, r0
 800afbc:	9008      	str	r0, [sp, #32]
 800afbe:	9804      	ldr	r0, [sp, #16]
 800afc0:	f000 fce0 	bl	800b984 <__mcmp>
 800afc4:	9a08      	ldr	r2, [sp, #32]
 800afc6:	4603      	mov	r3, r0
 800afc8:	4611      	mov	r1, r2
 800afca:	4620      	mov	r0, r4
 800afcc:	9308      	str	r3, [sp, #32]
 800afce:	f000 faf7 	bl	800b5c0 <_Bfree>
 800afd2:	9b08      	ldr	r3, [sp, #32]
 800afd4:	b9a3      	cbnz	r3, 800b000 <_dtoa_r+0xa00>
 800afd6:	9a06      	ldr	r2, [sp, #24]
 800afd8:	b992      	cbnz	r2, 800b000 <_dtoa_r+0xa00>
 800afda:	9a07      	ldr	r2, [sp, #28]
 800afdc:	b982      	cbnz	r2, 800b000 <_dtoa_r+0xa00>
 800afde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800afe2:	d029      	beq.n	800b038 <_dtoa_r+0xa38>
 800afe4:	9b00      	ldr	r3, [sp, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	dd01      	ble.n	800afee <_dtoa_r+0x9ee>
 800afea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800afee:	9b05      	ldr	r3, [sp, #20]
 800aff0:	1c5d      	adds	r5, r3, #1
 800aff2:	f883 8000 	strb.w	r8, [r3]
 800aff6:	e782      	b.n	800aefe <_dtoa_r+0x8fe>
 800aff8:	4630      	mov	r0, r6
 800affa:	e7c2      	b.n	800af82 <_dtoa_r+0x982>
 800affc:	2301      	movs	r3, #1
 800affe:	e7e3      	b.n	800afc8 <_dtoa_r+0x9c8>
 800b000:	9a00      	ldr	r2, [sp, #0]
 800b002:	2a00      	cmp	r2, #0
 800b004:	db04      	blt.n	800b010 <_dtoa_r+0xa10>
 800b006:	d125      	bne.n	800b054 <_dtoa_r+0xa54>
 800b008:	9a06      	ldr	r2, [sp, #24]
 800b00a:	bb1a      	cbnz	r2, 800b054 <_dtoa_r+0xa54>
 800b00c:	9a07      	ldr	r2, [sp, #28]
 800b00e:	bb0a      	cbnz	r2, 800b054 <_dtoa_r+0xa54>
 800b010:	2b00      	cmp	r3, #0
 800b012:	ddec      	ble.n	800afee <_dtoa_r+0x9ee>
 800b014:	2201      	movs	r2, #1
 800b016:	9904      	ldr	r1, [sp, #16]
 800b018:	4620      	mov	r0, r4
 800b01a:	f000 fc5f 	bl	800b8dc <__lshift>
 800b01e:	4639      	mov	r1, r7
 800b020:	9004      	str	r0, [sp, #16]
 800b022:	f000 fcaf 	bl	800b984 <__mcmp>
 800b026:	2800      	cmp	r0, #0
 800b028:	dc03      	bgt.n	800b032 <_dtoa_r+0xa32>
 800b02a:	d1e0      	bne.n	800afee <_dtoa_r+0x9ee>
 800b02c:	f018 0f01 	tst.w	r8, #1
 800b030:	d0dd      	beq.n	800afee <_dtoa_r+0x9ee>
 800b032:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b036:	d1d8      	bne.n	800afea <_dtoa_r+0x9ea>
 800b038:	9b05      	ldr	r3, [sp, #20]
 800b03a:	9a05      	ldr	r2, [sp, #20]
 800b03c:	1c5d      	adds	r5, r3, #1
 800b03e:	2339      	movs	r3, #57	; 0x39
 800b040:	7013      	strb	r3, [r2, #0]
 800b042:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b046:	2b39      	cmp	r3, #57	; 0x39
 800b048:	f105 32ff 	add.w	r2, r5, #4294967295
 800b04c:	d04f      	beq.n	800b0ee <_dtoa_r+0xaee>
 800b04e:	3301      	adds	r3, #1
 800b050:	7013      	strb	r3, [r2, #0]
 800b052:	e754      	b.n	800aefe <_dtoa_r+0x8fe>
 800b054:	9a05      	ldr	r2, [sp, #20]
 800b056:	2b00      	cmp	r3, #0
 800b058:	f102 0501 	add.w	r5, r2, #1
 800b05c:	dd06      	ble.n	800b06c <_dtoa_r+0xa6c>
 800b05e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b062:	d0e9      	beq.n	800b038 <_dtoa_r+0xa38>
 800b064:	f108 0801 	add.w	r8, r8, #1
 800b068:	9b05      	ldr	r3, [sp, #20]
 800b06a:	e7c2      	b.n	800aff2 <_dtoa_r+0x9f2>
 800b06c:	9a02      	ldr	r2, [sp, #8]
 800b06e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b072:	eba5 030b 	sub.w	r3, r5, fp
 800b076:	4293      	cmp	r3, r2
 800b078:	d021      	beq.n	800b0be <_dtoa_r+0xabe>
 800b07a:	2300      	movs	r3, #0
 800b07c:	220a      	movs	r2, #10
 800b07e:	9904      	ldr	r1, [sp, #16]
 800b080:	4620      	mov	r0, r4
 800b082:	f000 fab4 	bl	800b5ee <__multadd>
 800b086:	45b1      	cmp	r9, r6
 800b088:	9004      	str	r0, [sp, #16]
 800b08a:	f04f 0300 	mov.w	r3, #0
 800b08e:	f04f 020a 	mov.w	r2, #10
 800b092:	4649      	mov	r1, r9
 800b094:	4620      	mov	r0, r4
 800b096:	d105      	bne.n	800b0a4 <_dtoa_r+0xaa4>
 800b098:	f000 faa9 	bl	800b5ee <__multadd>
 800b09c:	4681      	mov	r9, r0
 800b09e:	4606      	mov	r6, r0
 800b0a0:	9505      	str	r5, [sp, #20]
 800b0a2:	e776      	b.n	800af92 <_dtoa_r+0x992>
 800b0a4:	f000 faa3 	bl	800b5ee <__multadd>
 800b0a8:	4631      	mov	r1, r6
 800b0aa:	4681      	mov	r9, r0
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	220a      	movs	r2, #10
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f000 fa9c 	bl	800b5ee <__multadd>
 800b0b6:	4606      	mov	r6, r0
 800b0b8:	e7f2      	b.n	800b0a0 <_dtoa_r+0xaa0>
 800b0ba:	f04f 0900 	mov.w	r9, #0
 800b0be:	2201      	movs	r2, #1
 800b0c0:	9904      	ldr	r1, [sp, #16]
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f000 fc0a 	bl	800b8dc <__lshift>
 800b0c8:	4639      	mov	r1, r7
 800b0ca:	9004      	str	r0, [sp, #16]
 800b0cc:	f000 fc5a 	bl	800b984 <__mcmp>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	dcb6      	bgt.n	800b042 <_dtoa_r+0xa42>
 800b0d4:	d102      	bne.n	800b0dc <_dtoa_r+0xadc>
 800b0d6:	f018 0f01 	tst.w	r8, #1
 800b0da:	d1b2      	bne.n	800b042 <_dtoa_r+0xa42>
 800b0dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b0e0:	2b30      	cmp	r3, #48	; 0x30
 800b0e2:	f105 32ff 	add.w	r2, r5, #4294967295
 800b0e6:	f47f af0a 	bne.w	800aefe <_dtoa_r+0x8fe>
 800b0ea:	4615      	mov	r5, r2
 800b0ec:	e7f6      	b.n	800b0dc <_dtoa_r+0xadc>
 800b0ee:	4593      	cmp	fp, r2
 800b0f0:	d105      	bne.n	800b0fe <_dtoa_r+0xafe>
 800b0f2:	2331      	movs	r3, #49	; 0x31
 800b0f4:	f10a 0a01 	add.w	sl, sl, #1
 800b0f8:	f88b 3000 	strb.w	r3, [fp]
 800b0fc:	e6ff      	b.n	800aefe <_dtoa_r+0x8fe>
 800b0fe:	4615      	mov	r5, r2
 800b100:	e79f      	b.n	800b042 <_dtoa_r+0xa42>
 800b102:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b168 <_dtoa_r+0xb68>
 800b106:	e007      	b.n	800b118 <_dtoa_r+0xb18>
 800b108:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b10a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b16c <_dtoa_r+0xb6c>
 800b10e:	b11b      	cbz	r3, 800b118 <_dtoa_r+0xb18>
 800b110:	f10b 0308 	add.w	r3, fp, #8
 800b114:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b116:	6013      	str	r3, [r2, #0]
 800b118:	4658      	mov	r0, fp
 800b11a:	b017      	add	sp, #92	; 0x5c
 800b11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b120:	9b06      	ldr	r3, [sp, #24]
 800b122:	2b01      	cmp	r3, #1
 800b124:	f77f ae35 	ble.w	800ad92 <_dtoa_r+0x792>
 800b128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b12a:	9307      	str	r3, [sp, #28]
 800b12c:	e649      	b.n	800adc2 <_dtoa_r+0x7c2>
 800b12e:	9b02      	ldr	r3, [sp, #8]
 800b130:	2b00      	cmp	r3, #0
 800b132:	dc03      	bgt.n	800b13c <_dtoa_r+0xb3c>
 800b134:	9b06      	ldr	r3, [sp, #24]
 800b136:	2b02      	cmp	r3, #2
 800b138:	f73f aecc 	bgt.w	800aed4 <_dtoa_r+0x8d4>
 800b13c:	465d      	mov	r5, fp
 800b13e:	4639      	mov	r1, r7
 800b140:	9804      	ldr	r0, [sp, #16]
 800b142:	f7ff f9d1 	bl	800a4e8 <quorem>
 800b146:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b14a:	f805 8b01 	strb.w	r8, [r5], #1
 800b14e:	9a02      	ldr	r2, [sp, #8]
 800b150:	eba5 030b 	sub.w	r3, r5, fp
 800b154:	429a      	cmp	r2, r3
 800b156:	ddb0      	ble.n	800b0ba <_dtoa_r+0xaba>
 800b158:	2300      	movs	r3, #0
 800b15a:	220a      	movs	r2, #10
 800b15c:	9904      	ldr	r1, [sp, #16]
 800b15e:	4620      	mov	r0, r4
 800b160:	f000 fa45 	bl	800b5ee <__multadd>
 800b164:	9004      	str	r0, [sp, #16]
 800b166:	e7ea      	b.n	800b13e <_dtoa_r+0xb3e>
 800b168:	0800c2f4 	.word	0x0800c2f4
 800b16c:	0800c318 	.word	0x0800c318

0800b170 <__sflush_r>:
 800b170:	898a      	ldrh	r2, [r1, #12]
 800b172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b176:	4605      	mov	r5, r0
 800b178:	0710      	lsls	r0, r2, #28
 800b17a:	460c      	mov	r4, r1
 800b17c:	d458      	bmi.n	800b230 <__sflush_r+0xc0>
 800b17e:	684b      	ldr	r3, [r1, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	dc05      	bgt.n	800b190 <__sflush_r+0x20>
 800b184:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b186:	2b00      	cmp	r3, #0
 800b188:	dc02      	bgt.n	800b190 <__sflush_r+0x20>
 800b18a:	2000      	movs	r0, #0
 800b18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b192:	2e00      	cmp	r6, #0
 800b194:	d0f9      	beq.n	800b18a <__sflush_r+0x1a>
 800b196:	2300      	movs	r3, #0
 800b198:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b19c:	682f      	ldr	r7, [r5, #0]
 800b19e:	6a21      	ldr	r1, [r4, #32]
 800b1a0:	602b      	str	r3, [r5, #0]
 800b1a2:	d032      	beq.n	800b20a <__sflush_r+0x9a>
 800b1a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1a6:	89a3      	ldrh	r3, [r4, #12]
 800b1a8:	075a      	lsls	r2, r3, #29
 800b1aa:	d505      	bpl.n	800b1b8 <__sflush_r+0x48>
 800b1ac:	6863      	ldr	r3, [r4, #4]
 800b1ae:	1ac0      	subs	r0, r0, r3
 800b1b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1b2:	b10b      	cbz	r3, 800b1b8 <__sflush_r+0x48>
 800b1b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1b6:	1ac0      	subs	r0, r0, r3
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1be:	6a21      	ldr	r1, [r4, #32]
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	47b0      	blx	r6
 800b1c4:	1c43      	adds	r3, r0, #1
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	d106      	bne.n	800b1d8 <__sflush_r+0x68>
 800b1ca:	6829      	ldr	r1, [r5, #0]
 800b1cc:	291d      	cmp	r1, #29
 800b1ce:	d848      	bhi.n	800b262 <__sflush_r+0xf2>
 800b1d0:	4a29      	ldr	r2, [pc, #164]	; (800b278 <__sflush_r+0x108>)
 800b1d2:	40ca      	lsrs	r2, r1
 800b1d4:	07d6      	lsls	r6, r2, #31
 800b1d6:	d544      	bpl.n	800b262 <__sflush_r+0xf2>
 800b1d8:	2200      	movs	r2, #0
 800b1da:	6062      	str	r2, [r4, #4]
 800b1dc:	04d9      	lsls	r1, r3, #19
 800b1de:	6922      	ldr	r2, [r4, #16]
 800b1e0:	6022      	str	r2, [r4, #0]
 800b1e2:	d504      	bpl.n	800b1ee <__sflush_r+0x7e>
 800b1e4:	1c42      	adds	r2, r0, #1
 800b1e6:	d101      	bne.n	800b1ec <__sflush_r+0x7c>
 800b1e8:	682b      	ldr	r3, [r5, #0]
 800b1ea:	b903      	cbnz	r3, 800b1ee <__sflush_r+0x7e>
 800b1ec:	6560      	str	r0, [r4, #84]	; 0x54
 800b1ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1f0:	602f      	str	r7, [r5, #0]
 800b1f2:	2900      	cmp	r1, #0
 800b1f4:	d0c9      	beq.n	800b18a <__sflush_r+0x1a>
 800b1f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1fa:	4299      	cmp	r1, r3
 800b1fc:	d002      	beq.n	800b204 <__sflush_r+0x94>
 800b1fe:	4628      	mov	r0, r5
 800b200:	f000 fc94 	bl	800bb2c <_free_r>
 800b204:	2000      	movs	r0, #0
 800b206:	6360      	str	r0, [r4, #52]	; 0x34
 800b208:	e7c0      	b.n	800b18c <__sflush_r+0x1c>
 800b20a:	2301      	movs	r3, #1
 800b20c:	4628      	mov	r0, r5
 800b20e:	47b0      	blx	r6
 800b210:	1c41      	adds	r1, r0, #1
 800b212:	d1c8      	bne.n	800b1a6 <__sflush_r+0x36>
 800b214:	682b      	ldr	r3, [r5, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d0c5      	beq.n	800b1a6 <__sflush_r+0x36>
 800b21a:	2b1d      	cmp	r3, #29
 800b21c:	d001      	beq.n	800b222 <__sflush_r+0xb2>
 800b21e:	2b16      	cmp	r3, #22
 800b220:	d101      	bne.n	800b226 <__sflush_r+0xb6>
 800b222:	602f      	str	r7, [r5, #0]
 800b224:	e7b1      	b.n	800b18a <__sflush_r+0x1a>
 800b226:	89a3      	ldrh	r3, [r4, #12]
 800b228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b22c:	81a3      	strh	r3, [r4, #12]
 800b22e:	e7ad      	b.n	800b18c <__sflush_r+0x1c>
 800b230:	690f      	ldr	r7, [r1, #16]
 800b232:	2f00      	cmp	r7, #0
 800b234:	d0a9      	beq.n	800b18a <__sflush_r+0x1a>
 800b236:	0793      	lsls	r3, r2, #30
 800b238:	680e      	ldr	r6, [r1, #0]
 800b23a:	bf08      	it	eq
 800b23c:	694b      	ldreq	r3, [r1, #20]
 800b23e:	600f      	str	r7, [r1, #0]
 800b240:	bf18      	it	ne
 800b242:	2300      	movne	r3, #0
 800b244:	eba6 0807 	sub.w	r8, r6, r7
 800b248:	608b      	str	r3, [r1, #8]
 800b24a:	f1b8 0f00 	cmp.w	r8, #0
 800b24e:	dd9c      	ble.n	800b18a <__sflush_r+0x1a>
 800b250:	4643      	mov	r3, r8
 800b252:	463a      	mov	r2, r7
 800b254:	6a21      	ldr	r1, [r4, #32]
 800b256:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b258:	4628      	mov	r0, r5
 800b25a:	47b0      	blx	r6
 800b25c:	2800      	cmp	r0, #0
 800b25e:	dc06      	bgt.n	800b26e <__sflush_r+0xfe>
 800b260:	89a3      	ldrh	r3, [r4, #12]
 800b262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b266:	81a3      	strh	r3, [r4, #12]
 800b268:	f04f 30ff 	mov.w	r0, #4294967295
 800b26c:	e78e      	b.n	800b18c <__sflush_r+0x1c>
 800b26e:	4407      	add	r7, r0
 800b270:	eba8 0800 	sub.w	r8, r8, r0
 800b274:	e7e9      	b.n	800b24a <__sflush_r+0xda>
 800b276:	bf00      	nop
 800b278:	20400001 	.word	0x20400001

0800b27c <_fflush_r>:
 800b27c:	b538      	push	{r3, r4, r5, lr}
 800b27e:	690b      	ldr	r3, [r1, #16]
 800b280:	4605      	mov	r5, r0
 800b282:	460c      	mov	r4, r1
 800b284:	b1db      	cbz	r3, 800b2be <_fflush_r+0x42>
 800b286:	b118      	cbz	r0, 800b290 <_fflush_r+0x14>
 800b288:	6983      	ldr	r3, [r0, #24]
 800b28a:	b90b      	cbnz	r3, 800b290 <_fflush_r+0x14>
 800b28c:	f000 f860 	bl	800b350 <__sinit>
 800b290:	4b0c      	ldr	r3, [pc, #48]	; (800b2c4 <_fflush_r+0x48>)
 800b292:	429c      	cmp	r4, r3
 800b294:	d109      	bne.n	800b2aa <_fflush_r+0x2e>
 800b296:	686c      	ldr	r4, [r5, #4]
 800b298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b29c:	b17b      	cbz	r3, 800b2be <_fflush_r+0x42>
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2a6:	f7ff bf63 	b.w	800b170 <__sflush_r>
 800b2aa:	4b07      	ldr	r3, [pc, #28]	; (800b2c8 <_fflush_r+0x4c>)
 800b2ac:	429c      	cmp	r4, r3
 800b2ae:	d101      	bne.n	800b2b4 <_fflush_r+0x38>
 800b2b0:	68ac      	ldr	r4, [r5, #8]
 800b2b2:	e7f1      	b.n	800b298 <_fflush_r+0x1c>
 800b2b4:	4b05      	ldr	r3, [pc, #20]	; (800b2cc <_fflush_r+0x50>)
 800b2b6:	429c      	cmp	r4, r3
 800b2b8:	bf08      	it	eq
 800b2ba:	68ec      	ldreq	r4, [r5, #12]
 800b2bc:	e7ec      	b.n	800b298 <_fflush_r+0x1c>
 800b2be:	2000      	movs	r0, #0
 800b2c0:	bd38      	pop	{r3, r4, r5, pc}
 800b2c2:	bf00      	nop
 800b2c4:	0800c348 	.word	0x0800c348
 800b2c8:	0800c368 	.word	0x0800c368
 800b2cc:	0800c328 	.word	0x0800c328

0800b2d0 <std>:
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	b510      	push	{r4, lr}
 800b2d4:	4604      	mov	r4, r0
 800b2d6:	e9c0 3300 	strd	r3, r3, [r0]
 800b2da:	6083      	str	r3, [r0, #8]
 800b2dc:	8181      	strh	r1, [r0, #12]
 800b2de:	6643      	str	r3, [r0, #100]	; 0x64
 800b2e0:	81c2      	strh	r2, [r0, #14]
 800b2e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2e6:	6183      	str	r3, [r0, #24]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	2208      	movs	r2, #8
 800b2ec:	305c      	adds	r0, #92	; 0x5c
 800b2ee:	f7fe fb30 	bl	8009952 <memset>
 800b2f2:	4b05      	ldr	r3, [pc, #20]	; (800b308 <std+0x38>)
 800b2f4:	6263      	str	r3, [r4, #36]	; 0x24
 800b2f6:	4b05      	ldr	r3, [pc, #20]	; (800b30c <std+0x3c>)
 800b2f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2fa:	4b05      	ldr	r3, [pc, #20]	; (800b310 <std+0x40>)
 800b2fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2fe:	4b05      	ldr	r3, [pc, #20]	; (800b314 <std+0x44>)
 800b300:	6224      	str	r4, [r4, #32]
 800b302:	6323      	str	r3, [r4, #48]	; 0x30
 800b304:	bd10      	pop	{r4, pc}
 800b306:	bf00      	nop
 800b308:	0800bf89 	.word	0x0800bf89
 800b30c:	0800bfab 	.word	0x0800bfab
 800b310:	0800bfe3 	.word	0x0800bfe3
 800b314:	0800c007 	.word	0x0800c007

0800b318 <_cleanup_r>:
 800b318:	4901      	ldr	r1, [pc, #4]	; (800b320 <_cleanup_r+0x8>)
 800b31a:	f000 b885 	b.w	800b428 <_fwalk_reent>
 800b31e:	bf00      	nop
 800b320:	0800b27d 	.word	0x0800b27d

0800b324 <__sfmoreglue>:
 800b324:	b570      	push	{r4, r5, r6, lr}
 800b326:	1e4a      	subs	r2, r1, #1
 800b328:	2568      	movs	r5, #104	; 0x68
 800b32a:	4355      	muls	r5, r2
 800b32c:	460e      	mov	r6, r1
 800b32e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b332:	f000 fc49 	bl	800bbc8 <_malloc_r>
 800b336:	4604      	mov	r4, r0
 800b338:	b140      	cbz	r0, 800b34c <__sfmoreglue+0x28>
 800b33a:	2100      	movs	r1, #0
 800b33c:	e9c0 1600 	strd	r1, r6, [r0]
 800b340:	300c      	adds	r0, #12
 800b342:	60a0      	str	r0, [r4, #8]
 800b344:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b348:	f7fe fb03 	bl	8009952 <memset>
 800b34c:	4620      	mov	r0, r4
 800b34e:	bd70      	pop	{r4, r5, r6, pc}

0800b350 <__sinit>:
 800b350:	6983      	ldr	r3, [r0, #24]
 800b352:	b510      	push	{r4, lr}
 800b354:	4604      	mov	r4, r0
 800b356:	bb33      	cbnz	r3, 800b3a6 <__sinit+0x56>
 800b358:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b35c:	6503      	str	r3, [r0, #80]	; 0x50
 800b35e:	4b12      	ldr	r3, [pc, #72]	; (800b3a8 <__sinit+0x58>)
 800b360:	4a12      	ldr	r2, [pc, #72]	; (800b3ac <__sinit+0x5c>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	6282      	str	r2, [r0, #40]	; 0x28
 800b366:	4298      	cmp	r0, r3
 800b368:	bf04      	itt	eq
 800b36a:	2301      	moveq	r3, #1
 800b36c:	6183      	streq	r3, [r0, #24]
 800b36e:	f000 f81f 	bl	800b3b0 <__sfp>
 800b372:	6060      	str	r0, [r4, #4]
 800b374:	4620      	mov	r0, r4
 800b376:	f000 f81b 	bl	800b3b0 <__sfp>
 800b37a:	60a0      	str	r0, [r4, #8]
 800b37c:	4620      	mov	r0, r4
 800b37e:	f000 f817 	bl	800b3b0 <__sfp>
 800b382:	2200      	movs	r2, #0
 800b384:	60e0      	str	r0, [r4, #12]
 800b386:	2104      	movs	r1, #4
 800b388:	6860      	ldr	r0, [r4, #4]
 800b38a:	f7ff ffa1 	bl	800b2d0 <std>
 800b38e:	2201      	movs	r2, #1
 800b390:	2109      	movs	r1, #9
 800b392:	68a0      	ldr	r0, [r4, #8]
 800b394:	f7ff ff9c 	bl	800b2d0 <std>
 800b398:	2202      	movs	r2, #2
 800b39a:	2112      	movs	r1, #18
 800b39c:	68e0      	ldr	r0, [r4, #12]
 800b39e:	f7ff ff97 	bl	800b2d0 <std>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	61a3      	str	r3, [r4, #24]
 800b3a6:	bd10      	pop	{r4, pc}
 800b3a8:	0800c2e0 	.word	0x0800c2e0
 800b3ac:	0800b319 	.word	0x0800b319

0800b3b0 <__sfp>:
 800b3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b2:	4b1b      	ldr	r3, [pc, #108]	; (800b420 <__sfp+0x70>)
 800b3b4:	681e      	ldr	r6, [r3, #0]
 800b3b6:	69b3      	ldr	r3, [r6, #24]
 800b3b8:	4607      	mov	r7, r0
 800b3ba:	b913      	cbnz	r3, 800b3c2 <__sfp+0x12>
 800b3bc:	4630      	mov	r0, r6
 800b3be:	f7ff ffc7 	bl	800b350 <__sinit>
 800b3c2:	3648      	adds	r6, #72	; 0x48
 800b3c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	d503      	bpl.n	800b3d4 <__sfp+0x24>
 800b3cc:	6833      	ldr	r3, [r6, #0]
 800b3ce:	b133      	cbz	r3, 800b3de <__sfp+0x2e>
 800b3d0:	6836      	ldr	r6, [r6, #0]
 800b3d2:	e7f7      	b.n	800b3c4 <__sfp+0x14>
 800b3d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3d8:	b16d      	cbz	r5, 800b3f6 <__sfp+0x46>
 800b3da:	3468      	adds	r4, #104	; 0x68
 800b3dc:	e7f4      	b.n	800b3c8 <__sfp+0x18>
 800b3de:	2104      	movs	r1, #4
 800b3e0:	4638      	mov	r0, r7
 800b3e2:	f7ff ff9f 	bl	800b324 <__sfmoreglue>
 800b3e6:	6030      	str	r0, [r6, #0]
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	d1f1      	bne.n	800b3d0 <__sfp+0x20>
 800b3ec:	230c      	movs	r3, #12
 800b3ee:	603b      	str	r3, [r7, #0]
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3f6:	4b0b      	ldr	r3, [pc, #44]	; (800b424 <__sfp+0x74>)
 800b3f8:	6665      	str	r5, [r4, #100]	; 0x64
 800b3fa:	e9c4 5500 	strd	r5, r5, [r4]
 800b3fe:	60a5      	str	r5, [r4, #8]
 800b400:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b404:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b408:	2208      	movs	r2, #8
 800b40a:	4629      	mov	r1, r5
 800b40c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b410:	f7fe fa9f 	bl	8009952 <memset>
 800b414:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b418:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b41c:	e7e9      	b.n	800b3f2 <__sfp+0x42>
 800b41e:	bf00      	nop
 800b420:	0800c2e0 	.word	0x0800c2e0
 800b424:	ffff0001 	.word	0xffff0001

0800b428 <_fwalk_reent>:
 800b428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b42c:	4680      	mov	r8, r0
 800b42e:	4689      	mov	r9, r1
 800b430:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b434:	2600      	movs	r6, #0
 800b436:	b914      	cbnz	r4, 800b43e <_fwalk_reent+0x16>
 800b438:	4630      	mov	r0, r6
 800b43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b43e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b442:	3f01      	subs	r7, #1
 800b444:	d501      	bpl.n	800b44a <_fwalk_reent+0x22>
 800b446:	6824      	ldr	r4, [r4, #0]
 800b448:	e7f5      	b.n	800b436 <_fwalk_reent+0xe>
 800b44a:	89ab      	ldrh	r3, [r5, #12]
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d907      	bls.n	800b460 <_fwalk_reent+0x38>
 800b450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b454:	3301      	adds	r3, #1
 800b456:	d003      	beq.n	800b460 <_fwalk_reent+0x38>
 800b458:	4629      	mov	r1, r5
 800b45a:	4640      	mov	r0, r8
 800b45c:	47c8      	blx	r9
 800b45e:	4306      	orrs	r6, r0
 800b460:	3568      	adds	r5, #104	; 0x68
 800b462:	e7ee      	b.n	800b442 <_fwalk_reent+0x1a>

0800b464 <_localeconv_r>:
 800b464:	4b04      	ldr	r3, [pc, #16]	; (800b478 <_localeconv_r+0x14>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	6a18      	ldr	r0, [r3, #32]
 800b46a:	4b04      	ldr	r3, [pc, #16]	; (800b47c <_localeconv_r+0x18>)
 800b46c:	2800      	cmp	r0, #0
 800b46e:	bf08      	it	eq
 800b470:	4618      	moveq	r0, r3
 800b472:	30f0      	adds	r0, #240	; 0xf0
 800b474:	4770      	bx	lr
 800b476:	bf00      	nop
 800b478:	2000003c 	.word	0x2000003c
 800b47c:	200000a0 	.word	0x200000a0

0800b480 <__swhatbuf_r>:
 800b480:	b570      	push	{r4, r5, r6, lr}
 800b482:	460e      	mov	r6, r1
 800b484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b488:	2900      	cmp	r1, #0
 800b48a:	b096      	sub	sp, #88	; 0x58
 800b48c:	4614      	mov	r4, r2
 800b48e:	461d      	mov	r5, r3
 800b490:	da07      	bge.n	800b4a2 <__swhatbuf_r+0x22>
 800b492:	2300      	movs	r3, #0
 800b494:	602b      	str	r3, [r5, #0]
 800b496:	89b3      	ldrh	r3, [r6, #12]
 800b498:	061a      	lsls	r2, r3, #24
 800b49a:	d410      	bmi.n	800b4be <__swhatbuf_r+0x3e>
 800b49c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4a0:	e00e      	b.n	800b4c0 <__swhatbuf_r+0x40>
 800b4a2:	466a      	mov	r2, sp
 800b4a4:	f000 fdd6 	bl	800c054 <_fstat_r>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	dbf2      	blt.n	800b492 <__swhatbuf_r+0x12>
 800b4ac:	9a01      	ldr	r2, [sp, #4]
 800b4ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b4b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4b6:	425a      	negs	r2, r3
 800b4b8:	415a      	adcs	r2, r3
 800b4ba:	602a      	str	r2, [r5, #0]
 800b4bc:	e7ee      	b.n	800b49c <__swhatbuf_r+0x1c>
 800b4be:	2340      	movs	r3, #64	; 0x40
 800b4c0:	2000      	movs	r0, #0
 800b4c2:	6023      	str	r3, [r4, #0]
 800b4c4:	b016      	add	sp, #88	; 0x58
 800b4c6:	bd70      	pop	{r4, r5, r6, pc}

0800b4c8 <__smakebuf_r>:
 800b4c8:	898b      	ldrh	r3, [r1, #12]
 800b4ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4cc:	079d      	lsls	r5, r3, #30
 800b4ce:	4606      	mov	r6, r0
 800b4d0:	460c      	mov	r4, r1
 800b4d2:	d507      	bpl.n	800b4e4 <__smakebuf_r+0x1c>
 800b4d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	6123      	str	r3, [r4, #16]
 800b4dc:	2301      	movs	r3, #1
 800b4de:	6163      	str	r3, [r4, #20]
 800b4e0:	b002      	add	sp, #8
 800b4e2:	bd70      	pop	{r4, r5, r6, pc}
 800b4e4:	ab01      	add	r3, sp, #4
 800b4e6:	466a      	mov	r2, sp
 800b4e8:	f7ff ffca 	bl	800b480 <__swhatbuf_r>
 800b4ec:	9900      	ldr	r1, [sp, #0]
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	f000 fb69 	bl	800bbc8 <_malloc_r>
 800b4f6:	b948      	cbnz	r0, 800b50c <__smakebuf_r+0x44>
 800b4f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4fc:	059a      	lsls	r2, r3, #22
 800b4fe:	d4ef      	bmi.n	800b4e0 <__smakebuf_r+0x18>
 800b500:	f023 0303 	bic.w	r3, r3, #3
 800b504:	f043 0302 	orr.w	r3, r3, #2
 800b508:	81a3      	strh	r3, [r4, #12]
 800b50a:	e7e3      	b.n	800b4d4 <__smakebuf_r+0xc>
 800b50c:	4b0d      	ldr	r3, [pc, #52]	; (800b544 <__smakebuf_r+0x7c>)
 800b50e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b510:	89a3      	ldrh	r3, [r4, #12]
 800b512:	6020      	str	r0, [r4, #0]
 800b514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b518:	81a3      	strh	r3, [r4, #12]
 800b51a:	9b00      	ldr	r3, [sp, #0]
 800b51c:	6163      	str	r3, [r4, #20]
 800b51e:	9b01      	ldr	r3, [sp, #4]
 800b520:	6120      	str	r0, [r4, #16]
 800b522:	b15b      	cbz	r3, 800b53c <__smakebuf_r+0x74>
 800b524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b528:	4630      	mov	r0, r6
 800b52a:	f000 fda5 	bl	800c078 <_isatty_r>
 800b52e:	b128      	cbz	r0, 800b53c <__smakebuf_r+0x74>
 800b530:	89a3      	ldrh	r3, [r4, #12]
 800b532:	f023 0303 	bic.w	r3, r3, #3
 800b536:	f043 0301 	orr.w	r3, r3, #1
 800b53a:	81a3      	strh	r3, [r4, #12]
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	431d      	orrs	r5, r3
 800b540:	81a5      	strh	r5, [r4, #12]
 800b542:	e7cd      	b.n	800b4e0 <__smakebuf_r+0x18>
 800b544:	0800b319 	.word	0x0800b319

0800b548 <malloc>:
 800b548:	4b02      	ldr	r3, [pc, #8]	; (800b554 <malloc+0xc>)
 800b54a:	4601      	mov	r1, r0
 800b54c:	6818      	ldr	r0, [r3, #0]
 800b54e:	f000 bb3b 	b.w	800bbc8 <_malloc_r>
 800b552:	bf00      	nop
 800b554:	2000003c 	.word	0x2000003c

0800b558 <_Balloc>:
 800b558:	b570      	push	{r4, r5, r6, lr}
 800b55a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b55c:	4604      	mov	r4, r0
 800b55e:	460e      	mov	r6, r1
 800b560:	b93d      	cbnz	r5, 800b572 <_Balloc+0x1a>
 800b562:	2010      	movs	r0, #16
 800b564:	f7ff fff0 	bl	800b548 <malloc>
 800b568:	6260      	str	r0, [r4, #36]	; 0x24
 800b56a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b56e:	6005      	str	r5, [r0, #0]
 800b570:	60c5      	str	r5, [r0, #12]
 800b572:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b574:	68eb      	ldr	r3, [r5, #12]
 800b576:	b183      	cbz	r3, 800b59a <_Balloc+0x42>
 800b578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b580:	b9b8      	cbnz	r0, 800b5b2 <_Balloc+0x5a>
 800b582:	2101      	movs	r1, #1
 800b584:	fa01 f506 	lsl.w	r5, r1, r6
 800b588:	1d6a      	adds	r2, r5, #5
 800b58a:	0092      	lsls	r2, r2, #2
 800b58c:	4620      	mov	r0, r4
 800b58e:	f000 fabf 	bl	800bb10 <_calloc_r>
 800b592:	b160      	cbz	r0, 800b5ae <_Balloc+0x56>
 800b594:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b598:	e00e      	b.n	800b5b8 <_Balloc+0x60>
 800b59a:	2221      	movs	r2, #33	; 0x21
 800b59c:	2104      	movs	r1, #4
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f000 fab6 	bl	800bb10 <_calloc_r>
 800b5a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5a6:	60e8      	str	r0, [r5, #12]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d1e4      	bne.n	800b578 <_Balloc+0x20>
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	bd70      	pop	{r4, r5, r6, pc}
 800b5b2:	6802      	ldr	r2, [r0, #0]
 800b5b4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5be:	e7f7      	b.n	800b5b0 <_Balloc+0x58>

0800b5c0 <_Bfree>:
 800b5c0:	b570      	push	{r4, r5, r6, lr}
 800b5c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b5c4:	4606      	mov	r6, r0
 800b5c6:	460d      	mov	r5, r1
 800b5c8:	b93c      	cbnz	r4, 800b5da <_Bfree+0x1a>
 800b5ca:	2010      	movs	r0, #16
 800b5cc:	f7ff ffbc 	bl	800b548 <malloc>
 800b5d0:	6270      	str	r0, [r6, #36]	; 0x24
 800b5d2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5d6:	6004      	str	r4, [r0, #0]
 800b5d8:	60c4      	str	r4, [r0, #12]
 800b5da:	b13d      	cbz	r5, 800b5ec <_Bfree+0x2c>
 800b5dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b5de:	686a      	ldr	r2, [r5, #4]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5e6:	6029      	str	r1, [r5, #0]
 800b5e8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b5ec:	bd70      	pop	{r4, r5, r6, pc}

0800b5ee <__multadd>:
 800b5ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f2:	690d      	ldr	r5, [r1, #16]
 800b5f4:	461f      	mov	r7, r3
 800b5f6:	4606      	mov	r6, r0
 800b5f8:	460c      	mov	r4, r1
 800b5fa:	f101 0c14 	add.w	ip, r1, #20
 800b5fe:	2300      	movs	r3, #0
 800b600:	f8dc 0000 	ldr.w	r0, [ip]
 800b604:	b281      	uxth	r1, r0
 800b606:	fb02 7101 	mla	r1, r2, r1, r7
 800b60a:	0c0f      	lsrs	r7, r1, #16
 800b60c:	0c00      	lsrs	r0, r0, #16
 800b60e:	fb02 7000 	mla	r0, r2, r0, r7
 800b612:	b289      	uxth	r1, r1
 800b614:	3301      	adds	r3, #1
 800b616:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b61a:	429d      	cmp	r5, r3
 800b61c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b620:	f84c 1b04 	str.w	r1, [ip], #4
 800b624:	dcec      	bgt.n	800b600 <__multadd+0x12>
 800b626:	b1d7      	cbz	r7, 800b65e <__multadd+0x70>
 800b628:	68a3      	ldr	r3, [r4, #8]
 800b62a:	42ab      	cmp	r3, r5
 800b62c:	dc12      	bgt.n	800b654 <__multadd+0x66>
 800b62e:	6861      	ldr	r1, [r4, #4]
 800b630:	4630      	mov	r0, r6
 800b632:	3101      	adds	r1, #1
 800b634:	f7ff ff90 	bl	800b558 <_Balloc>
 800b638:	6922      	ldr	r2, [r4, #16]
 800b63a:	3202      	adds	r2, #2
 800b63c:	f104 010c 	add.w	r1, r4, #12
 800b640:	4680      	mov	r8, r0
 800b642:	0092      	lsls	r2, r2, #2
 800b644:	300c      	adds	r0, #12
 800b646:	f7fe f979 	bl	800993c <memcpy>
 800b64a:	4621      	mov	r1, r4
 800b64c:	4630      	mov	r0, r6
 800b64e:	f7ff ffb7 	bl	800b5c0 <_Bfree>
 800b652:	4644      	mov	r4, r8
 800b654:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b658:	3501      	adds	r5, #1
 800b65a:	615f      	str	r7, [r3, #20]
 800b65c:	6125      	str	r5, [r4, #16]
 800b65e:	4620      	mov	r0, r4
 800b660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b664 <__hi0bits>:
 800b664:	0c02      	lsrs	r2, r0, #16
 800b666:	0412      	lsls	r2, r2, #16
 800b668:	4603      	mov	r3, r0
 800b66a:	b9b2      	cbnz	r2, 800b69a <__hi0bits+0x36>
 800b66c:	0403      	lsls	r3, r0, #16
 800b66e:	2010      	movs	r0, #16
 800b670:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b674:	bf04      	itt	eq
 800b676:	021b      	lsleq	r3, r3, #8
 800b678:	3008      	addeq	r0, #8
 800b67a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b67e:	bf04      	itt	eq
 800b680:	011b      	lsleq	r3, r3, #4
 800b682:	3004      	addeq	r0, #4
 800b684:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b688:	bf04      	itt	eq
 800b68a:	009b      	lsleq	r3, r3, #2
 800b68c:	3002      	addeq	r0, #2
 800b68e:	2b00      	cmp	r3, #0
 800b690:	db06      	blt.n	800b6a0 <__hi0bits+0x3c>
 800b692:	005b      	lsls	r3, r3, #1
 800b694:	d503      	bpl.n	800b69e <__hi0bits+0x3a>
 800b696:	3001      	adds	r0, #1
 800b698:	4770      	bx	lr
 800b69a:	2000      	movs	r0, #0
 800b69c:	e7e8      	b.n	800b670 <__hi0bits+0xc>
 800b69e:	2020      	movs	r0, #32
 800b6a0:	4770      	bx	lr

0800b6a2 <__lo0bits>:
 800b6a2:	6803      	ldr	r3, [r0, #0]
 800b6a4:	f013 0207 	ands.w	r2, r3, #7
 800b6a8:	4601      	mov	r1, r0
 800b6aa:	d00b      	beq.n	800b6c4 <__lo0bits+0x22>
 800b6ac:	07da      	lsls	r2, r3, #31
 800b6ae:	d423      	bmi.n	800b6f8 <__lo0bits+0x56>
 800b6b0:	0798      	lsls	r0, r3, #30
 800b6b2:	bf49      	itett	mi
 800b6b4:	085b      	lsrmi	r3, r3, #1
 800b6b6:	089b      	lsrpl	r3, r3, #2
 800b6b8:	2001      	movmi	r0, #1
 800b6ba:	600b      	strmi	r3, [r1, #0]
 800b6bc:	bf5c      	itt	pl
 800b6be:	600b      	strpl	r3, [r1, #0]
 800b6c0:	2002      	movpl	r0, #2
 800b6c2:	4770      	bx	lr
 800b6c4:	b298      	uxth	r0, r3
 800b6c6:	b9a8      	cbnz	r0, 800b6f4 <__lo0bits+0x52>
 800b6c8:	0c1b      	lsrs	r3, r3, #16
 800b6ca:	2010      	movs	r0, #16
 800b6cc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b6d0:	bf04      	itt	eq
 800b6d2:	0a1b      	lsreq	r3, r3, #8
 800b6d4:	3008      	addeq	r0, #8
 800b6d6:	071a      	lsls	r2, r3, #28
 800b6d8:	bf04      	itt	eq
 800b6da:	091b      	lsreq	r3, r3, #4
 800b6dc:	3004      	addeq	r0, #4
 800b6de:	079a      	lsls	r2, r3, #30
 800b6e0:	bf04      	itt	eq
 800b6e2:	089b      	lsreq	r3, r3, #2
 800b6e4:	3002      	addeq	r0, #2
 800b6e6:	07da      	lsls	r2, r3, #31
 800b6e8:	d402      	bmi.n	800b6f0 <__lo0bits+0x4e>
 800b6ea:	085b      	lsrs	r3, r3, #1
 800b6ec:	d006      	beq.n	800b6fc <__lo0bits+0x5a>
 800b6ee:	3001      	adds	r0, #1
 800b6f0:	600b      	str	r3, [r1, #0]
 800b6f2:	4770      	bx	lr
 800b6f4:	4610      	mov	r0, r2
 800b6f6:	e7e9      	b.n	800b6cc <__lo0bits+0x2a>
 800b6f8:	2000      	movs	r0, #0
 800b6fa:	4770      	bx	lr
 800b6fc:	2020      	movs	r0, #32
 800b6fe:	4770      	bx	lr

0800b700 <__i2b>:
 800b700:	b510      	push	{r4, lr}
 800b702:	460c      	mov	r4, r1
 800b704:	2101      	movs	r1, #1
 800b706:	f7ff ff27 	bl	800b558 <_Balloc>
 800b70a:	2201      	movs	r2, #1
 800b70c:	6144      	str	r4, [r0, #20]
 800b70e:	6102      	str	r2, [r0, #16]
 800b710:	bd10      	pop	{r4, pc}

0800b712 <__multiply>:
 800b712:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b716:	4614      	mov	r4, r2
 800b718:	690a      	ldr	r2, [r1, #16]
 800b71a:	6923      	ldr	r3, [r4, #16]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	bfb8      	it	lt
 800b720:	460b      	movlt	r3, r1
 800b722:	4688      	mov	r8, r1
 800b724:	bfbc      	itt	lt
 800b726:	46a0      	movlt	r8, r4
 800b728:	461c      	movlt	r4, r3
 800b72a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b72e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b732:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b736:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b73a:	eb07 0609 	add.w	r6, r7, r9
 800b73e:	42b3      	cmp	r3, r6
 800b740:	bfb8      	it	lt
 800b742:	3101      	addlt	r1, #1
 800b744:	f7ff ff08 	bl	800b558 <_Balloc>
 800b748:	f100 0514 	add.w	r5, r0, #20
 800b74c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b750:	462b      	mov	r3, r5
 800b752:	2200      	movs	r2, #0
 800b754:	4573      	cmp	r3, lr
 800b756:	d316      	bcc.n	800b786 <__multiply+0x74>
 800b758:	f104 0214 	add.w	r2, r4, #20
 800b75c:	f108 0114 	add.w	r1, r8, #20
 800b760:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b764:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b768:	9300      	str	r3, [sp, #0]
 800b76a:	9b00      	ldr	r3, [sp, #0]
 800b76c:	9201      	str	r2, [sp, #4]
 800b76e:	4293      	cmp	r3, r2
 800b770:	d80c      	bhi.n	800b78c <__multiply+0x7a>
 800b772:	2e00      	cmp	r6, #0
 800b774:	dd03      	ble.n	800b77e <__multiply+0x6c>
 800b776:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d05d      	beq.n	800b83a <__multiply+0x128>
 800b77e:	6106      	str	r6, [r0, #16]
 800b780:	b003      	add	sp, #12
 800b782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b786:	f843 2b04 	str.w	r2, [r3], #4
 800b78a:	e7e3      	b.n	800b754 <__multiply+0x42>
 800b78c:	f8b2 b000 	ldrh.w	fp, [r2]
 800b790:	f1bb 0f00 	cmp.w	fp, #0
 800b794:	d023      	beq.n	800b7de <__multiply+0xcc>
 800b796:	4689      	mov	r9, r1
 800b798:	46ac      	mov	ip, r5
 800b79a:	f04f 0800 	mov.w	r8, #0
 800b79e:	f859 4b04 	ldr.w	r4, [r9], #4
 800b7a2:	f8dc a000 	ldr.w	sl, [ip]
 800b7a6:	b2a3      	uxth	r3, r4
 800b7a8:	fa1f fa8a 	uxth.w	sl, sl
 800b7ac:	fb0b a303 	mla	r3, fp, r3, sl
 800b7b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b7b4:	f8dc 4000 	ldr.w	r4, [ip]
 800b7b8:	4443      	add	r3, r8
 800b7ba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b7be:	fb0b 840a 	mla	r4, fp, sl, r8
 800b7c2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b7c6:	46e2      	mov	sl, ip
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b7ce:	454f      	cmp	r7, r9
 800b7d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b7d4:	f84a 3b04 	str.w	r3, [sl], #4
 800b7d8:	d82b      	bhi.n	800b832 <__multiply+0x120>
 800b7da:	f8cc 8004 	str.w	r8, [ip, #4]
 800b7de:	9b01      	ldr	r3, [sp, #4]
 800b7e0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b7e4:	3204      	adds	r2, #4
 800b7e6:	f1ba 0f00 	cmp.w	sl, #0
 800b7ea:	d020      	beq.n	800b82e <__multiply+0x11c>
 800b7ec:	682b      	ldr	r3, [r5, #0]
 800b7ee:	4689      	mov	r9, r1
 800b7f0:	46a8      	mov	r8, r5
 800b7f2:	f04f 0b00 	mov.w	fp, #0
 800b7f6:	f8b9 c000 	ldrh.w	ip, [r9]
 800b7fa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b7fe:	fb0a 440c 	mla	r4, sl, ip, r4
 800b802:	445c      	add	r4, fp
 800b804:	46c4      	mov	ip, r8
 800b806:	b29b      	uxth	r3, r3
 800b808:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b80c:	f84c 3b04 	str.w	r3, [ip], #4
 800b810:	f859 3b04 	ldr.w	r3, [r9], #4
 800b814:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b818:	0c1b      	lsrs	r3, r3, #16
 800b81a:	fb0a b303 	mla	r3, sl, r3, fp
 800b81e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b822:	454f      	cmp	r7, r9
 800b824:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b828:	d805      	bhi.n	800b836 <__multiply+0x124>
 800b82a:	f8c8 3004 	str.w	r3, [r8, #4]
 800b82e:	3504      	adds	r5, #4
 800b830:	e79b      	b.n	800b76a <__multiply+0x58>
 800b832:	46d4      	mov	ip, sl
 800b834:	e7b3      	b.n	800b79e <__multiply+0x8c>
 800b836:	46e0      	mov	r8, ip
 800b838:	e7dd      	b.n	800b7f6 <__multiply+0xe4>
 800b83a:	3e01      	subs	r6, #1
 800b83c:	e799      	b.n	800b772 <__multiply+0x60>
	...

0800b840 <__pow5mult>:
 800b840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b844:	4615      	mov	r5, r2
 800b846:	f012 0203 	ands.w	r2, r2, #3
 800b84a:	4606      	mov	r6, r0
 800b84c:	460f      	mov	r7, r1
 800b84e:	d007      	beq.n	800b860 <__pow5mult+0x20>
 800b850:	3a01      	subs	r2, #1
 800b852:	4c21      	ldr	r4, [pc, #132]	; (800b8d8 <__pow5mult+0x98>)
 800b854:	2300      	movs	r3, #0
 800b856:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b85a:	f7ff fec8 	bl	800b5ee <__multadd>
 800b85e:	4607      	mov	r7, r0
 800b860:	10ad      	asrs	r5, r5, #2
 800b862:	d035      	beq.n	800b8d0 <__pow5mult+0x90>
 800b864:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b866:	b93c      	cbnz	r4, 800b878 <__pow5mult+0x38>
 800b868:	2010      	movs	r0, #16
 800b86a:	f7ff fe6d 	bl	800b548 <malloc>
 800b86e:	6270      	str	r0, [r6, #36]	; 0x24
 800b870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b874:	6004      	str	r4, [r0, #0]
 800b876:	60c4      	str	r4, [r0, #12]
 800b878:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b87c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b880:	b94c      	cbnz	r4, 800b896 <__pow5mult+0x56>
 800b882:	f240 2171 	movw	r1, #625	; 0x271
 800b886:	4630      	mov	r0, r6
 800b888:	f7ff ff3a 	bl	800b700 <__i2b>
 800b88c:	2300      	movs	r3, #0
 800b88e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b892:	4604      	mov	r4, r0
 800b894:	6003      	str	r3, [r0, #0]
 800b896:	f04f 0800 	mov.w	r8, #0
 800b89a:	07eb      	lsls	r3, r5, #31
 800b89c:	d50a      	bpl.n	800b8b4 <__pow5mult+0x74>
 800b89e:	4639      	mov	r1, r7
 800b8a0:	4622      	mov	r2, r4
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	f7ff ff35 	bl	800b712 <__multiply>
 800b8a8:	4639      	mov	r1, r7
 800b8aa:	4681      	mov	r9, r0
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	f7ff fe87 	bl	800b5c0 <_Bfree>
 800b8b2:	464f      	mov	r7, r9
 800b8b4:	106d      	asrs	r5, r5, #1
 800b8b6:	d00b      	beq.n	800b8d0 <__pow5mult+0x90>
 800b8b8:	6820      	ldr	r0, [r4, #0]
 800b8ba:	b938      	cbnz	r0, 800b8cc <__pow5mult+0x8c>
 800b8bc:	4622      	mov	r2, r4
 800b8be:	4621      	mov	r1, r4
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	f7ff ff26 	bl	800b712 <__multiply>
 800b8c6:	6020      	str	r0, [r4, #0]
 800b8c8:	f8c0 8000 	str.w	r8, [r0]
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	e7e4      	b.n	800b89a <__pow5mult+0x5a>
 800b8d0:	4638      	mov	r0, r7
 800b8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8d6:	bf00      	nop
 800b8d8:	0800c478 	.word	0x0800c478

0800b8dc <__lshift>:
 800b8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e0:	460c      	mov	r4, r1
 800b8e2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8e6:	6923      	ldr	r3, [r4, #16]
 800b8e8:	6849      	ldr	r1, [r1, #4]
 800b8ea:	eb0a 0903 	add.w	r9, sl, r3
 800b8ee:	68a3      	ldr	r3, [r4, #8]
 800b8f0:	4607      	mov	r7, r0
 800b8f2:	4616      	mov	r6, r2
 800b8f4:	f109 0501 	add.w	r5, r9, #1
 800b8f8:	42ab      	cmp	r3, r5
 800b8fa:	db32      	blt.n	800b962 <__lshift+0x86>
 800b8fc:	4638      	mov	r0, r7
 800b8fe:	f7ff fe2b 	bl	800b558 <_Balloc>
 800b902:	2300      	movs	r3, #0
 800b904:	4680      	mov	r8, r0
 800b906:	f100 0114 	add.w	r1, r0, #20
 800b90a:	461a      	mov	r2, r3
 800b90c:	4553      	cmp	r3, sl
 800b90e:	db2b      	blt.n	800b968 <__lshift+0x8c>
 800b910:	6920      	ldr	r0, [r4, #16]
 800b912:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b916:	f104 0314 	add.w	r3, r4, #20
 800b91a:	f016 021f 	ands.w	r2, r6, #31
 800b91e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b922:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b926:	d025      	beq.n	800b974 <__lshift+0x98>
 800b928:	f1c2 0e20 	rsb	lr, r2, #32
 800b92c:	2000      	movs	r0, #0
 800b92e:	681e      	ldr	r6, [r3, #0]
 800b930:	468a      	mov	sl, r1
 800b932:	4096      	lsls	r6, r2
 800b934:	4330      	orrs	r0, r6
 800b936:	f84a 0b04 	str.w	r0, [sl], #4
 800b93a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b93e:	459c      	cmp	ip, r3
 800b940:	fa20 f00e 	lsr.w	r0, r0, lr
 800b944:	d814      	bhi.n	800b970 <__lshift+0x94>
 800b946:	6048      	str	r0, [r1, #4]
 800b948:	b108      	cbz	r0, 800b94e <__lshift+0x72>
 800b94a:	f109 0502 	add.w	r5, r9, #2
 800b94e:	3d01      	subs	r5, #1
 800b950:	4638      	mov	r0, r7
 800b952:	f8c8 5010 	str.w	r5, [r8, #16]
 800b956:	4621      	mov	r1, r4
 800b958:	f7ff fe32 	bl	800b5c0 <_Bfree>
 800b95c:	4640      	mov	r0, r8
 800b95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b962:	3101      	adds	r1, #1
 800b964:	005b      	lsls	r3, r3, #1
 800b966:	e7c7      	b.n	800b8f8 <__lshift+0x1c>
 800b968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b96c:	3301      	adds	r3, #1
 800b96e:	e7cd      	b.n	800b90c <__lshift+0x30>
 800b970:	4651      	mov	r1, sl
 800b972:	e7dc      	b.n	800b92e <__lshift+0x52>
 800b974:	3904      	subs	r1, #4
 800b976:	f853 2b04 	ldr.w	r2, [r3], #4
 800b97a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b97e:	459c      	cmp	ip, r3
 800b980:	d8f9      	bhi.n	800b976 <__lshift+0x9a>
 800b982:	e7e4      	b.n	800b94e <__lshift+0x72>

0800b984 <__mcmp>:
 800b984:	6903      	ldr	r3, [r0, #16]
 800b986:	690a      	ldr	r2, [r1, #16]
 800b988:	1a9b      	subs	r3, r3, r2
 800b98a:	b530      	push	{r4, r5, lr}
 800b98c:	d10c      	bne.n	800b9a8 <__mcmp+0x24>
 800b98e:	0092      	lsls	r2, r2, #2
 800b990:	3014      	adds	r0, #20
 800b992:	3114      	adds	r1, #20
 800b994:	1884      	adds	r4, r0, r2
 800b996:	4411      	add	r1, r2
 800b998:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b99c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b9a0:	4295      	cmp	r5, r2
 800b9a2:	d003      	beq.n	800b9ac <__mcmp+0x28>
 800b9a4:	d305      	bcc.n	800b9b2 <__mcmp+0x2e>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	bd30      	pop	{r4, r5, pc}
 800b9ac:	42a0      	cmp	r0, r4
 800b9ae:	d3f3      	bcc.n	800b998 <__mcmp+0x14>
 800b9b0:	e7fa      	b.n	800b9a8 <__mcmp+0x24>
 800b9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b6:	e7f7      	b.n	800b9a8 <__mcmp+0x24>

0800b9b8 <__mdiff>:
 800b9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9bc:	460d      	mov	r5, r1
 800b9be:	4607      	mov	r7, r0
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	4628      	mov	r0, r5
 800b9c4:	4614      	mov	r4, r2
 800b9c6:	f7ff ffdd 	bl	800b984 <__mcmp>
 800b9ca:	1e06      	subs	r6, r0, #0
 800b9cc:	d108      	bne.n	800b9e0 <__mdiff+0x28>
 800b9ce:	4631      	mov	r1, r6
 800b9d0:	4638      	mov	r0, r7
 800b9d2:	f7ff fdc1 	bl	800b558 <_Balloc>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9e0:	bfa4      	itt	ge
 800b9e2:	4623      	movge	r3, r4
 800b9e4:	462c      	movge	r4, r5
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	6861      	ldr	r1, [r4, #4]
 800b9ea:	bfa6      	itte	ge
 800b9ec:	461d      	movge	r5, r3
 800b9ee:	2600      	movge	r6, #0
 800b9f0:	2601      	movlt	r6, #1
 800b9f2:	f7ff fdb1 	bl	800b558 <_Balloc>
 800b9f6:	692b      	ldr	r3, [r5, #16]
 800b9f8:	60c6      	str	r6, [r0, #12]
 800b9fa:	6926      	ldr	r6, [r4, #16]
 800b9fc:	f105 0914 	add.w	r9, r5, #20
 800ba00:	f104 0214 	add.w	r2, r4, #20
 800ba04:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ba08:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ba0c:	f100 0514 	add.w	r5, r0, #20
 800ba10:	f04f 0e00 	mov.w	lr, #0
 800ba14:	f852 ab04 	ldr.w	sl, [r2], #4
 800ba18:	f859 4b04 	ldr.w	r4, [r9], #4
 800ba1c:	fa1e f18a 	uxtah	r1, lr, sl
 800ba20:	b2a3      	uxth	r3, r4
 800ba22:	1ac9      	subs	r1, r1, r3
 800ba24:	0c23      	lsrs	r3, r4, #16
 800ba26:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ba2a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ba2e:	b289      	uxth	r1, r1
 800ba30:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ba34:	45c8      	cmp	r8, r9
 800ba36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ba3a:	4694      	mov	ip, r2
 800ba3c:	f845 3b04 	str.w	r3, [r5], #4
 800ba40:	d8e8      	bhi.n	800ba14 <__mdiff+0x5c>
 800ba42:	45bc      	cmp	ip, r7
 800ba44:	d304      	bcc.n	800ba50 <__mdiff+0x98>
 800ba46:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ba4a:	b183      	cbz	r3, 800ba6e <__mdiff+0xb6>
 800ba4c:	6106      	str	r6, [r0, #16]
 800ba4e:	e7c5      	b.n	800b9dc <__mdiff+0x24>
 800ba50:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ba54:	fa1e f381 	uxtah	r3, lr, r1
 800ba58:	141a      	asrs	r2, r3, #16
 800ba5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba64:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ba68:	f845 3b04 	str.w	r3, [r5], #4
 800ba6c:	e7e9      	b.n	800ba42 <__mdiff+0x8a>
 800ba6e:	3e01      	subs	r6, #1
 800ba70:	e7e9      	b.n	800ba46 <__mdiff+0x8e>

0800ba72 <__d2b>:
 800ba72:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba76:	460e      	mov	r6, r1
 800ba78:	2101      	movs	r1, #1
 800ba7a:	ec59 8b10 	vmov	r8, r9, d0
 800ba7e:	4615      	mov	r5, r2
 800ba80:	f7ff fd6a 	bl	800b558 <_Balloc>
 800ba84:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ba88:	4607      	mov	r7, r0
 800ba8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba8e:	bb34      	cbnz	r4, 800bade <__d2b+0x6c>
 800ba90:	9301      	str	r3, [sp, #4]
 800ba92:	f1b8 0300 	subs.w	r3, r8, #0
 800ba96:	d027      	beq.n	800bae8 <__d2b+0x76>
 800ba98:	a802      	add	r0, sp, #8
 800ba9a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ba9e:	f7ff fe00 	bl	800b6a2 <__lo0bits>
 800baa2:	9900      	ldr	r1, [sp, #0]
 800baa4:	b1f0      	cbz	r0, 800bae4 <__d2b+0x72>
 800baa6:	9a01      	ldr	r2, [sp, #4]
 800baa8:	f1c0 0320 	rsb	r3, r0, #32
 800baac:	fa02 f303 	lsl.w	r3, r2, r3
 800bab0:	430b      	orrs	r3, r1
 800bab2:	40c2      	lsrs	r2, r0
 800bab4:	617b      	str	r3, [r7, #20]
 800bab6:	9201      	str	r2, [sp, #4]
 800bab8:	9b01      	ldr	r3, [sp, #4]
 800baba:	61bb      	str	r3, [r7, #24]
 800babc:	2b00      	cmp	r3, #0
 800babe:	bf14      	ite	ne
 800bac0:	2102      	movne	r1, #2
 800bac2:	2101      	moveq	r1, #1
 800bac4:	6139      	str	r1, [r7, #16]
 800bac6:	b1c4      	cbz	r4, 800bafa <__d2b+0x88>
 800bac8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bacc:	4404      	add	r4, r0
 800bace:	6034      	str	r4, [r6, #0]
 800bad0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bad4:	6028      	str	r0, [r5, #0]
 800bad6:	4638      	mov	r0, r7
 800bad8:	b003      	add	sp, #12
 800bada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bae2:	e7d5      	b.n	800ba90 <__d2b+0x1e>
 800bae4:	6179      	str	r1, [r7, #20]
 800bae6:	e7e7      	b.n	800bab8 <__d2b+0x46>
 800bae8:	a801      	add	r0, sp, #4
 800baea:	f7ff fdda 	bl	800b6a2 <__lo0bits>
 800baee:	9b01      	ldr	r3, [sp, #4]
 800baf0:	617b      	str	r3, [r7, #20]
 800baf2:	2101      	movs	r1, #1
 800baf4:	6139      	str	r1, [r7, #16]
 800baf6:	3020      	adds	r0, #32
 800baf8:	e7e5      	b.n	800bac6 <__d2b+0x54>
 800bafa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bafe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb02:	6030      	str	r0, [r6, #0]
 800bb04:	6918      	ldr	r0, [r3, #16]
 800bb06:	f7ff fdad 	bl	800b664 <__hi0bits>
 800bb0a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bb0e:	e7e1      	b.n	800bad4 <__d2b+0x62>

0800bb10 <_calloc_r>:
 800bb10:	b538      	push	{r3, r4, r5, lr}
 800bb12:	fb02 f401 	mul.w	r4, r2, r1
 800bb16:	4621      	mov	r1, r4
 800bb18:	f000 f856 	bl	800bbc8 <_malloc_r>
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	b118      	cbz	r0, 800bb28 <_calloc_r+0x18>
 800bb20:	4622      	mov	r2, r4
 800bb22:	2100      	movs	r1, #0
 800bb24:	f7fd ff15 	bl	8009952 <memset>
 800bb28:	4628      	mov	r0, r5
 800bb2a:	bd38      	pop	{r3, r4, r5, pc}

0800bb2c <_free_r>:
 800bb2c:	b538      	push	{r3, r4, r5, lr}
 800bb2e:	4605      	mov	r5, r0
 800bb30:	2900      	cmp	r1, #0
 800bb32:	d045      	beq.n	800bbc0 <_free_r+0x94>
 800bb34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb38:	1f0c      	subs	r4, r1, #4
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	bfb8      	it	lt
 800bb3e:	18e4      	addlt	r4, r4, r3
 800bb40:	f000 face 	bl	800c0e0 <__malloc_lock>
 800bb44:	4a1f      	ldr	r2, [pc, #124]	; (800bbc4 <_free_r+0x98>)
 800bb46:	6813      	ldr	r3, [r2, #0]
 800bb48:	4610      	mov	r0, r2
 800bb4a:	b933      	cbnz	r3, 800bb5a <_free_r+0x2e>
 800bb4c:	6063      	str	r3, [r4, #4]
 800bb4e:	6014      	str	r4, [r2, #0]
 800bb50:	4628      	mov	r0, r5
 800bb52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb56:	f000 bac4 	b.w	800c0e2 <__malloc_unlock>
 800bb5a:	42a3      	cmp	r3, r4
 800bb5c:	d90c      	bls.n	800bb78 <_free_r+0x4c>
 800bb5e:	6821      	ldr	r1, [r4, #0]
 800bb60:	1862      	adds	r2, r4, r1
 800bb62:	4293      	cmp	r3, r2
 800bb64:	bf04      	itt	eq
 800bb66:	681a      	ldreq	r2, [r3, #0]
 800bb68:	685b      	ldreq	r3, [r3, #4]
 800bb6a:	6063      	str	r3, [r4, #4]
 800bb6c:	bf04      	itt	eq
 800bb6e:	1852      	addeq	r2, r2, r1
 800bb70:	6022      	streq	r2, [r4, #0]
 800bb72:	6004      	str	r4, [r0, #0]
 800bb74:	e7ec      	b.n	800bb50 <_free_r+0x24>
 800bb76:	4613      	mov	r3, r2
 800bb78:	685a      	ldr	r2, [r3, #4]
 800bb7a:	b10a      	cbz	r2, 800bb80 <_free_r+0x54>
 800bb7c:	42a2      	cmp	r2, r4
 800bb7e:	d9fa      	bls.n	800bb76 <_free_r+0x4a>
 800bb80:	6819      	ldr	r1, [r3, #0]
 800bb82:	1858      	adds	r0, r3, r1
 800bb84:	42a0      	cmp	r0, r4
 800bb86:	d10b      	bne.n	800bba0 <_free_r+0x74>
 800bb88:	6820      	ldr	r0, [r4, #0]
 800bb8a:	4401      	add	r1, r0
 800bb8c:	1858      	adds	r0, r3, r1
 800bb8e:	4282      	cmp	r2, r0
 800bb90:	6019      	str	r1, [r3, #0]
 800bb92:	d1dd      	bne.n	800bb50 <_free_r+0x24>
 800bb94:	6810      	ldr	r0, [r2, #0]
 800bb96:	6852      	ldr	r2, [r2, #4]
 800bb98:	605a      	str	r2, [r3, #4]
 800bb9a:	4401      	add	r1, r0
 800bb9c:	6019      	str	r1, [r3, #0]
 800bb9e:	e7d7      	b.n	800bb50 <_free_r+0x24>
 800bba0:	d902      	bls.n	800bba8 <_free_r+0x7c>
 800bba2:	230c      	movs	r3, #12
 800bba4:	602b      	str	r3, [r5, #0]
 800bba6:	e7d3      	b.n	800bb50 <_free_r+0x24>
 800bba8:	6820      	ldr	r0, [r4, #0]
 800bbaa:	1821      	adds	r1, r4, r0
 800bbac:	428a      	cmp	r2, r1
 800bbae:	bf04      	itt	eq
 800bbb0:	6811      	ldreq	r1, [r2, #0]
 800bbb2:	6852      	ldreq	r2, [r2, #4]
 800bbb4:	6062      	str	r2, [r4, #4]
 800bbb6:	bf04      	itt	eq
 800bbb8:	1809      	addeq	r1, r1, r0
 800bbba:	6021      	streq	r1, [r4, #0]
 800bbbc:	605c      	str	r4, [r3, #4]
 800bbbe:	e7c7      	b.n	800bb50 <_free_r+0x24>
 800bbc0:	bd38      	pop	{r3, r4, r5, pc}
 800bbc2:	bf00      	nop
 800bbc4:	20000238 	.word	0x20000238

0800bbc8 <_malloc_r>:
 800bbc8:	b570      	push	{r4, r5, r6, lr}
 800bbca:	1ccd      	adds	r5, r1, #3
 800bbcc:	f025 0503 	bic.w	r5, r5, #3
 800bbd0:	3508      	adds	r5, #8
 800bbd2:	2d0c      	cmp	r5, #12
 800bbd4:	bf38      	it	cc
 800bbd6:	250c      	movcc	r5, #12
 800bbd8:	2d00      	cmp	r5, #0
 800bbda:	4606      	mov	r6, r0
 800bbdc:	db01      	blt.n	800bbe2 <_malloc_r+0x1a>
 800bbde:	42a9      	cmp	r1, r5
 800bbe0:	d903      	bls.n	800bbea <_malloc_r+0x22>
 800bbe2:	230c      	movs	r3, #12
 800bbe4:	6033      	str	r3, [r6, #0]
 800bbe6:	2000      	movs	r0, #0
 800bbe8:	bd70      	pop	{r4, r5, r6, pc}
 800bbea:	f000 fa79 	bl	800c0e0 <__malloc_lock>
 800bbee:	4a21      	ldr	r2, [pc, #132]	; (800bc74 <_malloc_r+0xac>)
 800bbf0:	6814      	ldr	r4, [r2, #0]
 800bbf2:	4621      	mov	r1, r4
 800bbf4:	b991      	cbnz	r1, 800bc1c <_malloc_r+0x54>
 800bbf6:	4c20      	ldr	r4, [pc, #128]	; (800bc78 <_malloc_r+0xb0>)
 800bbf8:	6823      	ldr	r3, [r4, #0]
 800bbfa:	b91b      	cbnz	r3, 800bc04 <_malloc_r+0x3c>
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	f000 f9b3 	bl	800bf68 <_sbrk_r>
 800bc02:	6020      	str	r0, [r4, #0]
 800bc04:	4629      	mov	r1, r5
 800bc06:	4630      	mov	r0, r6
 800bc08:	f000 f9ae 	bl	800bf68 <_sbrk_r>
 800bc0c:	1c43      	adds	r3, r0, #1
 800bc0e:	d124      	bne.n	800bc5a <_malloc_r+0x92>
 800bc10:	230c      	movs	r3, #12
 800bc12:	6033      	str	r3, [r6, #0]
 800bc14:	4630      	mov	r0, r6
 800bc16:	f000 fa64 	bl	800c0e2 <__malloc_unlock>
 800bc1a:	e7e4      	b.n	800bbe6 <_malloc_r+0x1e>
 800bc1c:	680b      	ldr	r3, [r1, #0]
 800bc1e:	1b5b      	subs	r3, r3, r5
 800bc20:	d418      	bmi.n	800bc54 <_malloc_r+0x8c>
 800bc22:	2b0b      	cmp	r3, #11
 800bc24:	d90f      	bls.n	800bc46 <_malloc_r+0x7e>
 800bc26:	600b      	str	r3, [r1, #0]
 800bc28:	50cd      	str	r5, [r1, r3]
 800bc2a:	18cc      	adds	r4, r1, r3
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	f000 fa58 	bl	800c0e2 <__malloc_unlock>
 800bc32:	f104 000b 	add.w	r0, r4, #11
 800bc36:	1d23      	adds	r3, r4, #4
 800bc38:	f020 0007 	bic.w	r0, r0, #7
 800bc3c:	1ac3      	subs	r3, r0, r3
 800bc3e:	d0d3      	beq.n	800bbe8 <_malloc_r+0x20>
 800bc40:	425a      	negs	r2, r3
 800bc42:	50e2      	str	r2, [r4, r3]
 800bc44:	e7d0      	b.n	800bbe8 <_malloc_r+0x20>
 800bc46:	428c      	cmp	r4, r1
 800bc48:	684b      	ldr	r3, [r1, #4]
 800bc4a:	bf16      	itet	ne
 800bc4c:	6063      	strne	r3, [r4, #4]
 800bc4e:	6013      	streq	r3, [r2, #0]
 800bc50:	460c      	movne	r4, r1
 800bc52:	e7eb      	b.n	800bc2c <_malloc_r+0x64>
 800bc54:	460c      	mov	r4, r1
 800bc56:	6849      	ldr	r1, [r1, #4]
 800bc58:	e7cc      	b.n	800bbf4 <_malloc_r+0x2c>
 800bc5a:	1cc4      	adds	r4, r0, #3
 800bc5c:	f024 0403 	bic.w	r4, r4, #3
 800bc60:	42a0      	cmp	r0, r4
 800bc62:	d005      	beq.n	800bc70 <_malloc_r+0xa8>
 800bc64:	1a21      	subs	r1, r4, r0
 800bc66:	4630      	mov	r0, r6
 800bc68:	f000 f97e 	bl	800bf68 <_sbrk_r>
 800bc6c:	3001      	adds	r0, #1
 800bc6e:	d0cf      	beq.n	800bc10 <_malloc_r+0x48>
 800bc70:	6025      	str	r5, [r4, #0]
 800bc72:	e7db      	b.n	800bc2c <_malloc_r+0x64>
 800bc74:	20000238 	.word	0x20000238
 800bc78:	2000023c 	.word	0x2000023c

0800bc7c <__sfputc_r>:
 800bc7c:	6893      	ldr	r3, [r2, #8]
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	b410      	push	{r4}
 800bc84:	6093      	str	r3, [r2, #8]
 800bc86:	da08      	bge.n	800bc9a <__sfputc_r+0x1e>
 800bc88:	6994      	ldr	r4, [r2, #24]
 800bc8a:	42a3      	cmp	r3, r4
 800bc8c:	db01      	blt.n	800bc92 <__sfputc_r+0x16>
 800bc8e:	290a      	cmp	r1, #10
 800bc90:	d103      	bne.n	800bc9a <__sfputc_r+0x1e>
 800bc92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc96:	f7fe bb67 	b.w	800a368 <__swbuf_r>
 800bc9a:	6813      	ldr	r3, [r2, #0]
 800bc9c:	1c58      	adds	r0, r3, #1
 800bc9e:	6010      	str	r0, [r2, #0]
 800bca0:	7019      	strb	r1, [r3, #0]
 800bca2:	4608      	mov	r0, r1
 800bca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <__sfputs_r>:
 800bcaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcac:	4606      	mov	r6, r0
 800bcae:	460f      	mov	r7, r1
 800bcb0:	4614      	mov	r4, r2
 800bcb2:	18d5      	adds	r5, r2, r3
 800bcb4:	42ac      	cmp	r4, r5
 800bcb6:	d101      	bne.n	800bcbc <__sfputs_r+0x12>
 800bcb8:	2000      	movs	r0, #0
 800bcba:	e007      	b.n	800bccc <__sfputs_r+0x22>
 800bcbc:	463a      	mov	r2, r7
 800bcbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f7ff ffda 	bl	800bc7c <__sfputc_r>
 800bcc8:	1c43      	adds	r3, r0, #1
 800bcca:	d1f3      	bne.n	800bcb4 <__sfputs_r+0xa>
 800bccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bcd0 <_vfiprintf_r>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	460c      	mov	r4, r1
 800bcd6:	b09d      	sub	sp, #116	; 0x74
 800bcd8:	4617      	mov	r7, r2
 800bcda:	461d      	mov	r5, r3
 800bcdc:	4606      	mov	r6, r0
 800bcde:	b118      	cbz	r0, 800bce8 <_vfiprintf_r+0x18>
 800bce0:	6983      	ldr	r3, [r0, #24]
 800bce2:	b90b      	cbnz	r3, 800bce8 <_vfiprintf_r+0x18>
 800bce4:	f7ff fb34 	bl	800b350 <__sinit>
 800bce8:	4b7c      	ldr	r3, [pc, #496]	; (800bedc <_vfiprintf_r+0x20c>)
 800bcea:	429c      	cmp	r4, r3
 800bcec:	d158      	bne.n	800bda0 <_vfiprintf_r+0xd0>
 800bcee:	6874      	ldr	r4, [r6, #4]
 800bcf0:	89a3      	ldrh	r3, [r4, #12]
 800bcf2:	0718      	lsls	r0, r3, #28
 800bcf4:	d55e      	bpl.n	800bdb4 <_vfiprintf_r+0xe4>
 800bcf6:	6923      	ldr	r3, [r4, #16]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d05b      	beq.n	800bdb4 <_vfiprintf_r+0xe4>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	9309      	str	r3, [sp, #36]	; 0x24
 800bd00:	2320      	movs	r3, #32
 800bd02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd06:	2330      	movs	r3, #48	; 0x30
 800bd08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd0c:	9503      	str	r5, [sp, #12]
 800bd0e:	f04f 0b01 	mov.w	fp, #1
 800bd12:	46b8      	mov	r8, r7
 800bd14:	4645      	mov	r5, r8
 800bd16:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bd1a:	b10b      	cbz	r3, 800bd20 <_vfiprintf_r+0x50>
 800bd1c:	2b25      	cmp	r3, #37	; 0x25
 800bd1e:	d154      	bne.n	800bdca <_vfiprintf_r+0xfa>
 800bd20:	ebb8 0a07 	subs.w	sl, r8, r7
 800bd24:	d00b      	beq.n	800bd3e <_vfiprintf_r+0x6e>
 800bd26:	4653      	mov	r3, sl
 800bd28:	463a      	mov	r2, r7
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	f7ff ffbc 	bl	800bcaa <__sfputs_r>
 800bd32:	3001      	adds	r0, #1
 800bd34:	f000 80c2 	beq.w	800bebc <_vfiprintf_r+0x1ec>
 800bd38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd3a:	4453      	add	r3, sl
 800bd3c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd3e:	f898 3000 	ldrb.w	r3, [r8]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	f000 80ba 	beq.w	800bebc <_vfiprintf_r+0x1ec>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd52:	9304      	str	r3, [sp, #16]
 800bd54:	9307      	str	r3, [sp, #28]
 800bd56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd5a:	931a      	str	r3, [sp, #104]	; 0x68
 800bd5c:	46a8      	mov	r8, r5
 800bd5e:	2205      	movs	r2, #5
 800bd60:	f818 1b01 	ldrb.w	r1, [r8], #1
 800bd64:	485e      	ldr	r0, [pc, #376]	; (800bee0 <_vfiprintf_r+0x210>)
 800bd66:	f7f4 fa43 	bl	80001f0 <memchr>
 800bd6a:	9b04      	ldr	r3, [sp, #16]
 800bd6c:	bb78      	cbnz	r0, 800bdce <_vfiprintf_r+0xfe>
 800bd6e:	06d9      	lsls	r1, r3, #27
 800bd70:	bf44      	itt	mi
 800bd72:	2220      	movmi	r2, #32
 800bd74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd78:	071a      	lsls	r2, r3, #28
 800bd7a:	bf44      	itt	mi
 800bd7c:	222b      	movmi	r2, #43	; 0x2b
 800bd7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd82:	782a      	ldrb	r2, [r5, #0]
 800bd84:	2a2a      	cmp	r2, #42	; 0x2a
 800bd86:	d02a      	beq.n	800bdde <_vfiprintf_r+0x10e>
 800bd88:	9a07      	ldr	r2, [sp, #28]
 800bd8a:	46a8      	mov	r8, r5
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	250a      	movs	r5, #10
 800bd90:	4641      	mov	r1, r8
 800bd92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd96:	3b30      	subs	r3, #48	; 0x30
 800bd98:	2b09      	cmp	r3, #9
 800bd9a:	d969      	bls.n	800be70 <_vfiprintf_r+0x1a0>
 800bd9c:	b360      	cbz	r0, 800bdf8 <_vfiprintf_r+0x128>
 800bd9e:	e024      	b.n	800bdea <_vfiprintf_r+0x11a>
 800bda0:	4b50      	ldr	r3, [pc, #320]	; (800bee4 <_vfiprintf_r+0x214>)
 800bda2:	429c      	cmp	r4, r3
 800bda4:	d101      	bne.n	800bdaa <_vfiprintf_r+0xda>
 800bda6:	68b4      	ldr	r4, [r6, #8]
 800bda8:	e7a2      	b.n	800bcf0 <_vfiprintf_r+0x20>
 800bdaa:	4b4f      	ldr	r3, [pc, #316]	; (800bee8 <_vfiprintf_r+0x218>)
 800bdac:	429c      	cmp	r4, r3
 800bdae:	bf08      	it	eq
 800bdb0:	68f4      	ldreq	r4, [r6, #12]
 800bdb2:	e79d      	b.n	800bcf0 <_vfiprintf_r+0x20>
 800bdb4:	4621      	mov	r1, r4
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	f7fe fb28 	bl	800a40c <__swsetup_r>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	d09d      	beq.n	800bcfc <_vfiprintf_r+0x2c>
 800bdc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc4:	b01d      	add	sp, #116	; 0x74
 800bdc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdca:	46a8      	mov	r8, r5
 800bdcc:	e7a2      	b.n	800bd14 <_vfiprintf_r+0x44>
 800bdce:	4a44      	ldr	r2, [pc, #272]	; (800bee0 <_vfiprintf_r+0x210>)
 800bdd0:	1a80      	subs	r0, r0, r2
 800bdd2:	fa0b f000 	lsl.w	r0, fp, r0
 800bdd6:	4318      	orrs	r0, r3
 800bdd8:	9004      	str	r0, [sp, #16]
 800bdda:	4645      	mov	r5, r8
 800bddc:	e7be      	b.n	800bd5c <_vfiprintf_r+0x8c>
 800bdde:	9a03      	ldr	r2, [sp, #12]
 800bde0:	1d11      	adds	r1, r2, #4
 800bde2:	6812      	ldr	r2, [r2, #0]
 800bde4:	9103      	str	r1, [sp, #12]
 800bde6:	2a00      	cmp	r2, #0
 800bde8:	db01      	blt.n	800bdee <_vfiprintf_r+0x11e>
 800bdea:	9207      	str	r2, [sp, #28]
 800bdec:	e004      	b.n	800bdf8 <_vfiprintf_r+0x128>
 800bdee:	4252      	negs	r2, r2
 800bdf0:	f043 0302 	orr.w	r3, r3, #2
 800bdf4:	9207      	str	r2, [sp, #28]
 800bdf6:	9304      	str	r3, [sp, #16]
 800bdf8:	f898 3000 	ldrb.w	r3, [r8]
 800bdfc:	2b2e      	cmp	r3, #46	; 0x2e
 800bdfe:	d10e      	bne.n	800be1e <_vfiprintf_r+0x14e>
 800be00:	f898 3001 	ldrb.w	r3, [r8, #1]
 800be04:	2b2a      	cmp	r3, #42	; 0x2a
 800be06:	d138      	bne.n	800be7a <_vfiprintf_r+0x1aa>
 800be08:	9b03      	ldr	r3, [sp, #12]
 800be0a:	1d1a      	adds	r2, r3, #4
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	9203      	str	r2, [sp, #12]
 800be10:	2b00      	cmp	r3, #0
 800be12:	bfb8      	it	lt
 800be14:	f04f 33ff 	movlt.w	r3, #4294967295
 800be18:	f108 0802 	add.w	r8, r8, #2
 800be1c:	9305      	str	r3, [sp, #20]
 800be1e:	4d33      	ldr	r5, [pc, #204]	; (800beec <_vfiprintf_r+0x21c>)
 800be20:	f898 1000 	ldrb.w	r1, [r8]
 800be24:	2203      	movs	r2, #3
 800be26:	4628      	mov	r0, r5
 800be28:	f7f4 f9e2 	bl	80001f0 <memchr>
 800be2c:	b140      	cbz	r0, 800be40 <_vfiprintf_r+0x170>
 800be2e:	2340      	movs	r3, #64	; 0x40
 800be30:	1b40      	subs	r0, r0, r5
 800be32:	fa03 f000 	lsl.w	r0, r3, r0
 800be36:	9b04      	ldr	r3, [sp, #16]
 800be38:	4303      	orrs	r3, r0
 800be3a:	f108 0801 	add.w	r8, r8, #1
 800be3e:	9304      	str	r3, [sp, #16]
 800be40:	f898 1000 	ldrb.w	r1, [r8]
 800be44:	482a      	ldr	r0, [pc, #168]	; (800bef0 <_vfiprintf_r+0x220>)
 800be46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be4a:	2206      	movs	r2, #6
 800be4c:	f108 0701 	add.w	r7, r8, #1
 800be50:	f7f4 f9ce 	bl	80001f0 <memchr>
 800be54:	2800      	cmp	r0, #0
 800be56:	d037      	beq.n	800bec8 <_vfiprintf_r+0x1f8>
 800be58:	4b26      	ldr	r3, [pc, #152]	; (800bef4 <_vfiprintf_r+0x224>)
 800be5a:	bb1b      	cbnz	r3, 800bea4 <_vfiprintf_r+0x1d4>
 800be5c:	9b03      	ldr	r3, [sp, #12]
 800be5e:	3307      	adds	r3, #7
 800be60:	f023 0307 	bic.w	r3, r3, #7
 800be64:	3308      	adds	r3, #8
 800be66:	9303      	str	r3, [sp, #12]
 800be68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be6a:	444b      	add	r3, r9
 800be6c:	9309      	str	r3, [sp, #36]	; 0x24
 800be6e:	e750      	b.n	800bd12 <_vfiprintf_r+0x42>
 800be70:	fb05 3202 	mla	r2, r5, r2, r3
 800be74:	2001      	movs	r0, #1
 800be76:	4688      	mov	r8, r1
 800be78:	e78a      	b.n	800bd90 <_vfiprintf_r+0xc0>
 800be7a:	2300      	movs	r3, #0
 800be7c:	f108 0801 	add.w	r8, r8, #1
 800be80:	9305      	str	r3, [sp, #20]
 800be82:	4619      	mov	r1, r3
 800be84:	250a      	movs	r5, #10
 800be86:	4640      	mov	r0, r8
 800be88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be8c:	3a30      	subs	r2, #48	; 0x30
 800be8e:	2a09      	cmp	r2, #9
 800be90:	d903      	bls.n	800be9a <_vfiprintf_r+0x1ca>
 800be92:	2b00      	cmp	r3, #0
 800be94:	d0c3      	beq.n	800be1e <_vfiprintf_r+0x14e>
 800be96:	9105      	str	r1, [sp, #20]
 800be98:	e7c1      	b.n	800be1e <_vfiprintf_r+0x14e>
 800be9a:	fb05 2101 	mla	r1, r5, r1, r2
 800be9e:	2301      	movs	r3, #1
 800bea0:	4680      	mov	r8, r0
 800bea2:	e7f0      	b.n	800be86 <_vfiprintf_r+0x1b6>
 800bea4:	ab03      	add	r3, sp, #12
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	4622      	mov	r2, r4
 800beaa:	4b13      	ldr	r3, [pc, #76]	; (800bef8 <_vfiprintf_r+0x228>)
 800beac:	a904      	add	r1, sp, #16
 800beae:	4630      	mov	r0, r6
 800beb0:	f7fd fdec 	bl	8009a8c <_printf_float>
 800beb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800beb8:	4681      	mov	r9, r0
 800beba:	d1d5      	bne.n	800be68 <_vfiprintf_r+0x198>
 800bebc:	89a3      	ldrh	r3, [r4, #12]
 800bebe:	065b      	lsls	r3, r3, #25
 800bec0:	f53f af7e 	bmi.w	800bdc0 <_vfiprintf_r+0xf0>
 800bec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bec6:	e77d      	b.n	800bdc4 <_vfiprintf_r+0xf4>
 800bec8:	ab03      	add	r3, sp, #12
 800beca:	9300      	str	r3, [sp, #0]
 800becc:	4622      	mov	r2, r4
 800bece:	4b0a      	ldr	r3, [pc, #40]	; (800bef8 <_vfiprintf_r+0x228>)
 800bed0:	a904      	add	r1, sp, #16
 800bed2:	4630      	mov	r0, r6
 800bed4:	f7fe f890 	bl	8009ff8 <_printf_i>
 800bed8:	e7ec      	b.n	800beb4 <_vfiprintf_r+0x1e4>
 800beda:	bf00      	nop
 800bedc:	0800c348 	.word	0x0800c348
 800bee0:	0800c484 	.word	0x0800c484
 800bee4:	0800c368 	.word	0x0800c368
 800bee8:	0800c328 	.word	0x0800c328
 800beec:	0800c48a 	.word	0x0800c48a
 800bef0:	0800c48e 	.word	0x0800c48e
 800bef4:	08009a8d 	.word	0x08009a8d
 800bef8:	0800bcab 	.word	0x0800bcab

0800befc <_putc_r>:
 800befc:	b570      	push	{r4, r5, r6, lr}
 800befe:	460d      	mov	r5, r1
 800bf00:	4614      	mov	r4, r2
 800bf02:	4606      	mov	r6, r0
 800bf04:	b118      	cbz	r0, 800bf0e <_putc_r+0x12>
 800bf06:	6983      	ldr	r3, [r0, #24]
 800bf08:	b90b      	cbnz	r3, 800bf0e <_putc_r+0x12>
 800bf0a:	f7ff fa21 	bl	800b350 <__sinit>
 800bf0e:	4b13      	ldr	r3, [pc, #76]	; (800bf5c <_putc_r+0x60>)
 800bf10:	429c      	cmp	r4, r3
 800bf12:	d112      	bne.n	800bf3a <_putc_r+0x3e>
 800bf14:	6874      	ldr	r4, [r6, #4]
 800bf16:	68a3      	ldr	r3, [r4, #8]
 800bf18:	3b01      	subs	r3, #1
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	60a3      	str	r3, [r4, #8]
 800bf1e:	da16      	bge.n	800bf4e <_putc_r+0x52>
 800bf20:	69a2      	ldr	r2, [r4, #24]
 800bf22:	4293      	cmp	r3, r2
 800bf24:	db02      	blt.n	800bf2c <_putc_r+0x30>
 800bf26:	b2eb      	uxtb	r3, r5
 800bf28:	2b0a      	cmp	r3, #10
 800bf2a:	d110      	bne.n	800bf4e <_putc_r+0x52>
 800bf2c:	4622      	mov	r2, r4
 800bf2e:	4629      	mov	r1, r5
 800bf30:	4630      	mov	r0, r6
 800bf32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf36:	f7fe ba17 	b.w	800a368 <__swbuf_r>
 800bf3a:	4b09      	ldr	r3, [pc, #36]	; (800bf60 <_putc_r+0x64>)
 800bf3c:	429c      	cmp	r4, r3
 800bf3e:	d101      	bne.n	800bf44 <_putc_r+0x48>
 800bf40:	68b4      	ldr	r4, [r6, #8]
 800bf42:	e7e8      	b.n	800bf16 <_putc_r+0x1a>
 800bf44:	4b07      	ldr	r3, [pc, #28]	; (800bf64 <_putc_r+0x68>)
 800bf46:	429c      	cmp	r4, r3
 800bf48:	bf08      	it	eq
 800bf4a:	68f4      	ldreq	r4, [r6, #12]
 800bf4c:	e7e3      	b.n	800bf16 <_putc_r+0x1a>
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	1c5a      	adds	r2, r3, #1
 800bf52:	6022      	str	r2, [r4, #0]
 800bf54:	701d      	strb	r5, [r3, #0]
 800bf56:	b2e8      	uxtb	r0, r5
 800bf58:	bd70      	pop	{r4, r5, r6, pc}
 800bf5a:	bf00      	nop
 800bf5c:	0800c348 	.word	0x0800c348
 800bf60:	0800c368 	.word	0x0800c368
 800bf64:	0800c328 	.word	0x0800c328

0800bf68 <_sbrk_r>:
 800bf68:	b538      	push	{r3, r4, r5, lr}
 800bf6a:	4c06      	ldr	r4, [pc, #24]	; (800bf84 <_sbrk_r+0x1c>)
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	4605      	mov	r5, r0
 800bf70:	4608      	mov	r0, r1
 800bf72:	6023      	str	r3, [r4, #0]
 800bf74:	f000 f8fe 	bl	800c174 <_sbrk>
 800bf78:	1c43      	adds	r3, r0, #1
 800bf7a:	d102      	bne.n	800bf82 <_sbrk_r+0x1a>
 800bf7c:	6823      	ldr	r3, [r4, #0]
 800bf7e:	b103      	cbz	r3, 800bf82 <_sbrk_r+0x1a>
 800bf80:	602b      	str	r3, [r5, #0]
 800bf82:	bd38      	pop	{r3, r4, r5, pc}
 800bf84:	20002fb4 	.word	0x20002fb4

0800bf88 <__sread>:
 800bf88:	b510      	push	{r4, lr}
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf90:	f000 f8a8 	bl	800c0e4 <_read_r>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	bfab      	itete	ge
 800bf98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf9a:	89a3      	ldrhlt	r3, [r4, #12]
 800bf9c:	181b      	addge	r3, r3, r0
 800bf9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bfa2:	bfac      	ite	ge
 800bfa4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bfa6:	81a3      	strhlt	r3, [r4, #12]
 800bfa8:	bd10      	pop	{r4, pc}

0800bfaa <__swrite>:
 800bfaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfae:	461f      	mov	r7, r3
 800bfb0:	898b      	ldrh	r3, [r1, #12]
 800bfb2:	05db      	lsls	r3, r3, #23
 800bfb4:	4605      	mov	r5, r0
 800bfb6:	460c      	mov	r4, r1
 800bfb8:	4616      	mov	r6, r2
 800bfba:	d505      	bpl.n	800bfc8 <__swrite+0x1e>
 800bfbc:	2302      	movs	r3, #2
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc4:	f000 f868 	bl	800c098 <_lseek_r>
 800bfc8:	89a3      	ldrh	r3, [r4, #12]
 800bfca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfd2:	81a3      	strh	r3, [r4, #12]
 800bfd4:	4632      	mov	r2, r6
 800bfd6:	463b      	mov	r3, r7
 800bfd8:	4628      	mov	r0, r5
 800bfda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfde:	f000 b817 	b.w	800c010 <_write_r>

0800bfe2 <__sseek>:
 800bfe2:	b510      	push	{r4, lr}
 800bfe4:	460c      	mov	r4, r1
 800bfe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfea:	f000 f855 	bl	800c098 <_lseek_r>
 800bfee:	1c43      	adds	r3, r0, #1
 800bff0:	89a3      	ldrh	r3, [r4, #12]
 800bff2:	bf15      	itete	ne
 800bff4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bffa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bffe:	81a3      	strheq	r3, [r4, #12]
 800c000:	bf18      	it	ne
 800c002:	81a3      	strhne	r3, [r4, #12]
 800c004:	bd10      	pop	{r4, pc}

0800c006 <__sclose>:
 800c006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c00a:	f000 b813 	b.w	800c034 <_close_r>
	...

0800c010 <_write_r>:
 800c010:	b538      	push	{r3, r4, r5, lr}
 800c012:	4c07      	ldr	r4, [pc, #28]	; (800c030 <_write_r+0x20>)
 800c014:	4605      	mov	r5, r0
 800c016:	4608      	mov	r0, r1
 800c018:	4611      	mov	r1, r2
 800c01a:	2200      	movs	r2, #0
 800c01c:	6022      	str	r2, [r4, #0]
 800c01e:	461a      	mov	r2, r3
 800c020:	f7f5 fa16 	bl	8001450 <_write>
 800c024:	1c43      	adds	r3, r0, #1
 800c026:	d102      	bne.n	800c02e <_write_r+0x1e>
 800c028:	6823      	ldr	r3, [r4, #0]
 800c02a:	b103      	cbz	r3, 800c02e <_write_r+0x1e>
 800c02c:	602b      	str	r3, [r5, #0]
 800c02e:	bd38      	pop	{r3, r4, r5, pc}
 800c030:	20002fb4 	.word	0x20002fb4

0800c034 <_close_r>:
 800c034:	b538      	push	{r3, r4, r5, lr}
 800c036:	4c06      	ldr	r4, [pc, #24]	; (800c050 <_close_r+0x1c>)
 800c038:	2300      	movs	r3, #0
 800c03a:	4605      	mov	r5, r0
 800c03c:	4608      	mov	r0, r1
 800c03e:	6023      	str	r3, [r4, #0]
 800c040:	f000 f870 	bl	800c124 <_close>
 800c044:	1c43      	adds	r3, r0, #1
 800c046:	d102      	bne.n	800c04e <_close_r+0x1a>
 800c048:	6823      	ldr	r3, [r4, #0]
 800c04a:	b103      	cbz	r3, 800c04e <_close_r+0x1a>
 800c04c:	602b      	str	r3, [r5, #0]
 800c04e:	bd38      	pop	{r3, r4, r5, pc}
 800c050:	20002fb4 	.word	0x20002fb4

0800c054 <_fstat_r>:
 800c054:	b538      	push	{r3, r4, r5, lr}
 800c056:	4c07      	ldr	r4, [pc, #28]	; (800c074 <_fstat_r+0x20>)
 800c058:	2300      	movs	r3, #0
 800c05a:	4605      	mov	r5, r0
 800c05c:	4608      	mov	r0, r1
 800c05e:	4611      	mov	r1, r2
 800c060:	6023      	str	r3, [r4, #0]
 800c062:	f000 f867 	bl	800c134 <_fstat>
 800c066:	1c43      	adds	r3, r0, #1
 800c068:	d102      	bne.n	800c070 <_fstat_r+0x1c>
 800c06a:	6823      	ldr	r3, [r4, #0]
 800c06c:	b103      	cbz	r3, 800c070 <_fstat_r+0x1c>
 800c06e:	602b      	str	r3, [r5, #0]
 800c070:	bd38      	pop	{r3, r4, r5, pc}
 800c072:	bf00      	nop
 800c074:	20002fb4 	.word	0x20002fb4

0800c078 <_isatty_r>:
 800c078:	b538      	push	{r3, r4, r5, lr}
 800c07a:	4c06      	ldr	r4, [pc, #24]	; (800c094 <_isatty_r+0x1c>)
 800c07c:	2300      	movs	r3, #0
 800c07e:	4605      	mov	r5, r0
 800c080:	4608      	mov	r0, r1
 800c082:	6023      	str	r3, [r4, #0]
 800c084:	f000 f85e 	bl	800c144 <_isatty>
 800c088:	1c43      	adds	r3, r0, #1
 800c08a:	d102      	bne.n	800c092 <_isatty_r+0x1a>
 800c08c:	6823      	ldr	r3, [r4, #0]
 800c08e:	b103      	cbz	r3, 800c092 <_isatty_r+0x1a>
 800c090:	602b      	str	r3, [r5, #0]
 800c092:	bd38      	pop	{r3, r4, r5, pc}
 800c094:	20002fb4 	.word	0x20002fb4

0800c098 <_lseek_r>:
 800c098:	b538      	push	{r3, r4, r5, lr}
 800c09a:	4c07      	ldr	r4, [pc, #28]	; (800c0b8 <_lseek_r+0x20>)
 800c09c:	4605      	mov	r5, r0
 800c09e:	4608      	mov	r0, r1
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	6022      	str	r2, [r4, #0]
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	f000 f854 	bl	800c154 <_lseek>
 800c0ac:	1c43      	adds	r3, r0, #1
 800c0ae:	d102      	bne.n	800c0b6 <_lseek_r+0x1e>
 800c0b0:	6823      	ldr	r3, [r4, #0]
 800c0b2:	b103      	cbz	r3, 800c0b6 <_lseek_r+0x1e>
 800c0b4:	602b      	str	r3, [r5, #0]
 800c0b6:	bd38      	pop	{r3, r4, r5, pc}
 800c0b8:	20002fb4 	.word	0x20002fb4

0800c0bc <__ascii_mbtowc>:
 800c0bc:	b082      	sub	sp, #8
 800c0be:	b901      	cbnz	r1, 800c0c2 <__ascii_mbtowc+0x6>
 800c0c0:	a901      	add	r1, sp, #4
 800c0c2:	b142      	cbz	r2, 800c0d6 <__ascii_mbtowc+0x1a>
 800c0c4:	b14b      	cbz	r3, 800c0da <__ascii_mbtowc+0x1e>
 800c0c6:	7813      	ldrb	r3, [r2, #0]
 800c0c8:	600b      	str	r3, [r1, #0]
 800c0ca:	7812      	ldrb	r2, [r2, #0]
 800c0cc:	1c10      	adds	r0, r2, #0
 800c0ce:	bf18      	it	ne
 800c0d0:	2001      	movne	r0, #1
 800c0d2:	b002      	add	sp, #8
 800c0d4:	4770      	bx	lr
 800c0d6:	4610      	mov	r0, r2
 800c0d8:	e7fb      	b.n	800c0d2 <__ascii_mbtowc+0x16>
 800c0da:	f06f 0001 	mvn.w	r0, #1
 800c0de:	e7f8      	b.n	800c0d2 <__ascii_mbtowc+0x16>

0800c0e0 <__malloc_lock>:
 800c0e0:	4770      	bx	lr

0800c0e2 <__malloc_unlock>:
 800c0e2:	4770      	bx	lr

0800c0e4 <_read_r>:
 800c0e4:	b538      	push	{r3, r4, r5, lr}
 800c0e6:	4c07      	ldr	r4, [pc, #28]	; (800c104 <_read_r+0x20>)
 800c0e8:	4605      	mov	r5, r0
 800c0ea:	4608      	mov	r0, r1
 800c0ec:	4611      	mov	r1, r2
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	6022      	str	r2, [r4, #0]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	f000 f836 	bl	800c164 <_read>
 800c0f8:	1c43      	adds	r3, r0, #1
 800c0fa:	d102      	bne.n	800c102 <_read_r+0x1e>
 800c0fc:	6823      	ldr	r3, [r4, #0]
 800c0fe:	b103      	cbz	r3, 800c102 <_read_r+0x1e>
 800c100:	602b      	str	r3, [r5, #0]
 800c102:	bd38      	pop	{r3, r4, r5, pc}
 800c104:	20002fb4 	.word	0x20002fb4

0800c108 <__ascii_wctomb>:
 800c108:	b149      	cbz	r1, 800c11e <__ascii_wctomb+0x16>
 800c10a:	2aff      	cmp	r2, #255	; 0xff
 800c10c:	bf85      	ittet	hi
 800c10e:	238a      	movhi	r3, #138	; 0x8a
 800c110:	6003      	strhi	r3, [r0, #0]
 800c112:	700a      	strbls	r2, [r1, #0]
 800c114:	f04f 30ff 	movhi.w	r0, #4294967295
 800c118:	bf98      	it	ls
 800c11a:	2001      	movls	r0, #1
 800c11c:	4770      	bx	lr
 800c11e:	4608      	mov	r0, r1
 800c120:	4770      	bx	lr
	...

0800c124 <_close>:
 800c124:	4b02      	ldr	r3, [pc, #8]	; (800c130 <_close+0xc>)
 800c126:	2258      	movs	r2, #88	; 0x58
 800c128:	601a      	str	r2, [r3, #0]
 800c12a:	f04f 30ff 	mov.w	r0, #4294967295
 800c12e:	4770      	bx	lr
 800c130:	20002fb4 	.word	0x20002fb4

0800c134 <_fstat>:
 800c134:	4b02      	ldr	r3, [pc, #8]	; (800c140 <_fstat+0xc>)
 800c136:	2258      	movs	r2, #88	; 0x58
 800c138:	601a      	str	r2, [r3, #0]
 800c13a:	f04f 30ff 	mov.w	r0, #4294967295
 800c13e:	4770      	bx	lr
 800c140:	20002fb4 	.word	0x20002fb4

0800c144 <_isatty>:
 800c144:	4b02      	ldr	r3, [pc, #8]	; (800c150 <_isatty+0xc>)
 800c146:	2258      	movs	r2, #88	; 0x58
 800c148:	601a      	str	r2, [r3, #0]
 800c14a:	2000      	movs	r0, #0
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop
 800c150:	20002fb4 	.word	0x20002fb4

0800c154 <_lseek>:
 800c154:	4b02      	ldr	r3, [pc, #8]	; (800c160 <_lseek+0xc>)
 800c156:	2258      	movs	r2, #88	; 0x58
 800c158:	601a      	str	r2, [r3, #0]
 800c15a:	f04f 30ff 	mov.w	r0, #4294967295
 800c15e:	4770      	bx	lr
 800c160:	20002fb4 	.word	0x20002fb4

0800c164 <_read>:
 800c164:	4b02      	ldr	r3, [pc, #8]	; (800c170 <_read+0xc>)
 800c166:	2258      	movs	r2, #88	; 0x58
 800c168:	601a      	str	r2, [r3, #0]
 800c16a:	f04f 30ff 	mov.w	r0, #4294967295
 800c16e:	4770      	bx	lr
 800c170:	20002fb4 	.word	0x20002fb4

0800c174 <_sbrk>:
 800c174:	4b04      	ldr	r3, [pc, #16]	; (800c188 <_sbrk+0x14>)
 800c176:	6819      	ldr	r1, [r3, #0]
 800c178:	4602      	mov	r2, r0
 800c17a:	b909      	cbnz	r1, 800c180 <_sbrk+0xc>
 800c17c:	4903      	ldr	r1, [pc, #12]	; (800c18c <_sbrk+0x18>)
 800c17e:	6019      	str	r1, [r3, #0]
 800c180:	6818      	ldr	r0, [r3, #0]
 800c182:	4402      	add	r2, r0
 800c184:	601a      	str	r2, [r3, #0]
 800c186:	4770      	bx	lr
 800c188:	20000240 	.word	0x20000240
 800c18c:	20002fb8 	.word	0x20002fb8

0800c190 <_init>:
 800c190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c192:	bf00      	nop
 800c194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c196:	bc08      	pop	{r3}
 800c198:	469e      	mov	lr, r3
 800c19a:	4770      	bx	lr

0800c19c <_fini>:
 800c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19e:	bf00      	nop
 800c1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1a2:	bc08      	pop	{r3}
 800c1a4:	469e      	mov	lr, r3
 800c1a6:	4770      	bx	lr
