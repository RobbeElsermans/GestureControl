
singleGestureControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08015118  08015118  00025118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080152e0  080152e0  000300e4  2**0
                  CONTENTS
  4 .ARM          00000008  080152e0  080152e0  000252e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080152e8  080152e8  000300e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080152e8  080152e8  000252e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080152ec  080152ec  000252ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  080152f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007220  200000e8  080153d4  000300e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007308  080153d4  00037308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00066a44  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d0c  00000000  00000000  00096b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  0009c868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001858  00000000  00000000  0009e2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020944  00000000  00000000  0009fb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002604e  00000000  00000000  000c044c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7c61  00000000  00000000  000e649a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019e0fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076a4  00000000  00000000  0019e150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e8 	.word	0x200000e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015100 	.word	0x08015100

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ec 	.word	0x200000ec
 80001dc:	08015100 	.word	0x08015100

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9b9 	b.w	8000614 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <MX_TOF_Init>:
static void stop_sensor(uint8_t sensor);
static void getResult(uint8_t sensor, RANGING_SENSOR_Result_t * result);
static int getDistance(uint8_t sensor, RANGING_SENSOR_Result_t * result);

void MX_TOF_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L3A2_MultiSensorRanging_Init();
 800061c:	f000 f884 	bl	8000728 <MX_53L3A2_MultiSensorRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b0bc      	sub	sp, #240	; 0xf0
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */
	RANGING_SENSOR_Result_t Result[3];
	int preDis1 = 5000;
 800062a:	f241 3388 	movw	r3, #5000	; 0x1388
 800062e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	int dis1 = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	int threshold = 1000;
 8000638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	int minDistanceObject = 500;
 8000640:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000644:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	bool ObjectPresent = false;
 8000648:	2300      	movs	r3, #0
 800064a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	int timeOutmeasurment = 2000; //2 seconden
 800064e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000652:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  //Enkel de 1ste sensor (Center) opstarten
	  /*	Hier zeggen we welk profiel we willen gebruiken
	   * 	bv.
	   *
	   */
	start_sensor(VL53L3A2_DEV_CENTER);
 8000656:	2001      	movs	r0, #1
 8000658:	f000 f8ca 	bl	80007f0 <start_sensor>

  //MX_53L3A2_MultiSensorRanging_Process();

  /* USER CODE BEGIN TOF_Process_PostTreatment */
	while(1){
		getResult(VL53L3A2_DEV_CENTER, Result);
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	2001      	movs	r0, #1
 8000662:	f000 f92d 	bl	80008c0 <getResult>
		dis1 = (long)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Distance[0];
 8000666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000668:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

		//Bug van 1ste meeting dat deze fout is (Een te hoge waarden)
		if(dis1 >= 17760520)
 800066c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000670:	4a2b      	ldr	r2, [pc, #172]	; (8000720 <MX_TOF_Process+0xfc>)
 8000672:	4293      	cmp	r3, r2
 8000674:	dd0a      	ble.n	800068c <MX_TOF_Process+0x68>
		{
			HAL_Delay(4);
 8000676:	2004      	movs	r0, #4
 8000678:	f011 fa00 	bl	8011a7c <HAL_Delay>
			getResult(VL53L3A2_DEV_CENTER, Result);
 800067c:	463b      	mov	r3, r7
 800067e:	4619      	mov	r1, r3
 8000680:	2001      	movs	r0, #1
 8000682:	f000 f91d 	bl	80008c0 <getResult>
			dis1 = (long)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Distance[0];
 8000686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000688:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

		  /*	Als de waarde zakt t.o.v. de vorige waarden m.b.v. een threshold en het object bevind zich op de minimum afstand.
		   * 	We kijken ook ofdat de Status niet = 12 (12 staat voor dat de sensor iets kan detecteren maar het signaal is te zwak dus te ver weg))
		   *
		   */
		if((preDis1 - dis1) > threshold && (dis1 <= minDistanceObject) && (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Status[0] != 12){
 800068c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000690:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800069a:	429a      	cmp	r2, r3
 800069c:	da13      	bge.n	80006c6 <MX_TOF_Process+0xa2>
 800069e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80006a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80006a6:	429a      	cmp	r2, r3
 80006a8:	dc0d      	bgt.n	80006c6 <MX_TOF_Process+0xa2>
 80006aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b0c      	cmp	r3, #12
 80006b0:	d009      	beq.n	80006c6 <MX_TOF_Process+0xa2>
			  //Persoon naderd en staat dicht genoeg
			  //Start andere sensoren ook op

			//while((preDis1 + dis1) < threshold);
			ObjectPresent = true;
 80006b2:	2301      	movs	r3, #1
 80006b4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			start_sensor(VL53L3A2_DEV_LEFT);
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 f899 	bl	80007f0 <start_sensor>
			start_sensor(VL53L3A2_DEV_RIGHT);
 80006be:	2002      	movs	r0, #2
 80006c0:	f000 f896 	bl	80007f0 <start_sensor>
 80006c4:	e018      	b.n	80006f8 <MX_TOF_Process+0xd4>
			  //Wat dichter komen
			  //Zolang de distance niet voldoet aan minDistanceObject blijven meten.
			  //De meting stoppen na een bepaalde timeout
			HAL_Delay(500);
		}*/
		else if( (preDis1 + dis1) > threshold && ObjectPresent){
 80006c6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80006ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80006ce:	4413      	add	r3, r2
 80006d0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80006d4:	429a      	cmp	r2, r3
 80006d6:	da0f      	bge.n	80006f8 <MX_TOF_Process+0xd4>
 80006d8:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d00b      	beq.n	80006f8 <MX_TOF_Process+0xd4>
			ObjectPresent = false;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			stop_sensor(VL53L3A2_DEV_LEFT);
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 f8c2 	bl	8000870 <stop_sensor>
			stop_sensor(VL53L3A2_DEV_RIGHT);
 80006ec:	2002      	movs	r0, #2
 80006ee:	f000 f8bf 	bl	8000870 <stop_sensor>
			HAL_Delay(10);
 80006f2:	200a      	movs	r0, #10
 80006f4:	f011 f9c2 	bl	8011a7c <HAL_Delay>

		  //Ticks
		  // long x = HAL_GetTick();
		  //printf("Ticks: %ld ", x);

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, ObjectPresent);
 80006f8:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80006fc:	461a      	mov	r2, r3
 80006fe:	2120      	movs	r1, #32
 8000700:	4808      	ldr	r0, [pc, #32]	; (8000724 <MX_TOF_Process+0x100>)
 8000702:	f011 fd45 	bl	8012190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_O_GPIO_Port, L_O_Pin, ObjectPresent);
 8000706:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800070a:	461a      	mov	r2, r3
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_TOF_Process+0x100>)
 8000710:	f011 fd3e 	bl	8012190 <HAL_GPIO_WritePin>

		preDis1 = dis1;
 8000714:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000718:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		getResult(VL53L3A2_DEV_CENTER, Result);
 800071c:	e79e      	b.n	800065c <MX_TOF_Process+0x38>
 800071e:	bf00      	nop
 8000720:	010f0107 	.word	0x010f0107
 8000724:	40020000 	.word	0x40020000

08000728 <MX_53L3A2_MultiSensorRanging_Init>:
	  }
  /* USER CODE END TOF_Process_PostTreatment */
}

static void MX_53L3A2_MultiSensorRanging_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  uint8_t device;
  uint16_t i2c_addr;
  uint32_t id;

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 faa4 	bl	8000c7c <BSP_COM_Init>

  printf("53L3A2 Gesture Control\r\n");
 8000734:	482a      	ldr	r0, [pc, #168]	; (80007e0 <MX_53L3A2_MultiSensorRanging_Init+0xb8>)
 8000736:	f013 fd89 	bl	801424c <puts>

  /* put all the devices in shutdown mode */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 800073a:	2300      	movs	r3, #0
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	e007      	b.n	8000750 <MX_53L3A2_MultiSensorRanging_Init+0x28>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_OFF);
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2101      	movs	r1, #1
 8000744:	4618      	mov	r0, r3
 8000746:	f001 f88b 	bl	8001860 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	3301      	adds	r3, #1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d9f4      	bls.n	8000740 <MX_53L3A2_MultiSensorRanging_Init+0x18>

  /* power on the devices one at a time, initialize them and change their address.
   * once the address is updated, the communication with the devices is checked
   * reading its ID.
   */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8000756:	2300      	movs	r3, #0
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	e039      	b.n	80007d0 <MX_53L3A2_MultiSensorRanging_Init+0xa8>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_ON);
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f001 f87d 	bl	8001860 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    status = VL53L3A2_RANGING_SENSOR_Init(device);
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	4618      	mov	r0, r3
 800076a:	f000 ff65 	bl	8001638 <VL53L3A2_RANGING_SENSOR_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 8000772:	6013      	str	r3, [r2, #0]

    /* 0: not detected, 1: detected */
    ToF_Present[device] = (status != BSP_ERROR_NONE) ? 0 : 1;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	bf0c      	ite	eq
 800077c:	2301      	moveq	r3, #1
 800077e:	2300      	movne	r3, #0
 8000780:	b2da      	uxtb	r2, r3
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4611      	mov	r1, r2
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 8000788:	54d1      	strb	r1, [r2, r3]

    /* skip this device if init not successful */
    if (ToF_Present[device] == 0) continue;
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 800078e:	5cd3      	ldrb	r3, [r2, r3]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d019      	beq.n	80007c8 <MX_53L3A2_MultiSensorRanging_Init+0xa0>

    /* left: 0x54, center: 0x56, right: 0x58 */
    i2c_addr = (RANGING_SENSOR_VL53L3CX_ADDRESS + (device + 1) * 2);
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	3301      	adds	r3, #1
 8000798:	b29b      	uxth	r3, r3
 800079a:	3329      	adds	r3, #41	; 0x29
 800079c:	b29b      	uxth	r3, r3
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	80bb      	strh	r3, [r7, #4]
    VL53L3A2_RANGING_SENSOR_SetAddress(device, i2c_addr);
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	88ba      	ldrh	r2, [r7, #4]
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 f831 	bl	8001810 <VL53L3A2_RANGING_SENSOR_SetAddress>

    /* check the communication with the device reading the ID */
    VL53L3A2_RANGING_SENSOR_ReadID(device, &id);
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	463a      	mov	r2, r7
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 ff65 	bl	8001684 <VL53L3A2_RANGING_SENSOR_ReadID>
    printf("ToF sensor %d - ID: %04lX\r\n", device, (unsigned long)id);
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	683a      	ldr	r2, [r7, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	480a      	ldr	r0, [pc, #40]	; (80007ec <MX_53L3A2_MultiSensorRanging_Init+0xc4>)
 80007c2:	f013 fcbd 	bl	8014140 <iprintf>
 80007c6:	e000      	b.n	80007ca <MX_53L3A2_MultiSensorRanging_Init+0xa2>
    if (ToF_Present[device] == 0) continue;
 80007c8:	bf00      	nop
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	3301      	adds	r3, #1
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d9c2      	bls.n	800075c <MX_53L3A2_MultiSensorRanging_Init+0x34>
  }
}
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	08015130 	.word	0x08015130
 80007e4:	20000104 	.word	0x20000104
 80007e8:	20000108 	.word	0x20000108
 80007ec:	08015148 	.word	0x08015148

080007f0 <start_sensor>:
      (long)Result->ZoneResult[i].Distance[0]);
  }
  printf ("\r\n");
}

static void start_sensor(uint8_t sensor){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
	RANGING_SENSOR_ProfileConfig_t Profile;

	Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 80007fa:	2302      	movs	r3, #2
 80007fc:	60fb      	str	r3, [r7, #12]
	Profile.TimingBudget = 30; /* 16 ms < TimingBudget < 500 ms */
 80007fe:	231e      	movs	r3, #30
 8000800:	613b      	str	r3, [r7, #16]
	Profile.Frequency = 0; /* not necessary in simple ranging */
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
	Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 8000806:	2301      	movs	r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
	Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 800080a:	2301      	movs	r3, #1
 800080c:	61fb      	str	r3, [r7, #28]

	VL53L3A2_RANGING_SENSOR_ConfigProfile(sensor, &Profile);
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	f107 020c 	add.w	r2, r7, #12
 8000814:	4611      	mov	r1, r2
 8000816:	4618      	mov	r0, r3
 8000818:	f000 ff5c 	bl	80016d4 <VL53L3A2_RANGING_SENSOR_ConfigProfile>
	status = VL53L3A2_RANGING_SENSOR_Start(sensor, RS_MODE_BLOCKING_CONTINUOUS);
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2101      	movs	r1, #1
 8000820:	4618      	mov	r0, r3
 8000822:	f000 ffa7 	bl	8001774 <VL53L3A2_RANGING_SENSOR_Start>
 8000826:	4603      	mov	r3, r0
 8000828:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <start_sensor+0x70>)
 800082a:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <start_sensor+0x70>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d008      	beq.n	8000846 <start_sensor+0x56>
    {
    	printf("VL53L3A2_RANGING_SENSOR_Start failed for sensor %s \r\n", TofDevStr[sensor]);
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <start_sensor+0x74>)
 8000838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083c:	4619      	mov	r1, r3
 800083e:	480a      	ldr	r0, [pc, #40]	; (8000868 <start_sensor+0x78>)
 8000840:	f013 fc7e 	bl	8014140 <iprintf>
		while(1);
 8000844:	e7fe      	b.n	8000844 <start_sensor+0x54>
    }
    else
	{
    	printf("sensor %s\t opgestart \r\n", TofDevStr[sensor]);
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <start_sensor+0x74>)
 800084a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800084e:	4619      	mov	r1, r3
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <start_sensor+0x7c>)
 8000852:	f013 fc75 	bl	8014140 <iprintf>
	}
}
 8000856:	bf00      	nop
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000104 	.word	0x20000104
 8000864:	20000000 	.word	0x20000000
 8000868:	08015194 	.word	0x08015194
 800086c:	080151cc 	.word	0x080151cc

08000870 <stop_sensor>:

static void stop_sensor(uint8_t sensor){
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
	status = VL53L3A2_RANGING_SENSOR_Stop(sensor);
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4618      	mov	r0, r3
 800087e:	f000 ffa1 	bl	80017c4 <VL53L3A2_RANGING_SENSOR_Stop>
 8000882:	4603      	mov	r3, r0
 8000884:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <stop_sensor+0x40>)
 8000886:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <stop_sensor+0x40>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d003      	beq.n	8000898 <stop_sensor+0x28>
    {
    	printf("VL53L3A2_RANGING_SENSOR_Stop failed\r\n");
 8000890:	4808      	ldr	r0, [pc, #32]	; (80008b4 <stop_sensor+0x44>)
 8000892:	f013 fcdb 	bl	801424c <puts>
		while(1);
 8000896:	e7fe      	b.n	8000896 <stop_sensor+0x26>
    }
    else
	{
    	printf("sensor %s\t afgezet \r\n", TofDevStr[sensor]);
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <stop_sensor+0x48>)
 800089c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a0:	4619      	mov	r1, r3
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <stop_sensor+0x4c>)
 80008a4:	f013 fc4c 	bl	8014140 <iprintf>
	}
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000104 	.word	0x20000104
 80008b4:	080151e4 	.word	0x080151e4
 80008b8:	20000000 	.word	0x20000000
 80008bc:	0801520c 	.word	0x0801520c

080008c0 <getResult>:

static void getResult(uint8_t sensor, RANGING_SENSOR_Result_t *result){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
	VL53L3A2_RANGING_SENSOR_GetDistance(sensor, &result[sensor]);
 80008cc:	79f8      	ldrb	r0, [r7, #7]
 80008ce:	79fa      	ldrb	r2, [r7, #7]
 80008d0:	4613      	mov	r3, r2
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	4413      	add	r3, r2
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	461a      	mov	r2, r3
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	4619      	mov	r1, r3
 80008e0:	f000 ff20 	bl	8001724 <VL53L3A2_RANGING_SENSOR_GetDistance>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f0:	f011 f852 	bl	8011998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f4:	f000 f80a 	bl	800090c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f8:	f000 f89e 	bl	8000a38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008fc:	f000 f872 	bl	80009e4 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  MX_TOF_Init();
 8000900:	f7ff fe8a 	bl	8000618 <MX_TOF_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_TOF_Process();
 8000904:	f7ff fe8e 	bl	8000624 <MX_TOF_Process>
 8000908:	e7fc      	b.n	8000904 <main+0x18>
	...

0800090c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b094      	sub	sp, #80	; 0x50
 8000910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 0320 	add.w	r3, r7, #32
 8000916:	2230      	movs	r2, #48	; 0x30
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f013 fc08 	bl	8014130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	4b29      	ldr	r3, [pc, #164]	; (80009dc <SystemClock_Config+0xd0>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	4a28      	ldr	r2, [pc, #160]	; (80009dc <SystemClock_Config+0xd0>)
 800093a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093e:	6413      	str	r3, [r2, #64]	; 0x40
 8000940:	4b26      	ldr	r3, [pc, #152]	; (80009dc <SystemClock_Config+0xd0>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <SystemClock_Config+0xd4>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000958:	4a21      	ldr	r2, [pc, #132]	; (80009e0 <SystemClock_Config+0xd4>)
 800095a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800095e:	6013      	str	r3, [r2, #0]
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <SystemClock_Config+0xd4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800096c:	2302      	movs	r3, #2
 800096e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000970:	2301      	movs	r3, #1
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000974:	2310      	movs	r3, #16
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000978:	2302      	movs	r3, #2
 800097a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800097c:	2300      	movs	r3, #0
 800097e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000980:	2310      	movs	r3, #16
 8000982:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000984:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000988:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800098a:	2304      	movs	r3, #4
 800098c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800098e:	2307      	movs	r3, #7
 8000990:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	4618      	mov	r0, r3
 8000998:	f012 fc08 	bl	80131ac <HAL_RCC_OscConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009a2:	f000 f8cb 	bl	8000b3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a6:	230f      	movs	r3, #15
 80009a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009aa:	2302      	movs	r3, #2
 80009ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2102      	movs	r1, #2
 80009c2:	4618      	mov	r0, r3
 80009c4:	f012 fe6a 	bl	801369c <HAL_RCC_ClockConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009ce:	f000 f8b5 	bl	8000b3c <Error_Handler>
  }
}
 80009d2:	bf00      	nop
 80009d4:	3750      	adds	r7, #80	; 0x50
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40007000 	.word	0x40007000

080009e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <MX_USART2_UART_Init+0x50>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	f013 f83a 	bl	8013a94 <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a26:	f000 f889 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200070b0 	.word	0x200070b0
 8000a34:	40004400 	.word	0x40004400

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <MX_GPIO_Init+0xf8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a36      	ldr	r2, [pc, #216]	; (8000b30 <MX_GPIO_Init+0xf8>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <MX_GPIO_Init+0xf8>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <MX_GPIO_Init+0xf8>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a2f      	ldr	r2, [pc, #188]	; (8000b30 <MX_GPIO_Init+0xf8>)
 8000a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <MX_GPIO_Init+0xf8>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <MX_GPIO_Init+0xf8>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a28      	ldr	r2, [pc, #160]	; (8000b30 <MX_GPIO_Init+0xf8>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <MX_GPIO_Init+0xf8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <MX_GPIO_Init+0xf8>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <MX_GPIO_Init+0xf8>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_GPIO_Init+0xf8>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	481c      	ldr	r0, [pc, #112]	; (8000b34 <MX_GPIO_Init+0xfc>)
 8000ac4:	f011 fb64 	bl	8012190 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L_O_GPIO_Port, L_O_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2180      	movs	r1, #128	; 0x80
 8000acc:	4819      	ldr	r0, [pc, #100]	; (8000b34 <MX_GPIO_Init+0xfc>)
 8000ace:	f011 fb5f 	bl	8012190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ad8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4813      	ldr	r0, [pc, #76]	; (8000b38 <MX_GPIO_Init+0x100>)
 8000aea:	f011 f8d1 	bl	8011c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aee:	2320      	movs	r3, #32
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	480b      	ldr	r0, [pc, #44]	; (8000b34 <MX_GPIO_Init+0xfc>)
 8000b06:	f011 f8c3 	bl	8011c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_O_Pin */
   GPIO_InitStruct.Pin = L_O_Pin;
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(L_O_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_GPIO_Init+0xfc>)
 8000b22:	f011 f8b5 	bl	8011c90 <HAL_GPIO_Init>

}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	; 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40020800 	.word	0x40020800

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b86:	2007      	movs	r0, #7
 8000b88:	f011 f84e 	bl	8011c28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a19      	ldr	r2, [pc, #100]	; (8000c1c <HAL_UART_MspInit+0x84>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d12b      	bne.n	8000c12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bf2:	230c      	movs	r3, #12
 8000bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c02:	2307      	movs	r3, #7
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <HAL_UART_MspInit+0x8c>)
 8000c0e:	f011 f83f 	bl	8011c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40004400 	.word	0x40004400
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler+0x4>

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f010 fee2 	bl	8011a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d903      	bls.n	8000c98 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c90:	f06f 0301 	mvn.w	r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e025      	b.n	8000ce4 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	4914      	ldr	r1, [pc, #80]	; (8000cf0 <BSP_COM_Init+0x74>)
 8000c9e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000ca2:	4814      	ldr	r0, [pc, #80]	; (8000cf4 <BSP_COM_Init+0x78>)
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	011b      	lsls	r3, r3, #4
 8000ca8:	4413      	add	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4403      	add	r3, r0
 8000cae:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8000cb0:	79fa      	ldrb	r2, [r7, #7]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	011b      	lsls	r3, r3, #4
 8000cb6:	4413      	add	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <BSP_COM_Init+0x78>)
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f864 	bl	8000d8c <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8000cc4:	79fa      	ldrb	r2, [r7, #7]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	4413      	add	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <BSP_COM_Init+0x78>)
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f810 	bl	8000cf8 <MX_USART2_UART_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000cde:	f06f 0303 	mvn.w	r3, #3
 8000ce2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000000c 	.word	0x2000000c
 8000cf4:	200070b0 	.word	0x200070b0

08000cf8 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <MX_USART2_UART_Init+0x58>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d10:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f012 feac 	bl	8013a94 <HAL_UART_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40004400 	.word	0x40004400

08000d54 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <__io_putchar+0x30>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4613      	mov	r3, r2
 8000d64:	011b      	lsls	r3, r3, #4
 8000d66:	4413      	add	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <__io_putchar+0x34>)
 8000d6c:	1898      	adds	r0, r3, r2
 8000d6e:	1d39      	adds	r1, r7, #4
 8000d70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d74:	2201      	movs	r2, #1
 8000d76:	f012 feda 	bl	8013b2e <HAL_UART_Transmit>
  return ch;
 8000d7a:	687b      	ldr	r3, [r7, #4]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000010b 	.word	0x2000010b
 8000d88:	200070b0 	.word	0x200070b0

08000d8c <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <USART2_MspInit+0x88>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	4a1d      	ldr	r2, [pc, #116]	; (8000e14 <USART2_MspInit+0x88>)
 8000d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da2:	6413      	str	r3, [r2, #64]	; 0x40
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <USART2_MspInit+0x88>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <USART2_MspInit+0x88>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <USART2_MspInit+0x88>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <USART2_MspInit+0x88>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8000dcc:	2304      	movs	r3, #4
 8000dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8000ddc:	2307      	movs	r3, #7
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	480c      	ldr	r0, [pc, #48]	; (8000e18 <USART2_MspInit+0x8c>)
 8000de8:	f010 ff52 	bl	8011c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8000dec:	2308      	movs	r3, #8
 8000dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8000dfc:	2307      	movs	r3, #7
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	4804      	ldr	r0, [pc, #16]	; (8000e18 <USART2_MspInit+0x8c>)
 8000e08:	f010 ff42 	bl	8011c90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	3728      	adds	r7, #40	; 0x28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020000 	.word	0x40020000

08000e1c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <BSP_I2C1_Init+0x58>)
 8000e28:	4a13      	ldr	r2, [pc, #76]	; (8000e78 <BSP_I2C1_Init+0x5c>)
 8000e2a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <BSP_I2C1_Init+0x60>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	1c5a      	adds	r2, r3, #1
 8000e32:	4912      	ldr	r1, [pc, #72]	; (8000e7c <BSP_I2C1_Init+0x60>)
 8000e34:	600a      	str	r2, [r1, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d117      	bne.n	8000e6a <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000e3a:	480e      	ldr	r0, [pc, #56]	; (8000e74 <BSP_I2C1_Init+0x58>)
 8000e3c:	f011 fe6e 	bl	8012b1c <HAL_I2C_GetState>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d111      	bne.n	8000e6a <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000e46:	480b      	ldr	r0, [pc, #44]	; (8000e74 <BSP_I2C1_Init+0x58>)
 8000e48:	f000 f8d2 	bl	8000ff0 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10b      	bne.n	8000e6a <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000e52:	4808      	ldr	r0, [pc, #32]	; (8000e74 <BSP_I2C1_Init+0x58>)
 8000e54:	f000 f898 	bl	8000f88 <MX_I2C1_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000e5e:	f06f 0307 	mvn.w	r3, #7
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	e001      	b.n	8000e6a <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000e6a:	687b      	ldr	r3, [r7, #4]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	2000705c 	.word	0x2000705c
 8000e78:	40005400 	.word	0x40005400
 8000e7c:	2000010c 	.word	0x2000010c

08000e80 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <BSP_I2C1_DeInit+0x48>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d014      	beq.n	8000ebc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <BSP_I2C1_DeInit+0x48>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <BSP_I2C1_DeInit+0x48>)
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <BSP_I2C1_DeInit+0x48>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10b      	bne.n	8000ebc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <BSP_I2C1_DeInit+0x4c>)
 8000ea6:	f000 f8ed 	bl	8001084 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000eaa:	4808      	ldr	r0, [pc, #32]	; (8000ecc <BSP_I2C1_DeInit+0x4c>)
 8000eac:	f011 face 	bl	801244c <HAL_I2C_DeInit>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000eb6:	f06f 0307 	mvn.w	r3, #7
 8000eba:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000ebc:	687b      	ldr	r3, [r7, #4]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2000010c 	.word	0x2000010c
 8000ecc:	2000705c 	.word	0x2000705c

08000ed0 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	80fb      	strh	r3, [r7, #6]
 8000edc:	4613      	mov	r3, r2
 8000ede:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000ee4:	88bb      	ldrh	r3, [r7, #4]
 8000ee6:	88f9      	ldrh	r1, [r7, #6]
 8000ee8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eec:	9200      	str	r2, [sp, #0]
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	480b      	ldr	r0, [pc, #44]	; (8000f20 <BSP_I2C1_Send+0x50>)
 8000ef2:	f011 faef 	bl	80124d4 <HAL_I2C_Master_Transmit>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00c      	beq.n	8000f16 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <BSP_I2C1_Send+0x50>)
 8000efe:	f011 fe1b 	bl	8012b38 <HAL_I2C_GetError>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d003      	beq.n	8000f10 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000f08:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	e002      	b.n	8000f16 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000f10:	f06f 0303 	mvn.w	r3, #3
 8000f14:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000705c 	.word	0x2000705c

08000f24 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	80fb      	strh	r3, [r7, #6]
 8000f30:	4613      	mov	r3, r2
 8000f32:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000f38:	88bb      	ldrh	r3, [r7, #4]
 8000f3a:	88f9      	ldrh	r1, [r7, #6]
 8000f3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f40:	9200      	str	r2, [sp, #0]
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	480b      	ldr	r0, [pc, #44]	; (8000f74 <BSP_I2C1_Recv+0x50>)
 8000f46:	f011 fbc3 	bl	80126d0 <HAL_I2C_Master_Receive>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00c      	beq.n	8000f6a <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000f50:	4808      	ldr	r0, [pc, #32]	; (8000f74 <BSP_I2C1_Recv+0x50>)
 8000f52:	f011 fdf1 	bl	8012b38 <HAL_I2C_GetError>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d003      	beq.n	8000f64 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000f5c:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	e002      	b.n	8000f6a <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000f64:	f06f 0303 	mvn.w	r3, #3
 8000f68:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2000705c 	.word	0x2000705c

08000f78 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000f7c:	f010 fd72 	bl	8011a64 <HAL_GetTick>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <MX_I2C1_Init+0x60>)
 8000f98:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a13      	ldr	r2, [pc, #76]	; (8000fec <MX_I2C1_Init+0x64>)
 8000f9e:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fb2:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f011 f8f9 	bl	80121c4 <HAL_I2C_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	000186a0 	.word	0x000186a0

08000ff0 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	; (800107c <I2C1_MspInit+0x8c>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4a1e      	ldr	r2, [pc, #120]	; (800107c <I2C1_MspInit+0x8c>)
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	6313      	str	r3, [r2, #48]	; 0x30
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <I2C1_MspInit+0x8c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101a:	2312      	movs	r3, #18
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001026:	2304      	movs	r3, #4
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4813      	ldr	r0, [pc, #76]	; (8001080 <I2C1_MspInit+0x90>)
 8001032:	f010 fe2d 	bl	8011c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103c:	2312      	movs	r3, #18
 800103e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001048:	2304      	movs	r3, #4
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	480b      	ldr	r0, [pc, #44]	; (8001080 <I2C1_MspInit+0x90>)
 8001054:	f010 fe1c 	bl	8011c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <I2C1_MspInit+0x8c>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <I2C1_MspInit+0x8c>)
 8001062:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <I2C1_MspInit+0x8c>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	; 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800
 8001080:	40020400 	.word	0x40020400

08001084 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <I2C1_MspDeInit+0x30>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <I2C1_MspDeInit+0x30>)
 8001092:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001096:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109c:	4806      	ldr	r0, [pc, #24]	; (80010b8 <I2C1_MspDeInit+0x34>)
 800109e:	f010 ff7b 	bl	8011f98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80010a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <I2C1_MspDeInit+0x34>)
 80010a8:	f010 ff76 	bl	8011f98 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020400 	.word	0x40020400

080010bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	e00a      	b.n	80010e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ce:	f3af 8000 	nop.w
 80010d2:	4601      	mov	r1, r0
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	60ba      	str	r2, [r7, #8]
 80010da:	b2ca      	uxtb	r2, r1
 80010dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dbf0      	blt.n	80010ce <_read+0x12>
	}

return len;
 80010ec:	687b      	ldr	r3, [r7, #4]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	e009      	b.n	800111c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	60ba      	str	r2, [r7, #8]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fe1f 	bl	8000d54 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	dbf1      	blt.n	8001108 <_write+0x12>
	}
	return len;
 8001124:	687b      	ldr	r3, [r7, #4]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <_close>:

int _close(int file)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
	return -1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001156:	605a      	str	r2, [r3, #4]
	return 0;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <_isatty>:

int _isatty(int file)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
	return 1;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
	return 0;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a0:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <_sbrk+0x5c>)
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <_sbrk+0x60>)
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <_sbrk+0x64>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <_sbrk+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d207      	bcs.n	80011d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c8:	f012 ff7a 	bl	80140c0 <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	220c      	movs	r2, #12
 80011d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	e009      	b.n	80011ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <_sbrk+0x64>)
 80011e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20018000 	.word	0x20018000
 80011f8:	00000400 	.word	0x00000400
 80011fc:	20000110 	.word	0x20000110
 8001200:	20007308 	.word	0x20007308

08001204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <SystemInit+0x20>)
 800120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <SystemInit+0x20>)
 8001210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001260 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800122e:	490e      	ldr	r1, [pc, #56]	; (8001268 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001230:	4a0e      	ldr	r2, [pc, #56]	; (800126c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001234:	e002      	b.n	800123c <LoopCopyDataInit>

08001236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123a:	3304      	adds	r3, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001240:	d3f9      	bcc.n	8001236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001244:	4c0b      	ldr	r4, [pc, #44]	; (8001274 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001248:	e001      	b.n	800124e <LoopFillZerobss>

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800124c:	3204      	adds	r2, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001252:	f7ff ffd7 	bl	8001204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001256:	f012 ff39 	bl	80140cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125a:	f7ff fb47 	bl	80008ec <main>
  bx  lr    
 800125e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001260:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 800126c:	080152f0 	.word	0x080152f0
  ldr r2, =_sbss
 8001270:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001274:	20007308 	.word	0x20007308

08001278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC_IRQHandler>
	...

0800127c <VL53L3A2_Init>:
  * @brief Initialize X-NUCLEO-53L3A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L3A2_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
  int32_t status = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 8001286:	4b36      	ldr	r3, [pc, #216]	; (8001360 <VL53L3A2_Init+0xe4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	4934      	ldr	r1, [pc, #208]	; (8001360 <VL53L3A2_Init+0xe4>)
 800128e:	600a      	str	r2, [r1, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d154      	bne.n	800133e <VL53L3A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 8001294:	f000 f8d4 	bl	8001440 <_I2cFailRecover>
 8001298:	4602      	mov	r2, r0
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4313      	orrs	r3, r2
 800129e:	607b      	str	r3, [r7, #4]
    status |= VL53L3A2_I2C_Init();
 80012a0:	f7ff fdbc 	bl	8000e1c <BSP_I2C1_Init>
 80012a4:	4602      	mov	r2, r0
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d147      	bne.n	8001342 <VL53L3A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 80012b2:	463a      	mov	r2, r7
 80012b4:	2302      	movs	r3, #2
 80012b6:	2100      	movs	r1, #0
 80012b8:	2086      	movs	r0, #134	; 0x86
 80012ba:	f000 f963 	bl	8001584 <_ExpanderRd>
 80012be:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d13f      	bne.n	8001346 <VL53L3A2_Init+0xca>
 80012c6:	783b      	ldrb	r3, [r7, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d13c      	bne.n	8001346 <VL53L3A2_Init+0xca>
 80012cc:	787b      	ldrb	r3, [r7, #1]
 80012ce:	2b16      	cmp	r3, #22
 80012d0:	d139      	bne.n	8001346 <VL53L3A2_Init+0xca>
	  {
      VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 80012d2:	463a      	mov	r2, r7
 80012d4:	2302      	movs	r3, #2
 80012d6:	2100      	movs	r1, #0
 80012d8:	2084      	movs	r0, #132	; 0x84
 80012da:	f000 f953 	bl	8001584 <_ExpanderRd>
 80012de:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d131      	bne.n	800134a <VL53L3A2_Init+0xce>
 80012e6:	783b      	ldrb	r3, [r7, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d12e      	bne.n	800134a <VL53L3A2_Init+0xce>
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	2b16      	cmp	r3, #22
 80012f0:	d12b      	bne.n	800134a <VL53L3A2_Init+0xce>
	  {
		  VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <VL53L3A2_Init+0xe8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 80012f8:	23ff      	movs	r3, #255	; 0xff
 80012fa:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 80012fc:	23ff      	movs	r3, #255	; 0xff
 80012fe:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 8001300:	463a      	mov	r2, r7
 8001302:	2302      	movs	r3, #2
 8001304:	2114      	movs	r1, #20
 8001306:	2086      	movs	r0, #134	; 0x86
 8001308:	f000 f96e 	bl	80015e8 <_ExpanderWR>
 800130c:	6078      	str	r0, [r7, #4]

	  if (status)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d11c      	bne.n	800134e <VL53L3A2_Init+0xd2>
	  {
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 8001314:	23ff      	movs	r3, #255	; 0xff
 8001316:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 8001318:	23bf      	movs	r3, #191	; 0xbf
 800131a:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 800131c:	463a      	mov	r2, r7
 800131e:	2302      	movs	r3, #2
 8001320:	2114      	movs	r1, #20
 8001322:	2084      	movs	r0, #132	; 0x84
 8001324:	f000 f960 	bl	80015e8 <_ExpanderWR>
 8001328:	6078      	str	r0, [r7, #4]

	  if (status)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d110      	bne.n	8001352 <VL53L3A2_Init+0xd6>
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <VL53L3A2_Init+0xe8>)
 8001332:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8001336:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 8001338:	f000 f904 	bl	8001544 <_ExpandersSetAllIO>
 800133c:	6078      	str	r0, [r7, #4]
	  {
		VL53L3A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 800133e:	bf00      	nop
 8001340:	e008      	b.n	8001354 <VL53L3A2_Init+0xd8>
      goto done_err;
 8001342:	bf00      	nop
 8001344:	e006      	b.n	8001354 <VL53L3A2_Init+0xd8>
      goto done_err;
 8001346:	bf00      	nop
 8001348:	e004      	b.n	8001354 <VL53L3A2_Init+0xd8>
		  goto done_err;
 800134a:	bf00      	nop
 800134c:	e002      	b.n	8001354 <VL53L3A2_Init+0xd8>
		goto done_err;
 800134e:	bf00      	nop
 8001350:	e000      	b.n	8001354 <VL53L3A2_Init+0xd8>
		goto done_err;
 8001352:	bf00      	nop
  return status;
 8001354:	687b      	ldr	r3, [r7, #4]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000114 	.word	0x20000114
 8001364:	20000118 	.word	0x20000118

08001368 <VL53L3A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L3A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L3A2_ResetId(uint8_t DevNo, uint8_t state)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	460a      	mov	r2, r1
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	4613      	mov	r3, r2
 8001376:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d037      	beq.n	80013ee <VL53L3A2_ResetId+0x86>
 800137e:	2b02      	cmp	r3, #2
 8001380:	dc4e      	bgt.n	8001420 <VL53L3A2_ResetId+0xb8>
 8001382:	2b00      	cmp	r3, #0
 8001384:	d01a      	beq.n	80013bc <VL53L3A2_ResetId+0x54>
 8001386:	2b01      	cmp	r3, #1
 8001388:	d14a      	bne.n	8001420 <VL53L3A2_ResetId+0xb8>
  {
    case VL53L3A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 800138a:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <VL53L3A2_ResetId+0xcc>)
 800138c:	78db      	ldrb	r3, [r3, #3]
 800138e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b27      	ldr	r3, [pc, #156]	; (8001434 <VL53L3A2_ResetId+0xcc>)
 8001396:	70da      	strb	r2, [r3, #3]

      if (state)
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d006      	beq.n	80013ac <VL53L3A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 800139e:	4b25      	ldr	r3, [pc, #148]	; (8001434 <VL53L3A2_ResetId+0xcc>)
 80013a0:	78db      	ldrb	r3, [r3, #3]
 80013a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <VL53L3A2_ResetId+0xcc>)
 80013aa:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 80013ac:	2301      	movs	r3, #1
 80013ae:	4a22      	ldr	r2, [pc, #136]	; (8001438 <VL53L3A2_ResetId+0xd0>)
 80013b0:	2113      	movs	r1, #19
 80013b2:	2084      	movs	r0, #132	; 0x84
 80013b4:	f000 f918 	bl	80015e8 <_ExpanderWR>
 80013b8:	60f8      	str	r0, [r7, #12]
      break;
 80013ba:	e035      	b.n	8001428 <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 80013bc:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <VL53L3A2_ResetId+0xcc>)
 80013be:	785b      	ldrb	r3, [r3, #1]
 80013c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <VL53L3A2_ResetId+0xcc>)
 80013c8:	705a      	strb	r2, [r3, #1]

      if (state)
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <VL53L3A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <VL53L3A2_ResetId+0xcc>)
 80013d2:	785b      	ldrb	r3, [r3, #1]
 80013d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <VL53L3A2_ResetId+0xcc>)
 80013dc:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80013de:	2301      	movs	r3, #1
 80013e0:	4a16      	ldr	r2, [pc, #88]	; (800143c <VL53L3A2_ResetId+0xd4>)
 80013e2:	2113      	movs	r1, #19
 80013e4:	2086      	movs	r0, #134	; 0x86
 80013e6:	f000 f8ff 	bl	80015e8 <_ExpanderWR>
 80013ea:	60f8      	str	r0, [r7, #12]
      break;
 80013ec:	e01c      	b.n	8001428 <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <VL53L3A2_ResetId+0xcc>)
 80013f0:	785b      	ldrb	r3, [r3, #1]
 80013f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <VL53L3A2_ResetId+0xcc>)
 80013fa:	705a      	strb	r2, [r3, #1]

      if (state)
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d006      	beq.n	8001410 <VL53L3A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <VL53L3A2_ResetId+0xcc>)
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <VL53L3A2_ResetId+0xcc>)
 800140e:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8001410:	2301      	movs	r3, #1
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <VL53L3A2_ResetId+0xd4>)
 8001414:	2113      	movs	r1, #19
 8001416:	2086      	movs	r0, #134	; 0x86
 8001418:	f000 f8e6 	bl	80015e8 <_ExpanderWR>
 800141c:	60f8      	str	r0, [r7, #12]
      break;
 800141e:	e003      	b.n	8001428 <VL53L3A2_ResetId+0xc0>

    default:
      VL53L3A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
 8001424:	60fb      	str	r3, [r7, #12]
      goto done;
 8001426:	e000      	b.n	800142a <VL53L3A2_ResetId+0xc2>
  if (status)
  {
    VL53L3A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 8001428:	bf00      	nop
  return status;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000118 	.word	0x20000118
 8001438:	2000011b 	.word	0x2000011b
 800143c:	20000119 	.word	0x20000119

08001440 <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	77bb      	strb	r3, [r7, #30]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 800144a:	4b3b      	ldr	r3, [pc, #236]	; (8001538 <_I2cFailRecover+0xf8>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 8001452:	2300      	movs	r3, #0
 8001454:	e06b      	b.n	800152e <_I2cFailRecover+0xee>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b38      	ldr	r3, [pc, #224]	; (800153c <_I2cFailRecover+0xfc>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a37      	ldr	r2, [pc, #220]	; (800153c <_I2cFailRecover+0xfc>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b35      	ldr	r3, [pc, #212]	; (800153c <_I2cFailRecover+0xfc>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SCL_GPIO_PIN;
 8001472:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001476:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001478:	2311      	movs	r3, #17
 800147a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147c:	2301      	movs	r3, #1
 800147e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4619      	mov	r1, r3
 8001486:	482e      	ldr	r0, [pc, #184]	; (8001540 <_I2cFailRecover+0x100>)
 8001488:	f010 fc02 	bl	8011c90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SDA_GPIO_PIN;
 800148c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001490:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001492:	2311      	movs	r3, #17
 8001494:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001496:	2301      	movs	r3, #1
 8001498:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	4619      	mov	r1, r3
 80014a0:	4827      	ldr	r0, [pc, #156]	; (8001540 <_I2cFailRecover+0x100>)
 80014a2:	f010 fbf5 	bl	8011c90 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ac:	4824      	ldr	r0, [pc, #144]	; (8001540 <_I2cFailRecover+0x100>)
 80014ae:	f010 fe6f 	bl	8012190 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b8:	4821      	ldr	r0, [pc, #132]	; (8001540 <_I2cFailRecover+0x100>)
 80014ba:	f010 fe69 	bl	8012190 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 80014be:	2300      	movs	r3, #0
 80014c0:	77fb      	strb	r3, [r7, #31]
 80014c2:	e014      	b.n	80014ee <_I2cFailRecover+0xae>
    {
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ca:	481d      	ldr	r0, [pc, #116]	; (8001540 <_I2cFailRecover+0x100>)
 80014cc:	f010 fe60 	bl	8012190 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f010 fad3 	bl	8011a7c <HAL_Delay>
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80014d6:	2201      	movs	r2, #1
 80014d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014dc:	4818      	ldr	r0, [pc, #96]	; (8001540 <_I2cFailRecover+0x100>)
 80014de:	f010 fe57 	bl	8012190 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f010 faca 	bl	8011a7c <HAL_Delay>
    for (i = 0; i < 10U; i++)
 80014e8:	7ffb      	ldrb	r3, [r7, #31]
 80014ea:	3301      	adds	r3, #1
 80014ec:	77fb      	strb	r3, [r7, #31]
 80014ee:	7ffb      	ldrb	r3, [r7, #31]
 80014f0:	2b09      	cmp	r3, #9
 80014f2:	d9e7      	bls.n	80014c4 <_I2cFailRecover+0x84>
    }
    retry_cnt++;
 80014f4:	7fbb      	ldrb	r3, [r7, #30]
 80014f6:	3301      	adds	r3, #1
 80014f8:	77bb      	strb	r3, [r7, #30]
  } while ((HAL_GPIO_ReadPin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 80014fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014fe:	4810      	ldr	r0, [pc, #64]	; (8001540 <_I2cFailRecover+0x100>)
 8001500:	f010 fe2e 	bl	8012160 <HAL_GPIO_ReadPin>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <_I2cFailRecover+0xd0>
 800150a:	7fbb      	ldrb	r3, [r7, #30]
 800150c:	2b06      	cmp	r3, #6
 800150e:	d9d6      	bls.n	80014be <_I2cFailRecover+0x7e>

  if (HAL_GPIO_ReadPin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 8001510:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001514:	480a      	ldr	r0, [pc, #40]	; (8001540 <_I2cFailRecover+0x100>)
 8001516:	f010 fe23 	bl	8012160 <HAL_GPIO_ReadPin>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <_I2cFailRecover+0xe6>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8001520:	f06f 0304 	mvn.w	r3, #4
 8001524:	e003      	b.n	800152e <_I2cFailRecover+0xee>
  }

  is_already_init = 1U;
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <_I2cFailRecover+0xf8>)
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3720      	adds	r7, #32
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000011c 	.word	0x2000011c
 800153c:	40023800 	.word	0x40023800
 8001540:	40020400 	.word	0x40020400

08001544 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 800154a:	2302      	movs	r3, #2
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <_ExpandersSetAllIO+0x38>)
 800154e:	2112      	movs	r1, #18
 8001550:	2086      	movs	r0, #134	; 0x86
 8001552:	f000 f849 	bl	80015e8 <_ExpanderWR>
 8001556:	6078      	str	r0, [r7, #4]

  if (status)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d107      	bne.n	800156e <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 800155e:	2302      	movs	r3, #2
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <_ExpandersSetAllIO+0x3c>)
 8001562:	2112      	movs	r1, #18
 8001564:	2084      	movs	r0, #132	; 0x84
 8001566:	f000 f83f 	bl	80015e8 <_ExpanderWR>
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	e000      	b.n	8001570 <_ExpandersSetAllIO+0x2c>
    goto done_err;
 800156e:	bf00      	nop

done_err:
  return status;
 8001570:	687b      	ldr	r3, [r7, #4]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000118 	.word	0x20000118
 8001580:	2000011a 	.word	0x2000011a

08001584 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af02      	add	r7, sp, #8
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	74fb      	strb	r3, [r7, #19]
  VL53L3A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	b299      	uxth	r1, r3
 800159c:	f107 0213 	add.w	r2, r7, #19
 80015a0:	2364      	movs	r3, #100	; 0x64
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2301      	movs	r3, #1
 80015a6:	480f      	ldr	r0, [pc, #60]	; (80015e4 <_ExpanderRd+0x60>)
 80015a8:	f010 ff94 	bl	80124d4 <HAL_I2C_Master_Transmit>
 80015ac:	4603      	mov	r3, r0
 80015ae:	617b      	str	r3, [r7, #20]

    if (status)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d110      	bne.n	80015d8 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L3A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	b299      	uxth	r1, r3
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2064      	movs	r0, #100	; 0x64
 80015c2:	fb00 f303 	mul.w	r3, r0, r3
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	4613      	mov	r3, r2
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <_ExpanderRd+0x60>)
 80015ce:	f011 f87f 	bl	80126d0 <HAL_I2C_Master_Receive>
 80015d2:	4603      	mov	r3, r0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e000      	b.n	80015da <_ExpanderRd+0x56>
      break;
 80015d8:	bf00      	nop
  } while (0);

  VL53L3A2_PutI2cBus();

  return status;
 80015da:	697b      	ldr	r3, [r7, #20]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	2000705c 	.word	0x2000705c

080015e8 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	; 0x30
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	3301      	adds	r3, #1
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	f012 fd84 	bl	8014114 <memcpy>

  VL53L3A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	b299      	uxth	r1, r3
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b29b      	uxth	r3, r3
 8001614:	3301      	adds	r3, #1
 8001616:	b29b      	uxth	r3, r3
 8001618:	f107 0214 	add.w	r2, r7, #20
 800161c:	2064      	movs	r0, #100	; 0x64
 800161e:	9000      	str	r0, [sp, #0]
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <_ExpanderWR+0x4c>)
 8001622:	f010 ff57 	bl	80124d4 <HAL_I2C_Master_Transmit>
 8001626:	4603      	mov	r3, r0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L3A2_PutI2cBus();

  return status;
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800162c:	4618      	mov	r0, r3
 800162e:	3728      	adds	r7, #40	; 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	2000705c 	.word	0x2000705c

08001638 <VL53L3A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d903      	bls.n	800164e <VL53L3A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001646:	f06f 0301 	mvn.w	r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	e014      	b.n	8001678 <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L3A2_Init() != 0)
 800164e:	f7ff fe15 	bl	800127c <VL53L3A2_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <VL53L3A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8001658:	f06f 0303 	mvn.w	r3, #3
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	e00b      	b.n	8001678 <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 8001660:	2101      	movs	r1, #1
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f8fc 	bl	8001860 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8001668:	2100      	movs	r1, #0
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f8f8 	bl	8001860 <VL53L3A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L3CX_Probe(Instance);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f935 	bl	80018e0 <VL53L3CX_Probe>
 8001676:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001678:	68fb      	ldr	r3, [r7, #12]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <VL53L3A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d903      	bls.n	800169c <VL53L3A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001694:	f06f 0301 	mvn.w	r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	e012      	b.n	80016c2 <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ReadID(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <VL53L3A2_RANGING_SENSOR_ReadID+0x48>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	490b      	ldr	r1, [pc, #44]	; (80016d0 <VL53L3A2_RANGING_SENSOR_ReadID+0x4c>)
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80016aa:	6839      	ldr	r1, [r7, #0]
 80016ac:	4610      	mov	r0, r2
 80016ae:	4798      	blx	r3
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	da03      	bge.n	80016be <VL53L3A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80016b6:	f06f 0304 	mvn.w	r3, #4
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	e001      	b.n	80016c2 <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2000012c 	.word	0x2000012c
 80016d0:	20000120 	.word	0x20000120

080016d4 <VL53L3A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d903      	bls.n	80016ec <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016e4:	f06f 0301 	mvn.w	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	e012      	b.n	8001712 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x48>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	490b      	ldr	r1, [pc, #44]	; (8001720 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80016fa:	6839      	ldr	r1, [r7, #0]
 80016fc:	4610      	mov	r0, r2
 80016fe:	4798      	blx	r3
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	da03      	bge.n	800170e <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001706:	f06f 0304 	mvn.w	r3, #4
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e001      	b.n	8001712 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	2000012c 	.word	0x2000012c
 8001720:	20000120 	.word	0x20000120

08001724 <VL53L3A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d903      	bls.n	800173c <VL53L3A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001734:	f06f 0301 	mvn.w	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	e012      	b.n	8001762 <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->GetDistance(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <VL53L3A2_RANGING_SENSOR_GetDistance+0x48>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	490b      	ldr	r1, [pc, #44]	; (8001770 <VL53L3A2_RANGING_SENSOR_GetDistance+0x4c>)
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800174a:	6839      	ldr	r1, [r7, #0]
 800174c:	4610      	mov	r0, r2
 800174e:	4798      	blx	r3
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	da03      	bge.n	800175e <VL53L3A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001756:	f06f 0304 	mvn.w	r3, #4
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e001      	b.n	8001762 <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000012c 	.word	0x2000012c
 8001770:	20000120 	.word	0x20000120

08001774 <VL53L3A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d903      	bls.n	800178c <VL53L3A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001784:	f06f 0301 	mvn.w	r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e012      	b.n	80017b2 <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->Start(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <VL53L3A2_RANGING_SENSOR_Start+0x48>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	490b      	ldr	r1, [pc, #44]	; (80017c0 <VL53L3A2_RANGING_SENSOR_Start+0x4c>)
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800179a:	6839      	ldr	r1, [r7, #0]
 800179c:	4610      	mov	r0, r2
 800179e:	4798      	blx	r3
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da03      	bge.n	80017ae <VL53L3A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80017a6:	f06f 0304 	mvn.w	r3, #4
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	e001      	b.n	80017b2 <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80017b2:	68fb      	ldr	r3, [r7, #12]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	2000012c 	.word	0x2000012c
 80017c0:	20000120 	.word	0x20000120

080017c4 <VL53L3A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d903      	bls.n	80017da <VL53L3A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017d2:	f06f 0301 	mvn.w	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	e011      	b.n	80017fe <VL53L3A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->Stop(VL53L3A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <VL53L3A2_RANGING_SENSOR_Stop+0x44>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	490a      	ldr	r1, [pc, #40]	; (800180c <VL53L3A2_RANGING_SENSOR_Stop+0x48>)
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80017e8:	4610      	mov	r0, r2
 80017ea:	4798      	blx	r3
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	da03      	bge.n	80017fa <VL53L3A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80017f2:	f06f 0304 	mvn.w	r3, #4
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e001      	b.n	80017fe <VL53L3A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2000012c 	.word	0x2000012c
 800180c:	20000120 	.word	0x20000120

08001810 <VL53L3A2_RANGING_SENSOR_SetAddress>:
  * @param Instance    Ranging sensor instance.
  * @param Address     New I2C address.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetAddress(uint32_t Instance, uint32_t Address)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d903      	bls.n	8001828 <VL53L3A2_RANGING_SENSOR_SetAddress+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001820:	f06f 0301 	mvn.w	r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	e012      	b.n	800184e <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->SetAddress(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Address) < 0)
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <VL53L3A2_RANGING_SENSOR_SetAddress+0x48>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	490b      	ldr	r1, [pc, #44]	; (800185c <VL53L3A2_RANGING_SENSOR_SetAddress+0x4c>)
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001836:	6839      	ldr	r1, [r7, #0]
 8001838:	4610      	mov	r0, r2
 800183a:	4798      	blx	r3
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	da03      	bge.n	800184a <VL53L3A2_RANGING_SENSOR_SetAddress+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001842:	f06f 0304 	mvn.w	r3, #4
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	e001      	b.n	800184e <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	2000012c 	.word	0x2000012c
 800185c:	20000120 	.word	0x20000120

08001860 <VL53L3A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d903      	bls.n	8001878 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001870:	f06f 0301 	mvn.w	r3, #1
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	e02e      	b.n	80018d6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d112      	bne.n	80018a4 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 1) < 0)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2101      	movs	r1, #1
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fd6f 	bl	8001368 <VL53L3A2_ResetId>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	da03      	bge.n	8001898 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001890:	f06f 0303 	mvn.w	r3, #3
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	e01e      	b.n	80018d6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001898:	2002      	movs	r0, #2
 800189a:	f010 f8ef 	bl	8011a7c <HAL_Delay>
      ret = BSP_ERROR_NONE;
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	e018      	b.n	80018d6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d112      	bne.n	80018d0 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 0) < 0)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fd59 	bl	8001368 <VL53L3A2_ResetId>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	da03      	bge.n	80018c4 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80018bc:	f06f 0303 	mvn.w	r3, #3
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	e008      	b.n	80018d6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 80018c4:	2002      	movs	r0, #2
 80018c6:	f010 f8d9 	bl	8011a7c <HAL_Delay>
      ret = BSP_ERROR_NONE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	e002      	b.n	80018d6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018d0:	f06f 0301 	mvn.w	r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <VL53L3CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L3CX_Probe(uint32_t Instance)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  VL53L3CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L3CX_Object_t   VL53L3CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L3CX_ADDRESS;
 80018e8:	2352      	movs	r3, #82	; 0x52
 80018ea:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L3A2_I2C_Init;
 80018ec:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <VL53L3CX_Probe+0xf0>)
 80018ee:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L3A2_I2C_DeInit;
 80018f0:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <VL53L3CX_Probe+0xf4>)
 80018f2:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L3A2_I2C_WriteReg;
 80018f4:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <VL53L3CX_Probe+0xf8>)
 80018f6:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L3A2_I2C_ReadReg;
 80018f8:	4b38      	ldr	r3, [pc, #224]	; (80019dc <VL53L3CX_Probe+0xfc>)
 80018fa:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L3A2_GetTick;
 80018fc:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <VL53L3CX_Probe+0x100>)
 80018fe:	623b      	str	r3, [r7, #32]

  if (VL53L3CX_RegisterBusIO(&(VL53L3CXObj[Instance]), &IOCtx) != VL53L3CX_OK)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f242 42f0 	movw	r2, #9456	; 0x24f0
 8001906:	fb02 f303 	mul.w	r3, r2, r3
 800190a:	4a36      	ldr	r2, [pc, #216]	; (80019e4 <VL53L3CX_Probe+0x104>)
 800190c:	4413      	add	r3, r2
 800190e:	f107 020c 	add.w	r2, r7, #12
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f00f fbf2 	bl	80110fe <VL53L3CX_RegisterBusIO>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <VL53L3CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001920:	f06f 0304 	mvn.w	r3, #4
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
 8001926:	e04d      	b.n	80019c4 <VL53L3CX_Probe+0xe4>
  }
  else if (VL53L3CX_ReadID(&(VL53L3CXObj[Instance]), &id) != VL53L3CX_OK)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f242 42f0 	movw	r2, #9456	; 0x24f0
 800192e:	fb02 f303 	mul.w	r3, r2, r3
 8001932:	4a2c      	ldr	r2, [pc, #176]	; (80019e4 <VL53L3CX_Probe+0x104>)
 8001934:	4413      	add	r3, r2
 8001936:	f107 0208 	add.w	r2, r7, #8
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f00f fc90 	bl	8011262 <VL53L3CX_ReadID>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <VL53L3CX_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001948:	f06f 0304 	mvn.w	r3, #4
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
 800194e:	e039      	b.n	80019c4 <VL53L3CX_Probe+0xe4>
  }
  else
  {
    if (id != VL53L3CX_ID)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f64e 22aa 	movw	r2, #60074	; 0xeaaa
 8001956:	4293      	cmp	r3, r2
 8001958:	d003      	beq.n	8001962 <VL53L3CX_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800195a:	f06f 0306 	mvn.w	r3, #6
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
 8001960:	e030      	b.n	80019c4 <VL53L3CX_Probe+0xe4>
    }
    else
    {
      VL53L3A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L3CX_RANGING_SENSOR_Driver;
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <VL53L3CX_Probe+0x108>)
 8001964:	4a21      	ldr	r2, [pc, #132]	; (80019ec <VL53L3CX_Probe+0x10c>)
 8001966:	601a      	str	r2, [r3, #0]
      VL53L3A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L3CXObj[Instance]);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f242 42f0 	movw	r2, #9456	; 0x24f0
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	4a1c      	ldr	r2, [pc, #112]	; (80019e4 <VL53L3CX_Probe+0x104>)
 8001974:	441a      	add	r2, r3
 8001976:	491e      	ldr	r1, [pc, #120]	; (80019f0 <VL53L3CX_Probe+0x110>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L3A2_RANGING_SENSOR_Drv->Init(VL53L3A2_RANGING_SENSOR_CompObj[Instance]) != VL53L3CX_OK)
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <VL53L3CX_Probe+0x108>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	491a      	ldr	r1, [pc, #104]	; (80019f0 <VL53L3CX_Probe+0x110>)
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800198c:	4610      	mov	r0, r2
 800198e:	4798      	blx	r3
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <VL53L3CX_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001996:	f06f 0304 	mvn.w	r3, #4
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
 800199c:	e012      	b.n	80019c4 <VL53L3CX_Probe+0xe4>
      }
      else if (VL53L3A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L3A2_RANGING_SENSOR_CompObj[Instance], &VL53L3A2_RANGING_SENSOR_Cap) != VL53L3CX_OK)
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <VL53L3CX_Probe+0x108>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4912      	ldr	r1, [pc, #72]	; (80019f0 <VL53L3CX_Probe+0x110>)
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80019ac:	4911      	ldr	r1, [pc, #68]	; (80019f4 <VL53L3CX_Probe+0x114>)
 80019ae:	4610      	mov	r0, r2
 80019b0:	4798      	blx	r3
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <VL53L3CX_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80019b8:	f06f 0304 	mvn.w	r3, #4
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	e001      	b.n	80019c4 <VL53L3CX_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3728      	adds	r7, #40	; 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	08000e1d 	.word	0x08000e1d
 80019d4:	08000e81 	.word	0x08000e81
 80019d8:	08000ed1 	.word	0x08000ed1
 80019dc:	08000f25 	.word	0x08000f25
 80019e0:	08000f79 	.word	0x08000f79
 80019e4:	20000140 	.word	0x20000140
 80019e8:	2000012c 	.word	0x2000012c
 80019ec:	20000040 	.word	0x20000040
 80019f0:	20000120 	.word	0x20000120
 80019f4:	20000130 	.word	0x20000130

080019f8 <VL53LX_SetDeviceAddress>:
}



VL53LX_Error VL53LX_SetDeviceAddress(VL53LX_DEV Dev, uint8_t DeviceAddress)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3318      	adds	r3, #24
 8001a0c:	613b      	str	r3, [r7, #16]
	VL53LX_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8001a14:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53LX_WrByte(Dev, VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	085b      	lsrs	r3, r3, #1
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	2101      	movs	r1, #1
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f00f f98b 	bl	8010d3c <VL53LX_WrByte>
 8001a26:	4603      	mov	r3, r0
 8001a28:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	085b      	lsrs	r3, r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001a3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <VL53LX_DataInit>:


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 8001a52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d105      	bne.n	8001a66 <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f001 fcba 	bl	80033d6 <VL53LX_data_init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 8001a66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d107      	bne.n	8001a7e <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 8001a6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a72:	2102      	movs	r1, #2
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f887 	bl	8001b88 <SetPresetModeL3CX>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 8001a7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001a86:	f248 2135 	movw	r1, #33333	; 0x8235
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f980 	bl	8001d90 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8001a90:	4603      	mov	r3, r0
 8001a92:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8001a94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10a      	bne.n	8001ab2 <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3318      	adds	r3, #24
 8001aa0:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8001aa8:	220c      	movs	r2, #12
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f012 fb3f 	bl	8014130 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001ab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d105      	bne.n	8001ac6 <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 8001aba:	2102      	movs	r1, #2
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f003 fdb0 	bl	8005622 <VL53LX_set_dmax_mode>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 8001ac6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d105      	bne.n	8001ada <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 8001ace:	2100      	movs	r1, #0
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 ff41 	bl	8002958 <VL53LX_SmudgeCorrectionEnable>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001ada:	2320      	movs	r3, #32
 8001adc:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	76da      	strb	r2, [r3, #27]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8001aea:	3320      	adds	r3, #32
 8001aec:	2202      	movs	r2, #2
 8001aee:	701a      	strb	r2, [r3, #0]
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 8001af0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 8001b08:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f00e fd5c 	bl	80105ca <VL53LX_poll_for_boot_completion>
 8001b12:	4603      	mov	r3, r0
 8001b14:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 8001b34:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <ComputeDevicePresetMode+0x60>)
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	8019      	strh	r1, [r3, #0]
 8001b40:	3302      	adds	r3, #2
 8001b42:	0c12      	lsrs	r2, r2, #16
 8001b44:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d002      	beq.n	8001b52 <ComputeDevicePresetMode+0x2e>
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d003      	beq.n	8001b58 <ComputeDevicePresetMode+0x34>
 8001b50:	e005      	b.n	8001b5e <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]
		break;
 8001b56:	e004      	b.n	8001b62 <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
		break;
 8001b5c:	e001      	b.n	8001b62 <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	f107 0210 	add.w	r2, r7, #16
 8001b68:	4413      	add	r3, r2
 8001b6a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	701a      	strb	r2, [r3, #0]

	return Status;
 8001b72:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	08015224 	.word	0x08015224

08001b88 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001b88:	b5b0      	push	{r4, r5, r7, lr}
 8001b8a:	b08e      	sub	sp, #56	; 0x38
 8001b8c:	af04      	add	r7, sp, #16
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	460b      	mov	r3, r1
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001bac:	2320      	movs	r3, #32
 8001bae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 8001bb2:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8001bb6:	7afb      	ldrb	r3, [r7, #11]
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ffb2 	bl	8001b24 <ComputeDevicePresetMode>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 8001bc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d112      	bne.n	8001bf4 <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 8001bce:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001bd2:	f107 001c 	add.w	r0, r7, #28
 8001bd6:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	f107 0318 	add.w	r3, r7, #24
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	4603      	mov	r3, r0
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f002 f859 	bl	8003ca0 <VL53LX_get_preset_mode_timing_cfg>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 8001bf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d112      	bne.n	8001c22 <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 8001bfc:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001c00:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8001c02:	69fd      	ldr	r5, [r7, #28]
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	9102      	str	r1, [sp, #8]
 8001c0c:	9201      	str	r2, [sp, #4]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	462b      	mov	r3, r5
 8001c12:	4622      	mov	r2, r4
 8001c14:	4601      	mov	r1, r0
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f002 f8a3 	bl	8003d62 <VL53LX_set_preset_mode>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001c22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d103      	bne.n	8001c32 <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001c30:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 8001c32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3728      	adds	r7, #40	; 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bdb0      	pop	{r4, r5, r7, pc}

08001c3e <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b085      	sub	sp, #20
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3318      	adds	r3, #24
 8001c4e:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f893 3393 	ldrb.w	r3, [r3, #915]	; 0x393
 8001c56:	2baa      	cmp	r3, #170	; 0xaa
 8001c58:	d106      	bne.n	8001c68 <IsL4+0x2a>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f893 3392 	ldrb.w	r3, [r3, #914]	; 0x392
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001c60:	2beb      	cmp	r3, #235	; 0xeb
 8001c62:	d101      	bne.n	8001c68 <IsL4+0x2a>
		devL4 = 1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
	return devL4;
 8001c68:	68fb      	ldr	r3, [r7, #12]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <CheckValidRectRoi>:

static VL53LX_Error CheckValidRectRoi(VL53LX_UserRoi_t ROI)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b085      	sub	sp, #20
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001c82:	793b      	ldrb	r3, [r7, #4]
 8001c84:	2b0f      	cmp	r3, #15
 8001c86:	d808      	bhi.n	8001c9a <CheckValidRectRoi+0x24>
 8001c88:	797b      	ldrb	r3, [r7, #5]
 8001c8a:	2b0f      	cmp	r3, #15
 8001c8c:	d805      	bhi.n	8001c9a <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001c8e:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d802      	bhi.n	8001c9a <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	2b0f      	cmp	r3, #15
 8001c98:	d901      	bls.n	8001c9e <CheckValidRectRoi+0x28>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001c9a:	23fc      	movs	r3, #252	; 0xfc
 8001c9c:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8001c9e:	793a      	ldrb	r2, [r7, #4]
 8001ca0:	79bb      	ldrb	r3, [r7, #6]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d803      	bhi.n	8001cae <CheckValidRectRoi+0x38>
 8001ca6:	797a      	ldrb	r2, [r7, #5]
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d201      	bcs.n	8001cb2 <CheckValidRectRoi+0x3c>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001cae:	23fc      	movs	r3, #252	; 0xfc
 8001cb0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <VL53LX_SetDistanceMode>:


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b088      	sub	sp, #32
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d008      	beq.n	8001cf6 <VL53LX_SetDistanceMode+0x34>
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d005      	beq.n	8001cf6 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d002      	beq.n	8001cf6 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 8001cf0:	f06f 0303 	mvn.w	r3, #3
 8001cf4:	e048      	b.n	8001d88 <VL53LX_SetDistanceMode+0xc6>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffa1 	bl	8001c3e <IsL4>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <VL53LX_SetDistanceMode+0x4c>
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d102      	bne.n	8001d0e <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 8001d08:	f06f 0303 	mvn.w	r3, #3
 8001d0c:	e03c      	b.n	8001d88 <VL53LX_SetDistanceMode+0xc6>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001d14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10a      	bne.n	8001d32 <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	f107 0210 	add.w	r2, r7, #16
 8001d24:	f107 010c 	add.w	r1, r7, #12
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f001 fe92 	bl	8003a52 <VL53LX_get_timeouts_us>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 8001d32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d107      	bne.n	8001d4a <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff21 	bl	8001b88 <SetPresetModeL3CX>
 8001d46:	4603      	mov	r3, r0
 8001d48:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 8001d4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <VL53LX_SetDistanceMode+0x9c>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8001d58:	3320      	adds	r3, #32
 8001d5a:	78fa      	ldrb	r2, [r7, #3]
 8001d5c:	701a      	strb	r2, [r3, #0]
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001d5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10e      	bne.n	8001d84 <VL53LX_SetDistanceMode+0xc2>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8001d66:	68f9      	ldr	r1, [r7, #12]
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f001 fe37 	bl	80039e0 <VL53LX_set_timeouts_us>
 8001d72:	4603      	mov	r3, r0
 8001d74:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 8001d76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d102      	bne.n	8001d84 <VL53LX_SetDistanceMode+0xc2>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001d84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3720      	adds	r7, #32
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001dac:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 8001dae:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4a31      	ldr	r2, [pc, #196]	; (8001e78 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d902      	bls.n	8001dbe <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001db8:	23fc      	movs	r3, #252	; 0xfc
 8001dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53LX_ERROR_NONE)
 8001dbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10b      	bne.n	8001dde <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	f107 0210 	add.w	r2, r7, #16
 8001dce:	f107 010c 	add.w	r1, r7, #12
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f001 fe3d 	bl	8003a52 <VL53LX_get_timeouts_us>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 8001dde:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001de2:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 8001de4:	2306      	movs	r3, #6
 8001de6:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff28 	bl	8001c3e <IsL4>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 8001df4:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 8001df6:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d803      	bhi.n	8001e08 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001e00:	23fc      	movs	r3, #252	; 0xfc
 8001e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e06:	e003      	b.n	8001e10 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8001e0e:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001e10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d11c      	bne.n	8001e52 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	6a3a      	ldr	r2, [r7, #32]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d203      	bcs.n	8001e28 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 8001e20:	23fc      	movs	r3, #252	; 0xfc
 8001e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e26:	e00d      	b.n	8001e44 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 8001e32:	68f9      	ldr	r1, [r7, #12]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f001 fdd1 	bl	80039e0 <VL53LX_set_timeouts_us>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 8001e44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001e52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d105      	bne.n	8001e66 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd6>
		VL53LXDevDataSet(Dev,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8001e60:	3324      	adds	r3, #36	; 0x24
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	601a      	str	r2, [r3, #0]
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001e66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3728      	adds	r7, #40	; 0x28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	00086470 	.word	0x00086470
 8001e78:	00989680 	.word	0x00989680
 8001e7c:	00030d40 	.word	0x00030d40

08001e80 <VL53LX_SetUserROI>:



VL53LX_Error VL53LX_SetUserROI(VL53LX_DEV Dev,
		VL53LX_UserRoi_t *pRoi)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b092      	sub	sp, #72	; 0x48
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53LX_zone_config_t  zone_cfg;
	uint8_t x_centre, y_centre, width, height;

	Status = CheckValidRectRoi(*pRoi);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2300      	movs	r3, #0
 8001e96:	4613      	mov	r3, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff feec 	bl	8001c76 <CheckValidRectRoi>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (Status != VL53LX_ERROR_NONE)
 8001ea4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <VL53LX_SetUserROI+0x32>
		return VL53LX_ERROR_INVALID_PARAMS;
 8001eac:	f06f 0303 	mvn.w	r3, #3
 8001eb0:	e050      	b.n	8001f54 <VL53LX_SetUserROI+0xd4>

	x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	789b      	ldrb	r3, [r3, #2]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	0fda      	lsrs	r2, r3, #31
 8001ec2:	4413      	add	r3, r2
 8001ec4:	105b      	asrs	r3, r3, #1
 8001ec6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	785b      	ldrb	r3, [r3, #1]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	78db      	ldrb	r3, [r3, #3]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	0fda      	lsrs	r2, r3, #31
 8001eda:	4413      	add	r3, r2
 8001edc:	105b      	asrs	r3, r3, #1
 8001ede:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	width =    (pRoi->BotRightX - pRoi->TopLeftX);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	789a      	ldrb	r2, [r3, #2]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	785a      	ldrb	r2, [r3, #1]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	78db      	ldrb	r3, [r3, #3]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	zone_cfg.max_zones = 1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	733b      	strb	r3, [r7, #12]
	zone_cfg.active_zones = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	737b      	strb	r3, [r7, #13]
	zone_cfg.user_zones[0].x_centre = x_centre;
 8001f06:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001f0a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	zone_cfg.user_zones[0].y_centre = y_centre;
 8001f0e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001f12:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	zone_cfg.user_zones[0].width = width;
 8001f16:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001f1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	zone_cfg.user_zones[0].height = height;
 8001f1e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if ((width < 3) || (height < 3))
 8001f26:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d903      	bls.n	8001f36 <VL53LX_SetUserROI+0xb6>
 8001f2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d803      	bhi.n	8001f3e <VL53LX_SetUserROI+0xbe>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001f36:	23fc      	movs	r3, #252	; 0xfc
 8001f38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001f3c:	e008      	b.n	8001f50 <VL53LX_SetUserROI+0xd0>
	else
		Status =  VL53LX_set_zone_config(Dev, &zone_cfg);
 8001f3e:	f107 030c 	add.w	r3, r7, #12
 8001f42:	4619      	mov	r1, r3
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f001 fe68 	bl	8003c1a <VL53LX_set_zone_config>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	LOG_FUNCTION_END(Status);
	return Status;
 8001f50:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3748      	adds	r7, #72	; 0x48
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3318      	adds	r3, #24
 8001f6c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f001 f90c 	bl	800318c <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001f74:	2300      	movs	r3, #0
 8001f76:	75bb      	strb	r3, [r7, #22]
 8001f78:	e01a      	b.n	8001fb0 <VL53LX_StartMeasurement+0x54>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8001f7a:	7dbb      	ldrb	r3, [r7, #22]
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001f82:	3308      	adds	r3, #8
 8001f84:	2100      	movs	r1, #0
 8001f86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8001f8a:	7dbb      	ldrb	r3, [r7, #22]
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001f94:	3318      	adds	r3, #24
 8001f96:	22ff      	movs	r2, #255	; 0xff
 8001f98:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8001f9a:	7dbb      	ldrb	r3, [r7, #22]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001fa4:	331c      	adds	r3, #28
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001faa:	7dbb      	ldrb	r3, [r7, #22]
 8001fac:	3301      	adds	r3, #1
 8001fae:	75bb      	strb	r3, [r7, #22]
 8001fb0:	7dbb      	ldrb	r3, [r7, #22]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d9e1      	bls.n	8001f7a <VL53LX_StartMeasurement+0x1e>
	}
	pdev->PreviousStreamCount = 0;
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001fbc:	3321      	adds	r3, #33	; 0x21
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = 0;
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001fc8:	3320      	adds	r3, #32
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7edb      	ldrb	r3, [r3, #27]
 8001fd2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 8001fd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d107      	bne.n	8001fec <VL53LX_StartMeasurement+0x90>
		Status = VL53LX_init_and_start_range(
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	2206      	movs	r2, #6
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f001 ff80 	bl	8003ee8 <VL53LX_init_and_start_range>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 8001fec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <VL53LX_StopMeasurement>:

VL53LX_Error VL53LX_StopMeasurement(VL53LX_DEV Dev)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_stop_range(Dev);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f002 f9f9 	bl	80043fc <VL53LX_stop_range>
 800200a:	4603      	mov	r3, r0
 800200c:	73fb      	strb	r3, [r7, #15]

	VL53LX_unload_patch(Dev);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f001 f9ac 	bl	800336c <VL53LX_unload_patch>

	LOG_FUNCTION_END(Status);
	return Status;
 8002014:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <VL53LX_ClearInterruptAndStartMeasurement>:


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	7edb      	ldrb	r3, [r3, #27]
 8002030:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 8002032:	7bbb      	ldrb	r3, [r7, #14]
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f002 fedc 	bl	8004df4 <VL53LX_clear_interrupt_and_enable_next_range>
 800203c:	4603      	mov	r3, r0
 800203e:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002040:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 800205a:	6839      	ldr	r1, [r7, #0]
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f00e fa7a 	bl	8010556 <VL53LX_is_new_data_ready>
 8002062:	4603      	mov	r3, r0
 8002064:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002066:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <ConvertStatusHisto>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	3b05      	subs	r3, #5
 8002082:	2b12      	cmp	r3, #18
 8002084:	d840      	bhi.n	8002108 <ConvertStatusHisto+0x94>
 8002086:	a201      	add	r2, pc, #4	; (adr r2, 800208c <ConvertStatusHisto+0x18>)
 8002088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208c:	080020d9 	.word	0x080020d9
 8002090:	080020df 	.word	0x080020df
 8002094:	080020eb 	.word	0x080020eb
 8002098:	08002109 	.word	0x08002109
 800209c:	08002103 	.word	0x08002103
 80020a0:	08002109 	.word	0x08002109
 80020a4:	08002109 	.word	0x08002109
 80020a8:	08002109 	.word	0x08002109
 80020ac:	08002109 	.word	0x08002109
 80020b0:	08002109 	.word	0x08002109
 80020b4:	08002109 	.word	0x08002109
 80020b8:	08002109 	.word	0x08002109
 80020bc:	08002109 	.word	0x08002109
 80020c0:	08002109 	.word	0x08002109
 80020c4:	080020e5 	.word	0x080020e5
 80020c8:	080020f7 	.word	0x080020f7
 80020cc:	08002109 	.word	0x08002109
 80020d0:	080020fd 	.word	0x080020fd
 80020d4:	080020f1 	.word	0x080020f1
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80020d8:	2304      	movs	r3, #4
 80020da:	73fb      	strb	r3, [r7, #15]
		break;
 80020dc:	e016      	b.n	800210c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
		break;
 80020e2:	e013      	b.n	800210c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 80020e4:	2306      	movs	r3, #6
 80020e6:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 80020e8:	e010      	b.n	800210c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 80020ea:	2307      	movs	r3, #7
 80020ec:	73fb      	strb	r3, [r7, #15]
		break;
 80020ee:	e00d      	b.n	800210c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 80020f0:	230c      	movs	r3, #12
 80020f2:	73fb      	strb	r3, [r7, #15]
		break;
 80020f4:	e00a      	b.n	800210c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 80020f6:	2307      	movs	r3, #7
 80020f8:	73fb      	strb	r3, [r7, #15]
		break;
 80020fa:	e007      	b.n	800210c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 80020fc:	230b      	movs	r3, #11
 80020fe:	73fb      	strb	r3, [r7, #15]
		break;
 8002100:	e004      	b.n	800210c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
		break;
 8002106:	e001      	b.n	800210c <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 8002108:	23ff      	movs	r3, #255	; 0xff
 800210a:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop

0800211c <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08e      	sub	sp, #56	; 0x38
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	4608      	mov	r0, r1
 8002126:	4611      	mov	r1, r2
 8002128:	461a      	mov	r2, r3
 800212a:	4603      	mov	r3, r0
 800212c:	70fb      	strb	r3, [r7, #3]
 800212e:	460b      	mov	r3, r1
 8002130:	70bb      	strb	r3, [r7, #2]
 8002132:	4613      	mov	r3, r2
 8002134:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002136:	2300      	movs	r3, #0
 8002138:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	VL53LX_LLDriverData_t *pdev =
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3318      	adds	r3, #24
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 8002142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002144:	33f8      	adds	r3, #248	; 0xf8
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800214c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800214e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 800215a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800215c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800215e:	025b      	lsls	r3, r3, #9
 8002160:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8002162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002164:	6a3a      	ldr	r2, [r7, #32]
 8002166:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8002168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800216a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800216c:	025b      	lsls	r3, r3, #9
 800216e:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8002170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8002176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002178:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800217a:	025b      	lsls	r3, r3, #9
 800217c:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800217e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8002184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002186:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800218a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800218c:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 800218e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002190:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8002194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002196:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8002198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800219a:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 800219e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a0:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 80021a2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80021a6:	2b11      	cmp	r3, #17
 80021a8:	d009      	beq.n	80021be <SetTargetData+0xa2>
 80021aa:	2b11      	cmp	r3, #17
 80021ac:	dc0f      	bgt.n	80021ce <SetTargetData+0xb2>
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	dc02      	bgt.n	80021b8 <SetTargetData+0x9c>
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	dc03      	bgt.n	80021be <SetTargetData+0xa2>
 80021b6:	e00a      	b.n	80021ce <SetTargetData+0xb2>
 80021b8:	2b0d      	cmp	r3, #13
 80021ba:	d004      	beq.n	80021c6 <SetTargetData+0xaa>
 80021bc:	e007      	b.n	80021ce <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 80021be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c0:	2205      	movs	r2, #5
 80021c2:	749a      	strb	r2, [r3, #18]
		break;
 80021c4:	e006      	b.n	80021d4 <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 80021c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c8:	220d      	movs	r2, #13
 80021ca:	749a      	strb	r2, [r3, #18]
		break;
 80021cc:	e002      	b.n	80021d4 <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 80021ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d0:	2200      	movs	r2, #0
 80021d2:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 80021d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d6:	7c9b      	ldrb	r3, [r3, #18]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d117      	bne.n	800220c <SetTargetData+0xf0>
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d114      	bne.n	800220c <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 80021e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e4:	22ff      	movs	r2, #255	; 0xff
 80021e6:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 80021e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ea:	2200      	movs	r2, #0
 80021ec:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 80021ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f0:	2200      	movs	r2, #0
 80021f2:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 80021f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f6:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80021fa:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 80021fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021fe:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002202:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 8002204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002206:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800220a:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 800220c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800220e:	7c9b      	ldrb	r3, [r3, #18]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d108      	bne.n	8002226 <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 8002214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff2b 	bl	8002074 <ConvertStatusHisto>
 800221e:	4603      	mov	r3, r0
 8002220:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 8002222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002224:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 8002226:	f107 030c 	add.w	r3, r7, #12
 800222a:	461a      	mov	r2, r3
 800222c:	f248 0191 	movw	r1, #32913	; 0x8091
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f003 fa37 	bl	80056a4 <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8002236:	78bb      	ldrb	r3, [r7, #2]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8002244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002246:	8a1b      	ldrh	r3, [r3, #16]
 8002248:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	86bb      	strh	r3, [r7, #52]	; 0x34

	pRangeData->ExtendedRange = 0;
 800224e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002250:	2200      	movs	r2, #0
 8002252:	74da      	strb	r2, [r3, #19]

	if ((active_results != 1) ||
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d106      	bne.n	8002268 <SetTargetData+0x14c>
		(pdev->PreviousRangeActiveResults != 1))
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002260:	3320      	adds	r3, #32
 8002262:	781b      	ldrb	r3, [r3, #0]
	if ((active_results != 1) ||
 8002264:	2b01      	cmp	r3, #1
 8002266:	d001      	beq.n	800226c <SetTargetData+0x150>
		ExtendedRangeEnabled = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 81dc 	beq.w	800262c <SetTargetData+0x510>
		(pRangeData->RangeStatus ==
 8002274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002276:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 8002278:	2b07      	cmp	r3, #7
 800227a:	d004      	beq.n	8002286 <SetTargetData+0x16a>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 800227c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800227e:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002280:	2b04      	cmp	r3, #4
 8002282:	f040 81d3 	bne.w	800262c <SetTargetData+0x510>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8002286:	787b      	ldrb	r3, [r7, #1]
 8002288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800228a:	4413      	add	r3, r2
 800228c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002290:	3318      	adds	r3, #24
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b07      	cmp	r3, #7
 8002296:	d01c      	beq.n	80022d2 <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8002298:	787b      	ldrb	r3, [r7, #1]
 800229a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800229c:	4413      	add	r3, r2
 800229e:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80022a2:	3318      	adds	r3, #24
 80022a4:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d013      	beq.n	80022d2 <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 80022aa:	787b      	ldrb	r3, [r7, #1]
 80022ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80022b4:	3318      	adds	r3, #24
 80022b6:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f040 81b7 	bne.w	800262c <SetTargetData+0x510>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 80022be:	787b      	ldrb	r3, [r7, #1]
 80022c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80022c8:	331c      	adds	r3, #28
 80022ca:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	f040 81ad 	bne.w	800262c <SetTargetData+0x510>
	{
		if (((pdev->PreviousStreamCount) ==
 80022d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80022d8:	3321      	adds	r3, #33	; 0x21
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 80022e4:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d00c      	beq.n	8002304 <SetTargetData+0x1e8>
		|| ((pdev->PreviousStreamCount) ==
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80022f0:	3321      	adds	r3, #33	; 0x21
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 80022f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f8:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 80022fc:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 80022fe:	429a      	cmp	r2, r3
 8002300:	f040 816b 	bne.w	80025da <SetTargetData+0x4be>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8002304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002306:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800230a:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 800230c:	787b      	ldrb	r3, [r7, #1]
 800230e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002310:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8002314:	3308      	adds	r3, #8
 8002316:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800231a:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	b29b      	uxth	r3, r3
 8002320:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 8002322:	2301      	movs	r3, #1
 8002324:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		switch (pdev->preset_mode) {
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	785b      	ldrb	r3, [r3, #1]
 800232c:	2b21      	cmp	r3, #33	; 0x21
 800232e:	d008      	beq.n	8002342 <SetTargetData+0x226>
 8002330:	2b21      	cmp	r3, #33	; 0x21
 8002332:	f300 814e 	bgt.w	80025d2 <SetTargetData+0x4b6>
 8002336:	2b1b      	cmp	r3, #27
 8002338:	f000 80d7 	beq.w	80024ea <SetTargetData+0x3ce>
 800233c:	2b1e      	cmp	r3, #30
 800233e:	d004      	beq.n	800234a <SetTargetData+0x22e>
 8002340:	e147      	b.n	80025d2 <SetTargetData+0x4b6>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002348:	e148      	b.n	80025dc <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8002350:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002354:	429a      	cmp	r2, r3
 8002356:	dd0e      	ble.n	8002376 <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8002358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235a:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800235e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002362:	429a      	cmp	r2, r3
 8002364:	da07      	bge.n	8002376 <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8002366:	7dfb      	ldrb	r3, [r7, #23]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d104      	bne.n	8002376 <SetTargetData+0x25a>
					sequency == 1) {
					AddOffset =
 800236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002372:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002374:	e0b8      	b.n	80024e8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8002376:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237c:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8002380:	425b      	negs	r3, r3
 8002382:	429a      	cmp	r2, r3
 8002384:	da0f      	bge.n	80023a6 <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8002386:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800238a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238c:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 8002390:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8002392:	429a      	cmp	r2, r3
 8002394:	dd07      	ble.n	80023a6 <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8002396:	7dfb      	ldrb	r3, [r7, #23]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d104      	bne.n	80023a6 <SetTargetData+0x28a>
					sequency == 0) {
					AddOffset =
 800239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239e:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 80023a2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80023a4:	e0a0      	b.n	80024e8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80023a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a8:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80023ac:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dd0e      	ble.n	80023d2 <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80023b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b6:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80023ba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023be:	429a      	cmp	r2, r3
 80023c0:	da07      	bge.n	80023d2 <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80023c2:	7dfb      	ldrb	r3, [r7, #23]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d104      	bne.n	80023d2 <SetTargetData+0x2b6>
					sequency == 0) {
					AddOffset =
 80023c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ca:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80023ce:	86bb      	strh	r3, [r7, #52]	; 0x34
 80023d0:	e08a      	b.n	80024e8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80023d2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d8:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80023dc:	425b      	negs	r3, r3
 80023de:	429a      	cmp	r2, r3
 80023e0:	da0f      	bge.n	8002402 <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80023e2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 80023ec:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80023ee:	429a      	cmp	r2, r3
 80023f0:	dd07      	ble.n	8002402 <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d104      	bne.n	8002402 <SetTargetData+0x2e6>
					sequency == 1) {
					AddOffset =
 80023f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fa:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80023fe:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002400:	e072      	b.n	80024e8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002408:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800240c:	429a      	cmp	r2, r3
 800240e:	dd0e      	ble.n	800242e <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8002410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002412:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8002416:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800241a:	429a      	cmp	r2, r3
 800241c:	da07      	bge.n	800242e <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 800241e:	7dfb      	ldrb	r3, [r7, #23]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d104      	bne.n	800242e <SetTargetData+0x312>
					sequency == 1) {
					AddOffset =
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800242a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800242c:	e05c      	b.n	80024e8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 800242e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002434:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002438:	425b      	negs	r3, r3
 800243a:	429a      	cmp	r2, r3
 800243c:	da0f      	bge.n	800245e <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800243e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8002448:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 800244a:	429a      	cmp	r2, r3
 800244c:	dd07      	ble.n	800245e <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800244e:	7dfb      	ldrb	r3, [r7, #23]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d104      	bne.n	800245e <SetTargetData+0x342>
					sequency == 0) {
					AddOffset =
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002456:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800245a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800245c:	e044      	b.n	80024e8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002464:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002468:	429a      	cmp	r2, r3
 800246a:	dd0e      	ble.n	800248a <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 800246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246e:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002472:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002476:	429a      	cmp	r2, r3
 8002478:	da07      	bge.n	800248a <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 800247a:	7dfb      	ldrb	r3, [r7, #23]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d104      	bne.n	800248a <SetTargetData+0x36e>
					sequency == 0) {
					AddOffset =
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8002486:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002488:	e02e      	b.n	80024e8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800248a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002490:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002494:	425b      	negs	r3, r3
 8002496:	429a      	cmp	r2, r3
 8002498:	da0f      	bge.n	80024ba <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800249a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 80024a4:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80024a6:	429a      	cmp	r2, r3
 80024a8:	dd07      	ble.n	80024ba <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80024aa:	7dfb      	ldrb	r3, [r7, #23]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d104      	bne.n	80024ba <SetTargetData+0x39e>
					sequency == 1) {
					AddOffset =
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80024b6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80024b8:	e016      	b.n	80024e8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 80024c0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	da0b      	bge.n	80024e0 <SetTargetData+0x3c4>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80024ce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	dd04      	ble.n	80024e0 <SetTargetData+0x3c4>
					AddOffset =
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 80024dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80024de:	e003      	b.n	80024e8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 80024e6:	e079      	b.n	80025dc <SetTargetData+0x4c0>
 80024e8:	e078      	b.n	80025dc <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 80024f0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	dd0e      	ble.n	8002516 <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80024fe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002502:	429a      	cmp	r2, r3
 8002504:	da07      	bge.n	8002516 <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8002506:	7dfb      	ldrb	r3, [r7, #23]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d104      	bne.n	8002516 <SetTargetData+0x3fa>
					sequency == 0) {
					AddOffset =
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250e:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8002512:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002514:	e05c      	b.n	80025d0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8002516:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8002520:	425b      	negs	r3, r3
 8002522:	429a      	cmp	r2, r3
 8002524:	da0f      	bge.n	8002546 <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8002526:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800252a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252c:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8002530:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8002532:	429a      	cmp	r2, r3
 8002534:	dd07      	ble.n	8002546 <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8002536:	7dfb      	ldrb	r3, [r7, #23]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d104      	bne.n	8002546 <SetTargetData+0x42a>
					sequency == 1) {
					AddOffset =
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253e:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002542:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002544:	e044      	b.n	80025d0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800254c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002550:	429a      	cmp	r2, r3
 8002552:	dd0e      	ble.n	8002572 <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8002554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002556:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 800255a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800255e:	429a      	cmp	r2, r3
 8002560:	da07      	bge.n	8002572 <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d104      	bne.n	8002572 <SetTargetData+0x456>
					sequency == 1) {
					AddOffset =
 8002568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800256e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002570:	e02e      	b.n	80025d0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8002572:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002578:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800257c:	425b      	negs	r3, r3
 800257e:	429a      	cmp	r2, r3
 8002580:	da0f      	bge.n	80025a2 <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8002582:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002588:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 800258c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800258e:	429a      	cmp	r2, r3
 8002590:	dd07      	ble.n	80025a2 <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8002592:	7dfb      	ldrb	r3, [r7, #23]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d104      	bne.n	80025a2 <SetTargetData+0x486>
					sequency == 0) {
					AddOffset =
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 800259e:	86bb      	strh	r3, [r7, #52]	; 0x34
 80025a0:	e016      	b.n	80025d0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80025a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a4:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 80025a8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	da0b      	bge.n	80025c8 <SetTargetData+0x4ac>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 80025b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b2:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80025b6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	dd04      	ble.n	80025c8 <SetTargetData+0x4ac>
					AddOffset =
 80025be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80025c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80025c6:	e003      	b.n	80025d0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 80025ce:	e005      	b.n	80025dc <SetTargetData+0x4c0>
 80025d0:	e004      	b.n	80025dc <SetTargetData+0x4c0>

			default:
				uwr_status = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 80025d8:	e000      	b.n	80025dc <SetTargetData+0x4c0>
			}
		}
 80025da:	bf00      	nop

		if (uwr_status) {
 80025dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d023      	beq.n	800262c <SetTargetData+0x510>
			pRangeData->RangeMilliMeter += AddOffset;
 80025e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80025ee:	4413      	add	r3, r2
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	b21a      	sxth	r2, r3
 80025f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025f6:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 80025f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025fe:	b29a      	uxth	r2, r3
 8002600:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002602:	4413      	add	r3, r2
 8002604:	b29b      	uxth	r3, r3
 8002606:	b21a      	sxth	r2, r3
 8002608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800260a:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 800260c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800260e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002612:	b29a      	uxth	r2, r3
 8002614:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002616:	4413      	add	r3, r2
 8002618:	b29b      	uxth	r3, r3
 800261a:	b21a      	sxth	r2, r3
 800261c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800261e:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 8002620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002622:	2201      	movs	r2, #1
 8002624:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 8002626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002628:	2200      	movs	r2, #0
 800262a:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 800262c:	787b      	ldrb	r3, [r7, #1]
 800262e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002630:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8002634:	3308      	adds	r3, #8
 8002636:	8ab9      	ldrh	r1, [r7, #20]
 8002638:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 800263c:	787b      	ldrb	r3, [r7, #1]
 800263e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002640:	7c91      	ldrb	r1, [r2, #18]
 8002642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002644:	4413      	add	r3, r2
 8002646:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800264a:	3318      	adds	r3, #24
 800264c:	460a      	mov	r2, r1
 800264e:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8002650:	787b      	ldrb	r3, [r7, #1]
 8002652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002654:	7cd1      	ldrb	r1, [r2, #19]
 8002656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002658:	4413      	add	r3, r2
 800265a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800265e:	331c      	adds	r3, #28
 8002660:	460a      	mov	r2, r1
 8002662:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800266a:	3320      	adds	r3, #32
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	701a      	strb	r2, [r3, #0]

	Range = pRangeData->RangeMilliMeter;
 8002670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002672:	8a1b      	ldrh	r3, [r3, #16]
 8002674:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8002676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002678:	7c9b      	ldrb	r3, [r3, #18]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d110      	bne.n	80026a0 <SetTargetData+0x584>
 800267e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002682:	2b00      	cmp	r3, #0
 8002684:	da0c      	bge.n	80026a0 <SetTargetData+0x584>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 8002686:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <SetTargetData+0x590>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	429a      	cmp	r2, r3
 8002690:	da03      	bge.n	800269a <SetTargetData+0x57e>
			pRangeData->RangeStatus =
 8002692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002694:	220e      	movs	r2, #14
 8002696:	749a      	strb	r2, [r3, #18]
 8002698:	e002      	b.n	80026a0 <SetTargetData+0x584>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800269a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800269c:	2200      	movs	r2, #0
 800269e:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 80026a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3738      	adds	r7, #56	; 0x38
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000014 	.word	0x20000014

080026b0 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b08f      	sub	sp, #60	; 0x3c
 80026b4:	af04      	add	r7, sp, #16
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3318      	adds	r3, #24
 80026c0:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	7c9a      	ldrb	r2, [r3, #18]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


	pMultiRangingData->TimeStamp = 0;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	78da      	ldrb	r2, [r3, #3]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	7c9b      	ldrb	r3, [r3, #18]
 80026ee:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 80026f0:	7ffb      	ldrb	r3, [r7, #31]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <SetMeasurementData+0x4e>

		iteration = 1;
 80026f6:	2301      	movs	r3, #1
 80026f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80026fc:	e002      	b.n	8002704 <SetMeasurementData+0x54>
	else
		iteration = ActiveResults;
 80026fe:	7ffb      	ldrb	r3, [r7, #31]
 8002700:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (i = 0; i < iteration; i++) {
 8002704:	2300      	movs	r3, #0
 8002706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800270a:	e035      	b.n	8002778 <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 800270c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	3308      	adds	r3, #8
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 8002720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002724:	224c      	movs	r2, #76	; 0x4c
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	3310      	adds	r3, #16
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	4413      	add	r3, r2
 8002730:	3304      	adds	r3, #4
 8002732:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 8002734:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002738:	2b00      	cmp	r3, #0
 800273a:	d113      	bne.n	8002764 <SetMeasurementData+0xb4>
			Status = SetTargetData(Dev, ActiveResults,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	7918      	ldrb	r0, [r3, #4]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	7c1b      	ldrb	r3, [r3, #16]
 8002744:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8002748:	7ff9      	ldrb	r1, [r7, #31]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	9202      	str	r2, [sp, #8]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	9201      	str	r2, [sp, #4]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	4623      	mov	r3, r4
 8002756:	4602      	mov	r2, r0
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f7ff fcdf 	bl	800211c <SetTargetData>
 800275e:	4603      	mov	r3, r0
 8002760:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	for (i = 0; i < iteration; i++) {
 800276e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002772:	3301      	adds	r3, #1
 8002774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002778:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800277c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002780:	429a      	cmp	r2, r3
 8002782:	d3c3      	bcc.n	800270c <SetMeasurementData+0x5c>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	f893 243f 	ldrb.w	r2, [r3, #1087]	; 0x43f
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002790:	3321      	adds	r3, #33	; 0x21
 8002792:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002794:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800279c:	e01f      	b.n	80027de <SetMeasurementData+0x12e>
		pdev->PreviousRangeMilliMeter[i] = 0;
 800279e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027a2:	6a3a      	ldr	r2, [r7, #32]
 80027a4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80027a8:	3308      	adds	r3, #8
 80027aa:	2100      	movs	r1, #0
 80027ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 80027b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027b4:	6a3a      	ldr	r2, [r7, #32]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80027bc:	3318      	adds	r3, #24
 80027be:	22ff      	movs	r2, #255	; 0xff
 80027c0:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 80027c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027c6:	6a3a      	ldr	r2, [r7, #32]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80027ce:	331c      	adds	r3, #28
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80027d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027d8:	3301      	adds	r3, #1
 80027da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80027de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d9db      	bls.n	800279e <SetMeasurementData+0xee>
	}

	return Status;
 80027e6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	372c      	adds	r7, #44	; 0x2c
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd90      	pop	{r4, r7, pc}

080027f2 <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3318      	adds	r3, #24
 8002804:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800280c:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 800280e:	225c      	movs	r2, #92	; 0x5c
 8002810:	21ff      	movs	r1, #255	; 0xff
 8002812:	6838      	ldr	r0, [r7, #0]
 8002814:	f011 fc8c 	bl	8014130 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	2102      	movs	r1, #2
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f001 fee7 	bl	80045f0 <VL53LX_get_device_results>
 8002822:	4603      	mov	r3, r0
 8002824:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	68f9      	ldr	r1, [r7, #12]
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff ff40 	bl	80026b0 <SetMeasurementData>
 8002830:	4603      	mov	r3, r0
 8002832:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 8002834:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <VL53LX_PerformRefSpadManagement>:
	return Status;
}


VL53LX_Error VL53LX_PerformRefSpadManagement(VL53LX_DEV Dev)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b090      	sub	sp, #64	; 0x40
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002848:	2300      	movs	r3, #0
 800284a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 800284e:	f240 3305 	movw	r3, #773	; 0x305
 8002852:	81bb      	strh	r3, [r7, #12]
	VL53LX_customer_nvm_managed_t *pc;
	VL53LX_DistanceModes DistanceMode;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3318      	adds	r3, #24
 8002858:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 800285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285c:	3348      	adds	r3, #72	; 0x48
 800285e:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53LX_ERROR_NONE) {
 8002860:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002864:	2b00      	cmp	r3, #0
 8002866:	d11c      	bne.n	80028a2 <VL53LX_PerformRefSpadManagement+0x62>
		DistanceMode = VL53LXDevDataGet(Dev,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800286e:	3320      	adds	r3, #32
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.DistanceMode);
		Status = VL53LX_run_ref_spad_char(Dev, &RawStatus);
 8002876:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800287a:	4619      	mov	r1, r3
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f8e3 	bl	8002a48 <VL53LX_run_ref_spad_char>
 8002882:	4603      	mov	r3, r0
 8002884:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53LX_ERROR_NONE)
 8002888:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800288c:	2b00      	cmp	r3, #0
 800288e:	d108      	bne.n	80028a2 <VL53LX_PerformRefSpadManagement+0x62>
			Status = VL53LX_SetDistanceMode(Dev, DistanceMode);
 8002890:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002894:	4619      	mov	r1, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff fa13 	bl	8001cc2 <VL53LX_SetDistanceMode>
 800289c:	4603      	mov	r3, r0
 800289e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 80028a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80028a6:	f113 0f1d 	cmn.w	r3, #29
 80028aa:	d14e      	bne.n	800294a <VL53LX_PerformRefSpadManagement+0x10a>

		Status = VL53LX_read_nvm_raw_data(Dev,
 80028ac:	f107 0310 	add.w	r3, r7, #16
 80028b0:	2206      	movs	r2, #6
 80028b2:	2128      	movs	r1, #40	; 0x28
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f00c f991 	bl	800ebdc <VL53LX_read_nvm_raw_data>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53LX_ERROR_NONE)
 80028c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d109      	bne.n	80028dc <VL53LX_PerformRefSpadManagement+0x9c>
			Status = VL53LX_WriteMulti(Dev,
 80028c8:	f107 020c 	add.w	r2, r7, #12
 80028cc:	2302      	movs	r3, #2
 80028ce:	2114      	movs	r1, #20
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f00e f9c7 	bl	8010c64 <VL53LX_WriteMulti>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53LX_ERROR_NONE) {
 80028dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d105      	bne.n	80028f0 <VL53LX_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 80028e4:	7b3a      	ldrb	r2, [r7, #12]
 80028e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e8:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 80028ea:	7b7a      	ldrb	r2, [r7, #13]
 80028ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ee:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 80028f0:	f107 0310 	add.w	r3, r7, #16
 80028f4:	3310      	adds	r3, #16
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c



		if (Status == VL53LX_ERROR_NONE)
 80028f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d108      	bne.n	8002912 <VL53LX_PerformRefSpadManagement+0xd2>
			Status = VL53LX_WriteMulti(Dev,
 8002900:	2306      	movs	r3, #6
 8002902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002904:	210d      	movs	r1, #13
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f00e f9ac 	bl	8010c64 <VL53LX_WriteMulti>
 800290c:	4603      	mov	r3, r0
 800290e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53LX_ERROR_NONE) {
 8002912:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002916:	2b00      	cmp	r3, #0
 8002918:	d117      	bne.n	800294a <VL53LX_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	781a      	ldrb	r2, [r3, #0]
 800291e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002920:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8002922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002924:	785a      	ldrb	r2, [r3, #1]
 8002926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002928:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 800292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292c:	789a      	ldrb	r2, [r3, #2]
 800292e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002930:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8002932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002934:	78da      	ldrb	r2, [r3, #3]
 8002936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002938:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	791a      	ldrb	r2, [r3, #4]
 800293e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002940:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	795a      	ldrb	r2, [r3, #5]
 8002946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002948:	715a      	strb	r2, [r3, #5]
		}

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800294a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800294e:	4618      	mov	r0, r3
 8002950:	3740      	adds	r7, #64	; 0x40
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <VL53LX_SmudgeCorrectionEnable>:


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002964:	2300      	movs	r3, #0
 8002966:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 8002968:	2300      	movs	r3, #0
 800296a:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 800296c:	2300      	movs	r3, #0
 800296e:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 8002970:	2300      	movs	r3, #0
 8002972:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	2b03      	cmp	r3, #3
 8002978:	d84a      	bhi.n	8002a10 <VL53LX_SmudgeCorrectionEnable+0xb8>
 800297a:	a201      	add	r2, pc, #4	; (adr r2, 8002980 <VL53LX_SmudgeCorrectionEnable+0x28>)
 800297c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002980:	08002991 	.word	0x08002991
 8002984:	080029b1 	.word	0x080029b1
 8002988:	080029d1 	.word	0x080029d1
 800298c:	080029f1 	.word	0x080029f1
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f003 fd92 	bl	80064ba <VL53LX_dynamic_xtalk_correction_disable>
 8002996:	4603      	mov	r3, r0
 8002998:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f003 fda4 	bl	80064e8 <VL53LX_dynamic_xtalk_correction_apply_disable>
 80029a0:	4603      	mov	r3, r0
 80029a2:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f003 fdcd 	bl	8006544 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 80029aa:	4603      	mov	r3, r0
 80029ac:	733b      	strb	r3, [r7, #12]
		break;
 80029ae:	e032      	b.n	8002a16 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f003 fd6b 	bl	800648c <VL53LX_dynamic_xtalk_correction_enable>
 80029b6:	4603      	mov	r3, r0
 80029b8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f003 fdd9 	bl	8006572 <VL53LX_dynamic_xtalk_correction_apply_enable>
 80029c0:	4603      	mov	r3, r0
 80029c2:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f003 fdbd 	bl	8006544 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 80029ca:	4603      	mov	r3, r0
 80029cc:	733b      	strb	r3, [r7, #12]
		break;
 80029ce:	e022      	b.n	8002a16 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f003 fd5b 	bl	800648c <VL53LX_dynamic_xtalk_correction_enable>
 80029d6:	4603      	mov	r3, r0
 80029d8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f003 fdc9 	bl	8006572 <VL53LX_dynamic_xtalk_correction_apply_enable>
 80029e0:	4603      	mov	r3, r0
 80029e2:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f003 fd96 	bl	8006516 <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 80029ea:	4603      	mov	r3, r0
 80029ec:	733b      	strb	r3, [r7, #12]
		break;
 80029ee:	e012      	b.n	8002a16 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f003 fd4b 	bl	800648c <VL53LX_dynamic_xtalk_correction_enable>
 80029f6:	4603      	mov	r3, r0
 80029f8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f003 fd74 	bl	80064e8 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8002a00:	4603      	mov	r3, r0
 8002a02:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f003 fd9d 	bl	8006544 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	733b      	strb	r3, [r7, #12]
		break;
 8002a0e:	e002      	b.n	8002a16 <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002a10:	23fc      	movs	r3, #252	; 0xfc
 8002a12:	73fb      	strb	r3, [r7, #15]
		break;
 8002a14:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 8002a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10d      	bne.n	8002a3a <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8002a1e:	7bbb      	ldrb	r3, [r7, #14]
 8002a20:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8002a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8002a2a:	7b7b      	ldrb	r3, [r7, #13]
 8002a2c:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8002a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8002a36:	7b3b      	ldrb	r3, [r7, #12]
 8002a38:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop

08002a48 <VL53LX_run_ref_spad_char>:


VL53LX_Error VL53LX_run_ref_spad_char(
	VL53LX_DEV        Dev,
	VL53LX_Error     *pcal_status)
{
 8002a48:	b5b0      	push	{r4, r5, r7, lr}
 8002a4a:	b08c      	sub	sp, #48	; 0x30
 8002a4c:	af04      	add	r7, sp, #16
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3318      	adds	r3, #24
 8002a5a:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53LX_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a62:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002a64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d104      	bne.n	8002a76 <VL53LX_run_ref_spad_char+0x2e>
		status = VL53LX_enable_powerforce(Dev);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f005 fd62 	bl	8008536 <VL53LX_enable_powerforce>
 8002a72:	4603      	mov	r3, r0
 8002a74:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 8002a76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d117      	bne.n	8002aae <VL53LX_run_ref_spad_char+0x66>
		status =
		VL53LX_set_ref_spad_char_config(
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	7858      	ldrb	r0, [r3, #1]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	685c      	ldr	r4, [r3, #4]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	891d      	ldrh	r5, [r3, #8]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	899b      	ldrh	r3, [r3, #12]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	8952      	ldrh	r2, [r2, #10]
 8002a92:	69b9      	ldr	r1, [r7, #24]
 8002a94:	f8b1 12de 	ldrh.w	r1, [r1, #734]	; 0x2de
 8002a98:	9102      	str	r1, [sp, #8]
 8002a9a:	9201      	str	r2, [sp, #4]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	462b      	mov	r3, r5
 8002aa0:	4622      	mov	r2, r4
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f007 fb71 	bl	800a18c <VL53LX_set_ref_spad_char_config>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53LX_ERROR_NONE)
 8002aae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d107      	bne.n	8002ac6 <VL53LX_run_ref_spad_char+0x7e>
		status = VL53LX_run_device_test(
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	4619      	mov	r1, r3
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f890 	bl	8002be2 <VL53LX_run_device_test>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53LX_ERROR_NONE)
 8002ac6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d108      	bne.n	8002ae0 <VL53LX_run_ref_spad_char+0x98>
		status =
		VL53LX_ReadMulti(
 8002ace:	f107 020c 	add.w	r2, r7, #12
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	21d9      	movs	r1, #217	; 0xd9
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f00e f8fa 	bl	8010cd0 <VL53LX_ReadMulti>
 8002adc:	4603      	mov	r3, r0
 8002ade:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53LX_ERROR_NONE) {
 8002ae0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10a      	bne.n	8002afe <VL53LX_run_ref_spad_char+0xb6>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8002ae8:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8002af0:	331f      	adds	r3, #31
 8002af2:	701a      	strb	r2, [r3, #0]
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8002af4:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8002afc:	701a      	strb	r2, [r3, #0]
	}



	if (status == VL53LX_ERROR_NONE)
 8002afe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d108      	bne.n	8002b18 <VL53LX_run_ref_spad_char+0xd0>
		status =
			VL53LX_WriteMulti(
 8002b06:	f107 020c 	add.w	r2, r7, #12
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	2114      	movs	r1, #20
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f00e f8a8 	bl	8010c64 <VL53LX_WriteMulti>
 8002b14:	4603      	mov	r3, r0
 8002b16:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8002b18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d107      	bne.n	8002b30 <VL53LX_run_ref_spad_char+0xe8>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8002b20:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8002b28:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53LX_ERROR_NONE)
 8002b30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d108      	bne.n	8002b4a <VL53LX_run_ref_spad_char+0x102>
		status =
			VL53LX_ReadMulti(
 8002b38:	f107 020c 	add.w	r2, r7, #12
 8002b3c:	2306      	movs	r3, #6
 8002b3e:	21ac      	movs	r1, #172	; 0xac
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f00e f8c5 	bl	8010cd0 <VL53LX_ReadMulti>
 8002b46:	4603      	mov	r3, r0
 8002b48:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53LX_ERROR_NONE)
 8002b4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d108      	bne.n	8002b64 <VL53LX_run_ref_spad_char+0x11c>
		status =
			VL53LX_WriteMulti(
 8002b52:	f107 020c 	add.w	r2, r7, #12
 8002b56:	2306      	movs	r3, #6
 8002b58:	210d      	movs	r1, #13
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f00e f882 	bl	8010c64 <VL53LX_WriteMulti>
 8002b60:	4603      	mov	r3, r0
 8002b62:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53LX_ERROR_NONE) {
 8002b64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d117      	bne.n	8002b9c <VL53LX_run_ref_spad_char+0x154>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8002b6c:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8002b74:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8002b7c:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8002b8c:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8002b94:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53LX_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53LX_ERROR_NONE) {
 8002b9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d114      	bne.n	8002bce <VL53LX_run_ref_spad_char+0x186>

		switch (pdev->sys_results.result__range_status) {
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 8002baa:	2b10      	cmp	r3, #16
 8002bac:	d00c      	beq.n	8002bc8 <VL53LX_run_ref_spad_char+0x180>
 8002bae:	2b10      	cmp	r3, #16
 8002bb0:	dc0e      	bgt.n	8002bd0 <VL53LX_run_ref_spad_char+0x188>
 8002bb2:	2b0e      	cmp	r3, #14
 8002bb4:	d002      	beq.n	8002bbc <VL53LX_run_ref_spad_char+0x174>
 8002bb6:	2b0f      	cmp	r3, #15
 8002bb8:	d003      	beq.n	8002bc2 <VL53LX_run_ref_spad_char+0x17a>
 8002bba:	e009      	b.n	8002bd0 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53LX_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8002bbc:	23e4      	movs	r3, #228	; 0xe4
 8002bbe:	77fb      	strb	r3, [r7, #31]
			break;
 8002bc0:	e006      	b.n	8002bd0 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8002bc2:	23e3      	movs	r3, #227	; 0xe3
 8002bc4:	77fb      	strb	r3, [r7, #31]
			break;
 8002bc6:	e003      	b.n	8002bd0 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8002bc8:	23e2      	movs	r3, #226	; 0xe2
 8002bca:	77fb      	strb	r3, [r7, #31]
			break;
 8002bcc:	e000      	b.n	8002bd0 <VL53LX_run_ref_spad_char+0x188>
		}
	}
 8002bce:	bf00      	nop



	*pcal_status = status;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	7ffa      	ldrb	r2, [r7, #31]
 8002bd4:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8002bd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3720      	adds	r7, #32
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bdb0      	pop	{r4, r5, r7, pc}

08002be2 <VL53LX_run_device_test>:


VL53LX_Error VL53LX_run_device_test(
	VL53LX_DEV             Dev,
	VL53LX_DeviceTestMode  device_test_mode)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3318      	adds	r3, #24
 8002bf6:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002bfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d108      	bne.n	8002c16 <VL53LX_run_device_test+0x34>
		status =
			VL53LX_RdByte(
 8002c04:	f107 030b 	add.w	r3, r7, #11
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2130      	movs	r1, #48	; 0x30
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f00e f8f1 	bl	8010df4 <VL53LX_RdByte>
 8002c12:	4603      	mov	r3, r0
 8002c14:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53LX_ERROR_NONE)
 8002c16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d103      	bne.n	8002c26 <VL53LX_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8002c1e:	7afa      	ldrb	r2, [r7, #11]
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a


	if (status == VL53LX_ERROR_NONE)
 8002c26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <VL53LX_run_device_test+0x5a>
		status = VL53LX_start_test(
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	4619      	mov	r1, r3
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f005 fc03 	bl	800843e <VL53LX_start_test>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53LX_ERROR_NONE)
 8002c3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d104      	bne.n	8002c4e <VL53LX_run_device_test+0x6c>
		status = VL53LX_wait_for_test_completion(Dev);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f00d fc4d 	bl	80104e4 <VL53LX_wait_for_test_completion>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8002c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d108      	bne.n	8002c68 <VL53LX_run_device_test+0x86>
		status =
			VL53LX_ReadMulti(
 8002c56:	f107 020c 	add.w	r2, r7, #12
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	2189      	movs	r1, #137	; 0x89
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f00e f836 	bl	8010cd0 <VL53LX_ReadMulti>
 8002c64:	4603      	mov	r3, r0
 8002c66:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8002c68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d107      	bne.n	8002c80 <VL53LX_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8002c70:	7b3a      	ldrb	r2, [r7, #12]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		pdev->sys_results.result__report_status = comms_buffer[1];
 8002c78:	7b7a      	ldrb	r2, [r7, #13]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
	}



	pdev->sys_results.result__range_status &=
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53LX_ERROR_NONE) {
 8002c92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d108      	bne.n	8002cac <VL53LX_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53LX_ERROR_NONE)
 8002c9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d104      	bne.n	8002cac <VL53LX_run_device_test+0xca>
			status = VL53LX_clear_interrupt(Dev);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f005 fc6b 	bl	800857e <VL53LX_clear_interrupt>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53LX_ERROR_NONE)
 8002cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d105      	bne.n	8002cc0 <VL53LX_run_device_test+0xde>
		status =
			VL53LX_start_test(
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f005 fbc1 	bl	800843e <VL53LX_start_test>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8002cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	785b      	ldrb	r3, [r3, #1]
 8002cde:	2b21      	cmp	r3, #33	; 0x21
 8002ce0:	d006      	beq.n	8002cf0 <select_offset_per_vcsel+0x24>
 8002ce2:	2b21      	cmp	r3, #33	; 0x21
 8002ce4:	dc2a      	bgt.n	8002d3c <select_offset_per_vcsel+0x70>
 8002ce6:	2b1b      	cmp	r3, #27
 8002ce8:	d01b      	beq.n	8002d22 <select_offset_per_vcsel+0x56>
 8002cea:	2b1e      	cmp	r3, #30
 8002cec:	d00c      	beq.n	8002d08 <select_offset_per_vcsel+0x3c>
 8002cee:	e025      	b.n	8002d3c <select_offset_per_vcsel+0x70>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002d00:	3302      	adds	r3, #2
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	817b      	strh	r3, [r7, #10]
		break;
 8002d06:	e02b      	b.n	8002d60 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002d0e:	3304      	adds	r3, #4
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002d1a:	3306      	adds	r3, #6
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	817b      	strh	r3, [r7, #10]
		break;
 8002d20:	e01e      	b.n	8002d60 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002d28:	3308      	adds	r3, #8
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002d34:	330a      	adds	r3, #10
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	817b      	strh	r3, [r7, #10]
		break;
 8002d3a:	e011      	b.n	8002d60 <select_offset_per_vcsel+0x94>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002d42:	3308      	adds	r3, #8
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002d4e:	330a      	adds	r3, #10
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8002d54:	23fc      	movs	r3, #252	; 0xfc
 8002d56:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	801a      	strh	r2, [r3, #0]
		break;
 8002d5e:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002d66:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 8002d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10b      	bne.n	8002d88 <select_offset_per_vcsel+0xbc>
		*poffset = (isc & 0x01) ? tA : tB;
 8002d70:	7a7b      	ldrb	r3, [r7, #9]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <select_offset_per_vcsel+0xb4>
 8002d7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d7e:	e001      	b.n	8002d84 <select_offset_per_vcsel+0xb8>
 8002d80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	8013      	strh	r3, [r2, #0]

	return status;
 8002d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8002d98:	b490      	push	{r4, r7}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	4611      	mov	r1, r2
 8002da4:	461a      	mov	r2, r3
 8002da6:	460b      	mov	r3, r1
 8002da8:	71fb      	strb	r3, [r7, #7]
 8002daa:	4613      	mov	r3, r2
 8002dac:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002dca:	e021      	b.n	8002e10 <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8002dcc:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	0052      	lsls	r2, r2, #1
 8002dda:	441a      	add	r2, r3
 8002ddc:	00d3      	lsls	r3, r2, #3
 8002dde:	461a      	mov	r2, r3
 8002de0:	460b      	mov	r3, r1
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	440b      	add	r3, r1
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	4413      	add	r3, r2
 8002dea:	4423      	add	r3, r4
 8002dec:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8002df0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8002df4:	6a3a      	ldr	r2, [r7, #32]
 8002df6:	4413      	add	r3, r2
 8002df8:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8002dfa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	3206      	adds	r2, #6
 8002e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	4413      	add	r3, r2
 8002e08:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8002e0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e10:	79bb      	ldrb	r3, [r7, #6]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d3d8      	bcc.n	8002dcc <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d047      	beq.n	8002eb0 <vl53lx_diff_histo_stddev+0x118>
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d044      	beq.n	8002eb0 <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e2e:	e03a      	b.n	8002ea6 <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8002e30:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	0052      	lsls	r2, r2, #1
 8002e3e:	441a      	add	r2, r3
 8002e40:	00d3      	lsls	r3, r2, #3
 8002e42:	461a      	mov	r2, r3
 8002e44:	460b      	mov	r3, r1
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	440b      	add	r3, r1
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	4413      	add	r3, r2
 8002e4e:	4423      	add	r3, r4
 8002e50:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8002e54:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002e58:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e60:	fb02 f203 	mul.w	r2, r2, r3
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e6a:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8002e6c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	3206      	adds	r2, #6
 8002e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e7a:	fb02 f203 	mul.w	r2, r2, r3
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e84:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8002e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	69b9      	ldr	r1, [r7, #24]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8002e90:	69b8      	ldr	r0, [r7, #24]
 8002e92:	6979      	ldr	r1, [r7, #20]
 8002e94:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	441a      	add	r2, r3
 8002e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9e:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8002ea0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002ea6:	79bb      	ldrb	r3, [r7, #6]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d3bf      	bcc.n	8002e30 <vl53lx_diff_histo_stddev+0x98>
	}
}
 8002eb0:	bf00      	nop
 8002eb2:	3728      	adds	r7, #40	; 0x28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc90      	pop	{r4, r7}
 8002eb8:	4770      	bx	lr

08002eba <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 8002eba:	b5b0      	push	{r4, r5, r7, lr}
 8002ebc:	b08c      	sub	sp, #48	; 0x30
 8002ebe:	af02      	add	r7, sp, #8
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3318      	adds	r3, #24
 8002ec8:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8002eea:	2318      	movs	r3, #24
 8002eec:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8002eee:	f107 0314 	add.w	r3, r7, #20
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f248 018f 	movw	r1, #32911	; 0x808f
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f002 fbd3 	bl	80056a4 <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8002efe:	f107 0310 	add.w	r3, r7, #16
 8002f02:	461a      	mov	r2, r3
 8002f04:	f248 018e 	movw	r1, #32910	; 0x808e
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f002 fbcb 	bl	80056a4 <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f14:	330d      	adds	r3, #13
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f040 811a 	bne.w	8003152 <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8002f38:	7efb      	ldrb	r3, [r7, #27]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	7eba      	ldrb	r2, [r7, #26]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f4a:	330c      	adds	r3, #12
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <vl53lx_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f58:	330c      	adds	r3, #12
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f62:	e004      	b.n	8002f6e <vl53lx_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8002f6e:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8002f72:	7efb      	ldrb	r3, [r7, #27]
 8002f74:	69f8      	ldr	r0, [r7, #28]
 8002f76:	461a      	mov	r2, r3
 8002f78:	0052      	lsls	r2, r2, #1
 8002f7a:	441a      	add	r2, r3
 8002f7c:	0153      	lsls	r3, r2, #5
 8002f7e:	461a      	mov	r2, r3
 8002f80:	460b      	mov	r3, r1
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	440b      	add	r3, r1
 8002f86:	019b      	lsls	r3, r3, #6
 8002f88:	4413      	add	r3, r2
 8002f8a:	4403      	add	r3, r0
 8002f8c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	dd0c      	ble.n	8002fb0 <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 8002f96:	7e79      	ldrb	r1, [r7, #25]
 8002f98:	7efa      	ldrb	r2, [r7, #27]
 8002f9a:	f107 030c 	add.w	r3, r7, #12
 8002f9e:	9301      	str	r3, [sp, #4]
 8002fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	6839      	ldr	r1, [r7, #0]
 8002faa:	69f8      	ldr	r0, [r7, #28]
 8002fac:	f7ff fef4 	bl	8002d98 <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	db23      	blt.n	8003000 <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002fbe:	3310      	adds	r3, #16
 8002fc0:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f011 f8b2 	bl	8014130 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002fd2:	330c      	adds	r3, #12
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]

			recom_been_reset = 1;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8002fde:	7efb      	ldrb	r3, [r7, #27]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d106      	bne.n	8002ff2 <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002fea:	330d      	adds	r3, #13
 8002fec:	2206      	movs	r2, #6
 8002fee:	701a      	strb	r2, [r3, #0]
 8002ff0:	e034      	b.n	800305c <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002ff8:	330d      	adds	r3, #13
 8002ffa:	2207      	movs	r2, #7
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	e02d      	b.n	800305c <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003006:	330c      	adds	r3, #12
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003012:	e01e      	b.n	8003052 <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8003014:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8003018:	7e39      	ldrb	r1, [r7, #24]
 800301a:	7efb      	ldrb	r3, [r7, #27]
 800301c:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	3006      	adds	r0, #6
 8003024:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8003028:	69f8      	ldr	r0, [r7, #28]
 800302a:	461a      	mov	r2, r3
 800302c:	0052      	lsls	r2, r2, #1
 800302e:	441a      	add	r2, r3
 8003030:	00d3      	lsls	r3, r2, #3
 8003032:	461a      	mov	r2, r3
 8003034:	460b      	mov	r3, r1
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	440b      	add	r3, r1
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	4413      	add	r3, r2
 800303e:	442b      	add	r3, r5
 8003040:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8003044:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8003048:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800304c:	3301      	adds	r3, #1
 800304e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003052:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003056:	7ebb      	ldrb	r3, [r7, #26]
 8003058:	429a      	cmp	r2, r3
 800305a:	d3db      	bcc.n	8003014 <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003062:	330c      	adds	r3, #12
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	3b01      	subs	r3, #1
 800306c:	429a      	cmp	r2, r3
 800306e:	d109      	bne.n	8003084 <vl53lx_histo_merge+0x1ca>
 8003070:	7efb      	ldrb	r3, [r7, #27]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d106      	bne.n	8003084 <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800307c:	330c      	adds	r3, #12
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
 8003082:	e00e      	b.n	80030a2 <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 8003084:	7efb      	ldrb	r3, [r7, #27]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d10b      	bne.n	80030a2 <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003090:	330c      	adds	r3, #12
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	3301      	adds	r3, #1
 8003096:	b2da      	uxtb	r2, r3
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800309e:	330c      	adds	r3, #12
 80030a0:	701a      	strb	r2, [r3, #0]

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 80030a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d102      	bne.n	80030b0 <vl53lx_histo_merge+0x1f6>
 80030aa:	7efb      	ldrb	r3, [r7, #27]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d069      	beq.n	8003184 <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80030b6:	330d      	adds	r3, #13
 80030b8:	781b      	ldrb	r3, [r3, #0]
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d162      	bne.n	8003184 <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 80030be:	2300      	movs	r3, #0
 80030c0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80030c2:	e008      	b.n	80030d6 <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 80030c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	3206      	adds	r2, #6
 80030ca:	2100      	movs	r1, #0
 80030cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 80030d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030d2:	3301      	adds	r3, #1
 80030d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80030d6:	7ebb      	ldrb	r3, [r7, #26]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80030dc:	429a      	cmp	r2, r3
 80030de:	d3f1      	bcc.n	80030c4 <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 80030e0:	2300      	movs	r3, #0
 80030e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80030e4:	e02f      	b.n	8003146 <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80030ec:	e023      	b.n	8003136 <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 80030ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	3206      	adds	r2, #6
 80030f4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 80030f8:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80030fc:	7efb      	ldrb	r3, [r7, #27]
 80030fe:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8003100:	69fc      	ldr	r4, [r7, #28]
 8003102:	461a      	mov	r2, r3
 8003104:	0052      	lsls	r2, r2, #1
 8003106:	441a      	add	r2, r3
 8003108:	00d3      	lsls	r3, r2, #3
 800310a:	461a      	mov	r2, r3
 800310c:	460b      	mov	r3, r1
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	440b      	add	r3, r1
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	4413      	add	r3, r2
 8003116:	442b      	add	r3, r5
 8003118:	f203 7304 	addw	r3, r3, #1796	; 0x704
 800311c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8003120:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003122:	18c1      	adds	r1, r0, r3
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	3206      	adds	r2, #6
 8003128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 800312c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003130:	3301      	adds	r3, #1
 8003132:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003136:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	429a      	cmp	r2, r3
 800313e:	dbd6      	blt.n	80030ee <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 8003140:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003142:	3301      	adds	r3, #1
 8003144:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003146:	7ebb      	ldrb	r3, [r7, #26]
 8003148:	b29b      	uxth	r3, r3
 800314a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800314c:	429a      	cmp	r2, r3
 800314e:	d3ca      	bcc.n	80030e6 <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8003150:	e018      	b.n	8003184 <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003158:	330d      	adds	r3, #13
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	3b01      	subs	r3, #1
 800315e:	b2da      	uxtb	r2, r3
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003166:	330d      	adds	r3, #13
 8003168:	701a      	strb	r2, [r3, #0]
		if (pdev->pos_before_next_recom == 255)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003170:	330d      	adds	r3, #13
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2bff      	cmp	r3, #255	; 0xff
 8003176:	d105      	bne.n	8003184 <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800317e:	330d      	adds	r3, #13
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
}
 8003184:	bf00      	nop
 8003186:	3728      	adds	r7, #40	; 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bdb0      	pop	{r4, r5, r7, pc}

0800318c <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b0c6      	sub	sp, #280	; 0x118
 8003190:	af00      	add	r7, sp, #0
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003196:	2300      	movs	r3, #0
 8003198:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80031a2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d108      	bne.n	80031bc <VL53LX_load_patch+0x30>
		status = VL53LX_WrByte(Dev,
 80031aa:	1d3b      	adds	r3, r7, #4
 80031ac:	2200      	movs	r2, #0
 80031ae:	2185      	movs	r1, #133	; 0x85
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	f00d fdc3 	bl	8010d3c <VL53LX_WrByte>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 80031bc:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d103      	bne.n	80031cc <VL53LX_load_patch+0x40>
		VL53LX_enable_powerforce(Dev);
 80031c4:	1d3b      	adds	r3, r7, #4
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	f005 f9b5 	bl	8008536 <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 80031cc:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	f248 018c 	movw	r1, #32908	; 0x808c
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	f002 fa64 	bl	80056a4 <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 80031dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d81b      	bhi.n	800321c <VL53LX_load_patch+0x90>
 80031e4:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <VL53LX_load_patch+0x60>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	080031fd 	.word	0x080031fd
 80031f0:	08003205 	.word	0x08003205
 80031f4:	0800320d 	.word	0x0800320d
 80031f8:	08003215 	.word	0x08003215
	case 0:
		patch_power = 0x00;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003202:	e00e      	b.n	8003222 <VL53LX_load_patch+0x96>
	case 1:
		patch_power = 0x10;
 8003204:	2310      	movs	r3, #16
 8003206:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800320a:	e00a      	b.n	8003222 <VL53LX_load_patch+0x96>
	case 2:
		patch_power = 0x20;
 800320c:	2320      	movs	r3, #32
 800320e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003212:	e006      	b.n	8003222 <VL53LX_load_patch+0x96>
	case 3:
		patch_power = 0x40;
 8003214:	2340      	movs	r3, #64	; 0x40
 8003216:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800321a:	e002      	b.n	8003222 <VL53LX_load_patch+0x96>
	default:
		patch_power = 0x00;
 800321c:	2300      	movs	r3, #0
 800321e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 8003222:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003226:	2b00      	cmp	r3, #0
 8003228:	d125      	bne.n	8003276 <VL53LX_load_patch+0xea>

		comms_buffer[0] = 0x29;
 800322a:	f107 030c 	add.w	r3, r7, #12
 800322e:	2229      	movs	r2, #41	; 0x29
 8003230:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8003232:	f107 030c 	add.w	r3, r7, #12
 8003236:	22c9      	movs	r2, #201	; 0xc9
 8003238:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800323a:	f107 030c 	add.w	r3, r7, #12
 800323e:	220e      	movs	r2, #14
 8003240:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8003242:	f107 030c 	add.w	r3, r7, #12
 8003246:	2240      	movs	r2, #64	; 0x40
 8003248:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800324a:	f107 030c 	add.w	r3, r7, #12
 800324e:	2228      	movs	r2, #40	; 0x28
 8003250:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8003252:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003256:	b2da      	uxtb	r2, r3
 8003258:	f107 030c 	add.w	r3, r7, #12
 800325c:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 800325e:	f107 020c 	add.w	r2, r7, #12
 8003262:	1d38      	adds	r0, r7, #4
 8003264:	2306      	movs	r3, #6
 8003266:	f240 4176 	movw	r1, #1142	; 0x476
 800326a:	6800      	ldr	r0, [r0, #0]
 800326c:	f00d fcfa 	bl	8010c64 <VL53LX_WriteMulti>
 8003270:	4603      	mov	r3, r0
 8003272:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8003276:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800327a:	2b00      	cmp	r3, #0
 800327c:	d123      	bne.n	80032c6 <VL53LX_load_patch+0x13a>
		comms_buffer[0] = 0x03;
 800327e:	f107 030c 	add.w	r3, r7, #12
 8003282:	2203      	movs	r2, #3
 8003284:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8003286:	f107 030c 	add.w	r3, r7, #12
 800328a:	226d      	movs	r2, #109	; 0x6d
 800328c:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 800328e:	f107 030c 	add.w	r3, r7, #12
 8003292:	2203      	movs	r2, #3
 8003294:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8003296:	f107 030c 	add.w	r3, r7, #12
 800329a:	226f      	movs	r2, #111	; 0x6f
 800329c:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800329e:	f107 030c 	add.w	r3, r7, #12
 80032a2:	2207      	movs	r2, #7
 80032a4:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 80032a6:	f107 030c 	add.w	r3, r7, #12
 80032aa:	2229      	movs	r2, #41	; 0x29
 80032ac:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 80032ae:	f107 020c 	add.w	r2, r7, #12
 80032b2:	1d38      	adds	r0, r7, #4
 80032b4:	2306      	movs	r3, #6
 80032b6:	f240 4196 	movw	r1, #1174	; 0x496
 80032ba:	6800      	ldr	r0, [r0, #0]
 80032bc:	f00d fcd2 	bl	8010c64 <VL53LX_WriteMulti>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 80032c6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d113      	bne.n	80032f6 <VL53LX_load_patch+0x16a>
		comms_buffer[0] = 0x00;
 80032ce:	f107 030c 	add.w	r3, r7, #12
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80032d6:	f107 030c 	add.w	r3, r7, #12
 80032da:	2207      	movs	r2, #7
 80032dc:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 80032de:	f107 020c 	add.w	r2, r7, #12
 80032e2:	1d38      	adds	r0, r7, #4
 80032e4:	2302      	movs	r3, #2
 80032e6:	f240 4172 	movw	r1, #1138	; 0x472
 80032ea:	6800      	ldr	r0, [r0, #0]
 80032ec:	f00d fcba 	bl	8010c64 <VL53LX_WriteMulti>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 80032f6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d113      	bne.n	8003326 <VL53LX_load_patch+0x19a>
		comms_buffer[0] = 0x00;
 80032fe:	f107 030c 	add.w	r3, r7, #12
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8003306:	f107 030c 	add.w	r3, r7, #12
 800330a:	2207      	movs	r2, #7
 800330c:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 800330e:	f107 020c 	add.w	r2, r7, #12
 8003312:	1d38      	adds	r0, r7, #4
 8003314:	2302      	movs	r3, #2
 8003316:	f240 4174 	movw	r1, #1140	; 0x474
 800331a:	6800      	ldr	r0, [r0, #0]
 800331c:	f00d fca2 	bl	8010c64 <VL53LX_WriteMulti>
 8003320:	4603      	mov	r3, r0
 8003322:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 8003326:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <VL53LX_load_patch+0x1b6>
		status = VL53LX_WrByte(Dev,
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	2201      	movs	r2, #1
 8003332:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	f00d fd00 	bl	8010d3c <VL53LX_WrByte>
 800333c:	4603      	mov	r3, r0
 800333e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 8003342:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003346:	2b00      	cmp	r3, #0
 8003348:	d108      	bne.n	800335c <VL53LX_load_patch+0x1d0>
		status = VL53LX_WrByte(Dev,
 800334a:	1d3b      	adds	r3, r7, #4
 800334c:	2201      	movs	r2, #1
 800334e:	2185      	movs	r1, #133	; 0x85
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	f00d fcf3 	bl	8010d3c <VL53LX_WrByte>
 8003356:	4603      	mov	r3, r0
 8003358:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800335c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8003360:	4618      	mov	r0, r3
 8003362:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop

0800336c <VL53LX_unload_patch>:

VL53LX_Error VL53LX_unload_patch(VL53LX_DEV Dev)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003374:	2300      	movs	r3, #0
 8003376:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE)
 8003378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d106      	bne.n	800338e <VL53LX_unload_patch+0x22>
		status = VL53LX_WrByte(Dev,
 8003380:	2200      	movs	r2, #0
 8003382:	2185      	movs	r1, #133	; 0x85
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f00d fcd9 	bl	8010d3c <VL53LX_WrByte>
 800338a:	4603      	mov	r3, r0
 800338c:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 800338e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <VL53LX_unload_patch+0x30>
		VL53LX_disable_powerforce(Dev);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f005 f8df 	bl	800855a <VL53LX_disable_powerforce>

	if (status == VL53LX_ERROR_NONE)
 800339c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d107      	bne.n	80033b4 <VL53LX_unload_patch+0x48>
		status = VL53LX_WrByte(Dev,
 80033a4:	2200      	movs	r2, #0
 80033a6:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f00d fcc6 	bl	8010d3c <VL53LX_WrByte>
 80033b0:	4603      	mov	r3, r0
 80033b2:	73fb      	strb	r3, [r7, #15]
		VL53LX_PATCH__CTRL, 0x00);

	if (status == VL53LX_ERROR_NONE)
 80033b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d106      	bne.n	80033ca <VL53LX_unload_patch+0x5e>
		status = VL53LX_WrByte(Dev,
 80033bc:	2201      	movs	r2, #1
 80033be:	2185      	movs	r1, #133	; 0x85
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f00d fcbb 	bl	8010d3c <VL53LX_WrByte>
 80033c6:	4603      	mov	r3, r0
 80033c8:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 80033ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 80033d6:	b5b0      	push	{r4, r5, r7, lr}
 80033d8:	b08a      	sub	sp, #40	; 0x28
 80033da:	af04      	add	r7, sp, #16
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	460b      	mov	r3, r1
 80033e0:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3318      	adds	r3, #24
 80033ea:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80033f2:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 80033f8:	2162      	movs	r1, #98	; 0x62
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f004 f920 	bl	8007640 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2204      	movs	r2, #4
 8003404:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2205      	movs	r2, #5
 8003410:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	pres->zone_results.active_zones    = 0;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 800341c:	2300      	movs	r3, #0
 800341e:	75bb      	strb	r3, [r7, #22]
 8003420:	e01b      	b.n	800345a <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 8003422:	7dba      	ldrb	r2, [r7, #22]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	3308      	adds	r3, #8
 8003436:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2200      	movs	r2, #0
 800343c:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2200      	movs	r2, #0
 8003442:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2200      	movs	r2, #0
 8003448:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003454:	7dbb      	ldrb	r3, [r7, #22]
 8003456:	3301      	adds	r3, #1
 8003458:	75bb      	strb	r3, [r7, #22]
 800345a:	7dbb      	ldrb	r3, [r7, #22]
 800345c:	2b04      	cmp	r3, #4
 800345e:	d9e0      	bls.n	8003422 <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2205      	movs	r2, #5
 8003464:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
	pres->zone_hists.active_zones      = 0;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2205      	movs	r2, #5
 8003474:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
	pres->zone_cal.active_zones        = 0;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003480:	2300      	movs	r3, #0
 8003482:	75bb      	strb	r3, [r7, #22]
 8003484:	e039      	b.n	80034fa <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 8003486:	7dba      	ldrb	r2, [r7, #22]
 8003488:	68f9      	ldr	r1, [r7, #12]
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 800349c:	7dba      	ldrb	r2, [r7, #22]
 800349e:	68f9      	ldr	r1, [r7, #12]
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	f503 7366 	add.w	r3, r3, #920	; 0x398
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 80034b2:	7dba      	ldrb	r2, [r7, #22]
 80034b4:	68f9      	ldr	r1, [r7, #12]
 80034b6:	4613      	mov	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 80034c8:	7dba      	ldrb	r2, [r7, #22]
 80034ca:	68f9      	ldr	r1, [r7, #12]
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 80034de:	7dba      	ldrb	r2, [r7, #22]
 80034e0:	68f9      	ldr	r1, [r7, #12]
 80034e2:	4613      	mov	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80034f4:	7dbb      	ldrb	r3, [r7, #22]
 80034f6:	3301      	adds	r3, #1
 80034f8:	75bb      	strb	r3, [r7, #22]
 80034fa:	7dbb      	ldrb	r3, [r7, #22]
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d9c2      	bls.n	8003486 <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	2200      	movs	r2, #0
 8003504:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	221e      	movs	r2, #30
 800350a:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	2200      	movs	r2, #0
 8003510:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2200      	movs	r2, #0
 8003516:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	2201      	movs	r2, #1
 800351c:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2201      	movs	r2, #1
 8003522:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2201      	movs	r2, #1
 8003528:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003530:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003538:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8003540:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2264      	movs	r2, #100	; 0x64
 8003546:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800354e:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800355e:	3302      	adds	r3, #2
 8003560:	2203      	movs	r2, #3
 8003562:	701a      	strb	r2, [r3, #0]
	pdev->offset_results.active_results = 0;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800356a:	3303      	adds	r3, #3
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]



	pdev->gain_cal.standard_ranging_gain_factor =
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f240 72db 	movw	r2, #2011	; 0x7db
 8003576:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8003580:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f004 f83f 	bl	8007608 <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003590:	3310      	adds	r3, #16
 8003592:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f010 fdc9 	bl	8014130 <memset>
	pdev->bin_rec_pos = 0;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80035a4:	330c      	adds	r3, #12
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]
	pdev->pos_before_next_recom = 0;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80035b0:	330d      	adds	r3, #13
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <VL53LX_data_init+0x1f8>
 80035bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d104      	bne.n	80035ce <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f8b7 	bl	8003738 <VL53LX_read_p2p_data>
 80035ca:	4603      	mov	r3, r0
 80035cc:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 80035ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d107      	bne.n	80035e6 <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035dc:	4618      	mov	r0, r3
 80035de:	f002 ffdf 	bl	80065a0 <VL53LX_init_refspadchar_config_struct>
 80035e2:	4603      	mov	r3, r0
 80035e4:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 80035e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d107      	bne.n	80035fe <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035f4:	4618      	mov	r0, r3
 80035f6:	f002 fff7 	bl	80065e8 <VL53LX_init_ssc_config_struct>
 80035fa:	4603      	mov	r3, r0
 80035fc:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 80035fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10b      	bne.n	800361e <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003612:	4619      	mov	r1, r3
 8003614:	4610      	mov	r0, r2
 8003616:	f003 f808 	bl	800662a <VL53LX_init_xtalk_config_struct>
 800361a:	4603      	mov	r3, r0
 800361c:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 800361e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d107      	bne.n	8003636 <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800362c:	4618      	mov	r0, r3
 800362e:	f003 f86f 	bl	8006710 <VL53LX_init_xtalk_extract_config_struct>
 8003632:	4603      	mov	r3, r0
 8003634:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003636:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d107      	bne.n	800364e <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003644:	4618      	mov	r0, r3
 8003646:	f003 f892 	bl	800676e <VL53LX_init_offset_cal_config_struct>
 800364a:	4603      	mov	r3, r0
 800364c:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 800364e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d107      	bne.n	8003666 <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 800365c:	4618      	mov	r0, r3
 800365e:	f003 f8ad 	bl	80067bc <VL53LX_init_zone_cal_config_struct>
 8003662:	4603      	mov	r3, r0
 8003664:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003666:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10b      	bne.n	8003686 <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800367a:	4619      	mov	r1, r3
 800367c:	4610      	mov	r0, r2
 800367e:	f003 f8c1 	bl	8006804 <VL53LX_init_hist_post_process_config_struct>
 8003682:	4603      	mov	r3, r0
 8003684:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 8003686:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d107      	bne.n	800369e <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003694:	4618      	mov	r0, r3
 8003696:	f003 fac0 	bl	8006c1a <VL53LX_init_hist_gen3_dmax_config_struct>
 800369a:	4603      	mov	r3, r0
 800369c:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 800369e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <VL53LX_data_init+0x2de>
		status = VL53LX_init_tuning_parm_storage_struct(
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	33f8      	adds	r3, #248	; 0xf8
 80036aa:	4618      	mov	r0, r3
 80036ac:	f003 f919 	bl	80068e2 <VL53LX_init_tuning_parm_storage_struct>
 80036b0:	4603      	mov	r3, r0
 80036b2:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 80036b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d116      	bne.n	80036ea <VL53LX_data_init+0x314>
		status = VL53LX_set_preset_mode(
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	7858      	ldrb	r0, [r3, #1]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	8b1c      	ldrh	r4, [r3, #24]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	689d      	ldr	r5, [r3, #8]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	6912      	ldr	r2, [r2, #16]
 80036d0:	6939      	ldr	r1, [r7, #16]
 80036d2:	6949      	ldr	r1, [r1, #20]
 80036d4:	9102      	str	r1, [sp, #8]
 80036d6:	9201      	str	r2, [sp, #4]
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	462b      	mov	r3, r5
 80036dc:	4622      	mov	r2, r4
 80036de:	4601      	mov	r1, r0
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fb3e 	bl	8003d62 <VL53LX_set_preset_mode>
 80036e6:	4603      	mov	r3, r0
 80036e8:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036f0:	461a      	mov	r2, r3
 80036f2:	2118      	movs	r1, #24
 80036f4:	2000      	movs	r0, #0
 80036f6:	f008 fa30 	bl	800bb5a <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8003700:	461a      	mov	r2, r3
 8003702:	2118      	movs	r1, #24
 8003704:	2000      	movs	r0, #0
 8003706:	f008 fa28 	bl	800bb5a <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8003710:	461a      	mov	r2, r3
 8003712:	210c      	movs	r1, #12
 8003714:	2000      	movs	r0, #0
 8003716:	f004 fd33 	bl	8008180 <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f007 fc24 	bl	800af68 <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f007 fb3b 	bl	800ad9c <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f007 fc47 	bl	800afba <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800372c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bdb0      	pop	{r4, r5, r7, pc}

08003738 <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b091      	sub	sp, #68	; 0x44
 800373c:	af04      	add	r7, sp, #16
 800373e:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8003740:	2300      	movs	r3, #0
 8003742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3318      	adds	r3, #24
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	3348      	adds	r3, #72	; 0x48
 8003758:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 800375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375c:	339c      	adds	r3, #156	; 0x9c
 800375e:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8003760:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003764:	2b00      	cmp	r3, #0
 8003766:	d109      	bne.n	800377c <VL53LX_read_p2p_data+0x44>
		status = VL53LX_get_static_nvm_managed(
 8003768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376a:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800376e:	4619      	mov	r1, r3
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f00b fbb0 	bl	800eed6 <VL53LX_get_static_nvm_managed>
 8003776:	4603      	mov	r3, r0
 8003778:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 800377c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003780:	2b00      	cmp	r3, #0
 8003782:	d108      	bne.n	8003796 <VL53LX_read_p2p_data+0x5e>
		status = VL53LX_get_customer_nvm_managed(
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	3348      	adds	r3, #72	; 0x48
 8003788:	4619      	mov	r1, r3
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f00b fce1 	bl	800f152 <VL53LX_get_customer_nvm_managed>
 8003790:	4603      	mov	r3, r0
 8003792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 8003796:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800379a:	2b00      	cmp	r3, #0
 800379c:	d117      	bne.n	80037ce <VL53LX_read_p2p_data+0x96>

		status = VL53LX_get_nvm_copy_data(
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	f203 3392 	addw	r3, r3, #914	; 0x392
 80037a4:	4619      	mov	r1, r3
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f00c fbdd 	bl	800ff66 <VL53LX_get_nvm_copy_data>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 80037b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <VL53LX_read_p2p_data+0x96>
			VL53LX_copy_rtn_good_spads_to_buffer(
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	f203 3292 	addw	r2, r3, #914	; 0x392
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f004 fa2f 	bl	8007c2c <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 80037ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10e      	bne.n	80037f4 <VL53LX_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	895b      	ldrh	r3, [r3, #10]
 80037da:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 80037f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d108      	bne.n	800380e <VL53LX_read_p2p_data+0xd6>
		status =
			VL53LX_read_nvm_optical_centre(
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	33c0      	adds	r3, #192	; 0xc0
 8003800:	4619      	mov	r1, r3
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f00b fa1b 	bl	800ec3e <VL53LX_read_nvm_optical_centre>
 8003808:	4603      	mov	r3, r0
 800380a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 800380e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003812:	2b00      	cmp	r3, #0
 8003814:	d108      	bne.n	8003828 <VL53LX_read_p2p_data+0xf0>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	3360      	adds	r3, #96	; 0x60
 800381a:	4619      	mov	r1, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f00b fa31 	bl	800ec84 <VL53LX_read_nvm_cal_peak_rate_map>
 8003822:	4603      	mov	r3, r0
 8003824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 8003828:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800382c:	2b00      	cmp	r3, #0
 800382e:	d12d      	bne.n	800388c <VL53LX_read_p2p_data+0x154>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	339c      	adds	r3, #156	; 0x9c
 8003834:	4619      	mov	r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f00b fa4a 	bl	800ecd0 <VL53LX_read_nvm_additional_offset_cal_data>
 800383c:	4603      	mov	r3, r0
 800383e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	889b      	ldrh	r3, [r3, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d120      	bne.n	800388c <VL53LX_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 800384e:	2b00      	cmp	r3, #0
 8003850:	d11c      	bne.n	800388c <VL53LX_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	2280      	movs	r2, #128	; 0x80
 8003856:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800385e:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	f893 03c2 	ldrb.w	r0, [r3, #962]	; 0x3c2
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	f893 43c3 	ldrb.w	r4, [r3, #963]	; 0x3c3
 800386c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003872:	69fa      	ldr	r2, [r7, #28]
 8003874:	69f9      	ldr	r1, [r7, #28]
 8003876:	3102      	adds	r1, #2
 8003878:	9103      	str	r1, [sp, #12]
 800387a:	9202      	str	r2, [sp, #8]
 800387c:	2238      	movs	r2, #56	; 0x38
 800387e:	9201      	str	r2, [sp, #4]
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	23ff      	movs	r3, #255	; 0xff
 8003884:	22c7      	movs	r2, #199	; 0xc7
 8003886:	4621      	mov	r1, r4
 8003888:	f006 f97a 	bl	8009b80 <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 800388c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003890:	2b00      	cmp	r3, #0
 8003892:	d12f      	bne.n	80038f4 <VL53LX_read_p2p_data+0x1bc>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 8003894:	f107 030c 	add.w	r3, r7, #12
 8003898:	461a      	mov	r2, r3
 800389a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f00b fa39 	bl	800ed16 <VL53LX_read_nvm_fmt_range_results_data>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 80038aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d120      	bne.n	80038f4 <VL53LX_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 80038b2:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 80038ba:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 80038bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038be:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 80038c2:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 80038c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c6:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d006      	beq.n	80038e2 <VL53LX_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 80038e0:	e003      	b.n	80038ea <VL53LX_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	2214      	movs	r2, #20
 80038e6:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038f0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 80038f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10b      	bne.n	8003914 <VL53LX_read_p2p_data+0x1dc>
		status =
			VL53LX_RdWord(
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003902:	3304      	adds	r3, #4
 8003904:	461a      	mov	r2, r3
 8003906:	21de      	movs	r1, #222	; 0xde
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f00d faa7 	bl	8010e5c <VL53LX_RdWord>
 800390e:	4603      	mov	r3, r0
 8003910:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 800391a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391e:	d204      	bcs.n	800392a <VL53LX_read_p2p_data+0x1f2>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8003926:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
	}



	if (status == VL53LX_ERROR_NONE)
 800392a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800392e:	2b00      	cmp	r3, #0
 8003930:	d108      	bne.n	8003944 <VL53LX_read_p2p_data+0x20c>
		status =
			VL53LX_get_mode_mitigation_roi(
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	33bc      	adds	r3, #188	; 0xbc
 8003936:	4619      	mov	r1, r3
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f91a 	bl	8003b72 <VL53LX_get_mode_mitigation_roi>
 800393e:	4603      	mov	r3, r0
 8003940:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d114      	bne.n	8003978 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10f      	bne.n	8003978 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8003972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003974:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8003978:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800397c:	4618      	mov	r0, r3
 800397e:	3734      	adds	r7, #52	; 0x34
 8003980:	46bd      	mov	sp, r7
 8003982:	bd90      	pop	{r4, r7, pc}

08003984 <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800398e:	2300      	movs	r3, #0
 8003990:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3318      	adds	r3, #24
 8003996:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800399e:	3304      	adds	r3, #4
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <VL53LX_set_inter_measurement_period_ms+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80039a6:	23f1      	movs	r3, #241	; 0xf1
 80039a8:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 80039aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10e      	bne.n	80039d0 <VL53LX_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80039be:	3304      	adds	r3, #4
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	}

	LOG_FUNCTION_END(status);

	return status;
 80039d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80039ee:	2300      	movs	r3, #0
 80039f0:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3318      	adds	r3, #24
 80039f6:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <VL53LX_set_timeouts_us+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003a02:	23f1      	movs	r3, #241	; 0xf1
 8003a04:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 8003a06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d11b      	bne.n	8003a46 <VL53LX_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f8b3 12de 	ldrh.w	r1, [r3, #734]	; 0x2de
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	f502 724d 	add.w	r2, r2, #820	; 0x334
 8003a32:	9201      	str	r2, [sp, #4]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	460b      	mov	r3, r1
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	68b8      	ldr	r0, [r7, #8]
 8003a3e:	f004 ff42 	bl	80088c6 <VL53LX_calc_timeout_register_values>
 8003a42:	4603      	mov	r3, r0
 8003a44:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8003a46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b088      	sub	sp, #32
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
 8003a5e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3318      	adds	r3, #24
 8003a68:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <VL53LX_get_timeouts_us+0x2e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003a7c:	23f1      	movs	r3, #241	; 0xf1
 8003a7e:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 8003a80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d14a      	bne.n	8003b1e <VL53LX_get_timeouts_us+0xcc>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f8b3 22de 	ldrh.w	r2, [r3, #734]	; 0x2de
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 8003a94:	4619      	mov	r1, r3
 8003a96:	4610      	mov	r0, r2
 8003a98:	f004 fd8e 	bl	80085b8 <VL53LX_calc_macro_period_us>
 8003a9c:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
			VL53LX_calc_timeout_us(
 8003aa4:	6979      	ldr	r1, [r7, #20]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f004 fe4d 	bl	8008746 <VL53LX_calc_timeout_us>
 8003aac:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		timeout_encoded =
 8003ab8:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8003aba:	8a7b      	ldrh	r3, [r7, #18]
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8003ac6:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8003ac8:	4413      	add	r3, r2
 8003aca:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8003acc:	8a7b      	ldrh	r3, [r7, #18]
 8003ace:	6979      	ldr	r1, [r7, #20]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f004 fe9d 	bl	8008810 <VL53LX_calc_decoded_timeout_us>
 8003ad6:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
		timeout_encoded =
 8003ae2:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8003ae4:	8a7b      	ldrh	r3, [r7, #18]
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8003af0:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8003af2:	4413      	add	r3, r2
 8003af4:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8003af6:	8a7b      	ldrh	r3, [r7, #18]
 8003af8:	6979      	ldr	r1, [r7, #20]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f004 fe88 	bl	8008810 <VL53LX_calc_decoded_timeout_us>
 8003b00:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8003b1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3318      	adds	r3, #24
 8003b3c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	7858      	ldrb	r0, [r3, #1]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	7819      	ldrb	r1, [r3, #0]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f203 335b 	addw	r3, r3, #859	; 0x35b
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f005 fe94 	bl	800987a <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	7898      	ldrb	r0, [r3, #2]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	78d9      	ldrb	r1, [r3, #3]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8003b60:	461a      	mov	r2, r3
 8003b62:	f005 fec9 	bl	80098f8 <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8003b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b086      	sub	sp, #24
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3318      	adds	r3, #24
 8003b84:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f893 33c2 	ldrb.w	r3, [r3, #962]	; 0x3c2
 8003b98:	f107 020e 	add.w	r2, r7, #14
 8003b9c:	f107 010d 	add.w	r1, r7, #13
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f008 f883 	bl	800bcac <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8003ba6:	7bba      	ldrb	r2, [r7, #14]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8003bac:	7b7a      	ldrb	r2, [r7, #13]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f893 33c3 	ldrb.w	r3, [r3, #963]	; 0x3c3
 8003bb8:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	091b      	lsrs	r3, r3, #4
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8003bd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <VL53LX_init_zone_config_histogram_bins>:

VL53LX_Error VL53LX_init_zone_config_histogram_bins(
	VL53LX_zone_config_t   *pdata)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003be4:	2300      	movs	r3, #0
 8003be6:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8003be8:	2300      	movs	r3, #0
 8003bea:	73fb      	strb	r3, [r7, #15]
 8003bec:	e008      	b.n	8003c00 <VL53LX_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for (i = 0; i < pdata->max_zones; i++)
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	7bfa      	ldrb	r2, [r7, #15]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d3f1      	bcc.n	8003bee <VL53LX_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 8003c0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <VL53LX_set_zone_config>:

VL53LX_Error VL53LX_set_zone_config(
	VL53LX_DEV                 Dev,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003c24:	2300      	movs	r3, #0
 8003c26:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3318      	adds	r3, #24
 8003c2c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	331c      	adds	r3, #28
 8003c38:	2214      	movs	r2, #20
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	f010 fa6a 	bl	8014114 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781a      	ldrb	r2, [r3, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	785a      	ldrb	r2, [r3, #1]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53LX_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	33c2      	adds	r3, #194	; 0xc2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff ffbf 	bl	8003bdc <VL53LX_init_zone_config_histogram_bins>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	785b      	ldrb	r3, [r3, #1]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d104      	bne.n	8003c74 <VL53LX_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8003c72:	e00f      	b.n	8003c94 <VL53LX_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53LX_MAX_USER_ZONES)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	785b      	ldrb	r3, [r3, #1]
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d807      	bhi.n	8003c8c <VL53LX_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	785b      	ldrb	r3, [r3, #1]
 8003c80:	3301      	adds	r3, #1
 8003c82:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8003c8a:	e003      	b.n	8003c94 <VL53LX_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2206      	movs	r2, #6
 8003c90:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
				VL53LX_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8003c94:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	607a      	str	r2, [r7, #4]
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	460b      	mov	r3, r1
 8003cae:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	3318      	adds	r3, #24
 8003cb8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8003cba:	7afb      	ldrb	r3, [r7, #11]
 8003cbc:	2b21      	cmp	r3, #33	; 0x21
 8003cbe:	d030      	beq.n	8003d22 <VL53LX_get_preset_mode_timing_cfg+0x82>
 8003cc0:	2b21      	cmp	r3, #33	; 0x21
 8003cc2:	dc43      	bgt.n	8003d4c <VL53LX_get_preset_mode_timing_cfg+0xac>
 8003cc4:	2b1b      	cmp	r3, #27
 8003cc6:	d002      	beq.n	8003cce <VL53LX_get_preset_mode_timing_cfg+0x2e>
 8003cc8:	2b1e      	cmp	r3, #30
 8003cca:	d015      	beq.n	8003cf8 <VL53LX_get_preset_mode_timing_cfg+0x58>
 8003ccc:	e03e      	b.n	8003d4c <VL53LX_get_preset_mode_timing_cfg+0xac>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
		*pphasecal_config_timeout_us =
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	601a      	str	r2, [r3, #0]

	break;
 8003cf6:	e02c      	b.n	8003d52 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
		*pphasecal_config_timeout_us =
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	601a      	str	r2, [r3, #0]
	break;
 8003d20:	e017      	b.n	8003d52 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
		*pphasecal_config_timeout_us =
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	601a      	str	r2, [r3, #0]
	break;
 8003d4a:	e002      	b.n	8003d52 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003d4c:	23fc      	movs	r3, #252	; 0xfc
 8003d4e:	75fb      	strb	r3, [r7, #23]
		break;
 8003d50:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8003d52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b096      	sub	sp, #88	; 0x58
 8003d66:	af06      	add	r7, sp, #24
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	72fb      	strb	r3, [r7, #11]
 8003d70:	4613      	mov	r3, r2
 8003d72:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_LLDriverData_t *pdev =
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3318      	adds	r3, #24
 8003d7e:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003d86:	637b      	str	r3, [r7, #52]	; 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 8003d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d8e:	633b      	str	r3, [r7, #48]	; 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d92:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003d96:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9a:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8003d9e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003daa:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8003dae:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8003db6:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003dbe:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc2:	33c2      	adds	r3, #194	; 0xc2
 8003dc4:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc8:	33f8      	adds	r3, #248	; 0xf8
 8003dca:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dce:	7afa      	ldrb	r2, [r7, #11]
 8003dd0:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8003dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dd6:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ddc:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003de2:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 8003de4:	2103      	movs	r1, #3
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f003 fc2a 	bl	8007640 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8003dec:	7afb      	ldrb	r3, [r7, #11]
 8003dee:	2b21      	cmp	r3, #33	; 0x21
 8003df0:	d02e      	beq.n	8003e50 <VL53LX_set_preset_mode+0xee>
 8003df2:	2b21      	cmp	r3, #33	; 0x21
 8003df4:	dc40      	bgt.n	8003e78 <VL53LX_set_preset_mode+0x116>
 8003df6:	2b1b      	cmp	r3, #27
 8003df8:	d002      	beq.n	8003e00 <VL53LX_set_preset_mode+0x9e>
 8003dfa:	2b1e      	cmp	r3, #30
 8003dfc:	d014      	beq.n	8003e28 <VL53LX_set_preset_mode+0xc6>
 8003dfe:	e03b      	b.n	8003e78 <VL53LX_set_preset_mode+0x116>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	9304      	str	r3, [sp, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	9303      	str	r3, [sp, #12]
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	9302      	str	r3, [sp, #8]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e1c:	f003 f941 	bl	80070a2 <VL53LX_preset_mode_histogram_long_range>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003e26:	e02b      	b.n	8003e80 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	9304      	str	r3, [sp, #16]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	9303      	str	r3, [sp, #12]
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	9302      	str	r3, [sp, #8]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	9301      	str	r3, [sp, #4]
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e44:	f003 f9cb 	bl	80071de <VL53LX_preset_mode_histogram_medium_range>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003e4e:	e017      	b.n	8003e80 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	9304      	str	r3, [sp, #16]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	9303      	str	r3, [sp, #12]
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	9302      	str	r3, [sp, #8]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e6c:	f003 fa55 	bl	800731a <VL53LX_preset_mode_histogram_short_range>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003e76:	e003      	b.n	8003e80 <VL53LX_set_preset_mode+0x11e>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003e78:	23fc      	movs	r3, #252	; 0xfc
 8003e7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 8003e7e:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 8003e80:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d105      	bne.n	8003e94 <VL53LX_set_preset_mode+0x132>

		pstatic->dss_config__target_total_rate_mcps =
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	893a      	ldrh	r2, [r7, #8]
 8003e8c:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	893a      	ldrh	r2, [r7, #8]
 8003e92:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 8003e94:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d108      	bne.n	8003eae <VL53LX_set_preset_mode+0x14c>
		status =
			VL53LX_set_timeouts_us(
 8003e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f7ff fd9c 	bl	80039e0 <VL53LX_set_timeouts_us>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 8003eae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <VL53LX_set_preset_mode+0x162>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8003eb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7ff fd63 	bl	8003984 <VL53LX_set_inter_measurement_period_ms>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8003eca:	3301      	adds	r3, #1
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed0:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	f003 ffc8 	bl	8007e6c <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8003edc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3740      	adds	r7, #64	; 0x40
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b0d2      	sub	sp, #328	; 0x148
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	1d3b      	adds	r3, r7, #4
 8003ef0:	6018      	str	r0, [r3, #0]
 8003ef2:	4608      	mov	r0, r1
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	1cfb      	adds	r3, r7, #3
 8003ef8:	4602      	mov	r2, r0
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	1cbb      	adds	r3, r7, #2
 8003efe:	460a      	mov	r2, r1
 8003f00:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003f02:	2300      	movs	r3, #0
 8003f04:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003f08:	1d3b      	adds	r3, r7, #4
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3318      	adds	r3, #24
 8003f0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53LX_LLDriverResults_t  *pres =
 8003f12:	1d3b      	adds	r3, r7, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003f1a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8003f1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f22:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8003f26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8003f2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f2e:	3348      	adds	r3, #72	; 0x48
 8003f30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003f34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f38:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003f3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003f40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f44:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8003f48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003f4c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f50:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8003f54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003f58:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f5c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8003f60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8003f64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f68:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003f6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8003f70:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f74:	332c      	adds	r3, #44	; 0x2c
 8003f76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8003f7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f7e:	3348      	adds	r3, #72	; 0x48
 8003f80:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8003f84:	f107 030c 	add.w	r3, r7, #12
 8003f88:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8003fa4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003fa8:	1cfa      	adds	r2, r7, #3
 8003faa:	7812      	ldrb	r2, [r2, #0]
 8003fac:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8003fae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003fb2:	791b      	ldrb	r3, [r3, #4]
 8003fb4:	b25b      	sxtb	r3, r3
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8003fbc:	1cfb      	adds	r3, r7, #3
 8003fbe:	f993 3000 	ldrsb.w	r3, [r3]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	b25b      	sxtb	r3, r3
 8003fc6:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8003fc8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003fcc:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8003fce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003fd2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53LX_set_user_zone(
 8003fd6:	3336      	adds	r3, #54	; 0x36
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8003fde:	4413      	add	r3, r2
 8003fe0:	1d9a      	adds	r2, r3, #6
 8003fe2:	1d3b      	adds	r3, r7, #4
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	f7ff fd9f 	bl	8003b2a <VL53LX_set_user_zone>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8003ff2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ff6:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d016      	beq.n	800402c <VL53LX_init_and_start_range+0x144>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 8003ffe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004002:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004006:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004014:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004018:	4413      	add	r3, r2
 800401a:	1c9a      	adds	r2, r3, #2
 800401c:	1d3b      	adds	r3, r7, #4
 800401e:	4611      	mov	r1, r2
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	f001 fad7 	bl	80055d4 <VL53LX_set_zone_dss_config>
 8004026:	4603      	mov	r3, r0
 8004028:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 800402c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004030:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10d      	bne.n	8004058 <VL53LX_init_and_start_range+0x170>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 800403c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8004044:	2b01      	cmp	r3, #1
 8004046:	d107      	bne.n	8004058 <VL53LX_init_and_start_range+0x170>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8004048:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800404c:	f8b3 22a4 	ldrh.w	r2, [r3, #676]	; 0x2a4
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8004050:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004054:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8004058:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800405c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004060:	3312      	adds	r3, #18
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2bff      	cmp	r3, #255	; 0xff
 8004066:	d106      	bne.n	8004076 <VL53LX_init_and_start_range+0x18e>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8004068:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800406c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004070:	3312      	adds	r3, #18
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004076:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800407a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800407e:	3311      	adds	r3, #17
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d133      	bne.n	80040ee <VL53LX_init_and_start_range+0x206>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8004086:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800408a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800408e:	3312      	adds	r3, #18
 8004090:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004092:	2b00      	cmp	r3, #0
 8004094:	d12b      	bne.n	80040ee <VL53LX_init_and_start_range+0x206>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8004096:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800409a:	f893 2320 	ldrb.w	r2, [r3, #800]	; 0x320
		pdev->low_power_auto_data.saved_interrupt_config =
 800409e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80040a2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80040a6:	3313      	adds	r3, #19
 80040a8:	701a      	strb	r2, [r3, #0]

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 80040aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		if ((pdev->dyn_cfg.system__sequence_config & (
 80040b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80040b8:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
 80040bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d109      	bne.n	80040d8 <VL53LX_init_and_start_range+0x1f0>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 80040c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040c8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80040cc:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 80040ce:	b21a      	sxth	r2, r3
 80040d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040d4:	825a      	strh	r2, [r3, #18]
 80040d6:	e003      	b.n	80040e0 <VL53LX_init_and_start_range+0x1f8>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 80040d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040dc:	2200      	movs	r2, #0
 80040de:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 80040e0:	1cbb      	adds	r3, r7, #2
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d802      	bhi.n	80040ee <VL53LX_init_and_start_range+0x206>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 80040e8:	1cbb      	adds	r3, r7, #2
 80040ea:	2205      	movs	r2, #5
 80040ec:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80040ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80040f2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80040f6:	3311      	adds	r3, #17
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d114      	bne.n	8004128 <VL53LX_init_and_start_range+0x240>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80040fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004102:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004106:	3312      	adds	r3, #18
 8004108:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800410a:	2b01      	cmp	r3, #1
 800410c:	d10c      	bne.n	8004128 <VL53LX_init_and_start_range+0x240>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800410e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004112:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004116:	3313      	adds	r3, #19
 8004118:	781a      	ldrb	r2, [r3, #0]
		pdev->gen_cfg.system__interrupt_config_gpio =
 800411a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800411e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 8004122:	1cbb      	adds	r3, r7, #2
 8004124:	2206      	movs	r2, #6
 8004126:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 8004128:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800412c:	2b00      	cmp	r3, #0
 800412e:	d106      	bne.n	800413e <VL53LX_init_and_start_range+0x256>
		status = VL53LX_save_cfg_data(Dev);
 8004130:	1d3b      	adds	r3, r7, #4
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	f005 fe8e 	bl	8009e54 <VL53LX_save_cfg_data>
 8004138:	4603      	mov	r3, r0
 800413a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 800413e:	1cbb      	adds	r3, r7, #2
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	3b01      	subs	r3, #1
 8004144:	2b05      	cmp	r3, #5
 8004146:	d827      	bhi.n	8004198 <VL53LX_init_and_start_range+0x2b0>
 8004148:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <VL53LX_init_and_start_range+0x268>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004191 	.word	0x08004191
 8004154:	08004189 	.word	0x08004189
 8004158:	08004181 	.word	0x08004181
 800415c:	08004179 	.word	0x08004179
 8004160:	08004171 	.word	0x08004171
 8004164:	08004169 	.word	0x08004169
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 8004168:	2301      	movs	r3, #1
 800416a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800416e:	e017      	b.n	80041a0 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8004170:	230d      	movs	r3, #13
 8004172:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004176:	e013      	b.n	80041a0 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 8004178:	2324      	movs	r3, #36	; 0x24
 800417a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800417e:	e00f      	b.n	80041a0 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 8004180:	2344      	movs	r3, #68	; 0x44
 8004182:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004186:	e00b      	b.n	80041a0 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 8004188:	235a      	movs	r3, #90	; 0x5a
 800418a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800418e:	e007      	b.n	80041a0 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 8004190:	2371      	movs	r3, #113	; 0x71
 8004192:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004196:	e003      	b.n	80041a0 <VL53LX_init_and_start_range+0x2b8>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 8004198:	2383      	movs	r3, #131	; 0x83
 800419a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800419e:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 80041a0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80041a4:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 80041a8:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 80041ac:	f107 030c 	add.w	r3, r7, #12
 80041b0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 80041b4:	2300      	movs	r3, #0
 80041b6:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80041ba:	e00b      	b.n	80041d4 <VL53LX_init_and_start_range+0x2ec>
		*pbuffer++ = 0;
 80041bc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 80041c6:	2200      	movs	r2, #0
 80041c8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 80041ca:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80041ce:	3301      	adds	r3, #1
 80041d0:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80041d4:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 80041d8:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80041dc:	429a      	cmp	r2, r3
 80041de:	d3ed      	bcc.n	80041bc <VL53LX_init_and_start_range+0x2d4>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 80041e0:	1cbb      	adds	r3, r7, #2
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b05      	cmp	r3, #5
 80041e6:	d917      	bls.n	8004218 <VL53LX_init_and_start_range+0x330>
 80041e8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d113      	bne.n	8004218 <VL53LX_init_and_start_range+0x330>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80041f0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80041f4:	f1c3 0301 	rsb	r3, r3, #1
 80041f8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80041fc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 8004200:	f107 020c 	add.w	r2, r7, #12
 8004204:	4413      	add	r3, r2
 8004206:	461a      	mov	r2, r3
 8004208:	210b      	movs	r1, #11
 800420a:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800420e:	f00a fdad 	bl	800ed6c <VL53LX_i2c_encode_static_nvm_managed>
 8004212:	4603      	mov	r3, r0
 8004214:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8004218:	1cbb      	adds	r3, r7, #2
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d917      	bls.n	8004250 <VL53LX_init_and_start_range+0x368>
 8004220:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004224:	2b00      	cmp	r3, #0
 8004226:	d113      	bne.n	8004250 <VL53LX_init_and_start_range+0x368>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004228:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800422c:	f1c3 030d 	rsb	r3, r3, #13
 8004230:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004234:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 8004238:	f107 020c 	add.w	r2, r7, #12
 800423c:	4413      	add	r3, r2
 800423e:	461a      	mov	r2, r3
 8004240:	2117      	movs	r1, #23
 8004242:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8004246:	f00a fe6d 	bl	800ef24 <VL53LX_i2c_encode_customer_nvm_managed>
 800424a:	4603      	mov	r3, r0
 800424c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8004250:	1cbb      	adds	r3, r7, #2
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d917      	bls.n	8004288 <VL53LX_init_and_start_range+0x3a0>
 8004258:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800425c:	2b00      	cmp	r3, #0
 800425e:	d113      	bne.n	8004288 <VL53LX_init_and_start_range+0x3a0>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004260:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004264:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8004268:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800426c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_config(
 8004270:	f107 020c 	add.w	r2, r7, #12
 8004274:	4413      	add	r3, r2
 8004276:	461a      	mov	r2, r3
 8004278:	2120      	movs	r1, #32
 800427a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800427e:	f00a ffb3 	bl	800f1e8 <VL53LX_i2c_encode_static_config>
 8004282:	4603      	mov	r3, r0
 8004284:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8004288:	1cbb      	adds	r3, r7, #2
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d917      	bls.n	80042c0 <VL53LX_init_and_start_range+0x3d8>
 8004290:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004294:	2b00      	cmp	r3, #0
 8004296:	d113      	bne.n	80042c0 <VL53LX_init_and_start_range+0x3d8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004298:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800429c:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 80042a0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80042a4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_general_config(
 80042a8:	f107 020c 	add.w	r2, r7, #12
 80042ac:	4413      	add	r3, r2
 80042ae:	461a      	mov	r2, r3
 80042b0:	2116      	movs	r1, #22
 80042b2:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80042b6:	f00b f87a 	bl	800f3ae <VL53LX_i2c_encode_general_config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80042c0:	1cbb      	adds	r3, r7, #2
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d917      	bls.n	80042f8 <VL53LX_init_and_start_range+0x410>
 80042c8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d113      	bne.n	80042f8 <VL53LX_init_and_start_range+0x410>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80042d0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80042d4:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80042d8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80042dc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_timing_config(
 80042e0:	f107 020c 	add.w	r2, r7, #12
 80042e4:	4413      	add	r3, r2
 80042e6:	461a      	mov	r2, r3
 80042e8:	2117      	movs	r1, #23
 80042ea:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80042ee:	f00b f8e2 	bl	800f4b6 <VL53LX_i2c_encode_timing_config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80042f8:	1cbb      	adds	r3, r7, #2
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d036      	beq.n	800436e <VL53LX_init_and_start_range+0x486>
 8004300:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004304:	2b00      	cmp	r3, #0
 8004306:	d132      	bne.n	800436e <VL53LX_init_and_start_range+0x486>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004308:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800430c:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8004310:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8004314:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004318:	791b      	ldrb	r3, [r3, #4]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d017      	beq.n	8004352 <VL53LX_init_and_start_range+0x46a>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8004322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004326:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	b2da      	uxtb	r2, r3
 800432e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004332:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8004334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004338:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004344:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8004346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800434a:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 800434c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004350:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004352:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_dynamic_config(
 8004356:	f107 020c 	add.w	r2, r7, #12
 800435a:	4413      	add	r3, r2
 800435c:	461a      	mov	r2, r3
 800435e:	2112      	movs	r1, #18
 8004360:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8004364:	f00b f929 	bl	800f5ba <VL53LX_i2c_encode_dynamic_config>
 8004368:	4603      	mov	r3, r0
 800436a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 800436e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004372:	2b00      	cmp	r3, #0
 8004374:	d113      	bne.n	800439e <VL53LX_init_and_start_range+0x4b6>

		i2c_buffer_offset_bytes =
 8004376:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800437a:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800437e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004382:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_system_control(
 8004386:	f107 020c 	add.w	r2, r7, #12
 800438a:	4413      	add	r3, r2
 800438c:	461a      	mov	r2, r3
 800438e:	2105      	movs	r1, #5
 8004390:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8004394:	f00b f996 	bl	800f6c4 <VL53LX_i2c_encode_system_control>
 8004398:	4603      	mov	r3, r0
 800439a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 800439e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10c      	bne.n	80043c0 <VL53LX_init_and_start_range+0x4d8>
		status =
			VL53LX_WriteMulti(
 80043a6:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80043aa:	f107 020c 	add.w	r2, r7, #12
 80043ae:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 80043b2:	1d38      	adds	r0, r7, #4
 80043b4:	6800      	ldr	r0, [r0, #0]
 80043b6:	f00c fc55 	bl	8010c64 <VL53LX_WriteMulti>
 80043ba:	4603      	mov	r3, r0
 80043bc:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 80043c0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <VL53LX_init_and_start_range+0x4ee>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 80043c8:	1d3b      	adds	r3, r7, #4
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	f003 f968 	bl	80076a0 <VL53LX_update_ll_driver_rd_state>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53LX_ERROR_NONE)
 80043d6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <VL53LX_init_and_start_range+0x504>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 80043de:	1d3b      	adds	r3, r7, #4
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	f003 fafd 	bl	80079e0 <VL53LX_update_ll_driver_cfg_state>
 80043e6:	4603      	mov	r3, r0
 80043e8:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 80043ec:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop

080043fc <VL53LX_stop_range>:


VL53LX_Error VL53LX_stop_range(
	VL53LX_DEV     Dev)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004404:	2300      	movs	r3, #0
 8004406:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev =
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3318      	adds	r3, #24
 800440c:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004414:	60fb      	str	r3, [r7, #12]
			VL53LXDevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 800441c:	b25b      	sxtb	r3, r3
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	b25b      	sxtb	r3, r3
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8004424:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004428:	b25b      	sxtb	r3, r3
 800442a:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
			 VL53LX_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53LX_set_system_control(
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004438:	4619      	mov	r1, r3
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f00b f97d 	bl	800f73a <VL53LX_set_system_control>
 8004440:	4603      	mov	r3, r0
 8004442:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53LX_init_ll_driver_state(
 8004456:	2103      	movs	r1, #3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f003 f8f1 	bl	8007640 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8004464:	3301      	adds	r3, #1
 8004466:	b2da      	uxtb	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f003 fcfb 	bl	8007e6c <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f003 fd2d 	bl	8007ed6 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004482:	3311      	adds	r3, #17
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d102      	bne.n	8004490 <VL53LX_stop_range+0x94>
		VL53LX_low_power_auto_data_stop_range(Dev);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f006 fddc 	bl	800b048 <VL53LX_low_power_auto_data_stop_range>

	return status;
 8004490:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b0c8      	sub	sp, #288	; 0x120
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	1d3b      	adds	r3, r7, #4
 80044a4:	6018      	str	r0, [r3, #0]
 80044a6:	460a      	mov	r2, r1
 80044a8:	1cfb      	adds	r3, r7, #3
 80044aa:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80044ac:	2300      	movs	r3, #0
 80044ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80044b2:	1d3b      	adds	r3, r7, #4
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3318      	adds	r3, #24
 80044b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 80044bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80044c0:	f203 3366 	addw	r3, r3, #870	; 0x366
 80044c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 80044c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80044cc:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80044d0:	3318      	adds	r3, #24
 80044d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 80044d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80044da:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 80044de:	331c      	adds	r3, #28
 80044e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 80044e4:	2388      	movs	r3, #136	; 0x88
 80044e6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 80044f6:	1cfb      	adds	r3, r7, #3
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d008      	beq.n	8004510 <VL53LX_get_measurement_results+0x74>
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d10d      	bne.n	800451e <VL53LX_get_measurement_results+0x82>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8004502:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8004506:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800450a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800450e:	e00a      	b.n	8004526 <VL53LX_get_measurement_results+0x8a>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8004510:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8004514:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8004518:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800451c:	e003      	b.n	8004526 <VL53LX_get_measurement_results+0x8a>
	default:
		i2c_buffer_size_bytes =
 800451e:	232c      	movs	r3, #44	; 0x2c
 8004520:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8004524:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 8004526:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10c      	bne.n	8004548 <VL53LX_get_measurement_results+0xac>
		status =
			VL53LX_ReadMulti(
 800452e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8004532:	f107 0208 	add.w	r2, r7, #8
 8004536:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800453a:	1d38      	adds	r0, r7, #4
 800453c:	6800      	ldr	r0, [r0, #0]
 800453e:	f00c fbc7 	bl	8010cd0 <VL53LX_ReadMulti>
 8004542:	4603      	mov	r3, r0
 8004544:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 8004548:	1cfb      	adds	r3, r7, #3
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d917      	bls.n	8004580 <VL53LX_get_measurement_results+0xe4>
 8004550:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8004554:	2b00      	cmp	r3, #0
 8004556:	d113      	bne.n	8004580 <VL53LX_get_measurement_results+0xe4>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004558:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800455c:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8004560:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004564:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_debug_results(
 8004568:	f107 0208 	add.w	r2, r7, #8
 800456c:	4413      	add	r3, r2
 800456e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004572:	4619      	mov	r1, r3
 8004574:	2038      	movs	r0, #56	; 0x38
 8004576:	f00b fa5e 	bl	800fa36 <VL53LX_i2c_decode_debug_results>
 800457a:	4603      	mov	r3, r0
 800457c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 8004580:	1cfb      	adds	r3, r7, #3
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d017      	beq.n	80045b8 <VL53LX_get_measurement_results+0x11c>
 8004588:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800458c:	2b00      	cmp	r3, #0
 800458e:	d113      	bne.n	80045b8 <VL53LX_get_measurement_results+0x11c>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004590:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8004594:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8004598:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800459c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_core_results(
 80045a0:	f107 0208 	add.w	r2, r7, #8
 80045a4:	4413      	add	r3, r2
 80045a6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80045aa:	4619      	mov	r1, r3
 80045ac:	2021      	movs	r0, #33	; 0x21
 80045ae:	f00b f9e1 	bl	800f974 <VL53LX_i2c_decode_core_results>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 80045b8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d110      	bne.n	80045e2 <VL53LX_get_measurement_results+0x146>

		i2c_buffer_offset_bytes = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80045c6:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_system_results(
 80045ca:	f107 0208 	add.w	r2, r7, #8
 80045ce:	4413      	add	r3, r2
 80045d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80045d4:	4619      	mov	r1, r3
 80045d6:	202c      	movs	r0, #44	; 0x2c
 80045d8:	f00b f8d6 	bl	800f788 <VL53LX_i2c_decode_system_results>
 80045dc:	4603      	mov	r3, r0
 80045de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 80045e2:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 80045f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f4:	b0a0      	sub	sp, #128	; 0x80
 80045f6:	af06      	add	r7, sp, #24
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	460b      	mov	r3, r1
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004600:	2300      	movs	r3, #0
 8004602:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53LX_LLDriverData_t *pdev =
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3318      	adds	r3, #24
 800460a:	663b      	str	r3, [r7, #96]	; 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004612:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 8004614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004616:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 8004618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800461a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800461e:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 8004620:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004622:	332c      	adds	r3, #44	; 0x2c
 8004624:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 8004626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004628:	33c2      	adds	r3, #194	; 0xc2
 800462a:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 800462c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800462e:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8004632:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8004634:	f107 0314 	add.w	r3, r7, #20
 8004638:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800463a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800463c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004640:	643b      	str	r3, [r7, #64]	; 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8004642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004644:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004648:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 800464a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800464c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004650:	3310      	adds	r3, #16
 8004652:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8004654:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004656:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800465a:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 800465c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800465e:	3348      	adds	r3, #72	; 0x48
 8004660:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 8004662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004664:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 800466a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800466c:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8004670:	331c      	adds	r3, #28
 8004672:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 8004674:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004676:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8290 	beq.w	8004ba4 <VL53LX_get_device_results+0x5b4>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 8004684:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004686:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800468a:	4619      	mov	r1, r3
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 fbcb 	bl	8004e28 <VL53LX_get_histogram_bin_data>
 8004692:	4603      	mov	r3, r0
 8004694:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 8004698:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800469c:	2b00      	cmp	r3, #0
 800469e:	d118      	bne.n	80046d2 <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 80046a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a2:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d114      	bne.n	80046d2 <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 80046a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 80046b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ba:	4413      	add	r3, r2
 80046bc:	1d1a      	adds	r2, r3, #4
 80046be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f004 f976 	bl	80089b8 <VL53LX_hist_copy_and_scale_ambient_info>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 80046d2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f040 8206 	bne.w	8004ae8 <VL53LX_get_device_results+0x4f8>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80046dc:	f107 0313 	add.w	r3, r7, #19
 80046e0:	4619      	mov	r1, r3
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f006 fdd5 	bl	800b292 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 80046e8:	7cfb      	ldrb	r3, [r7, #19]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 80046f2:	7cfb      	ldrb	r3, [r7, #19]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 80046fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046fc:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d107      	bne.n	8004714 <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8004704:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	3202      	adds	r2, #2
 800470c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8004710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004712:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8004714:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004716:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 800471a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800471c:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 800471e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004724:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f004 f84a 	bl	80087c4 <VL53LX_calc_crosstalk_plane_offset_with_margin>
 8004730:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004734:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8004736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004738:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800473c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800473e:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004742:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8004746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004748:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 800474a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800474c:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 800474e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004750:	f883 2255 	strb.w	r2, [r3, #597]	; 0x255
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8004754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004756:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8004758:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800475a:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 800475e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004760:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8004762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004764:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8004768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800476a:	f8b3 22fe 	ldrh.w	r2, [r3, #766]	; 0x2fe
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 800476e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004770:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8004774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004776:	f893 2331 	ldrb.w	r2, [r3, #817]	; 0x331
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 800477a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800477c:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8004780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004782:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8004786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004788:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 800478a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478c:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8004790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004792:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8004794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004796:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8004798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479a:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 800479c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479e:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 80047a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a2:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 80047a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047a6:	f203 3292 	addw	r2, r3, #914	; 0x392
 80047aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047ac:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80047b0:	4619      	mov	r1, r3
 80047b2:	4610      	mov	r0, r2
 80047b4:	f003 fa3a 	bl	8007c2c <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 80047b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047ba:	795b      	ldrb	r3, [r3, #5]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d002      	beq.n	80047c6 <VL53LX_get_device_results+0x1d6>
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d02e      	beq.n	8004822 <VL53LX_get_device_results+0x232>
 80047c4:	e03d      	b.n	8004842 <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 80047c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047c8:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80047cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 80047dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047de:	f893 e3c2 	ldrb.w	lr, [r3, #962]	; 0x3c2
 80047e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047e4:	f893 83c3 	ldrb.w	r8, [r3, #963]	; 0x3c3
 80047e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ea:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80047ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047f0:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 80047f4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80047f6:	319c      	adds	r1, #156	; 0x9c
 80047f8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80047fa:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 80047fe:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 8004802:	b2a4      	uxth	r4, r4
 8004804:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8004806:	351c      	adds	r5, #28
 8004808:	9505      	str	r5, [sp, #20]
 800480a:	9404      	str	r4, [sp, #16]
 800480c:	9003      	str	r0, [sp, #12]
 800480e:	9102      	str	r1, [sp, #8]
 8004810:	9201      	str	r2, [sp, #4]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	4643      	mov	r3, r8
 8004816:	4672      	mov	r2, lr
 8004818:	4661      	mov	r1, ip
 800481a:	4630      	mov	r0, r6
 800481c:	f004 ff7d 	bl	800971a <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8004820:	e013      	b.n	800484a <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8004822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004824:	331c      	adds	r3, #28
 8004826:	4619      	mov	r1, r3
 8004828:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800482a:	f7fe fa4f 	bl	8002ccc <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 800482e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004830:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004834:	b29b      	uxth	r3, r3
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	b29b      	uxth	r3, r3
 800483a:	b21a      	sxth	r2, r3
 800483c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800483e:	839a      	strh	r2, [r3, #28]
		break;
 8004840:	e003      	b.n	800484a <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 8004842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004844:	2200      	movs	r2, #0
 8004846:	839a      	strh	r2, [r3, #28]
		break;
 8004848:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 800484a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800484e:	2b00      	cmp	r3, #0
 8004850:	f040 814c 	bne.w	8004aec <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 8004854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004856:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 800485a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485c:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 8004860:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004862:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8004866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004868:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		VL53LX_calc_max_effective_spads(
 800486c:	b29c      	uxth	r4, r3
 800486e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004870:	f203 236a 	addw	r3, r3, #618	; 0x26a
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	4623      	mov	r3, r4
 8004878:	f005 f8f4 	bl	8009a64 <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 800487c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800487e:	799b      	ldrb	r3, [r3, #6]
 8004880:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004882:	4619      	mov	r1, r3
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 fee2 	bl	800564e <VL53LX_get_dmax_calibration_data>
 800488a:	4603      	mov	r3, r0
 800488c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 8004890:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004894:	2b00      	cmp	r3, #0
 8004896:	f040 812b 	bne.w	8004af0 <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 800489a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800489c:	f503 7515 	add.w	r5, r3, #596	; 0x254
 80048a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048a2:	f503 7605 	add.w	r6, r3, #532	; 0x214
 80048a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048ae:	f202 521c 	addw	r2, r2, #1308	; 0x51c
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 80048b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80048b4:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
				pdev->wArea2,
 80048b8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80048ba:	f500 50d0 	add.w	r0, r0, #6656	; 0x1a00
		status = VL53LX_ipp_hist_process_data(
 80048be:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80048c0:	9405      	str	r4, [sp, #20]
 80048c2:	f107 0413 	add.w	r4, r7, #19
 80048c6:	9404      	str	r4, [sp, #16]
 80048c8:	9003      	str	r0, [sp, #12]
 80048ca:	9102      	str	r1, [sp, #8]
 80048cc:	9201      	str	r2, [sp, #4]
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	4633      	mov	r3, r6
 80048d2:	462a      	mov	r2, r5
 80048d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f00c fbf0 	bl	80110bc <VL53LX_ipp_hist_process_data>
 80048dc:	4603      	mov	r3, r0
 80048de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80048e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048e4:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d150      	bne.n	800498e <VL53LX_get_device_results+0x39e>
			(histo_merge_nb > 1))
 80048ec:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d94d      	bls.n	800498e <VL53LX_get_device_results+0x39e>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80048f2:	2300      	movs	r3, #0
 80048f4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80048f8:	e045      	b.n	8004986 <VL53LX_get_device_results+0x396>
			pdata = &(presults->VL53LX_p_003[i]);
 80048fa:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80048fe:	224c      	movs	r2, #76	; 0x4c
 8004900:	fb02 f303 	mul.w	r3, r2, r3
 8004904:	3310      	adds	r3, #16
 8004906:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004908:	4413      	add	r3, r2
 800490a:	3304      	adds	r3, #4
 800490c:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	7cfa      	ldrb	r2, [r7, #19]
 8004914:	fbb3 f2f2 	udiv	r2, r3, r2
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	7cfa      	ldrb	r2, [r7, #19]
 8004922:	fbb3 f2f2 	udiv	r2, r3, r2
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	7cfa      	ldrb	r2, [r7, #19]
 8004930:	fb93 f2f2 	sdiv	r2, r3, r2
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800493c:	461a      	mov	r2, r3
 800493e:	7cfb      	ldrb	r3, [r7, #19]
 8004940:	fb92 f3f3 	sdiv	r3, r2, r3
 8004944:	b29a      	uxth	r2, r3
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800494e:	461a      	mov	r2, r3
 8004950:	7cfb      	ldrb	r3, [r7, #19]
 8004952:	fb92 f3f3 	sdiv	r3, r2, r3
 8004956:	b29a      	uxth	r2, r3
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004960:	461a      	mov	r2, r3
 8004962:	7cfb      	ldrb	r3, [r7, #19]
 8004964:	fb92 f3f3 	sdiv	r3, r2, r3
 8004968:	b29a      	uxth	r2, r3
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004972:	7cfa      	ldrb	r2, [r7, #19]
 8004974:	fbb3 f2f2 	udiv	r2, r3, r2
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 800497c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004980:	3301      	adds	r3, #1
 8004982:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004986:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800498a:	2b03      	cmp	r3, #3
 800498c:	d9b5      	bls.n	80048fa <VL53LX_get_device_results+0x30a>
		}


		if (status != VL53LX_ERROR_NONE)
 800498e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004992:	2b00      	cmp	r3, #0
 8004994:	f040 80ae 	bne.w	8004af4 <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 8004998:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800499a:	f503 7005 	add.w	r0, r3, #532	; 0x214
 800499e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049a0:	f503 7171 	add.w	r1, r3, #964	; 0x3c4
 80049a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049a6:	330e      	adds	r3, #14
 80049a8:	461a      	mov	r2, r3
 80049aa:	f004 fe80 	bl	80096ae <VL53LX_hist_wrap_dmax>
 80049ae:	4603      	mov	r3, r0
 80049b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 80049b4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f040 809d 	bne.w	8004af8 <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80049be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 80049c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d0:	4413      	add	r3, r2
 80049d2:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 80049d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 80049d8:	4613      	mov	r3, r2
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	4413      	add	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80049e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049e6:	4413      	add	r3, r2
 80049e8:	f103 0208 	add.w	r2, r3, #8
 80049ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f004 fa10 	bl	8008e14 <VL53LX_hist_phase_consistency_check>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 80049fa:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d17c      	bne.n	8004afc <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8004a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8004a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a14:	4413      	add	r3, r2
 8004a16:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8004a18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004a28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f103 0208 	add.w	r2, r3, #8
 8004a30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f004 fde1 	bl	80095fe <VL53LX_hist_xmonitor_consistency_check>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 8004a42:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d15a      	bne.n	8004b00 <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 8004a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	2205      	movs	r2, #5
 8004a58:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 8004a5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a5c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004a60:	3301      	adds	r3, #1
 8004a62:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8004a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a66:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8004a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004a6e:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8004a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a72:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
		if (zid <
 8004a76:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d222      	bcs.n	8004ac4 <VL53LX_get_device_results+0x4d4>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 8004a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			phist_info =
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a86:	4413      	add	r3, r2
 8004a88:	3304      	adds	r3, #4
 8004a8a:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8004a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8e:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8004a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a92:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8004a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a96:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8004a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a9a:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9e:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 8004aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa4:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 8004aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa8:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53LX_p_005 =
 8004aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aae:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8004ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 8004ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab8:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8004aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 8004ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ac2:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 8004ac4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d11b      	bne.n	8004b04 <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 8004acc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ace:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 8004ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ad4:	f203 3266 	addw	r2, r3, #870	; 0x366
 8004ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ada:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8004ade:	3318      	adds	r3, #24
 8004ae0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ae2:	f005 f91c 	bl	8009d1e <VL53LX_hist_copy_results_to_sys_and_core>
 8004ae6:	e00e      	b.n	8004b06 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004ae8:	bf00      	nop
 8004aea:	e00c      	b.n	8004b06 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004aec:	bf00      	nop
 8004aee:	e00a      	b.n	8004b06 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004af0:	bf00      	nop
 8004af2:	e008      	b.n	8004b06 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004af4:	bf00      	nop
 8004af6:	e006      	b.n	8004b06 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004af8:	bf00      	nop
 8004afa:	e004      	b.n	8004b06 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004afc:	bf00      	nop
 8004afe:	e002      	b.n	8004b06 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004b00:	bf00      	nop
 8004b02:	e000      	b.n	8004b06 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004b04:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 8004b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b08:	785b      	ldrb	r3, [r3, #1]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d036      	beq.n	8004b7c <VL53LX_get_device_results+0x58c>
			if (pstate->rd_device_state !=
 8004b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b10:	79db      	ldrb	r3, [r3, #7]
 8004b12:	2b06      	cmp	r3, #6
 8004b14:	d00a      	beq.n	8004b2c <VL53LX_get_device_results+0x53c>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 8004b16:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <VL53LX_get_device_results+0x53c>
					status = VL53LX_dynamic_zone_update(
 8004b1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f005 f9d0 	bl	8009ec6 <VL53LX_dynamic_zone_update>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004b32:	e015      	b.n	8004b60 <VL53LX_get_device_results+0x570>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8004b34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b36:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 8004b3a:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <VL53LX_get_device_results+0x556>
 8004b42:	2103      	movs	r1, #3
 8004b44:	e000      	b.n	8004b48 <VL53LX_get_device_results+0x558>
 8004b46:	2101      	movs	r1, #1
 8004b48:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004b4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b4e:	4413      	add	r3, r2
 8004b50:	460a      	mov	r2, r1
 8004b52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004b56:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004b60:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d9e5      	bls.n	8004b34 <VL53LX_get_device_results+0x544>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 8004b68:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d105      	bne.n	8004b7c <VL53LX_get_device_results+0x58c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f005 fa22 	bl	8009fba <VL53LX_multizone_hist_bins_update>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 8004b7c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d105      	bne.n	8004b90 <VL53LX_get_device_results+0x5a0>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f005 fe79 	bl	800a87c <VL53LX_dynamic_xtalk_correction_corrector>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (pdev->tuning_parms.tp_hist_merge == 1)
 8004b90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b92:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d151      	bne.n	8004c3e <VL53LX_get_device_results+0x64e>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8004b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	e04c      	b.n	8004c3e <VL53LX_get_device_results+0x64e>
	} else {

		if (status == VL53LX_ERROR_NONE)
 8004ba4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d107      	bne.n	8004bbc <VL53LX_get_device_results+0x5cc>
			status = VL53LX_get_measurement_results(
 8004bac:	7afb      	ldrb	r3, [r7, #11]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f7ff fc73 	bl	800449c <VL53LX_get_measurement_results>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 8004bbc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10d      	bne.n	8004be0 <VL53LX_get_device_results+0x5f0>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8004bc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bc6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 8004bca:	4618      	mov	r0, r3
 8004bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bce:	f203 3166 	addw	r1, r3, #870	; 0x366
 8004bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bd4:	f503 5299 	add.w	r2, r3, #4896	; 0x1320
 8004bd8:	3218      	adds	r2, #24
 8004bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bdc:	f000 fb86 	bl	80052ec <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8004be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be2:	785b      	ldrb	r3, [r3, #1]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d12a      	bne.n	8004c3e <VL53LX_get_device_results+0x64e>

			if ((status == VL53LX_ERROR_NONE) &&
 8004be8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10d      	bne.n	8004c0c <VL53LX_get_device_results+0x61c>
				(pL->low_power_auto_range_count == 0)) {
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <VL53LX_get_device_results+0x61c>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f006 fa70 	bl	800b0de <VL53LX_low_power_auto_setup_manual_calibration>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8004c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c06:	2201      	movs	r2, #1
 8004c08:	709a      	strb	r2, [r3, #2]
 8004c0a:	e00a      	b.n	8004c22 <VL53LX_get_device_results+0x632>
			} else if ((status == VL53LX_ERROR_NONE) &&
 8004c0c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <VL53LX_get_device_results+0x632>
				(pL->low_power_auto_range_count == 1)) {
 8004c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c16:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d102      	bne.n	8004c22 <VL53LX_get_device_results+0x632>
				pL->low_power_auto_range_count = 2;
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1e:	2202      	movs	r2, #2
 8004c20:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	789b      	ldrb	r3, [r3, #2]
 8004c26:	2bff      	cmp	r3, #255	; 0xff
 8004c28:	d009      	beq.n	8004c3e <VL53LX_get_device_results+0x64e>
 8004c2a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d105      	bne.n	8004c3e <VL53LX_get_device_results+0x64e>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f006 faa5 	bl	800b182 <VL53LX_low_power_auto_update_DSS>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8004c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c40:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004c44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c46:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8004c48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c4a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8004c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c50:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8004c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c54:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8004c58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c5a:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 8004c5c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f040 80b0 	bne.w	8004dc6 <VL53LX_get_device_results+0x7d6>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8004c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c68:	2205      	movs	r2, #5
 8004c6a:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8004c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c70:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004c74:	3301      	adds	r3, #1
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c7a:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
		zid = pdev->ll_state.rd_zone_id;
 8004c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (zid < pres->zone_results.max_zones) {
 8004c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8a:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8004c8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004c92:	429a      	cmp	r2, r3
 8004c94:	f080 8097 	bcs.w	8004dc6 <VL53LX_get_device_results+0x7d6>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 8004c98:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
			pobjects =
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004ca8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004caa:	4413      	add	r3, r2
 8004cac:	3308      	adds	r3, #8
 8004cae:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8004cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cb2:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8004cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb6:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8004cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cba:	785a      	ldrb	r2, [r3, #1]
 8004cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cbe:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8004cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cc2:	789a      	ldrb	r2, [r3, #2]
 8004cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc6:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8004cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cca:	78da      	ldrb	r2, [r3, #3]
 8004ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cce:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 8004cd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cd2:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 8004cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd8:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 8004cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cdc:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 8004ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce2:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 8004ce4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ce6:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 8004cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8004cf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cf2:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 8004cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 8004cfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cfe:	7c5a      	ldrb	r2, [r3, #17]
 8004d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d02:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8004d04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d06:	7c9a      	ldrb	r2, [r3, #18]
 8004d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d0a:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004d12:	e052      	b.n	8004dba <VL53LX_get_device_results+0x7ca>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004d14:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004d18:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004d1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d1e:	204c      	movs	r0, #76	; 0x4c
 8004d20:	fb00 f303 	mul.w	r3, r0, r3
 8004d24:	440b      	add	r3, r1
 8004d26:	3338      	adds	r3, #56	; 0x38
 8004d28:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004d2a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4403      	add	r3, r0
 8004d36:	3308      	adds	r3, #8
 8004d38:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004d3a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004d3e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004d42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d44:	204c      	movs	r0, #76	; 0x4c
 8004d46:	fb00 f303 	mul.w	r3, r0, r3
 8004d4a:	440b      	add	r3, r1
 8004d4c:	333c      	adds	r3, #60	; 0x3c
 8004d4e:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004d50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004d52:	4613      	mov	r3, r2
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4403      	add	r3, r0
 8004d5c:	330c      	adds	r3, #12
 8004d5e:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004d60:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004d64:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004d68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d6a:	204c      	movs	r0, #76	; 0x4c
 8004d6c:	fb00 f303 	mul.w	r3, r0, r3
 8004d70:	440b      	add	r3, r1
 8004d72:	3354      	adds	r3, #84	; 0x54
 8004d74:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004d76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d78:	4613      	mov	r3, r2
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	3310      	adds	r3, #16
 8004d84:	4602      	mov	r2, r0
 8004d86:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8004d88:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].range_status =
 8004d8c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].range_status;
 8004d90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d92:	204c      	movs	r0, #76	; 0x4c
 8004d94:	fb00 f303 	mul.w	r3, r0, r3
 8004d98:	440b      	add	r3, r1
 8004d9a:	335e      	adds	r3, #94	; 0x5e
 8004d9c:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 8004d9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004da0:	4613      	mov	r3, r2
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	3312      	adds	r3, #18
 8004dac:	4602      	mov	r2, r0
 8004dae:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8004db0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004db4:	3301      	adds	r3, #1
 8004db6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dbc:	7c9b      	ldrb	r3, [r3, #18]
 8004dbe:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d3a6      	bcc.n	8004d14 <VL53LX_get_device_results+0x724>
		}
	}



	memcpy(
 8004dc6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8004dca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f00f f9a1 	bl	8014114 <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 8004dd2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d105      	bne.n	8004de6 <VL53LX_get_device_results+0x7f6>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f002 fd4e 	bl	800787c <VL53LX_check_ll_driver_rd_state>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8004de6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3768      	adds	r7, #104	; 0x68
 8004dee:	46bd      	mov	sp, r7
 8004df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004df4 <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004e00:	2300      	movs	r3, #0
 8004e02:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 8004e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d107      	bne.n	8004e1c <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	2203      	movs	r2, #3
 8004e10:	4619      	mov	r1, r3
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff f868 	bl	8003ee8 <VL53LX_init_and_start_range>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8004e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b0d2      	sub	sp, #328	; 0x148
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	1d3b      	adds	r3, r7, #4
 8004e30:	6018      	str	r0, [r3, #0]
 8004e32:	463b      	mov	r3, r7
 8004e34:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev =
 8004e3c:	1d3b      	adds	r3, r7, #4
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3318      	adds	r3, #24
 8004e42:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004e46:	1d3b      	adds	r3, r7, #4
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004e4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8004e52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e56:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8004e5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8004e5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e62:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8004e66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8004e6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e6e:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8004e72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8004e76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e7a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8004e7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 8004e82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004e86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8004e8a:	f107 030c 	add.w	r3, r7, #12
 8004e8e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8004e92:	2300      	movs	r3, #0
 8004e94:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c

	uint32_t   pll_period_us            = 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t    i                        = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b

	int32_t    hist_merge				= 0;
 8004ebc:	f107 0308 	add.w	r3, r7, #8
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8004ec4:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10a      	bne.n	8004ee2 <VL53LX_get_histogram_bin_data+0xba>
		status = VL53LX_ReadMulti(
 8004ecc:	1d38      	adds	r0, r7, #4
 8004ece:	2353      	movs	r3, #83	; 0x53
 8004ed0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8004ed4:	2188      	movs	r1, #136	; 0x88
 8004ed6:	6800      	ldr	r0, [r0, #0]
 8004ed8:	f00b fefa 	bl	8010cd0 <VL53LX_ReadMulti>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8004ee2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004ee6:	781a      	ldrb	r2, [r3, #0]
 8004ee8:	463b      	mov	r3, r7
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8004ef0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004ef4:	785a      	ldrb	r2, [r3, #1]
 8004ef6:	463b      	mov	r3, r7
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8004efe:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004f02:	789a      	ldrb	r2, [r3, #2]
 8004f04:	463b      	mov	r3, r7
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8004f0c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004f10:	78da      	ldrb	r2, [r3, #3]
 8004f12:	463b      	mov	r3, r7
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 8004f1a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004f1e:	3304      	adds	r3, #4
 8004f20:	4619      	mov	r1, r3
 8004f22:	2002      	movs	r0, #2
 8004f24:	f003 f9aa 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8004f2c:	463b      	mov	r3, r7
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8004f34:	234e      	movs	r3, #78	; 0x4e
 8004f36:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8004f3a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004f3e:	f107 020c 	add.w	r2, r7, #12
 8004f42:	4413      	add	r3, r2
 8004f44:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8004f48:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004f4c:	2002      	movs	r0, #2
 8004f4e:	f003 f995 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 8004f52:	4603      	mov	r3, r0
 8004f54:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8004f56:	463b      	mov	r3, r7
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8004f5e:	2350      	movs	r3, #80	; 0x50
 8004f60:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8004f64:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004f68:	f107 020c 	add.w	r2, r7, #12
 8004f6c:	5cd2      	ldrb	r2, [r2, r3]
 8004f6e:	463b      	mov	r3, r7
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8004f76:	463b      	mov	r3, r7
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8004f7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f82:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8004f86:	331c      	adds	r3, #28
 8004f88:	801a      	strh	r2, [r3, #0]
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8004f8a:	463b      	mov	r3, r7
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8004f92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f96:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8004f9a:	331e      	adds	r3, #30
 8004f9c:	701a      	strb	r2, [r3, #0]



	i2c_buffer_offset_bytes =
 8004f9e:	2351      	movs	r3, #81	; 0x51
 8004fa0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8004fa4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004fa8:	f107 020c 	add.w	r2, r7, #12
 8004fac:	5cd3      	ldrb	r3, [r2, r3]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8004fb4:	2352      	movs	r3, #82	; 0x52
 8004fb6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8004fba:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004fbe:	f107 020c 	add.w	r2, r7, #12
 8004fc2:	5cd2      	ldrb	r2, [r2, r3]
 8004fc4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8004fc8:	4413      	add	r3, r2
 8004fca:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8004fce:	234d      	movs	r3, #77	; 0x4d
 8004fd0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8004fd4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004fd8:	f107 020c 	add.w	r2, r7, #12
 8004fdc:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8004fe0:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8004fe2:	2306      	movs	r3, #6
 8004fe4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8004fe8:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004fec:	f107 020c 	add.w	r2, r7, #12
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8004ffc:	e017      	b.n	800502e <VL53LX_get_histogram_bin_data+0x206>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8004ffe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005002:	2003      	movs	r0, #3
 8005004:	f003 f9d9 	bl	80083ba <VL53LX_i2c_decode_uint32_t>
 8005008:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 800500a:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 800500e:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8005010:	463b      	mov	r3, r7
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3206      	adds	r2, #6
 8005016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 800501a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800501e:	3303      	adds	r3, #3
 8005020:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8005024:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005028:	3301      	adds	r3, #1
 800502a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800502e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005032:	2b17      	cmp	r3, #23
 8005034:	d9e3      	bls.n	8004ffe <VL53LX_get_histogram_bin_data+0x1d6>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 8005036:	f107 0208 	add.w	r2, r7, #8
 800503a:	1d3b      	adds	r3, r7, #4
 800503c:	f248 018d 	movw	r1, #32909	; 0x808d
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	f000 fb2f 	bl	80056a4 <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 8005046:	463b      	mov	r3, r7
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800504e:	2b00      	cmp	r3, #0
 8005050:	d118      	bne.n	8005084 <VL53LX_get_histogram_bin_data+0x25c>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8005052:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005056:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800505a:	3310      	adds	r3, #16
 800505c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f00f f864 	bl	8014130 <memset>
		pdev->bin_rec_pos = 0;
 8005068:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800506c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8005070:	330c      	adds	r3, #12
 8005072:	2200      	movs	r2, #0
 8005074:	701a      	strb	r2, [r3, #0]
		pdev->pos_before_next_recom = 0;
 8005076:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800507a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800507e:	330d      	adds	r3, #13
 8005080:	2200      	movs	r2, #0
 8005082:	701a      	strb	r2, [r3, #0]
	}

	if (hist_merge == 1)
 8005084:	f107 0308 	add.w	r3, r7, #8
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d105      	bne.n	800509a <VL53LX_get_histogram_bin_data+0x272>
		vl53lx_histo_merge(Dev, pdata);
 800508e:	463a      	mov	r2, r7
 8005090:	1d3b      	adds	r3, r7, #4
 8005092:	6811      	ldr	r1, [r2, #0]
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	f7fd ff10 	bl	8002eba <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 800509a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800509e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80050a2:	463b      	mov	r3, r7
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 80050a8:	463b      	mov	r3, r7
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2200      	movs	r2, #0
 80050ae:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 80050b0:	463b      	mov	r3, r7
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2218      	movs	r2, #24
 80050b6:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 80050b8:	463b      	mov	r3, r7
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2218      	movs	r2, #24
 80050be:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 80050c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80050c4:	78da      	ldrb	r2, [r3, #3]
 80050c6:	463b      	mov	r3, r7
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 80050ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80050d2:	799b      	ldrb	r3, [r3, #6]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 80050da:	463b      	mov	r3, r7
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 80050e2:	463b      	mov	r3, r7
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 80050ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050ee:	7c1b      	ldrb	r3, [r3, #16]
 80050f0:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 80050f2:	4413      	add	r3, r2
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	463b      	mov	r3, r7
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 80050fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005102:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 8005104:	463b      	mov	r3, r7
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 800510c:	463a      	mov	r2, r7
 800510e:	1d3b      	adds	r3, r7, #4
 8005110:	6811      	ldr	r1, [r2, #0]
 8005112:	6818      	ldr	r0, [r3, #0]
 8005114:	f003 fd20 	bl	8008b58 <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8005118:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800511c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005120:	2b00      	cmp	r3, #0
 8005122:	d114      	bne.n	800514e <VL53LX_get_histogram_bin_data+0x326>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8005124:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005128:	791b      	ldrb	r3, [r3, #4]
 800512a:	b29b      	uxth	r3, r3
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8005130:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005134:	795b      	ldrb	r3, [r3, #5]
 8005136:	b29b      	uxth	r3, r3
		encoded_timeout =
 8005138:	4413      	add	r3, r2
 800513a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 800513e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005142:	799a      	ldrb	r2, [r3, #6]
 8005144:	463b      	mov	r3, r7
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800514c:	e013      	b.n	8005176 <VL53LX_get_histogram_bin_data+0x34e>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 800514e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005152:	79db      	ldrb	r3, [r3, #7]
 8005154:	b29b      	uxth	r3, r3
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 800515a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800515e:	7a1b      	ldrb	r3, [r3, #8]
 8005160:	b29b      	uxth	r3, r3
		encoded_timeout =
 8005162:	4413      	add	r3, r2
 8005164:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 8005168:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800516c:	7a5a      	ldrb	r2, [r3, #9]
 800516e:	463b      	mov	r3, r7
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8005176:	463b      	mov	r3, r7
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2200      	movs	r2, #0
 800517c:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 800517e:	2300      	movs	r3, #0
 8005180:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8005184:	e016      	b.n	80051b4 <VL53LX_get_histogram_bin_data+0x38c>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8005186:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800518a:	463a      	mov	r2, r7
 800518c:	6812      	ldr	r2, [r2, #0]
 800518e:	4413      	add	r3, r2
 8005190:	7b1b      	ldrb	r3, [r3, #12]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	2b07      	cmp	r3, #7
 8005198:	d107      	bne.n	80051aa <VL53LX_get_histogram_bin_data+0x382>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 800519a:	463b      	mov	r3, r7
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	7adb      	ldrb	r3, [r3, #11]
 80051a0:	3304      	adds	r3, #4
 80051a2:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 80051a4:	463b      	mov	r3, r7
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 80051aa:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80051ae:	3301      	adds	r3, #1
 80051b0:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 80051b4:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80051b8:	2b05      	cmp	r3, #5
 80051ba:	d9e4      	bls.n	8005186 <VL53LX_get_histogram_bin_data+0x35e>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 80051bc:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80051c0:	4618      	mov	r0, r3
 80051c2:	f003 fb6a 	bl	800889a <VL53LX_decode_timeout>
 80051c6:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 80051c8:	463b      	mov	r3, r7
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 80051d0:	463b      	mov	r3, r7
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80051d8:	4618      	mov	r0, r3
 80051da:	f006 f89a 	bl	800b312 <VL53LX_calc_pll_period_us>
 80051de:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 80051e2:	463b      	mov	r3, r7
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	3301      	adds	r3, #1
 80051ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 80051f0:	463b      	mov	r3, r7
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53LX_duration_maths(
 80051f8:	4619      	mov	r1, r3
 80051fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005202:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8005206:	f006 f89b 	bl	800b340 <VL53LX_duration_maths>
 800520a:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 800520c:	463b      	mov	r3, r7
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8005214:	463b      	mov	r3, r7
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2200      	movs	r2, #0
 800521a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 800521e:	463b      	mov	r3, r7
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	f006 f9a4 	bl	800b56e <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 8005226:	463b      	mov	r3, r7
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	f006 fdb0 	bl	800bd8e <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 800522e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005232:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005236:	463b      	mov	r3, r7
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 800523c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005240:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8005244:	463b      	mov	r3, r7
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 800524a:	463b      	mov	r3, r7
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	789b      	ldrb	r3, [r3, #2]
 8005250:	461a      	mov	r2, r3
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800525e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005262:	4413      	add	r3, r2
 8005264:	3302      	adds	r3, #2
 8005266:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 800526a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800526e:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8005270:	463b      	mov	r3, r7
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8005278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800527c:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 800527e:	463b      	mov	r3, r7
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8005286:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800528a:	2200      	movs	r2, #0
 800528c:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 800528e:	463b      	mov	r3, r7
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005296:	f003 031f 	and.w	r3, r3, #31
 800529a:	2b11      	cmp	r3, #17
 800529c:	bf8c      	ite	hi
 800529e:	2201      	movhi	r2, #1
 80052a0:	2200      	movls	r2, #0
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	2a00      	cmp	r2, #0
 80052a6:	d118      	bne.n	80052da <VL53LX_get_histogram_bin_data+0x4b2>
 80052a8:	2201      	movs	r2, #1
 80052aa:	409a      	lsls	r2, r3
 80052ac:	4b0e      	ldr	r3, [pc, #56]	; (80052e8 <VL53LX_get_histogram_bin_data+0x4c0>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bf14      	ite	ne
 80052b4:	2301      	movne	r3, #1
 80052b6:	2300      	moveq	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00d      	beq.n	80052da <VL53LX_get_histogram_bin_data+0x4b2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 80052be:	463b      	mov	r3, r7
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80052c6:	f003 031f 	and.w	r3, r3, #31
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052d0:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 80052d2:	23fa      	movs	r3, #250	; 0xfa
 80052d4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 80052d8:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80052da:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 80052de:	4618      	mov	r0, r3
 80052e0:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	0002200e 	.word	0x0002200e

080052ec <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b08b      	sub	sp, #44	; 0x2c
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 8005300:	2300      	movs	r3, #0
 8005302:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2200      	movs	r2, #0
 800530c:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	78da      	ldrb	r2, [r3, #3]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2200      	movs	r2, #0
 800531a:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2204      	movs	r2, #4
 8005320:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2201      	movs	r2, #1
 8005326:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	8a1b      	ldrh	r3, [r3, #16]
 800532c:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	8a9b      	ldrh	r3, [r3, #20]
 8005332:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	8a5b      	ldrh	r3, [r3, #18]
 8005338:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 800533a:	2300      	movs	r3, #0
 800533c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005340:	e00b      	b.n	800535a <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 8005342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	4413      	add	r3, r2
 800534c:	2200      	movs	r2, #0
 800534e:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8005350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005354:	3301      	adds	r3, #1
 8005356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800535a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800535e:	2b04      	cmp	r3, #4
 8005360:	d9ef      	bls.n	8005342 <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	3314      	adds	r3, #20
 8005366:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8005368:	2300      	movs	r3, #0
 800536a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800536e:	e0fe      	b.n	800556e <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005376:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	2200      	movs	r2, #0
 800537c:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	78db      	ldrb	r3, [r3, #3]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	785b      	ldrb	r3, [r3, #1]
 800538a:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800538e:	2b09      	cmp	r3, #9
 8005390:	d104      	bne.n	800539c <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	2213      	movs	r2, #19
 8005396:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800539a:	e007      	b.n	80053ac <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	785b      	ldrb	r3, [r3, #1]
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	b2da      	uxtb	r2, r3
			pdata->range_status =
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	2200      	movs	r2, #0
 80053b0:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	2200      	movs	r2, #0
 80053b6:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	2200      	movs	r2, #0
 80053bc:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	2200      	movs	r2, #0
 80053c2:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	2200      	movs	r2, #0
 80053c8:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	2200      	movs	r2, #0
 80053ce:	735a      	strb	r2, [r3, #13]

		switch (i) {
 80053d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d05c      	beq.n	8005496 <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 80053dc:	e0a8      	b.n	8005530 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	789b      	ldrb	r3, [r3, #2]
 80053e2:	2b07      	cmp	r3, #7
 80053e4:	d103      	bne.n	80053ee <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	8a7a      	ldrh	r2, [r7, #18]
 80053ea:	82da      	strh	r2, [r3, #22]
 80053ec:	e00b      	b.n	8005406 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	789b      	ldrb	r3, [r3, #2]
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d103      	bne.n	80053fe <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	8aba      	ldrh	r2, [r7, #20]
 80053fa:	82da      	strh	r2, [r3, #22]
 80053fc:	e003      	b.n	8005406 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	8afa      	ldrh	r2, [r7, #22]
 800540a:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	895b      	ldrh	r3, [r3, #10]
 8005420:	015b      	lsls	r3, r3, #5
 8005422:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800542a:	d302      	bcc.n	8005432 <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 800542c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005430:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	b29a      	uxth	r2, r3
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8005448:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	fb02 f303 	mul.w	r3, r2, r3
 8005452:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800545a:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b00      	cmp	r3, #0
 8005460:	da01      	bge.n	8005466 <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 8005462:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005466:	12db      	asrs	r3, r3, #11
 8005468:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	b21a      	sxth	r2, r3
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8005494:	e04c      	b.n	8005530 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054ac:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	8bdb      	ldrh	r3, [r3, #30]
 80054ba:	015b      	lsls	r3, r3, #5
 80054bc:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c4:	d302      	bcc.n	80054cc <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 80054c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054ca:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 80054e2:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	fb02 f303 	mul.w	r3, r2, r3
 80054ec:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054f4:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	da01      	bge.n	8005500 <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 80054fc:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005500:	12db      	asrs	r3, r3, #11
 8005502:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	b21a      	sxth	r2, r3
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 800552e:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	334c      	adds	r3, #76	; 0x4c
 8005562:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8005564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005568:	3301      	adds	r3, #1
 800556a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800556e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005572:	2b01      	cmp	r3, #1
 8005574:	f67f aefc 	bls.w	8005370 <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2200      	movs	r2, #0
 800557c:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	785b      	ldrb	r3, [r3, #1]
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	2b11      	cmp	r3, #17
 8005588:	bf8c      	ite	hi
 800558a:	2201      	movhi	r2, #1
 800558c:	2200      	movls	r2, #0
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	2a00      	cmp	r2, #0
 8005592:	d116      	bne.n	80055c2 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
 8005594:	2201      	movs	r2, #1
 8005596:	409a      	lsls	r2, r3
 8005598:	4b0d      	ldr	r3, [pc, #52]	; (80055d0 <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 800559a:	4013      	ands	r3, r2
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf14      	ite	ne
 80055a0:	2301      	movne	r3, #1
 80055a2:	2300      	moveq	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00b      	beq.n	80055c2 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	785b      	ldrb	r3, [r3, #1]
 80055ae:	f003 031f 	and.w	r3, r3, #31
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 80055c0:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 80055c2:	bf00      	nop
 80055c4:	372c      	adds	r7, #44	; 0x2c
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	0002200e 	.word	0x0002200e

080055d4 <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80055de:	2300      	movs	r3, #0
 80055e0:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3318      	adds	r3, #24
 80055e6:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	332c      	adds	r3, #44	; 0x2c
 80055ec:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b05      	cmp	r3, #5
 80055f4:	d109      	bne.n	800560a <VL53LX_set_zone_dss_config+0x36>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	2202      	movs	r2, #2
 80055fa:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
 8005608:	e003      	b.n	8005612 <VL53LX_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 8005612:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005616:	4618      	mov	r0, r3
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 8005622:	b480      	push	{r7}
 8005624:	b085      	sub	sp, #20
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	460b      	mov	r3, r1
 800562c:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800562e:	2300      	movs	r3, #0
 8005630:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3318      	adds	r3, #24
 8005636:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	78fa      	ldrb	r2, [r7, #3]
 800563c:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 800563e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b086      	sub	sp, #24
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	460b      	mov	r3, r1
 8005658:	607a      	str	r2, [r7, #4]
 800565a:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800565c:	2300      	movs	r3, #0
 800565e:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3318      	adds	r3, #24
 8005664:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8005666:	7afb      	ldrb	r3, [r7, #11]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d009      	beq.n	8005680 <VL53LX_get_dmax_calibration_data+0x32>
 800566c:	2b02      	cmp	r3, #2
 800566e:	d10f      	bne.n	8005690 <VL53LX_get_dmax_calibration_data+0x42>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8005674:	220a      	movs	r2, #10
 8005676:	4619      	mov	r1, r3
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f00e fd4b 	bl	8014114 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 800567e:	e00a      	b.n	8005696 <VL53LX_get_dmax_calibration_data+0x48>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8005684:	220a      	movs	r2, #10
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f00e fd43 	bl	8014114 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 800568e:	e002      	b.n	8005696 <VL53LX_get_dmax_calibration_data+0x48>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8005690:	23fc      	movs	r3, #252	; 0xfc
 8005692:	75fb      	strb	r3, [r7, #23]
	break;
 8005694:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005696:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b089      	sub	sp, #36	; 0x24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	460b      	mov	r3, r1
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80056b2:	2300      	movs	r3, #0
 80056b4:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3318      	adds	r3, #24
 80056ba:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80056c2:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80056ca:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80056cc:	897b      	ldrh	r3, [r7, #10]
 80056ce:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80056d2:	2bb9      	cmp	r3, #185	; 0xb9
 80056d4:	f200 86ca 	bhi.w	800646c <VL53LX_get_tuning_parm+0xdc8>
 80056d8:	a201      	add	r2, pc, #4	; (adr r2, 80056e0 <VL53LX_get_tuning_parm+0x3c>)
 80056da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056de:	bf00      	nop
 80056e0:	080059c9 	.word	0x080059c9
 80056e4:	080059d9 	.word	0x080059d9
 80056e8:	080059e9 	.word	0x080059e9
 80056ec:	080059f9 	.word	0x080059f9
 80056f0:	08005a07 	.word	0x08005a07
 80056f4:	08005a15 	.word	0x08005a15
 80056f8:	08005a23 	.word	0x08005a23
 80056fc:	08005a31 	.word	0x08005a31
 8005700:	08005a3f 	.word	0x08005a3f
 8005704:	08005a4d 	.word	0x08005a4d
 8005708:	08005a5b 	.word	0x08005a5b
 800570c:	08005a67 	.word	0x08005a67
 8005710:	08005a75 	.word	0x08005a75
 8005714:	08005a83 	.word	0x08005a83
 8005718:	08005a8f 	.word	0x08005a8f
 800571c:	08005a9d 	.word	0x08005a9d
 8005720:	08005aab 	.word	0x08005aab
 8005724:	08005abb 	.word	0x08005abb
 8005728:	08005acb 	.word	0x08005acb
 800572c:	08005ad9 	.word	0x08005ad9
 8005730:	08005ae9 	.word	0x08005ae9
 8005734:	08005af7 	.word	0x08005af7
 8005738:	08005b07 	.word	0x08005b07
 800573c:	08005b17 	.word	0x08005b17
 8005740:	08005b27 	.word	0x08005b27
 8005744:	08005b37 	.word	0x08005b37
 8005748:	08005b47 	.word	0x08005b47
 800574c:	08005b57 	.word	0x08005b57
 8005750:	08005b67 	.word	0x08005b67
 8005754:	08005b77 	.word	0x08005b77
 8005758:	08005b87 	.word	0x08005b87
 800575c:	08005b95 	.word	0x08005b95
 8005760:	08005ba5 	.word	0x08005ba5
 8005764:	08005bb5 	.word	0x08005bb5
 8005768:	08005bc5 	.word	0x08005bc5
 800576c:	08005bd5 	.word	0x08005bd5
 8005770:	08005be5 	.word	0x08005be5
 8005774:	08005bf5 	.word	0x08005bf5
 8005778:	08005c05 	.word	0x08005c05
 800577c:	08005c15 	.word	0x08005c15
 8005780:	08005c25 	.word	0x08005c25
 8005784:	08005c35 	.word	0x08005c35
 8005788:	08005c45 	.word	0x08005c45
 800578c:	08005c55 	.word	0x08005c55
 8005790:	08005c65 	.word	0x08005c65
 8005794:	08005c75 	.word	0x08005c75
 8005798:	08005c83 	.word	0x08005c83
 800579c:	08005c91 	.word	0x08005c91
 80057a0:	08005c9f 	.word	0x08005c9f
 80057a4:	08005cad 	.word	0x08005cad
 80057a8:	08005cbb 	.word	0x08005cbb
 80057ac:	08005cc9 	.word	0x08005cc9
 80057b0:	08005cd7 	.word	0x08005cd7
 80057b4:	08005ce5 	.word	0x08005ce5
 80057b8:	08005cf3 	.word	0x08005cf3
 80057bc:	08005d01 	.word	0x08005d01
 80057c0:	08005d0f 	.word	0x08005d0f
 80057c4:	08005d1d 	.word	0x08005d1d
 80057c8:	08005d2b 	.word	0x08005d2b
 80057cc:	08005d39 	.word	0x08005d39
 80057d0:	08005d47 	.word	0x08005d47
 80057d4:	08005d55 	.word	0x08005d55
 80057d8:	08005d63 	.word	0x08005d63
 80057dc:	08005d71 	.word	0x08005d71
 80057e0:	08005d7f 	.word	0x08005d7f
 80057e4:	08005d8d 	.word	0x08005d8d
 80057e8:	08005d9b 	.word	0x08005d9b
 80057ec:	08005da9 	.word	0x08005da9
 80057f0:	08005db7 	.word	0x08005db7
 80057f4:	08005dc5 	.word	0x08005dc5
 80057f8:	08005dd3 	.word	0x08005dd3
 80057fc:	08005de1 	.word	0x08005de1
 8005800:	08005def 	.word	0x08005def
 8005804:	08005dfd 	.word	0x08005dfd
 8005808:	08005e09 	.word	0x08005e09
 800580c:	08005e17 	.word	0x08005e17
 8005810:	08005e25 	.word	0x08005e25
 8005814:	08005e31 	.word	0x08005e31
 8005818:	08005e3d 	.word	0x08005e3d
 800581c:	08005e49 	.word	0x08005e49
 8005820:	08005e55 	.word	0x08005e55
 8005824:	08005e61 	.word	0x08005e61
 8005828:	08005e6d 	.word	0x08005e6d
 800582c:	08005e7b 	.word	0x08005e7b
 8005830:	08005e89 	.word	0x08005e89
 8005834:	08005e97 	.word	0x08005e97
 8005838:	08005ea5 	.word	0x08005ea5
 800583c:	08005eb3 	.word	0x08005eb3
 8005840:	08005ec1 	.word	0x08005ec1
 8005844:	08005ecf 	.word	0x08005ecf
 8005848:	08005edd 	.word	0x08005edd
 800584c:	08005eeb 	.word	0x08005eeb
 8005850:	08005ef9 	.word	0x08005ef9
 8005854:	08005f07 	.word	0x08005f07
 8005858:	08005f15 	.word	0x08005f15
 800585c:	08005f23 	.word	0x08005f23
 8005860:	08005f31 	.word	0x08005f31
 8005864:	08005f3f 	.word	0x08005f3f
 8005868:	08005f4d 	.word	0x08005f4d
 800586c:	08005f5b 	.word	0x08005f5b
 8005870:	08005f69 	.word	0x08005f69
 8005874:	08005f77 	.word	0x08005f77
 8005878:	08005f85 	.word	0x08005f85
 800587c:	08005f93 	.word	0x08005f93
 8005880:	08005fa1 	.word	0x08005fa1
 8005884:	08005faf 	.word	0x08005faf
 8005888:	08005fbd 	.word	0x08005fbd
 800588c:	08005fcb 	.word	0x08005fcb
 8005890:	08005fd9 	.word	0x08005fd9
 8005894:	08005fe7 	.word	0x08005fe7
 8005898:	08005ff5 	.word	0x08005ff5
 800589c:	08006003 	.word	0x08006003
 80058a0:	08006011 	.word	0x08006011
 80058a4:	0800601f 	.word	0x0800601f
 80058a8:	0800602d 	.word	0x0800602d
 80058ac:	0800603b 	.word	0x0800603b
 80058b0:	08006049 	.word	0x08006049
 80058b4:	08006057 	.word	0x08006057
 80058b8:	08006065 	.word	0x08006065
 80058bc:	08006077 	.word	0x08006077
 80058c0:	08006089 	.word	0x08006089
 80058c4:	08006099 	.word	0x08006099
 80058c8:	080060ab 	.word	0x080060ab
 80058cc:	080060bd 	.word	0x080060bd
 80058d0:	080060cf 	.word	0x080060cf
 80058d4:	080060e1 	.word	0x080060e1
 80058d8:	080060f3 	.word	0x080060f3
 80058dc:	08006105 	.word	0x08006105
 80058e0:	08006119 	.word	0x08006119
 80058e4:	0800612b 	.word	0x0800612b
 80058e8:	0800613d 	.word	0x0800613d
 80058ec:	0800614f 	.word	0x0800614f
 80058f0:	08006161 	.word	0x08006161
 80058f4:	08006173 	.word	0x08006173
 80058f8:	08006185 	.word	0x08006185
 80058fc:	08006197 	.word	0x08006197
 8005900:	080061a9 	.word	0x080061a9
 8005904:	080061bb 	.word	0x080061bb
 8005908:	080061c9 	.word	0x080061c9
 800590c:	080061d7 	.word	0x080061d7
 8005910:	080061e5 	.word	0x080061e5
 8005914:	080061f3 	.word	0x080061f3
 8005918:	08006201 	.word	0x08006201
 800591c:	0800620f 	.word	0x0800620f
 8005920:	0800621d 	.word	0x0800621d
 8005924:	0800622f 	.word	0x0800622f
 8005928:	0800623d 	.word	0x0800623d
 800592c:	0800624b 	.word	0x0800624b
 8005930:	08006259 	.word	0x08006259
 8005934:	08006267 	.word	0x08006267
 8005938:	08006275 	.word	0x08006275
 800593c:	08006283 	.word	0x08006283
 8005940:	08006291 	.word	0x08006291
 8005944:	0800629f 	.word	0x0800629f
 8005948:	080062ad 	.word	0x080062ad
 800594c:	080062bb 	.word	0x080062bb
 8005950:	080062c9 	.word	0x080062c9
 8005954:	080062d7 	.word	0x080062d7
 8005958:	080062e5 	.word	0x080062e5
 800595c:	080062f3 	.word	0x080062f3
 8005960:	08006301 	.word	0x08006301
 8005964:	0800630f 	.word	0x0800630f
 8005968:	0800631d 	.word	0x0800631d
 800596c:	0800632b 	.word	0x0800632b
 8005970:	08006339 	.word	0x08006339
 8005974:	08006347 	.word	0x08006347
 8005978:	08006355 	.word	0x08006355
 800597c:	08006363 	.word	0x08006363
 8005980:	08006371 	.word	0x08006371
 8005984:	0800637f 	.word	0x0800637f
 8005988:	0800638d 	.word	0x0800638d
 800598c:	0800639b 	.word	0x0800639b
 8005990:	080063a9 	.word	0x080063a9
 8005994:	080063b7 	.word	0x080063b7
 8005998:	080063c5 	.word	0x080063c5
 800599c:	080063d3 	.word	0x080063d3
 80059a0:	080063e1 	.word	0x080063e1
 80059a4:	080063ef 	.word	0x080063ef
 80059a8:	080063fd 	.word	0x080063fd
 80059ac:	0800640b 	.word	0x0800640b
 80059b0:	08006419 	.word	0x08006419
 80059b4:	08006427 	.word	0x08006427
 80059b8:	08006435 	.word	0x08006435
 80059bc:	08006443 	.word	0x08006443
 80059c0:	08006451 	.word	0x08006451
 80059c4:	0800645f 	.word	0x0800645f

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80059ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	601a      	str	r2, [r3, #0]
	break;
 80059d4:	f000 bd51 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 80059de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	601a      	str	r2, [r3, #0]
	break;
 80059e4:	f000 bd49 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 80059ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	601a      	str	r2, [r3, #0]
	break;
 80059f4:	f000 bd41 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	601a      	str	r2, [r3, #0]
	break;
 8005a02:	f000 bd3a 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	785b      	ldrb	r3, [r3, #1]
 8005a0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	601a      	str	r2, [r3, #0]
	break;
 8005a10:	f000 bd33 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	789b      	ldrb	r3, [r3, #2]
 8005a18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	601a      	str	r2, [r3, #0]
	break;
 8005a1e:	f000 bd2c 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	78db      	ldrb	r3, [r3, #3]
 8005a26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	601a      	str	r2, [r3, #0]
	break;
 8005a2c:	f000 bd25 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	791b      	ldrb	r3, [r3, #4]
 8005a34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	601a      	str	r2, [r3, #0]
	break;
 8005a3a:	f000 bd1e 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	795b      	ldrb	r3, [r3, #5]
 8005a42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	601a      	str	r2, [r3, #0]
	break;
 8005a48:	f000 bd17 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	799b      	ldrb	r3, [r3, #6]
 8005a50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	601a      	str	r2, [r3, #0]
	break;
 8005a56:	f000 bd10 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	601a      	str	r2, [r3, #0]
	break;
 8005a62:	f000 bd0a 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	891b      	ldrh	r3, [r3, #8]
 8005a6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	601a      	str	r2, [r3, #0]
	break;
 8005a70:	f000 bd03 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	8a1b      	ldrh	r3, [r3, #16]
 8005a78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	601a      	str	r2, [r3, #0]
	break;
 8005a7e:	f000 bcfc 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	601a      	str	r2, [r3, #0]
	break;
 8005a8a:	f000 bcf6 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	7e1b      	ldrb	r3, [r3, #24]
 8005a92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	601a      	str	r2, [r3, #0]
	break;
 8005a98:	f000 bcef 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	8b5b      	ldrh	r3, [r3, #26]
 8005aa0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	601a      	str	r2, [r3, #0]
	break;
 8005aa6:	f000 bce8 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8005ab0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	601a      	str	r2, [r3, #0]
	break;
 8005ab6:	f000 bce0 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005ac0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	601a      	str	r2, [r3, #0]
	break;
 8005ac6:	f000 bcd8 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ace:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	601a      	str	r2, [r3, #0]
	break;
 8005ad4:	f000 bcd1 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005ade:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	601a      	str	r2, [r3, #0]
	break;
 8005ae4:	f000 bcc9 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005aec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	601a      	str	r2, [r3, #0]
	break;
 8005af2:	f000 bcc2 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8005afc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	601a      	str	r2, [r3, #0]
	break;
 8005b02:	f000 bcba 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8005b0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	601a      	str	r2, [r3, #0]
	break;
 8005b12:	f000 bcb2 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8005b1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	601a      	str	r2, [r3, #0]
	break;
 8005b22:	f000 bcaa 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8005b2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	601a      	str	r2, [r3, #0]
	break;
 8005b32:	f000 bca2 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8005b3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	601a      	str	r2, [r3, #0]
	break;
 8005b42:	f000 bc9a 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8005b4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	601a      	str	r2, [r3, #0]
	break;
 8005b52:	f000 bc92 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	f9b3 32a6 	ldrsh.w	r3, [r3, #678]	; 0x2a6
		*ptuning_parm_value = (int32_t)(
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	601a      	str	r2, [r3, #0]
	break;
 8005b62:	f000 bc8a 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	f9b3 32a8 	ldrsh.w	r3, [r3, #680]	; 0x2a8
		*ptuning_parm_value = (int32_t)(
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	601a      	str	r2, [r3, #0]
	break;
 8005b72:	f000 bc82 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8005b7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	601a      	str	r2, [r3, #0]
	break;
 8005b82:	f000 bc7a 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	601a      	str	r2, [r3, #0]
	break;
 8005b90:	f000 bc73 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
		*ptuning_parm_value = (int32_t)(
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	601a      	str	r2, [r3, #0]
	break;
 8005ba0:	f000 bc6b 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005baa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	601a      	str	r2, [r3, #0]
	break;
 8005bb0:	f000 bc63 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	f9b3 329e 	ldrsh.w	r3, [r3, #670]	; 0x29e
 8005bba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	601a      	str	r2, [r3, #0]
	break;
 8005bc0:	f000 bc5b 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8005bca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	601a      	str	r2, [r3, #0]
	break;
 8005bd0:	f000 bc53 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005bda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	601a      	str	r2, [r3, #0]
	break;
 8005be0:	f000 bc4b 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8005bea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	601a      	str	r2, [r3, #0]
	break;
 8005bf0:	f000 bc43 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8005bfa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	601a      	str	r2, [r3, #0]
	break;
 8005c00:	f000 bc3b 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8005c0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	601a      	str	r2, [r3, #0]
	break;
 8005c10:	f000 bc33 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 8005c1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	601a      	str	r2, [r3, #0]
	break;
 8005c20:	f000 bc2b 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8005c2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	601a      	str	r2, [r3, #0]
	break;
 8005c30:	f000 bc23 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8005c3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	601a      	str	r2, [r3, #0]
	break;
 8005c40:	f000 bc1b 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
		*ptuning_parm_value = (int32_t)(
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	601a      	str	r2, [r3, #0]
	break;
 8005c50:	f000 bc13 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8005c5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	601a      	str	r2, [r3, #0]
	break;
 8005c60:	f000 bc0b 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
		*ptuning_parm_value = (int32_t)(
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	601a      	str	r2, [r3, #0]
	break;
 8005c70:	f000 bc03 	b.w	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8005c7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	601a      	str	r2, [r3, #0]
	break;
 8005c80:	e3fb      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8005c88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	601a      	str	r2, [r3, #0]
	break;
 8005c8e:	e3f4      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8005c96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	601a      	str	r2, [r3, #0]
	break;
 8005c9c:	e3ed      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 8005ca4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	601a      	str	r2, [r3, #0]
	break;
 8005caa:	e3e6      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 8005cb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	601a      	str	r2, [r3, #0]
	break;
 8005cb8:	e3df      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8005cc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	601a      	str	r2, [r3, #0]
	break;
 8005cc6:	e3d8      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8005cce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	601a      	str	r2, [r3, #0]
	break;
 8005cd4:	e3d1      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	f9b3 32a0 	ldrsh.w	r3, [r3, #672]	; 0x2a0
 8005cdc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	601a      	str	r2, [r3, #0]
	break;
 8005ce2:	e3ca      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8005cea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	601a      	str	r2, [r3, #0]
	break;
 8005cf0:	e3c3      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8005cf8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	601a      	str	r2, [r3, #0]
	break;
 8005cfe:	e3bc      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8005d06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	601a      	str	r2, [r3, #0]
	break;
 8005d0c:	e3b5      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005d14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	601a      	str	r2, [r3, #0]
	break;
 8005d1a:	e3ae      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8005d22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	601a      	str	r2, [r3, #0]
	break;
 8005d28:	e3a7      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8005d30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	601a      	str	r2, [r3, #0]
	break;
 8005d36:	e3a0      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8005d3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	601a      	str	r2, [r3, #0]
	break;
 8005d44:	e399      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	f893 3254 	ldrb.w	r3, [r3, #596]	; 0x254
 8005d4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	601a      	str	r2, [r3, #0]
	break;
 8005d52:	e392      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	f8b3 3260 	ldrh.w	r3, [r3, #608]	; 0x260
 8005d5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	601a      	str	r2, [r3, #0]
	break;
 8005d60:	e38b      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f8b3 3262 	ldrh.w	r3, [r3, #610]	; 0x262
 8005d68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	601a      	str	r2, [r3, #0]
	break;
 8005d6e:	e384      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005d76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	601a      	str	r2, [r3, #0]
	break;
 8005d7c:	e37d      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	f8b3 3266 	ldrh.w	r3, [r3, #614]	; 0x266
 8005d84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	601a      	str	r2, [r3, #0]
	break;
 8005d8a:	e376      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 8005d92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	601a      	str	r2, [r3, #0]
	break;
 8005d98:	e36f      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005da0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	601a      	str	r2, [r3, #0]
	break;
 8005da6:	e368      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8005dae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	601a      	str	r2, [r3, #0]
	break;
 8005db4:	e361      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8005dbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	601a      	str	r2, [r3, #0]
	break;
 8005dc2:	e35a      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8005dca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	601a      	str	r2, [r3, #0]
	break;
 8005dd0:	e353      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8005dd8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	601a      	str	r2, [r3, #0]
	break;
 8005dde:	e34c      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8005de6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	601a      	str	r2, [r3, #0]
	break;
 8005dec:	e345      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8005df4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	601a      	str	r2, [r3, #0]
	break;
 8005dfa:	e33e      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	7c1b      	ldrb	r3, [r3, #16]
 8005e00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	601a      	str	r2, [r3, #0]
	break;
 8005e06:	e338      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005e0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	601a      	str	r2, [r3, #0]
	break;
 8005e14:	e331      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005e1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	601a      	str	r2, [r3, #0]
	break;
 8005e22:	e32a      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	601a      	str	r2, [r3, #0]
	break;
 8005e2e:	e324      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	601a      	str	r2, [r3, #0]
	break;
 8005e3a:	e31e      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	8adb      	ldrh	r3, [r3, #22]
 8005e40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	601a      	str	r2, [r3, #0]
	break;
 8005e46:	e318      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	8b1b      	ldrh	r3, [r3, #24]
 8005e4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	601a      	str	r2, [r3, #0]
	break;
 8005e52:	e312      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	601a      	str	r2, [r3, #0]
	break;
 8005e5e:	e30c      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	601a      	str	r2, [r3, #0]
	break;
 8005e6a:	e306      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005e72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	601a      	str	r2, [r3, #0]
	break;
 8005e78:	e2ff      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	601a      	str	r2, [r3, #0]
	break;
 8005e86:	e2f8      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	601a      	str	r2, [r3, #0]
	break;
 8005e94:	e2f1      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	601a      	str	r2, [r3, #0]
	break;
 8005ea2:	e2ea      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	f893 32c0 	ldrb.w	r3, [r3, #704]	; 0x2c0
 8005eaa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	601a      	str	r2, [r3, #0]
	break;
 8005eb0:	e2e3      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 8005eb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	601a      	str	r2, [r3, #0]
	break;
 8005ebe:	e2dc      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
 8005ec6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	601a      	str	r2, [r3, #0]
	break;
 8005ecc:	e2d5      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	; 0x2c4
 8005ed4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	601a      	str	r2, [r3, #0]
	break;
 8005eda:	e2ce      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005ee2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	601a      	str	r2, [r3, #0]
	break;
 8005ee8:	e2c7      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005ef0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	601a      	str	r2, [r3, #0]
	break;
 8005ef6:	e2c0      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	; 0x2d4
 8005efe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	601a      	str	r2, [r3, #0]
	break;
 8005f04:	e2b9      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8005f0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	601a      	str	r2, [r3, #0]
	break;
 8005f12:	e2b2      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	; 0x2d6
 8005f1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	601a      	str	r2, [r3, #0]
	break;
 8005f20:	e2ab      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8005f28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	601a      	str	r2, [r3, #0]
	break;
 8005f2e:	e2a4      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 8005f36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	601a      	str	r2, [r3, #0]
	break;
 8005f3c:	e29d      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8005f44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	601a      	str	r2, [r3, #0]
	break;
 8005f4a:	e296      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8005f52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	601a      	str	r2, [r3, #0]
	break;
 8005f58:	e28f      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 8005f60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	601a      	str	r2, [r3, #0]
	break;
 8005f66:	e288      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 8005f6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	601a      	str	r2, [r3, #0]
	break;
 8005f74:	e281      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8005f7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	601a      	str	r2, [r3, #0]
	break;
 8005f82:	e27a      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8005f8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	601a      	str	r2, [r3, #0]
	break;
 8005f90:	e273      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8005f98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	601a      	str	r2, [r3, #0]
	break;
 8005f9e:	e26c      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8005fa6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	601a      	str	r2, [r3, #0]
	break;
 8005fac:	e265      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8005fb4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	601a      	str	r2, [r3, #0]
	break;
 8005fba:	e25e      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005fc2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	601a      	str	r2, [r3, #0]
	break;
 8005fc8:	e257      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8005fd0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	601a      	str	r2, [r3, #0]
	break;
 8005fd6:	e250      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005fde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	601a      	str	r2, [r3, #0]
	break;
 8005fe4:	e249      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005fec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	601a      	str	r2, [r3, #0]
	break;
 8005ff2:	e242      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8005ffa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	601a      	str	r2, [r3, #0]
	break;
 8006000:	e23b      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006008:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
	break;
 800600e:	e234      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8006016:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	601a      	str	r2, [r3, #0]
	break;
 800601c:	e22d      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8006024:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	601a      	str	r2, [r3, #0]
	break;
 800602a:	e226      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8006032:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	601a      	str	r2, [r3, #0]
	break;
 8006038:	e21f      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8006040:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	601a      	str	r2, [r3, #0]
	break;
 8006046:	e218      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800604e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	601a      	str	r2, [r3, #0]
	break;
 8006054:	e211      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800605c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	601a      	str	r2, [r3, #0]
	break;
 8006062:	e20a      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800606a:	3318      	adds	r3, #24
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	601a      	str	r2, [r3, #0]
	break;
 8006074:	e201      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800607c:	331c      	adds	r3, #28
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	601a      	str	r2, [r3, #0]
	break;
 8006086:	e1f8      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	601a      	str	r2, [r3, #0]
	break;
 8006096:	e1f0      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800609e:	3304      	adds	r3, #4
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	601a      	str	r2, [r3, #0]
	break;
 80060a8:	e1e7      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80060b0:	3308      	adds	r3, #8
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	601a      	str	r2, [r3, #0]
	break;
 80060ba:	e1de      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80060c2:	330c      	adds	r3, #12
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	601a      	str	r2, [r3, #0]
	break;
 80060cc:	e1d5      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80060d4:	3310      	adds	r3, #16
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	601a      	str	r2, [r3, #0]
	break;
 80060de:	e1cc      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80060e6:	3314      	adds	r3, #20
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	601a      	str	r2, [r3, #0]
	break;
 80060f0:	e1c3      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80060f8:	331c      	adds	r3, #28
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	601a      	str	r2, [r3, #0]
	break;
 8006102:	e1ba      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800610a:	331e      	adds	r3, #30
 800610c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006110:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	601a      	str	r2, [r3, #0]
	break;
 8006116:	e1b0      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800611e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006122:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	601a      	str	r2, [r3, #0]
	break;
 8006128:	e1a7      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006130:	3302      	adds	r3, #2
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	601a      	str	r2, [r3, #0]
	break;
 800613a:	e19e      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006142:	3316      	adds	r3, #22
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	601a      	str	r2, [r3, #0]
	break;
 800614c:	e195      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006154:	3318      	adds	r3, #24
 8006156:	681b      	ldr	r3, [r3, #0]
		*ptuning_parm_value = (int32_t)(
 8006158:	461a      	mov	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	601a      	str	r2, [r3, #0]
	break;
 800615e:	e18c      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006166:	3304      	adds	r3, #4
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	601a      	str	r2, [r3, #0]
	break;
 8006170:	e183      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006178:	3308      	adds	r3, #8
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	601a      	str	r2, [r3, #0]
	break;
 8006182:	e17a      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800618a:	330c      	adds	r3, #12
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	601a      	str	r2, [r3, #0]
	break;
 8006194:	e171      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800619c:	3310      	adds	r3, #16
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	601a      	str	r2, [r3, #0]
	break;
 80061a6:	e168      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80061ae:	3310      	adds	r3, #16
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	601a      	str	r2, [r3, #0]
	break;
 80061b8:	e15f      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80061c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]
	break;
 80061c6:	e158      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80061ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	601a      	str	r2, [r3, #0]
	break;
 80061d4:	e151      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 80061dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	601a      	str	r2, [r3, #0]
	break;
 80061e2:	e14a      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80061ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	601a      	str	r2, [r3, #0]
	break;
 80061f0:	e143      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80061f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	601a      	str	r2, [r3, #0]
	break;
 80061fe:	e13c      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8006206:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	601a      	str	r2, [r3, #0]
	break;
 800620c:	e135      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8006214:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	601a      	str	r2, [r3, #0]
	break;
 800621a:	e12e      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006222:	3314      	adds	r3, #20
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	601a      	str	r2, [r3, #0]
	break;
 800622c:	e125      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 8006234:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	601a      	str	r2, [r3, #0]
	break;
 800623a:	e11e      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	; 0x186
 8006242:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	601a      	str	r2, [r3, #0]
	break;
 8006248:	e117      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	; 0x188
 8006250:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	601a      	str	r2, [r3, #0]
	break;
 8006256:	e110      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	; 0x18a
 800625e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	601a      	str	r2, [r3, #0]
	break;
 8006264:	e109      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	; 0x18c
 800626c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	601a      	str	r2, [r3, #0]
	break;
 8006272:	e102      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	; 0x18e
 800627a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	601a      	str	r2, [r3, #0]
	break;
 8006280:	e0fb      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	; 0x190
 8006288:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	601a      	str	r2, [r3, #0]
	break;
 800628e:	e0f4      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 8006296:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	601a      	str	r2, [r3, #0]
	break;
 800629c:	e0ed      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	; 0x194
 80062a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	601a      	str	r2, [r3, #0]
	break;
 80062aa:	e0e6      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	f9b3 3196 	ldrsh.w	r3, [r3, #406]	; 0x196
 80062b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	601a      	str	r2, [r3, #0]
	break;
 80062b8:	e0df      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	f9b3 3198 	ldrsh.w	r3, [r3, #408]	; 0x198
 80062c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	601a      	str	r2, [r3, #0]
	break;
 80062c6:	e0d8      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	; 0x19a
 80062ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	601a      	str	r2, [r3, #0]
	break;
 80062d4:	e0d1      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	; 0x19c
 80062dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	601a      	str	r2, [r3, #0]
	break;
 80062e2:	e0ca      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	; 0x19e
 80062ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	601a      	str	r2, [r3, #0]
	break;
 80062f0:	e0c3      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	; 0x1a0
 80062f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	601a      	str	r2, [r3, #0]
	break;
 80062fe:	e0bc      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	f9b3 31a2 	ldrsh.w	r3, [r3, #418]	; 0x1a2
 8006306:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	601a      	str	r2, [r3, #0]
	break;
 800630c:	e0b5      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f9b3 31a4 	ldrsh.w	r3, [r3, #420]	; 0x1a4
 8006314:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	601a      	str	r2, [r3, #0]
	break;
 800631a:	e0ae      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	f9b3 31a6 	ldrsh.w	r3, [r3, #422]	; 0x1a6
 8006322:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	601a      	str	r2, [r3, #0]
	break;
 8006328:	e0a7      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	; 0x1a8
 8006330:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	601a      	str	r2, [r3, #0]
	break;
 8006336:	e0a0      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	f9b3 31aa 	ldrsh.w	r3, [r3, #426]	; 0x1aa
 800633e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	601a      	str	r2, [r3, #0]
	break;
 8006344:	e099      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	; 0x1ac
 800634c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	601a      	str	r2, [r3, #0]
	break;
 8006352:	e092      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	; 0x1ae
 800635a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	601a      	str	r2, [r3, #0]
	break;
 8006360:	e08b      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	f9b3 31b0 	ldrsh.w	r3, [r3, #432]	; 0x1b0
 8006368:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	601a      	str	r2, [r3, #0]
	break;
 800636e:	e084      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	; 0x1b2
 8006376:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	601a      	str	r2, [r3, #0]
	break;
 800637c:	e07d      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	f9b3 31b4 	ldrsh.w	r3, [r3, #436]	; 0x1b4
 8006384:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	601a      	str	r2, [r3, #0]
	break;
 800638a:	e076      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	f9b3 31b6 	ldrsh.w	r3, [r3, #438]	; 0x1b6
 8006392:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	601a      	str	r2, [r3, #0]
	break;
 8006398:	e06f      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	f9b3 31b8 	ldrsh.w	r3, [r3, #440]	; 0x1b8
 80063a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	601a      	str	r2, [r3, #0]
	break;
 80063a6:	e068      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	; 0x1ba
 80063ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	601a      	str	r2, [r3, #0]
	break;
 80063b4:	e061      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	f9b3 31bc 	ldrsh.w	r3, [r3, #444]	; 0x1bc
 80063bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	601a      	str	r2, [r3, #0]
	break;
 80063c2:	e05a      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 80063ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	601a      	str	r2, [r3, #0]
	break;
 80063d0:	e053      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 80063d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	601a      	str	r2, [r3, #0]
	break;
 80063de:	e04c      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 80063e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	601a      	str	r2, [r3, #0]
	break;
 80063ec:	e045      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 80063f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	601a      	str	r2, [r3, #0]
	break;
 80063fa:	e03e      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 8006402:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	601a      	str	r2, [r3, #0]
	break;
 8006408:	e037      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 8006410:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]
	break;
 8006416:	e030      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 800641e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	601a      	str	r2, [r3, #0]
	break;
 8006424:	e029      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 800642c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	601a      	str	r2, [r3, #0]
	break;
 8006432:	e022      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 800643a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	601a      	str	r2, [r3, #0]
	break;
 8006440:	e01b      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 8006448:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	601a      	str	r2, [r3, #0]
	break;
 800644e:	e014      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 8006456:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	601a      	str	r2, [r3, #0]
	break;
 800645c:	e00d      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 8006464:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	601a      	str	r2, [r3, #0]
	break;
 800646a:	e006      	b.n	800647a <VL53LX_get_tuning_parm+0xdd6>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006472:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8006474:	23fc      	movs	r3, #252	; 0xfc
 8006476:	77fb      	strb	r3, [r7, #31]
	break;
 8006478:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800647a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3724      	adds	r7, #36	; 0x24
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop

0800648c <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006494:	2300      	movs	r3, #0
 8006496:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3318      	adds	r3, #24
 800649c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80064a4:	3314      	adds	r3, #20
 80064a6:	2201      	movs	r2, #1
 80064a8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80064aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b085      	sub	sp, #20
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3318      	adds	r3, #24
 80064ca:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80064d2:	3314      	adds	r3, #20
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80064d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3318      	adds	r3, #24
 80064f8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006500:	3315      	adds	r3, #21
 8006502:	2200      	movs	r2, #0
 8006504:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006506:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8006516:	b480      	push	{r7}
 8006518:	b085      	sub	sp, #20
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800651e:	2300      	movs	r3, #0
 8006520:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	3318      	adds	r3, #24
 8006526:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800652e:	3316      	adds	r3, #22
 8006530:	2201      	movs	r2, #1
 8006532:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006534:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800654c:	2300      	movs	r3, #0
 800654e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3318      	adds	r3, #24
 8006554:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800655c:	3316      	adds	r3, #22
 800655e:	2200      	movs	r2, #0
 8006560:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006562:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8006572:	b480      	push	{r7}
 8006574:	b085      	sub	sp, #20
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800657a:	2300      	movs	r3, #0
 800657c:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3318      	adds	r3, #24
 8006582:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800658a:	3315      	adds	r3, #21
 800658c:	2201      	movs	r2, #1
 800658e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006590:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80065a8:	2300      	movs	r3, #0
 80065aa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2208      	movs	r2, #8
 80065b0:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	220b      	movs	r2, #11
 80065b6:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065be:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80065c6:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80065ce:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80065d6:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80065d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2212      	movs	r2, #18
 80065fe:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	220f      	movs	r2, #15
 8006604:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2202      	movs	r2, #2
 800660a:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8006612:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	220c      	movs	r2, #12
 8006618:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800661a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006634:	2300      	movs	r3, #0
 8006636:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	895b      	ldrh	r3, [r3, #10]
 800663c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	895b      	ldrh	r3, [r3, #10]
 800665a:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2200      	movs	r2, #0
 8006678:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2200      	movs	r2, #0
 800667e:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2240      	movs	r2, #64	; 0x40
 8006684:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10d      	bne.n	80066aa <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d108      	bne.n	80066aa <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d103      	bne.n	80066aa <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2200      	movs	r2, #0
 80066a6:	741a      	strb	r2, [r3, #16]
 80066a8:	e002      	b.n	80066b0 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2201      	movs	r2, #1
 80066ae:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 80066b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d114      	bne.n	80066e2 <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d110      	bne.n	80066e2 <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	7d9b      	ldrb	r3, [r3, #22]
 80066d4:	f001 ffa0 	bl	8008618 <VL53LX_calc_range_ignore_threshold>
 80066d8:	4603      	mov	r3, r0
 80066da:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	831a      	strh	r2, [r3, #24]
 80066e0:	e002      	b.n	80066e8 <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2200      	movs	r2, #0
 80066e6:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	f64f 72ce 	movw	r2, #65486	; 0xffce
 80066ee:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2232      	movs	r2, #50	; 0x32
 80066f4:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80066fc:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	228c      	movs	r2, #140	; 0x8c
 8006702:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006704:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006722:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800672a:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2207      	movs	r2, #7
 8006730:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006738:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f242 7210 	movw	r2, #10000	; 0x2710
 8006740:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f64f 72ba 	movw	r2, #65466	; 0xffba
 8006748:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2246      	movs	r2, #70	; 0x46
 800674e:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006756:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	228c      	movs	r2, #140	; 0x8c
 800675c:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800675e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006780:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006788:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006790:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006798:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2208      	movs	r2, #8
 800679e:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2228      	movs	r2, #40	; 0x28
 80067a4:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2209      	movs	r2, #9
 80067aa:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80067ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80067c4:	2300      	movs	r3, #0
 80067c6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80067ce:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f643 2298 	movw	r2, #15000	; 0x3a98
 80067d6:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067de:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80067e6:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2210      	movs	r2, #16
 80067ec:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2208      	movs	r2, #8
 80067f2:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80067f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	4603      	mov	r3, r0
 800680c:	6039      	str	r1, [r7, #0]
 800680e:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006810:	2300      	movs	r3, #0
 8006812:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2204      	movs	r2, #4
 8006818:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2201      	movs	r2, #1
 800681e:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2201      	movs	r2, #1
 8006824:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2202      	movs	r2, #2
 800682a:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2201      	movs	r2, #1
 8006830:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2250      	movs	r2, #80	; 0x50
 8006836:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2264      	movs	r2, #100	; 0x64
 800683c:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	f241 023d 	movw	r2, #4157	; 0x103d
 8006844:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2210      	movs	r2, #16
 800684a:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2232      	movs	r2, #50	; 0x32
 8006850:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2264      	movs	r2, #100	; 0x64
 8006856:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2201      	movs	r2, #1
 800685c:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	22b4      	movs	r2, #180	; 0xb4
 8006862:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2200      	movs	r2, #0
 8006868:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8006870:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2208      	movs	r2, #8
 8006876:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2288      	movs	r2, #136	; 0x88
 800687e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2208      	movs	r2, #8
 8006886:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006898:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2200      	movs	r2, #0
 800689e:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	79fa      	ldrb	r2, [r7, #7]
 80068a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f64f 72ce 	movw	r2, #65486	; 0xffce
 80068ae:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2232      	movs	r2, #50	; 0x32
 80068b4:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80068bc:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	228c      	movs	r2, #140	; 0x8c
 80068c2:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2250      	movs	r2, #80	; 0x50
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2232      	movs	r2, #50	; 0x32
 80068d0:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 80068d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80068ea:	2300      	movs	r3, #0
 80068ec:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	221e      	movs	r2, #30
 80068f2:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	220e      	movs	r2, #14
 80068f8:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f642 7294 	movw	r2, #12180	; 0x2f94
 8006900:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	220e      	movs	r2, #14
 8006906:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	220a      	movs	r2, #10
 800690c:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2206      	movs	r2, #6
 8006912:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	220e      	movs	r2, #14
 8006918:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	220a      	movs	r2, #10
 800691e:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2206      	movs	r2, #6
 8006924:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2209      	movs	r2, #9
 800692a:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2205      	movs	r2, #5
 8006930:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2203      	movs	r2, #3
 8006936:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2206      	movs	r2, #6
 800693c:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2206      	movs	r2, #6
 8006942:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2206      	movs	r2, #6
 8006948:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2202      	movs	r2, #2
 800694e:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2221      	movs	r2, #33	; 0x21
 8006954:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	223c      	movs	r2, #60	; 0x3c
 8006966:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	223c      	movs	r2, #60	; 0x3c
 800696c:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	223c      	movs	r2, #60	; 0x3c
 8006972:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2280      	movs	r2, #128	; 0x80
 8006978:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2280      	movs	r2, #128	; 0x80
 800697e:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2280      	movs	r2, #128	; 0x80
 8006984:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2208      	movs	r2, #8
 800698a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2210      	movs	r2, #16
 8006992:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2202      	movs	r2, #2
 80069a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2202      	movs	r2, #2
 80069b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80069cc:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f640 22be 	movw	r2, #2750	; 0xabe
 80069d6:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	22fa      	movs	r2, #250	; 0xfa
 80069de:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069e8:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80069f2:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80069fc:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006a06:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8006a10:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f64f 7238 	movw	r2, #65336	; 0xff38
 8006a1a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	22c8      	movs	r2, #200	; 0xc8
 8006a22:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8006a2c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8006a3e:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f640 32ea 	movw	r2, #3050	; 0xbea
 8006a48:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006a52:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f640 32ea 	movw	r2, #3050	; 0xbea
 8006a5c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006a66:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f641 0238 	movw	r2, #6200	; 0x1838
 8006a70:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	22fa      	movs	r2, #250	; 0xfa
 8006a88:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006a92:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8006a9c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f241 1294 	movw	r2, #4500	; 0x1194
 8006aa6:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f64f 7238 	movw	r2, #65336	; 0xff38
 8006ab0:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	22c8      	movs	r2, #200	; 0xc8
 8006ab8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f640 720a 	movw	r2, #3850	; 0xf0a
 8006ae2:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006aec:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f640 720a 	movw	r2, #3850	; 0xf0a
 8006af6:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006b38:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006b40:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006b48:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006b50:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b58:	639a      	str	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006b60:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f242 3228 	movw	r2, #9000	; 0x2328
 8006b68:	641a      	str	r2, [r3, #64]	; 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f241 7270 	movw	r2, #6000	; 0x1770
 8006b70:	645a      	str	r2, [r3, #68]	; 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006b78:	649a      	str	r2, [r3, #72]	; 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f242 3228 	movw	r2, #9000	; 0x2328
 8006b80:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f241 7270 	movw	r2, #6000	; 0x1770
 8006b88:	651a      	str	r2, [r3, #80]	; 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b90:	655a      	str	r2, [r3, #84]	; 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006b98:	659a      	str	r2, [r3, #88]	; 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006ba0:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006ba8:	661a      	str	r2, [r3, #96]	; 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006bb0:	665a      	str	r2, [r3, #100]	; 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f24f 6218 	movw	r2, #63000	; 0xf618
 8006bb8:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006bc0:	671a      	str	r2, [r3, #112]	; 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006bc8:	675a      	str	r2, [r3, #116]	; 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006bd0:	679a      	str	r2, [r3, #120]	; 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	669a      	str	r2, [r3, #104]	; 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006bde:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006be6:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2206      	movs	r2, #6
 8006c06:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006c22:	2300      	movs	r3, #0
 8006c24:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006c2c:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2238      	movs	r2, #56	; 0x38
 8006c32:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2270      	movs	r2, #112	; 0x70
 8006c3e:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2210      	movs	r2, #16
 8006c44:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2264      	movs	r2, #100	; 0x64
 8006c4a:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c52:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	220f      	movs	r2, #15
 8006c58:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2234      	movs	r2, #52	; 0x34
 8006c5e:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	22c8      	movs	r2, #200	; 0xc8
 8006c64:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006c6c:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006c74:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b087      	sub	sp, #28
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	607a      	str	r2, [r7, #4]
 8006c92:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006c94:	2300      	movs	r3, #0
 8006c96:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006c9e:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2211      	movs	r2, #17
 8006ce0:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2208      	movs	r2, #8
 8006cf8:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	22ff      	movs	r2, #255	; 0xff
 8006d3a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	220b      	movs	r2, #11
 8006d74:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8006d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d78:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2202      	movs	r2, #2
 8006d82:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	220d      	movs	r2, #13
 8006d88:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8006db0:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2238      	movs	r2, #56	; 0x38
 8006dbc:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	22ff      	movs	r2, #255	; 0xff
 8006dc2:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	221a      	movs	r2, #26
 8006dd4:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2220      	movs	r2, #32
 8006de0:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2201      	movs	r2, #1
 8006de6:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	22cc      	movs	r2, #204	; 0xcc
 8006dec:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	220b      	movs	r2, #11
 8006df2:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2201      	movs	r2, #1
 8006df8:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	22f5      	movs	r2, #245	; 0xf5
 8006dfe:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	2209      	movs	r2, #9
 8006e04:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8006e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e08:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8006e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e10:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2208      	movs	r2, #8
 8006e1a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2278      	movs	r2, #120	; 0x78
 8006e20:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2200      	movs	r2, #0
 8006e26:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	2207      	movs	r2, #7
 8006e32:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2221      	movs	r2, #33	; 0x21
 8006e38:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2243      	movs	r2, #67	; 0x43
 8006e3e:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2210      	movs	r2, #16
 8006e44:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2232      	movs	r2, #50	; 0x32
 8006e4a:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2254      	movs	r2, #84	; 0x54
 8006e50:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2207      	movs	r2, #7
 8006e56:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2221      	movs	r2, #33	; 0x21
 8006e5c:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2243      	movs	r2, #67	; 0x43
 8006e62:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2210      	movs	r2, #16
 8006e68:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2243      	movs	r2, #67	; 0x43
 8006e74:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2205      	movs	r2, #5
 8006e7a:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2207      	movs	r2, #7
 8006e86:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2221      	movs	r2, #33	; 0x21
 8006e8c:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2243      	movs	r2, #67	; 0x43
 8006e92:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2210      	movs	r2, #16
 8006e98:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2232      	movs	r2, #50	; 0x32
 8006e9e:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2254      	movs	r2, #84	; 0x54
 8006ea4:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eac:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eb4:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8006ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebe:	2205      	movs	r2, #5
 8006ec0:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8006ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eca:	220f      	movs	r2, #15
 8006ecc:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8006ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed0:	220f      	movs	r2, #15
 8006ed2:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8006ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed6:	2208      	movs	r2, #8
 8006ed8:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8006eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006edc:	2208      	movs	r2, #8
 8006ede:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	220b      	movs	r2, #11
 8006f06:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	2209      	movs	r2, #9
 8006f0c:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	2201      	movs	r2, #1
 8006f22:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	22c7      	movs	r2, #199	; 0xc7
 8006f3c:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	22ff      	movs	r2, #255	; 0xff
 8006f42:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	22db      	movs	r2, #219	; 0xdb
 8006f48:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	2200      	movs	r2, #0
 8006f54:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8006f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f58:	2201      	movs	r2, #1
 8006f5a:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	2201      	movs	r2, #1
 8006f60:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	2221      	movs	r2, #33	; 0x21
 8006f66:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8006f68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b090      	sub	sp, #64	; 0x40
 8006f7c:	af0a      	add	r7, sp, #40	; 0x28
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006f86:	2300      	movs	r3, #0
 8006f88:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	9303      	str	r3, [sp, #12]
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	9302      	str	r3, [sp, #8]
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	9301      	str	r3, [sp, #4]
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	68b8      	ldr	r0, [r7, #8]
 8006fa2:	f7ff fe70 	bl	8006c86 <VL53LX_preset_mode_standard_ranging>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8006faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d171      	bne.n	8007096 <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006fb8:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	9308      	str	r3, [sp, #32]
 8006fbe:	2305      	movs	r3, #5
 8006fc0:	9307      	str	r3, [sp, #28]
 8006fc2:	2304      	movs	r3, #4
 8006fc4:	9306      	str	r3, [sp, #24]
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	9305      	str	r3, [sp, #20]
 8006fca:	2302      	movs	r3, #2
 8006fcc:	9304      	str	r3, [sp, #16]
 8006fce:	2301      	movs	r3, #1
 8006fd0:	9303      	str	r3, [sp, #12]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	9302      	str	r3, [sp, #8]
 8006fd6:	2304      	movs	r3, #4
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	2303      	movs	r3, #3
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	2302      	movs	r3, #2
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	2007      	movs	r0, #7
 8006fe6:	f000 ffab 	bl	8007f40 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	3302      	adds	r3, #2
 8006fee:	9308      	str	r3, [sp, #32]
 8006ff0:	2305      	movs	r3, #5
 8006ff2:	9307      	str	r3, [sp, #28]
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	9306      	str	r3, [sp, #24]
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	9305      	str	r3, [sp, #20]
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	9304      	str	r3, [sp, #16]
 8007000:	2301      	movs	r3, #1
 8007002:	9303      	str	r3, [sp, #12]
 8007004:	2300      	movs	r3, #0
 8007006:	9302      	str	r3, [sp, #8]
 8007008:	2304      	movs	r3, #4
 800700a:	9301      	str	r3, [sp, #4]
 800700c:	2303      	movs	r3, #3
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	2302      	movs	r3, #2
 8007012:	2201      	movs	r2, #1
 8007014:	2100      	movs	r1, #0
 8007016:	2007      	movs	r0, #7
 8007018:	f001 f822 	bl	8008060 <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	2209      	movs	r2, #9
 8007020:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	220b      	movs	r2, #11
 8007026:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	2209      	movs	r2, #9
 800702c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	220b      	movs	r2, #11
 8007032:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	2200      	movs	r2, #0
 8007038:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	2220      	movs	r2, #32
 800703e:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	2200      	movs	r2, #0
 8007044:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	221a      	movs	r2, #26
 800704a:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	2200      	movs	r2, #0
 8007050:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	2228      	movs	r2, #40	; 0x28
 8007056:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	2200      	movs	r2, #0
 800705c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	2221      	movs	r2, #33	; 0x21
 8007062:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	22f5      	movs	r2, #245	; 0xf5
 8007068:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2208      	movs	r2, #8
 800706e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2288      	movs	r2, #136	; 0x88
 8007076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	68b9      	ldr	r1, [r7, #8]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f9e6 	bl	8007456 <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	229b      	movs	r2, #155	; 0x9b
 800708e:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007092:	2226      	movs	r2, #38	; 0x26
 8007094:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007096:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b090      	sub	sp, #64	; 0x40
 80070a6:	af0a      	add	r7, sp, #40	; 0x28
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	607a      	str	r2, [r7, #4]
 80070ae:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	9304      	str	r3, [sp, #16]
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	9303      	str	r3, [sp, #12]
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	9302      	str	r3, [sp, #8]
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	9301      	str	r3, [sp, #4]
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	68b9      	ldr	r1, [r7, #8]
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f7ff ff52 	bl	8006f78 <VL53LX_preset_mode_histogram_ranging>
 80070d4:	4603      	mov	r3, r0
 80070d6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80070d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d178      	bne.n	80071d2 <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	9308      	str	r3, [sp, #32]
 80070e4:	2305      	movs	r3, #5
 80070e6:	9307      	str	r3, [sp, #28]
 80070e8:	2304      	movs	r3, #4
 80070ea:	9306      	str	r3, [sp, #24]
 80070ec:	2303      	movs	r3, #3
 80070ee:	9305      	str	r3, [sp, #20]
 80070f0:	2302      	movs	r3, #2
 80070f2:	9304      	str	r3, [sp, #16]
 80070f4:	2301      	movs	r3, #1
 80070f6:	9303      	str	r3, [sp, #12]
 80070f8:	2300      	movs	r3, #0
 80070fa:	9302      	str	r3, [sp, #8]
 80070fc:	2304      	movs	r3, #4
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	2303      	movs	r3, #3
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	2302      	movs	r3, #2
 8007106:	2201      	movs	r2, #1
 8007108:	2100      	movs	r1, #0
 800710a:	2007      	movs	r0, #7
 800710c:	f000 ff18 	bl	8007f40 <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	3302      	adds	r3, #2
 8007114:	9308      	str	r3, [sp, #32]
 8007116:	2305      	movs	r3, #5
 8007118:	9307      	str	r3, [sp, #28]
 800711a:	2304      	movs	r3, #4
 800711c:	9306      	str	r3, [sp, #24]
 800711e:	2303      	movs	r3, #3
 8007120:	9305      	str	r3, [sp, #20]
 8007122:	2302      	movs	r3, #2
 8007124:	9304      	str	r3, [sp, #16]
 8007126:	2301      	movs	r3, #1
 8007128:	9303      	str	r3, [sp, #12]
 800712a:	2300      	movs	r3, #0
 800712c:	9302      	str	r3, [sp, #8]
 800712e:	2304      	movs	r3, #4
 8007130:	9301      	str	r3, [sp, #4]
 8007132:	2303      	movs	r3, #3
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	2302      	movs	r3, #2
 8007138:	2201      	movs	r2, #1
 800713a:	2100      	movs	r1, #0
 800713c:	2007      	movs	r0, #7
 800713e:	f000 ff8f 	bl	8008060 <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	68b9      	ldr	r1, [r7, #8]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f982 	bl	8007456 <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	2209      	movs	r2, #9
 8007156:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	220b      	movs	r2, #11
 800715c:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	2200      	movs	r2, #0
 8007162:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	2221      	movs	r2, #33	; 0x21
 8007168:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	2200      	movs	r2, #0
 800716e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	221b      	movs	r2, #27
 8007174:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	2200      	movs	r2, #0
 800717a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	2229      	movs	r2, #41	; 0x29
 8007180:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	2200      	movs	r2, #0
 8007186:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	2222      	movs	r2, #34	; 0x22
 800718c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2209      	movs	r2, #9
 8007192:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	22f5      	movs	r2, #245	; 0xf5
 8007198:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	2209      	movs	r2, #9
 800719e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	220b      	movs	r2, #11
 80071a4:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 80071a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a8:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 80071ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b0:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2208      	movs	r2, #8
 80071ba:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2288      	movs	r2, #136	; 0x88
 80071c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 80071c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c8:	229b      	movs	r2, #155	; 0x9b
 80071ca:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	2226      	movs	r2, #38	; 0x26
 80071d0:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80071d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b090      	sub	sp, #64	; 0x40
 80071e2:	af0a      	add	r7, sp, #40	; 0x28
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	60b9      	str	r1, [r7, #8]
 80071e8:	607a      	str	r2, [r7, #4]
 80071ea:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80071ec:	2300      	movs	r3, #0
 80071ee:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 80071f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f2:	9304      	str	r3, [sp, #16]
 80071f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f6:	9303      	str	r3, [sp, #12]
 80071f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fa:	9302      	str	r3, [sp, #8]
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	9301      	str	r3, [sp, #4]
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	68b9      	ldr	r1, [r7, #8]
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f7ff feb4 	bl	8006f78 <VL53LX_preset_mode_histogram_ranging>
 8007210:	4603      	mov	r3, r0
 8007212:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007214:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d178      	bne.n	800730e <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	9308      	str	r3, [sp, #32]
 8007220:	2303      	movs	r3, #3
 8007222:	9307      	str	r3, [sp, #28]
 8007224:	2302      	movs	r3, #2
 8007226:	9306      	str	r3, [sp, #24]
 8007228:	2301      	movs	r3, #1
 800722a:	9305      	str	r3, [sp, #20]
 800722c:	2302      	movs	r3, #2
 800722e:	9304      	str	r3, [sp, #16]
 8007230:	2301      	movs	r3, #1
 8007232:	9303      	str	r3, [sp, #12]
 8007234:	2300      	movs	r3, #0
 8007236:	9302      	str	r3, [sp, #8]
 8007238:	2302      	movs	r3, #2
 800723a:	9301      	str	r3, [sp, #4]
 800723c:	2302      	movs	r3, #2
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	2301      	movs	r3, #1
 8007242:	2201      	movs	r2, #1
 8007244:	2100      	movs	r1, #0
 8007246:	2007      	movs	r0, #7
 8007248:	f000 fe7a 	bl	8007f40 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 800724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724e:	3302      	adds	r3, #2
 8007250:	9308      	str	r3, [sp, #32]
 8007252:	2303      	movs	r3, #3
 8007254:	9307      	str	r3, [sp, #28]
 8007256:	2302      	movs	r3, #2
 8007258:	9306      	str	r3, [sp, #24]
 800725a:	2301      	movs	r3, #1
 800725c:	9305      	str	r3, [sp, #20]
 800725e:	2302      	movs	r3, #2
 8007260:	9304      	str	r3, [sp, #16]
 8007262:	2301      	movs	r3, #1
 8007264:	9303      	str	r3, [sp, #12]
 8007266:	2300      	movs	r3, #0
 8007268:	9302      	str	r3, [sp, #8]
 800726a:	2302      	movs	r3, #2
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	2302      	movs	r3, #2
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	2301      	movs	r3, #1
 8007274:	2201      	movs	r2, #1
 8007276:	2100      	movs	r1, #0
 8007278:	2007      	movs	r0, #7
 800727a:	f000 fef1 	bl	8008060 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	68b9      	ldr	r1, [r7, #8]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f8e4 	bl	8007456 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	2205      	movs	r2, #5
 8007292:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	2207      	movs	r2, #7
 8007298:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	2200      	movs	r2, #0
 800729e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	2236      	movs	r2, #54	; 0x36
 80072a4:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	2200      	movs	r2, #0
 80072aa:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	2228      	movs	r2, #40	; 0x28
 80072b0:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	2200      	movs	r2, #0
 80072b6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	2244      	movs	r2, #68	; 0x44
 80072bc:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	2200      	movs	r2, #0
 80072c2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	2233      	movs	r2, #51	; 0x33
 80072c8:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2205      	movs	r2, #5
 80072ce:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	22f5      	movs	r2, #245	; 0xf5
 80072d4:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	2205      	movs	r2, #5
 80072da:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	2207      	movs	r2, #7
 80072e0:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 80072e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e4:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 80072ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ec:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2208      	movs	r2, #8
 80072f6:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2248      	movs	r2, #72	; 0x48
 80072fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	229b      	movs	r2, #155	; 0x9b
 8007306:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	2226      	movs	r2, #38	; 0x26
 800730c:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800730e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b090      	sub	sp, #64	; 0x40
 800731e:	af0a      	add	r7, sp, #40	; 0x28
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	60b9      	str	r1, [r7, #8]
 8007324:	607a      	str	r2, [r7, #4]
 8007326:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007328:	2300      	movs	r3, #0
 800732a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	9304      	str	r3, [sp, #16]
 8007330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007332:	9303      	str	r3, [sp, #12]
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	9302      	str	r3, [sp, #8]
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	9301      	str	r3, [sp, #4]
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	68b9      	ldr	r1, [r7, #8]
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f7ff fe16 	bl	8006f78 <VL53LX_preset_mode_histogram_ranging>
 800734c:	4603      	mov	r3, r0
 800734e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007350:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d178      	bne.n	800744a <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	9308      	str	r3, [sp, #32]
 800735c:	2302      	movs	r3, #2
 800735e:	9307      	str	r3, [sp, #28]
 8007360:	2302      	movs	r3, #2
 8007362:	9306      	str	r3, [sp, #24]
 8007364:	2301      	movs	r3, #1
 8007366:	9305      	str	r3, [sp, #20]
 8007368:	2301      	movs	r3, #1
 800736a:	9304      	str	r3, [sp, #16]
 800736c:	2301      	movs	r3, #1
 800736e:	9303      	str	r3, [sp, #12]
 8007370:	2300      	movs	r3, #0
 8007372:	9302      	str	r3, [sp, #8]
 8007374:	2301      	movs	r3, #1
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	2301      	movs	r3, #1
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	2301      	movs	r3, #1
 800737e:	2200      	movs	r2, #0
 8007380:	2107      	movs	r1, #7
 8007382:	2007      	movs	r0, #7
 8007384:	f000 fddc 	bl	8007f40 <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738a:	3302      	adds	r3, #2
 800738c:	9308      	str	r3, [sp, #32]
 800738e:	2302      	movs	r3, #2
 8007390:	9307      	str	r3, [sp, #28]
 8007392:	2302      	movs	r3, #2
 8007394:	9306      	str	r3, [sp, #24]
 8007396:	2301      	movs	r3, #1
 8007398:	9305      	str	r3, [sp, #20]
 800739a:	2301      	movs	r3, #1
 800739c:	9304      	str	r3, [sp, #16]
 800739e:	2301      	movs	r3, #1
 80073a0:	9303      	str	r3, [sp, #12]
 80073a2:	2300      	movs	r3, #0
 80073a4:	9302      	str	r3, [sp, #8]
 80073a6:	2301      	movs	r3, #1
 80073a8:	9301      	str	r3, [sp, #4]
 80073aa:	2301      	movs	r3, #1
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	2301      	movs	r3, #1
 80073b0:	2200      	movs	r2, #0
 80073b2:	2107      	movs	r1, #7
 80073b4:	2007      	movs	r0, #7
 80073b6:	f000 fe53 	bl	8008060 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	68b9      	ldr	r1, [r7, #8]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f846 	bl	8007456 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	2203      	movs	r2, #3
 80073ce:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	2205      	movs	r2, #5
 80073d4:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	2200      	movs	r2, #0
 80073da:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	2252      	movs	r2, #82	; 0x52
 80073e0:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	2200      	movs	r2, #0
 80073e6:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	2237      	movs	r2, #55	; 0x37
 80073ec:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	2200      	movs	r2, #0
 80073f2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	2266      	movs	r2, #102	; 0x66
 80073f8:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	2200      	movs	r2, #0
 80073fe:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	2244      	movs	r2, #68	; 0x44
 8007404:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2203      	movs	r2, #3
 800740a:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	22f5      	movs	r2, #245	; 0xf5
 8007410:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	2203      	movs	r2, #3
 8007416:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	2205      	movs	r2, #5
 800741c:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800741e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007420:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8007426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007428:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2208      	movs	r2, #8
 8007432:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2228      	movs	r2, #40	; 0x28
 800743a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	22bb      	movs	r2, #187	; 0xbb
 8007442:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007446:	2226      	movs	r2, #38	; 0x26
 8007448:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800744a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 8007456:	b480      	push	{r7}
 8007458:	b085      	sub	sp, #20
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	79db      	ldrb	r3, [r3, #7]
 8007498:	b29b      	uxth	r3, r3
				<< 8)
 800749a:	021b      	lsls	r3, r3, #8
 800749c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	7a1b      	ldrb	r3, [r3, #8]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	4413      	add	r3, r2
 80074a6:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	785b      	ldrb	r3, [r3, #1]
 80074e0:	b29b      	uxth	r3, r3
				<< 8)
 80074e2:	021b      	lsls	r3, r3, #8
 80074e4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	789b      	ldrb	r3, [r3, #2]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	4413      	add	r3, r2
 80074ee:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	78db      	ldrb	r3, [r3, #3]
 80074f8:	b29b      	uxth	r3, r3
				<< 8)
 80074fa:	021b      	lsls	r3, r3, #8
 80074fc:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	791b      	ldrb	r3, [r3, #4]
 8007502:	b29b      	uxth	r3, r3
 8007504:	4413      	add	r3, r2
 8007506:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 8007534:	bf00      	nop
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	79db      	ldrb	r3, [r3, #7]
 8007580:	b29b      	uxth	r3, r3
				<< 8)
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	7a1b      	ldrb	r3, [r3, #8]
 800758a:	b29b      	uxth	r3, r3
 800758c:	4413      	add	r3, r2
 800758e:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	785b      	ldrb	r3, [r3, #1]
 80075c0:	b29b      	uxth	r3, r3
				<< 8)
 80075c2:	021b      	lsls	r3, r3, #8
 80075c4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	789b      	ldrb	r3, [r3, #2]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	4413      	add	r3, r2
 80075ce:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	78db      	ldrb	r3, [r3, #3]
 80075d8:	b29b      	uxth	r3, r3
				<< 8)
 80075da:	021b      	lsls	r3, r3, #8
 80075dc:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	791b      	ldrb	r3, [r3, #4]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	4413      	add	r3, r2
 80075e6:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 80075fc:	bf00      	nop
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3318      	adds	r3, #24
 8007614:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007634:	bf00      	nop
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3318      	adds	r3, #24
 8007650:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	332c      	adds	r3, #44	; 0x2c
 8007656:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	78fa      	ldrb	r2, [r7, #3]
 800765c:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2200      	movs	r2, #0
 8007662:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2202      	movs	r2, #2
 8007668:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2200      	movs	r2, #0
 800766e:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2200      	movs	r2, #0
 8007674:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	78fa      	ldrb	r2, [r7, #3]
 800767a:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2200      	movs	r2, #0
 8007680:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2202      	movs	r2, #2
 8007686:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2200      	movs	r2, #0
 800768c:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2200      	movs	r2, #0
 8007692:	735a      	strb	r2, [r3, #13]

}
 8007694:	bf00      	nop
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 80076a8:	2300      	movs	r3, #0
 80076aa:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3318      	adds	r3, #24
 80076b0:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	332c      	adds	r3, #44	; 0x2c
 80076b6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80076be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d115      	bne.n	80076f2 <VL53LX_update_ll_driver_rd_state+0x52>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2203      	movs	r2, #3
 80076ca:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2202      	movs	r2, #2
 80076e2:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	735a      	strb	r2, [r3, #13]
 80076f0:	e0be      	b.n	8007870 <VL53LX_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	7a1b      	ldrb	r3, [r3, #8]
 80076f6:	2bff      	cmp	r3, #255	; 0xff
 80076f8:	d103      	bne.n	8007702 <VL53LX_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2280      	movs	r2, #128	; 0x80
 80076fe:	721a      	strb	r2, [r3, #8]
 8007700:	e005      	b.n	800770e <VL53LX_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	7a1b      	ldrb	r3, [r3, #8]
 8007706:	3301      	adds	r3, #1
 8007708:	b2da      	uxtb	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	7a19      	ldrb	r1, [r3, #8]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f103 0209 	add.w	r2, r3, #9
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	330a      	adds	r3, #10
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f002 fcf6 	bl	800a10e <VL53LX_update_internal_stream_counters>
 8007722:	4603      	mov	r3, r0
 8007724:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	7adb      	ldrb	r3, [r3, #11]
 800772a:	f083 0302 	eor.w	r3, r3, #2
 800772e:	b2da      	uxtb	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	79db      	ldrb	r3, [r3, #7]
 8007738:	3b03      	subs	r3, #3
 800773a:	2b05      	cmp	r3, #5
 800773c:	f200 8082 	bhi.w	8007844 <VL53LX_update_ll_driver_rd_state+0x1a4>
 8007740:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <VL53LX_update_ll_driver_rd_state+0xa8>)
 8007742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007746:	bf00      	nop
 8007748:	08007761 	.word	0x08007761
 800774c:	08007845 	.word	0x08007845
 8007750:	08007845 	.word	0x08007845
 8007754:	080077b3 	.word	0x080077b3
 8007758:	080077e9 	.word	0x080077e9
 800775c:	08007813 	.word	0x08007813

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f893 335e 	ldrb.w	r3, [r3, #862]	; 0x35e
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b00      	cmp	r3, #0
 800776c:	dd03      	ble.n	8007776 <VL53LX_update_ll_driver_rd_state+0xd6>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2206      	movs	r2, #6
 8007772:	71da      	strb	r2, [r3, #7]
 8007774:	e00d      	b.n	8007792 <VL53LX_update_ll_driver_rd_state+0xf2>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 8007780:	429a      	cmp	r2, r3
 8007782:	d303      	bcc.n	800778c <VL53LX_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2208      	movs	r2, #8
 8007788:	71da      	strb	r2, [r3, #7]
 800778a:	e002      	b.n	8007792 <VL53LX_update_ll_driver_rd_state+0xf2>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2207      	movs	r2, #7
 8007790:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	735a      	strb	r2, [r3, #13]

			break;
 80077b0:	e05e      	b.n	8007870 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d303      	bcc.n	80077e0 <VL53LX_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2208      	movs	r2, #8
 80077dc:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 80077de:	e047      	b.n	8007870 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2207      	movs	r2, #7
 80077e4:	71da      	strb	r2, [r3, #7]
			break;
 80077e6:	e043      	b.n	8007870 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	7b5b      	ldrb	r3, [r3, #13]
 80077ec:	3301      	adds	r3, #1
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 80077fe:	429a      	cmp	r2, r3
 8007800:	d303      	bcc.n	800780a <VL53LX_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2208      	movs	r2, #8
 8007806:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8007808:	e032      	b.n	8007870 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2207      	movs	r2, #7
 800780e:	71da      	strb	r2, [r3, #7]
			break;
 8007810:	e02e      	b.n	8007870 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	7b1b      	ldrb	r3, [r3, #12]
 800781c:	f083 0301 	eor.w	r3, r3, #1
 8007820:	b2da      	uxtb	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8007830:	429a      	cmp	r2, r3
 8007832:	d303      	bcc.n	800783c <VL53LX_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2208      	movs	r2, #8
 8007838:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800783a:	e019      	b.n	8007870 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2207      	movs	r2, #7
 8007840:	71da      	strb	r2, [r3, #7]
			break;
 8007842:	e015      	b.n	8007870 <VL53LX_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2203      	movs	r2, #3
 8007848:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2202      	movs	r2, #2
 8007860:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	735a      	strb	r2, [r3, #13]
			break;
 800786e:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 8007870:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3718      	adds	r7, #24
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 800787c:	b480      	push	{r7}
 800787e:	b08d      	sub	sp, #52	; 0x34
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8007884:	2300      	movs	r3, #0
 8007886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t  *pdev =
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	3318      	adds	r3, #24
 800788e:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	332c      	adds	r3, #44	; 0x2c
 800789c:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	f203 3366 	addw	r3, r3, #870	; 0x366
 80078a4:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 80078a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80078ac:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80078b4:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 80078b6:	2300      	movs	r3, #0
 80078b8:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 80078be:	2300      	movs	r3, #0
 80078c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 80078cc:	2300      	movs	r3, #0
 80078ce:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 80078d4:	f003 031f 	and.w	r3, r3, #31
 80078d8:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	78db      	ldrb	r3, [r3, #3]
 80078de:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80078e6:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	bf14      	ite	ne
 80078ee:	2301      	movne	r3, #1
 80078f0:	2300      	moveq	r3, #0
 80078f2:	b2db      	uxtb	r3, r3
	histogram_mode =
 80078f4:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80078fa:	111b      	asrs	r3, r3, #4
 80078fc:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 8007906:	7c7b      	ldrb	r3, [r7, #17]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d008      	beq.n	800791e <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8007912:	111b      	asrs	r3, r3, #4
 8007914:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007924:	f003 0320 	and.w	r3, r3, #32
 8007928:	2b00      	cmp	r3, #0
 800792a:	d04e      	beq.n	80079ca <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	79db      	ldrb	r3, [r3, #7]
 8007930:	2b06      	cmp	r3, #6
 8007932:	d109      	bne.n	8007948 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 8007934:	7c7b      	ldrb	r3, [r7, #17]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d14a      	bne.n	80079d0 <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 800793a:	7cfb      	ldrb	r3, [r7, #19]
 800793c:	2b12      	cmp	r3, #18
 800793e:	d047      	beq.n	80079d0 <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8007940:	23ef      	movs	r3, #239	; 0xef
 8007942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007946:	e043      	b.n	80079d0 <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	7a1b      	ldrb	r3, [r3, #8]
 800794c:	7cba      	ldrb	r2, [r7, #18]
 800794e:	429a      	cmp	r2, r3
 8007950:	d002      	beq.n	8007958 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 8007952:	23ee      	movs	r3, #238	; 0xee
 8007954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	7adb      	ldrb	r3, [r3, #11]
 800795c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007960:	429a      	cmp	r2, r3
 8007962:	d002      	beq.n	800796a <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8007964:	23ed      	movs	r3, #237	; 0xed
 8007966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 800796a:	6a3b      	ldr	r3, [r7, #32]
 800796c:	7b5b      	ldrb	r3, [r3, #13]
 800796e:	4619      	mov	r1, r3
		expected_stream_count =
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	460b      	mov	r3, r1
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	440b      	add	r3, r1
 8007978:	005b      	lsls	r3, r3, #1
 800797a:	4413      	add	r3, r2
 800797c:	3302      	adds	r3, #2
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	7b5b      	ldrb	r3, [r3, #13]
 8007986:	4619      	mov	r1, r3
		expected_gph_id =
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	460b      	mov	r3, r1
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	440b      	add	r3, r1
 8007990:	005b      	lsls	r3, r3, #1
 8007992:	4413      	add	r3, r2
 8007994:	3303      	adds	r3, #3
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800799a:	7c3a      	ldrb	r2, [r7, #16]
 800799c:	7cbb      	ldrb	r3, [r7, #18]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d00a      	beq.n	80079b8 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 80079a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d102      	bne.n	80079b2 <VL53LX_check_ll_driver_rd_state+0x136>
 80079ac:	7cbb      	ldrb	r3, [r7, #18]
 80079ae:	2bff      	cmp	r3, #255	; 0xff
 80079b0:	d002      	beq.n	80079b8 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 80079b2:	23ec      	movs	r3, #236	; 0xec
 80079b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 80079b8:	7bfa      	ldrb	r2, [r7, #15]
 80079ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80079be:	429a      	cmp	r2, r3
 80079c0:	d005      	beq.n	80079ce <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 80079c2:	23eb      	movs	r3, #235	; 0xeb
 80079c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80079c8:	e002      	b.n	80079d0 <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 80079ca:	bf00      	nop
 80079cc:	e000      	b.n	80079d0 <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 80079ce:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 80079d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3734      	adds	r7, #52	; 0x34
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 80079e8:	2300      	movs	r3, #0
 80079ea:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	3318      	adds	r3, #24
 80079f0:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80079f8:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	332c      	adds	r3, #44	; 0x2c
 80079fe:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8007a06:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d11b      	bne.n	8007a4e <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	2203      	movs	r2, #3
 8007a1a:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2200      	movs	r2, #0
 8007a26:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	2202      	movs	r2, #2
 8007a32:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	2200      	movs	r2, #0
 8007a38:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8007a40:	2300      	movs	r3, #0
 8007a42:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	773b      	strb	r3, [r7, #28]
 8007a4c:	e0b1      	b.n	8007bb2 <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	791b      	ldrb	r3, [r3, #4]
 8007a52:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	799b      	ldrb	r3, [r3, #6]
 8007a58:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	785b      	ldrb	r3, [r3, #1]
 8007a5e:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	785b      	ldrb	r3, [r3, #1]
 8007a64:	2bff      	cmp	r3, #255	; 0xff
 8007a66:	d103      	bne.n	8007a70 <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	2280      	movs	r2, #128	; 0x80
 8007a6c:	705a      	strb	r2, [r3, #1]
 8007a6e:	e005      	b.n	8007a7c <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	785b      	ldrb	r3, [r3, #1]
 8007a74:	3301      	adds	r3, #1
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	7859      	ldrb	r1, [r3, #1]
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	1c9a      	adds	r2, r3, #2
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	3303      	adds	r3, #3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f002 fb40 	bl	800a10e <VL53LX_update_internal_stream_counters>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	791b      	ldrb	r3, [r3, #4]
 8007a96:	f083 0302 	eor.w	r3, r3, #2
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	2b05      	cmp	r3, #5
 8007aa6:	d053      	beq.n	8007b50 <VL53LX_update_ll_driver_cfg_state+0x170>
 8007aa8:	2b05      	cmp	r3, #5
 8007aaa:	dc69      	bgt.n	8007b80 <VL53LX_update_ll_driver_cfg_state+0x1a0>
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d002      	beq.n	8007ab6 <VL53LX_update_ll_driver_cfg_state+0xd6>
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d02d      	beq.n	8007b10 <VL53LX_update_ll_driver_cfg_state+0x130>
 8007ab4:	e064      	b.n	8007b80 <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d909      	bls.n	8007ade <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	2200      	movs	r2, #0
 8007ace:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	795b      	ldrb	r3, [r3, #5]
 8007ad4:	f083 0301 	eor.w	r3, r3, #1
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d106      	bne.n	8007afc <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	2201      	movs	r2, #1
 8007af2:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2200      	movs	r2, #0
 8007af8:	70da      	strb	r2, [r3, #3]
 8007afa:	e005      	b.n	8007b08 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	2200      	movs	r2, #0
 8007b00:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2201      	movs	r2, #1
 8007b06:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	2204      	movs	r2, #4
 8007b0c:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 8007b0e:	e050      	b.n	8007bb2 <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	799b      	ldrb	r3, [r3, #6]
 8007b14:	3301      	adds	r3, #1
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d940      	bls.n	8007bac <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	795b      	ldrb	r3, [r3, #5]
 8007b34:	f083 0301 	eor.w	r3, r3, #1
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d031      	beq.n	8007bac <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	2205      	movs	r2, #5
 8007b4c:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 8007b4e:	e02d      	b.n	8007bac <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	799b      	ldrb	r3, [r3, #6]
 8007b54:	3301      	adds	r3, #1
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d922      	bls.n	8007bb0 <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	795b      	ldrb	r3, [r3, #5]
 8007b74:	f083 0301 	eor.w	r3, r3, #1
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	715a      	strb	r2, [r3, #5]
			}
			break;
 8007b7e:	e017      	b.n	8007bb0 <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	2203      	movs	r2, #3
 8007b84:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	2200      	movs	r2, #0
 8007b96:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	719a      	strb	r2, [r3, #6]
			break;
 8007baa:	e002      	b.n	8007bb2 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007bac:	bf00      	nop
 8007bae:	e000      	b.n	8007bb2 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007bb0:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d11d      	bne.n	8007bf8 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007bbc:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 8007bbe:	7f3b      	ldrb	r3, [r7, #28]
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	b2d8      	uxtb	r0, r3
 8007bc4:	68f9      	ldr	r1, [r7, #12]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	440b      	add	r3, r1
 8007bd0:	3302      	adds	r3, #2
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	7b5b      	ldrb	r3, [r3, #13]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	7f7b      	ldrb	r3, [r7, #29]
 8007bde:	f083 0302 	eor.w	r3, r3, #2
 8007be2:	b2d8      	uxtb	r0, r3
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	460b      	mov	r3, r1
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	440b      	add	r3, r1
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	4413      	add	r3, r2
 8007bf0:	3303      	adds	r3, #3
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	701a      	strb	r2, [r3, #0]
 8007bf6:	e013      	b.n	8007c20 <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007bf8:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 8007bfa:	68f9      	ldr	r1, [r7, #12]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	440b      	add	r3, r1
 8007c06:	3302      	adds	r3, #2
 8007c08:	7f3a      	ldrb	r2, [r7, #28]
 8007c0a:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 8007c0c:	7fba      	ldrb	r2, [r7, #30]
 8007c0e:	68f9      	ldr	r1, [r7, #12]
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	440b      	add	r3, r1
 8007c1a:	3303      	adds	r3, #3
 8007c1c:	7f7a      	ldrb	r2, [r7, #29]
 8007c1e:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 8007c20:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3720      	adds	r7, #32
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	7c1a      	ldrb	r2, [r3, #16]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	3301      	adds	r3, #1
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	7c52      	ldrb	r2, [r2, #17]
 8007c46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	3302      	adds	r3, #2
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	7c92      	ldrb	r2, [r2, #18]
 8007c50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	3303      	adds	r3, #3
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	7cd2      	ldrb	r2, [r2, #19]
 8007c5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	7d12      	ldrb	r2, [r2, #20]
 8007c64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	3305      	adds	r3, #5
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	7d52      	ldrb	r2, [r2, #21]
 8007c6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	3306      	adds	r3, #6
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	7d92      	ldrb	r2, [r2, #22]
 8007c78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	3307      	adds	r3, #7
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	7dd2      	ldrb	r2, [r2, #23]
 8007c82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	3308      	adds	r3, #8
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	7e12      	ldrb	r2, [r2, #24]
 8007c8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	3309      	adds	r3, #9
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	7e52      	ldrb	r2, [r2, #25]
 8007c96:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	330a      	adds	r3, #10
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	7e92      	ldrb	r2, [r2, #26]
 8007ca0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	330b      	adds	r3, #11
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	7ed2      	ldrb	r2, [r2, #27]
 8007caa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	330c      	adds	r3, #12
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	7f12      	ldrb	r2, [r2, #28]
 8007cb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	330d      	adds	r3, #13
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	7f52      	ldrb	r2, [r2, #29]
 8007cbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	330e      	adds	r3, #14
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	7f92      	ldrb	r2, [r2, #30]
 8007cc8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	330f      	adds	r3, #15
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	7fd2      	ldrb	r2, [r2, #31]
 8007cd2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	3310      	adds	r3, #16
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007cde:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	3311      	adds	r3, #17
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007cea:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	3312      	adds	r3, #18
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8007cf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	3313      	adds	r3, #19
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8007d02:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	3314      	adds	r3, #20
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007d0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	3315      	adds	r3, #21
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007d1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	3316      	adds	r3, #22
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8007d26:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	3317      	adds	r3, #23
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8007d32:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	3318      	adds	r3, #24
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8007d3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	3319      	adds	r3, #25
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8007d4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	331a      	adds	r3, #26
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8007d56:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	331b      	adds	r3, #27
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8007d62:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	331c      	adds	r3, #28
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007d6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	331d      	adds	r3, #29
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007d7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	331e      	adds	r3, #30
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007d86:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	331f      	adds	r3, #31
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8007d92:	701a      	strb	r2, [r3, #0]
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	22ff      	movs	r2, #255	; 0xff
 8007dac:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	22ff      	movs	r2, #255	; 0xff
 8007db2:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	22ff      	movs	r2, #255	; 0xff
 8007db8:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	22ff      	movs	r2, #255	; 0xff
 8007dbe:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dc6:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dce:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dd6:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dde:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007de6:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dee:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007df6:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dfe:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e06:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e0e:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e16:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e1e:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e26:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e2e:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e36:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e3e:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e46:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e4e:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e56:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	22ff      	movs	r2, #255	; 0xff
 8007e5c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	4603      	mov	r3, r0
 8007e74:	6039      	str	r1, [r7, #0]
 8007e76:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2205      	movs	r2, #5
 8007e80:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	79fa      	ldrb	r2, [r7, #7]
 8007e86:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]
 8007e8c:	e017      	b.n	8007ebe <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 8007e8e:	7bfa      	ldrb	r2, [r7, #15]
 8007e90:	4613      	mov	r3, r2
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	4413      	add	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2203      	movs	r2, #3
 8007ea4:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2203      	movs	r2, #3
 8007eaa:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2204      	movs	r2, #4
 8007eb0:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	73fb      	strb	r3, [r7, #15]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	7bfa      	ldrb	r2, [r7, #15]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d3e2      	bcc.n	8007e8e <V53L1_init_zone_results_structure+0x22>
	}
}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53LX_DEV              Dev)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b087      	sub	sp, #28
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverResults_t  *pres =
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007ee4:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53LX_MAX_USER_ZONES;
 8007eea:	2305      	movs	r3, #5
 8007eec:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8007ef4:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	75fb      	strb	r3, [r7, #23]
 8007efa:	e016      	b.n	8007f2a <V53L1_init_zone_dss_configs+0x54>
		pdata->VL53LX_p_003[z].dss_mode =
 8007efc:	7dfa      	ldrb	r2, [r7, #23]
 8007efe:	68b9      	ldr	r1, [r7, #8]
 8007f00:	4613      	mov	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	440b      	add	r3, r1
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	701a      	strb	r2, [r3, #0]
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53LX_p_003[z].dss_requested_effective_spad_count = 0;
 8007f10:	7dfa      	ldrb	r2, [r7, #23]
 8007f12:	68b9      	ldr	r1, [r7, #8]
 8007f14:	4613      	mov	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	440b      	add	r3, r1
 8007f1e:	3306      	adds	r3, #6
 8007f20:	2200      	movs	r2, #0
 8007f22:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
 8007f26:	3301      	adds	r3, #1
 8007f28:	75fb      	strb	r3, [r7, #23]
 8007f2a:	7dfa      	ldrb	r2, [r7, #23]
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d3e4      	bcc.n	8007efc <V53L1_init_zone_dss_configs+0x26>
	}
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	371c      	adds	r7, #28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8007f40:	b490      	push	{r4, r7}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4604      	mov	r4, r0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	4623      	mov	r3, r4
 8007f50:	71fb      	strb	r3, [r7, #7]
 8007f52:	4603      	mov	r3, r0
 8007f54:	71bb      	strb	r3, [r7, #6]
 8007f56:	460b      	mov	r3, r1
 8007f58:	717b      	strb	r3, [r7, #5]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8007f5e:	79bb      	ldrb	r3, [r7, #6]
 8007f60:	011b      	lsls	r3, r3, #4
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	79fb      	ldrb	r3, [r7, #7]
 8007f66:	4413      	add	r3, r2
 8007f68:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6c:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8007f6e:	793b      	ldrb	r3, [r7, #4]
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	797b      	ldrb	r3, [r7, #5]
 8007f76:	4413      	add	r3, r2
 8007f78:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8007f7e:	7d3b      	ldrb	r3, [r7, #20]
 8007f80:	011b      	lsls	r3, r3, #4
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	7c3b      	ldrb	r3, [r7, #16]
 8007f86:	4413      	add	r3, r2
 8007f88:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 8007f8e:	7f3b      	ldrb	r3, [r7, #28]
 8007f90:	011b      	lsls	r3, r3, #4
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	7e3b      	ldrb	r3, [r7, #24]
 8007f96:	4413      	add	r3, r2
 8007f98:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 8007f9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007fa2:	011b      	lsls	r3, r3, #4
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007faa:	4413      	add	r3, r2
 8007fac:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 8007fb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007fb6:	011b      	lsls	r3, r3, #4
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007fbe:	4413      	add	r3, r2
 8007fc0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8007fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe0:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007fec:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8007fee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ffa:	4413      	add	r3, r2
 8007ffc:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008008:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	2200      	movs	r2, #0
 800800e:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008012:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8008020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008022:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8008028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802a:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802e:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8008034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008036:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803e:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008046:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800804e:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8008050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008052:	2200      	movs	r2, #0
 8008054:	701a      	strb	r2, [r3, #0]

}
 8008056:	bf00      	nop
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bc90      	pop	{r4, r7}
 800805e:	4770      	bx	lr

08008060 <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8008060:	b490      	push	{r4, r7}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	4604      	mov	r4, r0
 8008068:	4608      	mov	r0, r1
 800806a:	4611      	mov	r1, r2
 800806c:	461a      	mov	r2, r3
 800806e:	4623      	mov	r3, r4
 8008070:	71fb      	strb	r3, [r7, #7]
 8008072:	4603      	mov	r3, r0
 8008074:	71bb      	strb	r3, [r7, #6]
 8008076:	460b      	mov	r3, r1
 8008078:	717b      	strb	r3, [r7, #5]
 800807a:	4613      	mov	r3, r2
 800807c:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800807e:	79bb      	ldrb	r3, [r7, #6]
 8008080:	011b      	lsls	r3, r3, #4
 8008082:	b2da      	uxtb	r2, r3
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	4413      	add	r3, r2
 8008088:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800808e:	793b      	ldrb	r3, [r7, #4]
 8008090:	011b      	lsls	r3, r3, #4
 8008092:	b2da      	uxtb	r2, r3
 8008094:	797b      	ldrb	r3, [r7, #5]
 8008096:	4413      	add	r3, r2
 8008098:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800809e:	7d3b      	ldrb	r3, [r7, #20]
 80080a0:	011b      	lsls	r3, r3, #4
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	7c3b      	ldrb	r3, [r7, #16]
 80080a6:	4413      	add	r3, r2
 80080a8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 80080ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b0:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	789a      	ldrb	r2, [r3, #2]
 80080ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080bc:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	78da      	ldrb	r2, [r3, #3]
 80080c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c4:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 80080c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c8:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 80080ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d0:	789a      	ldrb	r2, [r3, #2]
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	78da      	ldrb	r2, [r3, #3]
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 80080de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e0:	791a      	ldrb	r2, [r3, #4]
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80080ec:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 80080ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80080fa:	4413      	add	r3, r2
 80080fc:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008108:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800810a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810c:	2200      	movs	r2, #0
 800810e:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 8008110:	7f3b      	ldrb	r3, [r7, #28]
 8008112:	011b      	lsls	r3, r3, #4
 8008114:	b2da      	uxtb	r2, r3
 8008116:	7e3b      	ldrb	r3, [r7, #24]
 8008118:	4413      	add	r3, r2
 800811a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 8008120:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	b2da      	uxtb	r2, r3
 8008128:	f897 3020 	ldrb.w	r3, [r7, #32]
 800812c:	4413      	add	r3, r2
 800812e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 8008134:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008138:	011b      	lsls	r3, r3, #4
 800813a:	b2da      	uxtb	r2, r3
 800813c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008140:	4413      	add	r3, r2
 8008142:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	7bda      	ldrb	r2, [r3, #15]
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	7c1a      	ldrb	r2, [r3, #16]
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 8008158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815a:	7c5a      	ldrb	r2, [r3, #17]
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8008160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008166:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800816e:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8008170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008172:	2200      	movs	r2, #0
 8008174:	701a      	strb	r2, [r3, #0]
}
 8008176:	bf00      	nop
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bc90      	pop	{r4, r7}
 800817e:	4770      	bx	lr

08008180 <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	460b      	mov	r3, r1
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800818e:	2300      	movs	r3, #0
 8008190:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	220c      	movs	r2, #12
 80081a8:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 80081aa:	897b      	ldrh	r3, [r7, #10]
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_015                = 0;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 80081e0:	2300      	movs	r3, #0
 80081e2:	82fb      	strh	r3, [r7, #22]
 80081e4:	e015      	b.n	8008212 <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 80081e6:	8afa      	ldrh	r2, [r7, #22]
 80081e8:	897b      	ldrh	r3, [r7, #10]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d207      	bcs.n	80081fe <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 80081ee:	8afb      	ldrh	r3, [r7, #22]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	3302      	adds	r3, #2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	605a      	str	r2, [r3, #4]
 80081fc:	e006      	b.n	800820c <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 80081fe:	8afb      	ldrh	r3, [r7, #22]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	3302      	adds	r3, #2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	2200      	movs	r2, #0
 800820a:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 800820c:	8afb      	ldrh	r3, [r7, #22]
 800820e:	3301      	adds	r3, #1
 8008210:	82fb      	strh	r3, [r7, #22]
 8008212:	8afb      	ldrh	r3, [r7, #22]
 8008214:	2b0b      	cmp	r3, #11
 8008216:	d9e6      	bls.n	80081e6 <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 8008218:	bf00      	nop
 800821a:	bf00      	nop
 800821c:	371c      	adds	r7, #28
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008226:	b480      	push	{r7}
 8008228:	b085      	sub	sp, #20
 800822a:	af00      	add	r7, sp, #0
 800822c:	4603      	mov	r3, r0
 800822e:	603a      	str	r2, [r7, #0]
 8008230:	80fb      	strh	r3, [r7, #6]
 8008232:	460b      	mov	r3, r1
 8008234:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8008236:	2300      	movs	r3, #0
 8008238:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 800823a:	2300      	movs	r3, #0
 800823c:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 800823e:	88fb      	ldrh	r3, [r7, #6]
 8008240:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8008242:	2300      	movs	r3, #0
 8008244:	81fb      	strh	r3, [r7, #14]
 8008246:	e00e      	b.n	8008266 <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008248:	88ba      	ldrh	r2, [r7, #4]
 800824a:	89fb      	ldrh	r3, [r7, #14]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	3b01      	subs	r3, #1
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	4413      	add	r3, r2
 8008254:	89ba      	ldrh	r2, [r7, #12]
 8008256:	b2d2      	uxtb	r2, r2
 8008258:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 800825a:	89bb      	ldrh	r3, [r7, #12]
 800825c:	0a1b      	lsrs	r3, r3, #8
 800825e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8008260:	89fb      	ldrh	r3, [r7, #14]
 8008262:	3301      	adds	r3, #1
 8008264:	81fb      	strh	r3, [r7, #14]
 8008266:	89fa      	ldrh	r2, [r7, #14]
 8008268:	88bb      	ldrh	r3, [r7, #4]
 800826a:	429a      	cmp	r2, r3
 800826c:	d3ec      	bcc.n	8008248 <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 800826e:	bf00      	nop
 8008270:	bf00      	nop
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	6039      	str	r1, [r7, #0]
 8008286:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 8008288:	2300      	movs	r3, #0
 800828a:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800828c:	e00a      	b.n	80082a4 <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800828e:	89fb      	ldrh	r3, [r7, #14]
 8008290:	021b      	lsls	r3, r3, #8
 8008292:	b21a      	sxth	r2, r3
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	1c59      	adds	r1, r3, #1
 8008298:	6039      	str	r1, [r7, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	b21b      	sxth	r3, r3
 800829e:	4313      	orrs	r3, r2
 80082a0:	b21b      	sxth	r3, r3
 80082a2:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 80082a4:	88fb      	ldrh	r3, [r7, #6]
 80082a6:	1e5a      	subs	r2, r3, #1
 80082a8:	80fa      	strh	r2, [r7, #6]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1ef      	bne.n	800828e <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 80082ae:	89fb      	ldrh	r3, [r7, #14]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	4603      	mov	r3, r0
 80082c4:	603a      	str	r2, [r7, #0]
 80082c6:	80fb      	strh	r3, [r7, #6]
 80082c8:	460b      	mov	r3, r1
 80082ca:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 80082d4:	88fb      	ldrh	r3, [r7, #6]
 80082d6:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 80082d8:	2300      	movs	r3, #0
 80082da:	81fb      	strh	r3, [r7, #14]
 80082dc:	e00f      	b.n	80082fe <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80082de:	88ba      	ldrh	r2, [r7, #4]
 80082e0:	89fb      	ldrh	r3, [r7, #14]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	3b01      	subs	r3, #1
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	4413      	add	r3, r2
 80082ea:	89ba      	ldrh	r2, [r7, #12]
 80082ec:	b2d2      	uxtb	r2, r2
 80082ee:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80082f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80082f4:	121b      	asrs	r3, r3, #8
 80082f6:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 80082f8:	89fb      	ldrh	r3, [r7, #14]
 80082fa:	3301      	adds	r3, #1
 80082fc:	81fb      	strh	r3, [r7, #14]
 80082fe:	89fa      	ldrh	r2, [r7, #14]
 8008300:	88bb      	ldrh	r3, [r7, #4]
 8008302:	429a      	cmp	r2, r3
 8008304:	d3eb      	bcc.n	80082de <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 8008306:	bf00      	nop
 8008308:	bf00      	nop
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	6039      	str	r1, [r7, #0]
 800831e:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 8008320:	2300      	movs	r3, #0
 8008322:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	b25b      	sxtb	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	da0e      	bge.n	800834c <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800832e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008332:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8008334:	e00a      	b.n	800834c <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8008336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800833a:	021b      	lsls	r3, r3, #8
 800833c:	b21a      	sxth	r2, r3
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	1c59      	adds	r1, r3, #1
 8008342:	6039      	str	r1, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	b21b      	sxth	r3, r3
 8008348:	4313      	orrs	r3, r2
 800834a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800834c:	88fb      	ldrh	r3, [r7, #6]
 800834e:	1e5a      	subs	r2, r3, #1
 8008350:	80fa      	strh	r2, [r7, #6]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1ef      	bne.n	8008336 <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 8008356:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008366:	b480      	push	{r7}
 8008368:	b087      	sub	sp, #28
 800836a:	af00      	add	r7, sp, #0
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	460b      	mov	r3, r1
 8008370:	607a      	str	r2, [r7, #4]
 8008372:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 8008374:	2300      	movs	r3, #0
 8008376:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 8008378:	2300      	movs	r3, #0
 800837a:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 8008380:	2300      	movs	r3, #0
 8008382:	82fb      	strh	r3, [r7, #22]
 8008384:	e00e      	b.n	80083a4 <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008386:	897a      	ldrh	r2, [r7, #10]
 8008388:	8afb      	ldrh	r3, [r7, #22]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	3b01      	subs	r3, #1
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	4413      	add	r3, r2
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	b2d2      	uxtb	r2, r2
 8008396:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	0a1b      	lsrs	r3, r3, #8
 800839c:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800839e:	8afb      	ldrh	r3, [r7, #22]
 80083a0:	3301      	adds	r3, #1
 80083a2:	82fb      	strh	r3, [r7, #22]
 80083a4:	8afa      	ldrh	r2, [r7, #22]
 80083a6:	897b      	ldrh	r3, [r7, #10]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d3ec      	bcc.n	8008386 <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 80083ac:	bf00      	nop
 80083ae:	bf00      	nop
 80083b0:	371c      	adds	r7, #28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b085      	sub	sp, #20
 80083be:	af00      	add	r7, sp, #0
 80083c0:	4603      	mov	r3, r0
 80083c2:	6039      	str	r1, [r7, #0]
 80083c4:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 80083ca:	e007      	b.n	80083dc <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	021a      	lsls	r2, r3, #8
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	1c59      	adds	r1, r3, #1
 80083d4:	6039      	str	r1, [r7, #0]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	4313      	orrs	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 80083dc:	88fb      	ldrh	r3, [r7, #6]
 80083de:	1e5a      	subs	r2, r3, #1
 80083e0:	80fa      	strh	r2, [r7, #6]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1f2      	bne.n	80083cc <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 80083e6:	68fb      	ldr	r3, [r7, #12]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	6039      	str	r1, [r7, #0]
 80083fe:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	b25b      	sxtb	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	da0b      	bge.n	8008426 <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800840e:	f04f 33ff 	mov.w	r3, #4294967295
 8008412:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8008414:	e007      	b.n	8008426 <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	021a      	lsls	r2, r3, #8
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	1c59      	adds	r1, r3, #1
 800841e:	6039      	str	r1, [r7, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	4313      	orrs	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 8008426:	88fb      	ldrh	r3, [r7, #6]
 8008428:	1e5a      	subs	r2, r3, #1
 800842a:	80fa      	strh	r2, [r7, #6]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1f2      	bne.n	8008416 <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 8008430:	68fb      	ldr	r3, [r7, #12]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <VL53LX_start_test>:


VL53LX_Error VL53LX_start_test(
	VL53LX_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	460b      	mov	r3, r1
 8008448:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800844a:	2300      	movs	r3, #0
 800844c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE) {
 800844e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d107      	bne.n	8008466 <VL53LX_start_test+0x28>
		status = VL53LX_WrByte(
 8008456:	78fb      	ldrb	r3, [r7, #3]
 8008458:	461a      	mov	r2, r3
 800845a:	2127      	movs	r1, #39	; 0x27
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f008 fc6d 	bl	8010d3c <VL53LX_WrByte>
 8008462:	4603      	mov	r3, r0
 8008464:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008466:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	460b      	mov	r3, r1
 800847c:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	3318      	adds	r3, #24
 8008486:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	78fa      	ldrb	r2, [r7, #3]
 800848c:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362

	status = VL53LX_WrByte(
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	f893 3362 	ldrb.w	r3, [r3, #866]	; 0x362
 8008496:	461a      	mov	r2, r3
 8008498:	2185      	movs	r1, #133	; 0x85
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f008 fc4e 	bl	8010d3c <VL53LX_WrByte>
 80084a0:	4603      	mov	r3, r0
 80084a2:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 80084a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 80084bc:	2101      	movs	r1, #1
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7ff ffd7 	bl	8008472 <VL53LX_set_firmware_enable_register>
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80084c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80084dc:	2300      	movs	r3, #0
 80084de:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 80084e0:	2100      	movs	r1, #0
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7ff ffc5 	bl	8008472 <VL53LX_set_firmware_enable_register>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80084ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008504:	2300      	movs	r3, #0
 8008506:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3318      	adds	r3, #24
 800850c:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	78fa      	ldrb	r2, [r7, #3]
 8008512:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360

	status = VL53LX_WrByte(
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f893 3360 	ldrb.w	r3, [r3, #864]	; 0x360
 800851c:	461a      	mov	r2, r3
 800851e:	2183      	movs	r1, #131	; 0x83
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f008 fc0b 	bl	8010d3c <VL53LX_WrByte>
 8008526:	4603      	mov	r3, r0
 8008528:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800852a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800853e:	2300      	movs	r3, #0
 8008540:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 8008542:	2101      	movs	r1, #1
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7ff ffd7 	bl	80084f8 <VL53LX_set_powerforce_register>
 800854a:	4603      	mov	r3, r0
 800854c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800854e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008562:	2300      	movs	r3, #0
 8008564:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 8008566:	2100      	movs	r1, #0
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff ffc5 	bl	80084f8 <VL53LX_set_powerforce_register>
 800856e:	4603      	mov	r3, r0
 8008570:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008572:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <VL53LX_clear_interrupt>:


VL53LX_Error VL53LX_clear_interrupt(
	VL53LX_DEV    Dev)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b084      	sub	sp, #16
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008586:	2300      	movs	r3, #0
 8008588:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	3318      	adds	r3, #24
 800858e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53LX_CLEAR_RANGE_INT;
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363

	status = VL53LX_WrByte(
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800859e:	461a      	mov	r2, r3
 80085a0:	2186      	movs	r1, #134	; 0x86
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f008 fbca 	bl	8010d3c <VL53LX_WrByte>
 80085a8:	4603      	mov	r3, r0
 80085aa:	73fb      	strb	r3, [r7, #15]
				VL53LX_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 80085ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	4603      	mov	r3, r0
 80085c0:	460a      	mov	r2, r1
 80085c2:	80fb      	strh	r3, [r7, #6]
 80085c4:	4613      	mov	r3, r2
 80085c6:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 80085c8:	2300      	movs	r3, #0
 80085ca:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 80085cc:	2300      	movs	r3, #0
 80085ce:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 80085d4:	88fb      	ldrh	r3, [r7, #6]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f002 fe9b 	bl	800b312 <VL53LX_calc_pll_period_us>
 80085dc:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 80085de:	797b      	ldrb	r3, [r7, #5]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f003 fa69 	bl	800bab8 <VL53LX_decode_vcsel_period>
 80085e6:	4603      	mov	r3, r0
 80085e8:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	4613      	mov	r3, r2
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	4413      	add	r3, r2
 80085f2:	021b      	lsls	r3, r3, #8
 80085f4:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	099b      	lsrs	r3, r3, #6
 80085fa:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 80085fc:	7cfa      	ldrb	r2, [r7, #19]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	fb02 f303 	mul.w	r3, r2, r3
 8008604:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	099b      	lsrs	r3, r3, #6
 800860a:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800860c:	68fb      	ldr	r3, [r7, #12]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
	...

08008618 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8008618:	b480      	push	{r7}
 800861a:	b089      	sub	sp, #36	; 0x24
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	4608      	mov	r0, r1
 8008622:	4611      	mov	r1, r2
 8008624:	461a      	mov	r2, r3
 8008626:	4603      	mov	r3, r0
 8008628:	817b      	strh	r3, [r7, #10]
 800862a:	460b      	mov	r3, r1
 800862c:	813b      	strh	r3, [r7, #8]
 800862e:	4613      	mov	r3, r2
 8008630:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 8008632:	2300      	movs	r3, #0
 8008634:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8008636:	2300      	movs	r3, #0
 8008638:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	011b      	lsls	r3, r3, #4
 800864a:	4a23      	ldr	r2, [pc, #140]	; (80086d8 <VL53LX_calc_range_ignore_threshold+0xc0>)
 800864c:	fb82 1203 	smull	r1, r2, r2, r3
 8008650:	1192      	asrs	r2, r2, #6
 8008652:	17db      	asrs	r3, r3, #31
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 8008658:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800865c:	2b00      	cmp	r3, #0
 800865e:	da03      	bge.n	8008668 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8008660:	897b      	ldrh	r3, [r7, #10]
 8008662:	425b      	negs	r3, r3
 8008664:	b29b      	uxth	r3, r3
 8008666:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 8008668:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800866c:	2b00      	cmp	r3, #0
 800866e:	da03      	bge.n	8008678 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8008670:	893b      	ldrh	r3, [r7, #8]
 8008672:	425b      	negs	r3, r3
 8008674:	b29b      	uxth	r3, r3
 8008676:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 8008678:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800867c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008680:	4413      	add	r3, r2
 8008682:	015b      	lsls	r3, r3, #5
 8008684:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	4a13      	ldr	r2, [pc, #76]	; (80086d8 <VL53LX_calc_range_ignore_threshold+0xc0>)
 800868a:	fb82 1203 	smull	r1, r2, r2, r3
 800868e:	1192      	asrs	r2, r2, #6
 8008690:	17db      	asrs	r3, r3, #31
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	4413      	add	r3, r2
 800869c:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800869e:	79fa      	ldrb	r2, [r7, #7]
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	fb02 f303 	mul.w	r3, r2, r3
 80086a6:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	3310      	adds	r3, #16
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	da00      	bge.n	80086b2 <VL53LX_calc_range_ignore_threshold+0x9a>
 80086b0:	331f      	adds	r3, #31
 80086b2:	115b      	asrs	r3, r3, #5
 80086b4:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086bc:	db03      	blt.n	80086c6 <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 80086be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086c2:	83fb      	strh	r3, [r7, #30]
 80086c4:	e001      	b.n	80086ca <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 80086ca:	8bfb      	ldrh	r3, [r7, #30]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3724      	adds	r7, #36	; 0x24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	10624dd3 	.word	0x10624dd3

080086dc <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 80086e6:	2300      	movs	r3, #0
 80086e8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d102      	bne.n	80086f6 <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	e008      	b.n	8008708 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	031a      	lsls	r2, r3, #12
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	085b      	lsrs	r3, r3, #1
 80086fe:	441a      	add	r2, r3
		timeout_mclks   =
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	fbb2 f3f3 	udiv	r3, r2, r3
 8008706:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8008708:	68fb      	ldr	r3, [r7, #12]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b084      	sub	sp, #16
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7ff ffd6 	bl	80086dc <VL53LX_calc_timeout_mclks>
 8008730:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 f885 	bl	8008842 <VL53LX_encode_timeout>
 8008738:	4603      	mov	r3, r0
 800873a:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800873c:	897b      	ldrh	r3, [r7, #10]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8008746:	b4f0      	push	{r4, r5, r6, r7}
 8008748:	b086      	sub	sp, #24
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 8008754:	f04f 0200 	mov.w	r2, #0
 8008758:	f04f 0300 	mov.w	r3, #0
 800875c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4618      	mov	r0, r3
 8008764:	f04f 0100 	mov.w	r1, #0
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	f04f 0300 	mov.w	r3, #0
 8008770:	fb02 fc01 	mul.w	ip, r2, r1
 8008774:	fb00 f603 	mul.w	r6, r0, r3
 8008778:	4466      	add	r6, ip
 800877a:	fba0 2302 	umull	r2, r3, r0, r2
 800877e:	18f1      	adds	r1, r6, r3
 8008780:	460b      	mov	r3, r1
 8008782:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008786:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800878a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800878e:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 8008792:	f143 0500 	adc.w	r5, r3, #0
 8008796:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 800879a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800879e:	f04f 0200 	mov.w	r2, #0
 80087a2:	f04f 0300 	mov.w	r3, #0
 80087a6:	0b02      	lsrs	r2, r0, #12
 80087a8:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80087ac:	0b0b      	lsrs	r3, r1, #12
 80087ae:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 80087b6:	697b      	ldr	r3, [r7, #20]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bcf0      	pop	{r4, r5, r6, r7}
 80087c0:	4770      	bx	lr
	...

080087c4 <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 80087d0:	2300      	movs	r3, #0
 80087d2:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 80087d8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 80087dc:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 80087de:	4413      	add	r3, r2
 80087e0:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	da02      	bge.n	80087ee <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	e005      	b.n	80087fa <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087f4:	db01      	blt.n	80087fa <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 80087f6:	4b05      	ldr	r3, [pc, #20]	; (800880c <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 80087f8:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 80087fe:	68bb      	ldr	r3, [r7, #8]

}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	0003ffff 	.word	0x0003ffff

08008810 <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	6039      	str	r1, [r7, #0]
 800881a:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8008820:	2300      	movs	r3, #0
 8008822:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 8008824:	88fb      	ldrh	r3, [r7, #6]
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f837 	bl	800889a <VL53LX_decode_timeout>
 800882c:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f7ff ff88 	bl	8008746 <VL53LX_calc_timeout_us>
 8008836:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8008838:	68bb      	ldr	r3, [r7, #8]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 8008842:	b480      	push	{r7}
 8008844:	b087      	sub	sp, #28
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800884a:	2300      	movs	r3, #0
 800884c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d017      	beq.n	800888c <VL53LX_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3b01      	subs	r3, #1
 8008860:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008862:	e005      	b.n	8008870 <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	085b      	lsrs	r3, r3, #1
 8008868:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800886a:	89fb      	ldrh	r3, [r7, #14]
 800886c:	3301      	adds	r3, #1
 800886e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1f4      	bne.n	8008864 <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800887a:	89fb      	ldrh	r3, [r7, #14]
 800887c:	021b      	lsls	r3, r3, #8
 800887e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	b29b      	uxth	r3, r3
 8008884:	b2db      	uxtb	r3, r3
 8008886:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008888:	4413      	add	r3, r2
 800888a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800888c:	8afb      	ldrh	r3, [r7, #22]
}
 800888e:	4618      	mov	r0, r3
 8008890:	371c      	adds	r7, #28
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 800889a:	b480      	push	{r7}
 800889c:	b085      	sub	sp, #20
 800889e:	af00      	add	r7, sp, #0
 80088a0:	4603      	mov	r3, r0
 80088a2:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80088a8:	88fb      	ldrh	r3, [r7, #6]
 80088aa:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80088ac:	88fa      	ldrh	r2, [r7, #6]
 80088ae:	0a12      	lsrs	r2, r2, #8
 80088b0:	b292      	uxth	r2, r2
 80088b2:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80088b4:	3301      	adds	r3, #1
 80088b6:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80088b8:	68fb      	ldr	r3, [r7, #12]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3714      	adds	r7, #20
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b088      	sub	sp, #32
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	60b9      	str	r1, [r7, #8]
 80088d0:	607a      	str	r2, [r7, #4]
 80088d2:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80088d4:	2300      	movs	r3, #0
 80088d6:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 80088dc:	2300      	movs	r3, #0
 80088de:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 80088e4:	887b      	ldrh	r3, [r7, #2]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d102      	bne.n	80088f0 <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80088ea:	23f1      	movs	r3, #241	; 0xf1
 80088ec:	77fb      	strb	r3, [r7, #31]
 80088ee:	e05d      	b.n	80089ac <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 80088f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f2:	799a      	ldrb	r2, [r3, #6]
 80088f4:	887b      	ldrh	r3, [r7, #2]
 80088f6:	4611      	mov	r1, r2
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7ff fe5d 	bl	80085b8 <VL53LX_calc_macro_period_us>
 80088fe:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 8008900:	6979      	ldr	r1, [r7, #20]
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7ff feea 	bl	80086dc <VL53LX_calc_timeout_mclks>
 8008908:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	2bff      	cmp	r3, #255	; 0xff
 800890e:	d901      	bls.n	8008914 <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8008910:	23ff      	movs	r3, #255	; 0xff
 8008912:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 800891c:	6979      	ldr	r1, [r7, #20]
 800891e:	68b8      	ldr	r0, [r7, #8]
 8008920:	f7ff fef9 	bl	8008716 <VL53LX_calc_encoded_timeout>
 8008924:	4603      	mov	r3, r0
 8008926:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008928:	8a7b      	ldrh	r3, [r7, #18]
 800892a:	0a1b      	lsrs	r3, r3, #8
 800892c:	b29b      	uxth	r3, r3
 800892e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8008930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008932:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008934:	8a7b      	ldrh	r3, [r7, #18]
 8008936:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8008938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893a:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 800893c:	6979      	ldr	r1, [r7, #20]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7ff fee9 	bl	8008716 <VL53LX_calc_encoded_timeout>
 8008944:	4603      	mov	r3, r0
 8008946:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008948:	8a7b      	ldrh	r3, [r7, #18]
 800894a:	0a1b      	lsrs	r3, r3, #8
 800894c:	b29b      	uxth	r3, r3
 800894e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008954:	8a7b      	ldrh	r3, [r7, #18]
 8008956:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8008958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895a:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895e:	7a5a      	ldrb	r2, [r3, #9]
 8008960:	887b      	ldrh	r3, [r7, #2]
 8008962:	4611      	mov	r1, r2
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff fe27 	bl	80085b8 <VL53LX_calc_macro_period_us>
 800896a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 800896c:	6979      	ldr	r1, [r7, #20]
 800896e:	68b8      	ldr	r0, [r7, #8]
 8008970:	f7ff fed1 	bl	8008716 <VL53LX_calc_encoded_timeout>
 8008974:	4603      	mov	r3, r0
 8008976:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008978:	8a7b      	ldrh	r3, [r7, #18]
 800897a:	0a1b      	lsrs	r3, r3, #8
 800897c:	b29b      	uxth	r3, r3
 800897e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8008980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008982:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008984:	8a7b      	ldrh	r3, [r7, #18]
 8008986:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8008988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898a:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 800898c:	6979      	ldr	r1, [r7, #20]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7ff fec1 	bl	8008716 <VL53LX_calc_encoded_timeout>
 8008994:	4603      	mov	r3, r0
 8008996:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008998:	8a7b      	ldrh	r3, [r7, #18]
 800899a:	0a1b      	lsrs	r3, r3, #8
 800899c:	b29b      	uxth	r3, r3
 800899e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 80089a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80089a4:	8a7b      	ldrh	r3, [r7, #18]
 80089a6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 80089a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089aa:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 80089ac:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3720      	adds	r7, #32
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	b08b      	sub	sp, #44	; 0x2c
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80089c4:	2100      	movs	r1, #0
 80089c6:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27

	int64_t  evts              = 0;
 80089ca:	f04f 0000 	mov.w	r0, #0
 80089ce:	f04f 0100 	mov.w	r1, #0
 80089d2:	e9c7 0106 	strd	r0, r1, [r7, #24]
	int64_t  tmpi              = 0;
 80089d6:	f04f 0000 	mov.w	r0, #0
 80089da:	f04f 0100 	mov.w	r1, #0
 80089de:	e9c7 0104 	strd	r0, r1, [r7, #16]
	int64_t  tmpo              = 0;
 80089e2:	f04f 0000 	mov.w	r0, #0
 80089e6:	f04f 0100 	mov.w	r1, #0
 80089ea:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	8849      	ldrh	r1, [r1, #2]
 80089f2:	2900      	cmp	r1, #0
 80089f4:	d103      	bne.n	80089fe <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80089f6:	23f1      	movs	r3, #241	; 0xf1
 80089f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80089fc:	e0a5      	b.n	8008b4a <VL53LX_hist_copy_and_scale_ambient_info+0x192>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 80089fe:	6879      	ldr	r1, [r7, #4]
 8008a00:	7849      	ldrb	r1, [r1, #1]
 8008a02:	2900      	cmp	r1, #0
 8008a04:	f000 80a1 	beq.w	8008b4a <VL53LX_hist_copy_and_scale_ambient_info+0x192>
			podata->number_of_ambient_bins == 0) {
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	7ac9      	ldrb	r1, [r1, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 8008a0c:	2900      	cmp	r1, #0
 8008a0e:	f040 809c 	bne.w	8008b4a <VL53LX_hist_copy_and_scale_ambient_info+0x192>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	f8d1 1088 	ldr.w	r1, [r1, #136]	; 0x88
 8008a18:	4608      	mov	r0, r1
 8008a1a:	f04f 0100 	mov.w	r1, #0
 8008a1e:	f110 0a01 	adds.w	sl, r0, #1
 8008a22:	f141 0b00 	adc.w	fp, r1, #0
 8008a26:	e9c7 ab02 	strd	sl, fp, [r7, #8]
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
 8008a30:	b288      	uxth	r0, r1
 8008a32:	f04f 0100 	mov.w	r1, #0
			tmpo   *=
 8008a36:	68fe      	ldr	r6, [r7, #12]
 8008a38:	fb00 fc06 	mul.w	ip, r0, r6
 8008a3c:	68be      	ldr	r6, [r7, #8]
 8008a3e:	fb01 f606 	mul.w	r6, r1, r6
 8008a42:	44b4      	add	ip, r6
 8008a44:	68be      	ldr	r6, [r7, #8]
 8008a46:	fba6 0100 	umull	r0, r1, r6, r0
 8008a4a:	eb0c 0601 	add.w	r6, ip, r1
 8008a4e:	4631      	mov	r1, r6
 8008a50:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8008a54:	e9c7 0102 	strd	r0, r1, [r7, #8]

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8008a58:	6879      	ldr	r1, [r7, #4]
 8008a5a:	6889      	ldr	r1, [r1, #8]
 8008a5c:	4608      	mov	r0, r1
 8008a5e:	f04f 0100 	mov.w	r1, #0
 8008a62:	1c44      	adds	r4, r0, #1
 8008a64:	f141 0500 	adc.w	r5, r1, #0
 8008a68:	e9c7 4504 	strd	r4, r5, [r7, #16]
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 8008a6c:	6879      	ldr	r1, [r7, #4]
 8008a6e:	8849      	ldrh	r1, [r1, #2]
 8008a70:	b288      	uxth	r0, r1
 8008a72:	f04f 0100 	mov.w	r1, #0
			tmpi   *=
 8008a76:	697c      	ldr	r4, [r7, #20]
 8008a78:	fb00 f504 	mul.w	r5, r0, r4
 8008a7c:	693c      	ldr	r4, [r7, #16]
 8008a7e:	fb01 f404 	mul.w	r4, r1, r4
 8008a82:	442c      	add	r4, r5
 8008a84:	693d      	ldr	r5, [r7, #16]
 8008a86:	fba5 0100 	umull	r0, r1, r5, r0
 8008a8a:	440c      	add	r4, r1
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8008a92:	e9c7 0104 	strd	r0, r1, [r7, #16]

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8008a96:	6879      	ldr	r1, [r7, #4]
 8008a98:	68c9      	ldr	r1, [r1, #12]
 8008a9a:	4608      	mov	r0, r1
 8008a9c:	ea4f 71e0 	mov.w	r1, r0, asr #31
			evts  = tmpo *
 8008aa0:	68fc      	ldr	r4, [r7, #12]
 8008aa2:	fb00 f504 	mul.w	r5, r0, r4
 8008aa6:	68bc      	ldr	r4, [r7, #8]
 8008aa8:	fb01 f404 	mul.w	r4, r1, r4
 8008aac:	442c      	add	r4, r5
 8008aae:	68bd      	ldr	r5, [r7, #8]
 8008ab0:	fba5 0100 	umull	r0, r1, r5, r0
 8008ab4:	440c      	add	r4, r1
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8008abc:	e9c7 0106 	strd	r0, r1, [r7, #24]
			evts += (tmpi/2);
 8008ac0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ac4:	0fcc      	lsrs	r4, r1, #31
 8008ac6:	f04f 0500 	mov.w	r5, #0
 8008aca:	1822      	adds	r2, r4, r0
 8008acc:	eb45 0301 	adc.w	r3, r5, r1
 8008ad0:	f04f 0000 	mov.w	r0, #0
 8008ad4:	f04f 0100 	mov.w	r1, #0
 8008ad8:	0850      	lsrs	r0, r2, #1
 8008ada:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8008ade:	1059      	asrs	r1, r3, #1
 8008ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ae4:	eb12 0800 	adds.w	r8, r2, r0
 8008ae8:	eb43 0901 	adc.w	r9, r3, r1
 8008aec:	e9c7 8906 	strd	r8, r9, [r7, #24]


			if (tmpi != 0)
 8008af0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	d009      	beq.n	8008b0c <VL53LX_hist_copy_and_scale_ambient_info+0x154>
				evts = do_division_s(evts, tmpi);
 8008af8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008afc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008b00:	f7f7 fbbe 	bl	8000280 <__aeabi_ldivmod>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	e9c7 2306 	strd	r2, r3, [r7, #24]

			podata->ambient_events_sum = (int32_t)evts;
 8008b0c:	69ba      	ldr	r2, [r7, #24]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53LX_p_028 =
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 +=
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	7852      	ldrb	r2, [r2, #1]
 8008b2a:	0852      	lsrs	r2, r2, #1
 8008b2c:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 8008b2e:	441a      	add	r2, r3
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 /=
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 8008b40:	fb93 f2f2 	sdiv	r2, r3, r2
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 8008b4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	372c      	adds	r7, #44	; 0x2c
 8008b52:	46bd      	mov	sp, r7
 8008b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b58 <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b087      	sub	sp, #28
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	3318      	adds	r3, #24
 8008b66:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	; 0x2fa
	amb_thresh_low  = 1024 *
 8008b7a:	029b      	lsls	r3, r3, #10
 8008b7c:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
	amb_thresh_high = 1024 *
 8008b84:	029b      	lsls	r3, r3, #10
 8008b86:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f040 8095 	bne.w	8008cc2 <VL53LX_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
		pdata->bin_seq[5] =
 8008b9e:	091b      	lsrs	r3, r3, #4
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
 8008bac:	f003 030f 	and.w	r3, r3, #15
 8008bb0:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
		pdata->bin_seq[3] =
 8008bbc:	091b      	lsrs	r3, r3, #4
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
 8008bca:	f003 030f 	and.w	r3, r3, #15
 8008bce:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
		pdata->bin_seq[1] =
 8008bda:	091b      	lsrs	r3, r3, #4
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
 8008be8:	f003 030f 	and.w	r3, r3, #15
 8008bec:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	da2c      	bge.n	8008c58 <VL53LX_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			pdata->bin_seq[5] =
 8008c04:	091b      	lsrs	r3, r3, #4
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			& 0x0F;
 8008c12:	f003 030f 	and.w	r3, r3, #15
 8008c16:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			pdata->bin_seq[3] =
 8008c22:	091b      	lsrs	r3, r3, #4
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			& 0x0F;
 8008c30:	f003 030f 	and.w	r3, r3, #15
 8008c34:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			pdata->bin_seq[1] =
 8008c40:	091b      	lsrs	r3, r3, #4
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			& 0x0F;
 8008c4e:	f003 030f 	and.w	r3, r3, #15
 8008c52:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	f340 80c2 	ble.w	8008dea <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			pdata->bin_seq[5] =
 8008c6c:	091b      	lsrs	r3, r3, #4
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			& 0x0F;
 8008c7a:	f003 030f 	and.w	r3, r3, #15
 8008c7e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			pdata->bin_seq[3] =
 8008c8a:	091b      	lsrs	r3, r3, #4
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			& 0x0F;
 8008c98:	f003 030f 	and.w	r3, r3, #15
 8008c9c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			pdata->bin_seq[1] =
 8008ca8:	091b      	lsrs	r3, r3, #4
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			& 0x0F;
 8008cb6:	f003 030f 	and.w	r3, r3, #15
 8008cba:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	731a      	strb	r2, [r3, #12]
 8008cc0:	e093      	b.n	8008dea <VL53LX_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	f893 32f1 	ldrb.w	r3, [r3, #753]	; 0x2f1
			& 0x0F;
 8008cc8:	f003 030f 	and.w	r3, r3, #15
 8008ccc:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
			& 0x0F;
 8008cd8:	f003 030f 	and.w	r3, r3, #15
 8008cdc:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
		pdata->bin_seq[3] =
 8008ce8:	091b      	lsrs	r3, r3, #4
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f893 32ef 	ldrb.w	r3, [r3, #751]	; 0x2ef
 8008cf6:	f003 030f 	and.w	r3, r3, #15
 8008cfa:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
		pdata->bin_seq[1] =
 8008d06:	091b      	lsrs	r3, r3, #4
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
			& 0x0F;
 8008d14:	f003 030f 	and.w	r3, r3, #15
 8008d18:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	da2c      	bge.n	8008d84 <VL53LX_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			pdata->bin_seq[5] =
 8008d30:	091b      	lsrs	r3, r3, #4
 8008d32:	b2da      	uxtb	r2, r3
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			& 0x0F;
 8008d3e:	f003 030f 	and.w	r3, r3, #15
 8008d42:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			pdata->bin_seq[3] =
 8008d4e:	091b      	lsrs	r3, r3, #4
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			& 0x0F;
 8008d5c:	f003 030f 	and.w	r3, r3, #15
 8008d60:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			pdata->bin_seq[1] =
 8008d6c:	091b      	lsrs	r3, r3, #4
 8008d6e:	b2da      	uxtb	r2, r3
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			& 0x0F;
 8008d7a:	f003 030f 	and.w	r3, r3, #15
 8008d7e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	dd2c      	ble.n	8008dea <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			pdata->bin_seq[5] =
 8008d96:	091b      	lsrs	r3, r3, #4
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			& 0x0F;
 8008da4:	f003 030f 	and.w	r3, r3, #15
 8008da8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			pdata->bin_seq[3] =
 8008db4:	091b      	lsrs	r3, r3, #4
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			& 0x0F;
 8008dc2:	f003 030f 	and.w	r3, r3, #15
 8008dc6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			pdata->bin_seq[1] =
 8008dd2:	091b      	lsrs	r3, r3, #4
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			& 0x0F;
 8008de0:	f003 030f 	and.w	r3, r3, #15
 8008de4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8008dea:	2300      	movs	r3, #0
 8008dec:	75fb      	strb	r3, [r7, #23]
 8008dee:	e007      	b.n	8008e00 <VL53LX_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 8008df0:	7dfb      	ldrb	r3, [r7, #23]
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	4413      	add	r3, r2
 8008df6:	2201      	movs	r2, #1
 8008df8:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8008dfa:	7dfb      	ldrb	r3, [r7, #23]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	75fb      	strb	r3, [r7, #23]
 8008e00:	7dfb      	ldrb	r3, [r7, #23]
 8008e02:	2b05      	cmp	r3, #5
 8008e04:	d9f4      	bls.n	8008df0 <VL53LX_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 8008e06:	bf00      	nop
 8008e08:	bf00      	nop
 8008e0a:	371c      	adds	r7, #28
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 8008e14:	b590      	push	{r4, r7, lr}
 8008e16:	b093      	sub	sp, #76	; 0x4c
 8008e18:	af04      	add	r7, sp, #16
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
 8008e20:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008e22:	2300      	movs	r3, #0
 8008e24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_LLDriverData_t *pdev =
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	3318      	adds	r3, #24
 8008e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 8008e34:	2300      	movs	r3, #0
 8008e36:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 8008e42:	2300      	movs	r3, #0
 8008e44:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8008e54:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 8008e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5a:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 8008e5e:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 8008e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e62:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 8008e66:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 8008e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6a:	f893 3236 	ldrb.w	r3, [r3, #566]	; 0x236
 8008e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 8008e72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e76:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 8008e78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008e7a:	021b      	lsls	r3, r3, #8
 8008e7c:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	785b      	ldrb	r3, [r3, #1]
 8008e82:	2b07      	cmp	r3, #7
 8008e84:	d006      	beq.n	8008e94 <VL53LX_hist_phase_consistency_check+0x80>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 8008e8a:	2b08      	cmp	r3, #8
 8008e8c:	d002      	beq.n	8008e94 <VL53LX_hist_phase_consistency_check+0x80>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 8008e8e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008e92:	e0ec      	b.n	800906e <VL53LX_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 8008e94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d102      	bne.n	8008ea0 <VL53LX_hist_phase_consistency_check+0x8c>
		return status;
 8008e9a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008e9e:	e0e6      	b.n	800906e <VL53LX_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8008ea6:	e0d9      	b.n	800905c <VL53LX_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8008ea8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008eac:	683a      	ldr	r2, [r7, #0]
 8008eae:	214c      	movs	r1, #76	; 0x4c
 8008eb0:	fb01 f303 	mul.w	r3, r1, r3
 8008eb4:	4413      	add	r3, r2
 8008eb6:	335e      	adds	r3, #94	; 0x5e
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b09      	cmp	r3, #9
 8008ebc:	d00b      	beq.n	8008ed6 <VL53LX_hist_phase_consistency_check+0xc2>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 8008ebe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	214c      	movs	r1, #76	; 0x4c
 8008ec6:	fb01 f303 	mul.w	r3, r1, r3
 8008eca:	4413      	add	r3, r2
 8008ecc:	335e      	adds	r3, #94	; 0x5e
 8008ece:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8008ed0:	2b13      	cmp	r3, #19
 8008ed2:	f040 80bd 	bne.w	8009050 <VL53LX_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	795b      	ldrb	r3, [r3, #5]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10a      	bne.n	8008ef4 <VL53LX_hist_phase_consistency_check+0xe0>
			prange_curr->VL53LX_p_003[lc].range_status =
 8008ede:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	214c      	movs	r1, #76	; 0x4c
 8008ee6:	fb01 f303 	mul.w	r3, r1, r3
 8008eea:	4413      	add	r3, r2
 8008eec:	335e      	adds	r3, #94	; 0x5e
 8008eee:	2217      	movs	r2, #23
 8008ef0:	701a      	strb	r2, [r3, #0]
 8008ef2:	e009      	b.n	8008f08 <VL53LX_hist_phase_consistency_check+0xf4>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 8008ef4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008ef8:	683a      	ldr	r2, [r7, #0]
 8008efa:	214c      	movs	r1, #76	; 0x4c
 8008efc:	fb01 f303 	mul.w	r3, r1, r3
 8008f00:	4413      	add	r3, r2
 8008f02:	335e      	adds	r3, #94	; 0x5e
 8008f04:	2207      	movs	r2, #7
 8008f06:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 8008f08:	2300      	movs	r3, #0
 8008f0a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8008f0e:	e097      	b.n	8009040 <VL53LX_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8008f10:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	214c      	movs	r1, #76	; 0x4c
 8008f18:	fb01 f303 	mul.w	r3, r1, r3
 8008f1c:	4413      	add	r3, r2
 8008f1e:	3354      	adds	r3, #84	; 0x54
 8008f20:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8008f22:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	4413      	add	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4403      	add	r3, r0
 8008f32:	3310      	adds	r3, #16
 8008f34:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8008f36:	4299      	cmp	r1, r3
 8008f38:	d915      	bls.n	8008f66 <VL53LX_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 8008f3a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008f3e:	683a      	ldr	r2, [r7, #0]
 8008f40:	214c      	movs	r1, #76	; 0x4c
 8008f42:	fb01 f303 	mul.w	r3, r1, r3
 8008f46:	4413      	add	r3, r2
 8008f48:	3354      	adds	r3, #84	; 0x54
 8008f4a:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 8008f4c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	4613      	mov	r3, r2
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	4413      	add	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4403      	add	r3, r0
 8008f5c:	3310      	adds	r3, #16
 8008f5e:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8008f60:	1acb      	subs	r3, r1, r3
 8008f62:	867b      	strh	r3, [r7, #50]	; 0x32
 8008f64:	e014      	b.n	8008f90 <VL53LX_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 8008f66:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008f6a:	6879      	ldr	r1, [r7, #4]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	005b      	lsls	r3, r3, #1
 8008f70:	4413      	add	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	440b      	add	r3, r1
 8008f76:	3310      	adds	r3, #16
 8008f78:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 8008f7a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	204c      	movs	r0, #76	; 0x4c
 8008f82:	fb00 f303 	mul.w	r3, r0, r3
 8008f86:	440b      	add	r3, r1
 8008f88:	3354      	adds	r3, #84	; 0x54
 8008f8a:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 8008f90:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008f92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d24e      	bcs.n	8009036 <VL53LX_hist_phase_consistency_check+0x222>





				if (status == VL53LX_ERROR_NONE)
 8008f98:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d125      	bne.n	8008fec <VL53LX_hist_phase_consistency_check+0x1d8>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 8008fa0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53LX_hist_events_consistency_check(
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	005b      	lsls	r3, r3, #1
 8008fa8:	4413      	add	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	3308      	adds	r3, #8
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 8008fb2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_events_consistency_check(
 8008fb6:	224c      	movs	r2, #76	; 0x4c
 8008fb8:	fb02 f303 	mul.w	r3, r2, r3
 8008fbc:	3310      	adds	r3, #16
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8008fc6:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 8008fca:	f107 0217 	add.w	r2, r7, #23
 8008fce:	9203      	str	r2, [sp, #12]
 8008fd0:	f107 021c 	add.w	r2, r7, #28
 8008fd4:	9202      	str	r2, [sp, #8]
 8008fd6:	f107 0218 	add.w	r2, r7, #24
 8008fda:	9201      	str	r2, [sp, #4]
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	4623      	mov	r3, r4
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	f000 f848 	bl	8009076 <VL53LX_hist_events_consistency_check>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 8008fec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d115      	bne.n	8009020 <VL53LX_hist_phase_consistency_check+0x20c>
					range_status ==
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 8008ff6:	2b09      	cmp	r3, #9
 8008ff8:	d112      	bne.n	8009020 <VL53LX_hist_phase_consistency_check+0x20c>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 8008ffa:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 8008ffe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_merged_pulse_check(
 8009002:	224c      	movs	r2, #76	; 0x4c
 8009004:	fb02 f303 	mul.w	r3, r2, r3
 8009008:	3310      	adds	r3, #16
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	4413      	add	r3, r2
 800900e:	3304      	adds	r3, #4
 8009010:	f107 0217 	add.w	r2, r7, #23
 8009014:	4619      	mov	r1, r3
 8009016:	f000 faaf 	bl	8009578 <VL53LX_hist_merged_pulse_check>
 800901a:	4603      	mov	r3, r0
 800901c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 8009020:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009024:	7df8      	ldrb	r0, [r7, #23]
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	214c      	movs	r1, #76	; 0x4c
 800902a:	fb01 f303 	mul.w	r3, r1, r3
 800902e:	4413      	add	r3, r2
 8009030:	335e      	adds	r3, #94	; 0x5e
 8009032:	4602      	mov	r2, r0
 8009034:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 8009036:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800903a:	3301      	adds	r3, #1
 800903c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	795b      	ldrb	r3, [r3, #5]
 8009044:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009048:	429a      	cmp	r2, r3
 800904a:	f4ff af61 	bcc.w	8008f10 <VL53LX_hist_phase_consistency_check+0xfc>
 800904e:	e000      	b.n	8009052 <VL53LX_hist_phase_consistency_check+0x23e>
			continue;
 8009050:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8009052:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009056:	3301      	adds	r3, #1
 8009058:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	7c9b      	ldrb	r3, [r3, #18]
 8009060:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8009064:	429a      	cmp	r2, r3
 8009066:	f4ff af1f 	bcc.w	8008ea8 <VL53LX_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800906a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800906e:	4618      	mov	r0, r3
 8009070:	373c      	adds	r7, #60	; 0x3c
 8009072:	46bd      	mov	sp, r7
 8009074:	bd90      	pop	{r4, r7, pc}

08009076 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 8009076:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800907a:	b0a8      	sub	sp, #160	; 0xa0
 800907c:	af00      	add	r7, sp, #0
 800907e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009080:	647b      	str	r3, [r7, #68]	; 0x44
 8009082:	4603      	mov	r3, r0
 8009084:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009088:	460b      	mov	r3, r1
 800908a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800908e:	2300      	movs	r3, #0
 8009090:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	int64_t   tmpp                   = 0;
 8009094:	f04f 0200 	mov.w	r2, #0
 8009098:	f04f 0300 	mov.w	r3, #0
 800909c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	int64_t   tmpc                   = 0;
 80090a0:	f04f 0200 	mov.w	r2, #0
 80090a4:	f04f 0300 	mov.w	r3, #0
 80090a8:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	int64_t   events_scaler          = 0;
 80090ac:	f04f 0200 	mov.w	r2, #0
 80090b0:	f04f 0300 	mov.w	r3, #0
 80090b4:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	int64_t   events_scaler_sq       = 0;
 80090b8:	f04f 0200 	mov.w	r2, #0
 80090bc:	f04f 0300 	mov.w	r3, #0
 80090c0:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t   c_signal_events        = 0;
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	f04f 0300 	mov.w	r3, #0
 80090cc:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	int64_t   c_sig_noise_sq         = 0;
 80090d0:	f04f 0200 	mov.w	r2, #0
 80090d4:	f04f 0300 	mov.w	r3, #0
 80090d8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t   c_amb_noise_sq         = 0;
 80090dc:	f04f 0200 	mov.w	r2, #0
 80090e0:	f04f 0300 	mov.w	r3, #0
 80090e4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t   p_amb_noise_sq         = 0;
 80090e8:	f04f 0200 	mov.w	r2, #0
 80090ec:	f04f 0300 	mov.w	r3, #0
 80090f0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	int32_t   p_signal_events        = 0;
 80090f4:	2300      	movs	r3, #0
 80090f6:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t  noise_sq_sum           = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	653b      	str	r3, [r7, #80]	; 0x50



	if (event_sigma == 0) {
 80090fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009100:	2b00      	cmp	r3, #0
 8009102:	d106      	bne.n	8009112 <VL53LX_hist_events_consistency_check+0x9c>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8009104:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009108:	2209      	movs	r2, #9
 800910a:	701a      	strb	r2, [r3, #0]
		return status;
 800910c:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8009110:	e22d      	b.n	800956e <VL53LX_hist_events_consistency_check+0x4f8>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 8009112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	461a      	mov	r2, r3
 8009118:	f04f 0300 	mov.w	r3, #0
 800911c:	f112 0801 	adds.w	r8, r2, #1
 8009120:	f143 0900 	adc.w	r9, r3, #0
 8009124:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 8009128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800912a:	885b      	ldrh	r3, [r3, #2]
 800912c:	b29a      	uxth	r2, r3
 800912e:	f04f 0300 	mov.w	r3, #0
 8009132:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8009136:	fb02 f001 	mul.w	r0, r2, r1
 800913a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800913e:	fb03 f101 	mul.w	r1, r3, r1
 8009142:	4408      	add	r0, r1
 8009144:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8009148:	fba1 2302 	umull	r2, r3, r1, r2
 800914c:	18c1      	adds	r1, r0, r3
 800914e:	460b      	mov	r3, r1
 8009150:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8009154:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 8009158:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	461a      	mov	r2, r3
 8009160:	f04f 0300 	mov.w	r3, #0
 8009164:	f112 0a01 	adds.w	sl, r2, #1
 8009168:	f143 0b00 	adc.w	fp, r3, #0
 800916c:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 8009170:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009174:	8adb      	ldrh	r3, [r3, #22]
 8009176:	b29a      	uxth	r2, r3
 8009178:	f04f 0300 	mov.w	r3, #0
 800917c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009180:	fb02 f001 	mul.w	r0, r2, r1
 8009184:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009188:	fb03 f101 	mul.w	r1, r3, r1
 800918c:	4408      	add	r0, r1
 800918e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009192:	fba1 2302 	umull	r2, r3, r1, r2
 8009196:	18c1      	adds	r1, r0, r3
 8009198:	460b      	mov	r3, r1
 800919a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 800919e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80



	events_scaler  = tmpp * 4096;
 80091a2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80091a6:	f04f 0000 	mov.w	r0, #0
 80091aa:	f04f 0100 	mov.w	r1, #0
 80091ae:	0319      	lsls	r1, r3, #12
 80091b0:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 80091b4:	0310      	lsls	r0, r2, #12
 80091b6:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
	if (tmpc != 0) {
 80091ba:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80091be:	4313      	orrs	r3, r2
 80091c0:	d026      	beq.n	8009210 <VL53LX_hist_events_consistency_check+0x19a>
		events_scaler += (tmpc/2);
 80091c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80091c6:	0fcb      	lsrs	r3, r1, #31
 80091c8:	461a      	mov	r2, r3
 80091ca:	f04f 0300 	mov.w	r3, #0
 80091ce:	1814      	adds	r4, r2, r0
 80091d0:	eb43 0501 	adc.w	r5, r3, r1
 80091d4:	f04f 0200 	mov.w	r2, #0
 80091d8:	f04f 0300 	mov.w	r3, #0
 80091dc:	0862      	lsrs	r2, r4, #1
 80091de:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 80091e2:	106b      	asrs	r3, r5, #1
 80091e4:	4610      	mov	r0, r2
 80091e6:	4619      	mov	r1, r3
 80091e8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80091ec:	1814      	adds	r4, r2, r0
 80091ee:	63bc      	str	r4, [r7, #56]	; 0x38
 80091f0:	414b      	adcs	r3, r1
 80091f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091f4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80091f8:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		events_scaler  = do_division_s(events_scaler, tmpc);
 80091fc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009200:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009204:	f7f7 f83c 	bl	8000280 <__aeabi_ldivmod>
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	}

	events_scaler_sq  = events_scaler * events_scaler;
 8009210:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009214:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009218:	fb03 f102 	mul.w	r1, r3, r2
 800921c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009224:	fb03 f302 	mul.w	r3, r3, r2
 8009228:	4419      	add	r1, r3
 800922a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800922e:	fba3 2303 	umull	r2, r3, r3, r3
 8009232:	4419      	add	r1, r3
 8009234:	460b      	mov	r3, r1
 8009236:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 800923a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	events_scaler_sq += 2048;
 800923e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009242:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009246:	6339      	str	r1, [r7, #48]	; 0x30
 8009248:	f143 0300 	adc.w	r3, r3, #0
 800924c:	637b      	str	r3, [r7, #52]	; 0x34
 800924e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8009252:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	events_scaler_sq /= 4096;
 8009256:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800925a:	4610      	mov	r0, r2
 800925c:	4619      	mov	r1, r3
 800925e:	2800      	cmp	r0, #0
 8009260:	f171 0300 	sbcs.w	r3, r1, #0
 8009264:	da06      	bge.n	8009274 <VL53LX_hist_events_consistency_check+0x1fe>
 8009266:	f640 72ff 	movw	r2, #4095	; 0xfff
 800926a:	f04f 0300 	mov.w	r3, #0
 800926e:	1880      	adds	r0, r0, r2
 8009270:	eb43 0101 	adc.w	r1, r3, r1
 8009274:	f04f 0200 	mov.w	r2, #0
 8009278:	f04f 0300 	mov.w	r3, #0
 800927c:	0b02      	lsrs	r2, r0, #12
 800927e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8009282:	130b      	asrs	r3, r1, #12
 8009284:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 8009288:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800928c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928e:	461a      	mov	r2, r3
 8009290:	f04f 0300 	mov.w	r3, #0
 8009294:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 8009298:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	4618      	mov	r0, r3
 80092a0:	f04f 0100 	mov.w	r1, #0
 80092a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80092a8:	1a14      	subs	r4, r2, r0
 80092aa:	62bc      	str	r4, [r7, #40]	; 0x28
 80092ac:	eb63 0301 	sbc.w	r3, r3, r1
 80092b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092b2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80092b6:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events *= (int64_t)events_scaler;
 80092ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092bc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80092c0:	fb02 f203 	mul.w	r2, r2, r3
 80092c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092c8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80092ca:	fb01 f303 	mul.w	r3, r1, r3
 80092ce:	18d1      	adds	r1, r2, r3
 80092d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80092d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092d6:	fba2 2303 	umull	r2, r3, r2, r3
 80092da:	4419      	add	r1, r3
 80092dc:	460b      	mov	r3, r1
 80092de:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80092e2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events += 2048;
 80092e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80092ea:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 80092ee:	6239      	str	r1, [r7, #32]
 80092f0:	f143 0300 	adc.w	r3, r3, #0
 80092f4:	627b      	str	r3, [r7, #36]	; 0x24
 80092f6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80092fa:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events /= 4096;
 80092fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009302:	2a00      	cmp	r2, #0
 8009304:	f173 0100 	sbcs.w	r1, r3, #0
 8009308:	da06      	bge.n	8009318 <VL53LX_hist_events_consistency_check+0x2a2>
 800930a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800930e:	f04f 0100 	mov.w	r1, #0
 8009312:	1812      	adds	r2, r2, r0
 8009314:	eb41 0303 	adc.w	r3, r1, r3
 8009318:	f04f 0000 	mov.w	r0, #0
 800931c:	f04f 0100 	mov.w	r1, #0
 8009320:	0b10      	lsrs	r0, r2, #12
 8009322:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009326:	1319      	asrs	r1, r3, #12
 8009328:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800932c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009330:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 8009334:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933a:	461a      	mov	r2, r3
 800933c:	f04f 0300 	mov.w	r3, #0
 8009340:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009342:	fb02 f001 	mul.w	r0, r2, r1
 8009346:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009348:	fb03 f101 	mul.w	r1, r3, r1
 800934c:	4401      	add	r1, r0
 800934e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009350:	fba0 2302 	umull	r2, r3, r0, r2
 8009354:	4419      	add	r1, r3
 8009356:	460b      	mov	r3, r1
 8009358:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 800935c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq += 2048;
 8009360:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009364:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009368:	61b9      	str	r1, [r7, #24]
 800936a:	f143 0300 	adc.w	r3, r3, #0
 800936e:	61fb      	str	r3, [r7, #28]
 8009370:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009374:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	c_sig_noise_sq /= 4096;
 8009378:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800937c:	2a00      	cmp	r2, #0
 800937e:	f173 0100 	sbcs.w	r1, r3, #0
 8009382:	da06      	bge.n	8009392 <VL53LX_hist_events_consistency_check+0x31c>
 8009384:	f640 70ff 	movw	r0, #4095	; 0xfff
 8009388:	f04f 0100 	mov.w	r1, #0
 800938c:	1812      	adds	r2, r2, r0
 800938e:	eb41 0303 	adc.w	r3, r1, r3
 8009392:	f04f 0000 	mov.w	r0, #0
 8009396:	f04f 0100 	mov.w	r1, #0
 800939a:	0b10      	lsrs	r0, r2, #12
 800939c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80093a0:	1319      	asrs	r1, r3, #12
 80093a2:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 80093a6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80093aa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 80093ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80093b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b4:	461a      	mov	r2, r3
 80093b6:	f04f 0300 	mov.w	r3, #0
 80093ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80093bc:	fb02 f001 	mul.w	r0, r2, r1
 80093c0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80093c2:	fb03 f101 	mul.w	r1, r3, r1
 80093c6:	4401      	add	r1, r0
 80093c8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80093ca:	fba0 2302 	umull	r2, r3, r0, r2
 80093ce:	4419      	add	r1, r3
 80093d0:	460b      	mov	r3, r1
 80093d2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80093d6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq += 2048;
 80093da:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80093de:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 80093e2:	6139      	str	r1, [r7, #16]
 80093e4:	f143 0300 	adc.w	r3, r3, #0
 80093e8:	617b      	str	r3, [r7, #20]
 80093ea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80093ee:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4096;
 80093f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80093f6:	2a00      	cmp	r2, #0
 80093f8:	f173 0100 	sbcs.w	r1, r3, #0
 80093fc:	da06      	bge.n	800940c <VL53LX_hist_events_consistency_check+0x396>
 80093fe:	f640 70ff 	movw	r0, #4095	; 0xfff
 8009402:	f04f 0100 	mov.w	r1, #0
 8009406:	1812      	adds	r2, r2, r0
 8009408:	eb41 0303 	adc.w	r3, r1, r3
 800940c:	f04f 0000 	mov.w	r0, #0
 8009410:	f04f 0100 	mov.w	r1, #0
 8009414:	0b10      	lsrs	r0, r2, #12
 8009416:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800941a:	1319      	asrs	r1, r3, #12
 800941c:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60


	c_amb_noise_sq += 2;
 8009420:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009424:	1c91      	adds	r1, r2, #2
 8009426:	60b9      	str	r1, [r7, #8]
 8009428:	f143 0300 	adc.w	r3, r3, #0
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009432:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4;
 8009436:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800943a:	2a00      	cmp	r2, #0
 800943c:	f173 0100 	sbcs.w	r1, r3, #0
 8009440:	da02      	bge.n	8009448 <VL53LX_hist_events_consistency_check+0x3d2>
 8009442:	3203      	adds	r2, #3
 8009444:	f143 0300 	adc.w	r3, r3, #0
 8009448:	f04f 0000 	mov.w	r0, #0
 800944c:	f04f 0100 	mov.w	r1, #0
 8009450:	0890      	lsrs	r0, r2, #2
 8009452:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8009456:	1099      	asrs	r1, r3, #2
 8009458:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 800945c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800945e:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 8009460:	461a      	mov	r2, r3
 8009462:	f04f 0300 	mov.w	r3, #0
 8009466:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	p_amb_noise_sq += 2;
 800946a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800946e:	1c91      	adds	r1, r2, #2
 8009470:	6039      	str	r1, [r7, #0]
 8009472:	f143 0300 	adc.w	r3, r3, #0
 8009476:	607b      	str	r3, [r7, #4]
 8009478:	e9d7 3400 	ldrd	r3, r4, [r7]
 800947c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	p_amb_noise_sq /= 4;
 8009480:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009484:	2a00      	cmp	r2, #0
 8009486:	f173 0100 	sbcs.w	r1, r3, #0
 800948a:	da02      	bge.n	8009492 <VL53LX_hist_events_consistency_check+0x41c>
 800948c:	3203      	adds	r2, #3
 800948e:	f143 0300 	adc.w	r3, r3, #0
 8009492:	f04f 0000 	mov.w	r0, #0
 8009496:	f04f 0100 	mov.w	r1, #0
 800949a:	0890      	lsrs	r0, r2, #2
 800949c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80094a0:	1099      	asrs	r1, r3, #2
 80094a2:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 80094a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094a8:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 80094aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
		(uint32_t)prange_prev->VL53LX_p_017 +
 80094ac:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 80094ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		(uint32_t)c_sig_noise_sq +
 80094b0:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 80094b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	noise_sq_sum =
 80094b4:	4413      	add	r3, r2
 80094b6:	653b      	str	r3, [r7, #80]	; 0x50

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 80094b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ba:	011b      	lsls	r3, r3, #4
 80094bc:	4618      	mov	r0, r3
 80094be:	f002 f822 	bl	800b506 <VL53LX_isqrt>
 80094c2:	4603      	mov	r3, r0
 80094c4:	461a      	mov	r2, r3
	*pevents_tolerance =
 80094c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094ca:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 80094cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80094d6:	fb02 f203 	mul.w	r2, r2, r3
 80094da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094de:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 80094e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f103 0220 	add.w	r2, r3, #32
 80094ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094ee:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 80094f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	da00      	bge.n	80094fc <VL53LX_hist_events_consistency_check+0x486>
 80094fa:	333f      	adds	r3, #63	; 0x3f
 80094fc:	119b      	asrs	r3, r3, #6
 80094fe:	461a      	mov	r2, r3
 8009500:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009504:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 8009506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	657b      	str	r3, [r7, #84]	; 0x54
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 800950c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	461a      	mov	r2, r3
 8009512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009514:	1a9b      	subs	r3, r3, r2
 8009516:	657b      	str	r3, [r7, #84]	; 0x54

	if ((int32_t)c_signal_events > p_signal_events)
 8009518:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800951a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800951c:	429a      	cmp	r2, r3
 800951e:	da06      	bge.n	800952e <VL53LX_hist_events_consistency_check+0x4b8>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 8009520:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009524:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 8009526:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800952a:	601a      	str	r2, [r3, #0]
 800952c:	e005      	b.n	800953a <VL53LX_hist_events_consistency_check+0x4c4>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800952e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009530:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009532:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 8009534:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009538:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800953a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	429a      	cmp	r2, r3
 8009548:	dd0b      	ble.n	8009562 <VL53LX_hist_events_consistency_check+0x4ec>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 800954a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800954e:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 8009550:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009554:	429a      	cmp	r2, r3
 8009556:	d204      	bcs.n	8009562 <VL53LX_hist_events_consistency_check+0x4ec>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 8009558:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800955c:	2214      	movs	r2, #20
 800955e:	701a      	strb	r2, [r3, #0]
 8009560:	e003      	b.n	800956a <VL53LX_hist_events_consistency_check+0x4f4>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8009562:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009566:	2209      	movs	r2, #9
 8009568:	701a      	strb	r2, [r3, #0]





	return status;
 800956a:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800956e:	4618      	mov	r0, r3
 8009570:	37a0      	adds	r7, #160	; 0xa0
 8009572:	46bd      	mov	sp, r7
 8009574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009578 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 8009578:	b480      	push	{r7}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	4603      	mov	r3, r0
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
 8009584:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 8009586:	2300      	movs	r3, #0
 8009588:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800958a:	2300      	movs	r3, #0
 800958c:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800959a:	429a      	cmp	r2, r3
 800959c:	dd0b      	ble.n	80095b6 <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	b29b      	uxth	r3, r3
		delta_mm =
 80095b2:	82fb      	strh	r3, [r7, #22]
 80095b4:	e00a      	b.n	80095cc <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80095bc:	b29a      	uxth	r2, r3
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	b29b      	uxth	r3, r3
		delta_mm =
 80095ca:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 80095cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	dd09      	ble.n	80095e8 <VL53LX_hist_merged_pulse_check+0x70>
 80095d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80095d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80095dc:	429a      	cmp	r2, r3
 80095de:	dd03      	ble.n	80095e8 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2216      	movs	r2, #22
 80095e4:	701a      	strb	r2, [r3, #0]
 80095e6:	e002      	b.n	80095ee <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2209      	movs	r2, #9
 80095ec:	701a      	strb	r2, [r3, #0]

	return status;
 80095ee:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	371c      	adds	r7, #28
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b08e      	sub	sp, #56	; 0x38
 8009602:	af04      	add	r7, sp, #16
 8009604:	60f8      	str	r0, [r7, #12]
 8009606:	60b9      	str	r1, [r7, #8]
 8009608:	607a      	str	r2, [r7, #4]
 800960a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800960c:	2300      	movs	r3, #0
 800960e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev =
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3318      	adds	r3, #24
 8009616:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 8009618:	2300      	movs	r3, #0
 800961a:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 8009626:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 8009628:	6a3b      	ldr	r3, [r7, #32]
 800962a:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 800962e:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8009636:	2b09      	cmp	r3, #9
 8009638:	d009      	beq.n	800964e <VL53LX_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009640:	2b13      	cmp	r3, #19
 8009642:	d004      	beq.n	800964e <VL53LX_hist_xmonitor_consistency_check+0x50>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800964a:	2b14      	cmp	r3, #20
 800964c:	d129      	bne.n	80096a2 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009654:	2b09      	cmp	r3, #9
 8009656:	d009      	beq.n	800966c <VL53LX_hist_xmonitor_consistency_check+0x6e>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800965e:	2b13      	cmp	r3, #19
 8009660:	d004      	beq.n	800966c <VL53LX_hist_xmonitor_consistency_check+0x6e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 8009668:	2b14      	cmp	r3, #20
 800966a:	d11a      	bne.n	80096a2 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	2209      	movs	r2, #9
 8009670:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	334a      	adds	r3, #74	; 0x4a
				VL53LX_hist_events_consistency_check(
 800967e:	8bb9      	ldrh	r1, [r7, #28]
 8009680:	7ff8      	ldrb	r0, [r7, #31]
 8009682:	9303      	str	r3, [sp, #12]
 8009684:	f107 0318 	add.w	r3, r7, #24
 8009688:	9302      	str	r3, [sp, #8]
 800968a:	f107 0314 	add.w	r3, r7, #20
 800968e:	9301      	str	r3, [sp, #4]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	4613      	mov	r3, r2
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	f7ff fced 	bl	8009076 <VL53LX_hist_events_consistency_check>
 800969c:	4603      	mov	r3, r0
 800969e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 80096a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3728      	adds	r7, #40	; 0x28
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b088      	sub	sp, #32
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	60f8      	str	r0, [r7, #12]
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80096ba:	2300      	movs	r3, #0
 80096bc:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d019      	beq.n	800970e <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80096e0:	4618      	mov	r0, r3
 80096e2:	f002 f877 	bl	800b7d4 <VL53LX_calc_pll_period_mm>
 80096e6:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 80096ee:	021b      	lsls	r3, r3, #8
 80096f0:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	fb02 f303 	mul.w	r3, r2, r3
 80096fa:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8009702:	0bdb      	lsrs	r3, r3, #15
 8009704:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	b21a      	sxth	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800970e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3720      	adds	r7, #32
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800971a:	b590      	push	{r4, r7, lr}
 800971c:	b08d      	sub	sp, #52	; 0x34
 800971e:	af04      	add	r7, sp, #16
 8009720:	4604      	mov	r4, r0
 8009722:	4608      	mov	r0, r1
 8009724:	4611      	mov	r1, r2
 8009726:	461a      	mov	r2, r3
 8009728:	4623      	mov	r3, r4
 800972a:	80fb      	strh	r3, [r7, #6]
 800972c:	4603      	mov	r3, r0
 800972e:	80bb      	strh	r3, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	70fb      	strb	r3, [r7, #3]
 8009734:	4613      	mov	r3, r2
 8009736:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 8009738:	2300      	movs	r3, #0
 800973a:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800973c:	2300      	movs	r3, #0
 800973e:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 8009740:	2300      	movs	r3, #0
 8009742:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 8009744:	2300      	movs	r3, #0
 8009746:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 8009748:	2300      	movs	r3, #0
 800974a:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800974c:	2300      	movs	r3, #0
 800974e:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 8009750:	2300      	movs	r3, #0
 8009752:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 8009754:	2300      	movs	r3, #0
 8009756:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 8009758:	78b9      	ldrb	r1, [r7, #2]
 800975a:	78f8      	ldrb	r0, [r7, #3]
 800975c:	f107 030c 	add.w	r3, r7, #12
 8009760:	9303      	str	r3, [sp, #12]
 8009762:	f107 030e 	add.w	r3, r7, #14
 8009766:	9302      	str	r3, [sp, #8]
 8009768:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	23ff      	movs	r3, #255	; 0xff
 8009774:	22c7      	movs	r2, #199	; 0xc7
 8009776:	f000 fa03 	bl	8009b80 <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800977a:	89fb      	ldrh	r3, [r7, #14]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d050      	beq.n	8009822 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 8009780:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 8009782:	2b00      	cmp	r3, #0
 8009784:	d04d      	beq.n	8009822 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 8009786:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800978a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800978e:	78b9      	ldrb	r1, [r7, #2]
 8009790:	78f8      	ldrb	r0, [r7, #3]
 8009792:	f107 0308 	add.w	r3, r7, #8
 8009796:	9303      	str	r3, [sp, #12]
 8009798:	f107 030a 	add.w	r3, r7, #10
 800979c:	9302      	str	r3, [sp, #8]
 800979e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80097a2:	9301      	str	r3, [sp, #4]
 80097a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	4623      	mov	r3, r4
 80097aa:	f000 f9e9 	bl	8009b80 <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 80097ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b0:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 80097b2:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 80097b4:	897b      	ldrh	r3, [r7, #10]
 80097b6:	461a      	mov	r2, r3
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	fb02 f303 	mul.w	r3, r2, r3
 80097be:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 80097c0:	89fb      	ldrh	r3, [r7, #14]
 80097c2:	461a      	mov	r2, r3
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80097ca:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 80097cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ce:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 80097d0:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 80097d2:	893b      	ldrh	r3, [r7, #8]
 80097d4:	461a      	mov	r2, r3
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	fb02 f303 	mul.w	r3, r2, r3
 80097dc:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 80097de:	89bb      	ldrh	r3, [r7, #12]
 80097e0:	461a      	mov	r2, r3
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80097e8:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 80097ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097ee:	69ba      	ldr	r2, [r7, #24]
 80097f0:	fb02 f303 	mul.w	r3, r2, r3
 80097f4:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 80097f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	fb02 f303 	mul.w	r3, r2, r3
 8009800:	69fa      	ldr	r2, [r7, #28]
 8009802:	4413      	add	r3, r2
 8009804:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8009806:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 8009808:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800980a:	4413      	add	r3, r2
 800980c:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d008      	beq.n	8009826 <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	009a      	lsls	r2, r3, #2
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	fb92 f3f3 	sdiv	r3, r2, r3
 800981e:	61fb      	str	r3, [r7, #28]
 8009820:	e002      	b.n	8009828 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 8009822:	bf00      	nop
 8009824:	e000      	b.n	8009828 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 8009826:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	b21a      	sxth	r2, r3
 800982c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800982e:	801a      	strh	r2, [r3, #0]

}
 8009830:	bf00      	nop
 8009832:	3724      	adds	r7, #36	; 0x24
 8009834:	46bd      	mov	sp, r7
 8009836:	bd90      	pop	{r4, r7, pc}

08009838 <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	60b9      	str	r1, [r7, #8]
 8009840:	607a      	str	r2, [r7, #4]
 8009842:	603b      	str	r3, [r7, #0]
 8009844:	4603      	mov	r3, r0
 8009846:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	08db      	lsrs	r3, r3, #3
 800984c:	b2da      	uxtb	r2, r3
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	f003 0307 	and.w	r3, r3, #7
 8009858:	b2da      	uxtb	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	2301      	movs	r3, #1
 8009866:	4093      	lsls	r3, r2
 8009868:	b2da      	uxtb	r2, r3
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	701a      	strb	r2, [r3, #0]

}
 800986e:	bf00      	nop
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800987a:	b480      	push	{r7}
 800987c:	b083      	sub	sp, #12
 800987e:	af00      	add	r7, sp, #0
 8009880:	4603      	mov	r3, r0
 8009882:	603a      	str	r2, [r7, #0]
 8009884:	71fb      	strb	r3, [r7, #7]
 8009886:	460b      	mov	r3, r1
 8009888:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800988a:	79fb      	ldrb	r3, [r7, #7]
 800988c:	2b07      	cmp	r3, #7
 800988e:	d90a      	bls.n	80098a6 <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8009890:	79bb      	ldrb	r3, [r7, #6]
 8009892:	00db      	lsls	r3, r3, #3
 8009894:	b2da      	uxtb	r2, r3
 8009896:	79fb      	ldrb	r3, [r7, #7]
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	b2db      	uxtb	r3, r3
 800989c:	3b71      	subs	r3, #113	; 0x71
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 80098a4:	e00a      	b.n	80098bc <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 80098a6:	79bb      	ldrb	r3, [r7, #6]
 80098a8:	f1c3 030f 	rsb	r3, r3, #15
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	00db      	lsls	r3, r3, #3
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	79fb      	ldrb	r3, [r7, #7]
 80098b4:	4413      	add	r3, r2
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	701a      	strb	r2, [r3, #0]
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	4603      	mov	r3, r0
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
 80098d4:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	091b      	lsrs	r3, r3, #4
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
 80098e2:	f003 030f 	and.w	r3, r3, #15
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	701a      	strb	r2, [r3, #0]

}
 80098ec:	bf00      	nop
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4603      	mov	r3, r0
 8009900:	603a      	str	r2, [r7, #0]
 8009902:	71fb      	strb	r3, [r7, #7]
 8009904:	460b      	mov	r3, r1
 8009906:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 8009908:	79bb      	ldrb	r3, [r7, #6]
 800990a:	011b      	lsls	r3, r3, #4
 800990c:	b2da      	uxtb	r2, r3
 800990e:	79fb      	ldrb	r3, [r7, #7]
 8009910:	4413      	add	r3, r2
 8009912:	b2da      	uxtb	r2, r3
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	701a      	strb	r2, [r3, #0]

}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	60ba      	str	r2, [r7, #8]
 800992c:	607b      	str	r3, [r7, #4]
 800992e:	4603      	mov	r3, r0
 8009930:	73fb      	strb	r3, [r7, #15]
 8009932:	460b      	mov	r3, r1
 8009934:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800993a:	2300      	movs	r3, #0
 800993c:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800993e:	2300      	movs	r3, #0
 8009940:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 8009946:	f107 0217 	add.w	r2, r7, #23
 800994a:	f107 0116 	add.w	r1, r7, #22
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	4618      	mov	r0, r3
 8009952:	f002 f9ab 	bl	800bcac <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 8009956:	f107 0214 	add.w	r2, r7, #20
 800995a:	f107 0115 	add.w	r1, r7, #21
 800995e:	7bbb      	ldrb	r3, [r7, #14]
 8009960:	4618      	mov	r0, r3
 8009962:	f7ff ffb1 	bl	80098c8 <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 8009966:	7dfb      	ldrb	r3, [r7, #23]
 8009968:	b29a      	uxth	r2, r3
 800996a:	7d7b      	ldrb	r3, [r7, #21]
 800996c:	3301      	adds	r3, #1
 800996e:	0fd9      	lsrs	r1, r3, #31
 8009970:	440b      	add	r3, r1
 8009972:	105b      	asrs	r3, r3, #1
 8009974:	425b      	negs	r3, r3
 8009976:	b29b      	uxth	r3, r3
 8009978:	4413      	add	r3, r2
 800997a:	b29b      	uxth	r3, r3
 800997c:	b21a      	sxth	r2, r3
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009988:	2b00      	cmp	r3, #0
 800998a:	da02      	bge.n	8009992 <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2200      	movs	r2, #0
 8009990:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009998:	b29a      	uxth	r2, r3
 800999a:	7d7b      	ldrb	r3, [r7, #21]
 800999c:	b29b      	uxth	r3, r3
 800999e:	4413      	add	r3, r2
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	b21a      	sxth	r2, r3
 80099a4:	6a3b      	ldr	r3, [r7, #32]
 80099a6:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099ae:	2b0f      	cmp	r3, #15
 80099b0:	dd02      	ble.n	80099b8 <VL53LX_decode_zone_limits+0x94>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	220f      	movs	r2, #15
 80099b6:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 80099b8:	7dbb      	ldrb	r3, [r7, #22]
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	7d3b      	ldrb	r3, [r7, #20]
 80099be:	3301      	adds	r3, #1
 80099c0:	0fd9      	lsrs	r1, r3, #31
 80099c2:	440b      	add	r3, r1
 80099c4:	105b      	asrs	r3, r3, #1
 80099c6:	425b      	negs	r3, r3
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	4413      	add	r3, r2
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	b21a      	sxth	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	da02      	bge.n	80099e4 <VL53LX_decode_zone_limits+0xc0>
		*py_ll = 0;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	7d3b      	ldrb	r3, [r7, #20]
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	4413      	add	r3, r2
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	b21a      	sxth	r2, r3
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 80099fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a00:	2b0f      	cmp	r3, #15
 8009a02:	dd02      	ble.n	8009a0a <VL53LX_decode_zone_limits+0xe6>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 8009a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a06:	220f      	movs	r2, #15
 8009a08:	801a      	strh	r2, [r3, #0]
}
 8009a0a:	bf00      	nop
 8009a0c:	3718      	adds	r7, #24
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 8009a12:	b480      	push	{r7}
 8009a14:	b085      	sub	sp, #20
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	4603      	mov	r3, r0
 8009a1a:	460a      	mov	r2, r1
 8009a1c:	71fb      	strb	r3, [r7, #7]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 8009a26:	79fb      	ldrb	r3, [r7, #7]
 8009a28:	f003 0303 	and.w	r3, r3, #3
 8009a2c:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 8009a2e:	79bb      	ldrb	r3, [r7, #6]
 8009a30:	f003 0303 	and.w	r3, r3, #3
 8009a34:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d104      	bne.n	8009a46 <VL53LX_is_aperture_location+0x34>
 8009a3c:	7b7b      	ldrb	r3, [r7, #13]
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d101      	bne.n	8009a46 <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 8009a42:	2301      	movs	r3, #1
 8009a44:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 8009a46:	7bbb      	ldrb	r3, [r7, #14]
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d104      	bne.n	8009a56 <VL53LX_is_aperture_location+0x44>
 8009a4c:	7b7b      	ldrb	r3, [r7, #13]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d101      	bne.n	8009a56 <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 8009a52:	2301      	movs	r3, #1
 8009a54:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 8009a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3714      	adds	r7, #20
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 8009a64:	b590      	push	{r4, r7, lr}
 8009a66:	b08b      	sub	sp, #44	; 0x2c
 8009a68:	af02      	add	r7, sp, #8
 8009a6a:	603a      	str	r2, [r7, #0]
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	4603      	mov	r3, r0
 8009a70:	71fb      	strb	r3, [r7, #7]
 8009a72:	460b      	mov	r3, r1
 8009a74:	71bb      	strb	r3, [r7, #6]
 8009a76:	4613      	mov	r3, r2
 8009a78:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 8009a86:	2300      	movs	r3, #0
 8009a88:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 8009a92:	2300      	movs	r3, #0
 8009a94:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 8009aa6:	f107 0416 	add.w	r4, r7, #22
 8009aaa:	f107 0218 	add.w	r2, r7, #24
 8009aae:	79b9      	ldrb	r1, [r7, #6]
 8009ab0:	79f8      	ldrb	r0, [r7, #7]
 8009ab2:	f107 0312 	add.w	r3, r7, #18
 8009ab6:	9301      	str	r3, [sp, #4]
 8009ab8:	f107 0314 	add.w	r3, r7, #20
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	4623      	mov	r3, r4
 8009ac0:	f7ff ff30 	bl	8009924 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009aca:	8afb      	ldrh	r3, [r7, #22]
 8009acc:	83bb      	strh	r3, [r7, #28]
 8009ace:	e04c      	b.n	8009b6a <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009ad0:	8b3b      	ldrh	r3, [r7, #24]
 8009ad2:	83fb      	strh	r3, [r7, #30]
 8009ad4:	e03d      	b.n	8009b52 <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 8009ad6:	8bbb      	ldrh	r3, [r7, #28]
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	8bfa      	ldrh	r2, [r7, #30]
 8009adc:	b2d1      	uxtb	r1, r2
 8009ade:	f107 0211 	add.w	r2, r7, #17
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7ff fec9 	bl	800987a <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009ae8:	7c78      	ldrb	r0, [r7, #17]
 8009aea:	f107 030e 	add.w	r3, r7, #14
 8009aee:	f107 020f 	add.w	r2, r7, #15
 8009af2:	f107 0110 	add.w	r1, r7, #16
 8009af6:	f7ff fe9f 	bl	8009838 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009afa:	7c3b      	ldrb	r3, [r7, #16]
 8009afc:	461a      	mov	r2, r3
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	4413      	add	r3, r2
 8009b02:	781a      	ldrb	r2, [r3, #0]
 8009b04:	7bbb      	ldrb	r3, [r7, #14]
 8009b06:	4013      	ands	r3, r2
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d01b      	beq.n	8009b46 <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 8009b0e:	8bbb      	ldrh	r3, [r7, #28]
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	8bfa      	ldrh	r2, [r7, #30]
 8009b14:	b2d2      	uxtb	r2, r2
 8009b16:	4611      	mov	r1, r2
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7ff ff7a 	bl	8009a12 <VL53LX_is_aperture_location>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009b22:	7efb      	ldrb	r3, [r7, #27]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d007      	beq.n	8009b38 <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	881a      	ldrh	r2, [r3, #0]
 8009b2c:	88bb      	ldrh	r3, [r7, #4]
 8009b2e:	4413      	add	r3, r2
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b34:	801a      	strh	r2, [r3, #0]
 8009b36:	e006      	b.n	8009b46 <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 8009b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b44:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009b46:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	83fb      	strh	r3, [r7, #30]
 8009b52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009b56:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	ddbb      	ble.n	8009ad6 <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009b5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	3301      	adds	r3, #1
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	83bb      	strh	r3, [r7, #28]
 8009b6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b6e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	ddac      	ble.n	8009ad0 <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 8009b76:	bf00      	nop
 8009b78:	bf00      	nop
 8009b7a:	3724      	adds	r7, #36	; 0x24
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd90      	pop	{r4, r7, pc}

08009b80 <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 8009b80:	b590      	push	{r4, r7, lr}
 8009b82:	b08d      	sub	sp, #52	; 0x34
 8009b84:	af02      	add	r7, sp, #8
 8009b86:	4604      	mov	r4, r0
 8009b88:	4608      	mov	r0, r1
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	4623      	mov	r3, r4
 8009b90:	71fb      	strb	r3, [r7, #7]
 8009b92:	4603      	mov	r3, r0
 8009b94:	71bb      	strb	r3, [r7, #6]
 8009b96:	460b      	mov	r3, r1
 8009b98:	717b      	strb	r3, [r7, #5]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 8009baa:	2300      	movs	r3, #0
 8009bac:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53LX_decode_zone_limits(
 8009be0:	f107 041c 	add.w	r4, r7, #28
 8009be4:	f107 021e 	add.w	r2, r7, #30
 8009be8:	79b9      	ldrb	r1, [r7, #6]
 8009bea:	79f8      	ldrb	r0, [r7, #7]
 8009bec:	f107 0318 	add.w	r3, r7, #24
 8009bf0:	9301      	str	r3, [sp, #4]
 8009bf2:	f107 031a 	add.w	r3, r7, #26
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	4623      	mov	r3, r4
 8009bfa:	f7ff fe93 	bl	8009924 <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 8009bfe:	f107 0414 	add.w	r4, r7, #20
 8009c02:	f107 0216 	add.w	r2, r7, #22
 8009c06:	7939      	ldrb	r1, [r7, #4]
 8009c08:	7978      	ldrb	r0, [r7, #5]
 8009c0a:	f107 0310 	add.w	r3, r7, #16
 8009c0e:	9301      	str	r3, [sp, #4]
 8009c10:	f107 0312 	add.w	r3, r7, #18
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	4623      	mov	r3, r4
 8009c18:	f7ff fe84 	bl	8009924 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 8009c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c1e:	2200      	movs	r2, #0
 8009c20:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 8009c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c24:	2200      	movs	r2, #0
 8009c26:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009c28:	8abb      	ldrh	r3, [r7, #20]
 8009c2a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009c2c:	e06c      	b.n	8009d08 <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009c2e:	8afb      	ldrh	r3, [r7, #22]
 8009c30:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009c32:	e05d      	b.n	8009cf0 <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 8009c34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009c3a:	b2d1      	uxtb	r1, r2
 8009c3c:	f107 020f 	add.w	r2, r7, #15
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7ff fe1a 	bl	800987a <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009c46:	7bf8      	ldrb	r0, [r7, #15]
 8009c48:	f107 030c 	add.w	r3, r7, #12
 8009c4c:	f107 020d 	add.w	r2, r7, #13
 8009c50:	f107 010e 	add.w	r1, r7, #14
 8009c54:	f7ff fdf0 	bl	8009838 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5e:	4413      	add	r3, r2
 8009c60:	781a      	ldrb	r2, [r3, #0]
 8009c62:	7b3b      	ldrb	r3, [r7, #12]
 8009c64:	4013      	ands	r3, r2
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d03b      	beq.n	8009ce4 <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 8009c6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009c72:	b2d2      	uxtb	r2, r2
 8009c74:	4611      	mov	r1, r2
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7ff fecb 	bl	8009a12 <VL53LX_is_aperture_location>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009c82:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d002      	beq.n	8009c90 <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 8009c8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009c8c:	847b      	strh	r3, [r7, #34]	; 0x22
 8009c8e:	e002      	b.n	8009c96 <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 8009c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c94:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009c96:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009c9a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	db19      	blt.n	8009cd6 <VL53LX_calc_mm_effective_spads+0x156>
 8009ca2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009ca6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009caa:	429a      	cmp	r2, r3
 8009cac:	dc13      	bgt.n	8009cd6 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009cae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009cb2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	db0d      	blt.n	8009cd6 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009cba:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009cbe:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	dc07      	bgt.n	8009cd6 <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 8009cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cc8:	881a      	ldrh	r2, [r3, #0]
 8009cca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ccc:	4413      	add	r3, r2
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cd2:	801a      	strh	r2, [r3, #0]
 8009cd4:	e006      	b.n	8009ce4 <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 8009cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cd8:	881a      	ldrh	r2, [r3, #0]
 8009cda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009cdc:	4413      	add	r3, r2
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ce2:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009ce4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	3301      	adds	r3, #1
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009cf0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009cf4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	dd9b      	ble.n	8009c34 <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009cfc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	3301      	adds	r3, #1
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009d08:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009d0c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009d10:	429a      	cmp	r2, r3
 8009d12:	dd8c      	ble.n	8009c2e <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 8009d14:	bf00      	nop
 8009d16:	bf00      	nop
 8009d18:	372c      	adds	r7, #44	; 0x2c
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd90      	pop	{r4, r7, pc}

08009d1e <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b086      	sub	sp, #24
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	60f8      	str	r0, [r7, #12]
 8009d26:	60b9      	str	r1, [r7, #8]
 8009d28:	607a      	str	r2, [r7, #4]
 8009d2a:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7fe f835 	bl	8007da0 <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	7c9a      	ldrb	r2, [r3, #18]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	3314      	adds	r3, #20
 8009d60:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 8009d62:	2300      	movs	r3, #0
 8009d64:	75fb      	strb	r3, [r7, #23]
 8009d66:	e06b      	b.n	8009e40 <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 8009d68:	7dfb      	ldrb	r3, [r7, #23]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d034      	beq.n	8009ddc <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 8009d72:	e05f      	b.n	8009e34 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8009dac:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	8a9a      	ldrh	r2, [r3, #20]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	601a      	str	r2, [r3, #0]

			break;
 8009dda:	e02b      	b.n	8009e34 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8009e0c:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	611a      	str	r2, [r3, #16]
			break;
 8009e32:	bf00      	nop
		}

		pdata++;
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	334c      	adds	r3, #76	; 0x4c
 8009e38:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 8009e3a:	7dfb      	ldrb	r3, [r7, #23]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	75fb      	strb	r3, [r7, #23]
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	7c9b      	ldrb	r3, [r3, #18]
 8009e44:	7dfa      	ldrb	r2, [r7, #23]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d38e      	bcc.n	8009d68 <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 8009e4a:	bf00      	nop
 8009e4c:	bf00      	nop
 8009e4e:	3718      	adds	r7, #24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b089      	sub	sp, #36	; 0x24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	3318      	adds	r3, #24
 8009e64:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8009e6c:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8009e74:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009e7c:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 8009e7e:	4613      	mov	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4413      	add	r3, r2
 8009e84:	005b      	lsls	r3, r3, #1
 8009e86:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009e8a:	697a      	ldr	r2, [r7, #20]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	3302      	adds	r3, #2
 8009e90:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 8009eb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3724      	adds	r7, #36	; 0x24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b08b      	sub	sp, #44	; 0x2c
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3318      	adds	r3, #24
 8009ed8:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8009ee0:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009ee8:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ef0:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8009ef8:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 8009efa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009efe:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 8009f00:	7bfa      	ldrb	r2, [r7, #15]
 8009f02:	6939      	ldr	r1, [r7, #16]
 8009f04:	4613      	mov	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	005b      	lsls	r3, r3, #1
 8009f0c:	440b      	add	r3, r1
 8009f0e:	3306      	adds	r3, #6
 8009f10:	2200      	movs	r2, #0
 8009f12:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009f1a:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f22:	e01a      	b.n	8009f5a <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 8009f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f28:	683a      	ldr	r2, [r7, #0]
 8009f2a:	214c      	movs	r1, #76	; 0x4c
 8009f2c:	fb01 f303 	mul.w	r3, r1, r3
 8009f30:	4413      	add	r3, r2
 8009f32:	334a      	adds	r3, #74	; 0x4a
 8009f34:	881b      	ldrh	r3, [r3, #0]
 8009f36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d209      	bcs.n	8009f50 <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 8009f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	214c      	movs	r1, #76	; 0x4c
 8009f44:	fb01 f303 	mul.w	r3, r1, r3
 8009f48:	4413      	add	r3, r2
 8009f4a:	334a      	adds	r3, #74	; 0x4a
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 8009f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f54:	3301      	adds	r3, #1
 8009f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	7c9b      	ldrb	r3, [r3, #18]
 8009f5e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d3de      	bcc.n	8009f24 <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 8009f66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d103      	bne.n	8009f74 <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 8009f6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f70:	623b      	str	r3, [r7, #32]
 8009f72:	e00e      	b.n	8009f92 <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 8009f74:	89bb      	ldrh	r3, [r7, #12]
 8009f76:	039b      	lsls	r3, r3, #14
 8009f78:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 8009f7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f7c:	6a3a      	ldr	r2, [r7, #32]
 8009f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f82:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 8009f84:	6a3b      	ldr	r3, [r7, #32]
 8009f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f8a:	d302      	bcc.n	8009f92 <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 8009f8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f90:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 8009f92:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 8009f94:	6a3b      	ldr	r3, [r7, #32]
 8009f96:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 8009f98:	6939      	ldr	r1, [r7, #16]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	005b      	lsls	r3, r3, #1
 8009fa2:	440b      	add	r3, r1
 8009fa4:	3306      	adds	r3, #6
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 8009faa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	372c      	adds	r7, #44	; 0x2c
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b08a      	sub	sp, #40	; 0x28
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	3318      	adds	r3, #24
 8009fcc:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8009fce:	6a3b      	ldr	r3, [r7, #32]
 8009fd0:	332c      	adds	r3, #44	; 0x2c
 8009fd2:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 8009fd4:	6a3b      	ldr	r3, [r7, #32]
 8009fd6:	33c2      	adds	r3, #194	; 0xc2
 8009fd8:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 8009fda:	6a3b      	ldr	r3, [r7, #32]
 8009fdc:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8009fe0:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	3302      	adds	r3, #2
 8009fe6:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	785b      	ldrb	r3, [r3, #1]
 8009fec:	f003 0301 	and.w	r3, r3, #1
 8009ff0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a002:	2b01      	cmp	r3, #1
 800a004:	d11e      	bne.n	800a044 <VL53LX_multizone_hist_bins_update+0x8a>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800a006:	7bfb      	ldrb	r3, [r7, #15]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10b      	bne.n	800a024 <VL53LX_multizone_hist_bins_update+0x6a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a024:	7bfb      	ldrb	r3, [r7, #15]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d05d      	beq.n	800a0e6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	719a      	strb	r2, [r3, #6]
 800a042:	e050      	b.n	800a0e6 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a04a:	461a      	mov	r2, r3
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	4413      	add	r3, r2
 800a050:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a054:	2b02      	cmp	r3, #2
 800a056:	d11e      	bne.n	800a096 <VL53LX_multizone_hist_bins_update+0xdc>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800a058:	7bfb      	ldrb	r3, [r7, #15]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10b      	bne.n	800a076 <VL53LX_multizone_hist_bins_update+0xbc>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a076:	7bfb      	ldrb	r3, [r7, #15]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d034      	beq.n	800a0e6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	719a      	strb	r2, [r3, #6]
 800a094:	e027      	b.n	800a0e6 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a096:	6a3b      	ldr	r3, [r7, #32]
 800a098:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a09c:	461a      	mov	r2, r3
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0a6:	2b03      	cmp	r3, #3
 800a0a8:	d11d      	bne.n	800a0e6 <VL53LX_multizone_hist_bins_update+0x12c>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800a0aa:	7bfb      	ldrb	r3, [r7, #15]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10b      	bne.n	800a0c8 <VL53LX_multizone_hist_bins_update+0x10e>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00b      	beq.n	800a0e6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800a0e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d109      	bne.n	800a102 <VL53LX_multizone_hist_bins_update+0x148>
		VL53LX_copy_hist_bins_to_static_cfg(
 800a0ee:	6a3b      	ldr	r3, [r7, #32]
 800a0f0:	f203 21fe 	addw	r1, r3, #766	; 0x2fe
 800a0f4:	6a3b      	ldr	r3, [r7, #32]
 800a0f6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	6978      	ldr	r0, [r7, #20]
 800a0fe:	f7fd fa1f 	bl	8007540 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800a102:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a106:	4618      	mov	r0, r3
 800a108:	3728      	adds	r7, #40	; 0x28
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800a10e:	b480      	push	{r7}
 800a110:	b089      	sub	sp, #36	; 0x24
 800a112:	af00      	add	r7, sp, #0
 800a114:	60f8      	str	r0, [r7, #12]
 800a116:	607a      	str	r2, [r7, #4]
 800a118:	603b      	str	r3, [r7, #0]
 800a11a:	460b      	mov	r3, r1
 800a11c:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a11e:	2300      	movs	r3, #0
 800a120:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	3318      	adds	r3, #24
 800a126:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a12e:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800a130:	7dfb      	ldrb	r3, [r7, #23]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d103      	bne.n	800a13e <VL53LX_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	7afa      	ldrb	r2, [r7, #11]
 800a13a:	701a      	strb	r2, [r3, #0]
 800a13c:	e01e      	b.n	800a17c <VL53LX_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	461a      	mov	r2, r3
 800a144:	7dfb      	ldrb	r3, [r7, #23]
 800a146:	3b01      	subs	r3, #1
 800a148:	429a      	cmp	r2, r3
 800a14a:	d111      	bne.n	800a170 <VL53LX_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	2bff      	cmp	r3, #255	; 0xff
 800a152:	d103      	bne.n	800a15c <VL53LX_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2280      	movs	r2, #128	; 0x80
 800a158:	701a      	strb	r2, [r3, #0]
 800a15a:	e005      	b.n	800a168 <VL53LX_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	3301      	adds	r3, #1
 800a162:	b2da      	uxtb	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2200      	movs	r2, #0
 800a16c:	701a      	strb	r2, [r3, #0]
 800a16e:	e005      	b.n	800a17c <VL53LX_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	3301      	adds	r3, #1
 800a176:	b2da      	uxtb	r2, r3
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800a17c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3724      	adds	r7, #36	; 0x24
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <VL53LX_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08a      	sub	sp, #40	; 0x28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	607a      	str	r2, [r7, #4]
 800a196:	461a      	mov	r2, r3
 800a198:	460b      	mov	r3, r1
 800a19a:	72fb      	strb	r3, [r7, #11]
 800a19c:	4613      	mov	r3, r2
 800a19e:	813b      	strh	r3, [r7, #8]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	3318      	adds	r3, #24
 800a1aa:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53LX_calc_macro_period_us(
 800a1b4:	7afa      	ldrb	r2, [r7, #11]
 800a1b6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fe f9fc 	bl	80085b8 <VL53LX_calc_macro_period_us>
 800a1c0:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d101      	bne.n	800a1cc <VL53LX_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	623b      	str	r3, [r7, #32]


	timeout_mclks = phasecal_timeout_us << 12;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	031b      	lsls	r3, r3, #12
 800a1d0:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	085b      	lsrs	r3, r3, #1
 800a1d6:	69ba      	ldr	r2, [r7, #24]
 800a1d8:	4413      	add	r3, r2
 800a1da:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800a1dc:	69ba      	ldr	r2, [r7, #24]
 800a1de:	6a3b      	ldr	r3, [r7, #32]
 800a1e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1e4:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	2bff      	cmp	r3, #255	; 0xff
 800a1ea:	d904      	bls.n	800a1f6 <VL53LX_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	22ff      	movs	r2, #255	; 0xff
 800a1f0:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
 800a1f4:	e004      	b.n	800a200 <VL53LX_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	7afa      	ldrb	r2, [r7, #11]
 800a204:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a



	if (status == VL53LX_ERROR_NONE)
 800a208:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d10a      	bne.n	800a226 <VL53LX_set_ref_spad_char_config+0x9a>
		status =
			VL53LX_WrByte(
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
 800a216:	461a      	mov	r2, r3
 800a218:	214b      	movs	r1, #75	; 0x4b
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f006 fd8e 	bl	8010d3c <VL53LX_WrByte>
 800a220:	4603      	mov	r3, r0
 800a222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53LX_ERROR_NONE)
 800a226:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10a      	bne.n	800a244 <VL53LX_set_ref_spad_char_config+0xb8>
		status =
			VL53LX_WrByte(
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a234:	461a      	mov	r2, r3
 800a236:	2160      	movs	r1, #96	; 0x60
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f006 fd7f 	bl	8010d3c <VL53LX_WrByte>
 800a23e:	4603      	mov	r3, r0
 800a240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a24a:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a252:	757b      	strb	r3, [r7, #21]

	if (status == VL53LX_ERROR_NONE)
 800a254:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d109      	bne.n	800a270 <VL53LX_set_ref_spad_char_config+0xe4>
		status =
			VL53LX_WriteMulti(
 800a25c:	f107 0214 	add.w	r2, r7, #20
 800a260:	2302      	movs	r3, #2
 800a262:	2178      	movs	r1, #120	; 0x78
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f006 fcfd 	bl	8010c64 <VL53LX_WriteMulti>
 800a26a:	4603      	mov	r3, r0
 800a26c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	893a      	ldrh	r2, [r7, #8]
 800a274:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53LX_ERROR_NONE)
 800a278:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d108      	bne.n	800a292 <VL53LX_set_ref_spad_char_config+0x106>
		status =
			VL53LX_WrWord(
 800a280:	893b      	ldrh	r3, [r7, #8]
 800a282:	461a      	mov	r2, r3
 800a284:	211c      	movs	r1, #28
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f006 fd82 	bl	8010d90 <VL53LX_WrWord>
 800a28c:	4603      	mov	r3, r0
 800a28e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a292:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a296:	2b00      	cmp	r3, #0
 800a298:	d108      	bne.n	800a2ac <VL53LX_set_ref_spad_char_config+0x120>
		status =
			VL53LX_WrWord(
 800a29a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a29c:	461a      	mov	r2, r3
 800a29e:	2164      	movs	r1, #100	; 0x64
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f006 fd75 	bl	8010d90 <VL53LX_WrWord>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a2ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d108      	bne.n	800a2c6 <VL53LX_set_ref_spad_char_config+0x13a>
		status =
			VL53LX_WrWord(
 800a2b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	2166      	movs	r1, #102	; 0x66
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f006 fd68 	bl	8010d90 <VL53LX_WrWord>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800a2c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3728      	adds	r7, #40	; 0x28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800a2d2:	b5b0      	push	{r4, r5, r7, lr}
 800a2d4:	b090      	sub	sp, #64	; 0x40
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	3318      	adds	r3, #24
 800a2e4:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a2ec:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_smudge_corrector_config_t *pconfig =
 800a2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a2f4:	3314      	adds	r3, #20
 800a2f6:	623b      	str	r3, [r7, #32]
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800a2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fa:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a2fe:	3318      	adds	r3, #24
 800a300:	61fb      	str	r3, [r7, #28]
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800a302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a304:	61bb      	str	r3, [r7, #24]
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a30c:	617b      	str	r3, [r7, #20]

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53LX_p_016;
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800a31c:	4413      	add	r3, r2
 800a31e:	461a      	mov	r2, r3
 800a320:	f04f 0300 	mov.w	r3, #0
 800a324:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (peak_duration_us == 0)
 800a328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d102      	bne.n	800a334 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x62>
		peak_duration_us = 1000;
 800a32e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a332:	63fb      	str	r3, [r7, #60]	; 0x3c
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a334:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a338:	4602      	mov	r2, r0
 800a33a:	460b      	mov	r3, r1
 800a33c:	f04f 0400 	mov.w	r4, #0
 800a340:	f04f 0500 	mov.w	r5, #0
 800a344:	015d      	lsls	r5, r3, #5
 800a346:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a34a:	0154      	lsls	r4, r2, #5
 800a34c:	4622      	mov	r2, r4
 800a34e:	462b      	mov	r3, r5
 800a350:	1a12      	subs	r2, r2, r0
 800a352:	eb63 0301 	sbc.w	r3, r3, r1
 800a356:	f04f 0400 	mov.w	r4, #0
 800a35a:	f04f 0500 	mov.w	r5, #0
 800a35e:	009d      	lsls	r5, r3, #2
 800a360:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a364:	0094      	lsls	r4, r2, #2
 800a366:	4622      	mov	r2, r4
 800a368:	462b      	mov	r3, r5
 800a36a:	1812      	adds	r2, r2, r0
 800a36c:	eb41 0303 	adc.w	r3, r1, r3
 800a370:	f04f 0000 	mov.w	r0, #0
 800a374:	f04f 0100 	mov.w	r1, #0
 800a378:	00d9      	lsls	r1, r3, #3
 800a37a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a37e:	00d0      	lsls	r0, r2, #3
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	4610      	mov	r0, r2
 800a386:	4619      	mov	r1, r3
 800a388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a38a:	461a      	mov	r2, r3
 800a38c:	f04f 0300 	mov.w	r3, #0
 800a390:	f7f5 ffc6 	bl	8000320 <__aeabi_uldivmod>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a39c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	f04f 0400 	mov.w	r4, #0
 800a3a8:	f04f 0500 	mov.w	r5, #0
 800a3ac:	015d      	lsls	r5, r3, #5
 800a3ae:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a3b2:	0154      	lsls	r4, r2, #5
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	462b      	mov	r3, r5
 800a3b8:	1a12      	subs	r2, r2, r0
 800a3ba:	eb63 0301 	sbc.w	r3, r3, r1
 800a3be:	f04f 0400 	mov.w	r4, #0
 800a3c2:	f04f 0500 	mov.w	r5, #0
 800a3c6:	009d      	lsls	r5, r3, #2
 800a3c8:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a3cc:	0094      	lsls	r4, r2, #2
 800a3ce:	4622      	mov	r2, r4
 800a3d0:	462b      	mov	r3, r5
 800a3d2:	1812      	adds	r2, r2, r0
 800a3d4:	eb41 0303 	adc.w	r3, r1, r3
 800a3d8:	f04f 0000 	mov.w	r0, #0
 800a3dc:	f04f 0100 	mov.w	r1, #0
 800a3e0:	00d9      	lsls	r1, r3, #3
 800a3e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a3e6:	00d0      	lsls	r0, r2, #3
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	f04f 0300 	mov.w	r3, #0
 800a3f8:	f7f5 ff92 	bl	8000320 <__aeabi_uldivmod>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	460b      	mov	r3, r1
 800a400:	e9c7 2302 	strd	r2, r3, [r7, #8]

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800a404:	6a3b      	ldr	r3, [r7, #32]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	697a      	ldr	r2, [r7, #20]
 800a40a:	8ad2      	ldrh	r2, [r2, #22]
 800a40c:	fb02 f303 	mul.w	r3, r2, r3
 800a410:	461a      	mov	r2, r3
 800a412:	f04f 0300 	mov.w	r3, #0
 800a416:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (temp64z == 0)
 800a41a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a41e:	4313      	orrs	r3, r2
 800a420:	d105      	bne.n	800a42e <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x15c>
		temp64z = 1;
 800a422:	f04f 0201 	mov.w	r2, #1
 800a426:	f04f 0300 	mov.w	r3, #0
 800a42a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	temp64a = temp64a * 1000 * 256;
 800a42e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a432:	4602      	mov	r2, r0
 800a434:	460b      	mov	r3, r1
 800a436:	f04f 0400 	mov.w	r4, #0
 800a43a:	f04f 0500 	mov.w	r5, #0
 800a43e:	015d      	lsls	r5, r3, #5
 800a440:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a444:	0154      	lsls	r4, r2, #5
 800a446:	4622      	mov	r2, r4
 800a448:	462b      	mov	r3, r5
 800a44a:	1a12      	subs	r2, r2, r0
 800a44c:	eb63 0301 	sbc.w	r3, r3, r1
 800a450:	f04f 0400 	mov.w	r4, #0
 800a454:	f04f 0500 	mov.w	r5, #0
 800a458:	009d      	lsls	r5, r3, #2
 800a45a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a45e:	0094      	lsls	r4, r2, #2
 800a460:	4622      	mov	r2, r4
 800a462:	462b      	mov	r3, r5
 800a464:	1812      	adds	r2, r2, r0
 800a466:	eb41 0303 	adc.w	r3, r1, r3
 800a46a:	f04f 0000 	mov.w	r0, #0
 800a46e:	f04f 0100 	mov.w	r1, #0
 800a472:	02d9      	lsls	r1, r3, #11
 800a474:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800a478:	02d0      	lsls	r0, r2, #11
 800a47a:	4602      	mov	r2, r0
 800a47c:	460b      	mov	r3, r1
 800a47e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800a482:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a486:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a48a:	f7f5 ff49 	bl	8000320 <__aeabi_uldivmod>
 800a48e:	4602      	mov	r2, r0
 800a490:	460b      	mov	r3, r1
 800a492:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = temp64a * 1000 * 256;
 800a496:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a49a:	4602      	mov	r2, r0
 800a49c:	460b      	mov	r3, r1
 800a49e:	f04f 0400 	mov.w	r4, #0
 800a4a2:	f04f 0500 	mov.w	r5, #0
 800a4a6:	015d      	lsls	r5, r3, #5
 800a4a8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a4ac:	0154      	lsls	r4, r2, #5
 800a4ae:	4622      	mov	r2, r4
 800a4b0:	462b      	mov	r3, r5
 800a4b2:	1a12      	subs	r2, r2, r0
 800a4b4:	eb63 0301 	sbc.w	r3, r3, r1
 800a4b8:	f04f 0400 	mov.w	r4, #0
 800a4bc:	f04f 0500 	mov.w	r5, #0
 800a4c0:	009d      	lsls	r5, r3, #2
 800a4c2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a4c6:	0094      	lsls	r4, r2, #2
 800a4c8:	4622      	mov	r2, r4
 800a4ca:	462b      	mov	r3, r5
 800a4cc:	1812      	adds	r2, r2, r0
 800a4ce:	eb41 0303 	adc.w	r3, r1, r3
 800a4d2:	f04f 0000 	mov.w	r0, #0
 800a4d6:	f04f 0100 	mov.w	r1, #0
 800a4da:	02d9      	lsls	r1, r3, #11
 800a4dc:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800a4e0:	02d0      	lsls	r0, r2, #11
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800a4ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a4ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a4f2:	f7f5 ff15 	bl	8000320 <__aeabi_uldivmod>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pint->required_samples = (uint32_t)temp64a;
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d802      	bhi.n	800a512 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x240>
		pint->required_samples = 2;
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	2202      	movs	r2, #2
 800a510:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800a512:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a516:	4618      	mov	r0, r3
 800a518:	3740      	adds	r7, #64	; 0x40
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a520 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b096      	sub	sp, #88	; 0x58
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
 800a52c:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a52e:	2300      	movs	r3, #0
 800a530:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	3318      	adds	r3, #24
 800a538:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800a53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a53c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a540:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800a542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a544:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800a548:	331c      	adds	r3, #28
 800a54a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800a54c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800a550:	2b01      	cmp	r3, #1
 800a552:	d107      	bne.n	800a564 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	889b      	ldrh	r3, [r3, #4]
 800a558:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	609a      	str	r2, [r3, #8]
 800a562:	e002      	b.n	800a56a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800a570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a572:	899b      	ldrh	r3, [r3, #12]
 800a574:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800a578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57a:	89db      	ldrh	r3, [r3, #14]
 800a57c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a586:	2b00      	cmp	r3, #0
 800a588:	d004      	beq.n	800a594 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x74>
		(pconfig->scaler_calc_method == 1)) &&
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800a590:	2b01      	cmp	r3, #1
 800a592:	d126      	bne.n	800a5e2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800a594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a596:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d022      	beq.n	800a5e2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a59c:	f107 0317 	add.w	r3, r7, #23
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	68f8      	ldr	r0, [r7, #12]
 800a5a4:	f000 fe75 	bl	800b292 <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800a5a8:	7dfb      	ldrb	r3, [r7, #23]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d101      	bne.n	800a5b2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
			histo_merge_nb = 1;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800a5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b4:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d003      	beq.n	800a5c4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa4>
			orig_xtalk_offset =
 800a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	653b      	str	r3, [r7, #80]	; 0x50
 800a5c2:	e006      	b.n	800a5d2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800a5c4:	7dfb      	ldrb	r3, [r7, #23]
 800a5c6:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800a5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ca:	3202      	adds	r2, #2
 800a5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d0:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	889b      	ldrh	r3, [r3, #4]
 800a5d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800a5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5dc:	88db      	ldrh	r3, [r3, #6]
 800a5de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10a      	bne.n	800a602 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
 800a5ec:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d106      	bne.n	800a602 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
		pout->gradient_zero_flag |= 0x01;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	795b      	ldrb	r3, [r3, #5]
 800a5f8:	f043 0301 	orr.w	r3, r3, #1
 800a5fc:	b2da      	uxtb	r2, r3
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10a      	bne.n	800a622 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
 800a60c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800a610:	2b00      	cmp	r3, #0
 800a612:	d106      	bne.n	800a622 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		pout->gradient_zero_flag |= 0x02;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	795b      	ldrb	r3, [r3, #5]
 800a618:	f043 0302 	orr.w	r3, r3, #2
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800a622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a624:	2b00      	cmp	r3, #0
 800a626:	d101      	bne.n	800a62c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
		orig_xtalk_offset = 1;
 800a628:	2301      	movs	r3, #1
 800a62a:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a632:	2b01      	cmp	r3, #1
 800a634:	d108      	bne.n	800a648 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x128>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a63a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a642:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800a646:	e019      	b.n	800a67c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x15c>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800a648:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a64c:	019b      	lsls	r3, r3, #6
 800a64e:	461a      	mov	r2, r3
 800a650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a652:	fbb2 f3f3 	udiv	r3, r2, r3
 800a656:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800a660:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800a662:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800a666:	019b      	lsls	r3, r3, #6
 800a668:	461a      	mov	r2, r3
 800a66a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a66c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a670:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a67a:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a682:	2b00      	cmp	r3, #0
 800a684:	d12a      	bne.n	800a6dc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1bc>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800a68e:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a692:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a696:	119b      	asrs	r3, r3, #6
 800a698:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a69a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a69c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6a0:	db02      	blt.n	800a6a8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x188>
			itemp32 = 0xFFFF;
 800a6a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a6a6:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a6a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6aa:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800a6b8:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a6bc:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a6be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6c0:	119b      	asrs	r3, r3, #6
 800a6c2:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a6c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6ca:	db02      	blt.n	800a6d2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b2>
			itemp32 = 0xFFFF;
 800a6cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a6d0:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a6d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6d4:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	81da      	strh	r2, [r3, #14]
 800a6da:	e042      	b.n	800a762 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>
	} else if (pconfig->scaler_calc_method == 1) {
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d13d      	bne.n	800a762 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a6ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6ec:	1ad3      	subs	r3, r2, r3
 800a6ee:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800a6f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	da00      	bge.n	800a6f8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d8>
 800a6f6:	330f      	adds	r3, #15
 800a6f8:	111b      	asrs	r3, r3, #4
 800a6fa:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800a6fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800a702:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a708:	4413      	add	r3, r2
 800a70a:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a70c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a70e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a712:	db02      	blt.n	800a71a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1fa>
			itemp32 = 0xFFFF;
 800a714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a718:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a71a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a71c:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a726:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800a72c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a72e:	4a52      	ldr	r2, [pc, #328]	; (800a878 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x358>)
 800a730:	fb82 1203 	smull	r1, r2, r2, r3
 800a734:	1152      	asrs	r2, r2, #5
 800a736:	17db      	asrs	r3, r3, #31
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800a73c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800a742:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800a746:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a748:	4413      	add	r3, r2
 800a74a:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a74c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a74e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a752:	db02      	blt.n	800a75a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23a>
			itemp32 = 0xFFFF;
 800a754:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a758:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a75a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a75c:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	785b      	ldrb	r3, [r3, #1]
 800a766:	2b01      	cmp	r3, #1
 800a768:	d178      	bne.n	800a85c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
 800a76a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d074      	beq.n	800a85c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	2201      	movs	r2, #1
 800a776:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	62bb      	str	r3, [r7, #40]	; 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a77e:	f107 0317 	add.w	r3, r7, #23
 800a782:	4619      	mov	r1, r3
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f000 fd84 	bl	800b292 <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800a78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a78c:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800a790:	627b      	str	r3, [r7, #36]	; 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800a792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a794:	3308      	adds	r3, #8
 800a796:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) &&
 800a798:	7dfb      	ldrb	r3, [r7, #23]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d042      	beq.n	800a824 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800a79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7a0:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		if ((histo_merge_nb > 0) &&
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d13d      	bne.n	800a824 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800a7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d03a      	beq.n	800a824 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(nXtalk != 0)) {
			cXtalk =
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800a7b4:	6a3b      	ldr	r3, [r7, #32]
 800a7b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a7ba:	fb02 f203 	mul.w	r2, r2, r3
 800a7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7c4:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d004      	beq.n	800a7d6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b6>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800a7d0:	69fa      	ldr	r2, [r7, #28]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d303      	bcc.n	800a7de <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2be>
				pout->new_xtalk_applied_flag = 0;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	719a      	strb	r2, [r3, #6]
 800a7dc:	e022      	b.n	800a824 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			else {
				incXtalk = nXtalk / max;
 800a7de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7e6:	61bb      	str	r3, [r7, #24]
				cval = 0;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800a7f2:	e00e      	b.n	800a812 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2f2>
					cval += incXtalk;
 800a7f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800a7fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a800:	601a      	str	r2, [r3, #0]
					pcpo++;
 800a802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a804:	3304      	adds	r3, #4
 800a806:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800a808:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800a80c:	3301      	adds	r3, #1
 800a80e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800a812:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800a816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a818:	3b01      	subs	r3, #1
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d3ea      	bcc.n	800a7f4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d4>
				}
				*pcpo = nXtalk;
 800a81e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a822:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	799b      	ldrb	r3, [r3, #6]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d017      	beq.n	800a85c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800a830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a832:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83c:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a846:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	789b      	ldrb	r3, [r3, #2]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d105      	bne.n	800a85c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

			pconfig->smudge_corr_apply_enabled = 0;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800a85c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800a860:	2b01      	cmp	r3, #1
 800a862:	d002      	beq.n	800a86a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x34a>
		pout->smudge_corr_valid = 1;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	2201      	movs	r2, #1
 800a868:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a86a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3758      	adds	r7, #88	; 0x58
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	66666667 	.word	0x66666667

0800a87c <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800a87c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a880:	b09a      	sub	sp, #104	; 0x68
 800a882:	af02      	add	r7, sp, #8
 800a884:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a886:	2300      	movs	r3, #0
 800a888:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	3318      	adds	r3, #24
 800a890:	64bb      	str	r3, [r7, #72]	; 0x48
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a898:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_smudge_corrector_config_t *pconfig =
 800a89a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a89c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a8a0:	3314      	adds	r3, #20
 800a8a2:	643b      	str	r3, [r7, #64]	; 0x40
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800a8a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8a6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a8aa:	3318      	adds	r3, #24
 800a8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800a8ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8b0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a8b4:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800a8b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8b8:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800a8ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a8c0:	633b      	str	r3, [r7, #48]	; 0x30

	uint8_t	run_smudge_detection = 0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t merging_complete = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t	run_nodetect = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t ambient_check = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	int32_t itemp32 = 0;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	65bb      	str	r3, [r7, #88]	; 0x58
	uint64_t utemp64 = 0;
 800a8de:	f04f 0200 	mov.w	r2, #0
 800a8e2:	f04f 0300 	mov.w	r3, #0
 800a8e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t continue_processing = CONT_CONTINUE;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t xtalk_offset_out = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t xtalk_offset_in = 0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	61fb      	str	r3, [r7, #28]
	uint32_t current_xtalk = 0;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	61bb      	str	r3, [r7, #24]
	uint32_t smudge_margin_adjusted = 0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	617b      	str	r3, [r7, #20]
	uint8_t i = 0;
 800a900:	2300      	movs	r3, #0
 800a902:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t nodetect_index = 0;
 800a906:	2300      	movs	r3, #0
 800a908:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a90c:	f107 030b 	add.w	r3, r7, #11
 800a910:	4619      	mov	r1, r3
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fcbd 	bl	800b292 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800a918:	7afb      	ldrb	r3, [r7, #11]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d004      	beq.n	800a928 <VL53LX_dynamic_xtalk_correction_corrector+0xac>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800a91e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a920:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	if ((histo_merge_nb == 0) ||
 800a924:	2b01      	cmp	r3, #1
 800a926:	d001      	beq.n	800a92c <VL53LX_dynamic_xtalk_correction_corrector+0xb0>
		histo_merge_nb = 1;
 800a928:	2301      	movs	r3, #1
 800a92a:	72fb      	strb	r3, [r7, #11]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800a92c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a92e:	f000 faeb 	bl	800af08 <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800a932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a936:	2b00      	cmp	r3, #0
 800a938:	d009      	beq.n	800a94e <VL53LX_dynamic_xtalk_correction_corrector+0xd2>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800a93a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93e:	7afa      	ldrb	r2, [r7, #11]
 800a940:	fb02 f303 	mul.w	r3, r2, r3
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800a944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a946:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d901      	bls.n	800a952 <VL53LX_dynamic_xtalk_correction_corrector+0xd6>
 800a94e:	2301      	movs	r3, #1
 800a950:	e000      	b.n	800a954 <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
 800a952:	2300      	movs	r3, #0
 800a954:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800a958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a95a:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d105      	bne.n	800a96e <VL53LX_dynamic_xtalk_correction_corrector+0xf2>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800a962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a964:	f893 2184 	ldrb.w	r2, [r3, #388]	; 0x184
 800a968:	7afb      	ldrb	r3, [r7, #11]
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d101      	bne.n	800a972 <VL53LX_dynamic_xtalk_correction_corrector+0xf6>
 800a96e:	2301      	movs	r3, #1
 800a970:	e000      	b.n	800a974 <VL53LX_dynamic_xtalk_correction_corrector+0xf8>
 800a972:	2300      	movs	r3, #0
	merging_complete =
 800a974:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800a978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a97a:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d10e      	bne.n	800a99e <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pconfig->smudge_corr_enabled == 1) &&
 800a980:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00a      	beq.n	800a99e <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pR->xmonitor.range_status
 800a988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a98a:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800a98e:	2b09      	cmp	r3, #9
 800a990:	d105      	bne.n	800a99e <VL53LX_dynamic_xtalk_correction_corrector+0x122>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800a992:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a996:	2b00      	cmp	r3, #0
 800a998:	d001      	beq.n	800a99e <VL53LX_dynamic_xtalk_correction_corrector+0x122>
 800a99a:	2301      	movs	r3, #1
 800a99c:	e000      	b.n	800a9a0 <VL53LX_dynamic_xtalk_correction_corrector+0x124>
 800a99e:	2300      	movs	r3, #0
	run_smudge_detection =
 800a9a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		merging_complete;


	if ((pR->xmonitor.range_status
 800a9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a6:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800a9aa:	2b09      	cmp	r3, #9
 800a9ac:	f000 809e 	beq.w	800aaec <VL53LX_dynamic_xtalk_correction_corrector+0x270>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800a9b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9b2:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	f040 8099 	bne.w	800aaec <VL53LX_dynamic_xtalk_correction_corrector+0x270>

		run_nodetect = 2;
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		for (i = 0; i < pR->active_results; i++) {
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a9c6:	e02d      	b.n	800aa24 <VL53LX_dynamic_xtalk_correction_corrector+0x1a8>
			if (pR->VL53LX_p_003[i].range_status ==
 800a9c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a9cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9ce:	214c      	movs	r1, #76	; 0x4c
 800a9d0:	fb01 f303 	mul.w	r3, r1, r3
 800a9d4:	4413      	add	r3, r2
 800a9d6:	335e      	adds	r3, #94	; 0x5e
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	2b09      	cmp	r3, #9
 800a9dc:	d11d      	bne.n	800aa1a <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800a9de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a9e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9e4:	214c      	movs	r1, #76	; 0x4c
 800a9e6:	fb01 f303 	mul.w	r3, r1, r3
 800a9ea:	4413      	add	r3, r2
 800a9ec:	335a      	adds	r3, #90	; 0x5a
 800a9ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9f2:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800a9f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9f6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	dc03      	bgt.n	800aa04 <VL53LX_dynamic_xtalk_correction_corrector+0x188>
					run_nodetect = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa02:	e00a      	b.n	800aa1a <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				} else {
					if (run_nodetect == 2) {
 800aa04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d106      	bne.n	800aa1a <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
						run_nodetect = 1;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						nodetect_index = i;
 800aa12:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aa16:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		for (i = 0; i < pR->active_results; i++) {
 800aa1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aa1e:	3301      	adds	r3, #1
 800aa20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800aa24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa26:	7c9b      	ldrb	r3, [r3, #18]
 800aa28:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d3cb      	bcc.n	800a9c8 <VL53LX_dynamic_xtalk_correction_corrector+0x14c>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800aa30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d102      	bne.n	800aa3e <VL53LX_dynamic_xtalk_correction_corrector+0x1c2>

			run_nodetect = 0;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800aa3e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
		amr =
 800aa42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa44:	214c      	movs	r1, #76	; 0x4c
 800aa46:	fb01 f303 	mul.w	r3, r1, r3
 800aa4a:	4413      	add	r3, r2
 800aa4c:	3348      	adds	r3, #72	; 0x48
 800aa4e:	881b      	ldrh	r3, [r3, #0]
 800aa50:	827b      	strh	r3, [r7, #18]

		if (run_nodetect == 1) {
 800aa52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d148      	bne.n	800aaec <VL53LX_dynamic_xtalk_correction_corrector+0x270>




			utemp64 = 1000 * ((uint64_t)amr);
 800aa5a:	8a78      	ldrh	r0, [r7, #18]
 800aa5c:	f04f 0100 	mov.w	r1, #0
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	f04f 0400 	mov.w	r4, #0
 800aa68:	f04f 0500 	mov.w	r5, #0
 800aa6c:	015d      	lsls	r5, r3, #5
 800aa6e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800aa72:	0154      	lsls	r4, r2, #5
 800aa74:	4622      	mov	r2, r4
 800aa76:	462b      	mov	r3, r5
 800aa78:	1a12      	subs	r2, r2, r0
 800aa7a:	eb63 0301 	sbc.w	r3, r3, r1
 800aa7e:	f04f 0400 	mov.w	r4, #0
 800aa82:	f04f 0500 	mov.w	r5, #0
 800aa86:	009d      	lsls	r5, r3, #2
 800aa88:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800aa8c:	0094      	lsls	r4, r2, #2
 800aa8e:	4622      	mov	r2, r4
 800aa90:	462b      	mov	r3, r5
 800aa92:	1812      	adds	r2, r2, r0
 800aa94:	eb41 0303 	adc.w	r3, r1, r3
 800aa98:	f04f 0000 	mov.w	r0, #0
 800aa9c:	f04f 0100 	mov.w	r1, #0
 800aaa0:	00d9      	lsls	r1, r3, #3
 800aaa2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aaa6:	00d0      	lsls	r0, r2, #3
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	460b      	mov	r3, r1
 800aaac:	e9c7 2308 	strd	r2, r3, [r7, #32]


			utemp64 = utemp64 << 9;
 800aab0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800aab4:	f04f 0200 	mov.w	r2, #0
 800aab8:	f04f 0300 	mov.w	r3, #0
 800aabc:	024b      	lsls	r3, r1, #9
 800aabe:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800aac2:	0242      	lsls	r2, r0, #9
 800aac4:	e9c7 2308 	strd	r2, r3, [r7, #32]


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800aac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aacc:	461a      	mov	r2, r3
 800aace:	f04f 0300 	mov.w	r3, #0
 800aad2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800aad6:	4299      	cmp	r1, r3
 800aad8:	bf08      	it	eq
 800aada:	4290      	cmpeq	r0, r2
 800aadc:	d203      	bcs.n	800aae6 <VL53LX_dynamic_xtalk_correction_corrector+0x26a>
				run_nodetect = 1;
 800aade:	2301      	movs	r3, #1
 800aae0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aae4:	e002      	b.n	800aaec <VL53LX_dynamic_xtalk_correction_corrector+0x270>
			else
				run_nodetect = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		}
	}


	if (run_smudge_detection) {
 800aaec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f000 8101 	beq.w	800acf8 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>

		pint->nodetect_counter = 0;
 800aaf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaf8:	2200      	movs	r2, #0
 800aafa:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7ff fbe8 	bl	800a2d2 <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800ab02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab04:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800ab08:	61fb      	str	r3, [r7, #28]
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	60fb      	str	r3, [r7, #12]
		current_xtalk = ((uint32_t)cco) << 2;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	61bb      	str	r3, [r7, #24]


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800ab16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab18:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	617b      	str	r3, [r7, #20]


		itemp32 = xtalk_offset_in - current_xtalk +
 800ab1e:	69fa      	ldr	r2, [r7, #28]
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	1ad2      	subs	r2, r2, r3
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	4413      	add	r3, r2
 800ab28:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800ab2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	da02      	bge.n	800ab36 <VL53LX_dynamic_xtalk_correction_corrector+0x2ba>
			itemp32 = itemp32 * (-1);
 800ab30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab32:	425b      	negs	r3, r3
 800ab34:	65bb      	str	r3, [r7, #88]	; 0x58


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800ab36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	dd0c      	ble.n	800ab5c <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800ab42:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted)) {
 800ab44:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800ab46:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	da03      	bge.n	800ab56 <VL53LX_dynamic_xtalk_correction_corrector+0x2da>
				pout->single_xtalk_delta_flag = 1;
 800ab4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab50:	2201      	movs	r2, #1
 800ab52:	709a      	strb	r2, [r3, #2]
 800ab54:	e002      	b.n	800ab5c <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800ab56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab58:	2202      	movs	r2, #2
 800ab5a:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800ab5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	1c5a      	adds	r2, r3, #1
 800ab62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab64:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800ab66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab6c:	695b      	ldr	r3, [r3, #20]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d906      	bls.n	800ab80 <VL53LX_dynamic_xtalk_correction_corrector+0x304>
			pout->sample_limit_exceeded_flag = 1;
 800ab72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab74:	2201      	movs	r2, #1
 800ab76:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800ab78:	2302      	movs	r3, #2
 800ab7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800ab7e:	e00d      	b.n	800ab9c <VL53LX_dynamic_xtalk_correction_corrector+0x320>
		} else {
			pint->accumulator = pint->accumulator +
 800ab80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab82:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	461a      	mov	r2, r3
 800ab8a:	f04f 0300 	mov.w	r3, #0
 800ab8e:	eb10 0802 	adds.w	r8, r0, r2
 800ab92:	eb41 0903 	adc.w	r9, r1, r3
 800ab96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab98:	e9c3 8902 	strd	r8, r9, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800ab9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d202      	bcs.n	800abae <VL53LX_dynamic_xtalk_correction_corrector+0x332>
			continue_processing = CONT_NEXT_LOOP;
 800aba8:	2301      	movs	r3, #1
 800abaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800abae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800abb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	461a      	mov	r2, r3
 800abba:	f04f 0300 	mov.w	r3, #0
 800abbe:	f7f5 fbaf 	bl	8000320 <__aeabi_uldivmod>
 800abc2:	4602      	mov	r2, r0
 800abc4:	460b      	mov	r3, r1
		xtalk_offset_out =
 800abc6:	4613      	mov	r3, r2
 800abc8:	653b      	str	r3, [r7, #80]	; 0x50
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800abca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	1ad2      	subs	r2, r2, r3
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	4413      	add	r3, r2
 800abd4:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800abd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abd8:	2b00      	cmp	r3, #0
 800abda:	da02      	bge.n	800abe2 <VL53LX_dynamic_xtalk_correction_corrector+0x366>
			itemp32 = itemp32 * (-1);
 800abdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abde:	425b      	negs	r3, r3
 800abe0:	65bb      	str	r3, [r7, #88]	; 0x58

		if (continue_processing == CONT_CONTINUE &&
 800abe2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d112      	bne.n	800ac10 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800abea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abec:	69db      	ldr	r3, [r3, #28]
 800abee:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800abf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abf2:	4293      	cmp	r3, r2
 800abf4:	db0c      	blt.n	800ac10 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800abf6:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted))
 800abf8:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800abfa:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800abfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abfe:	429a      	cmp	r2, r3
 800ac00:	da03      	bge.n	800ac0a <VL53LX_dynamic_xtalk_correction_corrector+0x38e>
				pout->averaged_xtalk_delta_flag = 1;
 800ac02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac04:	2201      	movs	r2, #1
 800ac06:	70da      	strb	r2, [r3, #3]
 800ac08:	e002      	b.n	800ac10 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800ac0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0c:	2202      	movs	r2, #2
 800ac0e:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800ac10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d108      	bne.n	800ac2a <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800ac18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac1a:	69db      	ldr	r3, [r3, #28]
 800ac1c:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800ac1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac20:	4293      	cmp	r3, r2
 800ac22:	da02      	bge.n	800ac2a <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			)

			continue_processing = CONT_RESET;
 800ac24:	2302      	movs	r3, #2
 800ac26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



		pout->smudge_corr_clipped = 0;
 800ac2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800ac30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d111      	bne.n	800ac5c <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800ac38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac3a:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00d      	beq.n	800ac5c <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800ac40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac42:	6a1b      	ldr	r3, [r3, #32]
 800ac44:	7afa      	ldrb	r2, [r7, #11]
 800ac46:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800ac4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d905      	bls.n	800ac5c <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
				pout->smudge_corr_clipped = 1;
 800ac50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac52:	2201      	movs	r2, #1
 800ac54:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800ac56:	2302      	movs	r3, #2
 800ac58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800ac5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac5e:	7c1b      	ldrb	r3, [r3, #16]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d007      	beq.n	800ac74 <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800ac64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac66:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800ac68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d902      	bls.n	800ac74 <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			xtalk_offset_out =
 800ac6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800ac74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac76:	7c1b      	ldrb	r3, [r3, #16]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d107      	bne.n	800ac8c <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800ac7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac7e:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800ac80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d202      	bcs.n	800ac8c <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			xtalk_offset_out =
 800ac86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800ac8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac8e:	089b      	lsrs	r3, r3, #2
 800ac90:	653b      	str	r3, [r7, #80]	; 0x50
		if (xtalk_offset_out > 0x3FFFF)
 800ac92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac98:	d301      	bcc.n	800ac9e <VL53LX_dynamic_xtalk_correction_corrector+0x422>
			xtalk_offset_out = 0x3FFFF;
 800ac9a:	4b3f      	ldr	r3, [pc, #252]	; (800ad98 <VL53LX_dynamic_xtalk_correction_corrector+0x51c>)
 800ac9c:	653b      	str	r3, [r7, #80]	; 0x50


		if (continue_processing == CONT_CONTINUE) {
 800ac9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d10d      	bne.n	800acc2 <VL53LX_dynamic_xtalk_correction_corrector+0x446>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800aca6:	2300      	movs	r3, #0
 800aca8:	9301      	str	r3, [sp, #4]
 800acaa:	2301      	movs	r3, #1
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f7ff fc33 	bl	800a520 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800acba:	2302      	movs	r3, #2
 800acbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800acc0:	e009      	b.n	800acd6 <VL53LX_dynamic_xtalk_correction_corrector+0x45a>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800acc2:	2301      	movs	r3, #1
 800acc4:	9301      	str	r3, [sp, #4]
 800acc6:	2301      	movs	r3, #1
 800acc8:	9300      	str	r3, [sp, #0]
 800acca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800accc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7ff fc25 	bl	800a520 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800acd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d10c      	bne.n	800acf8 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>
			pint->accumulator = 0;
 800acde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ace0:	f04f 0200 	mov.w	r2, #0
 800ace4:	f04f 0300 	mov.w	r3, #0
 800ace8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800acec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acee:	2200      	movs	r2, #0
 800acf0:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800acf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf4:	2200      	movs	r2, #0
 800acf6:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800acf8:	2300      	movs	r3, #0
 800acfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (run_nodetect == 1) {
 800acfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d140      	bne.n	800ad88 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>

		pint->nodetect_counter += 1;
 800ad06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	1c5a      	adds	r2, r3, #1
 800ad0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad0e:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800ad10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad12:	691a      	ldr	r2, [r3, #16]
 800ad14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d202      	bcs.n	800ad22 <VL53LX_dynamic_xtalk_correction_corrector+0x4a6>
			continue_processing = CONT_NEXT_LOOP;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800ad22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad26:	653b      	str	r3, [r7, #80]	; 0x50

		if (continue_processing == CONT_CONTINUE) {
 800ad28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d110      	bne.n	800ad52 <VL53LX_dynamic_xtalk_correction_corrector+0x4d6>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800ad30:	2300      	movs	r3, #0
 800ad32:	9301      	str	r3, [sp, #4]
 800ad34:	2300      	movs	r3, #0
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f7ff fbee 	bl	800a520 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800ad44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad46:	2202      	movs	r2, #2
 800ad48:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800ad4a:	2302      	movs	r3, #2
 800ad4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800ad50:	e009      	b.n	800ad66 <VL53LX_dynamic_xtalk_correction_corrector+0x4ea>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800ad52:	2301      	movs	r3, #1
 800ad54:	9301      	str	r3, [sp, #4]
 800ad56:	2300      	movs	r3, #0
 800ad58:	9300      	str	r3, [sp, #0]
 800ad5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7ff fbdd 	bl	800a520 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800ad66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d10c      	bne.n	800ad88 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>
			pint->accumulator = 0;
 800ad6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad70:	f04f 0200 	mov.w	r2, #0
 800ad74:	f04f 0300 	mov.w	r3, #0
 800ad78:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800ad7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad7e:	2200      	movs	r2, #0
 800ad80:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800ad82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad84:	2200      	movs	r2, #0
 800ad86:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800ad88:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3760      	adds	r7, #96	; 0x60
 800ad90:	46bd      	mov	sp, r7
 800ad92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ad96:	bf00      	nop
 800ad98:	0003ffff 	.word	0x0003ffff

0800ad9c <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b086      	sub	sp, #24
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ada4:	2300      	movs	r3, #0
 800ada6:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	3318      	adds	r3, #24
 800adac:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800adb4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800adbc:	3314      	adds	r3, #20
 800adbe:	2201      	movs	r2, #1
 800adc0:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800adc8:	3315      	adds	r3, #21
 800adca:	2201      	movs	r2, #1
 800adcc:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800add4:	3316      	adds	r3, #22
 800add6:	2200      	movs	r2, #0
 800add8:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ade0:	3318      	adds	r3, #24
 800ade2:	2200      	movs	r2, #0
 800ade4:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800adec:	331c      	adds	r3, #28
 800adee:	2264      	movs	r2, #100	; 0x64
 800adf0:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800adf8:	2200      	movs	r2, #0
 800adfa:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800ae02:	3304      	adds	r3, #4
 800ae04:	2200      	movs	r2, #0
 800ae06:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800ae0e:	3308      	adds	r3, #8
 800ae10:	22c8      	movs	r2, #200	; 0xc8
 800ae12:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800ae1a:	330c      	adds	r3, #12
 800ae1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae20:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800ae28:	3310      	adds	r3, #16
 800ae2a:	f44f 729a 	mov.w	r2, #308	; 0x134
 800ae2e:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800ae36:	3314      	adds	r3, #20
 800ae38:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ae3c:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800ae44:	3318      	adds	r3, #24
 800ae46:	2280      	movs	r2, #128	; 0x80
 800ae48:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800ae50:	331c      	adds	r3, #28
 800ae52:	2200      	movs	r2, #0
 800ae54:	701a      	strb	r2, [r3, #0]
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800ae5c:	331e      	adds	r3, #30
 800ae5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae62:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ae6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae6e:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ae76:	3302      	adds	r3, #2
 800ae78:	2200      	movs	r2, #0
 800ae7a:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ae82:	3304      	adds	r3, #4
 800ae84:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
 800ae88:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ae90:	3308      	adds	r3, #8
 800ae92:	2228      	movs	r2, #40	; 0x28
 800ae94:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ae9c:	330c      	adds	r3, #12
 800ae9e:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800aea2:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800aeaa:	3310      	adds	r3, #16
 800aeac:	f44f 7261 	mov.w	r2, #900	; 0x384
 800aeb0:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800aeb8:	3314      	adds	r3, #20
 800aeba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800aebe:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800aec6:	3318      	adds	r3, #24
 800aec8:	2200      	movs	r2, #0
 800aeca:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.required_samples = 0;
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800aed2:	331c      	adds	r3, #28
 800aed4:	2200      	movs	r2, #0
 800aed6:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.accumulator = 0;
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	f503 519f 	add.w	r1, r3, #5088	; 0x13e0
 800aede:	f04f 0200 	mov.w	r2, #0
 800aee2:	f04f 0300 	mov.w	r3, #0
 800aee6:	e9c1 2300 	strd	r2, r3, [r1]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800aef0:	3308      	adds	r3, #8
 800aef2:	2200      	movs	r2, #0
 800aef4:	601a      	str	r2, [r3, #0]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f000 f806 	bl	800af08 <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800aefc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3718      	adds	r7, #24
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800af10:	2300      	movs	r3, #0
 800af12:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800af1a:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	2200      	movs	r2, #0
 800af20:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	2200      	movs	r2, #0
 800af26:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	2200      	movs	r2, #0
 800af2c:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	2200      	movs	r2, #0
 800af32:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	2200      	movs	r2, #0
 800af38:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	2200      	movs	r2, #0
 800af3e:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	2200      	movs	r2, #0
 800af44:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	2200      	movs	r2, #0
 800af4a:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	2200      	movs	r2, #0
 800af50:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	2200      	movs	r2, #0
 800af56:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800af58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3714      	adds	r7, #20
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800af70:	2300      	movs	r3, #0
 800af72:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	3318      	adds	r3, #24
 800af78:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800af80:	331c      	adds	r3, #28
 800af82:	2200      	movs	r2, #0
 800af84:	601a      	str	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800af8c:	2200      	movs	r2, #0
 800af8e:	801a      	strh	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800af96:	3302      	adds	r3, #2
 800af98:	2200      	movs	r2, #0
 800af9a:	801a      	strh	r2, [r3, #0]
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800afa2:	3304      	adds	r3, #4
 800afa4:	2218      	movs	r2, #24
 800afa6:	2100      	movs	r1, #0
 800afa8:	4618      	mov	r0, r3
 800afaa:	f009 f8c1 	bl	8014130 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800afae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3710      	adds	r7, #16
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800afba:	b480      	push	{r7}
 800afbc:	b085      	sub	sp, #20
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800afc2:	2300      	movs	r3, #0
 800afc4:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	3318      	adds	r3, #24
 800afca:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800afd2:	3310      	adds	r3, #16
 800afd4:	2203      	movs	r2, #3
 800afd6:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800afde:	3311      	adds	r3, #17
 800afe0:	2200      	movs	r2, #0
 800afe2:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800afea:	3312      	adds	r3, #18
 800afec:	2200      	movs	r2, #0
 800afee:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800aff6:	3313      	adds	r3, #19
 800aff8:	2200      	movs	r2, #0
 800affa:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b002:	3314      	adds	r3, #20
 800b004:	2200      	movs	r2, #0
 800b006:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b00e:	3315      	adds	r3, #21
 800b010:	2200      	movs	r2, #0
 800b012:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b01a:	3316      	adds	r3, #22
 800b01c:	2200      	movs	r2, #0
 800b01e:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b026:	3318      	adds	r3, #24
 800b028:	2200      	movs	r2, #0
 800b02a:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b032:	331c      	adds	r3, #28
 800b034:	2200      	movs	r2, #0
 800b036:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800b038:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3714      	adds	r7, #20
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <VL53LX_low_power_auto_data_stop_range>:

VL53LX_Error VL53LX_low_power_auto_data_stop_range(
	VL53LX_DEV                          Dev
	)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b050:	2300      	movs	r3, #0
 800b052:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3318      	adds	r3, #24
 800b058:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b060:	3312      	adds	r3, #18
 800b062:	22ff      	movs	r2, #255	; 0xff
 800b064:	701a      	strb	r2, [r3, #0]

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b06c:	3316      	adds	r3, #22
 800b06e:	2200      	movs	r2, #0
 800b070:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b078:	3318      	adds	r3, #24
 800b07a:	2200      	movs	r2, #0
 800b07c:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b084:	331c      	adds	r3, #28
 800b086:	2200      	movs	r2, #0
 800b088:	801a      	strh	r2, [r3, #0]


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b090:	3314      	adds	r3, #20
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d007      	beq.n	800b0a8 <VL53LX_low_power_auto_data_stop_range+0x60>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b09e:	3314      	adds	r3, #20
 800b0a0:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__init =
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b0ae:	3315      	adds	r3, #21
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d007      	beq.n	800b0c6 <VL53LX_low_power_auto_data_stop_range+0x7e>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b0bc:	3315      	adds	r3, #21
 800b0be:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	LOG_FUNCTION_END(status);

	return status;
 800b0ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3714      	adds	r7, #20
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800b0de:	b480      	push	{r7}
 800b0e0:	b085      	sub	sp, #20
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	3318      	adds	r3, #24
 800b0ea:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f893 22e3 	ldrb.w	r2, [r3, #739]	; 0x2e3
	pdev->low_power_auto_data.saved_vhv_init =
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b0fc:	3314      	adds	r3, #20
 800b0fe:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
	pdev->low_power_auto_data.saved_vhv_timeout =
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b10c:	3315      	adds	r3, #21
 800b10e:	701a      	strb	r2, [r3, #0]


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f893 32e3 	ldrb.w	r3, [r3, #739]	; 0x2e3
 800b116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b11a:	b2da      	uxtb	r2, r3
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b128:	f003 0303 	and.w	r3, r3, #3
 800b12c:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b134:	3310      	adds	r3, #16
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b13c:	4413      	add	r3, r2
 800b13e:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2201      	movs	r2, #1
 800b14a:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 800b154:	331e      	adds	r3, #30
 800b156:	781a      	ldrb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result =
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b15e:	3316      	adds	r3, #22
 800b160:	701a      	strb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b168:	3316      	adds	r3, #22
 800b16a:	781a      	ldrb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

	LOG_FUNCTION_END(status);

	return status;
 800b172:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3714      	adds	r7, #20
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800b182:	b480      	push	{r7}
 800b184:	b087      	sub	sp, #28
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	3318      	adds	r3, #24
 800b18e:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f203 3366 	addw	r3, r3, #870	; 0x366
 800b196:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b198:	2300      	movs	r3, #0
 800b19a:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	8a1b      	ldrh	r3, [r3, #16]
 800b1a0:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	891b      	ldrh	r3, [r3, #8]
 800b1a6:	4413      	add	r3, r2
	utemp32a =
 800b1a8:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1b0:	d302      	bcc.n	800b1b8 <VL53LX_low_power_auto_update_DSS+0x36>
		utemp32a = 0xFFFF;
 800b1b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1b6:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	041b      	lsls	r3, r3, #16
 800b1bc:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d102      	bne.n	800b1ce <VL53LX_low_power_auto_update_DSS+0x4c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b1c8:	23f1      	movs	r3, #241	; 0xf1
 800b1ca:	75fb      	strb	r3, [r7, #23]
 800b1cc:	e03f      	b.n	800b24e <VL53LX_low_power_auto_update_DSS+0xcc>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800b1d4:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1dc:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b1e4:	3318      	adds	r3, #24
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	601a      	str	r2, [r3, #0]
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800b1f0:	041b      	lsls	r3, r3, #16
 800b1f2:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b1fa:	3318      	adds	r3, #24
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d102      	bne.n	800b208 <VL53LX_low_power_auto_update_DSS+0x86>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b202:	23f1      	movs	r3, #241	; 0xf1
 800b204:	75fb      	strb	r3, [r7, #23]
 800b206:	e022      	b.n	800b24e <VL53LX_low_power_auto_update_DSS+0xcc>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b20e:	3318      	adds	r3, #24
 800b210:	681b      	ldr	r3, [r3, #0]
			utemp32a = utemp32a /
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	fbb2 f3f3 	udiv	r3, r2, r3
 800b218:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b220:	d302      	bcc.n	800b228 <VL53LX_low_power_auto_update_DSS+0xa6>
				utemp32a = 0xFFFF;
 800b222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b226:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b232:	331c      	adds	r3, #28
 800b234:	801a      	strh	r2, [r3, #0]


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b23c:	331c      	adds	r3, #28
 800b23e:	881a      	ldrh	r2, [r3, #0]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
			pdev->gen_cfg.dss_config__roi_mode_control =
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2202      	movs	r2, #2
 800b24a:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800b24e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b252:	f113 0f0f 	cmn.w	r3, #15
 800b256:	d114      	bne.n	800b282 <VL53LX_low_power_auto_update_DSS+0x100>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b25e:	331c      	adds	r3, #28
 800b260:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b264:	801a      	strh	r2, [r3, #0]


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b26c:	331c      	adds	r3, #28
 800b26e:	881a      	ldrh	r2, [r3, #0]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2202      	movs	r2, #2
 800b27a:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800b27e:	2300      	movs	r3, #0
 800b280:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b282:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b286:	4618      	mov	r0, r3
 800b288:	371c      	adds	r7, #28
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800b292:	b480      	push	{r7}
 800b294:	b087      	sub	sp, #28
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
 800b29a:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	3318      	adds	r3, #24
 800b2a0:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800b2b0:	2b07      	cmp	r3, #7
 800b2b2:	bf0c      	ite	eq
 800b2b4:	2301      	moveq	r3, #1
 800b2b6:	2300      	movne	r3, #0
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b2bc:	2300      	movs	r3, #0
 800b2be:	75fb      	strb	r3, [r7, #23]
 800b2c0:	e019      	b.n	800b2f6 <VL53LX_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800b2c2:	7df9      	ldrb	r1, [r7, #23]
 800b2c4:	7bbb      	ldrb	r3, [r7, #14]
 800b2c6:	6938      	ldr	r0, [r7, #16]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	0052      	lsls	r2, r2, #1
 800b2cc:	441a      	add	r2, r3
 800b2ce:	0153      	lsls	r3, r2, #5
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	005b      	lsls	r3, r3, #1
 800b2d6:	440b      	add	r3, r1
 800b2d8:	019b      	lsls	r3, r3, #6
 800b2da:	4413      	add	r3, r2
 800b2dc:	4403      	add	r3, r0
 800b2de:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800b2e2:	330c      	adds	r3, #12
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	dd02      	ble.n	800b2f0 <VL53LX_compute_histo_merge_nb+0x5e>
			sum++;
 800b2ea:	7dbb      	ldrb	r3, [r7, #22]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b2f0:	7dfb      	ldrb	r3, [r7, #23]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	75fb      	strb	r3, [r7, #23]
 800b2f6:	7dfb      	ldrb	r3, [r7, #23]
 800b2f8:	2b05      	cmp	r3, #5
 800b2fa:	d9e2      	bls.n	800b2c2 <VL53LX_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	7dba      	ldrb	r2, [r7, #22]
 800b300:	701a      	strb	r2, [r3, #0]

	return status;
 800b302:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b306:	4618      	mov	r0, r3
 800b308:	371c      	adds	r7, #28
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr

0800b312 <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800b312:	b480      	push	{r7}
 800b314:	b085      	sub	sp, #20
 800b316:	af00      	add	r7, sp, #0
 800b318:	4603      	mov	r3, r0
 800b31a:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800b320:	88fb      	ldrh	r3, [r7, #6]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d005      	beq.n	800b332 <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800b326:	88fb      	ldrh	r3, [r7, #6]
 800b328:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b32c:	fb92 f3f3 	sdiv	r3, r2, r3
 800b330:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800b332:	68fb      	ldr	r3, [r7, #12]
}
 800b334:	4618      	mov	r0, r3
 800b336:	3714      	adds	r7, #20
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800b340:	b480      	push	{r7}
 800b342:	b089      	sub	sp, #36	; 0x24
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	607a      	str	r2, [r7, #4]
 800b34c:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800b34e:	f04f 0200 	mov.w	r2, #0
 800b352:	f04f 0300 	mov.w	r3, #0
 800b356:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	fb02 f303 	mul.w	r3, r2, r3
 800b366:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	0b1b      	lsrs	r3, r3, #12
 800b36c:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	461a      	mov	r2, r3
 800b372:	f04f 0300 	mov.w	r3, #0
 800b376:	e9c7 2306 	strd	r2, r3, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	fb02 f303 	mul.w	r3, r2, r3
 800b382:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	091b      	lsrs	r3, r3, #4
 800b388:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	461a      	mov	r2, r3
 800b38e:	f04f 0300 	mov.w	r3, #0
 800b392:	69f9      	ldr	r1, [r7, #28]
 800b394:	fb02 f001 	mul.w	r0, r2, r1
 800b398:	69b9      	ldr	r1, [r7, #24]
 800b39a:	fb03 f101 	mul.w	r1, r3, r1
 800b39e:	4401      	add	r1, r0
 800b3a0:	69b8      	ldr	r0, [r7, #24]
 800b3a2:	fba0 2302 	umull	r2, r3, r0, r2
 800b3a6:	4419      	add	r1, r3
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800b3ae:	e9c7 2306 	strd	r2, r3, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800b3b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b3b6:	f04f 0200 	mov.w	r2, #0
 800b3ba:	f04f 0300 	mov.w	r3, #0
 800b3be:	0b02      	lsrs	r2, r0, #12
 800b3c0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b3c4:	0b0b      	lsrs	r3, r1, #12
 800b3c6:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800b3ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	bf08      	it	eq
 800b3d2:	2a00      	cmpeq	r2, #0
 800b3d4:	d305      	bcc.n	800b3e2 <VL53LX_duration_maths+0xa2>
		tmp_long_int = 0xFFFFFFFF;
 800b3d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3da:	f04f 0300 	mov.w	r3, #0
 800b3de:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	617b      	str	r3, [r7, #20]

	return duration_us;
 800b3e6:	697b      	ldr	r3, [r7, #20]
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3724      	adds	r7, #36	; 0x24
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800b3f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b3f8:	b08e      	sub	sp, #56	; 0x38
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	60f8      	str	r0, [r7, #12]
 800b3fe:	460b      	mov	r3, r1
 800b400:	607a      	str	r2, [r7, #4]
 800b402:	817b      	strh	r3, [r7, #10]
	uint64_t total_hist_counts  = 0;
 800b404:	f04f 0200 	mov.w	r2, #0
 800b408:	f04f 0300 	mov.w	r3, #0
 800b40c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint64_t xtalk_per_spad     = 0;
 800b410:	f04f 0200 	mov.w	r2, #0
 800b414:	f04f 0300 	mov.w	r3, #0
 800b418:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint32_t rate_per_spad_kcps = 0;
 800b41c:	2300      	movs	r3, #0
 800b41e:	627b      	str	r3, [r7, #36]	; 0x24





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	4618      	mov	r0, r3
 800b424:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	f04f 0400 	mov.w	r4, #0
 800b430:	f04f 0500 	mov.w	r5, #0
 800b434:	015d      	lsls	r5, r3, #5
 800b436:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800b43a:	0154      	lsls	r4, r2, #5
 800b43c:	4622      	mov	r2, r4
 800b43e:	462b      	mov	r3, r5
 800b440:	1a12      	subs	r2, r2, r0
 800b442:	eb63 0301 	sbc.w	r3, r3, r1
 800b446:	f04f 0400 	mov.w	r4, #0
 800b44a:	f04f 0500 	mov.w	r5, #0
 800b44e:	009d      	lsls	r5, r3, #2
 800b450:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800b454:	0094      	lsls	r4, r2, #2
 800b456:	4622      	mov	r2, r4
 800b458:	462b      	mov	r3, r5
 800b45a:	1812      	adds	r2, r2, r0
 800b45c:	eb41 0303 	adc.w	r3, r1, r3
 800b460:	f04f 0000 	mov.w	r0, #0
 800b464:	f04f 0100 	mov.w	r1, #0
 800b468:	02d9      	lsls	r1, r3, #11
 800b46a:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800b46e:	02d0      	lsls	r0, r2, #11
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	e9c7 2306 	strd	r2, r3, [r7, #24]
			* 1000 * 256);

	if (num_spads != 0)
 800b478:	897b      	ldrh	r3, [r7, #10]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00a      	beq.n	800b494 <VL53LX_events_per_spad_maths+0xa0>
		total_hist_counts = do_division_u(
 800b47e:	897a      	ldrh	r2, [r7, #10]
 800b480:	f04f 0300 	mov.w	r3, #0
 800b484:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b488:	f7f4 ff4a 	bl	8000320 <__aeabi_uldivmod>
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d021      	beq.n	800b4de <VL53LX_events_per_spad_maths+0xea>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b49a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800b49e:	f04f 0200 	mov.w	r2, #0
 800b4a2:	f04f 0300 	mov.w	r3, #0
 800b4a6:	02cb      	lsls	r3, r1, #11
 800b4a8:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b4ac:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800b4ae:	6879      	ldr	r1, [r7, #4]
 800b4b0:	0849      	lsrs	r1, r1, #1
 800b4b2:	4608      	mov	r0, r1
 800b4b4:	f04f 0100 	mov.w	r1, #0
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b4b8:	eb12 0800 	adds.w	r8, r2, r0
 800b4bc:	eb43 0901 	adc.w	r9, r3, r1
 800b4c0:	e9c7 8904 	strd	r8, r9, [r7, #16]

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	f04f 0300 	mov.w	r3, #0
 800b4cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b4d0:	f7f4 ff26 	bl	8000320 <__aeabi_uldivmod>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800b4dc:	e00b      	b.n	800b4f6 <VL53LX_events_per_spad_maths+0x102>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800b4de:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800b4e2:	f04f 0200 	mov.w	r2, #0
 800b4e6:	f04f 0300 	mov.w	r3, #0
 800b4ea:	02cb      	lsls	r3, r1, #11
 800b4ec:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b4f0:	02c2      	lsls	r2, r0, #11
 800b4f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800b4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f8:	627b      	str	r3, [r7, #36]	; 0x24

	return rate_per_spad_kcps;
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3738      	adds	r7, #56	; 0x38
 800b500:	46bd      	mov	sp, r7
 800b502:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b506 <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800b506:	b480      	push	{r7}
 800b508:	b085      	sub	sp, #20
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800b50e:	2300      	movs	r3, #0
 800b510:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b512:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b516:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800b518:	e002      	b.n	800b520 <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	089b      	lsrs	r3, r3, #2
 800b51e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b520:	68ba      	ldr	r2, [r7, #8]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	429a      	cmp	r2, r3
 800b526:	d8f8      	bhi.n	800b51a <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800b528:	e017      	b.n	800b55a <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	4413      	add	r3, r2
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	429a      	cmp	r2, r3
 800b534:	d30b      	bcc.n	800b54e <VL53LX_isqrt+0x48>
			num -= res + bit;
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	4413      	add	r3, r2
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	085b      	lsrs	r3, r3, #1
 800b546:	68ba      	ldr	r2, [r7, #8]
 800b548:	4413      	add	r3, r2
 800b54a:	60fb      	str	r3, [r7, #12]
 800b54c:	e002      	b.n	800b554 <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	085b      	lsrs	r3, r3, #1
 800b552:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	089b      	lsrs	r3, r3, #2
 800b558:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1e4      	bne.n	800b52a <VL53LX_isqrt+0x24>
	}

	return res;
 800b560:	68fb      	ldr	r3, [r7, #12]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3714      	adds	r7, #20
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b084      	sub	sp, #16
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b584:	4618      	mov	r0, r3
 800b586:	f000 fa97 	bl	800bab8 <VL53LX_decode_vcsel_period>
 800b58a:	4603      	mov	r3, r0
	period = 2048 *
 800b58c:	02db      	lsls	r3, r3, #11
 800b58e:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800b59a:	461a      	mov	r2, r3
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	4413      	add	r3, r2
 800b5a0:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b5a8:	02db      	lsls	r3, r3, #11
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b5b6:	02db      	lsls	r3, r3, #11
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d009      	beq.n	800b5d8 <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	68ba      	ldr	r2, [r7, #8]
 800b5c8:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5cc:	68b9      	ldr	r1, [r7, #8]
 800b5ce:	fb01 f202 	mul.w	r2, r1, r2
 800b5d2:	1a9b      	subs	r3, r3, r2
 800b5d4:	60fb      	str	r3, [r7, #12]
 800b5d6:	e001      	b.n	800b5dc <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800b5e6:	bf00      	nop
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b084      	sub	sp, #16
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
 800b5f6:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800b600:	6838      	ldr	r0, [r7, #0]
 800b602:	f000 fb82 	bl	800bd0a <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7ff ff7a 	bl	800b506 <VL53LX_isqrt>
 800b612:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800b614:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	fb02 f303 	mul.w	r3, r2, r3
 800b61e:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	3307      	adds	r3, #7
 800b624:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	111b      	asrs	r3, r3, #4
 800b62a:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	4413      	add	r3, r2
 800b636:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	2200      	movs	r2, #0
 800b644:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b648:	2300      	movs	r3, #0
 800b64a:	73fb      	strb	r3, [r7, #15]
 800b64c:	e01e      	b.n	800b68c <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800b64e:	7bfa      	ldrb	r2, [r7, #15]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	3206      	adds	r2, #6
 800b654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	dd13      	ble.n	800b686 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800b664:	7bf9      	ldrb	r1, [r7, #15]
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	3106      	adds	r1, #6
 800b66a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b66e:	441a      	add	r2, r3
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800b67c:	3301      	adds	r3, #1
 800b67e:	b2da      	uxtb	r2, r3
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b686:	7bfb      	ldrb	r3, [r7, #15]
 800b688:	3301      	adds	r3, #1
 800b68a:	73fb      	strb	r3, [r7, #15]
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	7a9b      	ldrb	r3, [r3, #10]
 800b690:	7bfa      	ldrb	r2, [r7, #15]
 800b692:	429a      	cmp	r2, r3
 800b694:	d3db      	bcc.n	800b64e <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d01c      	beq.n	800b6da <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53LX_p_028 =
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800b6b8:	0852      	lsrs	r2, r2, #1
 800b6ba:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800b6bc:	441a      	add	r2, r3
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53LX_p_028 /=
 800b6d0:	fb93 f2f2 	sdiv	r2, r3, r2
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800b6da:	bf00      	nop
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b085      	sub	sp, #20
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	7b1b      	ldrb	r3, [r3, #12]
 800b6fa:	f003 0307 	and.w	r3, r3, #7
 800b6fe:	2b07      	cmp	r3, #7
 800b700:	d13a      	bne.n	800b778 <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800b702:	2300      	movs	r3, #0
 800b704:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b706:	2300      	movs	r3, #0
 800b708:	73bb      	strb	r3, [r7, #14]
 800b70a:	e01f      	b.n	800b74c <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800b70c:	7bbb      	ldrb	r3, [r7, #14]
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	4413      	add	r3, r2
 800b712:	7b1b      	ldrb	r3, [r3, #12]
 800b714:	f003 0307 	and.w	r3, r3, #7
 800b718:	2b07      	cmp	r3, #7
 800b71a:	d014      	beq.n	800b746 <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800b71c:	7bba      	ldrb	r2, [r7, #14]
 800b71e:	7b7b      	ldrb	r3, [r7, #13]
 800b720:	6879      	ldr	r1, [r7, #4]
 800b722:	440a      	add	r2, r1
 800b724:	7b11      	ldrb	r1, [r2, #12]
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	4413      	add	r3, r2
 800b72a:	460a      	mov	r2, r1
 800b72c:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800b72e:	7bba      	ldrb	r2, [r7, #14]
 800b730:	7b7b      	ldrb	r3, [r7, #13]
 800b732:	6879      	ldr	r1, [r7, #4]
 800b734:	440a      	add	r2, r1
 800b736:	7c91      	ldrb	r1, [r2, #18]
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	4413      	add	r3, r2
 800b73c:	460a      	mov	r2, r1
 800b73e:	749a      	strb	r2, [r3, #18]
				i++;
 800b740:	7b7b      	ldrb	r3, [r7, #13]
 800b742:	3301      	adds	r3, #1
 800b744:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b746:	7bbb      	ldrb	r3, [r7, #14]
 800b748:	3301      	adds	r3, #1
 800b74a:	73bb      	strb	r3, [r7, #14]
 800b74c:	7bbb      	ldrb	r3, [r7, #14]
 800b74e:	2b05      	cmp	r3, #5
 800b750:	d9dc      	bls.n	800b70c <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b752:	7b7b      	ldrb	r3, [r7, #13]
 800b754:	73bb      	strb	r3, [r7, #14]
 800b756:	e00c      	b.n	800b772 <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800b758:	7bbb      	ldrb	r3, [r7, #14]
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	4413      	add	r3, r2
 800b75e:	2210      	movs	r2, #16
 800b760:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800b762:	7bbb      	ldrb	r3, [r7, #14]
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	4413      	add	r3, r2
 800b768:	2200      	movs	r2, #0
 800b76a:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b76c:	7bbb      	ldrb	r3, [r7, #14]
 800b76e:	3301      	adds	r3, #1
 800b770:	73bb      	strb	r3, [r7, #14]
 800b772:	7bbb      	ldrb	r3, [r7, #14]
 800b774:	2b05      	cmp	r3, #5
 800b776:	d9ef      	bls.n	800b758 <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	7adb      	ldrb	r3, [r3, #11]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d023      	beq.n	800b7c8 <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	7adb      	ldrb	r3, [r3, #11]
 800b784:	73fb      	strb	r3, [r7, #15]
 800b786:	e00f      	b.n	800b7a8 <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800b788:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800b78a:	7bfb      	ldrb	r3, [r7, #15]
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	7ad2      	ldrb	r2, [r2, #11]
 800b790:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	3106      	adds	r1, #6
 800b796:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	3206      	adds	r2, #6
 800b79e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800b7a2:	7bfb      	ldrb	r3, [r7, #15]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	73fb      	strb	r3, [r7, #15]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800b7ac:	7bfa      	ldrb	r2, [r7, #15]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d3ea      	bcc.n	800b788 <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800b7ba:	1ad3      	subs	r3, r2, r3
 800b7bc:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	72da      	strb	r2, [r3, #11]
	}
}
 800b7c8:	bf00      	nop
 800b7ca:	3714      	adds	r7, #20
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	4603      	mov	r3, r0
 800b7dc:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800b7e6:	88fb      	ldrh	r3, [r7, #6]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7ff fd92 	bl	800b312 <VL53LX_calc_pll_period_us>
 800b7ee:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800b7f4:	f249 2257 	movw	r2, #37463	; 0x9257
 800b7f8:	fb02 f303 	mul.w	r3, r2, r3
 800b7fc:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b804:	0c1b      	lsrs	r3, r3, #16
 800b806:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800b808:	68bb      	ldr	r3, [r7, #8]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800b812:	b480      	push	{r7}
 800b814:	b087      	sub	sp, #28
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
 800b81a:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800b820:	2307      	movs	r3, #7
 800b822:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800b824:	2300      	movs	r3, #0
 800b826:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b82e:	db03      	blt.n	800b838 <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800b830:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b834:	617b      	str	r3, [r7, #20]
 800b836:	e004      	b.n	800b842 <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	dd01      	ble.n	800b842 <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b848:	dd02      	ble.n	800b850 <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800b84a:	2303      	movs	r3, #3
 800b84c:	613b      	str	r3, [r7, #16]
 800b84e:	e001      	b.n	800b854 <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800b850:	2307      	movs	r3, #7
 800b852:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d009      	beq.n	800b86e <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800b85a:	697a      	ldr	r2, [r7, #20]
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	409a      	lsls	r2, r3
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	085b      	lsrs	r3, r3, #1
 800b864:	441a      	add	r2, r3
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	fbb2 f3f3 	udiv	r3, r2, r3
 800b86c:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b874:	dd02      	ble.n	800b87c <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	011b      	lsls	r3, r3, #4
 800b87a:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b882:	d302      	bcc.n	800b88a <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800b884:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b888:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800b88e:	89fb      	ldrh	r3, [r7, #14]
}
 800b890:	4618      	mov	r0, r3
 800b892:	371c      	adds	r7, #28
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b087      	sub	sp, #28
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	603b      	str	r3, [r7, #0]
 800b8a8:	4613      	mov	r3, r2
 800b8aa:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800b8b4:	88fb      	ldrh	r3, [r7, #6]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d010      	beq.n	800b8dc <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	021a      	lsls	r2, r3, #8
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c4:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800b8c6:	88fb      	ldrh	r3, [r7, #6]
 800b8c8:	085b      	lsrs	r3, r3, #1
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800b8d2:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800b8d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8d8:	617b      	str	r3, [r7, #20]
 800b8da:	e004      	b.n	800b8e6 <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8e4:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800b8e6:	697a      	ldr	r2, [r7, #20]
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d901      	bls.n	800b8f2 <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800b8f6:	8a7b      	ldrh	r3, [r7, #18]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	371c      	adds	r7, #28
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800b904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b906:	b089      	sub	sp, #36	; 0x24
 800b908:	af00      	add	r7, sp, #0
 800b90a:	4606      	mov	r6, r0
 800b90c:	4608      	mov	r0, r1
 800b90e:	4611      	mov	r1, r2
 800b910:	461a      	mov	r2, r3
 800b912:	4633      	mov	r3, r6
 800b914:	80fb      	strh	r3, [r7, #6]
 800b916:	4603      	mov	r3, r0
 800b918:	80bb      	strh	r3, [r7, #4]
 800b91a:	460b      	mov	r3, r1
 800b91c:	807b      	strh	r3, [r7, #2]
 800b91e:	4613      	mov	r3, r2
 800b920:	707b      	strb	r3, [r7, #1]


	uint32_t    pll_period_us = 0;
 800b922:	2300      	movs	r3, #0
 800b924:	61bb      	str	r3, [r7, #24]
	int64_t     tmp_long_int  = 0;
 800b926:	f04f 0200 	mov.w	r2, #0
 800b92a:	f04f 0300 	mov.w	r3, #0
 800b92e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int32_t     range_mm      = 0;
 800b932:	2300      	movs	r3, #0
 800b934:	61fb      	str	r3, [r7, #28]
	int32_t     range_mm_10   = 0;
 800b936:	2300      	movs	r3, #0
 800b938:	60fb      	str	r3, [r7, #12]



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800b93a:	88fb      	ldrh	r3, [r7, #6]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7ff fce8 	bl	800b312 <VL53LX_calc_pll_period_us>
 800b942:	61b8      	str	r0, [r7, #24]



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800b944:	88b8      	ldrh	r0, [r7, #4]
 800b946:	f04f 0100 	mov.w	r1, #0
 800b94a:	887a      	ldrh	r2, [r7, #2]
 800b94c:	f04f 0300 	mov.w	r3, #0
 800b950:	1a84      	subs	r4, r0, r2
 800b952:	eb61 0503 	sbc.w	r5, r1, r3
 800b956:	e9c7 4504 	strd	r4, r5, [r7, #16]



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	461a      	mov	r2, r3
 800b95e:	f04f 0300 	mov.w	r3, #0
 800b962:	6979      	ldr	r1, [r7, #20]
 800b964:	fb02 f001 	mul.w	r0, r2, r1
 800b968:	6939      	ldr	r1, [r7, #16]
 800b96a:	fb03 f101 	mul.w	r1, r3, r1
 800b96e:	4401      	add	r1, r0
 800b970:	6938      	ldr	r0, [r7, #16]
 800b972:	fba0 2302 	umull	r2, r3, r0, r2
 800b976:	4419      	add	r1, r3
 800b978:	460b      	mov	r3, r1
 800b97a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800b97e:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800b982:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b986:	2a00      	cmp	r2, #0
 800b988:	f173 0100 	sbcs.w	r1, r3, #0
 800b98c:	da06      	bge.n	800b99c <VL53LX_range_maths+0x98>
 800b98e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b992:	f04f 0100 	mov.w	r1, #0
 800b996:	1812      	adds	r2, r2, r0
 800b998:	eb41 0303 	adc.w	r3, r1, r3
 800b99c:	f04f 0000 	mov.w	r0, #0
 800b9a0:	f04f 0100 	mov.w	r1, #0
 800b9a4:	0a50      	lsrs	r0, r2, #9
 800b9a6:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800b9aa:	1259      	asrs	r1, r3, #9
 800b9ac:	e9c7 0104 	strd	r0, r1, [r7, #16]



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	f249 2257 	movw	r2, #37463	; 0x9257
 800b9b6:	fb02 f203 	mul.w	r2, r2, r3
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	2100      	movs	r1, #0
 800b9be:	fb01 f303 	mul.w	r3, r1, r3
 800b9c2:	18d1      	adds	r1, r2, r3
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	f249 2257 	movw	r2, #37463	; 0x9257
 800b9ca:	fba3 2302 	umull	r2, r3, r3, r2
 800b9ce:	4419      	add	r1, r3
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800b9d6:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800b9da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b9de:	2a00      	cmp	r2, #0
 800b9e0:	f173 0100 	sbcs.w	r1, r3, #0
 800b9e4:	da05      	bge.n	800b9f2 <VL53LX_range_maths+0xee>
 800b9e6:	4832      	ldr	r0, [pc, #200]	; (800bab0 <VL53LX_range_maths+0x1ac>)
 800b9e8:	f04f 0100 	mov.w	r1, #0
 800b9ec:	1812      	adds	r2, r2, r0
 800b9ee:	eb41 0303 	adc.w	r3, r1, r3
 800b9f2:	f04f 0000 	mov.w	r0, #0
 800b9f6:	f04f 0100 	mov.w	r1, #0
 800b9fa:	0d90      	lsrs	r0, r2, #22
 800b9fc:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800ba00:	1599      	asrs	r1, r3, #22
 800ba02:	e9c7 0104 	strd	r0, r1, [r7, #16]


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba0a:	4413      	add	r3, r2
 800ba0c:	61fb      	str	r3, [r7, #28]


	range_mm *= gain_factor;
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba12:	fb02 f303 	mul.w	r3, r2, r3
 800ba16:	61fb      	str	r3, [r7, #28]
	range_mm += 0x0400;
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba1e:	61fb      	str	r3, [r7, #28]
	range_mm /= 0x0800;
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	da01      	bge.n	800ba2a <VL53LX_range_maths+0x126>
 800ba26:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ba2a:	12db      	asrs	r3, r3, #11
 800ba2c:	61fb      	str	r3, [r7, #28]


	if (fractional_bits == 0) {
 800ba2e:	787b      	ldrb	r3, [r7, #1]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d130      	bne.n	800ba96 <VL53LX_range_maths+0x192>
		range_mm_10 = range_mm * 10;
 800ba34:	69fa      	ldr	r2, [r7, #28]
 800ba36:	4613      	mov	r3, r2
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	4413      	add	r3, r2
 800ba3c:	005b      	lsls	r3, r3, #1
 800ba3e:	60fb      	str	r3, [r7, #12]
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	da00      	bge.n	800ba48 <VL53LX_range_maths+0x144>
 800ba46:	3303      	adds	r3, #3
 800ba48:	109b      	asrs	r3, r3, #2
 800ba4a:	60fb      	str	r3, [r7, #12]
		if ((range_mm_10 % 10) < 5)
 800ba4c:	68f9      	ldr	r1, [r7, #12]
 800ba4e:	4b19      	ldr	r3, [pc, #100]	; (800bab4 <VL53LX_range_maths+0x1b0>)
 800ba50:	fb83 2301 	smull	r2, r3, r3, r1
 800ba54:	109a      	asrs	r2, r3, #2
 800ba56:	17cb      	asrs	r3, r1, #31
 800ba58:	1ad2      	subs	r2, r2, r3
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	4413      	add	r3, r2
 800ba60:	005b      	lsls	r3, r3, #1
 800ba62:	1aca      	subs	r2, r1, r3
 800ba64:	2a04      	cmp	r2, #4
 800ba66:	dc09      	bgt.n	800ba7c <VL53LX_range_maths+0x178>
			range_mm = (int16_t)(range_mm_10 / 10);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	4a12      	ldr	r2, [pc, #72]	; (800bab4 <VL53LX_range_maths+0x1b0>)
 800ba6c:	fb82 1203 	smull	r1, r2, r2, r3
 800ba70:	1092      	asrs	r2, r2, #2
 800ba72:	17db      	asrs	r3, r3, #31
 800ba74:	1ad3      	subs	r3, r2, r3
 800ba76:	b21b      	sxth	r3, r3
 800ba78:	61fb      	str	r3, [r7, #28]
 800ba7a:	e014      	b.n	800baa6 <VL53LX_range_maths+0x1a2>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	4a0d      	ldr	r2, [pc, #52]	; (800bab4 <VL53LX_range_maths+0x1b0>)
 800ba80:	fb82 1203 	smull	r1, r2, r2, r3
 800ba84:	1092      	asrs	r2, r2, #2
 800ba86:	17db      	asrs	r3, r3, #31
 800ba88:	1ad3      	subs	r3, r2, r3
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	b21b      	sxth	r3, r3
 800ba92:	61fb      	str	r3, [r7, #28]
 800ba94:	e007      	b.n	800baa6 <VL53LX_range_maths+0x1a2>
	} else if (fractional_bits == 1)
 800ba96:	787b      	ldrb	r3, [r7, #1]
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d104      	bne.n	800baa6 <VL53LX_range_maths+0x1a2>
		range_mm = range_mm / (0x01 << 1);
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	0fda      	lsrs	r2, r3, #31
 800baa0:	4413      	add	r3, r2
 800baa2:	105b      	asrs	r3, r3, #1
 800baa4:	61fb      	str	r3, [r7, #28]

	return range_mm;
 800baa6:	69fb      	ldr	r3, [r7, #28]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3724      	adds	r7, #36	; 0x24
 800baac:	46bd      	mov	sp, r7
 800baae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bab0:	003fffff 	.word	0x003fffff
 800bab4:	66666667 	.word	0x66666667

0800bab8 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	4603      	mov	r3, r0
 800bac0:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800bac2:	2300      	movs	r3, #0
 800bac4:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800bac6:	79fb      	ldrb	r3, [r7, #7]
 800bac8:	3301      	adds	r3, #1
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	005b      	lsls	r3, r3, #1
 800bace:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800bad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3714      	adds	r7, #20
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800bade:	b480      	push	{r7}
 800bae0:	b083      	sub	sp, #12
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53LX_p_015 =
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	781a      	ldrb	r2, [r3, #0]
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	7a5a      	ldrb	r2, [r3, #9]
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	685a      	ldr	r2, [r3, #4]
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	605a      	str	r2, [r3, #4]
}
 800bb4e:	bf00      	nop
 800bb50:	370c      	adds	r7, #12
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	b087      	sub	sp, #28
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	60f8      	str	r0, [r7, #12]
 800bb62:	460b      	mov	r3, r1
 800bb64:	607a      	str	r2, [r7, #4]
 800bb66:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2203      	movs	r2, #3
 800bb70:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2203      	movs	r2, #3
 800bb76:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2200      	movs	r2, #0
 800bb82:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2218      	movs	r2, #24
 800bb8e:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800bb90:	897b      	ldrh	r3, [r7, #10]
 800bb92:	b2da      	uxtb	r2, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53LX_p_005                       = 0;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53LX_p_015                = 0;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53LX_p_028             = 0;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bc2e:	2300      	movs	r3, #0
 800bc30:	82fb      	strh	r3, [r7, #22]
 800bc32:	e009      	b.n	800bc48 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800bc34:	8afb      	ldrh	r3, [r7, #22]
 800bc36:	8afa      	ldrh	r2, [r7, #22]
 800bc38:	b2d1      	uxtb	r1, r2
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	460a      	mov	r2, r1
 800bc40:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bc42:	8afb      	ldrh	r3, [r7, #22]
 800bc44:	3301      	adds	r3, #1
 800bc46:	82fb      	strh	r3, [r7, #22]
 800bc48:	8afb      	ldrh	r3, [r7, #22]
 800bc4a:	2b05      	cmp	r3, #5
 800bc4c:	d9f2      	bls.n	800bc34 <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bc4e:	2300      	movs	r3, #0
 800bc50:	82fb      	strh	r3, [r7, #22]
 800bc52:	e007      	b.n	800bc64 <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800bc54:	8afb      	ldrh	r3, [r7, #22]
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	4413      	add	r3, r2
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bc5e:	8afb      	ldrh	r3, [r7, #22]
 800bc60:	3301      	adds	r3, #1
 800bc62:	82fb      	strh	r3, [r7, #22]
 800bc64:	8afb      	ldrh	r3, [r7, #22]
 800bc66:	2b05      	cmp	r3, #5
 800bc68:	d9f4      	bls.n	800bc54 <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	82fb      	strh	r3, [r7, #22]
 800bc6e:	e013      	b.n	800bc98 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800bc70:	8afa      	ldrh	r2, [r7, #22]
 800bc72:	897b      	ldrh	r3, [r7, #10]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d206      	bcs.n	800bc86 <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800bc78:	8afa      	ldrh	r2, [r7, #22]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	3206      	adds	r2, #6
 800bc7e:	68f9      	ldr	r1, [r7, #12]
 800bc80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bc84:	e005      	b.n	800bc92 <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800bc86:	8afa      	ldrh	r2, [r7, #22]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	3206      	adds	r2, #6
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800bc92:	8afb      	ldrh	r3, [r7, #22]
 800bc94:	3301      	adds	r3, #1
 800bc96:	82fb      	strh	r3, [r7, #22]
 800bc98:	8afb      	ldrh	r3, [r7, #22]
 800bc9a:	2b17      	cmp	r3, #23
 800bc9c:	d9e8      	bls.n	800bc70 <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800bc9e:	bf00      	nop
 800bca0:	bf00      	nop
 800bca2:	371c      	adds	r7, #28
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
 800bcb8:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800bcba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	da10      	bge.n	800bce4 <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800bcc2:	7bfb      	ldrb	r3, [r7, #15]
 800bcc4:	43db      	mvns	r3, r3
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	f003 0307 	and.w	r3, r3, #7
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	3308      	adds	r3, #8
 800bcd0:	b2da      	uxtb	r2, r3
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800bcd6:	7bfb      	ldrb	r3, [r7, #15]
 800bcd8:	3b80      	subs	r3, #128	; 0x80
 800bcda:	10db      	asrs	r3, r3, #3
 800bcdc:	b2da      	uxtb	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800bce2:	e00c      	b.n	800bcfe <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800bce4:	7bfb      	ldrb	r3, [r7, #15]
 800bce6:	f003 0307 	and.w	r3, r3, #7
 800bcea:	b2da      	uxtb	r2, r3
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
 800bcf2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800bcf6:	10db      	asrs	r3, r3, #3
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	701a      	strb	r2, [r3, #0]
}
 800bcfe:	bf00      	nop
 800bd00:	3714      	adds	r7, #20
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr

0800bd0a <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bd0a:	b480      	push	{r7}
 800bd0c:	b085      	sub	sp, #20
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800bd12:	2300      	movs	r3, #0
 800bd14:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800bd16:	2300      	movs	r3, #0
 800bd18:	73fb      	strb	r3, [r7, #15]
 800bd1a:	e02c      	b.n	800bd76 <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d009      	beq.n	800bd36 <VL53LX_hist_find_min_max_bin_values+0x2c>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800bd28:	7bf9      	ldrb	r1, [r7, #15]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	3106      	adds	r1, #6
 800bd2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	db07      	blt.n	800bd46 <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800bd36:	7bfa      	ldrb	r2, [r7, #15]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	3206      	adds	r2, #6
 800bd3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800bd46:	7bfb      	ldrb	r3, [r7, #15]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d009      	beq.n	800bd60 <VL53LX_hist_find_min_max_bin_values+0x56>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800bd52:	7bf9      	ldrb	r1, [r7, #15]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	3106      	adds	r1, #6
 800bd58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	dc07      	bgt.n	800bd70 <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800bd60:	7bfa      	ldrb	r2, [r7, #15]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	3206      	adds	r2, #6
 800bd66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800bd70:	7bfb      	ldrb	r3, [r7, #15]
 800bd72:	3301      	adds	r3, #1
 800bd74:	73fb      	strb	r3, [r7, #15]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	7a9b      	ldrb	r3, [r3, #10]
 800bd7a:	7bfa      	ldrb	r2, [r7, #15]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d3cd      	bcc.n	800bd1c <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800bd80:	bf00      	nop
 800bd82:	bf00      	nop
 800bd84:	3714      	adds	r7, #20
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b085      	sub	sp, #20
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800bd96:	2300      	movs	r3, #0
 800bd98:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	7adb      	ldrb	r3, [r3, #11]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d03a      	beq.n	800be18 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	73fb      	strb	r3, [r7, #15]
 800bdb8:	e00e      	b.n	800bdd8 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bdc0:	7bf9      	ldrb	r1, [r7, #15]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	3106      	adds	r1, #6
 800bdc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bdca:	441a      	add	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800bdd2:	7bfb      	ldrb	r3, [r7, #15]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	73fb      	strb	r3, [r7, #15]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	7adb      	ldrb	r3, [r3, #11]
 800bddc:	7bfa      	ldrb	r2, [r7, #15]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d3eb      	bcc.n	800bdba <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	7ad2      	ldrb	r2, [r2, #11]
 800bdf8:	0852      	lsrs	r2, r2, #1
 800bdfa:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800bdfc:	441a      	add	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800be0e:	fb93 f2f2 	sdiv	r2, r3, r2
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800be18:	bf00      	nop
 800be1a:	3714      	adds	r7, #20
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800be24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be28:	b096      	sub	sp, #88	; 0x58
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6339      	str	r1, [r7, #48]	; 0x30
 800be2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be30:	62bb      	str	r3, [r7, #40]	; 0x28
 800be32:	4603      	mov	r3, r0
 800be34:	86fb      	strh	r3, [r7, #54]	; 0x36



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800be36:	2300      	movs	r3, #0
 800be38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	uint32_t    pll_period_us       = 0;
 800be3c:	2300      	movs	r3, #0
 800be3e:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t    periods_elapsed     = 0;
 800be40:	2300      	movs	r3, #0
 800be42:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint32_t    tmp32               = 0;
 800be44:	2300      	movs	r3, #0
 800be46:	657b      	str	r3, [r7, #84]	; 0x54
	uint64_t    tmp64               = 0;
 800be48:	f04f 0200 	mov.w	r2, #0
 800be4c:	f04f 0300 	mov.w	r3, #0
 800be50:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint32_t    amb_thres_delta     = 0;
 800be54:	2300      	movs	r3, #0
 800be56:	63bb      	str	r3, [r7, #56]	; 0x38

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800be58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be5a:	2300      	movs	r3, #0
 800be5c:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800be5e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be60:	2300      	movs	r3, #0
 800be62:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800be64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be66:	2300      	movs	r3, #0
 800be68:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800be6a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be6c:	2300      	movs	r3, #0
 800be6e:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800be70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be72:	2300      	movs	r3, #0
 800be74:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800be76:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be78:	2300      	movs	r3, #0
 800be7a:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800be7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be7e:	2300      	movs	r3, #0
 800be80:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53LX_p_022            = 0;
 800be82:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be84:	2300      	movs	r3, #0
 800be86:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800be88:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800be8a:	2300      	movs	r3, #0
 800be8c:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800be8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be90:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800be94:	2b00      	cmp	r3, #0
 800be96:	f000 80ab 	beq.w	800bff0 <VL53LX_f_001+0x1cc>
		(pbins->total_periods_elapsed      != 0)) {
 800be9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f000 80a5 	beq.w	800bff0 <VL53LX_f_001+0x1cc>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800beac:	4618      	mov	r0, r3
 800beae:	f7ff fa30 	bl	800b312 <VL53LX_calc_pll_period_us>
 800beb2:	6438      	str	r0, [r7, #64]	; 0x40



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800beb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beba:	3301      	adds	r3, #1
 800bebc:	63fb      	str	r3, [r7, #60]	; 0x3c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800bebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bec4:	2110      	movs	r1, #16
 800bec6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bec8:	f7ff fa3a 	bl	800b340 <VL53LX_duration_maths>
 800becc:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800bece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bed0:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800bed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800bed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4619      	mov	r1, r3
 800bede:	4610      	mov	r0, r2
 800bee0:	f7ff fc97 	bl	800b812 <VL53LX_rate_maths>
 800bee4:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800bee6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bee8:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800beea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beec:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800bef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef2:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800bef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	461a      	mov	r2, r3
 800befc:	f7ff fa7a 	bl	800b3f4 <VL53LX_events_per_spad_maths>
 800bf00:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800bf02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf04:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800bf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf08:	8adb      	ldrh	r3, [r3, #22]
 800bf0a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bf0c:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800bf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf10:	8adb      	ldrh	r3, [r3, #22]
 800bf12:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bf14:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800bf16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf18:	695b      	ldr	r3, [r3, #20]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d068      	beq.n	800bff0 <VL53LX_f_001+0x1cc>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800bf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf20:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	f04f 0300 	mov.w	r3, #0
 800bf28:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64  *= 1000;
 800bf2c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800bf30:	4622      	mov	r2, r4
 800bf32:	462b      	mov	r3, r5
 800bf34:	f04f 0000 	mov.w	r0, #0
 800bf38:	f04f 0100 	mov.w	r1, #0
 800bf3c:	0159      	lsls	r1, r3, #5
 800bf3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bf42:	0150      	lsls	r0, r2, #5
 800bf44:	4602      	mov	r2, r0
 800bf46:	460b      	mov	r3, r1
 800bf48:	1b12      	subs	r2, r2, r4
 800bf4a:	eb63 0305 	sbc.w	r3, r3, r5
 800bf4e:	f04f 0000 	mov.w	r0, #0
 800bf52:	f04f 0100 	mov.w	r1, #0
 800bf56:	0099      	lsls	r1, r3, #2
 800bf58:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800bf5c:	0090      	lsls	r0, r2, #2
 800bf5e:	4602      	mov	r2, r0
 800bf60:	460b      	mov	r3, r1
 800bf62:	1912      	adds	r2, r2, r4
 800bf64:	eb45 0303 	adc.w	r3, r5, r3
 800bf68:	f04f 0000 	mov.w	r0, #0
 800bf6c:	f04f 0100 	mov.w	r1, #0
 800bf70:	00d9      	lsls	r1, r3, #3
 800bf72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bf76:	00d0      	lsls	r0, r2, #3
 800bf78:	4602      	mov	r2, r0
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64 <<= (11+1);
 800bf80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bf84:	f04f 0000 	mov.w	r0, #0
 800bf88:	f04f 0100 	mov.w	r1, #0
 800bf8c:	0319      	lsls	r1, r3, #12
 800bf8e:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800bf92:	0310      	lsls	r0, r2, #12
 800bf94:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
			tmp32 = pdata->VL53LX_p_033/2;
 800bf98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf9a:	695b      	ldr	r3, [r3, #20]
 800bf9c:	085b      	lsrs	r3, r3, #1
 800bf9e:	657b      	str	r3, [r7, #84]	; 0x54
			tmp64 += (uint64_t)tmp32;
 800bfa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f04f 0100 	mov.w	r1, #0
 800bfa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bfac:	eb12 0800 	adds.w	r8, r2, r0
 800bfb0:	eb43 0901 	adc.w	r9, r3, r1
 800bfb4:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
			tmp64 = do_division_u(tmp64,
 800bfb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfba:	695b      	ldr	r3, [r3, #20]
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	f04f 0300 	mov.w	r3, #0
 800bfc2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bfc6:	f7f4 f9ab 	bl	8000320 <__aeabi_uldivmod>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	460b      	mov	r3, r1
 800bfce:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800bfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd4:	8adb      	ldrh	r3, [r3, #22]
 800bfd6:	b298      	uxth	r0, r3
 800bfd8:	f04f 0100 	mov.w	r1, #0
 800bfdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bfe0:	428b      	cmp	r3, r1
 800bfe2:	bf08      	it	eq
 800bfe4:	4282      	cmpeq	r2, r0
 800bfe6:	d203      	bcs.n	800bff0 <VL53LX_f_001+0x1cc>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800bfe8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bfec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bfee:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800bff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff2:	881b      	ldrh	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f000 8203 	beq.w	800c400 <VL53LX_f_001+0x5dc>
		(pbins->VL53LX_p_015        != 0) &&
 800bffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800c000:	2b00      	cmp	r3, #0
 800c002:	f000 81fd 	beq.w	800c400 <VL53LX_f_001+0x5dc>
		(pcal->ref_reflectance_pc          != 0) &&
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f000 81f8 	beq.w	800c400 <VL53LX_f_001+0x5dc>
		(pbins->total_periods_elapsed      != 0)) {
 800c010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800c016:	2b00      	cmp	r3, #0
 800c018:	f000 81f2 	beq.w	800c400 <VL53LX_f_001+0x5dc>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800c01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01e:	885b      	ldrh	r3, [r3, #2]
 800c020:	b29a      	uxth	r2, r3
 800c022:	f04f 0300 	mov.w	r3, #0
 800c026:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64 *= (1000 * 256);
 800c02a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800c02e:	4622      	mov	r2, r4
 800c030:	462b      	mov	r3, r5
 800c032:	f04f 0000 	mov.w	r0, #0
 800c036:	f04f 0100 	mov.w	r1, #0
 800c03a:	0159      	lsls	r1, r3, #5
 800c03c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c040:	0150      	lsls	r0, r2, #5
 800c042:	4602      	mov	r2, r0
 800c044:	460b      	mov	r3, r1
 800c046:	1b12      	subs	r2, r2, r4
 800c048:	eb63 0305 	sbc.w	r3, r3, r5
 800c04c:	f04f 0000 	mov.w	r0, #0
 800c050:	f04f 0100 	mov.w	r1, #0
 800c054:	0099      	lsls	r1, r3, #2
 800c056:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c05a:	0090      	lsls	r0, r2, #2
 800c05c:	4602      	mov	r2, r0
 800c05e:	460b      	mov	r3, r1
 800c060:	1912      	adds	r2, r2, r4
 800c062:	eb45 0303 	adc.w	r3, r5, r3
 800c066:	f04f 0000 	mov.w	r0, #0
 800c06a:	f04f 0100 	mov.w	r1, #0
 800c06e:	02d9      	lsls	r1, r3, #11
 800c070:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800c074:	02d0      	lsls	r0, r2, #11
 800c076:	4602      	mov	r2, r0
 800c078:	460b      	mov	r3, r1
 800c07a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp32  = pcal->ref__actual_effective_spads/2;
 800c07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c080:	881b      	ldrh	r3, [r3, #0]
 800c082:	085b      	lsrs	r3, r3, #1
 800c084:	b29b      	uxth	r3, r3
 800c086:	657b      	str	r3, [r7, #84]	; 0x54
		tmp64 += (uint64_t)tmp32;
 800c088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c08a:	4618      	mov	r0, r3
 800c08c:	f04f 0100 	mov.w	r1, #0
 800c090:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c094:	eb12 0a00 	adds.w	sl, r2, r0
 800c098:	eb43 0b01 	adc.w	fp, r3, r1
 800c09c:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a2:	881b      	ldrh	r3, [r3, #0]
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	f04f 0300 	mov.w	r3, #0
 800c0aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c0ae:	f7f4 f937 	bl	8000320 <__aeabi_uldivmod>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800c0ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0be:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800c0c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0c2:	691b      	ldr	r3, [r3, #16]
 800c0c4:	011a      	lsls	r2, r3, #4
 800c0c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0c8:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c0ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	f04f 0300 	mov.w	r3, #0
 800c0d4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800c0d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0da:	695b      	ldr	r3, [r3, #20]
 800c0dc:	461a      	mov	r2, r3
 800c0de:	f04f 0300 	mov.w	r3, #0
 800c0e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c0e4:	fb02 f001 	mul.w	r0, r2, r1
 800c0e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c0ea:	fb03 f101 	mul.w	r1, r3, r1
 800c0ee:	4401      	add	r1, r0
 800c0f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c0f2:	fba0 2302 	umull	r2, r3, r0, r2
 800c0f6:	4419      	add	r1, r3
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c0fe:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c102:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c104:	8b5b      	ldrh	r3, [r3, #26]
 800c106:	b29a      	uxth	r2, r3
 800c108:	f04f 0300 	mov.w	r3, #0
 800c10c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c10e:	fb02 f001 	mul.w	r0, r2, r1
 800c112:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c114:	fb03 f101 	mul.w	r1, r3, r1
 800c118:	4401      	add	r1, r0
 800c11a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c11c:	fba0 2302 	umull	r2, r3, r0, r2
 800c120:	4419      	add	r1, r3
 800c122:	460b      	mov	r3, r1
 800c124:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c128:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800c12c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c130:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800c134:	6239      	str	r1, [r7, #32]
 800c136:	f143 0300 	adc.w	r3, r3, #0
 800c13a:	627b      	str	r3, [r7, #36]	; 0x24
 800c13c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c140:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800c144:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c148:	f04f 0200 	mov.w	r2, #0
 800c14c:	f04f 0300 	mov.w	r3, #0
 800c150:	0cc2      	lsrs	r2, r0, #19
 800c152:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800c156:	0ccb      	lsrs	r3, r1, #19
 800c158:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  +=  500;
 800c15c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c160:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800c164:	61b9      	str	r1, [r7, #24]
 800c166:	f143 0300 	adc.w	r3, r3, #0
 800c16a:	61fb      	str	r3, [r7, #28]
 800c16c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c170:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64   = do_division_u(tmp64, 1000);
 800c174:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c17c:	f04f 0300 	mov.w	r3, #0
 800c180:	f7f4 f8ce 	bl	8000320 <__aeabi_uldivmod>
 800c184:	4602      	mov	r2, r0
 800c186:	460b      	mov	r3, r1
 800c188:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800c18c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c190:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c194:	f04f 0100 	mov.w	r1, #0
 800c198:	4299      	cmp	r1, r3
 800c19a:	bf08      	it	eq
 800c19c:	4290      	cmpeq	r0, r2
 800c19e:	d205      	bcs.n	800c1ac <VL53LX_f_001+0x388>
			tmp64 = 0x00FFFFFF;
 800c1a0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c1a4:	f04f 0300 	mov.w	r3, #0
 800c1a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800c1ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1b0:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c1b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	f04f 0300 	mov.w	r3, #0
 800c1bc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800c1c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1c2:	691b      	ldr	r3, [r3, #16]
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	f04f 0300 	mov.w	r3, #0
 800c1ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c1cc:	fb02 f001 	mul.w	r0, r2, r1
 800c1d0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c1d2:	fb03 f101 	mul.w	r1, r3, r1
 800c1d6:	4401      	add	r1, r0
 800c1d8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c1da:	fba0 2302 	umull	r2, r3, r0, r2
 800c1de:	4419      	add	r1, r3
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c1e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c1ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1ec:	8b5b      	ldrh	r3, [r3, #26]
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	f04f 0300 	mov.w	r3, #0
 800c1f4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c1f6:	fb02 f001 	mul.w	r0, r2, r1
 800c1fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c1fc:	fb03 f101 	mul.w	r1, r3, r1
 800c200:	4401      	add	r1, r0
 800c202:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c204:	fba0 2302 	umull	r2, r3, r0, r2
 800c208:	4419      	add	r1, r3
 800c20a:	460b      	mov	r3, r1
 800c20c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c210:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800c214:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c218:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800c21c:	6139      	str	r1, [r7, #16]
 800c21e:	f143 0300 	adc.w	r3, r3, #0
 800c222:	617b      	str	r3, [r7, #20]
 800c224:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c228:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800c22c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c230:	f04f 0200 	mov.w	r2, #0
 800c234:	f04f 0300 	mov.w	r3, #0
 800c238:	0cc2      	lsrs	r2, r0, #19
 800c23a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800c23e:	0ccb      	lsrs	r3, r1, #19
 800c240:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48



		tmp64  *= ((uint64_t)target_reflectance *
 800c244:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 800c246:	f04f 0100 	mov.w	r1, #0
				   (uint64_t)pcal->coverglass_transmission);
 800c24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24c:	891b      	ldrh	r3, [r3, #8]
 800c24e:	b29a      	uxth	r2, r3
 800c250:	f04f 0300 	mov.w	r3, #0
		tmp64  *= ((uint64_t)target_reflectance *
 800c254:	fb02 f501 	mul.w	r5, r2, r1
 800c258:	fb00 f403 	mul.w	r4, r0, r3
 800c25c:	442c      	add	r4, r5
 800c25e:	fba0 2302 	umull	r2, r3, r0, r2
 800c262:	18e1      	adds	r1, r4, r3
 800c264:	460b      	mov	r3, r1
 800c266:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c268:	fb02 f001 	mul.w	r0, r2, r1
 800c26c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c26e:	fb03 f101 	mul.w	r1, r3, r1
 800c272:	4401      	add	r1, r0
 800c274:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c276:	fba0 2302 	umull	r2, r3, r0, r2
 800c27a:	4419      	add	r1, r3
 800c27c:	460b      	mov	r3, r1
 800c27e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c282:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800c286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c288:	88db      	ldrh	r3, [r3, #6]
 800c28a:	b298      	uxth	r0, r3
 800c28c:	f04f 0100 	mov.w	r1, #0
 800c290:	f04f 0200 	mov.w	r2, #0
 800c294:	f04f 0300 	mov.w	r3, #0
 800c298:	01cb      	lsls	r3, r1, #7
 800c29a:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 800c29e:	01c2      	lsls	r2, r0, #7
 800c2a0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c2a4:	1884      	adds	r4, r0, r2
 800c2a6:	60bc      	str	r4, [r7, #8]
 800c2a8:	eb41 0303 	adc.w	r3, r1, r3
 800c2ac:	60fb      	str	r3, [r7, #12]
 800c2ae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c2b2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800c2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b8:	88db      	ldrh	r3, [r3, #6]
 800c2ba:	b298      	uxth	r0, r3
 800c2bc:	f04f 0100 	mov.w	r1, #0
 800c2c0:	f04f 0200 	mov.w	r2, #0
 800c2c4:	f04f 0300 	mov.w	r3, #0
 800c2c8:	020b      	lsls	r3, r1, #8
 800c2ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c2ce:	0202      	lsls	r2, r0, #8
 800c2d0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c2d4:	f7f4 f824 	bl	8000320 <__aeabi_uldivmod>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	460b      	mov	r3, r1
 800c2dc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800c2e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c2e4:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800c2e8:	6039      	str	r1, [r7, #0]
 800c2ea:	f143 0300 	adc.w	r3, r3, #0
 800c2ee:	607b      	str	r3, [r7, #4]
 800c2f0:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c2f4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64, 1000);
 800c2f8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c2fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c300:	f04f 0300 	mov.w	r3, #0
 800c304:	f7f4 f80c 	bl	8000320 <__aeabi_uldivmod>
 800c308:	4602      	mov	r2, r0
 800c30a:	460b      	mov	r3, r1
 800c30c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800c310:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c314:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c318:	f04f 0100 	mov.w	r1, #0
 800c31c:	4299      	cmp	r1, r3
 800c31e:	bf08      	it	eq
 800c320:	4290      	cmpeq	r0, r2
 800c322:	d205      	bcs.n	800c330 <VL53LX_f_001+0x50c>
			tmp64 = 0x00FFFFFF;
 800c324:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c328:	f04f 0300 	mov.w	r3, #0
 800c32c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800c330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c334:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800c336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c338:	69db      	ldr	r3, [r3, #28]
 800c33a:	021b      	lsls	r3, r3, #8
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7ff f8e2 	bl	800b506 <VL53LX_isqrt>
 800c342:	6578      	str	r0, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800c344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c346:	785b      	ldrb	r3, [r3, #1]
 800c348:	461a      	mov	r2, r3
 800c34a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c34c:	fb02 f303 	mul.w	r3, r2, r3
 800c350:	657b      	str	r3, [r7, #84]	; 0x54



		if (pdata->VL53LX_p_028 <
 800c352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c354:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800c356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c358:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d20f      	bcs.n	800c37e <VL53LX_f_001+0x55a>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800c35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800c364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c366:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800c368:	1ad3      	subs	r3, r2, r3
 800c36a:	63bb      	str	r3, [r7, #56]	; 0x38


			amb_thres_delta <<= 8;
 800c36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36e:	021b      	lsls	r3, r3, #8
 800c370:	63bb      	str	r3, [r7, #56]	; 0x38

			if (tmp32 < amb_thres_delta)
 800c372:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c376:	429a      	cmp	r2, r3
 800c378:	d201      	bcs.n	800c37e <VL53LX_f_001+0x55a>
				tmp32 = amb_thres_delta;
 800c37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37c:	657b      	str	r3, [r7, #84]	; 0x54
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800c37e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c380:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800c382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c384:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c386:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38a:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c38c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c38e:	f000 f83e 	bl	800c40e <VL53LX_f_002>
 800c392:	4603      	mov	r3, r0
 800c394:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800c396:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c398:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800c39a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c39c:	6a1b      	ldr	r3, [r3, #32]
 800c39e:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800c3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a2:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3aa:	fb02 f303 	mul.w	r3, r2, r3
 800c3ae:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 += (1 << 3);
 800c3b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3b2:	3308      	adds	r3, #8
 800c3b4:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 /= (1 << 4);
 800c3b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3b8:	091b      	lsrs	r3, r3, #4
 800c3ba:	657b      	str	r3, [r7, #84]	; 0x54

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800c3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3be:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800c3c0:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c4:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c3c6:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ca:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c3cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c3ce:	f000 f81e 	bl	800c40e <VL53LX_f_002>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800c3d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3d8:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800c3da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3dc:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800c3e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3e2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	da05      	bge.n	800c3f6 <VL53LX_f_001+0x5d2>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800c3ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3ec:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800c3f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3f2:	801a      	strh	r2, [r3, #0]
 800c3f4:	e004      	b.n	800c400 <VL53LX_f_001+0x5dc>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800c3f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3f8:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800c3fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3fe:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800c400:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47

}
 800c404:	4618      	mov	r0, r3
 800c406:	3758      	adds	r7, #88	; 0x58
 800c408:	46bd      	mov	sp, r7
 800c40a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c40e <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b086      	sub	sp, #24
 800c412:	af00      	add	r7, sp, #0
 800c414:	60f8      	str	r0, [r7, #12]
 800c416:	60b9      	str	r1, [r7, #8]
 800c418:	607a      	str	r2, [r7, #4]
 800c41a:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800c41c:	2300      	movs	r3, #0
 800c41e:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800c420:	2300      	movs	r3, #0
 800c422:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	fb03 f303 	mul.w	r3, r3, r3
 800c430:	693a      	ldr	r2, [r7, #16]
 800c432:	4413      	add	r3, r2
 800c434:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800c436:	6938      	ldr	r0, [r7, #16]
 800c438:	f7ff f865 	bl	800b506 <VL53LX_isqrt>
 800c43c:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800c43e:	693a      	ldr	r2, [r7, #16]
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	4413      	add	r3, r2
 800c444:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	011b      	lsls	r3, r3, #4
 800c44a:	4618      	mov	r0, r3
 800c44c:	f7ff f85b 	bl	800b506 <VL53LX_isqrt>
 800c450:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	fb02 f303 	mul.w	r3, r2, r3
 800c45a:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d009      	beq.n	800c476 <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800c462:	697a      	ldr	r2, [r7, #20]
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	4413      	add	r3, r2
 800c468:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	005b      	lsls	r3, r3, #1
 800c46e:	697a      	ldr	r2, [r7, #20]
 800c470:	fbb2 f3f3 	udiv	r3, r2, r3
 800c474:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800c476:	697b      	ldr	r3, [r7, #20]

}
 800c478:	4618      	mov	r0, r3
 800c47a:	3718      	adds	r7, #24
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800c488:	2300      	movs	r3, #0
 800c48a:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2218      	movs	r2, #24
 800c490:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	73fb      	strb	r3, [r7, #15]
 800c4b6:	e01f      	b.n	800c4f8 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800c4b8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	4413      	add	r3, r2
 800c4be:	2200      	movs	r2, #0
 800c4c0:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800c4c2:	7bfb      	ldrb	r3, [r7, #15]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800c4ce:	7bfb      	ldrb	r3, [r7, #15]
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800c4da:	7bfa      	ldrb	r2, [r7, #15]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	322e      	adds	r2, #46	; 0x2e
 800c4e0:	2100      	movs	r1, #0
 800c4e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800c4e6:	7bfa      	ldrb	r2, [r7, #15]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	3246      	adds	r2, #70	; 0x46
 800c4ec:	2100      	movs	r1, #0
 800c4ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c4f2:	7bfb      	ldrb	r3, [r7, #15]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	73fb      	strb	r3, [r7, #15]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	785b      	ldrb	r3, [r3, #1]
 800c4fc:	7bfa      	ldrb	r2, [r7, #15]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d3da      	bcc.n	800c4b8 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2200      	movs	r2, #0
 800c506:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2208      	movs	r2, #8
 800c50e:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53LX_p_046             = 0;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800c520:	461a      	mov	r2, r3
 800c522:	2118      	movs	r1, #24
 800c524:	2000      	movs	r0, #0
 800c526:	f7ff fb18 	bl	800bb5a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800c530:	461a      	mov	r2, r3
 800c532:	2118      	movs	r1, #24
 800c534:	2000      	movs	r0, #0
 800c536:	f7ff fb10 	bl	800bb5a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800c540:	461a      	mov	r2, r3
 800c542:	2118      	movs	r1, #24
 800c544:	2000      	movs	r0, #0
 800c546:	f7ff fb08 	bl	800bb5a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800c550:	461a      	mov	r2, r3
 800c552:	2118      	movs	r1, #24
 800c554:	2000      	movs	r0, #0
 800c556:	f7ff fb00 	bl	800bb5a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800c560:	461a      	mov	r2, r3
 800c562:	2118      	movs	r1, #24
 800c564:	2000      	movs	r0, #0
 800c566:	f7ff faf8 	bl	800bb5a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800c56a:	bf00      	nop
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}

0800c572 <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c572:	b5b0      	push	{r4, r5, r7, lr}
 800c574:	b08c      	sub	sp, #48	; 0x30
 800c576:	af00      	add	r7, sp, #0
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
 800c57c:	461a      	mov	r2, r3
 800c57e:	4603      	mov	r3, r0
 800c580:	81fb      	strh	r3, [r7, #14]
 800c582:	4613      	mov	r3, r2
 800c584:	737b      	strb	r3, [r7, #13]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c586:	2300      	movs	r3, #0
 800c588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  lb            = 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t  VL53LX_p_001            = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int64_t  tmp          = 0;
 800c598:	f04f 0200 	mov.w	r2, #0
 800c59c:	f04f 0300 	mov.w	r3, #0
 800c5a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int32_t  amb_events   = 0;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	617b      	str	r3, [r7, #20]
	int32_t  VL53LX_p_018       = 0;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  samples      = 0;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800c5b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5b2:	7a5a      	ldrb	r2, [r3, #9]
 800c5b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5b6:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800c5b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ba:	7a1a      	ldrb	r2, [r3, #8]
 800c5bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5be:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800c5c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5c2:	7a9a      	ldrb	r2, [r3, #10]
 800c5c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5c6:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800c5c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ca:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c5ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5d0:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800c5d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5d4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7ff fa6d 	bl	800bab8 <VL53LX_decode_vcsel_period>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800c5e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5e4:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800c5e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c5f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800c5f6:	89fa      	ldrh	r2, [r7, #14]
 800c5f8:	f04f 0300 	mov.w	r3, #0
 800c5fc:	69f9      	ldr	r1, [r7, #28]
 800c5fe:	fb02 f001 	mul.w	r0, r2, r1
 800c602:	69b9      	ldr	r1, [r7, #24]
 800c604:	fb03 f101 	mul.w	r1, r3, r1
 800c608:	4401      	add	r1, r0
 800c60a:	69b8      	ldr	r0, [r7, #24]
 800c60c:	fba0 2302 	umull	r2, r3, r0, r2
 800c610:	4419      	add	r1, r3
 800c612:	460b      	mov	r3, r1
 800c614:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800c618:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp += 2048;
 800c61c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c620:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800c624:	f143 0500 	adc.w	r5, r3, #0
 800c628:	e9c7 4506 	strd	r4, r5, [r7, #24]
	tmp = do_division_s(tmp, 4096);
 800c62c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c630:	2a00      	cmp	r2, #0
 800c632:	f173 0100 	sbcs.w	r1, r3, #0
 800c636:	da06      	bge.n	800c646 <VL53LX_f_006+0xd4>
 800c638:	f640 70ff 	movw	r0, #4095	; 0xfff
 800c63c:	f04f 0100 	mov.w	r1, #0
 800c640:	1812      	adds	r2, r2, r0
 800c642:	eb41 0303 	adc.w	r3, r1, r3
 800c646:	f04f 0000 	mov.w	r0, #0
 800c64a:	f04f 0100 	mov.w	r1, #0
 800c64e:	0b10      	lsrs	r0, r2, #12
 800c650:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c654:	1319      	asrs	r1, r3, #12
 800c656:	e9c7 0106 	strd	r0, r1, [r7, #24]
	amb_events = (int32_t)tmp;
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	617b      	str	r3, [r7, #20]



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800c65e:	2300      	movs	r3, #0
 800c660:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c664:	e062      	b.n	800c72c <VL53LX_f_006+0x1ba>

		VL53LX_p_001 = lb >> 2;
 800c666:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c66a:	089b      	lsrs	r3, r3, #2
 800c66c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800c670:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c674:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c676:	4413      	add	r3, r2
 800c678:	7c9b      	ldrb	r3, [r3, #18]
 800c67a:	613b      	str	r3, [r7, #16]

		if (samples > 0) {
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	dd4f      	ble.n	800c722 <VL53LX_f_006+0x1b0>

			if (lb < pxtalk->VL53LX_p_021 &&
 800c682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c684:	7a9b      	ldrb	r3, [r3, #10]
 800c686:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d20f      	bcs.n	800c6ae <VL53LX_f_006+0x13c>
 800c68e:	7b7b      	ldrb	r3, [r7, #13]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00c      	beq.n	800c6ae <VL53LX_f_006+0x13c>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800c694:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c69a:	3206      	adds	r2, #6
 800c69c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	441a      	add	r2, r3
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	fb02 f303 	mul.w	r3, r2, r3
 800c6aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6ac:	e004      	b.n	800c6b8 <VL53LX_f_006+0x146>
			else
				VL53LX_p_018 = samples *  amb_events;
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	fb02 f303 	mul.w	r3, r2, r3
 800c6b6:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800c6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fe ff23 	bl	800b506 <VL53LX_isqrt>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018 += (samples/2);
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	0fda      	lsrs	r2, r3, #31
 800c6c8:	4413      	add	r3, r2
 800c6ca:	105b      	asrs	r3, r3, #1
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d0:	4413      	add	r3, r2
 800c6d2:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= samples;
 800c6d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	fb92 f3f3 	sdiv	r3, r2, r3
 800c6dc:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 *= ambient_threshold_sigma;
 800c6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e0:	68ba      	ldr	r2, [r7, #8]
 800c6e2:	fb02 f303 	mul.w	r3, r2, r3
 800c6e6:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += 8;
 800c6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ea:	3308      	adds	r3, #8
 800c6ec:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= 16;
 800c6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	da00      	bge.n	800c6f6 <VL53LX_f_006+0x184>
 800c6f4:	330f      	adds	r3, #15
 800c6f6:	111b      	asrs	r3, r3, #4
 800c6f8:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += amb_events;
 800c6fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	4413      	add	r3, r2
 800c700:	62bb      	str	r3, [r7, #40]	; 0x28

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800c702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	429a      	cmp	r2, r3
 800c708:	da01      	bge.n	800c70e <VL53LX_f_006+0x19c>
				VL53LX_p_018 = min_ambient_threshold_events;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	62bb      	str	r3, [r7, #40]	; 0x28

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800c70e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c714:	3216      	adds	r2, #22
 800c716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800c71c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c71e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c720:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800c722:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c726:	3301      	adds	r3, #1
 800c728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c72c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c72e:	7a9b      	ldrb	r3, [r3, #10]
 800c730:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c734:	429a      	cmp	r2, r3
 800c736:	d396      	bcc.n	800c666 <VL53LX_f_006+0xf4>

	}



	palgo->VL53LX_p_039 = 0;
 800c738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c73a:	2200      	movs	r2, #0
 800c73c:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800c73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c740:	7a1b      	ldrb	r3, [r3, #8]
 800c742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c746:	e033      	b.n	800c7b0 <VL53LX_f_006+0x23e>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800c748:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c74e:	3206      	adds	r2, #6
 800c750:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c754:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800c758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c75a:	3116      	adds	r1, #22
 800c75c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c760:	429a      	cmp	r2, r3
 800c762:	dd13      	ble.n	800c78c <VL53LX_f_006+0x21a>
			palgo->VL53LX_p_040[lb]      = 1;
 800c764:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c768:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c76a:	4413      	add	r3, r2
 800c76c:	2201      	movs	r2, #1
 800c76e:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800c770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c774:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c776:	4413      	add	r3, r2
 800c778:	2201      	movs	r2, #1
 800c77a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53LX_p_039++;
 800c77e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c780:	791b      	ldrb	r3, [r3, #4]
 800c782:	3301      	adds	r3, #1
 800c784:	b2da      	uxtb	r2, r3
 800c786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c788:	711a      	strb	r2, [r3, #4]
 800c78a:	e00c      	b.n	800c7a6 <VL53LX_f_006+0x234>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800c78c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c792:	4413      	add	r3, r2
 800c794:	2200      	movs	r2, #0
 800c796:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800c798:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c79c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c79e:	4413      	add	r3, r2
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800c7a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7b2:	7a9b      	ldrb	r3, [r3, #10]
 800c7b4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d3c5      	bcc.n	800c748 <VL53LX_f_006+0x1d6>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800c7bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3730      	adds	r7, #48	; 0x30
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bdb0      	pop	{r4, r5, r7, pc}

0800c7c8 <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b085      	sub	sp, #20
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	73fb      	strb	r3, [r7, #15]
 800c7ec:	e02d      	b.n	800c84a <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800c7ee:	7bfb      	ldrb	r3, [r7, #15]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	78d2      	ldrb	r2, [r2, #3]
 800c7f6:	fb93 f1f2 	sdiv	r1, r3, r2
 800c7fa:	fb02 f201 	mul.w	r2, r2, r1
 800c7fe:	1a9b      	subs	r3, r3, r2
 800c800:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	789b      	ldrb	r3, [r3, #2]
 800c806:	7bfa      	ldrb	r2, [r7, #15]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d21b      	bcs.n	800c844 <VL53LX_f_007+0x7c>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	789b      	ldrb	r3, [r3, #2]
 800c810:	7b3a      	ldrb	r2, [r7, #12]
 800c812:	429a      	cmp	r2, r3
 800c814:	d216      	bcs.n	800c844 <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800c816:	7bfb      	ldrb	r3, [r7, #15]
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	4413      	add	r3, r2
 800c81c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10f      	bne.n	800c844 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800c824:	7b3b      	ldrb	r3, [r7, #12]
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	4413      	add	r3, r2
 800c82a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d108      	bne.n	800c844 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800c832:	7bbb      	ldrb	r3, [r7, #14]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d105      	bne.n	800c844 <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	7bfa      	ldrb	r2, [r7, #15]
 800c83c:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800c840:	2301      	movs	r3, #1
 800c842:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800c844:	7bfb      	ldrb	r3, [r7, #15]
 800c846:	3301      	adds	r3, #1
 800c848:	73fb      	strb	r3, [r7, #15]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	78db      	ldrb	r3, [r3, #3]
 800c84e:	7bfa      	ldrb	r2, [r7, #15]
 800c850:	429a      	cmp	r2, r3
 800c852:	d3cc      	bcc.n	800c7ee <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800c854:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3714      	adds	r7, #20
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c86c:	2300      	movs	r3, #0
 800c86e:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800c870:	2300      	movs	r3, #0
 800c872:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800c874:	2300      	movs	r3, #0
 800c876:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800c878:	2300      	movs	r3, #0
 800c87a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800c882:	73fb      	strb	r3, [r7, #15]
 800c884:	e05a      	b.n	800c93c <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	78da      	ldrb	r2, [r3, #3]
 800c88a:	7bfb      	ldrb	r3, [r7, #15]
 800c88c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c890:	fb02 f201 	mul.w	r2, r2, r1
 800c894:	1a9b      	subs	r3, r3, r2
 800c896:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800c898:	7bfb      	ldrb	r3, [r7, #15]
 800c89a:	3301      	adds	r3, #1
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	78d2      	ldrb	r2, [r2, #3]
 800c8a0:	fb93 f1f2 	sdiv	r1, r3, r2
 800c8a4:	fb02 f201 	mul.w	r2, r2, r1
 800c8a8:	1a9b      	subs	r3, r3, r2
 800c8aa:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	789b      	ldrb	r3, [r3, #2]
 800c8b0:	7b7a      	ldrb	r2, [r7, #13]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d23f      	bcs.n	800c936 <VL53LX_f_008+0xd2>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	789b      	ldrb	r3, [r3, #2]
 800c8ba:	7b3a      	ldrb	r2, [r7, #12]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d23a      	bcs.n	800c936 <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800c8c0:	7b7b      	ldrb	r3, [r7, #13]
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	4413      	add	r3, r2
 800c8c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d10e      	bne.n	800c8ec <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800c8ce:	7b3b      	ldrb	r3, [r7, #12]
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d107      	bne.n	800c8ec <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	b2da      	uxtb	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d905      	bls.n	800c908 <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800c908:	7b7b      	ldrb	r3, [r7, #13]
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	4413      	add	r3, r2
 800c90e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c912:	2b00      	cmp	r3, #0
 800c914:	d009      	beq.n	800c92a <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800c916:	7b7b      	ldrb	r3, [r7, #13]
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	4413      	add	r3, r2
 800c922:	460a      	mov	r2, r1
 800c924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c928:	e005      	b.n	800c936 <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800c92a:	7b7b      	ldrb	r3, [r7, #13]
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	4413      	add	r3, r2
 800c930:	2200      	movs	r2, #0
 800c932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800c936:	7bfb      	ldrb	r3, [r7, #15]
 800c938:	3301      	adds	r3, #1
 800c93a:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800c93c:	7bfa      	ldrb	r2, [r7, #15]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800c944:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800c94a:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800c94c:	429a      	cmp	r2, r3
 800c94e:	db9a      	blt.n	800c886 <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800c950:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800c954:	4618      	mov	r0, r3
 800c956:	3714      	adds	r7, #20
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c960:	b480      	push	{r7}
 800c962:	b087      	sub	sp, #28
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c968:	2300      	movs	r3, #0
 800c96a:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800c96c:	2300      	movs	r3, #0
 800c96e:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800c970:	2300      	movs	r3, #0
 800c972:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800c974:	2300      	movs	r3, #0
 800c976:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800c978:	2300      	movs	r3, #0
 800c97a:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800c97c:	2300      	movs	r3, #0
 800c97e:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	78db      	ldrb	r3, [r3, #3]
 800c984:	3b01      	subs	r3, #1
 800c986:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800c988:	7cbb      	ldrb	r3, [r7, #18]
 800c98a:	085b      	lsrs	r3, r3, #1
 800c98c:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800c994:	75fb      	strb	r3, [r7, #23]
 800c996:	e0a2      	b.n	800cade <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	78da      	ldrb	r2, [r3, #3]
 800c99c:	7dfb      	ldrb	r3, [r7, #23]
 800c99e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9a2:	fb02 f201 	mul.w	r2, r2, r1
 800c9a6:	1a9b      	subs	r3, r3, r2
 800c9a8:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800c9aa:	7dfb      	ldrb	r3, [r7, #23]
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	78d2      	ldrb	r2, [r2, #3]
 800c9b2:	fb93 f1f2 	sdiv	r1, r3, r2
 800c9b6:	fb02 f201 	mul.w	r2, r2, r1
 800c9ba:	1a9b      	subs	r3, r3, r2
 800c9bc:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	789b      	ldrb	r3, [r3, #2]
 800c9c2:	7d7a      	ldrb	r2, [r7, #21]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	f080 8087 	bcs.w	800cad8 <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800c9ce:	7d3a      	ldrb	r2, [r7, #20]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	f080 8081 	bcs.w	800cad8 <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800c9d6:	7d7b      	ldrb	r3, [r7, #21]
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	4413      	add	r3, r2
 800c9dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d12f      	bne.n	800ca44 <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800c9e4:	7d3b      	ldrb	r3, [r7, #20]
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d028      	beq.n	800ca44 <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800c9f2:	7d3b      	ldrb	r3, [r7, #20]
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	4413      	add	r3, r2
 800c9f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800ca06:	7cfa      	ldrb	r2, [r7, #19]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d21b      	bcs.n	800ca44 <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800ca0c:	7cfa      	ldrb	r2, [r7, #19]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	00db      	lsls	r3, r3, #3
 800ca12:	4413      	add	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	3304      	adds	r3, #4
 800ca20:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	7dfa      	ldrb	r2, [r7, #23]
 800ca26:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800ca28:	7dfb      	ldrb	r3, [r7, #23]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	b2da      	uxtb	r2, r3
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	22ff      	movs	r2, #255	; 0xff
 800ca36:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2200      	movs	r2, #0
 800ca42:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800ca44:	7d7b      	ldrb	r3, [r7, #21]
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	4413      	add	r3, r2
 800ca4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d042      	beq.n	800cad8 <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800ca52:	7d3b      	ldrb	r3, [r7, #20]
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	4413      	add	r3, r2
 800ca58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d13b      	bne.n	800cad8 <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800ca60:	7d7b      	ldrb	r3, [r7, #21]
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	4413      	add	r3, r2
 800ca66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800ca74:	7cfa      	ldrb	r2, [r7, #19]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d22e      	bcs.n	800cad8 <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800ca7a:	7cfa      	ldrb	r2, [r7, #19]
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	00db      	lsls	r3, r3, #3
 800ca80:	4413      	add	r3, r2
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	3304      	adds	r3, #4
 800ca8e:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	7dfa      	ldrb	r2, [r7, #23]
 800ca94:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800ca96:	7dfb      	ldrb	r3, [r7, #23]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800caa8:	1ad3      	subs	r3, r2, r3
 800caaa:	b2db      	uxtb	r3, r3
 800caac:	3301      	adds	r3, #1
 800caae:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800cabc:	1ad3      	subs	r3, r2, r3
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	3301      	adds	r3, #1
 800cac2:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	799b      	ldrb	r3, [r3, #6]
 800cacc:	7cba      	ldrb	r2, [r7, #18]
 800cace:	429a      	cmp	r2, r3
 800cad0:	d202      	bcs.n	800cad8 <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	7cba      	ldrb	r2, [r7, #18]
 800cad6:	719a      	strb	r2, [r3, #6]
		blb++) {
 800cad8:	7dfb      	ldrb	r3, [r7, #23]
 800cada:	3301      	adds	r3, #1
 800cadc:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800cade:	7dfa      	ldrb	r2, [r7, #23]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800cae6:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800caec:	440b      	add	r3, r1
	for (blb = palgo->VL53LX_p_044;
 800caee:	429a      	cmp	r2, r3
 800caf0:	f6ff af52 	blt.w	800c998 <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800caf4:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800caf8:	4618      	mov	r0, r3
 800cafa:	371c      	adds	r7, #28
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr

0800cb04 <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b090      	sub	sp, #64	; 0x40
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	6039      	str	r1, [r7, #0]
 800cb0e:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cb10:	2300      	movs	r3, #0
 800cb12:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800cb16:	f107 030c 	add.w	r3, r7, #12
 800cb1a:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 800cb22:	2301      	movs	r3, #1
 800cb24:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d965      	bls.n	800cbfe <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800cb32:	e05f      	b.n	800cbf4 <VL53LX_f_016+0xf0>

		swapped = 0;
 800cb34:	2300      	movs	r3, #0
 800cb36:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cb40:	e051      	b.n	800cbe6 <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800cb42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cb46:	1e5a      	subs	r2, r3, #1
 800cb48:	4613      	mov	r3, r2
 800cb4a:	00db      	lsls	r3, r3, #3
 800cb4c:	4413      	add	r3, r2
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cb54:	683a      	ldr	r2, [r7, #0]
 800cb56:	4413      	add	r3, r2
 800cb58:	3304      	adds	r3, #4
 800cb5a:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800cb5c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800cb60:	4613      	mov	r3, r2
 800cb62:	00db      	lsls	r3, r3, #3
 800cb64:	4413      	add	r3, r2
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cb6c:	683a      	ldr	r2, [r7, #0]
 800cb6e:	4413      	add	r3, r2
 800cb70:	3304      	adds	r3, #4
 800cb72:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 800cb74:	79fb      	ldrb	r3, [r7, #7]
 800cb76:	2b02      	cmp	r3, #2
 800cb78:	d118      	bne.n	800cbac <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800cb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb7c:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800cb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb80:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800cb82:	429a      	cmp	r2, r3
 800cb84:	da2a      	bge.n	800cbdc <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800cb86:	2224      	movs	r2, #36	; 0x24
 800cb88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb8c:	f007 fac2 	bl	8014114 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800cb90:	2224      	movs	r2, #36	; 0x24
 800cb92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cb94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb96:	f007 fabd 	bl	8014114 <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800cb9a:	2224      	movs	r2, #36	; 0x24
 800cb9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cba0:	f007 fab8 	bl	8014114 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800cba4:	2301      	movs	r3, #1
 800cba6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800cbaa:	e017      	b.n	800cbdc <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800cbac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbae:	699a      	ldr	r2, [r3, #24]
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb2:	699b      	ldr	r3, [r3, #24]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d911      	bls.n	800cbdc <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800cbb8:	2224      	movs	r2, #36	; 0x24
 800cbba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cbbe:	f007 faa9 	bl	8014114 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800cbc2:	2224      	movs	r2, #36	; 0x24
 800cbc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cbc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbc8:	f007 faa4 	bl	8014114 <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800cbcc:	2224      	movs	r2, #36	; 0x24
 800cbce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cbd0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cbd2:	f007 fa9f 	bl	8014114 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800cbdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800cbec:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d3a6      	bcc.n	800cb42 <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800cbf4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d19b      	bne.n	800cb34 <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800cbfc:	e000      	b.n	800cc00 <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800cbfe:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800cc00:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3740      	adds	r7, #64	; 0x40
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b087      	sub	sp, #28
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	4603      	mov	r3, r0
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
 800cc18:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cc26:	7bfa      	ldrb	r2, [r7, #15]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	00db      	lsls	r3, r3, #3
 800cc2c:	4413      	add	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	4413      	add	r3, r2
 800cc38:	3304      	adds	r3, #4
 800cc3a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	2200      	movs	r2, #0
 800cc46:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	75fb      	strb	r3, [r7, #23]
 800cc4e:	e01c      	b.n	800cc8a <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	78da      	ldrb	r2, [r3, #3]
 800cc54:	7dfb      	ldrb	r3, [r7, #23]
 800cc56:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc5a:	fb02 f201 	mul.w	r2, r2, r1
 800cc5e:	1a9b      	subs	r3, r3, r2
 800cc60:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	68da      	ldr	r2, [r3, #12]
 800cc66:	7d79      	ldrb	r1, [r7, #21]
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	3106      	adds	r1, #6
 800cc6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc70:	441a      	add	r2, r3
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	689a      	ldr	r2, [r3, #8]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	689b      	ldr	r3, [r3, #8]
 800cc7e:	441a      	add	r2, r3
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800cc84:	7dfb      	ldrb	r3, [r7, #23]
 800cc86:	3301      	adds	r3, #1
 800cc88:	75fb      	strb	r3, [r7, #23]
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	791b      	ldrb	r3, [r3, #4]
 800cc8e:	7dfa      	ldrb	r2, [r7, #23]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d9dd      	bls.n	800cc50 <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	68da      	ldr	r2, [r3, #12]
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	689b      	ldr	r3, [r3, #8]
 800cc9c:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800cca2:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	371c      	adds	r7, #28
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr

0800ccb2 <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800ccb2:	b590      	push	{r4, r7, lr}
 800ccb4:	b08d      	sub	sp, #52	; 0x34
 800ccb6:	af02      	add	r7, sp, #8
 800ccb8:	60ba      	str	r2, [r7, #8]
 800ccba:	607b      	str	r3, [r7, #4]
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	73fb      	strb	r3, [r7, #15]
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 800ccca:	2300      	movs	r3, #0
 800cccc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53LX_p_012 = 0;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cce0:	7bfa      	ldrb	r2, [r7, #15]
 800cce2:	4613      	mov	r3, r2
 800cce4:	00db      	lsls	r3, r3, #3
 800cce6:	4413      	add	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	3304      	adds	r3, #4
 800ccf4:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	789b      	ldrb	r3, [r3, #2]
 800ccfa:	2bff      	cmp	r3, #255	; 0xff
 800ccfc:	d102      	bne.n	800cd04 <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	2201      	movs	r2, #1
 800cd02:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	789b      	ldrb	r3, [r3, #2]
 800cd08:	687a      	ldr	r2, [r7, #4]
 800cd0a:	78d2      	ldrb	r2, [r2, #3]
 800cd0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd10:	fb02 f201 	mul.w	r2, r2, r1
 800cd14:	1a9b      	subs	r3, r3, r2
 800cd16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53LX_p_012  = (int16_t)i;
 800cd1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cd1e:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	b29a      	uxth	r2, r3
 800cd26:	8c3b      	ldrh	r3, [r7, #32]
 800cd28:	4413      	add	r3, r2
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800cd2e:	8c3a      	ldrh	r2, [r7, #32]
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	789b      	ldrb	r3, [r3, #2]
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	1ad3      	subs	r3, r2, r3
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800cd3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cd40:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	791b      	ldrb	r3, [r3, #4]
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	8bfb      	ldrh	r3, [r7, #30]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800cd50:	8bfa      	ldrh	r2, [r7, #30]
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	789b      	ldrb	r3, [r3, #2]
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	b29b      	uxth	r3, r3
 800cd5c:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800cd5e:	8bfa      	ldrh	r2, [r7, #30]
 800cd60:	8c3b      	ldrh	r3, [r7, #32]
 800cd62:	1ad3      	subs	r3, r2, r3
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 800cd68:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cd6c:	2b03      	cmp	r3, #3
 800cd6e:	dd01      	ble.n	800cd74 <VL53LX_f_015+0xc2>
		window_width = 3;
 800cd70:	2303      	movs	r3, #3
 800cd72:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800cd74:	8c3a      	ldrh	r2, [r7, #32]
 800cd76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd78:	4413      	add	r3, r2
 800cd7a:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800cd7c:	b219      	sxth	r1, r3
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	78da      	ldrb	r2, [r3, #3]
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	3314      	adds	r3, #20
 800cd86:	7bbc      	ldrb	r4, [r7, #14]
 800cd88:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800cd8c:	9301      	str	r3, [sp, #4]
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	9300      	str	r3, [sp, #0]
 800cd92:	4623      	mov	r3, r4
 800cd94:	f000 f846 	bl	800ce24 <VL53LX_f_020>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800cd9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d114      	bne.n	800cdd0 <VL53LX_f_015+0x11e>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800cda6:	8bfa      	ldrh	r2, [r7, #30]
 800cda8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdaa:	1ad3      	subs	r3, r2, r3
 800cdac:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800cdae:	b218      	sxth	r0, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	78da      	ldrb	r2, [r3, #3]
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	331c      	adds	r3, #28
 800cdb8:	7bbc      	ldrb	r4, [r7, #14]
 800cdba:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800cdbe:	9301      	str	r3, [sp, #4]
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	9300      	str	r3, [sp, #0]
 800cdc4:	4623      	mov	r3, r4
 800cdc6:	f000 f82d 	bl	800ce24 <VL53LX_f_020>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	695a      	ldr	r2, [r3, #20]
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	69db      	ldr	r3, [r3, #28]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d909      	bls.n	800cdf0 <VL53LX_f_015+0x13e>
		tmp_phase        = pdata->VL53LX_p_026;
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	695b      	ldr	r3, [r3, #20]
 800cde0:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	69da      	ldr	r2, [r3, #28]
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	69ba      	ldr	r2, [r7, #24]
 800cdee:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	699a      	ldr	r2, [r3, #24]
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	695b      	ldr	r3, [r3, #20]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d203      	bcs.n	800ce04 <VL53LX_f_015+0x152>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	699a      	ldr	r2, [r3, #24]
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	699a      	ldr	r2, [r3, #24]
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	69db      	ldr	r3, [r3, #28]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d903      	bls.n	800ce18 <VL53LX_f_015+0x166>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	699a      	ldr	r2, [r3, #24]
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800ce18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	372c      	adds	r7, #44	; 0x2c
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd90      	pop	{r4, r7, pc}

0800ce24 <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800ce24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce28:	b093      	sub	sp, #76	; 0x4c
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	4616      	mov	r6, r2
 800ce2e:	461a      	mov	r2, r3
 800ce30:	4603      	mov	r3, r0
 800ce32:	83fb      	strh	r3, [r7, #30]
 800ce34:	460b      	mov	r3, r1
 800ce36:	83bb      	strh	r3, [r7, #28]
 800ce38:	4633      	mov	r3, r6
 800ce3a:	76fb      	strb	r3, [r7, #27]
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	76bb      	strb	r3, [r7, #26]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ce40:	2300      	movs	r3, #0
 800ce42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	int16_t  i            = 0;
 800ce46:	2300      	movs	r3, #0
 800ce48:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  lb            = 0;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	int64_t VL53LX_p_018        = 0;
 800ce52:	f04f 0200 	mov.w	r2, #0
 800ce56:	f04f 0300 	mov.w	r3, #0
 800ce5a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int64_t event_sum     = 0;
 800ce5e:	f04f 0200 	mov.w	r2, #0
 800ce62:	f04f 0300 	mov.w	r3, #0
 800ce66:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int64_t weighted_sum  = 0;
 800ce6a:	f04f 0200 	mov.w	r2, #0
 800ce6e:	f04f 0300 	mov.w	r3, #0
 800ce72:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800ce76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce7c:	601a      	str	r2, [r3, #0]

	if (VL53LX_p_030 != 0)
 800ce7e:	7efb      	ldrb	r3, [r7, #27]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f000 808b 	beq.w	800cf9c <VL53LX_f_020+0x178>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800ce86:	8bfb      	ldrh	r3, [r7, #30]
 800ce88:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ce8c:	e07f      	b.n	800cf8e <VL53LX_f_020+0x16a>

		if (lb < 0)
 800ce8e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	da08      	bge.n	800cea8 <VL53LX_f_020+0x84>
			i = lb + (int16_t)VL53LX_p_030;
 800ce96:	7efb      	ldrb	r3, [r7, #27]
 800ce98:	b29a      	uxth	r2, r3
 800ce9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ce9e:	4413      	add	r3, r2
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800cea6:	e009      	b.n	800cebc <VL53LX_f_020+0x98>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800cea8:	f9b7 1044 	ldrsh.w	r1, [r7, #68]	; 0x44
 800ceac:	7efa      	ldrb	r2, [r7, #27]
 800ceae:	fb91 f3f2 	sdiv	r3, r1, r2
 800ceb2:	fb02 f303 	mul.w	r3, r2, r3
 800ceb6:	1acb      	subs	r3, r1, r3
 800ceb8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800cebc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	db5d      	blt.n	800cf80 <VL53LX_f_020+0x15c>
 800cec4:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800cec8:	2b17      	cmp	r3, #23
 800ceca:	dc59      	bgt.n	800cf80 <VL53LX_f_020+0x15c>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800cecc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ced0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ced2:	3306      	adds	r3, #6
 800ced4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ced8:	4618      	mov	r0, r3
 800ceda:	ea4f 71e0 	mov.w	r1, r0, asr #31
				(int64_t)pbins->VL53LX_p_028;
 800cede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cee0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cee4:	461a      	mov	r2, r3
 800cee6:	ea4f 73e2 	mov.w	r3, r2, asr #31
			VL53LX_p_018 =
 800ceea:	1a86      	subs	r6, r0, r2
 800ceec:	613e      	str	r6, [r7, #16]
 800ceee:	eb61 0303 	sbc.w	r3, r1, r3
 800cef2:	617b      	str	r3, [r7, #20]
 800cef4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cef8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800cefc:	7ebb      	ldrb	r3, [r7, #26]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d00b      	beq.n	800cf1a <VL53LX_f_020+0xf6>
 800cf02:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cf06:	2a00      	cmp	r2, #0
 800cf08:	f173 0300 	sbcs.w	r3, r3, #0
 800cf0c:	da05      	bge.n	800cf1a <VL53LX_f_020+0xf6>
				VL53LX_p_018 = 0;
 800cf0e:	f04f 0200 	mov.w	r2, #0
 800cf12:	f04f 0300 	mov.w	r3, #0
 800cf16:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			event_sum += VL53LX_p_018;
 800cf1a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cf1e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cf22:	1886      	adds	r6, r0, r2
 800cf24:	60be      	str	r6, [r7, #8]
 800cf26:	eb41 0303 	adc.w	r3, r1, r3
 800cf2a:	60fb      	str	r3, [r7, #12]
 800cf2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cf30:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800cf34:	f9b7 0044 	ldrsh.w	r0, [r7, #68]	; 0x44
 800cf38:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800cf3c:	f04f 0200 	mov.w	r2, #0
 800cf40:	f04f 0300 	mov.w	r3, #0
 800cf44:	02cb      	lsls	r3, r1, #11
 800cf46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800cf4a:	02c2      	lsls	r2, r0, #11
 800cf4c:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 800cf50:	f143 0900 	adc.w	r9, r3, #0
 800cf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf56:	fb09 f203 	mul.w	r2, r9, r3
 800cf5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf5c:	fb08 f303 	mul.w	r3, r8, r3
 800cf60:	441a      	add	r2, r3
 800cf62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf64:	fba3 0108 	umull	r0, r1, r3, r8
 800cf68:	1853      	adds	r3, r2, r1
 800cf6a:	4619      	mov	r1, r3
			weighted_sum +=
 800cf6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cf70:	1816      	adds	r6, r2, r0
 800cf72:	603e      	str	r6, [r7, #0]
 800cf74:	414b      	adcs	r3, r1
 800cf76:	607b      	str	r3, [r7, #4]
 800cf78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf7c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800cf80:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	3301      	adds	r3, #1
 800cf88:	b29b      	uxth	r3, r3
 800cf8a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800cf8e:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800cf92:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800cf96:	429a      	cmp	r2, r3
 800cf98:	f77f af79 	ble.w	800ce8e <VL53LX_f_020+0x6a>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800cf9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cfa0:	2a01      	cmp	r2, #1
 800cfa2:	f173 0300 	sbcs.w	r3, r3, #0
 800cfa6:	db33      	blt.n	800d010 <VL53LX_f_020+0x1ec>
		weighted_sum += do_division_s(event_sum, 2);
 800cfa8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cfac:	0fd9      	lsrs	r1, r3, #31
 800cfae:	4608      	mov	r0, r1
 800cfb0:	f04f 0100 	mov.w	r1, #0
 800cfb4:	1884      	adds	r4, r0, r2
 800cfb6:	eb41 0503 	adc.w	r5, r1, r3
 800cfba:	f04f 0200 	mov.w	r2, #0
 800cfbe:	f04f 0300 	mov.w	r3, #0
 800cfc2:	0862      	lsrs	r2, r4, #1
 800cfc4:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800cfc8:	106b      	asrs	r3, r5, #1
 800cfca:	4610      	mov	r0, r2
 800cfcc:	4619      	mov	r1, r3
 800cfce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cfd2:	eb12 0a00 	adds.w	sl, r2, r0
 800cfd6:	eb43 0b01 	adc.w	fp, r3, r1
 800cfda:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800cfde:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cfe2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800cfe6:	f7f3 f94b 	bl	8000280 <__aeabi_ldivmod>
 800cfea:	4602      	mov	r2, r0
 800cfec:	460b      	mov	r3, r1
 800cfee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		if (weighted_sum < 0)
 800cff2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cff6:	2a00      	cmp	r2, #0
 800cff8:	f173 0300 	sbcs.w	r3, r3, #0
 800cffc:	da05      	bge.n	800d00a <VL53LX_f_020+0x1e6>
			weighted_sum = 0;
 800cffe:	f04f 0200 	mov.w	r2, #0
 800d002:	f04f 0300 	mov.w	r3, #0
 800d006:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		*pphase = (uint32_t)weighted_sum;
 800d00a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d00c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d00e:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d010:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d014:	4618      	mov	r0, r3
 800d016:	374c      	adds	r7, #76	; 0x4c
 800d018:	46bd      	mov	sp, r7
 800d01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d01e <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800d01e:	b580      	push	{r7, lr}
 800d020:	b086      	sub	sp, #24
 800d022:	af00      	add	r7, sp, #0
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	607a      	str	r2, [r7, #4]
 800d028:	603b      	str	r3, [r7, #0]
 800d02a:	4603      	mov	r3, r0
 800d02c:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d02e:	2300      	movs	r3, #0
 800d030:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d032:	2300      	movs	r3, #0
 800d034:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d036:	2300      	movs	r3, #0
 800d038:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d03a:	7bfa      	ldrb	r2, [r7, #15]
 800d03c:	4613      	mov	r3, r2
 800d03e:	00db      	lsls	r3, r3, #3
 800d040:	4413      	add	r3, r2
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	4413      	add	r3, r2
 800d04c:	3304      	adds	r3, #4
 800d04e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800d050:	22ac      	movs	r2, #172	; 0xac
 800d052:	68b9      	ldr	r1, [r7, #8]
 800d054:	6a38      	ldr	r0, [r7, #32]
 800d056:	f007 f85d 	bl	8014114 <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d060:	75fb      	strb	r3, [r7, #23]
 800d062:	e020      	b.n	800d0a6 <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	7dfa      	ldrb	r2, [r7, #23]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d304      	bcc.n	800d078 <VL53LX_f_011+0x5a>
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	791b      	ldrb	r3, [r3, #4]
 800d072:	7dfa      	ldrb	r2, [r7, #23]
 800d074:	429a      	cmp	r2, r3
 800d076:	d913      	bls.n	800d0a0 <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	78da      	ldrb	r2, [r3, #3]
 800d07c:	7dfb      	ldrb	r3, [r7, #23]
 800d07e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d082:	fb02 f201 	mul.w	r2, r2, r1
 800d086:	1a9b      	subs	r3, r3, r2
 800d088:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800d08a:	6a3b      	ldr	r3, [r7, #32]
 800d08c:	7a9b      	ldrb	r3, [r3, #10]
 800d08e:	7d7a      	ldrb	r2, [r7, #21]
 800d090:	429a      	cmp	r2, r3
 800d092:	d205      	bcs.n	800d0a0 <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800d094:	7d7a      	ldrb	r2, [r7, #21]
 800d096:	6a3b      	ldr	r3, [r7, #32]
 800d098:	3206      	adds	r2, #6
 800d09a:	6839      	ldr	r1, [r7, #0]
 800d09c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800d0a0:	7dfb      	ldrb	r3, [r7, #23]
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800d0a6:	7dfa      	ldrb	r2, [r7, #23]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d0ae:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800d0b4:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	dbd4      	blt.n	800d064 <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d0ba:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3718      	adds	r7, #24
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800d0c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ca:	b096      	sub	sp, #88	; 0x58
 800d0cc:	af08      	add	r7, sp, #32
 800d0ce:	4604      	mov	r4, r0
 800d0d0:	4608      	mov	r0, r1
 800d0d2:	4611      	mov	r1, r2
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	4623      	mov	r3, r4
 800d0d8:	73fb      	strb	r3, [r7, #15]
 800d0da:	4603      	mov	r3, r0
 800d0dc:	73bb      	strb	r3, [r7, #14]
 800d0de:	460b      	mov	r3, r1
 800d0e0:	737b      	strb	r3, [r7, #13]
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53LX_p_007    = 0;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53LX_p_032    = 0;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53LX_p_001    = 0;
 800d100:	2300      	movs	r3, #0
 800d102:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 800d104:	2300      	movs	r3, #0
 800d106:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 800d108:	2300      	movs	r3, #0
 800d10a:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800d10c:	2300      	movs	r3, #0
 800d10e:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800d110:	2300      	movs	r3, #0
 800d112:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800d114:	2300      	movs	r3, #0
 800d116:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800d118:	7b7b      	ldrb	r3, [r7, #13]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d106      	bne.n	800d12c <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800d11e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d124:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800d126:	f06f 030e 	mvn.w	r3, #14
 800d12a:	e06f      	b.n	800d20c <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800d12c:	7bfb      	ldrb	r3, [r7, #15]
 800d12e:	7b7a      	ldrb	r2, [r7, #13]
 800d130:	fbb3 f1f2 	udiv	r1, r3, r2
 800d134:	fb02 f201 	mul.w	r2, r2, r1
 800d138:	1a9b      	subs	r3, r3, r2
 800d13a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53LX_f_022(
 800d13e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d142:	7b39      	ldrb	r1, [r7, #12]
 800d144:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d148:	f107 0320 	add.w	r3, r7, #32
 800d14c:	9301      	str	r3, [sp, #4]
 800d14e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d152:	9300      	str	r3, [sp, #0]
 800d154:	4613      	mov	r3, r2
 800d156:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d158:	f000 fda8 	bl	800dcac <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800d15c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d160:	7b39      	ldrb	r1, [r7, #12]
 800d162:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d166:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d16a:	9301      	str	r3, [sp, #4]
 800d16c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d170:	9300      	str	r3, [sp, #0]
 800d172:	4613      	mov	r3, r2
 800d174:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d176:	f000 fd99 	bl	800dcac <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800d17a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d00e      	beq.n	800d1a0 <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800d182:	f107 021c 	add.w	r2, r7, #28
 800d186:	7b39      	ldrb	r1, [r7, #12]
 800d188:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d18c:	f107 0314 	add.w	r3, r7, #20
 800d190:	9301      	str	r3, [sp, #4]
 800d192:	f107 0318 	add.w	r3, r7, #24
 800d196:	9300      	str	r3, [sp, #0]
 800d198:	4613      	mov	r3, r2
 800d19a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d19c:	f000 fd86 	bl	800dcac <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800d1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a2:	469c      	mov	ip, r3
 800d1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a6:	469e      	mov	lr, r3
 800d1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1aa:	4698      	mov	r8, r3
 800d1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	6a3b      	ldr	r3, [r7, #32]
 800d1b2:	461c      	mov	r4, r3
 800d1b4:	69bb      	ldr	r3, [r7, #24]
 800d1b6:	461d      	mov	r5, r3
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	461e      	mov	r6, r3
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800d1c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53LX_f_023(
 800d1c6:	607b      	str	r3, [r7, #4]
 800d1c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1ca:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d1ce:	7bb8      	ldrb	r0, [r7, #14]
 800d1d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d1d2:	9207      	str	r2, [sp, #28]
 800d1d4:	9306      	str	r3, [sp, #24]
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	9205      	str	r2, [sp, #20]
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	9304      	str	r3, [sp, #16]
 800d1de:	9603      	str	r6, [sp, #12]
 800d1e0:	9502      	str	r5, [sp, #8]
 800d1e2:	9401      	str	r4, [sp, #4]
 800d1e4:	9100      	str	r1, [sp, #0]
 800d1e6:	4643      	mov	r3, r8
 800d1e8:	4672      	mov	r2, lr
 800d1ea:	4661      	mov	r1, ip
 800d1ec:	f002 fee6 	bl	800ffbc <VL53LX_f_023>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800d1f6:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800d1fa:	f113 0f0f 	cmn.w	r3, #15
 800d1fe:	d103      	bne.n	800d208 <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800d200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d206:	801a      	strh	r2, [r3, #0]


	return status;
 800d208:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3738      	adds	r7, #56	; 0x38
 800d210:	46bd      	mov	sp, r7
 800d212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d216 <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800d216:	b490      	push	{r4, r7}
 800d218:	b084      	sub	sp, #16
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	4604      	mov	r4, r0
 800d21e:	4608      	mov	r0, r1
 800d220:	4611      	mov	r1, r2
 800d222:	461a      	mov	r2, r3
 800d224:	4623      	mov	r3, r4
 800d226:	71fb      	strb	r3, [r7, #7]
 800d228:	4603      	mov	r3, r0
 800d22a:	71bb      	strb	r3, [r7, #6]
 800d22c:	460b      	mov	r3, r1
 800d22e:	717b      	strb	r3, [r7, #5]
 800d230:	4613      	mov	r3, r2
 800d232:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800d234:	2300      	movs	r3, #0
 800d236:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800d238:	2300      	movs	r3, #0
 800d23a:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800d23c:	6a3b      	ldr	r3, [r7, #32]
 800d23e:	79fa      	ldrb	r2, [r7, #7]
 800d240:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800d242:	6a3b      	ldr	r3, [r7, #32]
 800d244:	2200      	movs	r2, #0
 800d246:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	781a      	ldrb	r2, [r3, #0]
 800d24c:	6a3b      	ldr	r3, [r7, #32]
 800d24e:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	785a      	ldrb	r2, [r3, #1]
 800d254:	6a3b      	ldr	r3, [r7, #32]
 800d256:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800d258:	69fb      	ldr	r3, [r7, #28]
 800d25a:	789a      	ldrb	r2, [r3, #2]
 800d25c:	6a3b      	ldr	r3, [r7, #32]
 800d25e:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	78da      	ldrb	r2, [r3, #3]
 800d264:	6a3b      	ldr	r3, [r7, #32]
 800d266:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	791a      	ldrb	r2, [r3, #4]
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	795a      	ldrb	r2, [r3, #5]
 800d274:	6a3b      	ldr	r3, [r7, #32]
 800d276:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	791a      	ldrb	r2, [r3, #4]
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	1ad3      	subs	r3, r2, r3
 800d282:	b2db      	uxtb	r3, r3
 800d284:	3301      	adds	r3, #1
 800d286:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800d288:	6a3b      	ldr	r3, [r7, #32]
 800d28a:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800d292:	6a3b      	ldr	r3, [r7, #32]
 800d294:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800d296:	69fb      	ldr	r3, [r7, #28]
 800d298:	8c1a      	ldrh	r2, [r3, #32]
 800d29a:	6a3b      	ldr	r3, [r7, #32]
 800d29c:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800d29e:	69fb      	ldr	r3, [r7, #28]
 800d2a0:	695b      	ldr	r3, [r3, #20]
 800d2a2:	b29a      	uxth	r2, r3
 800d2a4:	6a3b      	ldr	r3, [r7, #32]
 800d2a6:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	699b      	ldr	r3, [r3, #24]
 800d2ac:	b29a      	uxth	r2, r3
 800d2ae:	6a3b      	ldr	r3, [r7, #32]
 800d2b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800d2b4:	69fb      	ldr	r3, [r7, #28]
 800d2b6:	69db      	ldr	r3, [r3, #28]
 800d2b8:	b29a      	uxth	r2, r3
 800d2ba:	6a3b      	ldr	r3, [r7, #32]
 800d2bc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	6a3b      	ldr	r3, [r7, #32]
 800d2c8:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800d2ca:	69fb      	ldr	r3, [r7, #28]
 800d2cc:	691a      	ldr	r2, [r3, #16]
 800d2ce:	6a3b      	ldr	r3, [r7, #32]
 800d2d0:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	6a3b      	ldr	r3, [r7, #32]
 800d2da:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800d2dc:	69bb      	ldr	r3, [r7, #24]
 800d2de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d2e2:	6a3b      	ldr	r3, [r7, #32]
 800d2e4:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800d2e6:	6a3b      	ldr	r3, [r7, #32]
 800d2e8:	2213      	movs	r2, #19
 800d2ea:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 800d2ee:	887b      	ldrh	r3, [r7, #2]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00a      	beq.n	800d30a <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	8c1b      	ldrh	r3, [r3, #32]
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	887b      	ldrh	r3, [r7, #2]
 800d2fc:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d903      	bls.n	800d30a <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800d302:	6a3b      	ldr	r3, [r7, #32]
 800d304:	2206      	movs	r2, #6
 800d306:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800d30a:	79bb      	ldrb	r3, [r7, #6]
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	021b      	lsls	r3, r3, #8
 800d310:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800d312:	6a3b      	ldr	r3, [r7, #32]
 800d314:	8a9b      	ldrh	r3, [r3, #20]
 800d316:	89fa      	ldrh	r2, [r7, #14]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d205      	bcs.n	800d328 <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800d31c:	6a3b      	ldr	r3, [r7, #32]
 800d31e:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800d320:	89fb      	ldrh	r3, [r7, #14]
 800d322:	1ad3      	subs	r3, r2, r3
 800d324:	81fb      	strh	r3, [r7, #14]
 800d326:	e001      	b.n	800d32c <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800d328:	2300      	movs	r3, #0
 800d32a:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800d32c:	797b      	ldrb	r3, [r7, #5]
 800d32e:	b29b      	uxth	r3, r3
 800d330:	021b      	lsls	r3, r3, #8
 800d332:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800d334:	69bb      	ldr	r3, [r7, #24]
 800d336:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800d33a:	89bb      	ldrh	r3, [r7, #12]
 800d33c:	4413      	add	r3, r2
 800d33e:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d340:	6a3b      	ldr	r3, [r7, #32]
 800d342:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d346:	89fa      	ldrh	r2, [r7, #14]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d805      	bhi.n	800d358 <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800d34c:	6a3b      	ldr	r3, [r7, #32]
 800d34e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d352:	89ba      	ldrh	r2, [r7, #12]
 800d354:	429a      	cmp	r2, r3
 800d356:	d203      	bcs.n	800d360 <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800d358:	6a3b      	ldr	r3, [r7, #32]
 800d35a:	2205      	movs	r2, #5
 800d35c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 800d360:	bf00      	nop
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	bc90      	pop	{r4, r7}
 800d368:	4770      	bx	lr

0800d36a <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800d36a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d36c:	b08f      	sub	sp, #60	; 0x3c
 800d36e:	af06      	add	r7, sp, #24
 800d370:	60f8      	str	r0, [r7, #12]
 800d372:	60b9      	str	r1, [r7, #8]
 800d374:	607a      	str	r2, [r7, #4]
 800d376:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d378:	2300      	movs	r3, #0
 800d37a:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800d37c:	2300      	movs	r3, #0
 800d37e:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800d380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d382:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d386:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800d388:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d38a:	f7ff f879 	bl	800c480 <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800d38e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d390:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 800d394:	22ac      	movs	r2, #172	; 0xac
 800d396:	6839      	ldr	r1, [r7, #0]
 800d398:	4618      	mov	r0, r3
 800d39a:	f006 febb 	bl	8014114 <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	781a      	ldrb	r2, [r3, #0]
 800d3a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3a4:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	785a      	ldrb	r2, [r3, #1]
 800d3aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3ac:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	789a      	ldrb	r2, [r3, #2]
 800d3b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3b4:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800d3bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3be:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800d3c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800d3c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3c8:	2204      	movs	r2, #4
 800d3ca:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800d3cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	77bb      	strb	r3, [r7, #30]
 800d3d6:	e008      	b.n	800d3ea <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800d3d8:	7fbb      	ldrb	r3, [r7, #30]
 800d3da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3dc:	005b      	lsls	r3, r3, #1
 800d3de:	4413      	add	r3, r2
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d3e4:	7fbb      	ldrb	r3, [r7, #30]
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	77bb      	strb	r3, [r7, #30]
 800d3ea:	7fbb      	ldrb	r3, [r7, #30]
 800d3ec:	2b04      	cmp	r3, #4
 800d3ee:	d9f3      	bls.n	800d3d8 <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800d3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3f2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7fe f8b9 	bl	800b56e <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800d400:	461a      	mov	r2, r3
 800d402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d404:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d408:	4619      	mov	r1, r3
 800d40a:	4610      	mov	r0, r2
 800d40c:	f7fe f8ef 	bl	800b5ee <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800d410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d412:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d416:	4618      	mov	r0, r3
 800d418:	f7fe fcb9 	bl	800bd8e <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800d41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d41e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d422:	4618      	mov	r0, r3
 800d424:	f7fe f95d 	bl	800b6e2 <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d009      	beq.n	800d446 <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800d432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d434:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d43a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800d43e:	461a      	mov	r2, r3
 800d440:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d442:	f000 fd7b 	bl	800df3c <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d44e:	2300      	movs	r3, #0
 800d450:	77bb      	strb	r3, [r7, #30]
 800d452:	e01e      	b.n	800d492 <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800d454:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d117      	bne.n	800d48c <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800d45c:	7fbb      	ldrb	r3, [r7, #30]
 800d45e:	68ba      	ldr	r2, [r7, #8]
 800d460:	3304      	adds	r3, #4
 800d462:	005b      	lsls	r3, r3, #1
 800d464:	4413      	add	r3, r2
 800d466:	8898      	ldrh	r0, [r3, #4]
 800d468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d46a:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800d46e:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800d470:	005b      	lsls	r3, r3, #1
 800d472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d474:	4413      	add	r3, r2
 800d476:	3304      	adds	r3, #4
 800d478:	9301      	str	r3, [sp, #4]
 800d47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	460b      	mov	r3, r1
 800d480:	68ba      	ldr	r2, [r7, #8]
 800d482:	68f9      	ldr	r1, [r7, #12]
 800d484:	f7fe fcce 	bl	800be24 <VL53LX_f_001>
 800d488:	4603      	mov	r3, r0
 800d48a:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d48c:	7fbb      	ldrb	r3, [r7, #30]
 800d48e:	3301      	adds	r3, #1
 800d490:	77bb      	strb	r3, [r7, #30]
 800d492:	7fbb      	ldrb	r3, [r7, #30]
 800d494:	2b04      	cmp	r3, #4
 800d496:	d9dd      	bls.n	800d454 <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800d498:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d11a      	bne.n	800d4d6 <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800d4a8:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 800d4b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4b6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d4ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4bc:	f502 7252 	add.w	r2, r2, #840	; 0x348
 800d4c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d4c2:	9102      	str	r1, [sp, #8]
 800d4c4:	9201      	str	r2, [sp, #4]
 800d4c6:	9300      	str	r3, [sp, #0]
 800d4c8:	462b      	mov	r3, r5
 800d4ca:	4622      	mov	r2, r4
 800d4cc:	4631      	mov	r1, r6
 800d4ce:	f7ff f850 	bl	800c572 <VL53LX_f_006>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800d4d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d104      	bne.n	800d4e8 <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800d4de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d4e0:	f7ff f972 	bl	800c7c8 <VL53LX_f_007>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d4e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d104      	bne.n	800d4fa <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800d4f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d4f2:	f7ff f9b7 	bl	800c864 <VL53LX_f_008>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d4fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d104      	bne.n	800d50c <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800d502:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d504:	f7ff fa2c 	bl	800c960 <VL53LX_f_009>
 800d508:	4603      	mov	r3, r0
 800d50a:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d50c:	2300      	movs	r3, #0
 800d50e:	77bb      	strb	r3, [r7, #30]
 800d510:	e0a6      	b.n	800d660 <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800d512:	7fba      	ldrb	r2, [r7, #30]
 800d514:	4613      	mov	r3, r2
 800d516:	00db      	lsls	r3, r3, #3
 800d518:	4413      	add	r3, r2
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d520:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d522:	4413      	add	r3, r2
 800d524:	3304      	adds	r3, #4
 800d526:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800d528:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d109      	bne.n	800d544 <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800d530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d532:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d536:	7fbb      	ldrb	r3, [r7, #30]
 800d538:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7ff fb66 	bl	800cc0c <VL53LX_f_010>
 800d540:	4603      	mov	r3, r0
 800d542:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800d544:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d110      	bne.n	800d56e <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800d54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d54e:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800d558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d55a:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800d55e:	7fb8      	ldrb	r0, [r7, #30]
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	4613      	mov	r3, r2
 800d564:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d566:	f7ff fd5a 	bl	800d01e <VL53LX_f_011>
 800d56a:	4603      	mov	r3, r0
 800d56c:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800d56e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d10d      	bne.n	800d592 <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800d576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d578:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d57e:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800d582:	7fb8      	ldrb	r0, [r7, #30]
 800d584:	9300      	str	r3, [sp, #0]
 800d586:	2300      	movs	r3, #0
 800d588:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d58a:	f7ff fd48 	bl	800d01e <VL53LX_f_011>
 800d58e:	4603      	mov	r3, r0
 800d590:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800d592:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d10d      	bne.n	800d5b6 <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800d59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d59c:	f503 7152 	add.w	r1, r3, #840	; 0x348
 800d5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5a2:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800d5a6:	7fb8      	ldrb	r0, [r7, #30]
 800d5a8:	9300      	str	r3, [sp, #0]
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5ae:	f7ff fd36 	bl	800d01e <VL53LX_f_011>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800d5b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d109      	bne.n	800d5d2 <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800d5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5c0:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 800d5c4:	7fb8      	ldrb	r0, [r7, #30]
 800d5c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5ca:	f000 f8dd 	bl	800d788 <VL53LX_f_026>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800d5d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d108      	bne.n	800d5ec <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	8a19      	ldrh	r1, [r3, #16]
 800d5de:	7fb8      	ldrb	r0, [r7, #30]
 800d5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d5e4:	f000 f95c 	bl	800d8a0 <VL53LX_f_027>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800d5ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d124      	bne.n	800d63e <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	789d      	ldrb	r5, [r3, #2]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	7e1e      	ldrb	r6, [r3, #24]
 800d5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5fe:	f893 c003 	ldrb.w	ip, [r3, #3]
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	f893 e006 	ldrb.w	lr, [r3, #6]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d60e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d610:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 800d614:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d616:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 800d61a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d61c:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 800d620:	697c      	ldr	r4, [r7, #20]
 800d622:	3420      	adds	r4, #32
 800d624:	9404      	str	r4, [sp, #16]
 800d626:	9003      	str	r0, [sp, #12]
 800d628:	9102      	str	r1, [sp, #8]
 800d62a:	9201      	str	r2, [sp, #4]
 800d62c:	9300      	str	r3, [sp, #0]
 800d62e:	4673      	mov	r3, lr
 800d630:	4662      	mov	r2, ip
 800d632:	4631      	mov	r1, r6
 800d634:	4628      	mov	r0, r5
 800d636:	f7ff fd46 	bl	800d0c6 <VL53LX_f_014>
 800d63a:	4603      	mov	r3, r0
 800d63c:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800d63e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d109      	bne.n	800d65a <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800d646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d648:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 800d64c:	7fb8      	ldrb	r0, [r7, #30]
 800d64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d650:	2101      	movs	r1, #1
 800d652:	f7ff fb2e 	bl	800ccb2 <VL53LX_f_015>
 800d656:	4603      	mov	r3, r0
 800d658:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d65a:	7fbb      	ldrb	r3, [r7, #30]
 800d65c:	3301      	adds	r3, #1
 800d65e:	77bb      	strb	r3, [r7, #30]
 800d660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d662:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d666:	7fba      	ldrb	r2, [r7, #30]
 800d668:	429a      	cmp	r2, r3
 800d66a:	f4ff af52 	bcc.w	800d512 <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800d66e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d107      	bne.n	800d686 <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	785b      	ldrb	r3, [r3, #1]
 800d67a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7ff fa41 	bl	800cb04 <VL53LX_f_016>
 800d682:	4603      	mov	r3, r0
 800d684:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d686:	2300      	movs	r3, #0
 800d688:	77bb      	strb	r3, [r7, #30]
 800d68a:	e071      	b.n	800d770 <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800d68c:	7fba      	ldrb	r2, [r7, #30]
 800d68e:	4613      	mov	r3, r2
 800d690:	00db      	lsls	r3, r3, #3
 800d692:	4413      	add	r3, r2
 800d694:	009b      	lsls	r3, r3, #2
 800d696:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d69a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d69c:	4413      	add	r3, r2
 800d69e:	3304      	adds	r3, #4
 800d6a0:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800d6a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6a4:	7c9a      	ldrb	r2, [r3, #18]
 800d6a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6a8:	7c5b      	ldrb	r3, [r3, #17]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d25c      	bcs.n	800d768 <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	dd57      	ble.n	800d76a <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800d6be:	2bff      	cmp	r3, #255	; 0xff
 800d6c0:	d053      	beq.n	800d76a <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800d6c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6c4:	7c9b      	ldrb	r3, [r3, #18]
 800d6c6:	461a      	mov	r2, r3
			prange_data =
 800d6c8:	234c      	movs	r3, #76	; 0x4c
 800d6ca:	fb03 f302 	mul.w	r3, r3, r2
 800d6ce:	3310      	adds	r3, #16
 800d6d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6d2:	4413      	add	r3, r2
 800d6d4:	3304      	adds	r3, #4
 800d6d6:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800d6d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d115      	bne.n	800d70c <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800d6e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6e2:	7c98      	ldrb	r0, [r3, #18]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f893 1020 	ldrb.w	r1, [r3, #32]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	8b5d      	ldrh	r5, [r3, #26]
 800d6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6f6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d6fa:	693a      	ldr	r2, [r7, #16]
 800d6fc:	9202      	str	r2, [sp, #8]
 800d6fe:	697a      	ldr	r2, [r7, #20]
 800d700:	9201      	str	r2, [sp, #4]
 800d702:	9300      	str	r3, [sp, #0]
 800d704:	462b      	mov	r3, r5
 800d706:	4622      	mov	r2, r4
 800d708:	f7ff fd85 	bl	800d216 <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800d70c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d115      	bne.n	800d740 <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800d714:	69bb      	ldr	r3, [r7, #24]
 800d716:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 800d720:	69bb      	ldr	r3, [r7, #24]
 800d722:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 800d72c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d730:	9301      	str	r3, [sp, #4]
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	4623      	mov	r3, r4
 800d738:	f000 fb11 	bl	800dd5e <VL53LX_f_018>
 800d73c:	4603      	mov	r3, r0
 800d73e:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800d740:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d108      	bne.n	800d75a <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	8bd8      	ldrh	r0, [r3, #30]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800d752:	693a      	ldr	r2, [r7, #16]
 800d754:	4619      	mov	r1, r3
 800d756:	f000 fba7 	bl	800dea8 <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800d75a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d75c:	7c9b      	ldrb	r3, [r3, #18]
 800d75e:	3301      	adds	r3, #1
 800d760:	b2da      	uxtb	r2, r3
 800d762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d764:	749a      	strb	r2, [r3, #18]
 800d766:	e000      	b.n	800d76a <VL53LX_f_025+0x400>
			continue;
 800d768:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d76a:	7fbb      	ldrb	r3, [r7, #30]
 800d76c:	3301      	adds	r3, #1
 800d76e:	77bb      	strb	r3, [r7, #30]
 800d770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d772:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d776:	7fba      	ldrb	r2, [r7, #30]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d387      	bcc.n	800d68c <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800d77c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d780:	4618      	mov	r0, r3
 800d782:	3724      	adds	r7, #36	; 0x24
 800d784:	46bd      	mov	sp, r7
 800d786:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d788 <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b08c      	sub	sp, #48	; 0x30
 800d78c:	af02      	add	r7, sp, #8
 800d78e:	60b9      	str	r1, [r7, #8]
 800d790:	607a      	str	r2, [r7, #4]
 800d792:	603b      	str	r3, [r7, #0]
 800d794:	4603      	mov	r3, r0
 800d796:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800d798:	2300      	movs	r3, #0
 800d79a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800d79e:	7bfa      	ldrb	r2, [r7, #15]
 800d7a0:	4613      	mov	r3, r2
 800d7a2:	00db      	lsls	r3, r3, #3
 800d7a4:	4413      	add	r3, r2
 800d7a6:	009b      	lsls	r3, r3, #2
 800d7a8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	4413      	add	r3, r2
 800d7b0:	3304      	adds	r3, #4
 800d7b2:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	785a      	ldrb	r2, [r3, #1]
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	781a      	ldrb	r2, [r3, #0]
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	789a      	ldrb	r2, [r3, #2]
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d7e2:	6a3b      	ldr	r3, [r7, #32]
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d7ea:	e04d      	b.n	800d888 <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	78da      	ldrb	r2, [r3, #3]
 800d7f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7f8:	fb02 f201 	mul.w	r2, r2, r1
 800d7fc:	1a9b      	subs	r3, r3, r2
 800d7fe:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800d800:	6a3b      	ldr	r3, [r7, #32]
 800d802:	7999      	ldrb	r1, [r3, #6]
 800d804:	f107 0218 	add.w	r2, r7, #24
 800d808:	7ff8      	ldrb	r0, [r7, #31]
 800d80a:	f107 0310 	add.w	r3, r7, #16
 800d80e:	9301      	str	r3, [sp, #4]
 800d810:	f107 0314 	add.w	r3, r7, #20
 800d814:	9300      	str	r3, [sp, #0]
 800d816:	4613      	mov	r3, r2
 800d818:	68ba      	ldr	r2, [r7, #8]
 800d81a:	f000 fa47 	bl	800dcac <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800d81e:	7ffb      	ldrb	r3, [r7, #31]
 800d820:	69ba      	ldr	r2, [r7, #24]
 800d822:	6839      	ldr	r1, [r7, #0]
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	440b      	add	r3, r1
 800d828:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800d82a:	7ffb      	ldrb	r3, [r7, #31]
 800d82c:	697a      	ldr	r2, [r7, #20]
 800d82e:	6839      	ldr	r1, [r7, #0]
 800d830:	3318      	adds	r3, #24
 800d832:	009b      	lsls	r3, r3, #2
 800d834:	440b      	add	r3, r1
 800d836:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800d838:	7ffb      	ldrb	r3, [r7, #31]
 800d83a:	693a      	ldr	r2, [r7, #16]
 800d83c:	6839      	ldr	r1, [r7, #0]
 800d83e:	3330      	adds	r3, #48	; 0x30
 800d840:	009b      	lsls	r3, r3, #2
 800d842:	440b      	add	r3, r1
 800d844:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800d846:	69ba      	ldr	r2, [r7, #24]
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	689a      	ldr	r2, [r3, #8]
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800d854:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800d856:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800d858:	6839      	ldr	r1, [r7, #0]
 800d85a:	3348      	adds	r3, #72	; 0x48
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	440b      	add	r3, r1
 800d860:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800d862:	697a      	ldr	r2, [r7, #20]
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	689a      	ldr	r2, [r3, #8]
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800d870:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800d872:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800d874:	6839      	ldr	r1, [r7, #0]
 800d876:	3360      	adds	r3, #96	; 0x60
 800d878:	009b      	lsls	r3, r3, #2
 800d87a:	440b      	add	r3, r1
 800d87c:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d87e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d882:	3301      	adds	r3, #1
 800d884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d888:	6a3b      	ldr	r3, [r7, #32]
 800d88a:	791b      	ldrb	r3, [r3, #4]
 800d88c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d890:	429a      	cmp	r2, r3
 800d892:	d9ab      	bls.n	800d7ec <VL53LX_f_026+0x64>
	}

	return status;
 800d894:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3728      	adds	r7, #40	; 0x28
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800d8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8a2:	b08f      	sub	sp, #60	; 0x3c
 800d8a4:	af06      	add	r7, sp, #24
 800d8a6:	60ba      	str	r2, [r7, #8]
 800d8a8:	607b      	str	r3, [r7, #4]
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	73fb      	strb	r3, [r7, #15]
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800d8ba:	7bfa      	ldrb	r2, [r7, #15]
 800d8bc:	4613      	mov	r3, r2
 800d8be:	00db      	lsls	r3, r3, #3
 800d8c0:	4413      	add	r3, r2
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	4413      	add	r3, r2
 800d8cc:	3304      	adds	r3, #4
 800d8ce:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800d8dc:	69bb      	ldr	r3, [r7, #24]
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	77fb      	strb	r3, [r7, #31]
 800d8e2:	e0b9      	b.n	800da58 <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	78da      	ldrb	r2, [r3, #3]
 800d8e8:	7ffb      	ldrb	r3, [r7, #31]
 800d8ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8ee:	fb02 f201 	mul.w	r2, r2, r1
 800d8f2:	1a9b      	subs	r3, r3, r2
 800d8f4:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800d8f6:	7ffb      	ldrb	r3, [r7, #31]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	78d2      	ldrb	r2, [r2, #3]
 800d8fe:	fb93 f1f2 	sdiv	r1, r3, r2
 800d902:	fb02 f201 	mul.w	r2, r2, r1
 800d906:	1a9b      	subs	r3, r3, r2
 800d908:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	789b      	ldrb	r3, [r3, #2]
 800d90e:	7dfa      	ldrb	r2, [r7, #23]
 800d910:	429a      	cmp	r2, r3
 800d912:	f080 809e 	bcs.w	800da52 <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800d91a:	7dba      	ldrb	r2, [r7, #22]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	f080 8098 	bcs.w	800da52 <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800d922:	7dfb      	ldrb	r3, [r7, #23]
 800d924:	68ba      	ldr	r2, [r7, #8]
 800d926:	3348      	adds	r3, #72	; 0x48
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	4413      	add	r3, r2
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d10e      	bne.n	800d950 <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800d932:	7dfb      	ldrb	r3, [r7, #23]
 800d934:	68ba      	ldr	r2, [r7, #8]
 800d936:	3360      	adds	r3, #96	; 0x60
 800d938:	009b      	lsls	r3, r3, #2
 800d93a:	4413      	add	r3, r2
 800d93c:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d106      	bne.n	800d950 <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800d942:	7dfb      	ldrb	r3, [r7, #23]
 800d944:	68ba      	ldr	r2, [r7, #8]
 800d946:	4413      	add	r3, r2
 800d948:	2200      	movs	r2, #0
 800d94a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800d94e:	e043      	b.n	800d9d8 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800d950:	7dfb      	ldrb	r3, [r7, #23]
 800d952:	68ba      	ldr	r2, [r7, #8]
 800d954:	3348      	adds	r3, #72	; 0x48
 800d956:	009b      	lsls	r3, r3, #2
 800d958:	4413      	add	r3, r2
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	db0e      	blt.n	800d97e <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800d960:	7dfb      	ldrb	r3, [r7, #23]
 800d962:	68ba      	ldr	r2, [r7, #8]
 800d964:	3360      	adds	r3, #96	; 0x60
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	4413      	add	r3, r2
 800d96a:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	db06      	blt.n	800d97e <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800d970:	7dfb      	ldrb	r3, [r7, #23]
 800d972:	68ba      	ldr	r2, [r7, #8]
 800d974:	4413      	add	r3, r2
 800d976:	2201      	movs	r2, #1
 800d978:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800d97c:	e02c      	b.n	800d9d8 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800d97e:	7dfb      	ldrb	r3, [r7, #23]
 800d980:	68ba      	ldr	r2, [r7, #8]
 800d982:	3348      	adds	r3, #72	; 0x48
 800d984:	009b      	lsls	r3, r3, #2
 800d986:	4413      	add	r3, r2
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	da1e      	bge.n	800d9cc <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800d98e:	7dfb      	ldrb	r3, [r7, #23]
 800d990:	68ba      	ldr	r2, [r7, #8]
 800d992:	3360      	adds	r3, #96	; 0x60
 800d994:	009b      	lsls	r3, r3, #2
 800d996:	4413      	add	r3, r2
 800d998:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	db16      	blt.n	800d9cc <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800d99e:	7dbb      	ldrb	r3, [r7, #22]
 800d9a0:	68ba      	ldr	r2, [r7, #8]
 800d9a2:	3348      	adds	r3, #72	; 0x48
 800d9a4:	009b      	lsls	r3, r3, #2
 800d9a6:	4413      	add	r3, r2
 800d9a8:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	db0e      	blt.n	800d9cc <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800d9ae:	7dbb      	ldrb	r3, [r7, #22]
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	3360      	adds	r3, #96	; 0x60
 800d9b4:	009b      	lsls	r3, r3, #2
 800d9b6:	4413      	add	r3, r2
 800d9b8:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	da06      	bge.n	800d9cc <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800d9be:	7dfb      	ldrb	r3, [r7, #23]
 800d9c0:	68ba      	ldr	r2, [r7, #8]
 800d9c2:	4413      	add	r3, r2
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800d9ca:	e005      	b.n	800d9d8 <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800d9cc:	7dfb      	ldrb	r3, [r7, #23]
 800d9ce:	68ba      	ldr	r2, [r7, #8]
 800d9d0:	4413      	add	r3, r2
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800d9d8:	7dfb      	ldrb	r3, [r7, #23]
 800d9da:	68ba      	ldr	r2, [r7, #8]
 800d9dc:	4413      	add	r3, r2
 800d9de:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d035      	beq.n	800da52 <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	7ffa      	ldrb	r2, [r7, #31]
 800d9ea:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800d9ec:	7dfb      	ldrb	r3, [r7, #23]
 800d9ee:	68ba      	ldr	r2, [r7, #8]
 800d9f0:	009b      	lsls	r3, r3, #2
 800d9f2:	4413      	add	r3, r2
 800d9f4:	685c      	ldr	r4, [r3, #4]
 800d9f6:	7dfb      	ldrb	r3, [r7, #23]
 800d9f8:	68ba      	ldr	r2, [r7, #8]
 800d9fa:	3318      	adds	r3, #24
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	4413      	add	r3, r2
 800da00:	685d      	ldr	r5, [r3, #4]
 800da02:	7dfb      	ldrb	r3, [r7, #23]
 800da04:	68ba      	ldr	r2, [r7, #8]
 800da06:	3330      	adds	r3, #48	; 0x30
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	4413      	add	r3, r2
 800da0c:	685e      	ldr	r6, [r3, #4]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	78d2      	ldrb	r2, [r2, #3]
 800da16:	69b9      	ldr	r1, [r7, #24]
 800da18:	3118      	adds	r1, #24
 800da1a:	7ff8      	ldrb	r0, [r7, #31]
 800da1c:	9105      	str	r1, [sp, #20]
 800da1e:	9204      	str	r2, [sp, #16]
 800da20:	9303      	str	r3, [sp, #12]
 800da22:	2300      	movs	r3, #0
 800da24:	9302      	str	r3, [sp, #8]
 800da26:	2300      	movs	r3, #0
 800da28:	9301      	str	r3, [sp, #4]
 800da2a:	2300      	movs	r3, #0
 800da2c:	9300      	str	r3, [sp, #0]
 800da2e:	4633      	mov	r3, r6
 800da30:	462a      	mov	r2, r5
 800da32:	4621      	mov	r1, r4
 800da34:	f000 f81c 	bl	800da70 <VL53LX_f_028>
 800da38:	4603      	mov	r3, r0
 800da3a:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800da3c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800da40:	f113 0f0f 	cmn.w	r3, #15
 800da44:	d105      	bne.n	800da52 <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800da46:	7dfb      	ldrb	r3, [r7, #23]
 800da48:	68ba      	ldr	r2, [r7, #8]
 800da4a:	4413      	add	r3, r2
 800da4c:	2200      	movs	r2, #0
 800da4e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800da52:	7ffb      	ldrb	r3, [r7, #31]
 800da54:	3301      	adds	r3, #1
 800da56:	77fb      	strb	r3, [r7, #31]
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	791b      	ldrb	r3, [r3, #4]
 800da5c:	7ffa      	ldrb	r2, [r7, #31]
 800da5e:	429a      	cmp	r2, r3
 800da60:	f4ff af40 	bcc.w	800d8e4 <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800da64:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3724      	adds	r7, #36	; 0x24
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da70 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800da70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da74:	b09e      	sub	sp, #120	; 0x78
 800da76:	af00      	add	r7, sp, #0
 800da78:	64b9      	str	r1, [r7, #72]	; 0x48
 800da7a:	647a      	str	r2, [r7, #68]	; 0x44
 800da7c:	643b      	str	r3, [r7, #64]	; 0x40
 800da7e:	4603      	mov	r3, r0
 800da80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800da84:	23f1      	movs	r3, #241	; 0xf1
 800da86:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800da8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da8e:	f04f 0300 	mov.w	r3, #0
 800da92:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800da96:	f04f 0200 	mov.w	r2, #0
 800da9a:	f04f 0300 	mov.w	r3, #0
 800da9e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  half_b_minus_amb = 0;
 800daa2:	f04f 0200 	mov.w	r2, #0
 800daa6:	f04f 0300 	mov.w	r3, #0
 800daaa:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800daae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dab0:	4618      	mov	r0, r3
 800dab2:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800dab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800daba:	461a      	mov	r2, r3
 800dabc:	ea4f 73e2 	mov.w	r3, r2, asr #31
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800dac0:	ebb0 0802 	subs.w	r8, r0, r2
 800dac4:	eb61 0903 	sbc.w	r9, r1, r3
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800dac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daca:	461a      	mov	r2, r3
 800dacc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800dad0:	ebb8 0a02 	subs.w	sl, r8, r2
 800dad4:	eb69 0b03 	sbc.w	fp, r9, r3
 800dad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dadc:	461a      	mov	r2, r3
 800dade:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800dae2:	ebba 0402 	subs.w	r4, sl, r2
 800dae6:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800daea:	f04f 0200 	mov.w	r2, #0
 800daee:	f04f 0300 	mov.w	r3, #0
 800daf2:	032b      	lsls	r3, r5, #12
 800daf4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800daf8:	0322      	lsls	r2, r4, #12
 800dafa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800dafe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db00:	4618      	mov	r0, r3
 800db02:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800db06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db0a:	461a      	mov	r2, r3
 800db0c:	ea4f 73e2 	mov.w	r3, r2, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800db10:	1a84      	subs	r4, r0, r2
 800db12:	63bc      	str	r4, [r7, #56]	; 0x38
 800db14:	eb61 0303 	sbc.w	r3, r1, r3
 800db18:	63fb      	str	r3, [r7, #60]	; 0x3c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800db1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800db1e:	461a      	mov	r2, r3
 800db20:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800db24:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800db28:	4621      	mov	r1, r4
 800db2a:	1a89      	subs	r1, r1, r2
 800db2c:	6339      	str	r1, [r7, #48]	; 0x30
 800db2e:	4629      	mov	r1, r5
 800db30:	eb61 0303 	sbc.w	r3, r1, r3
 800db34:	637b      	str	r3, [r7, #52]	; 0x34
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800db36:	f04f 0200 	mov.w	r2, #0
 800db3a:	f04f 0300 	mov.w	r3, #0
 800db3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800db42:	4629      	mov	r1, r5
 800db44:	030b      	lsls	r3, r1, #12
 800db46:	4621      	mov	r1, r4
 800db48:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800db4c:	4621      	mov	r1, r4
 800db4e:	030a      	lsls	r2, r1, #12
 800db50:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	if (half_b_minus_amb != 0) {
 800db54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800db58:	4313      	orrs	r3, r2
 800db5a:	f000 809c 	beq.w	800dc96 <VL53LX_f_028+0x226>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800db5e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800db62:	f04f 0000 	mov.w	r0, #0
 800db66:	f04f 0100 	mov.w	r1, #0
 800db6a:	0319      	lsls	r1, r3, #12
 800db6c:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800db70:	0310      	lsls	r0, r2, #12
 800db72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800db76:	1814      	adds	r4, r2, r0
 800db78:	623c      	str	r4, [r7, #32]
 800db7a:	414b      	adcs	r3, r1
 800db7c:	627b      	str	r3, [r7, #36]	; 0x24
 800db7e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800db82:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800db86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800db8a:	1891      	adds	r1, r2, r2
 800db8c:	61b9      	str	r1, [r7, #24]
 800db8e:	415b      	adcs	r3, r3
 800db90:	61fb      	str	r3, [r7, #28]
 800db92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800db96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800db9a:	f7f2 fb71 	bl	8000280 <__aeabi_ldivmod>
 800db9e:	4602      	mov	r2, r0
 800dba0:	460b      	mov	r3, r1
 800dba2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		mean_phase  +=  2048;
 800dba6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800dbaa:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800dbae:	6139      	str	r1, [r7, #16]
 800dbb0:	f143 0300 	adc.w	r3, r3, #0
 800dbb4:	617b      	str	r3, [r7, #20]
 800dbb6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800dbba:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase  += (4096 * (int64_t)bin);
 800dbbe:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 800dbc2:	f04f 0100 	mov.w	r1, #0
 800dbc6:	f04f 0200 	mov.w	r2, #0
 800dbca:	f04f 0300 	mov.w	r3, #0
 800dbce:	030b      	lsls	r3, r1, #12
 800dbd0:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800dbd4:	0302      	lsls	r2, r0, #12
 800dbd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dbda:	1884      	adds	r4, r0, r2
 800dbdc:	60bc      	str	r4, [r7, #8]
 800dbde:	eb41 0303 	adc.w	r3, r1, r3
 800dbe2:	60fb      	str	r3, [r7, #12]
 800dbe4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800dbe8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800dbec:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800dbf0:	1c51      	adds	r1, r2, #1
 800dbf2:	62b9      	str	r1, [r7, #40]	; 0x28
 800dbf4:	f143 0300 	adc.w	r3, r3, #0
 800dbf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbfa:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800dbfe:	462b      	mov	r3, r5
 800dc00:	0fdb      	lsrs	r3, r3, #31
 800dc02:	461a      	mov	r2, r3
 800dc04:	f04f 0300 	mov.w	r3, #0
 800dc08:	4621      	mov	r1, r4
 800dc0a:	1851      	adds	r1, r2, r1
 800dc0c:	6039      	str	r1, [r7, #0]
 800dc0e:	4629      	mov	r1, r5
 800dc10:	eb43 0101 	adc.w	r1, r3, r1
 800dc14:	6079      	str	r1, [r7, #4]
 800dc16:	f04f 0200 	mov.w	r2, #0
 800dc1a:	f04f 0300 	mov.w	r3, #0
 800dc1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800dc22:	4621      	mov	r1, r4
 800dc24:	084a      	lsrs	r2, r1, #1
 800dc26:	4629      	mov	r1, r5
 800dc28:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800dc2c:	4629      	mov	r1, r5
 800dc2e:	104b      	asrs	r3, r1, #1
 800dc30:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		if (mean_phase  < 0)
 800dc34:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800dc38:	2a00      	cmp	r2, #0
 800dc3a:	f173 0300 	sbcs.w	r3, r3, #0
 800dc3e:	da05      	bge.n	800dc4c <VL53LX_f_028+0x1dc>
			mean_phase = 0;
 800dc40:	f04f 0200 	mov.w	r2, #0
 800dc44:	f04f 0300 	mov.w	r3, #0
 800dc48:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800dc4c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800dc50:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800dc54:	f04f 0100 	mov.w	r1, #0
 800dc58:	4290      	cmp	r0, r2
 800dc5a:	eb71 0303 	sbcs.w	r3, r1, r3
 800dc5e:	da05      	bge.n	800dc6c <VL53LX_f_028+0x1fc>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800dc60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc64:	f04f 0300 	mov.w	r3, #0
 800dc68:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		mean_phase32 = (int32_t)mean_phase;
 800dc6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc6e:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800dc70:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800dc74:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800dc76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc78:	fb93 f1f2 	sdiv	r1, r3, r2
 800dc7c:	fb02 f201 	mul.w	r2, r2, r1
 800dc80:	1a9b      	subs	r3, r3, r2
 800dc82:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase = mean_phase32;
 800dc84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc86:	461a      	mov	r2, r3
 800dc88:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800dc8c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		status = VL53LX_ERROR_NONE;
 800dc90:	2300      	movs	r3, #0
 800dc92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	}

	*pmean_phase = (uint32_t)mean_phase;
 800dc96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dc98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc9c:	601a      	str	r2, [r3, #0]

	return status;
 800dc9e:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3778      	adds	r7, #120	; 0x78
 800dca6:	46bd      	mov	sp, r7
 800dca8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dcac <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b087      	sub	sp, #28
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	60ba      	str	r2, [r7, #8]
 800dcb4:	607b      	str	r3, [r7, #4]
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	73fb      	strb	r3, [r7, #15]
 800dcba:	460b      	mov	r3, r1
 800dcbc:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800dccc:	7bfa      	ldrb	r2, [r7, #15]
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	3206      	adds	r2, #6
 800dcd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dcd6:	6a3b      	ldr	r3, [r7, #32]
 800dcd8:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800dcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcdc:	2200      	movs	r2, #0
 800dcde:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800dce0:	2300      	movs	r3, #0
 800dce2:	75fb      	strb	r3, [r7, #23]
 800dce4:	e02f      	b.n	800dd46 <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800dce6:	7bfa      	ldrb	r2, [r7, #15]
 800dce8:	7dfb      	ldrb	r3, [r7, #23]
 800dcea:	4413      	add	r3, r2
 800dcec:	68ba      	ldr	r2, [r7, #8]
 800dcee:	7a92      	ldrb	r2, [r2, #10]
 800dcf0:	441a      	add	r2, r3
 800dcf2:	7bbb      	ldrb	r3, [r7, #14]
 800dcf4:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800dcf6:	68ba      	ldr	r2, [r7, #8]
 800dcf8:	7a92      	ldrb	r2, [r2, #10]
 800dcfa:	fb93 f1f2 	sdiv	r1, r3, r2
 800dcfe:	fb02 f201 	mul.w	r2, r2, r1
 800dd02:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800dd04:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800dd06:	7dfa      	ldrb	r2, [r7, #23]
 800dd08:	7bbb      	ldrb	r3, [r7, #14]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d20a      	bcs.n	800dd24 <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	7db9      	ldrb	r1, [r7, #22]
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	3106      	adds	r1, #6
 800dd18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd1c:	441a      	add	r2, r3
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	601a      	str	r2, [r3, #0]
 800dd22:	e00d      	b.n	800dd40 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800dd24:	7dfa      	ldrb	r2, [r7, #23]
 800dd26:	7bbb      	ldrb	r3, [r7, #14]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d909      	bls.n	800dd40 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800dd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	7db9      	ldrb	r1, [r7, #22]
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	3106      	adds	r1, #6
 800dd36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd3a:	441a      	add	r2, r3
 800dd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3e:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800dd40:	7dfb      	ldrb	r3, [r7, #23]
 800dd42:	3301      	adds	r3, #1
 800dd44:	75fb      	strb	r3, [r7, #23]
 800dd46:	7bbb      	ldrb	r3, [r7, #14]
 800dd48:	005a      	lsls	r2, r3, #1
 800dd4a:	7dfb      	ldrb	r3, [r7, #23]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	daca      	bge.n	800dce6 <VL53LX_f_022+0x3a>
	}
}
 800dd50:	bf00      	nop
 800dd52:	bf00      	nop
 800dd54:	371c      	adds	r7, #28
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr

0800dd5e <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800dd5e:	b580      	push	{r7, lr}
 800dd60:	b088      	sub	sp, #32
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	60ba      	str	r2, [r7, #8]
 800dd66:	461a      	mov	r2, r3
 800dd68:	4603      	mov	r3, r0
 800dd6a:	81fb      	strh	r3, [r7, #14]
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	81bb      	strh	r3, [r7, #12]
 800dd70:	4613      	mov	r3, r2
 800dd72:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800dd74:	2300      	movs	r3, #0
 800dd76:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800dd80:	2300      	movs	r3, #0
 800dd82:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800dd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd86:	89fa      	ldrh	r2, [r7, #14]
 800dd88:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800dd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd8c:	89ba      	ldrh	r2, [r7, #12]
 800dd8e:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800dd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd92:	68ba      	ldr	r2, [r7, #8]
 800dd94:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800dd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd98:	88fa      	ldrh	r2, [r7, #6]
 800dd9a:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800dd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9e:	8a5b      	ldrh	r3, [r3, #18]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d101      	bne.n	800dda8 <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800dda4:	23f1      	movs	r3, #241	; 0xf1
 800dda6:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800dda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddaa:	699b      	ldr	r3, [r3, #24]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d101      	bne.n	800ddb4 <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800ddb0:	23f1      	movs	r3, #241	; 0xf1
 800ddb2:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800ddb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d16f      	bne.n	800de9c <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800ddbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbe:	8a5b      	ldrh	r3, [r3, #18]
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7fd faa6 	bl	800b312 <VL53LX_calc_pll_period_us>
 800ddc6:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800ddc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddca:	699b      	ldr	r3, [r3, #24]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800ddd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd2:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dddc:	6978      	ldr	r0, [r7, #20]
 800ddde:	f7fd faaf 	bl	800b340 <VL53LX_duration_maths>
 800dde2:	4602      	mov	r2, r0
 800dde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde6:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800dde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddea:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800ddec:	0119      	lsls	r1, r3, #4
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ddf4:	6978      	ldr	r0, [r7, #20]
 800ddf6:	f7fd faa3 	bl	800b340 <VL53LX_duration_maths>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfe:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800de00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800de04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de06:	69db      	ldr	r3, [r3, #28]
 800de08:	4619      	mov	r1, r3
 800de0a:	4610      	mov	r0, r2
 800de0c:	f7fd fd01 	bl	800b812 <VL53LX_rate_maths>
 800de10:	4603      	mov	r3, r0
 800de12:	461a      	mov	r2, r3
 800de14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de16:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800de18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800de1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1e:	6a1b      	ldr	r3, [r3, #32]
 800de20:	4619      	mov	r1, r3
 800de22:	4610      	mov	r0, r2
 800de24:	f7fd fcf5 	bl	800b812 <VL53LX_rate_maths>
 800de28:	4603      	mov	r3, r0
 800de2a:	461a      	mov	r2, r3
 800de2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2e:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800de30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800de34:	461a      	mov	r2, r3
 800de36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de38:	6a1b      	ldr	r3, [r3, #32]
 800de3a:	4619      	mov	r1, r3
 800de3c:	4610      	mov	r0, r2
 800de3e:	f7fd fce8 	bl	800b812 <VL53LX_rate_maths>
 800de42:	4603      	mov	r3, r0
 800de44:	461a      	mov	r2, r3
 800de46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de48:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800de4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800de4e:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800de50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de52:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 800de54:	4413      	add	r3, r2
 800de56:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800de58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d905      	bls.n	800de6c <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800de60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800de64:	69ba      	ldr	r2, [r7, #24]
 800de66:	fbb2 f3f3 	udiv	r3, r2, r3
 800de6a:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800de6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6e:	8ada      	ldrh	r2, [r3, #22]
 800de70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de74:	69b9      	ldr	r1, [r7, #24]
 800de76:	2006      	movs	r0, #6
 800de78:	f7fd fd10 	bl	800b89c <VL53LX_rate_per_spad_maths>
 800de7c:	4603      	mov	r3, r0
 800de7e:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800de80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de82:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800de84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de86:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800de88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8a:	8ad9      	ldrh	r1, [r3, #22]
 800de8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8e:	69db      	ldr	r3, [r3, #28]
 800de90:	461a      	mov	r2, r3
 800de92:	f7fd faaf 	bl	800b3f4 <VL53LX_events_per_spad_maths>
 800de96:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800de98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9a:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800de9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3720      	adds	r7, #32
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800dea8:	b590      	push	{r4, r7, lr}
 800deaa:	b085      	sub	sp, #20
 800deac:	af02      	add	r7, sp, #8
 800deae:	4603      	mov	r3, r0
 800deb0:	603a      	str	r2, [r7, #0]
 800deb2:	80fb      	strh	r3, [r7, #6]
 800deb4:	460b      	mov	r3, r1
 800deb6:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	8a58      	ldrh	r0, [r3, #18]
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	8a9c      	ldrh	r4, [r3, #20]
 800dec4:	88fb      	ldrh	r3, [r7, #6]
 800dec6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800deca:	9201      	str	r2, [sp, #4]
 800decc:	9300      	str	r3, [sp, #0]
 800dece:	2300      	movs	r3, #0
 800ded0:	4622      	mov	r2, r4
 800ded2:	f7fd fd17 	bl	800b904 <VL53LX_range_maths>
 800ded6:	4603      	mov	r3, r0
 800ded8:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	8a58      	ldrh	r0, [r3, #18]
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	8a9c      	ldrh	r4, [r3, #20]
 800deee:	88fb      	ldrh	r3, [r7, #6]
 800def0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800def4:	9201      	str	r2, [sp, #4]
 800def6:	9300      	str	r3, [sp, #0]
 800def8:	2300      	movs	r3, #0
 800defa:	4622      	mov	r2, r4
 800defc:	f7fd fd02 	bl	800b904 <VL53LX_range_maths>
 800df00:	4603      	mov	r3, r0
 800df02:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	8a58      	ldrh	r0, [r3, #18]
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	8a9c      	ldrh	r4, [r3, #20]
 800df18:	88fb      	ldrh	r3, [r7, #6]
 800df1a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800df1e:	9201      	str	r2, [sp, #4]
 800df20:	9300      	str	r3, [sp, #0]
 800df22:	2300      	movs	r3, #0
 800df24:	4622      	mov	r2, r4
 800df26:	f7fd fced 	bl	800b904 <VL53LX_range_maths>
 800df2a:	4603      	mov	r3, r0
 800df2c:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 800df34:	bf00      	nop
 800df36:	370c      	adds	r7, #12
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd90      	pop	{r4, r7, pc}

0800df3c <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800df48:	2300      	movs	r3, #0
 800df4a:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800df4c:	2300      	movs	r3, #0
 800df4e:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800df50:	2300      	movs	r3, #0
 800df52:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800df54:	2300      	movs	r3, #0
 800df56:	757b      	strb	r3, [r7, #21]





	memcpy(
 800df58:	22ac      	movs	r2, #172	; 0xac
 800df5a:	68b9      	ldr	r1, [r7, #8]
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f006 f8d9 	bl	8014114 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800df62:	2300      	movs	r3, #0
 800df64:	75fb      	strb	r3, [r7, #23]
 800df66:	e008      	b.n	800df7a <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800df68:	7dfa      	ldrb	r2, [r7, #23]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	3206      	adds	r2, #6
 800df6e:	2100      	movs	r1, #0
 800df70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800df74:	7dfb      	ldrb	r3, [r7, #23]
 800df76:	3301      	adds	r3, #1
 800df78:	75fb      	strb	r3, [r7, #23]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	7a5b      	ldrb	r3, [r3, #9]
 800df7e:	7dfa      	ldrb	r2, [r7, #23]
 800df80:	429a      	cmp	r2, r3
 800df82:	d3f1      	bcc.n	800df68 <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800df84:	68f9      	ldr	r1, [r7, #12]
 800df86:	68b8      	ldr	r0, [r7, #8]
 800df88:	f000 f878 	bl	800e07c <VL53LX_f_030>
 800df8c:	4603      	mov	r3, r0
 800df8e:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	7a9a      	ldrb	r2, [r3, #10]
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	7a9b      	ldrb	r3, [r3, #10]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d203      	bcs.n	800dfa4 <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	7a9b      	ldrb	r3, [r3, #10]
 800dfa0:	75bb      	strb	r3, [r7, #22]
 800dfa2:	e002      	b.n	800dfaa <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	7a9b      	ldrb	r3, [r3, #10]
 800dfa8:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800dfaa:	2300      	movs	r3, #0
 800dfac:	75fb      	strb	r3, [r7, #23]
 800dfae:	e05c      	b.n	800e06a <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800dfb0:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	db0f      	blt.n	800dfd8 <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800dfb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800dfc2:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800dfc4:	68ba      	ldr	r2, [r7, #8]
 800dfc6:	7a92      	ldrb	r2, [r2, #10]
 800dfc8:	b252      	sxtb	r2, r2
 800dfca:	fb93 f1f2 	sdiv	r1, r3, r2
 800dfce:	fb02 f201 	mul.w	r2, r2, r1
 800dfd2:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800dfd4:	757b      	strb	r3, [r7, #21]
 800dfd6:	e013      	b.n	800e000 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	7a9b      	ldrb	r3, [r3, #10]
 800dfdc:	b25b      	sxtb	r3, r3
 800dfde:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800dfe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800dfea:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800dfec:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800dfee:	68ba      	ldr	r2, [r7, #8]
 800dff0:	7a92      	ldrb	r2, [r2, #10]
 800dff2:	b252      	sxtb	r2, r2
 800dff4:	fb93 f1f2 	sdiv	r1, r3, r2
 800dff8:	fb02 f201 	mul.w	r2, r2, r1
 800dffc:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800dffe:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800e000:	7d7b      	ldrb	r3, [r7, #21]
 800e002:	461a      	mov	r2, r3
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	3206      	adds	r2, #6
 800e008:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800e00c:	7df9      	ldrb	r1, [r7, #23]
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	3106      	adds	r1, #6
 800e012:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800e016:	429a      	cmp	r2, r3
 800e018:	dd12      	ble.n	800e040 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800e01a:	7d7b      	ldrb	r3, [r7, #21]
 800e01c:	461a      	mov	r2, r3
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	3206      	adds	r2, #6
 800e022:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800e026:	7df9      	ldrb	r1, [r7, #23]
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	3106      	adds	r1, #6
 800e02c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800e030:	7d79      	ldrb	r1, [r7, #21]
 800e032:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800e034:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	1d82      	adds	r2, r0, #6
 800e03a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e03e:	e006      	b.n	800e04e <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800e040:	7d7b      	ldrb	r3, [r7, #21]
 800e042:	461a      	mov	r2, r3
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	3206      	adds	r2, #6
 800e048:	2100      	movs	r1, #0
 800e04a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800e04e:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e050:	7d7b      	ldrb	r3, [r7, #21]
 800e052:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	3206      	adds	r2, #6
 800e058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	1d82      	adds	r2, r0, #6
 800e060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800e064:	7dfb      	ldrb	r3, [r7, #23]
 800e066:	3301      	adds	r3, #1
 800e068:	75fb      	strb	r3, [r7, #23]
 800e06a:	7dfa      	ldrb	r2, [r7, #23]
 800e06c:	7dbb      	ldrb	r3, [r7, #22]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d39e      	bcc.n	800dfb0 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800e072:	bf00      	nop
 800e074:	bf00      	nop
 800e076:	3718      	adds	r7, #24
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b086      	sub	sp, #24
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800e086:	2300      	movs	r3, #0
 800e088:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800e08a:	2300      	movs	r3, #0
 800e08c:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800e08e:	2300      	movs	r3, #0
 800e090:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800e092:	2300      	movs	r3, #0
 800e094:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7fd fd0b 	bl	800bab8 <VL53LX_decode_vcsel_period>
 800e0a2:	4603      	mov	r3, r0
	period = 2048 *
 800e0a4:	02db      	lsls	r3, r3, #11
 800e0a6:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d00a      	beq.n	800e0c4 <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 800e0b4:	68ba      	ldr	r2, [r7, #8]
 800e0b6:	fbb3 f2f2 	udiv	r2, r3, r2
 800e0ba:	68b9      	ldr	r1, [r7, #8]
 800e0bc:	fb01 f202 	mul.w	r2, r1, r2
 800e0c0:	1a9b      	subs	r3, r3, r2
 800e0c2:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800e0ca:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800e0cc:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e0ce:	1ad3      	subs	r3, r2, r3
 800e0d0:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	dd09      	ble.n	800e0ec <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	da01      	bge.n	800e0e6 <VL53LX_f_030+0x6a>
 800e0e2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800e0e6:	12db      	asrs	r3, r3, #11
 800e0e8:	75fb      	strb	r3, [r7, #23]
 800e0ea:	e008      	b.n	800e0fe <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	da01      	bge.n	800e0fa <VL53LX_f_030+0x7e>
 800e0f6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800e0fa:	12db      	asrs	r3, r3, #11
 800e0fc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800e0fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e102:	4618      	mov	r0, r3
 800e104:	3718      	adds	r7, #24
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}

0800e10a <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b08e      	sub	sp, #56	; 0x38
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
 800e112:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e114:	2300      	movs	r3, #0
 800e116:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800e11a:	2300      	movs	r3, #0
 800e11c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 800e120:	2300      	movs	r3, #0
 800e122:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 800e126:	2300      	movs	r3, #0
 800e128:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800e12a:	2300      	movs	r3, #0
 800e12c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 800e130:	2300      	movs	r3, #0
 800e132:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 800e136:	2300      	movs	r3, #0
 800e138:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800e13c:	22ac      	movs	r2, #172	; 0xac
 800e13e:	6879      	ldr	r1, [r7, #4]
 800e140:	6838      	ldr	r0, [r7, #0]
 800e142:	f005 ffe7 	bl	8014114 <memcpy>


	podata->VL53LX_p_021 = 0;
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	2200      	movs	r2, #0
 800e14a:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e14c:	2300      	movs	r3, #0
 800e14e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e152:	e00a      	b.n	800e16a <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800e154:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e158:	683a      	ldr	r2, [r7, #0]
 800e15a:	4413      	add	r3, r2
 800e15c:	2210      	movs	r2, #16
 800e15e:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e160:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e164:	3301      	adds	r3, #1
 800e166:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e16a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e16e:	2b05      	cmp	r3, #5
 800e170:	d9f0      	bls.n	800e154 <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e172:	2300      	movs	r3, #0
 800e174:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e178:	e00b      	b.n	800e192 <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800e17a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	3206      	adds	r2, #6
 800e182:	2100      	movs	r1, #0
 800e184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e188:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e18c:	3301      	adds	r3, #1
 800e18e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	7a5b      	ldrb	r3, [r3, #9]
 800e196:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d3ed      	bcc.n	800e17a <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e19e:	2300      	movs	r3, #0
 800e1a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e1a4:	e014      	b.n	800e1d0 <VL53LX_f_031+0xc6>
		bin_initial_index[lc] = 0x00;
 800e1a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e1aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e1ae:	4413      	add	r3, r2
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800e1b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e1ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e1be:	4413      	add	r3, r2
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e1c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e1d0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e1d4:	2b0f      	cmp	r3, #15
 800e1d6:	d9e6      	bls.n	800e1a6 <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e1de:	2300      	movs	r3, #0
 800e1e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e1e4:	e06c      	b.n	800e2c0 <VL53LX_f_031+0x1b6>

		bin_cfg = pidata->bin_seq[lc];
 800e1e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e1ea:	687a      	ldr	r2, [r7, #4]
 800e1ec:	4413      	add	r3, r2
 800e1ee:	7b1b      	ldrb	r3, [r3, #12]
 800e1f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800e1f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e1f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e1fc:	4413      	add	r3, r2
 800e1fe:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d116      	bne.n	800e234 <VL53LX_f_031+0x12a>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800e206:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e20a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e20e:	0092      	lsls	r2, r2, #2
 800e210:	b2d2      	uxtb	r2, r2
 800e212:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e216:	440b      	add	r3, r1
 800e218:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800e21c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e220:	683a      	ldr	r2, [r7, #0]
 800e222:	4413      	add	r3, r2
 800e224:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e228:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800e22a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e22e:	3301      	adds	r3, #1
 800e230:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800e234:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e238:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e23c:	441a      	add	r2, r3
 800e23e:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800e242:	3201      	adds	r2, #1
 800e244:	b2d2      	uxtb	r2, r2
 800e246:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e24a:	440b      	add	r3, r1
 800e24c:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800e250:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e254:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e258:	4413      	add	r3, r2
 800e25a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e25e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 800e262:	2300      	movs	r3, #0
 800e264:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e268:	e021      	b.n	800e2ae <VL53LX_f_031+0x1a4>
			podata->bin_data[VL53LX_p_032+i] +=
 800e26a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e26e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e272:	441a      	add	r2, r3
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	3206      	adds	r2, #6
 800e278:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800e27c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e280:	009a      	lsls	r2, r3, #2
 800e282:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e286:	441a      	add	r2, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	3206      	adds	r2, #6
 800e28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800e290:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 800e294:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e298:	4402      	add	r2, r0
 800e29a:	4419      	add	r1, r3
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	3206      	adds	r2, #6
 800e2a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800e2a4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e2ae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e2b2:	2b03      	cmp	r3, #3
 800e2b4:	d9d9      	bls.n	800e26a <VL53LX_f_031+0x160>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e2b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e2c0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e2c4:	2b05      	cmp	r3, #5
 800e2c6:	d98e      	bls.n	800e1e6 <VL53LX_f_031+0xdc>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e2ce:	e023      	b.n	800e318 <VL53LX_f_031+0x20e>

		bin_cfg = podata->bin_seq[lc];
 800e2d0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e2d4:	683a      	ldr	r2, [r7, #0]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	7b1b      	ldrb	r3, [r3, #12]
 800e2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800e2de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e2e2:	2b0f      	cmp	r3, #15
 800e2e4:	d80d      	bhi.n	800e302 <VL53LX_f_031+0x1f8>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800e2e6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 800e2ea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 800e2ee:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e2f2:	440a      	add	r2, r1
 800e2f4:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800e2f8:	683a      	ldr	r2, [r7, #0]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	460a      	mov	r2, r1
 800e2fe:	749a      	strb	r2, [r3, #18]
 800e300:	e005      	b.n	800e30e <VL53LX_f_031+0x204>
		else
			podata->bin_rep[lc] = 0;
 800e302:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e306:	683a      	ldr	r2, [r7, #0]
 800e308:	4413      	add	r3, r2
 800e30a:	2200      	movs	r2, #0
 800e30c:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e30e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e312:	3301      	adds	r3, #1
 800e314:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e318:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e31c:	2b05      	cmp	r3, #5
 800e31e:	d9d7      	bls.n	800e2d0 <VL53LX_f_031+0x1c6>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800e320:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	b2da      	uxtb	r2, r3
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e32c:	2300      	movs	r3, #0
 800e32e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e332:	e052      	b.n	800e3da <VL53LX_f_031+0x2d0>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800e334:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e338:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e33c:	4413      	add	r3, r2
 800e33e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e342:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 800e344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e346:	2b00      	cmp	r3, #0
 800e348:	dd42      	ble.n	800e3d0 <VL53LX_f_031+0x2c6>

			VL53LX_p_032 = bin_initial_index[lc];
 800e34a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e34e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e352:	4413      	add	r3, r2
 800e354:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800e35c:	2300      	movs	r3, #0
 800e35e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e362:	e031      	b.n	800e3c8 <VL53LX_f_031+0x2be>
				podata->bin_data[VL53LX_p_032+i] +=
 800e364:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e368:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e36c:	441a      	add	r2, r3
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	3206      	adds	r2, #6
 800e372:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800e376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e378:	0fda      	lsrs	r2, r3, #31
 800e37a:	4413      	add	r3, r2
 800e37c:	105b      	asrs	r3, r3, #1
 800e37e:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800e380:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e384:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e388:	441a      	add	r2, r3
 800e38a:	4401      	add	r1, r0
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	3206      	adds	r2, #6
 800e390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800e394:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e398:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e39c:	441a      	add	r2, r3
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	3206      	adds	r2, #6
 800e3a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e3a6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e3aa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e3ae:	441a      	add	r2, r3
 800e3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b2:	fb91 f1f3 	sdiv	r1, r1, r3
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	3206      	adds	r2, #6
 800e3ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800e3be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e3c8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e3cc:	2b03      	cmp	r3, #3
 800e3ce:	d9c9      	bls.n	800e364 <VL53LX_f_031+0x25a>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e3d0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e3da:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e3de:	2b0f      	cmp	r3, #15
 800e3e0:	d9a8      	bls.n	800e334 <VL53LX_f_031+0x22a>
		}
	}



	podata->number_of_ambient_bins = 0;
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800e3e8:	7bfb      	ldrb	r3, [r7, #15]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d102      	bne.n	800e3f4 <VL53LX_f_031+0x2ea>
		(bin_repeat_count[15] > 0))
 800e3ee:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d002      	beq.n	800e3fa <VL53LX_f_031+0x2f0>
		podata->number_of_ambient_bins = 4;
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	2204      	movs	r2, #4
 800e3f8:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800e3fa:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3738      	adds	r7, #56	; 0x38
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}

0800e406 <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800e406:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e408:	b0cb      	sub	sp, #300	; 0x12c
 800e40a:	af06      	add	r7, sp, #24
 800e40c:	f107 040c 	add.w	r4, r7, #12
 800e410:	6020      	str	r0, [r4, #0]
 800e412:	f107 0008 	add.w	r0, r7, #8
 800e416:	6001      	str	r1, [r0, #0]
 800e418:	1d39      	adds	r1, r7, #4
 800e41a:	600a      	str	r2, [r1, #0]
 800e41c:	463a      	mov	r2, r7
 800e41e:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e420:	2300      	movs	r3, #0
 800e422:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800e426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e42a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800e42e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e432:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800e436:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800e43a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800e43e:	f107 0318 	add.w	r3, r7, #24
 800e442:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800e446:	2300      	movs	r3, #0
 800e448:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800e44a:	2300      	movs	r3, #0
 800e44c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 800e450:	2300      	movs	r3, #0
 800e452:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 800e456:	2300      	movs	r3, #0
 800e458:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 800e45c:	2300      	movs	r3, #0
 800e45e:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800e462:	2300      	movs	r3, #0
 800e464:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 800e468:	2300      	movs	r3, #0
 800e46a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800e46e:	463b      	mov	r3, r7
 800e470:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800e474:	6818      	ldr	r0, [r3, #0]
 800e476:	f7ff fe48 	bl	800e10a <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800e47a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e47e:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800e480:	b299      	uxth	r1, r3
 800e482:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e486:	3348      	adds	r3, #72	; 0x48
 800e488:	461a      	mov	r2, r3
 800e48a:	2000      	movs	r0, #0
 800e48c:	f7fd fb65 	bl	800bb5a <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800e490:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e494:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e498:	3348      	adds	r3, #72	; 0x48
 800e49a:	4619      	mov	r1, r3
 800e49c:	4610      	mov	r0, r2
 800e49e:	f7fd fb1e 	bl	800bade <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800e4a2:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d12d      	bne.n	800e506 <VL53LX_hist_process_data+0x100>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800e4aa:	1d3b      	adds	r3, r7, #4
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d027      	beq.n	800e506 <VL53LX_hist_process_data+0x100>
		status =
		VL53LX_f_032(
 800e4b6:	1d3b      	adds	r3, r7, #4
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e4bc:	1d3b      	adds	r3, r7, #4
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 800e4c4:	1d3b      	adds	r3, r7, #4
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 800e4cc:	463b      	mov	r3, r7
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800e4d4:	463a      	mov	r2, r7
 800e4d6:	6812      	ldr	r2, [r2, #0]
 800e4d8:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 800e4dc:	4639      	mov	r1, r7
 800e4de:	6809      	ldr	r1, [r1, #0]
 800e4e0:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 800e4e4:	f107 0014 	add.w	r0, r7, #20
 800e4e8:	9004      	str	r0, [sp, #16]
 800e4ea:	9103      	str	r1, [sp, #12]
 800e4ec:	9202      	str	r2, [sp, #8]
 800e4ee:	9301      	str	r3, [sp, #4]
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	9300      	str	r3, [sp, #0]
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	4632      	mov	r2, r6
 800e4f8:	4629      	mov	r1, r5
 800e4fa:	4620      	mov	r0, r4
 800e4fc:	f002 f8bf 	bl	801067e <VL53LX_f_032>
 800e500:	4603      	mov	r3, r0
 800e502:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800e506:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d112      	bne.n	800e534 <VL53LX_hist_process_data+0x12e>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800e50e:	1d3b      	adds	r3, r7, #4
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800e516:	2b00      	cmp	r3, #0
 800e518:	d00c      	beq.n	800e534 <VL53LX_hist_process_data+0x12e>
		status =
			VL53LX_f_033(
 800e51a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800e51e:	697a      	ldr	r2, [r7, #20]
 800e520:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e524:	3348      	adds	r3, #72	; 0x48
 800e526:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800e52a:	f002 faab 	bl	8010a84 <VL53LX_f_033>
 800e52e:	4603      	mov	r3, r0
 800e530:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800e534:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e538:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 800e53c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e540:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800e544:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e548:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800e54c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e550:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800e554:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e558:	2200      	movs	r2, #0
 800e55a:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800e55e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e562:	2200      	movs	r2, #0
 800e564:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 800e568:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e56c:	2200      	movs	r2, #0
 800e56e:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800e572:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e576:	2200      	movs	r2, #0
 800e578:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 800e57c:	2300      	movs	r3, #0
 800e57e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800e582:	1d3b      	adds	r3, r7, #4
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d002      	beq.n	800e594 <VL53LX_hist_process_data+0x18e>
		xtalk_enable = 1;
 800e58e:	2301      	movs	r3, #1
 800e590:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800e594:	2300      	movs	r3, #0
 800e596:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800e59a:	e0ef      	b.n	800e77c <VL53LX_hist_process_data+0x376>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800e59c:	1d3b      	adds	r3, r7, #4
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800e5a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53LX_f_025(
 800e5a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e5ac:	3348      	adds	r3, #72	; 0x48
 800e5ae:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800e5b2:	7814      	ldrb	r4, [r2, #0]
 800e5b4:	1d3a      	adds	r2, r7, #4
 800e5b6:	f107 0108 	add.w	r1, r7, #8
 800e5ba:	f107 000c 	add.w	r0, r7, #12
 800e5be:	9405      	str	r4, [sp, #20]
 800e5c0:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800e5c4:	9404      	str	r4, [sp, #16]
 800e5c6:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 800e5ca:	9403      	str	r4, [sp, #12]
 800e5cc:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800e5d0:	9402      	str	r4, [sp, #8]
 800e5d2:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800e5d6:	9401      	str	r4, [sp, #4]
 800e5d8:	9300      	str	r3, [sp, #0]
 800e5da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e5de:	6812      	ldr	r2, [r2, #0]
 800e5e0:	6809      	ldr	r1, [r1, #0]
 800e5e2:	6800      	ldr	r0, [r0, #0]
 800e5e4:	f7fe fec1 	bl	800d36a <VL53LX_f_025>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800e5ee:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	f040 80bc 	bne.w	800e770 <VL53LX_hist_process_data+0x36a>
 800e5f8:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	f040 80b7 	bne.w	800e770 <VL53LX_hist_process_data+0x36a>
			continue;



		if (presults->active_results == 0) {
 800e602:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e606:	7c9b      	ldrb	r3, [r3, #18]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d110      	bne.n	800e62e <VL53LX_hist_process_data+0x228>
			pdata = &(presults->VL53LX_p_003[0]);
 800e60c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e610:	3314      	adds	r3, #20
 800e612:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800e616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e61a:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800e61c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e620:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800e622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e626:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800e628:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e62c:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800e62e:	1d3b      	adds	r3, r7, #4
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800e634:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800e638:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	461a      	mov	r2, r3
 800e640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e644:	fb02 f303 	mul.w	r3, r2, r3
 800e648:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800e64c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e650:	011b      	lsls	r3, r3, #4
 800e652:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800e656:	2300      	movs	r3, #0
 800e658:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800e65c:	e07f      	b.n	800e75e <VL53LX_hist_process_data+0x358>

			pdata = &(presults->VL53LX_p_003[t]);
 800e65e:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800e662:	224c      	movs	r2, #76	; 0x4c
 800e664:	fb02 f303 	mul.w	r3, r2, r3
 800e668:	3310      	adds	r3, #16
 800e66a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800e66e:	4413      	add	r3, r2
 800e670:	3304      	adds	r3, #4
 800e672:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800e676:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e67a:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800e67e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e682:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800e686:	429a      	cmp	r2, r3
 800e688:	dd0e      	ble.n	800e6a8 <VL53LX_hist_process_data+0x2a2>
				delta_mm =
					pdata->max_range_mm -
 800e68a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e68e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800e692:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800e694:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e698:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800e69c:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800e69e:	1ad3      	subs	r3, r2, r3
 800e6a0:	b29b      	uxth	r3, r3
				delta_mm =
 800e6a2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800e6a6:	e00d      	b.n	800e6c4 <VL53LX_hist_process_data+0x2be>
			else
				delta_mm =
					pdata->min_range_mm -
 800e6a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e6ac:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800e6b0:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800e6b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e6b6:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800e6ba:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800e6bc:	1ad3      	subs	r3, r2, r3
 800e6be:	b29b      	uxth	r3, r3
				delta_mm =
 800e6c0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800e6c4:	1d3b      	adds	r3, r7, #4
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 800e6ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800e6ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e6da:	fb02 f303 	mul.w	r3, r2, r3
 800e6de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 800e6e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e6e6:	015b      	lsls	r3, r3, #5
 800e6e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 800e6ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e6f0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800e6f4:	1d3b      	adds	r3, r7, #4
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	dd29      	ble.n	800e754 <VL53LX_hist_process_data+0x34e>
			pdata->median_range_mm  <
 800e700:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e704:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800e708:	1d3b      	adds	r3, r7, #4
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800e710:	429a      	cmp	r2, r3
 800e712:	da1f      	bge.n	800e754 <VL53LX_hist_process_data+0x34e>
			pdata->VL53LX_p_009 <
 800e714:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800e71a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800e71e:	429a      	cmp	r2, r3
 800e720:	d918      	bls.n	800e754 <VL53LX_hist_process_data+0x34e>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800e722:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e726:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e728:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800e72a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e72e:	4293      	cmp	r3, r2
 800e730:	d910      	bls.n	800e754 <VL53LX_hist_process_data+0x34e>
			delta_mm <
 800e732:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800e736:	1d3a      	adds	r2, r7, #4
 800e738:	6812      	ldr	r2, [r2, #0]
 800e73a:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800e73c:	4293      	cmp	r3, r2
 800e73e:	da09      	bge.n	800e754 <VL53LX_hist_process_data+0x34e>



				memcpy(
					&(presults->xmonitor),
 800e740:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e744:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 800e748:	224c      	movs	r2, #76	; 0x4c
 800e74a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800e74e:	4618      	mov	r0, r3
 800e750:	f005 fce0 	bl	8014114 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800e754:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800e758:	3301      	adds	r3, #1
 800e75a:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800e75e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e762:	7c9b      	ldrb	r3, [r3, #18]
 800e764:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 800e768:	429a      	cmp	r2, r3
 800e76a:	f4ff af78 	bcc.w	800e65e <VL53LX_hist_process_data+0x258>
 800e76e:	e000      	b.n	800e772 <VL53LX_hist_process_data+0x36c>
			continue;
 800e770:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800e772:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800e776:	3301      	adds	r3, #1
 800e778:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800e77c:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800e780:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800e784:	429a      	cmp	r2, r3
 800e786:	f67f af09 	bls.w	800e59c <VL53LX_hist_process_data+0x196>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800e78a:	1d3b      	adds	r3, r7, #4
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800e792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 800e796:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e7a4 <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b086      	sub	sp, #24
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	607a      	str	r2, [r7, #4]
 800e7b0:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800e7b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d104      	bne.n	800e7c8 <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800e7be:	68f8      	ldr	r0, [r7, #12]
 800e7c0:	f7f9 fe88 	bl	80084d4 <VL53LX_disable_firmware>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800e7c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d104      	bne.n	800e7da <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800e7d0:	68f8      	ldr	r0, [r7, #12]
 800e7d2:	f7f9 feb0 	bl	8008536 <VL53LX_enable_powerforce>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800e7da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d105      	bne.n	800e7ee <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800e7e2:	21fa      	movs	r1, #250	; 0xfa
 800e7e4:	68f8      	ldr	r0, [r7, #12]
 800e7e6:	f002 fb9d 	bl	8010f24 <VL53LX_WaitUs>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800e7ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d107      	bne.n	800e806 <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	f240 7181 	movw	r1, #1921	; 0x781
 800e7fc:	68f8      	ldr	r0, [r7, #12]
 800e7fe:	f002 fa9d 	bl	8010d3c <VL53LX_WrByte>
 800e802:	4603      	mov	r3, r0
 800e804:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800e806:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d107      	bne.n	800e81e <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800e80e:	2205      	movs	r2, #5
 800e810:	f240 6183 	movw	r1, #1667	; 0x683
 800e814:	68f8      	ldr	r0, [r7, #12]
 800e816:	f002 fa91 	bl	8010d3c <VL53LX_WrByte>
 800e81a:	4603      	mov	r3, r0
 800e81c:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800e81e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d105      	bne.n	800e832 <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800e826:	6879      	ldr	r1, [r7, #4]
 800e828:	68f8      	ldr	r0, [r7, #12]
 800e82a:	f002 fb7b 	bl	8010f24 <VL53LX_WaitUs>
 800e82e:	4603      	mov	r3, r0
 800e830:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800e832:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d107      	bne.n	800e84a <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800e83a:	2201      	movs	r2, #1
 800e83c:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800e840:	68f8      	ldr	r0, [r7, #12]
 800e842:	f002 fa7b 	bl	8010d3c <VL53LX_WrByte>
 800e846:	4603      	mov	r3, r0
 800e848:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800e84a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d108      	bne.n	800e864 <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800e852:	897b      	ldrh	r3, [r7, #10]
 800e854:	461a      	mov	r2, r3
 800e856:	f240 7184 	movw	r1, #1924	; 0x784
 800e85a:	68f8      	ldr	r0, [r7, #12]
 800e85c:	f002 fa98 	bl	8010d90 <VL53LX_WrWord>
 800e860:	4603      	mov	r3, r0
 800e862:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800e864:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800e868:	4618      	mov	r0, r3
 800e86a:	3718      	adds	r7, #24
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b086      	sub	sp, #24
 800e874:	af00      	add	r7, sp, #0
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	607b      	str	r3, [r7, #4]
 800e87a:	460b      	mov	r3, r1
 800e87c:	72fb      	strb	r3, [r7, #11]
 800e87e:	4613      	mov	r3, r2
 800e880:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800e882:	2300      	movs	r3, #0
 800e884:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800e886:	2300      	movs	r3, #0
 800e888:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800e88a:	7afb      	ldrb	r3, [r7, #11]
 800e88c:	75bb      	strb	r3, [r7, #22]
 800e88e:	e041      	b.n	800e914 <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800e890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d108      	bne.n	800e8aa <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800e898:	7dbb      	ldrb	r3, [r7, #22]
 800e89a:	461a      	mov	r2, r3
 800e89c:	f240 7194 	movw	r1, #1940	; 0x794
 800e8a0:	68f8      	ldr	r0, [r7, #12]
 800e8a2:	f002 fa4b 	bl	8010d3c <VL53LX_WrByte>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800e8aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d107      	bne.n	800e8c2 <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f240 7183 	movw	r1, #1923	; 0x783
 800e8b8:	68f8      	ldr	r0, [r7, #12]
 800e8ba:	f002 fa3f 	bl	8010d3c <VL53LX_WrByte>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800e8c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d105      	bne.n	800e8d6 <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800e8ca:	2105      	movs	r1, #5
 800e8cc:	68f8      	ldr	r0, [r7, #12]
 800e8ce:	f002 fb29 	bl	8010f24 <VL53LX_WaitUs>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800e8d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d107      	bne.n	800e8ee <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800e8de:	2201      	movs	r2, #1
 800e8e0:	f240 7183 	movw	r1, #1923	; 0x783
 800e8e4:	68f8      	ldr	r0, [r7, #12]
 800e8e6:	f002 fa29 	bl	8010d3c <VL53LX_WrByte>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800e8ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d108      	bne.n	800e908 <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800e8f6:	2304      	movs	r3, #4
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	f002 f9e6 	bl	8010cd0 <VL53LX_ReadMulti>
 800e904:	4603      	mov	r3, r0
 800e906:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	3304      	adds	r3, #4
 800e90c:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800e90e:	7dbb      	ldrb	r3, [r7, #22]
 800e910:	3301      	adds	r3, #1
 800e912:	75bb      	strb	r3, [r7, #22]
 800e914:	7dba      	ldrb	r2, [r7, #22]
 800e916:	7af9      	ldrb	r1, [r7, #11]
 800e918:	7abb      	ldrb	r3, [r7, #10]
 800e91a:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 800e91c:	429a      	cmp	r2, r3
 800e91e:	dbb7      	blt.n	800e890 <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800e920:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e924:	4618      	mov	r0, r3
 800e926:	3718      	adds	r7, #24
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e934:	2300      	movs	r3, #0
 800e936:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800e938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d107      	bne.n	800e950 <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800e940:	2201      	movs	r2, #1
 800e942:	f240 7183 	movw	r1, #1923	; 0x783
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f002 f9f8 	bl	8010d3c <VL53LX_WrByte>
 800e94c:	4603      	mov	r3, r0
 800e94e:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800e950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d107      	bne.n	800e968 <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800e958:	2200      	movs	r2, #0
 800e95a:	f240 7181 	movw	r1, #1921	; 0x781
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f002 f9ec 	bl	8010d3c <VL53LX_WrByte>
 800e964:	4603      	mov	r3, r0
 800e966:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800e968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d104      	bne.n	800e97a <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f7f9 fdf2 	bl	800855a <VL53LX_disable_powerforce>
 800e976:	4603      	mov	r3, r0
 800e978:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800e97a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d104      	bne.n	800e98c <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f7f9 fd94 	bl	80084b0 <VL53LX_enable_firmware>
 800e988:	4603      	mov	r3, r0
 800e98a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800e98c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800e990:	4618      	mov	r0, r3
 800e992:	3710      	adds	r7, #16
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}

0800e998 <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800e998:	b480      	push	{r7}
 800e99a:	b087      	sub	sp, #28
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	4603      	mov	r3, r0
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	607a      	str	r2, [r7, #4]
 800e9a4:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800e9ae:	89fb      	ldrh	r3, [r7, #14]
 800e9b0:	2b03      	cmp	r3, #3
 800e9b2:	d802      	bhi.n	800e9ba <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800e9b4:	f06f 0308 	mvn.w	r3, #8
 800e9b8:	e018      	b.n	800e9ec <VL53LX_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 800e9ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e9be:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	3302      	adds	r3, #2
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	b29b      	uxth	r3, r3
 800e9c8:	8afa      	ldrh	r2, [r7, #22]
 800e9ca:	1ad3      	subs	r3, r2, r3
 800e9cc:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800e9ce:	8afb      	ldrh	r3, [r7, #22]
 800e9d0:	2bff      	cmp	r3, #255	; 0xff
 800e9d2:	d901      	bls.n	800e9d8 <VL53LX_nvm_decode_optical_centre+0x40>
		tmp = 0;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800e9d8:	8afb      	ldrh	r3, [r7, #22]
 800e9da:	b2da      	uxtb	r2, r3
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	78da      	ldrb	r2, [r3, #3]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	705a      	strb	r2, [r3, #1]

	return status;
 800e9e8:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	371c      	adds	r7, #28
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	4770      	bx	lr

0800e9f8 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800e9f8:	b590      	push	{r4, r7, lr}
 800e9fa:	b087      	sub	sp, #28
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	4603      	mov	r3, r0
 800ea00:	60b9      	str	r1, [r7, #8]
 800ea02:	607a      	str	r2, [r7, #4]
 800ea04:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ea06:	2300      	movs	r3, #0
 800ea08:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800ea12:	89fb      	ldrh	r3, [r7, #14]
 800ea14:	2b37      	cmp	r3, #55	; 0x37
 800ea16:	d802      	bhi.n	800ea1e <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ea18:	f06f 0308 	mvn.w	r3, #8
 800ea1c:	e03e      	b.n	800ea9c <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800ea1e:	68b9      	ldr	r1, [r7, #8]
 800ea20:	2002      	movs	r0, #2
 800ea22:	f7f9 fc2b 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800ea26:	4603      	mov	r3, r0
 800ea28:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	3302      	adds	r3, #2
 800ea32:	4619      	mov	r1, r3
 800ea34:	2002      	movs	r0, #2
 800ea36:	f7f9 fc21 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800ea46:	099b      	lsrs	r3, r3, #6
 800ea48:	b29a      	uxth	r2, r3
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2219      	movs	r2, #25
 800ea52:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2205      	movs	r2, #5
 800ea58:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2205      	movs	r2, #5
 800ea5e:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	3304      	adds	r3, #4
 800ea64:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800ea66:	2300      	movs	r3, #0
 800ea68:	74fb      	strb	r3, [r7, #19]
 800ea6a:	e012      	b.n	800ea92 <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800ea6c:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800ea6e:	6979      	ldr	r1, [r7, #20]
 800ea70:	2002      	movs	r0, #2
 800ea72:	f7f9 fc03 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800ea76:	4603      	mov	r3, r0
 800ea78:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	1d23      	adds	r3, r4, #4
 800ea7e:	005b      	lsls	r3, r3, #1
 800ea80:	4413      	add	r3, r2
 800ea82:	460a      	mov	r2, r1
 800ea84:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	3302      	adds	r3, #2
 800ea8a:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800ea8c:	7cfb      	ldrb	r3, [r7, #19]
 800ea8e:	3301      	adds	r3, #1
 800ea90:	74fb      	strb	r3, [r7, #19]
 800ea92:	7cfb      	ldrb	r3, [r7, #19]
 800ea94:	2b18      	cmp	r3, #24
 800ea96:	d9e9      	bls.n	800ea6c <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800ea98:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	371c      	adds	r7, #28
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd90      	pop	{r4, r7, pc}

0800eaa4 <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b086      	sub	sp, #24
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	4603      	mov	r3, r0
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	607a      	str	r2, [r7, #4]
 800eab0:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800eab2:	2300      	movs	r3, #0
 800eab4:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800eab6:	89fb      	ldrh	r3, [r7, #14]
 800eab8:	2b07      	cmp	r3, #7
 800eaba:	d802      	bhi.n	800eac2 <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800eabc:	f06f 0308 	mvn.w	r3, #8
 800eac0:	e027      	b.n	800eb12 <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800eac2:	68b9      	ldr	r1, [r7, #8]
 800eac4:	2002      	movs	r0, #2
 800eac6:	f7f9 fbd9 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800eaca:	4603      	mov	r3, r0
 800eacc:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	3302      	adds	r3, #2
 800ead6:	4619      	mov	r1, r3
 800ead8:	2002      	movs	r0, #2
 800eada:	f7f9 fbcf 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800eade:	4603      	mov	r3, r0
 800eae0:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	3304      	adds	r3, #4
 800eaea:	4619      	mov	r1, r3
 800eaec:	2002      	movs	r0, #2
 800eaee:	f7f9 fbc5 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	3306      	adds	r3, #6
 800eafe:	4619      	mov	r1, r3
 800eb00:	2002      	movs	r0, #2
 800eb02:	f7f9 fbbb 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800eb06:	4603      	mov	r3, r0
 800eb08:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	80da      	strh	r2, [r3, #6]

	return status;
 800eb0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3718      	adds	r7, #24
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}

0800eb1a <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b086      	sub	sp, #24
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	4603      	mov	r3, r0
 800eb22:	60b9      	str	r1, [r7, #8]
 800eb24:	607a      	str	r2, [r7, #4]
 800eb26:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800eb2c:	89fb      	ldrh	r3, [r7, #14]
 800eb2e:	2b0f      	cmp	r3, #15
 800eb30:	d802      	bhi.n	800eb38 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800eb32:	f06f 0308 	mvn.w	r3, #8
 800eb36:	e04d      	b.n	800ebd4 <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800eb38:	68b9      	ldr	r1, [r7, #8]
 800eb3a:	2002      	movs	r0, #2
 800eb3c:	f7f9 fb9e 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800eb40:	4603      	mov	r3, r0
 800eb42:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	789a      	ldrb	r2, [r3, #2]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	78da      	ldrb	r2, [r3, #3]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	3304      	adds	r3, #4
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	2002      	movs	r0, #2
 800eb60:	f7f9 fb8c 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800eb64:	4603      	mov	r3, r0
 800eb66:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	3306      	adds	r3, #6
 800eb70:	4619      	mov	r1, r3
 800eb72:	2002      	movs	r0, #2
 800eb74:	f7f9 fb82 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	3308      	adds	r3, #8
 800eb84:	4619      	mov	r1, r3
 800eb86:	2002      	movs	r0, #2
 800eb88:	f7f9 fb78 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	330a      	adds	r3, #10
 800eb98:	4619      	mov	r1, r3
 800eb9a:	2002      	movs	r0, #2
 800eb9c:	f7f9 fb6e 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800eba0:	4603      	mov	r3, r0
 800eba2:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	330c      	adds	r3, #12
 800ebac:	4619      	mov	r1, r3
 800ebae:	2002      	movs	r0, #2
 800ebb0:	f7f9 fb64 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	330e      	adds	r3, #14
 800ebc0:	4619      	mov	r1, r3
 800ebc2:	2002      	movs	r0, #2
 800ebc4:	f7f9 fb5a 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	81da      	strh	r2, [r3, #14]

	return status;
 800ebd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3718      	adds	r7, #24
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b086      	sub	sp, #24
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	607b      	str	r3, [r7, #4]
 800ebe6:	460b      	mov	r3, r1
 800ebe8:	72fb      	strb	r3, [r7, #11]
 800ebea:	4613      	mov	r3, r2
 800ebec:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800ebf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d106      	bne.n	800ec08 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 800ebfa:	2232      	movs	r2, #50	; 0x32
 800ebfc:	2104      	movs	r1, #4
 800ebfe:	68f8      	ldr	r0, [r7, #12]
 800ec00:	f7ff fdd0 	bl	800e7a4 <VL53LX_nvm_enable>
 800ec04:	4603      	mov	r3, r0
 800ec06:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 800ec08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d107      	bne.n	800ec20 <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 800ec10:	7aba      	ldrb	r2, [r7, #10]
 800ec12:	7af9      	ldrb	r1, [r7, #11]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f7ff fe2a 	bl	800e870 <VL53LX_nvm_read>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 800ec20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d104      	bne.n	800ec32 <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f7ff fe7f 	bl	800e92c <VL53LX_nvm_disable>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 800ec32:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3718      	adds	r7, #24
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b084      	sub	sp, #16
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
 800ec46:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800ec4c:	f107 0308 	add.w	r3, r7, #8
 800ec50:	2201      	movs	r2, #1
 800ec52:	212e      	movs	r1, #46	; 0x2e
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f7ff ffc1 	bl	800ebdc <VL53LX_read_nvm_raw_data>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800ec5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d108      	bne.n	800ec78 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 800ec66:	f107 0308 	add.w	r3, r7, #8
 800ec6a:	683a      	ldr	r2, [r7, #0]
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	2004      	movs	r0, #4
 800ec70:	f7ff fe92 	bl	800e998 <VL53LX_nvm_decode_optical_centre>
 800ec74:	4603      	mov	r3, r0
 800ec76:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 800ec78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3710      	adds	r7, #16
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b092      	sub	sp, #72	; 0x48
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800ec94:	f107 030c 	add.w	r3, r7, #12
 800ec98:	220e      	movs	r2, #14
 800ec9a:	2157      	movs	r1, #87	; 0x57
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f7ff ff9d 	bl	800ebdc <VL53LX_read_nvm_raw_data>
 800eca2:	4603      	mov	r3, r0
 800eca4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800eca8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d109      	bne.n	800ecc4 <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 800ecb0:	f107 030c 	add.w	r3, r7, #12
 800ecb4:	683a      	ldr	r2, [r7, #0]
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	2038      	movs	r0, #56	; 0x38
 800ecba:	f7ff fe9d 	bl	800e9f8 <VL53LX_nvm_decode_cal_peak_rate_map>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800ecc4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3748      	adds	r7, #72	; 0x48
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b086      	sub	sp, #24
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800ecde:	f107 030c 	add.w	r3, r7, #12
 800ece2:	2202      	movs	r2, #2
 800ece4:	2165      	movs	r1, #101	; 0x65
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f7ff ff78 	bl	800ebdc <VL53LX_read_nvm_raw_data>
 800ecec:	4603      	mov	r3, r0
 800ecee:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800ecf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d108      	bne.n	800ed0a <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 800ecf8:	f107 030c 	add.w	r3, r7, #12
 800ecfc:	683a      	ldr	r2, [r7, #0]
 800ecfe:	4619      	mov	r1, r3
 800ed00:	2008      	movs	r0, #8
 800ed02:	f7ff fecf 	bl	800eaa4 <VL53LX_nvm_decode_additional_offset_cal_data>
 800ed06:	4603      	mov	r3, r0
 800ed08:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800ed0a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3718      	adds	r7, #24
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}

0800ed16 <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 800ed16:	b580      	push	{r7, lr}
 800ed18:	b08a      	sub	sp, #40	; 0x28
 800ed1a:	af00      	add	r7, sp, #0
 800ed1c:	60f8      	str	r0, [r7, #12]
 800ed1e:	460b      	mov	r3, r1
 800ed20:	607a      	str	r2, [r7, #4]
 800ed22:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ed24:	2300      	movs	r3, #0
 800ed26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 800ed2a:	897b      	ldrh	r3, [r7, #10]
 800ed2c:	089b      	lsrs	r3, r3, #2
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	b2d9      	uxtb	r1, r3
 800ed32:	f107 0314 	add.w	r3, r7, #20
 800ed36:	2204      	movs	r2, #4
 800ed38:	68f8      	ldr	r0, [r7, #12]
 800ed3a:	f7ff ff4f 	bl	800ebdc <VL53LX_read_nvm_raw_data>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800ed44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d109      	bne.n	800ed60 <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 800ed4c:	f107 0314 	add.w	r3, r7, #20
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	4619      	mov	r1, r3
 800ed54:	2010      	movs	r0, #16
 800ed56:	f7ff fee0 	bl	800eb1a <VL53LX_nvm_decode_fmt_range_results_data>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 800ed60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3728      	adds	r7, #40	; 0x28
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b086      	sub	sp, #24
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	460b      	mov	r3, r1
 800ed76:	607a      	str	r2, [r7, #4]
 800ed78:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800ed7e:	897b      	ldrh	r3, [r7, #10]
 800ed80:	2b0a      	cmp	r3, #10
 800ed82:	d802      	bhi.n	800ed8a <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ed84:	f06f 0309 	mvn.w	r3, #9
 800ed88:	e047      	b.n	800ee1a <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed92:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800eda0:	f002 020f 	and.w	r2, r2, #15
 800eda4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800eda6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800edb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800edb4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800edb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800edc0:	f002 0203 	and.w	r2, r2, #3
 800edc4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800edc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800edd0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800edd4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800edd6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	88d8      	ldrh	r0, [r3, #6]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	3305      	adds	r3, #5
 800ede0:	461a      	mov	r2, r3
 800ede2:	2102      	movs	r1, #2
 800ede4:	f7f9 fa1f 	bl	8008226 <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800edf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800edf6:	68fa      	ldr	r2, [r7, #12]
 800edf8:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800edfa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800ee04:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ee08:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800ee0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800ee10:	68fa      	ldr	r2, [r7, #12]
 800ee12:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800ee14:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ee16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3718      	adds	r7, #24
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}

0800ee22 <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800ee22:	b580      	push	{r7, lr}
 800ee24:	b086      	sub	sp, #24
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	4603      	mov	r3, r0
 800ee2a:	60b9      	str	r1, [r7, #8]
 800ee2c:	607a      	str	r2, [r7, #4]
 800ee2e:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ee30:	2300      	movs	r3, #0
 800ee32:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800ee34:	89fb      	ldrh	r3, [r7, #14]
 800ee36:	2b0a      	cmp	r3, #10
 800ee38:	d802      	bhi.n	800ee40 <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ee3a:	f06f 0309 	mvn.w	r3, #9
 800ee3e:	e046      	b.n	800eece <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee48:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	3301      	adds	r3, #1
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	f003 030f 	and.w	r3, r3, #15
 800ee58:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	3302      	adds	r3, #2
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee68:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	3303      	adds	r3, #3
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	f003 0303 	and.w	r3, r3, #3
 800ee78:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	3304      	adds	r3, #4
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee88:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	3305      	adds	r3, #5
 800ee92:	4619      	mov	r1, r3
 800ee94:	2002      	movs	r0, #2
 800ee96:	f7f9 f9f1 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	79da      	ldrb	r2, [r3, #7]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	7a1a      	ldrb	r2, [r3, #8]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	3309      	adds	r3, #9
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eebc:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	7a9a      	ldrb	r2, [r3, #10]
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800eeca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3718      	adds	r7, #24
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b086      	sub	sp, #24
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
 800eede:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800eee0:	2300      	movs	r3, #0
 800eee2:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800eee4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d108      	bne.n	800eefe <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 800eeec:	f107 020c 	add.w	r2, r7, #12
 800eef0:	230b      	movs	r3, #11
 800eef2:	2101      	movs	r1, #1
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f001 feeb 	bl	8010cd0 <VL53LX_ReadMulti>
 800eefa:	4603      	mov	r3, r0
 800eefc:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800eefe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d108      	bne.n	800ef18 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 800ef06:	f107 030c 	add.w	r3, r7, #12
 800ef0a:	683a      	ldr	r2, [r7, #0]
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	200b      	movs	r0, #11
 800ef10:	f7ff ff87 	bl	800ee22 <VL53LX_i2c_decode_static_nvm_managed>
 800ef14:	4603      	mov	r3, r0
 800ef16:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800ef18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3718      	adds	r7, #24
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b086      	sub	sp, #24
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	460b      	mov	r3, r1
 800ef2e:	607a      	str	r2, [r7, #4]
 800ef30:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ef32:	2300      	movs	r3, #0
 800ef34:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800ef36:	897b      	ldrh	r3, [r7, #10]
 800ef38:	2b16      	cmp	r3, #22
 800ef3a:	d802      	bhi.n	800ef42 <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ef3c:	f06f 0309 	mvn.w	r3, #9
 800ef40:	e076      	b.n	800f030 <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800ef4e:	68fa      	ldr	r2, [r7, #12]
 800ef50:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ef52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800ef58:	68fa      	ldr	r2, [r7, #12]
 800ef5a:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800ef5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800ef62:	68fa      	ldr	r2, [r7, #12]
 800ef64:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800ef66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800ef6c:	68fa      	ldr	r2, [r7, #12]
 800ef6e:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800ef70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800ef7a:	f002 020f 	and.w	r2, r2, #15
 800ef7e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ef80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800ef8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800ef94:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ef98:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800ef9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800efa4:	f002 0203 	and.w	r2, r2, #3
 800efa8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800efaa:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	8958      	ldrh	r0, [r3, #10]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	3309      	adds	r3, #9
 800efb4:	461a      	mov	r2, r3
 800efb6:	2102      	movs	r1, #2
 800efb8:	f7f9 f935 	bl	8008226 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	330b      	adds	r3, #11
 800efc6:	461a      	mov	r2, r3
 800efc8:	2102      	movs	r1, #2
 800efca:	f7f9 f977 	bl	80082bc <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	330d      	adds	r3, #13
 800efd8:	461a      	mov	r2, r3
 800efda:	2102      	movs	r1, #2
 800efdc:	f7f9 f96e 	bl	80082bc <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	8a18      	ldrh	r0, [r3, #16]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	330f      	adds	r3, #15
 800efe8:	461a      	mov	r2, r3
 800efea:	2102      	movs	r1, #2
 800efec:	f7f9 f91b 	bl	8008226 <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 800eff6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800effa:	b218      	sxth	r0, r3
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	3311      	adds	r3, #17
 800f000:	461a      	mov	r2, r3
 800f002:	2102      	movs	r1, #2
 800f004:	f7f9 f95a 	bl	80082bc <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	3313      	adds	r3, #19
 800f012:	461a      	mov	r2, r3
 800f014:	2102      	movs	r1, #2
 800f016:	f7f9 f951 	bl	80082bc <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	3315      	adds	r3, #21
 800f024:	461a      	mov	r2, r3
 800f026:	2102      	movs	r1, #2
 800f028:	f7f9 f948 	bl	80082bc <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800f02c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f030:	4618      	mov	r0, r3
 800f032:	3718      	adds	r7, #24
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b086      	sub	sp, #24
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	4603      	mov	r3, r0
 800f040:	60b9      	str	r1, [r7, #8]
 800f042:	607a      	str	r2, [r7, #4]
 800f044:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f046:	2300      	movs	r3, #0
 800f048:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f04a:	89fb      	ldrh	r3, [r7, #14]
 800f04c:	2b16      	cmp	r3, #22
 800f04e:	d802      	bhi.n	800f056 <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f050:	f06f 0309 	mvn.w	r3, #9
 800f054:	e079      	b.n	800f14a <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	785a      	ldrb	r2, [r3, #1]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	789a      	ldrb	r2, [r3, #2]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	78da      	ldrb	r2, [r3, #3]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	791a      	ldrb	r2, [r3, #4]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	3305      	adds	r3, #5
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	f003 030f 	and.w	r3, r3, #15
 800f088:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	799a      	ldrb	r2, [r3, #6]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	3307      	adds	r3, #7
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0a0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	3308      	adds	r3, #8
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	f003 0303 	and.w	r3, r3, #3
 800f0b0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	3309      	adds	r3, #9
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	2002      	movs	r0, #2
 800f0be:	f7f9 f8dd 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	330b      	adds	r3, #11
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	2002      	movs	r0, #2
 800f0d2:	f7f9 f91f 	bl	8008314 <VL53LX_i2c_decode_int16_t>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	330d      	adds	r3, #13
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	2002      	movs	r0, #2
 800f0e6:	f7f9 f915 	bl	8008314 <VL53LX_i2c_decode_int16_t>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	330f      	adds	r3, #15
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	2002      	movs	r0, #2
 800f0fa:	f7f9 f8bf 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f0fe:	4603      	mov	r3, r0
 800f100:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	3311      	adds	r3, #17
 800f10a:	4619      	mov	r1, r3
 800f10c:	2002      	movs	r0, #2
 800f10e:	f7f9 f901 	bl	8008314 <VL53LX_i2c_decode_int16_t>
 800f112:	4603      	mov	r3, r0
 800f114:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f118:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	3313      	adds	r3, #19
 800f122:	4619      	mov	r1, r3
 800f124:	2002      	movs	r0, #2
 800f126:	f7f9 f8f5 	bl	8008314 <VL53LX_i2c_decode_int16_t>
 800f12a:	4603      	mov	r3, r0
 800f12c:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	3315      	adds	r3, #21
 800f136:	4619      	mov	r1, r3
 800f138:	2002      	movs	r0, #2
 800f13a:	f7f9 f8eb 	bl	8008314 <VL53LX_i2c_decode_int16_t>
 800f13e:	4603      	mov	r3, r0
 800f140:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800f146:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3718      	adds	r7, #24
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}

0800f152 <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f152:	b580      	push	{r7, lr}
 800f154:	b08a      	sub	sp, #40	; 0x28
 800f156:	af00      	add	r7, sp, #0
 800f158:	6078      	str	r0, [r7, #4]
 800f15a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f15c:	2300      	movs	r3, #0
 800f15e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f162:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f166:	2b00      	cmp	r3, #0
 800f168:	d109      	bne.n	800f17e <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 800f16a:	f107 020c 	add.w	r2, r7, #12
 800f16e:	2317      	movs	r3, #23
 800f170:	210d      	movs	r1, #13
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f001 fdac 	bl	8010cd0 <VL53LX_ReadMulti>
 800f178:	4603      	mov	r3, r0
 800f17a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f17e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f182:	2b00      	cmp	r3, #0
 800f184:	d109      	bne.n	800f19a <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 800f186:	f107 030c 	add.w	r3, r7, #12
 800f18a:	683a      	ldr	r2, [r7, #0]
 800f18c:	4619      	mov	r1, r3
 800f18e:	2017      	movs	r0, #23
 800f190:	f7ff ff52 	bl	800f038 <VL53LX_i2c_decode_customer_nvm_managed>
 800f194:	4603      	mov	r3, r0
 800f196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 800f19a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d11c      	bne.n	800f1dc <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	8a5b      	ldrh	r3, [r3, #18]
 800f1a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		offset = offset / 4;
 800f1a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	da00      	bge.n	800f1b2 <VL53LX_get_customer_nvm_managed+0x60>
 800f1b0:	3303      	adds	r3, #3
 800f1b2:	109b      	asrs	r3, r3, #2
 800f1b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (offset >= 1024)
 800f1b6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f1ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f1be:	db04      	blt.n	800f1ca <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 800f1c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1c2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800f1c6:	b29b      	uxth	r3, r3
 800f1c8:	84bb      	strh	r3, [r7, #36]	; 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f1d4:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f1da:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f1dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3728      	adds	r7, #40	; 0x28
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b086      	sub	sp, #24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	60f8      	str	r0, [r7, #12]
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	607a      	str	r2, [r7, #4]
 800f1f4:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 800f1fa:	897b      	ldrh	r3, [r7, #10]
 800f1fc:	2b1f      	cmp	r3, #31
 800f1fe:	d802      	bhi.n	800f206 <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f200:	f06f 0309 	mvn.w	r3, #9
 800f204:	e0cf      	b.n	800f3a6 <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	881b      	ldrh	r3, [r3, #0]
 800f20a:	687a      	ldr	r2, [r7, #4]
 800f20c:	2102      	movs	r1, #2
 800f20e:	4618      	mov	r0, r3
 800f210:	f7f9 f809 	bl	8008226 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800f21c:	f002 0201 	and.w	r2, r2, #1
 800f220:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f222:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800f22c:	f002 020f 	and.w	r2, r2, #15
 800f230:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f232:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800f23c:	f002 020f 	and.w	r2, r2, #15
 800f240:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f242:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800f24c:	f002 021f 	and.w	r2, r2, #31
 800f250:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f252:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f25c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f260:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f262:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800f26c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f270:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f272:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800f27c:	f002 0201 	and.w	r2, r2, #1
 800f280:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f282:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800f288:	68fa      	ldr	r2, [r7, #12]
 800f28a:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800f28c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f296:	f002 0201 	and.w	r2, r2, #1
 800f29a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f29c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f2a6:	f002 0203 	and.w	r2, r2, #3
 800f2aa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f2ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f2b6:	f002 021f 	and.w	r2, r2, #31
 800f2ba:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f2bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800f2c6:	f002 0203 	and.w	r2, r2, #3
 800f2ca:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f2cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800f2d6:	f002 0203 	and.w	r2, r2, #3
 800f2da:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800f2dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f2e6:	f002 0207 	and.w	r2, r2, #7
 800f2ea:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800f2ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f2f6:	f002 021f 	and.w	r2, r2, #31
 800f2fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800f2fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f306:	f002 0201 	and.w	r2, r2, #1
 800f30a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f30c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800f312:	68fa      	ldr	r2, [r7, #12]
 800f314:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f316:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800f31c:	68fa      	ldr	r2, [r7, #12]
 800f31e:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f320:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800f326:	68fa      	ldr	r2, [r7, #12]
 800f328:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f32a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f334:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800f33a:	68fa      	ldr	r2, [r7, #12]
 800f33c:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800f33e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800f344:	68fa      	ldr	r2, [r7, #12]
 800f346:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800f348:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	8b18      	ldrh	r0, [r3, #24]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	3318      	adds	r3, #24
 800f352:	461a      	mov	r2, r3
 800f354:	2102      	movs	r1, #2
 800f356:	f7f8 ff66 	bl	8008226 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800f35e:	68fa      	ldr	r2, [r7, #12]
 800f360:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800f362:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800f368:	68fa      	ldr	r2, [r7, #12]
 800f36a:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800f36c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800f376:	f002 020f 	and.w	r2, r2, #15
 800f37a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800f37c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800f382:	68fa      	ldr	r2, [r7, #12]
 800f384:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800f386:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800f390:	f002 020f 	and.w	r2, r2, #15
 800f394:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800f396:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800f39c:	68fa      	ldr	r2, [r7, #12]
 800f39e:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800f3a0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f3a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3718      	adds	r7, #24
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}

0800f3ae <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f3ae:	b580      	push	{r7, lr}
 800f3b0:	b086      	sub	sp, #24
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	60f8      	str	r0, [r7, #12]
 800f3b6:	460b      	mov	r3, r1
 800f3b8:	607a      	str	r2, [r7, #4]
 800f3ba:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 800f3c0:	897b      	ldrh	r3, [r7, #10]
 800f3c2:	2b15      	cmp	r3, #21
 800f3c4:	d802      	bhi.n	800f3cc <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f3c6:	f06f 0309 	mvn.w	r3, #9
 800f3ca:	e070      	b.n	800f4ae <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800f3d8:	68fa      	ldr	r2, [r7, #12]
 800f3da:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f3dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f3e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800f3f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f3f4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f3f6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 800f3fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f400:	b298      	uxth	r0, r3
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	3304      	adds	r3, #4
 800f406:	461a      	mov	r2, r3
 800f408:	2102      	movs	r1, #2
 800f40a:	f7f8 ff0c 	bl	8008226 <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800f416:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f41a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f41c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800f422:	68fa      	ldr	r2, [r7, #12]
 800f424:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800f426:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800f42c:	68fa      	ldr	r2, [r7, #12]
 800f42e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f430:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800f43a:	f002 0201 	and.w	r2, r2, #1
 800f43e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f440:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800f44a:	f002 0207 	and.w	r2, r2, #7
 800f44e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f450:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	8998      	ldrh	r0, [r3, #12]
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	330c      	adds	r3, #12
 800f45a:	461a      	mov	r2, r3
 800f45c:	2102      	movs	r1, #2
 800f45e:	f7f8 fee2 	bl	8008226 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	89d8      	ldrh	r0, [r3, #14]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	330e      	adds	r3, #14
 800f46a:	461a      	mov	r2, r3
 800f46c:	2102      	movs	r1, #2
 800f46e:	f7f8 feda 	bl	8008226 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	8a18      	ldrh	r0, [r3, #16]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	3310      	adds	r3, #16
 800f47a:	461a      	mov	r2, r3
 800f47c:	2102      	movs	r1, #2
 800f47e:	f7f8 fed2 	bl	8008226 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800f486:	68fa      	ldr	r2, [r7, #12]
 800f488:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f48a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800f490:	68fa      	ldr	r2, [r7, #12]
 800f492:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f494:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800f49a:	68fa      	ldr	r2, [r7, #12]
 800f49c:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f49e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800f4a4:	68fa      	ldr	r2, [r7, #12]
 800f4a6:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f4a8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f4aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	3718      	adds	r7, #24
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}

0800f4b6 <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f4b6:	b580      	push	{r7, lr}
 800f4b8:	b086      	sub	sp, #24
 800f4ba:	af00      	add	r7, sp, #0
 800f4bc:	60f8      	str	r0, [r7, #12]
 800f4be:	460b      	mov	r3, r1
 800f4c0:	607a      	str	r2, [r7, #4]
 800f4c2:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 800f4c8:	897b      	ldrh	r3, [r7, #10]
 800f4ca:	2b16      	cmp	r3, #22
 800f4cc:	d802      	bhi.n	800f4d4 <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f4ce:	f06f 0309 	mvn.w	r3, #9
 800f4d2:	e06e      	b.n	800f5b2 <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	f003 030f 	and.w	r3, r3, #15
 800f4dc:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800f4e6:	68fa      	ldr	r2, [r7, #12]
 800f4e8:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f4ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800f4f4:	f002 020f 	and.w	r2, r2, #15
 800f4f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f4fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800f500:	68fa      	ldr	r2, [r7, #12]
 800f502:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f504:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800f50e:	f002 020f 	and.w	r2, r2, #15
 800f512:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f514:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800f51a:	68fa      	ldr	r2, [r7, #12]
 800f51c:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800f51e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800f528:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f52c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f52e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800f538:	f002 020f 	and.w	r2, r2, #15
 800f53c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f53e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800f544:	68fa      	ldr	r2, [r7, #12]
 800f546:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f548:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800f552:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f556:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f558:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	8958      	ldrh	r0, [r3, #10]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	330a      	adds	r3, #10
 800f562:	461a      	mov	r2, r3
 800f564:	2102      	movs	r1, #2
 800f566:	f7f8 fe5e 	bl	8008226 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	8998      	ldrh	r0, [r3, #12]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	330c      	adds	r3, #12
 800f572:	461a      	mov	r2, r3
 800f574:	2102      	movs	r1, #2
 800f576:	f7f8 fe56 	bl	8008226 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800f57e:	68fa      	ldr	r2, [r7, #12]
 800f580:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800f582:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800f588:	68fa      	ldr	r2, [r7, #12]
 800f58a:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800f58c:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	6918      	ldr	r0, [r3, #16]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	3312      	adds	r3, #18
 800f596:	461a      	mov	r2, r3
 800f598:	2104      	movs	r1, #4
 800f59a:	f7f8 fee4 	bl	8008366 <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800f5a6:	f002 0201 	and.w	r2, r2, #1
 800f5aa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800f5ac:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f5ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3718      	adds	r7, #24
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}

0800f5ba <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f5ba:	b580      	push	{r7, lr}
 800f5bc:	b086      	sub	sp, #24
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	60f8      	str	r0, [r7, #12]
 800f5c2:	460b      	mov	r3, r1
 800f5c4:	607a      	str	r2, [r7, #4]
 800f5c6:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 800f5cc:	897b      	ldrh	r3, [r7, #10]
 800f5ce:	2b11      	cmp	r3, #17
 800f5d0:	d802      	bhi.n	800f5d8 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f5d2:	f06f 0309 	mvn.w	r3, #9
 800f5d6:	e071      	b.n	800f6bc <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	f003 0303 	and.w	r3, r3, #3
 800f5e0:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	8858      	ldrh	r0, [r3, #2]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	2102      	movs	r1, #2
 800f5f2:	f7f8 fe18 	bl	8008226 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	8898      	ldrh	r0, [r3, #4]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	3303      	adds	r3, #3
 800f5fe:	461a      	mov	r2, r3
 800f600:	2102      	movs	r1, #2
 800f602:	f7f8 fe10 	bl	8008226 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f60e:	f002 0201 	and.w	r2, r2, #1
 800f612:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f614:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800f61e:	f002 0207 	and.w	r2, r2, #7
 800f622:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f624:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800f62a:	68fa      	ldr	r2, [r7, #12]
 800f62c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f62e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800f634:	68fa      	ldr	r2, [r7, #12]
 800f636:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f638:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f642:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f646:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f648:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f652:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f656:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f658:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f662:	f002 0203 	and.w	r2, r2, #3
 800f666:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f668:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800f672:	f002 0203 	and.w	r2, r2, #3
 800f676:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f678:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800f682:	f002 020f 	and.w	r2, r2, #15
 800f686:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f688:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800f68e:	68fa      	ldr	r2, [r7, #12]
 800f690:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800f692:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800f698:	68fa      	ldr	r2, [r7, #12]
 800f69a:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800f69c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800f6a2:	68fa      	ldr	r2, [r7, #12]
 800f6a4:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800f6a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800f6b0:	f002 0203 	and.w	r2, r2, #3
 800f6b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f6b6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f6b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3718      	adds	r7, #24
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b087      	sub	sp, #28
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	607a      	str	r2, [r7, #4]
 800f6d0:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 800f6d6:	897b      	ldrh	r3, [r7, #10]
 800f6d8:	2b04      	cmp	r3, #4
 800f6da:	d802      	bhi.n	800f6e2 <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f6dc:	f06f 0309 	mvn.w	r3, #9
 800f6e0:	e025      	b.n	800f72e <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	f003 0301 	and.w	r3, r3, #1
 800f6ea:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800f6f8:	f002 0201 	and.w	r2, r2, #1
 800f6fc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f6fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800f708:	f002 0201 	and.w	r2, r2, #1
 800f70c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f70e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800f718:	f002 0203 	and.w	r2, r2, #3
 800f71c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f71e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800f724:	68fa      	ldr	r2, [r7, #12]
 800f726:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f728:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f72a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f72e:	4618      	mov	r0, r3
 800f730:	371c      	adds	r7, #28
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr

0800f73a <VL53LX_set_system_control>:


VL53LX_Error VL53LX_set_system_control(
	VL53LX_DEV                 Dev,
	VL53LX_system_control_t   *pdata)
{
 800f73a:	b580      	push	{r7, lr}
 800f73c:	b084      	sub	sp, #16
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
 800f742:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f744:	2300      	movs	r3, #0
 800f746:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d108      	bne.n	800f762 <VL53LX_set_system_control+0x28>
		status = VL53LX_i2c_encode_system_control(
 800f750:	f107 0308 	add.w	r3, r7, #8
 800f754:	461a      	mov	r2, r3
 800f756:	2105      	movs	r1, #5
 800f758:	6838      	ldr	r0, [r7, #0]
 800f75a:	f7ff ffb3 	bl	800f6c4 <VL53LX_i2c_encode_system_control>
 800f75e:	4603      	mov	r3, r0
 800f760:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 800f762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d108      	bne.n	800f77c <VL53LX_set_system_control+0x42>
		status = VL53LX_WriteMulti(
 800f76a:	f107 0208 	add.w	r2, r7, #8
 800f76e:	2305      	movs	r3, #5
 800f770:	2183      	movs	r1, #131	; 0x83
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f001 fa76 	bl	8010c64 <VL53LX_WriteMulti>
 800f778:	4603      	mov	r3, r0
 800f77a:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800f77c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f780:	4618      	mov	r0, r3
 800f782:	3710      	adds	r7, #16
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b086      	sub	sp, #24
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	4603      	mov	r3, r0
 800f790:	60b9      	str	r1, [r7, #8]
 800f792:	607a      	str	r2, [r7, #4]
 800f794:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f796:	2300      	movs	r3, #0
 800f798:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 800f79a:	89fb      	ldrh	r3, [r7, #14]
 800f79c:	2b2b      	cmp	r3, #43	; 0x2b
 800f79e:	d802      	bhi.n	800f7a6 <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f7a0:	f06f 0309 	mvn.w	r3, #9
 800f7a4:	e0e2      	b.n	800f96c <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f7ae:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	785a      	ldrb	r2, [r3, #1]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	3302      	adds	r3, #2
 800f7c0:	781b      	ldrb	r3, [r3, #0]
 800f7c2:	f003 030f 	and.w	r3, r3, #15
 800f7c6:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	78da      	ldrb	r2, [r3, #3]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	3304      	adds	r3, #4
 800f7d8:	4619      	mov	r1, r3
 800f7da:	2002      	movs	r0, #2
 800f7dc:	f7f8 fd4e 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	3306      	adds	r3, #6
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	2002      	movs	r0, #2
 800f7f0:	f7f8 fd44 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	3308      	adds	r3, #8
 800f800:	4619      	mov	r1, r3
 800f802:	2002      	movs	r0, #2
 800f804:	f7f8 fd3a 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f808:	4603      	mov	r3, r0
 800f80a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	330a      	adds	r3, #10
 800f814:	4619      	mov	r1, r3
 800f816:	2002      	movs	r0, #2
 800f818:	f7f8 fd30 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f81c:	4603      	mov	r3, r0
 800f81e:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	330c      	adds	r3, #12
 800f828:	4619      	mov	r1, r3
 800f82a:	2002      	movs	r0, #2
 800f82c:	f7f8 fd26 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f830:	4603      	mov	r3, r0
 800f832:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	330e      	adds	r3, #14
 800f83c:	4619      	mov	r1, r3
 800f83e:	2002      	movs	r0, #2
 800f840:	f7f8 fd1c 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f844:	4603      	mov	r3, r0
 800f846:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	3310      	adds	r3, #16
 800f850:	4619      	mov	r1, r3
 800f852:	2002      	movs	r0, #2
 800f854:	f7f8 fd12 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f858:	4603      	mov	r3, r0
 800f85a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	3312      	adds	r3, #18
 800f864:	4619      	mov	r1, r3
 800f866:	2002      	movs	r0, #2
 800f868:	f7f8 fd08 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f86c:	4603      	mov	r3, r0
 800f86e:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	3314      	adds	r3, #20
 800f878:	4619      	mov	r1, r3
 800f87a:	2002      	movs	r0, #2
 800f87c:	f7f8 fcfe 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f880:	4603      	mov	r3, r0
 800f882:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	3316      	adds	r3, #22
 800f88c:	4619      	mov	r1, r3
 800f88e:	2002      	movs	r0, #2
 800f890:	f7f8 fcf4 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f894:	4603      	mov	r3, r0
 800f896:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	3318      	adds	r3, #24
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	2002      	movs	r0, #2
 800f8a4:	f7f8 fcea 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	331a      	adds	r3, #26
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	2002      	movs	r0, #2
 800f8b8:	f7f8 fce0 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	331c      	adds	r3, #28
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	2002      	movs	r0, #2
 800f8cc:	f7f8 fcd6 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	331e      	adds	r3, #30
 800f8dc:	4619      	mov	r1, r3
 800f8de:	2002      	movs	r0, #2
 800f8e0:	f7f8 fccc 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	3320      	adds	r3, #32
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	2002      	movs	r0, #2
 800f8f4:	f7f8 fcc2 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	3322      	adds	r3, #34	; 0x22
 800f904:	4619      	mov	r1, r3
 800f906:	2002      	movs	r0, #2
 800f908:	f7f8 fcb8 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f90c:	4603      	mov	r3, r0
 800f90e:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	3324      	adds	r3, #36	; 0x24
 800f918:	4619      	mov	r1, r3
 800f91a:	2002      	movs	r0, #2
 800f91c:	f7f8 fcae 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f920:	4603      	mov	r3, r0
 800f922:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	3326      	adds	r3, #38	; 0x26
 800f92c:	4619      	mov	r1, r3
 800f92e:	2002      	movs	r0, #2
 800f930:	f7f8 fca4 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f934:	4603      	mov	r3, r0
 800f936:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	3328      	adds	r3, #40	; 0x28
 800f940:	4619      	mov	r1, r3
 800f942:	2002      	movs	r0, #2
 800f944:	f7f8 fc9a 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800f948:	4603      	mov	r3, r0
 800f94a:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800f968:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3718      	adds	r7, #24
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}

0800f974 <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b086      	sub	sp, #24
 800f978:	af00      	add	r7, sp, #0
 800f97a:	4603      	mov	r3, r0
 800f97c:	60b9      	str	r1, [r7, #8]
 800f97e:	607a      	str	r2, [r7, #4]
 800f980:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f982:	2300      	movs	r3, #0
 800f984:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 800f986:	89fb      	ldrh	r3, [r7, #14]
 800f988:	2b20      	cmp	r3, #32
 800f98a:	d802      	bhi.n	800f992 <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f98c:	f06f 0309 	mvn.w	r3, #9
 800f990:	e04d      	b.n	800fa2e <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 800f992:	68b9      	ldr	r1, [r7, #8]
 800f994:	2004      	movs	r0, #4
 800f996:	f7f8 fd10 	bl	80083ba <VL53LX_i2c_decode_uint32_t>
 800f99a:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	3304      	adds	r3, #4
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	2004      	movs	r0, #4
 800f9a8:	f7f8 fd07 	bl	80083ba <VL53LX_i2c_decode_uint32_t>
 800f9ac:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	3308      	adds	r3, #8
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	2004      	movs	r0, #4
 800f9ba:	f7f8 fd1b 	bl	80083f4 <VL53LX_i2c_decode_int32_t>
 800f9be:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	330c      	adds	r3, #12
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	2004      	movs	r0, #4
 800f9cc:	f7f8 fcf5 	bl	80083ba <VL53LX_i2c_decode_uint32_t>
 800f9d0:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	3310      	adds	r3, #16
 800f9da:	4619      	mov	r1, r3
 800f9dc:	2004      	movs	r0, #4
 800f9de:	f7f8 fcec 	bl	80083ba <VL53LX_i2c_decode_uint32_t>
 800f9e2:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	3314      	adds	r3, #20
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	2004      	movs	r0, #4
 800f9f0:	f7f8 fce3 	bl	80083ba <VL53LX_i2c_decode_uint32_t>
 800f9f4:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	3318      	adds	r3, #24
 800f9fe:	4619      	mov	r1, r3
 800fa00:	2004      	movs	r0, #4
 800fa02:	f7f8 fcf7 	bl	80083f4 <VL53LX_i2c_decode_int32_t>
 800fa06:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	331c      	adds	r3, #28
 800fa10:	4619      	mov	r1, r3
 800fa12:	2004      	movs	r0, #4
 800fa14:	f7f8 fcd1 	bl	80083ba <VL53LX_i2c_decode_uint32_t>
 800fa18:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	f893 2020 	ldrb.w	r2, [r3, #32]
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800fa2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3718      	adds	r7, #24
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}

0800fa36 <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 800fa36:	b580      	push	{r7, lr}
 800fa38:	b086      	sub	sp, #24
 800fa3a:	af00      	add	r7, sp, #0
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	60b9      	str	r1, [r7, #8]
 800fa40:	607a      	str	r2, [r7, #4]
 800fa42:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fa44:	2300      	movs	r3, #0
 800fa46:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 800fa48:	89fb      	ldrh	r3, [r7, #14]
 800fa4a:	2b37      	cmp	r3, #55	; 0x37
 800fa4c:	d802      	bhi.n	800fa54 <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fa4e:	f06f 0309 	mvn.w	r3, #9
 800fa52:	e15e      	b.n	800fd12 <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 800fa54:	68b9      	ldr	r1, [r7, #8]
 800fa56:	2002      	movs	r0, #2
 800fa58:	f7f8 fc10 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	3302      	adds	r3, #2
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa6e:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	3303      	adds	r3, #3
 800fa78:	781b      	ldrb	r3, [r3, #0]
 800fa7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa7e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	3304      	adds	r3, #4
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	f003 0303 	and.w	r3, r3, #3
 800fa8e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	3305      	adds	r3, #5
 800fa98:	781b      	ldrb	r3, [r3, #0]
 800fa9a:	f003 0301 	and.w	r3, r3, #1
 800fa9e:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	3306      	adds	r3, #6
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800faae:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	3307      	adds	r3, #7
 800fab8:	781b      	ldrb	r3, [r3, #0]
 800faba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fabe:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	3308      	adds	r3, #8
 800fac8:	4619      	mov	r1, r3
 800faca:	2002      	movs	r0, #2
 800facc:	f7f8 fbd6 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800fad0:	4603      	mov	r3, r0
 800fad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fad6:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	330a      	adds	r3, #10
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	f003 0303 	and.w	r3, r3, #3
 800fae6:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	330b      	adds	r3, #11
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	f003 0303 	and.w	r3, r3, #3
 800faf6:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	330c      	adds	r3, #12
 800fb00:	781b      	ldrb	r3, [r3, #0]
 800fb02:	f003 030f 	and.w	r3, r3, #15
 800fb06:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	330d      	adds	r3, #13
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	f003 0307 	and.w	r3, r3, #7
 800fb16:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	330e      	adds	r3, #14
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	f003 0301 	and.w	r3, r3, #1
 800fb26:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	330f      	adds	r3, #15
 800fb30:	781b      	ldrb	r3, [r3, #0]
 800fb32:	f003 0303 	and.w	r3, r3, #3
 800fb36:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	7c1a      	ldrb	r2, [r3, #16]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	7c5a      	ldrb	r2, [r3, #17]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	3312      	adds	r3, #18
 800fb50:	4619      	mov	r1, r3
 800fb52:	2002      	movs	r0, #2
 800fb54:	f7f8 fb92 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fb5e:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	3316      	adds	r3, #22
 800fb68:	4619      	mov	r1, r3
 800fb6a:	2002      	movs	r0, #2
 800fb6c:	f7f8 fb86 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800fb70:	4603      	mov	r3, r0
 800fb72:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	3318      	adds	r3, #24
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	2002      	movs	r0, #2
 800fb80:	f7f8 fb7c 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800fb84:	4603      	mov	r3, r0
 800fb86:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	331a      	adds	r3, #26
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	f003 0301 	and.w	r3, r3, #1
 800fb96:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	331b      	adds	r3, #27
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	f003 0307 	and.w	r3, r3, #7
 800fba6:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	7f1a      	ldrb	r2, [r3, #28]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	7f5a      	ldrb	r2, [r3, #29]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	331e      	adds	r3, #30
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fbc6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	331f      	adds	r3, #31
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fbd6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	3320      	adds	r3, #32
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	f003 0303 	and.w	r3, r3, #3
 800fbe6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	3321      	adds	r3, #33	; 0x21
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	f003 030f 	and.w	r3, r3, #15
 800fbf6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	3325      	adds	r3, #37	; 0x25
 800fc24:	781b      	ldrb	r3, [r3, #0]
 800fc26:	f003 0301 	and.w	r3, r3, #1
 800fc2a:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	3326      	adds	r3, #38	; 0x26
 800fc36:	781b      	ldrb	r3, [r3, #0]
 800fc38:	f003 0303 	and.w	r3, r3, #3
 800fc3c:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	3327      	adds	r3, #39	; 0x27
 800fc48:	781b      	ldrb	r3, [r3, #0]
 800fc4a:	f003 031f 	and.w	r3, r3, #31
 800fc4e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	3328      	adds	r3, #40	; 0x28
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	f003 031f 	and.w	r3, r3, #31
 800fc60:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	3329      	adds	r3, #41	; 0x29
 800fc6c:	781b      	ldrb	r3, [r3, #0]
 800fc6e:	f003 031f 	and.w	r3, r3, #31
 800fc72:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	332a      	adds	r3, #42	; 0x2a
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	f003 0301 	and.w	r3, r3, #1
 800fc84:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	332b      	adds	r3, #43	; 0x2b
 800fc90:	781b      	ldrb	r3, [r3, #0]
 800fc92:	f003 0301 	and.w	r3, r3, #1
 800fc96:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	332c      	adds	r3, #44	; 0x2c
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	f003 0303 	and.w	r3, r3, #3
 800fca8:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	332d      	adds	r3, #45	; 0x2d
 800fcb4:	781b      	ldrb	r3, [r3, #0]
 800fcb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fcba:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	332e      	adds	r3, #46	; 0x2e
 800fcc6:	4619      	mov	r1, r3
 800fcc8:	2004      	movs	r0, #4
 800fcca:	f7f8 fb76 	bl	80083ba <VL53LX_i2c_decode_uint32_t>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	3332      	adds	r3, #50	; 0x32
 800fcdc:	4619      	mov	r1, r3
 800fcde:	2004      	movs	r0, #4
 800fce0:	f7f8 fb6b 	bl	80083ba <VL53LX_i2c_decode_uint32_t>
 800fce4:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	3336      	adds	r3, #54	; 0x36
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	f003 0301 	and.w	r3, r3, #1
 800fcf4:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	3337      	adds	r3, #55	; 0x37
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	f003 0301 	and.w	r3, r3, #1
 800fd06:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800fd0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	3718      	adds	r7, #24
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}

0800fd1a <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 800fd1a:	b580      	push	{r7, lr}
 800fd1c:	b086      	sub	sp, #24
 800fd1e:	af00      	add	r7, sp, #0
 800fd20:	4603      	mov	r3, r0
 800fd22:	60b9      	str	r1, [r7, #8]
 800fd24:	607a      	str	r2, [r7, #4]
 800fd26:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 800fd2c:	89fb      	ldrh	r3, [r7, #14]
 800fd2e:	2b30      	cmp	r3, #48	; 0x30
 800fd30:	d802      	bhi.n	800fd38 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fd32:	f06f 0309 	mvn.w	r3, #9
 800fd36:	e112      	b.n	800ff5e <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	785a      	ldrb	r2, [r3, #1]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	789a      	ldrb	r2, [r3, #2]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	3303      	adds	r3, #3
 800fd54:	4619      	mov	r1, r3
 800fd56:	2002      	movs	r0, #2
 800fd58:	f7f8 fa90 	bl	800827c <VL53LX_i2c_decode_uint16_t>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	3305      	adds	r3, #5
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd6e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	3306      	adds	r3, #6
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	f003 0307 	and.w	r3, r3, #7
 800fd7e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	3307      	adds	r3, #7
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	f003 0307 	and.w	r3, r3, #7
 800fd8e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	3308      	adds	r3, #8
 800fd98:	781b      	ldrb	r3, [r3, #0]
 800fd9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd9e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	3309      	adds	r3, #9
 800fda8:	781b      	ldrb	r3, [r3, #0]
 800fdaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fdae:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	330a      	adds	r3, #10
 800fdb8:	781b      	ldrb	r3, [r3, #0]
 800fdba:	f003 0301 	and.w	r3, r3, #1
 800fdbe:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	330b      	adds	r3, #11
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdce:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	330c      	adds	r3, #12
 800fdd8:	781b      	ldrb	r3, [r3, #0]
 800fdda:	f003 0301 	and.w	r3, r3, #1
 800fdde:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	330d      	adds	r3, #13
 800fde8:	781b      	ldrb	r3, [r3, #0]
 800fdea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fdee:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	330e      	adds	r3, #14
 800fdf8:	781b      	ldrb	r3, [r3, #0]
 800fdfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fdfe:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	7bda      	ldrb	r2, [r3, #15]
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	7c1a      	ldrb	r2, [r3, #16]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	7c5a      	ldrb	r2, [r3, #17]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	7c9a      	ldrb	r2, [r3, #18]
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	7cda      	ldrb	r2, [r3, #19]
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	7d1a      	ldrb	r2, [r3, #20]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	7d5a      	ldrb	r2, [r3, #21]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	7d9a      	ldrb	r2, [r3, #22]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	7dda      	ldrb	r2, [r3, #23]
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	7e1a      	ldrb	r2, [r3, #24]
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	7e5a      	ldrb	r2, [r3, #25]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	7e9a      	ldrb	r2, [r3, #26]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	7eda      	ldrb	r2, [r3, #27]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	7f1a      	ldrb	r2, [r3, #28]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	7f5a      	ldrb	r2, [r3, #29]
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	7f9a      	ldrb	r2, [r3, #30]
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	7fda      	ldrb	r2, [r3, #31]
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	f893 2020 	ldrb.w	r2, [r3, #32]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800ff5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff5e:	4618      	mov	r0, r3
 800ff60:	3718      	adds	r7, #24
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}

0800ff66 <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 800ff66:	b580      	push	{r7, lr}
 800ff68:	b090      	sub	sp, #64	; 0x40
 800ff6a:	af00      	add	r7, sp, #0
 800ff6c:	6078      	str	r0, [r7, #4]
 800ff6e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ff70:	2300      	movs	r3, #0
 800ff72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800ff76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d10a      	bne.n	800ff94 <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 800ff7e:	f107 020c 	add.w	r2, r7, #12
 800ff82:	2331      	movs	r3, #49	; 0x31
 800ff84:	f240 110f 	movw	r1, #271	; 0x10f
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f000 fea1 	bl	8010cd0 <VL53LX_ReadMulti>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800ff94:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d109      	bne.n	800ffb0 <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 800ff9c:	f107 030c 	add.w	r3, r7, #12
 800ffa0:	683a      	ldr	r2, [r7, #0]
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	2031      	movs	r0, #49	; 0x31
 800ffa6:	f7ff feb8 	bl	800fd1a <VL53LX_i2c_decode_nvm_copy_data>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800ffb0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3740      	adds	r7, #64	; 0x40
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}

0800ffbc <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 800ffbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffc0:	b0a1      	sub	sp, #132	; 0x84
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	64b9      	str	r1, [r7, #72]	; 0x48
 800ffc6:	647a      	str	r2, [r7, #68]	; 0x44
 800ffc8:	643b      	str	r3, [r7, #64]	; 0x40
 800ffca:	4603      	mov	r3, r0
 800ffcc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800ffd0:	23f1      	movs	r3, #241	; 0xf1
 800ffd2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint32_t sigma_int  = VL53LX_D_002;
 800ffd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ffda:	657b      	str	r3, [r7, #84]	; 0x54

	uint32_t pll_period_mm  = 0;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	653b      	str	r3, [r7, #80]	; 0x50

	uint64_t tmp0        = 0;
 800ffe0:	f04f 0200 	mov.w	r2, #0
 800ffe4:	f04f 0300 	mov.w	r3, #0
 800ffe8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	uint64_t tmp1        = 0;
 800ffec:	f04f 0200 	mov.w	r2, #0
 800fff0:	f04f 0300 	mov.w	r3, #0
 800fff4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	uint64_t b_minus_amb = 0;
 800fff8:	f04f 0200 	mov.w	r2, #0
 800fffc:	f04f 0300 	mov.w	r3, #0
 8010000:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t VL53LX_p_055   = 0;
 8010004:	f04f 0200 	mov.w	r2, #0
 8010008:	f04f 0300 	mov.w	r3, #0
 801000c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	*psigma_est  = VL53LX_D_002;
 8010010:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010018:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 801001a:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 801001e:	2b00      	cmp	r3, #0
 8010020:	f000 8259 	beq.w	80104d6 <VL53LX_f_023+0x51a>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 8010024:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8010028:	4618      	mov	r0, r3
 801002a:	f7fb fbd3 	bl	800b7d4 <VL53LX_calc_pll_period_mm>
 801002e:	6538      	str	r0, [r7, #80]	; 0x50



		if (VL53LX_p_028 > VL53LX_p_032)
 8010030:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010036:	429a      	cmp	r2, r3
 8010038:	d90f      	bls.n	801005a <VL53LX_f_023+0x9e>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 801003a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801003e:	4618      	mov	r0, r3
 8010040:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_032;
 8010044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010046:	461a      	mov	r2, r3
 8010048:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 801004c:	ebb0 0a02 	subs.w	sl, r0, r2
 8010050:	eb61 0b03 	sbc.w	fp, r1, r3
 8010054:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8010058:	e00e      	b.n	8010078 <VL53LX_f_023+0xbc>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 801005a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801005c:	4618      	mov	r0, r3
 801005e:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_028;
 8010062:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010066:	461a      	mov	r2, r3
 8010068:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 801006c:	ebb0 0802 	subs.w	r8, r0, r2
 8010070:	eb61 0903 	sbc.w	r9, r1, r3
 8010074:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60



		if (VL53LX_p_007 > VL53LX_p_001)
 8010078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801007a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801007c:	429a      	cmp	r2, r3
 801007e:	d911      	bls.n	80100a4 <VL53LX_f_023+0xe8>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8010080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010082:	4618      	mov	r0, r3
 8010084:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_001;
 8010088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801008a:	461a      	mov	r2, r3
 801008c:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8010090:	1a86      	subs	r6, r0, r2
 8010092:	62be      	str	r6, [r7, #40]	; 0x28
 8010094:	eb61 0303 	sbc.w	r3, r1, r3
 8010098:	62fb      	str	r3, [r7, #44]	; 0x2c
 801009a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801009e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80100a2:	e010      	b.n	80100c6 <VL53LX_f_023+0x10a>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 80100a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100a6:	4618      	mov	r0, r3
 80100a8:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_007;
 80100ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100ae:	461a      	mov	r2, r3
 80100b0:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 80100b4:	1a86      	subs	r6, r0, r2
 80100b6:	623e      	str	r6, [r7, #32]
 80100b8:	eb61 0303 	sbc.w	r3, r1, r3
 80100bc:	627b      	str	r3, [r7, #36]	; 0x24
 80100be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80100c2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58



		if (b_minus_amb != 0) {
 80100c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80100ca:	4313      	orrs	r3, r2
 80100cc:	f000 8203 	beq.w	80104d6 <VL53LX_f_023+0x51a>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 80100d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100d2:	4618      	mov	r0, r3
 80100d4:	f04f 0100 	mov.w	r1, #0
 80100d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80100dc:	461a      	mov	r2, r3
 80100de:	f04f 0300 	mov.w	r3, #0
 80100e2:	1884      	adds	r4, r0, r2
 80100e4:	eb41 0503 	adc.w	r5, r1, r3
					(uint64_t)VL53LX_p_028;
 80100e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80100ec:	461a      	mov	r2, r3
 80100ee:	f04f 0300 	mov.w	r3, #0
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 80100f2:	18a1      	adds	r1, r4, r2
 80100f4:	61b9      	str	r1, [r7, #24]
 80100f6:	eb45 0303 	adc.w	r3, r5, r3
 80100fa:	61fb      	str	r3, [r7, #28]
 80100fc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010100:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > VL53LX_D_003)
 8010104:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010108:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801010c:	f04f 0100 	mov.w	r1, #0
 8010110:	4299      	cmp	r1, r3
 8010112:	bf08      	it	eq
 8010114:	4290      	cmpeq	r0, r2
 8010116:	d205      	bcs.n	8010124 <VL53LX_f_023+0x168>
				tmp0 = VL53LX_D_003;
 8010118:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801011c:	f04f 0300 	mov.w	r3, #0
 8010120:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 8010124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010126:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010128:	fb02 f203 	mul.w	r2, r2, r3
 801012c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801012e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010130:	fb01 f303 	mul.w	r3, r1, r3
 8010134:	18d1      	adds	r1, r2, r3
 8010136:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010138:	fba3 2303 	umull	r2, r3, r3, r3
 801013c:	4419      	add	r1, r3
 801013e:	460b      	mov	r3, r1
 8010140:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8010144:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 << 8;
 8010148:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801014c:	f04f 0200 	mov.w	r2, #0
 8010150:	f04f 0300 	mov.w	r3, #0
 8010154:	020b      	lsls	r3, r1, #8
 8010156:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801015a:	0202      	lsls	r2, r0, #8
 801015c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > VL53LX_D_004)
 8010160:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010164:	f04f 30ff 	mov.w	r0, #4294967295
 8010168:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801016c:	4299      	cmp	r1, r3
 801016e:	bf08      	it	eq
 8010170:	4290      	cmpeq	r0, r2
 8010172:	d205      	bcs.n	8010180 <VL53LX_f_023+0x1c4>
				tmp1 = VL53LX_D_004;
 8010174:	f04f 32ff 	mov.w	r2, #4294967295
 8010178:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801017c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8010180:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010184:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010188:	f7f0 f8ca 	bl	8000320 <__aeabi_uldivmod>
 801018c:	4602      	mov	r2, r0
 801018e:	460b      	mov	r3, r1
 8010190:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8010194:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010198:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801019c:	f7f0 f8c0 	bl	8000320 <__aeabi_uldivmod>
 80101a0:	4602      	mov	r2, r0
 80101a2:	460b      	mov	r3, r1
 80101a4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_005)
 80101a8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80101ac:	2b80      	cmp	r3, #128	; 0x80
 80101ae:	bf08      	it	eq
 80101b0:	2a00      	cmpeq	r2, #0
 80101b2:	d305      	bcc.n	80101c0 <VL53LX_f_023+0x204>
				tmp1 = (uint64_t)VL53LX_D_005;
 80101b4:	f04f 32ff 	mov.w	r2, #4294967295
 80101b8:	f04f 037f 	mov.w	r3, #127	; 0x7f
 80101bc:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 * tmp0;
 80101c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80101c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80101c4:	fb02 f203 	mul.w	r2, r2, r3
 80101c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101ca:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80101cc:	fb01 f303 	mul.w	r3, r1, r3
 80101d0:	18d1      	adds	r1, r2, r3
 80101d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80101d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80101d6:	fba2 2303 	umull	r2, r3, r2, r3
 80101da:	4419      	add	r1, r3
 80101dc:	460b      	mov	r3, r1
 80101de:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80101e2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80101e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80101ea:	4618      	mov	r0, r3
 80101ec:	f04f 0100 	mov.w	r1, #0
 80101f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80101f4:	461a      	mov	r2, r3
 80101f6:	f04f 0300 	mov.w	r3, #0
 80101fa:	1884      	adds	r4, r0, r2
 80101fc:	63bc      	str	r4, [r7, #56]	; 0x38
 80101fe:	eb41 0303 	adc.w	r3, r1, r3
 8010202:	63fb      	str	r3, [r7, #60]	; 0x3c
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8010204:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010208:	461a      	mov	r2, r3
 801020a:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801020e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8010212:	4621      	mov	r1, r4
 8010214:	1889      	adds	r1, r1, r2
 8010216:	6339      	str	r1, [r7, #48]	; 0x30
 8010218:	4629      	mov	r1, r5
 801021a:	eb43 0101 	adc.w	r1, r3, r1
 801021e:	6379      	str	r1, [r7, #52]	; 0x34
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8010220:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010224:	461a      	mov	r2, r3
 8010226:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801022a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801022e:	4621      	mov	r1, r4
 8010230:	1889      	adds	r1, r1, r2
 8010232:	6139      	str	r1, [r7, #16]
 8010234:	4629      	mov	r1, r5
 8010236:	eb43 0101 	adc.w	r1, r3, r1
 801023a:	6179      	str	r1, [r7, #20]
 801023c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010240:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_003)
 8010244:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010248:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801024c:	f04f 0100 	mov.w	r1, #0
 8010250:	4299      	cmp	r1, r3
 8010252:	bf08      	it	eq
 8010254:	4290      	cmpeq	r0, r2
 8010256:	d205      	bcs.n	8010264 <VL53LX_f_023+0x2a8>
				tmp1 = (uint64_t)VL53LX_D_003;
 8010258:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801025c:	f04f 0300 	mov.w	r3, #0
 8010260:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			tmp1 = tmp1 << 8;
 8010264:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010268:	f04f 0200 	mov.w	r2, #0
 801026c:	f04f 0300 	mov.w	r3, #0
 8010270:	020b      	lsls	r3, r1, #8
 8010272:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010276:	0202      	lsls	r2, r0, #8
 8010278:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 + tmp0;
 801027c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010280:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010284:	1884      	adds	r4, r0, r2
 8010286:	60bc      	str	r4, [r7, #8]
 8010288:	eb41 0303 	adc.w	r3, r1, r3
 801028c:	60fb      	str	r3, [r7, #12]
 801028e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010292:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010296:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801029a:	2a00      	cmp	r2, #0
 801029c:	f173 0300 	sbcs.w	r3, r3, #0
 80102a0:	da05      	bge.n	80102ae <VL53LX_f_023+0x2f2>
				tmp0 = (uint64_t)VL53LX_D_006;
 80102a2:	f04f 32ff 	mov.w	r2, #4294967295
 80102a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80102aa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 80102ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	bf08      	it	eq
 80102b6:	2a00      	cmpeq	r2, #0
 80102b8:	d31e      	bcc.n	80102f8 <VL53LX_f_023+0x33c>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80102ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80102be:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80102c2:	f7f0 f82d 	bl	8000320 <__aeabi_uldivmod>
 80102c6:	4602      	mov	r2, r0
 80102c8:	460b      	mov	r3, r1
 80102ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 80102ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102d0:	461a      	mov	r2, r3
 80102d2:	f04f 0300 	mov.w	r3, #0
 80102d6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80102d8:	fb02 f001 	mul.w	r0, r2, r1
 80102dc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80102de:	fb03 f101 	mul.w	r1, r3, r1
 80102e2:	4401      	add	r1, r0
 80102e4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80102e6:	fba0 2302 	umull	r2, r3, r0, r2
 80102ea:	4419      	add	r1, r3
 80102ec:	460b      	mov	r3, r1
 80102ee:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80102f2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80102f6:	e01d      	b.n	8010334 <VL53LX_f_023+0x378>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 80102f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102fa:	461a      	mov	r2, r3
 80102fc:	f04f 0300 	mov.w	r3, #0
 8010300:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010302:	fb02 f001 	mul.w	r0, r2, r1
 8010306:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010308:	fb03 f101 	mul.w	r1, r3, r1
 801030c:	4401      	add	r1, r0
 801030e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010310:	fba0 2302 	umull	r2, r3, r0, r2
 8010314:	4419      	add	r1, r3
 8010316:	460b      	mov	r3, r1
 8010318:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 801031c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010320:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010324:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010328:	f7ef fffa 	bl	8000320 <__aeabi_uldivmod>
 801032c:	4602      	mov	r2, r0
 801032e:	460b      	mov	r3, r1
 8010330:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010334:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010338:	2a00      	cmp	r2, #0
 801033a:	f173 0300 	sbcs.w	r3, r3, #0
 801033e:	da05      	bge.n	801034c <VL53LX_f_023+0x390>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010340:	f04f 32ff 	mov.w	r2, #4294967295
 8010344:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010348:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 801034c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010350:	2b01      	cmp	r3, #1
 8010352:	bf08      	it	eq
 8010354:	2a00      	cmpeq	r2, #0
 8010356:	d32a      	bcc.n	80103ae <VL53LX_f_023+0x3f2>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010358:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801035c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010360:	f7ef ffde 	bl	8000320 <__aeabi_uldivmod>
 8010364:	4602      	mov	r2, r0
 8010366:	460b      	mov	r3, r1
 8010368:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 801036c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010370:	f04f 0200 	mov.w	r2, #0
 8010374:	f04f 0300 	mov.w	r3, #0
 8010378:	0882      	lsrs	r2, r0, #2
 801037a:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 801037e:	088b      	lsrs	r3, r1, #2
 8010380:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 8010384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010386:	461a      	mov	r2, r3
 8010388:	f04f 0300 	mov.w	r3, #0
 801038c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801038e:	fb02 f001 	mul.w	r0, r2, r1
 8010392:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010394:	fb03 f101 	mul.w	r1, r3, r1
 8010398:	4401      	add	r1, r0
 801039a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801039c:	fba0 2302 	umull	r2, r3, r0, r2
 80103a0:	4419      	add	r1, r3
 80103a2:	460b      	mov	r3, r1
 80103a4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80103a8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80103ac:	e029      	b.n	8010402 <VL53LX_f_023+0x446>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 80103ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103b0:	461a      	mov	r2, r3
 80103b2:	f04f 0300 	mov.w	r3, #0
 80103b6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80103b8:	fb02 f001 	mul.w	r0, r2, r1
 80103bc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80103be:	fb03 f101 	mul.w	r1, r3, r1
 80103c2:	4401      	add	r1, r0
 80103c4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80103c6:	fba0 2302 	umull	r2, r3, r0, r2
 80103ca:	4419      	add	r1, r3
 80103cc:	460b      	mov	r3, r1
 80103ce:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80103d2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80103d6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80103da:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80103de:	f7ef ff9f 	bl	8000320 <__aeabi_uldivmod>
 80103e2:	4602      	mov	r2, r0
 80103e4:	460b      	mov	r3, r1
 80103e6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 80103ea:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80103ee:	f04f 0200 	mov.w	r2, #0
 80103f2:	f04f 0300 	mov.w	r3, #0
 80103f6:	0882      	lsrs	r2, r0, #2
 80103f8:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80103fc:	088b      	lsrs	r3, r1, #2
 80103fe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010402:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010406:	2a00      	cmp	r2, #0
 8010408:	f173 0300 	sbcs.w	r3, r3, #0
 801040c:	da05      	bge.n	801041a <VL53LX_f_023+0x45e>
				tmp0 = (uint64_t)VL53LX_D_006;
 801040e:	f04f 32ff 	mov.w	r2, #4294967295
 8010412:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010416:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp0 = tmp0 >> 2;
 801041a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801041e:	f04f 0200 	mov.w	r2, #0
 8010422:	f04f 0300 	mov.w	r3, #0
 8010426:	0882      	lsrs	r2, r0, #2
 8010428:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 801042c:	088b      	lsrs	r3, r1, #2
 801042e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010432:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010436:	2b01      	cmp	r3, #1
 8010438:	bf08      	it	eq
 801043a:	2a00      	cmpeq	r2, #0
 801043c:	d305      	bcc.n	801044a <VL53LX_f_023+0x48e>
				tmp0 = (uint64_t)VL53LX_D_007;
 801043e:	f04f 32ff 	mov.w	r2, #4294967295
 8010442:	f04f 0300 	mov.w	r3, #0
 8010446:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 801044a:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 801044e:	f04f 0100 	mov.w	r1, #0
 8010452:	f04f 0200 	mov.w	r2, #0
 8010456:	f04f 0300 	mov.w	r3, #0
 801045a:	01cb      	lsls	r3, r1, #7
 801045c:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8010460:	01c2      	lsls	r2, r0, #7
 8010462:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 * tmp1;
 8010466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010468:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801046a:	fb02 f203 	mul.w	r2, r2, r3
 801046e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010470:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010472:	fb01 f303 	mul.w	r3, r1, r3
 8010476:	18d1      	adds	r1, r2, r3
 8010478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801047a:	fba3 2303 	umull	r2, r3, r3, r3
 801047e:	4419      	add	r1, r3
 8010480:	460b      	mov	r3, r1
 8010482:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8010486:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp0 = tmp0 + tmp1;
 801048a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801048e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010492:	1884      	adds	r4, r0, r2
 8010494:	603c      	str	r4, [r7, #0]
 8010496:	eb41 0303 	adc.w	r3, r1, r3
 801049a:	607b      	str	r3, [r7, #4]
 801049c:	e9d7 3400 	ldrd	r3, r4, [r7]
 80104a0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 80104a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80104a8:	2b01      	cmp	r3, #1
 80104aa:	bf08      	it	eq
 80104ac:	2a00      	cmpeq	r2, #0
 80104ae:	d305      	bcc.n	80104bc <VL53LX_f_023+0x500>
				tmp0 = (uint64_t)VL53LX_D_007;
 80104b0:	f04f 32ff 	mov.w	r2, #4294967295
 80104b4:	f04f 0300 	mov.w	r3, #0
 80104b8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 80104bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104be:	4618      	mov	r0, r3
 80104c0:	f7fb f821 	bl	800b506 <VL53LX_isqrt>
 80104c4:	6578      	str	r0, [r7, #84]	; 0x54

			*psigma_est = (uint16_t)sigma_int;
 80104c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104c8:	b29a      	uxth	r2, r3
 80104ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80104ce:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 80104d0:	2300      	movs	r3, #0
 80104d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}

	}

	return status;
 80104d6:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3784      	adds	r7, #132	; 0x84
 80104de:	46bd      	mov	sp, r7
 80104e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080104e4 <VL53LX_wait_for_test_completion>:
}


VL53LX_Error VL53LX_wait_for_test_completion(
	VL53LX_DEV     Dev)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b086      	sub	sp, #24
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 80104ec:	2300      	movs	r3, #0
 80104ee:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	3318      	adds	r3, #24
 80104f4:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 80104f6:	2300      	movs	r3, #0
 80104f8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53LX_WAIT_METHOD_BLOCKING) {
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d107      	bne.n	8010512 <VL53LX_wait_for_test_completion+0x2e>



		status =
			VL53LX_poll_for_range_completion(
 8010502:	f64e 2160 	movw	r1, #60000	; 0xea60
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f000 f88b 	bl	8010622 <VL53LX_poll_for_range_completion>
 801050c:	4603      	mov	r3, r0
 801050e:	75fb      	strb	r3, [r7, #23]
 8010510:	e01b      	b.n	801054a <VL53LX_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8010512:	2300      	movs	r3, #0
 8010514:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8010516:	e011      	b.n	801053c <VL53LX_wait_for_test_completion+0x58>
			status = VL53LX_is_new_data_ready(
 8010518:	f107 030f 	add.w	r3, r7, #15
 801051c:	4619      	mov	r1, r3
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f000 f819 	bl	8010556 <VL53LX_is_new_data_ready>
 8010524:	4603      	mov	r3, r0
 8010526:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53LX_ERROR_NONE) {
 8010528:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d105      	bne.n	801053c <VL53LX_wait_for_test_completion+0x58>
				status = VL53LX_WaitMs(
 8010530:	2101      	movs	r1, #1
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f000 fce6 	bl	8010f04 <VL53LX_WaitMs>
 8010538:	4603      	mov	r3, r0
 801053a:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 801053c:	7bfb      	ldrb	r3, [r7, #15]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d103      	bne.n	801054a <VL53LX_wait_for_test_completion+0x66>
 8010542:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d0e6      	beq.n	8010518 <VL53LX_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801054a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801054e:	4618      	mov	r0, r3
 8010550:	3718      	adds	r7, #24
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}

08010556 <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 8010556:	b580      	push	{r7, lr}
 8010558:	b086      	sub	sp, #24
 801055a:	af00      	add	r7, sp, #0
 801055c:	6078      	str	r0, [r7, #4]
 801055e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010560:	2300      	movs	r3, #0
 8010562:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	3318      	adds	r3, #24
 8010568:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 801056a:	2300      	movs	r3, #0
 801056c:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 801056e:	2300      	movs	r3, #0
 8010570:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8010572:	2300      	movs	r3, #0
 8010574:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 801057c:	f003 0310 	and.w	r3, r3, #16
 8010580:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8010582:	7bfb      	ldrb	r3, [r7, #15]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d102      	bne.n	801058e <VL53LX_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8010588:	2301      	movs	r3, #1
 801058a:	75fb      	strb	r3, [r7, #23]
 801058c:	e001      	b.n	8010592 <VL53LX_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 801058e:	2300      	movs	r3, #0
 8010590:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 8010592:	f107 030e 	add.w	r3, r7, #14
 8010596:	461a      	mov	r2, r3
 8010598:	2131      	movs	r1, #49	; 0x31
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f000 fc2a 	bl	8010df4 <VL53LX_RdByte>
 80105a0:	4603      	mov	r3, r0
 80105a2:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 80105a4:	7bbb      	ldrb	r3, [r7, #14]
 80105a6:	f003 0201 	and.w	r2, r3, #1
 80105aa:	7dfb      	ldrb	r3, [r7, #23]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d103      	bne.n	80105b8 <VL53LX_is_new_data_ready+0x62>
		*pready = 0x01;
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	2201      	movs	r2, #1
 80105b4:	701a      	strb	r2, [r3, #0]
 80105b6:	e002      	b.n	80105be <VL53LX_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	2200      	movs	r2, #0
 80105bc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80105be:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3718      	adds	r7, #24
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}

080105ca <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 80105ca:	b580      	push	{r7, lr}
 80105cc:	b086      	sub	sp, #24
 80105ce:	af02      	add	r7, sp, #8
 80105d0:	6078      	str	r0, [r7, #4]
 80105d2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80105d4:	2300      	movs	r3, #0
 80105d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 80105d8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f000 fca1 	bl	8010f24 <VL53LX_WaitUs>
 80105e2:	4603      	mov	r3, r0
 80105e4:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 80105e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d10b      	bne.n	8010606 <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 80105ee:	2301      	movs	r3, #1
 80105f0:	9301      	str	r3, [sp, #4]
 80105f2:	2301      	movs	r3, #1
 80105f4:	9300      	str	r3, [sp, #0]
 80105f6:	2301      	movs	r3, #1
 80105f8:	22e5      	movs	r2, #229	; 0xe5
 80105fa:	6839      	ldr	r1, [r7, #0]
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f000 fca9 	bl	8010f54 <VL53LX_WaitValueMaskEx>
 8010602:	4603      	mov	r3, r0
 8010604:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 8010606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d103      	bne.n	8010616 <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 801060e:	2103      	movs	r1, #3
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f7f7 f815 	bl	8007640 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8010616:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801061a:	4618      	mov	r0, r3
 801061c:	3710      	adds	r7, #16
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}

08010622 <VL53LX_poll_for_range_completion>:


VL53LX_Error VL53LX_poll_for_range_completion(
	VL53LX_DEV     Dev,
	uint32_t       timeout_ms)
{
 8010622:	b580      	push	{r7, lr}
 8010624:	b088      	sub	sp, #32
 8010626:	af02      	add	r7, sp, #8
 8010628:	6078      	str	r0, [r7, #4]
 801062a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801062c:	2300      	movs	r3, #0
 801062e:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	3318      	adds	r3, #24
 8010634:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8010636:	2300      	movs	r3, #0
 8010638:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 801063a:	2300      	movs	r3, #0
 801063c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 801063e:	693b      	ldr	r3, [r7, #16]
 8010640:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 8010644:	f003 0310 	and.w	r3, r3, #16
 8010648:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 801064a:	7bfb      	ldrb	r3, [r7, #15]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d102      	bne.n	8010656 <VL53LX_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8010650:	2301      	movs	r3, #1
 8010652:	75fb      	strb	r3, [r7, #23]
 8010654:	e001      	b.n	801065a <VL53LX_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8010656:	2300      	movs	r3, #0
 8010658:	75fb      	strb	r3, [r7, #23]

	status =
		VL53LX_WaitValueMaskEx(
 801065a:	7dfb      	ldrb	r3, [r7, #23]
 801065c:	2201      	movs	r2, #1
 801065e:	9201      	str	r2, [sp, #4]
 8010660:	2201      	movs	r2, #1
 8010662:	9200      	str	r2, [sp, #0]
 8010664:	2231      	movs	r2, #49	; 0x31
 8010666:	6839      	ldr	r1, [r7, #0]
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f000 fc73 	bl	8010f54 <VL53LX_WaitValueMaskEx>
 801066e:	4603      	mov	r3, r0
 8010670:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53LX_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8010672:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010676:	4618      	mov	r0, r3
 8010678:	3718      	adds	r7, #24
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 801067e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010682:	b0a2      	sub	sp, #136	; 0x88
 8010684:	af00      	add	r7, sp, #0
 8010686:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010688:	4618      	mov	r0, r3
 801068a:	460b      	mov	r3, r1
 801068c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8010690:	4613      	mov	r3, r2
 8010692:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8010696:	4603      	mov	r3, r0
 8010698:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



	VL53LX_Error status = VL53LX_ERROR_NONE;
 801069c:	2300      	movs	r3, #0
 801069e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	uint8_t row = 0;
 80106a2:	2300      	movs	r3, #0
 80106a4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t col = 0;
 80106a8:	2300      	movs	r3, #0
 80106aa:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65



	int16_t  bound_l_x = 0;
 80106ae:	2300      	movs	r3, #0
 80106b0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	int16_t  bound_r_x = 0;
 80106b4:	2300      	movs	r3, #0
 80106b6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	int16_t  bound_u_y = 0;
 80106ba:	2300      	movs	r3, #0
 80106bc:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	int16_t  bound_d_y = 0;
 80106c0:	2300      	movs	r3, #0
 80106c2:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

	int64_t xtalk_rate_ll = 0;
 80106c6:	f04f 0200 	mov.w	r2, #0
 80106ca:	f04f 0300 	mov.w	r3, #0
 80106ce:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t xtalk_rate_ur = 0;
 80106d2:	f04f 0200 	mov.w	r2, #0
 80106d6:	f04f 0300 	mov.w	r3, #0
 80106da:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	int64_t xtalk_avg = 0;
 80106de:	f04f 0200 	mov.w	r2, #0
 80106e2:	f04f 0300 	mov.w	r3, #0
 80106e6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	if (status == VL53LX_ERROR_NONE) {
 80106ea:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d108      	bne.n	8010704 <VL53LX_f_032+0x86>
		VL53LX_decode_row_col(
 80106f2:	f107 0265 	add.w	r2, r7, #101	; 0x65
 80106f6:	f107 0166 	add.w	r1, r7, #102	; 0x66
 80106fa:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 80106fe:	4618      	mov	r0, r3
 8010700:	f7fb fad4 	bl	800bcac <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 8010704:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010708:	2b00      	cmp	r3, #0
 801070a:	d165      	bne.n	80107d8 <VL53LX_f_032+0x15a>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 801070c:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010710:	091b      	lsrs	r3, r3, #4
 8010712:	b2db      	uxtb	r3, r3
 8010714:	f003 0301 	and.w	r3, r3, #1
 8010718:	2b00      	cmp	r3, #0
 801071a:	d00e      	beq.n	801073a <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 801071c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8010720:	b29a      	uxth	r2, r3
 8010722:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010726:	095b      	lsrs	r3, r3, #5
 8010728:	b2db      	uxtb	r3, r3
 801072a:	b29b      	uxth	r3, r3
 801072c:	1ad3      	subs	r3, r2, r3
 801072e:	b29b      	uxth	r3, r3
 8010730:	3b01      	subs	r3, #1
 8010732:	b29b      	uxth	r3, r3
 8010734:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8010738:	e00b      	b.n	8010752 <VL53LX_f_032+0xd4>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 801073a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 801073e:	b29a      	uxth	r2, r3
 8010740:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010744:	095b      	lsrs	r3, r3, #5
 8010746:	b2db      	uxtb	r3, r3
 8010748:	b29b      	uxth	r3, r3
 801074a:	1ad3      	subs	r3, r2, r3
 801074c:	b29b      	uxth	r3, r3
 801074e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8010752:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8010756:	b29a      	uxth	r2, r3
 8010758:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 801075c:	095b      	lsrs	r3, r3, #5
 801075e:	b2db      	uxtb	r3, r3
 8010760:	b29b      	uxth	r3, r3
 8010762:	4413      	add	r3, r2
 8010764:	b29b      	uxth	r3, r3
 8010766:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 801076a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 801076e:	f003 0301 	and.w	r3, r3, #1
 8010772:	2b00      	cmp	r3, #0
 8010774:	d011      	beq.n	801079a <VL53LX_f_032+0x11c>
			bound_d_y = (int16_t) row -
 8010776:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801077a:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 801077c:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010780:	f003 020f 	and.w	r2, r3, #15
 8010784:	0fd3      	lsrs	r3, r2, #31
 8010786:	4413      	add	r3, r2
 8010788:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 801078a:	b29b      	uxth	r3, r3
 801078c:	1acb      	subs	r3, r1, r3
 801078e:	b29b      	uxth	r3, r3
 8010790:	3b01      	subs	r3, #1
 8010792:	b29b      	uxth	r3, r3
 8010794:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8010798:	e00f      	b.n	80107ba <VL53LX_f_032+0x13c>
		else
			bound_d_y = (int16_t) row -
 801079a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801079e:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 80107a0:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80107a4:	f003 020f 	and.w	r2, r3, #15
 80107a8:	0fd3      	lsrs	r3, r2, #31
 80107aa:	4413      	add	r3, r2
 80107ac:	105b      	asrs	r3, r3, #1
 80107ae:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	440b      	add	r3, r1
 80107b4:	b29b      	uxth	r3, r3
 80107b6:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

		bound_u_y = (int16_t) row +
 80107ba:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80107be:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 80107c0:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80107c4:	f003 020f 	and.w	r2, r3, #15
 80107c8:	0fd3      	lsrs	r3, r2, #31
 80107ca:	4413      	add	r3, r2
 80107cc:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	440b      	add	r3, r1
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 80107d8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d133      	bne.n	8010848 <VL53LX_f_032+0x1ca>
		bound_l_x =  (2 * bound_l_x) - 15 +
 80107e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80107e4:	b29a      	uxth	r2, r3
 80107e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80107ea:	4413      	add	r3, r2
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	005b      	lsls	r3, r3, #1
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	3b0f      	subs	r3, #15
 80107f4:	b29b      	uxth	r3, r3
 80107f6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 80107fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80107fe:	b29a      	uxth	r2, r3
 8010800:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8010804:	4413      	add	r3, r2
 8010806:	b29b      	uxth	r3, r3
 8010808:	005b      	lsls	r3, r3, #1
 801080a:	b29b      	uxth	r3, r3
 801080c:	3b0f      	subs	r3, #15
 801080e:	b29b      	uxth	r3, r3
 8010810:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8010814:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 8010818:	b29a      	uxth	r2, r3
 801081a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 801081e:	4413      	add	r3, r2
 8010820:	b29b      	uxth	r3, r3
 8010822:	005b      	lsls	r3, r3, #1
 8010824:	b29b      	uxth	r3, r3
 8010826:	3b0f      	subs	r3, #15
 8010828:	b29b      	uxth	r3, r3
 801082a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 801082e:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 8010832:	b29a      	uxth	r2, r3
 8010834:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8010838:	4413      	add	r3, r2
 801083a:	b29b      	uxth	r3, r3
 801083c:	005b      	lsls	r3, r3, #1
 801083e:	b29b      	uxth	r3, r3
 8010840:	3b0f      	subs	r3, #15
 8010842:	b29b      	uxth	r3, r3
 8010844:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010848:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 801084c:	2b00      	cmp	r3, #0
 801084e:	f040 80cb 	bne.w	80109e8 <VL53LX_f_032+0x36a>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010852:	f9b7 0086 	ldrsh.w	r0, [r7, #134]	; 0x86
 8010856:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 801085a:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801085e:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010862:	fb02 f501 	mul.w	r5, r2, r1
 8010866:	fb00 f403 	mul.w	r4, r0, r3
 801086a:	442c      	add	r4, r5
 801086c:	fba0 8902 	umull	r8, r9, r0, r2
 8010870:	eb04 0309 	add.w	r3, r4, r9
 8010874:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010876:	f9b7 0080 	ldrsh.w	r0, [r7, #128]	; 0x80
 801087a:	ea4f 71e0 	mov.w	r1, r0, asr #31
					((int64_t)ygradient));
 801087e:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8010882:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010886:	fb02 f501 	mul.w	r5, r2, r1
 801088a:	fb00 f403 	mul.w	r4, r0, r3
 801088e:	442c      	add	r4, r5
 8010890:	fba0 2302 	umull	r2, r3, r0, r2
 8010894:	18e1      	adds	r1, r4, r3
 8010896:	460b      	mov	r3, r1
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010898:	eb18 0102 	adds.w	r1, r8, r2
 801089c:	6339      	str	r1, [r7, #48]	; 0x30
 801089e:	eb49 0303 	adc.w	r3, r9, r3
 80108a2:	637b      	str	r3, [r7, #52]	; 0x34
 80108a4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80108a8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 80108ac:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80108b0:	f112 0a01 	adds.w	sl, r2, #1
 80108b4:	f143 0b00 	adc.w	fp, r3, #0
 80108b8:	ea4f 73db 	mov.w	r3, fp, lsr #31
 80108bc:	461a      	mov	r2, r3
 80108be:	f04f 0300 	mov.w	r3, #0
 80108c2:	eb12 010a 	adds.w	r1, r2, sl
 80108c6:	62b9      	str	r1, [r7, #40]	; 0x28
 80108c8:	eb43 030b 	adc.w	r3, r3, fp
 80108cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108ce:	f04f 0200 	mov.w	r2, #0
 80108d2:	f04f 0300 	mov.w	r3, #0
 80108d6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80108da:	4621      	mov	r1, r4
 80108dc:	084a      	lsrs	r2, r1, #1
 80108de:	4629      	mov	r1, r5
 80108e0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80108e4:	4629      	mov	r1, r5
 80108e6:	104b      	asrs	r3, r1, #1
 80108e8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 80108ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108ee:	461a      	mov	r2, r3
 80108f0:	f04f 0300 	mov.w	r3, #0
 80108f4:	f04f 0000 	mov.w	r0, #0
 80108f8:	f04f 0100 	mov.w	r1, #0
 80108fc:	0099      	lsls	r1, r3, #2
 80108fe:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8010902:	0090      	lsls	r0, r2, #2
 8010904:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010908:	1814      	adds	r4, r2, r0
 801090a:	623c      	str	r4, [r7, #32]
 801090c:	414b      	adcs	r3, r1
 801090e:	627b      	str	r3, [r7, #36]	; 0x24
 8010910:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010914:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8010918:	f9b7 0084 	ldrsh.w	r0, [r7, #132]	; 0x84
 801091c:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8010920:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8010924:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8010928:	fb02 f501 	mul.w	r5, r2, r1
 801092c:	fb00 f403 	mul.w	r4, r0, r3
 8010930:	442c      	add	r4, r5
 8010932:	fba0 8902 	umull	r8, r9, r0, r2
 8010936:	eb04 0309 	add.w	r3, r4, r9
 801093a:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801093c:	f9b7 0082 	ldrsh.w	r0, [r7, #130]	; 0x82
 8010940:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)ygradient));
 8010944:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8010948:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801094c:	fb02 f501 	mul.w	r5, r2, r1
 8010950:	fb00 f403 	mul.w	r4, r0, r3
 8010954:	442c      	add	r4, r5
 8010956:	fba0 2302 	umull	r2, r3, r0, r2
 801095a:	18e1      	adds	r1, r4, r3
 801095c:	460b      	mov	r3, r1
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 801095e:	eb18 0102 	adds.w	r1, r8, r2
 8010962:	61b9      	str	r1, [r7, #24]
 8010964:	eb49 0303 	adc.w	r3, r9, r3
 8010968:	61fb      	str	r3, [r7, #28]
 801096a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801096e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8010972:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010976:	1c51      	adds	r1, r2, #1
 8010978:	64b9      	str	r1, [r7, #72]	; 0x48
 801097a:	f143 0300 	adc.w	r3, r3, #0
 801097e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010980:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8010984:	462b      	mov	r3, r5
 8010986:	0fdb      	lsrs	r3, r3, #31
 8010988:	461a      	mov	r2, r3
 801098a:	f04f 0300 	mov.w	r3, #0
 801098e:	4621      	mov	r1, r4
 8010990:	1851      	adds	r1, r2, r1
 8010992:	6139      	str	r1, [r7, #16]
 8010994:	4629      	mov	r1, r5
 8010996:	eb43 0101 	adc.w	r1, r3, r1
 801099a:	6179      	str	r1, [r7, #20]
 801099c:	f04f 0200 	mov.w	r2, #0
 80109a0:	f04f 0300 	mov.w	r3, #0
 80109a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80109a8:	4621      	mov	r1, r4
 80109aa:	084a      	lsrs	r2, r1, #1
 80109ac:	4629      	mov	r1, r5
 80109ae:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80109b2:	4629      	mov	r1, r5
 80109b4:	104b      	asrs	r3, r1, #1
 80109b6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 80109ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109bc:	4618      	mov	r0, r3
 80109be:	f04f 0100 	mov.w	r1, #0
 80109c2:	f04f 0200 	mov.w	r2, #0
 80109c6:	f04f 0300 	mov.w	r3, #0
 80109ca:	008b      	lsls	r3, r1, #2
 80109cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80109d0:	0082      	lsls	r2, r0, #2
 80109d2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80109d6:	1884      	adds	r4, r0, r2
 80109d8:	60bc      	str	r4, [r7, #8]
 80109da:	eb41 0303 	adc.w	r3, r1, r3
 80109de:	60fb      	str	r3, [r7, #12]
 80109e0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80109e4:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 80109e8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d12e      	bne.n	8010a4e <VL53LX_f_032+0x3d0>
		xtalk_avg = do_division_s(
 80109f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80109f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80109f8:	1884      	adds	r4, r0, r2
 80109fa:	643c      	str	r4, [r7, #64]	; 0x40
 80109fc:	eb41 0303 	adc.w	r3, r1, r3
 8010a00:	647b      	str	r3, [r7, #68]	; 0x44
 8010a02:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8010a06:	460b      	mov	r3, r1
 8010a08:	3301      	adds	r3, #1
 8010a0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8010a0c:	4613      	mov	r3, r2
 8010a0e:	f143 0300 	adc.w	r3, r3, #0
 8010a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a14:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8010a18:	462b      	mov	r3, r5
 8010a1a:	0fdb      	lsrs	r3, r3, #31
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	f04f 0300 	mov.w	r3, #0
 8010a22:	4621      	mov	r1, r4
 8010a24:	1851      	adds	r1, r2, r1
 8010a26:	6039      	str	r1, [r7, #0]
 8010a28:	4629      	mov	r1, r5
 8010a2a:	eb43 0101 	adc.w	r1, r3, r1
 8010a2e:	6079      	str	r1, [r7, #4]
 8010a30:	f04f 0200 	mov.w	r2, #0
 8010a34:	f04f 0300 	mov.w	r3, #0
 8010a38:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010a3c:	4621      	mov	r1, r4
 8010a3e:	084a      	lsrs	r2, r1, #1
 8010a40:	4629      	mov	r1, r5
 8010a42:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010a46:	4629      	mov	r1, r5
 8010a48:	104b      	asrs	r3, r1, #1
 8010a4a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 8010a4e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d10b      	bne.n	8010a6e <VL53LX_f_032+0x3f0>
		if (xtalk_avg < 0)
 8010a56:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010a5a:	2a00      	cmp	r2, #0
 8010a5c:	f173 0300 	sbcs.w	r3, r3, #0
 8010a60:	da05      	bge.n	8010a6e <VL53LX_f_032+0x3f0>
			xtalk_avg = 0;
 8010a62:	f04f 0200 	mov.w	r2, #0
 8010a66:	f04f 0300 	mov.w	r3, #0
 8010a6a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8010a6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010a70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010a74:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8010a76:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3788      	adds	r7, #136	; 0x88
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010a84 <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8010a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a88:	b08d      	sub	sp, #52	; 0x34
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	60f8      	str	r0, [r7, #12]
 8010a8e:	60b9      	str	r1, [r7, #8]
 8010a90:	607a      	str	r2, [r7, #4]
 8010a92:	603b      	str	r3, [r7, #0]


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 8010a94:	2300      	movs	r3, #0
 8010a96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	uint64_t xtalk_events_per_spad = 0;
 8010a9a:	f04f 0200 	mov.w	r2, #0
 8010a9e:	f04f 0300 	mov.w	r3, #0
 8010aa2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint64_t xtalk_total_events = 0;
 8010aa6:	f04f 0200 	mov.w	r2, #0
 8010aaa:	f04f 0300 	mov.w	r3, #0
 8010aae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t xtalk_temp_bin = 0;
 8010ab2:	f04f 0200 	mov.w	r2, #0
 8010ab6:	f04f 0300 	mov.w	r3, #0
 8010aba:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t  i = 0;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f04f 0100 	mov.w	r1, #0
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	f04f 0300 	mov.w	r3, #0
 8010ad8:	fb02 fc01 	mul.w	ip, r2, r1
 8010adc:	fb00 f603 	mul.w	r6, r0, r3
 8010ae0:	4466      	add	r6, ip
 8010ae2:	fba0 2302 	umull	r2, r3, r0, r2
 8010ae6:	18f1      	adds	r1, r6, r3
 8010ae8:	460b      	mov	r3, r1
 8010aea:	f512 7afa 	adds.w	sl, r2, #500	; 0x1f4
 8010aee:	f143 0b00 	adc.w	fp, r3, #0
 8010af2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010af6:	f04f 0300 	mov.w	r3, #0
 8010afa:	4650      	mov	r0, sl
 8010afc:	4659      	mov	r1, fp
 8010afe:	f7ef fc0f 	bl	8000320 <__aeabi_uldivmod>
 8010b02:	4602      	mov	r2, r0
 8010b04:	460b      	mov	r3, r1
 8010b06:	e9c7 2306 	strd	r2, r3, [r7, #24]




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8010b10:	b29a      	uxth	r2, r3
 8010b12:	f04f 0300 	mov.w	r3, #0
	xtalk_total_events = xtalk_events_per_spad *
 8010b16:	69f9      	ldr	r1, [r7, #28]
 8010b18:	fb02 f001 	mul.w	r0, r2, r1
 8010b1c:	69b9      	ldr	r1, [r7, #24]
 8010b1e:	fb03 f101 	mul.w	r1, r3, r1
 8010b22:	4401      	add	r1, r0
 8010b24:	69b8      	ldr	r0, [r7, #24]
 8010b26:	fba0 2302 	umull	r2, r3, r0, r2
 8010b2a:	4419      	add	r1, r3
 8010b2c:	460b      	mov	r3, r1
 8010b2e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8010b32:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8010b36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8010b3a:	f04f 0200 	mov.w	r2, #0
 8010b3e:	f04f 0300 	mov.w	r3, #0
 8010b42:	0a02      	lsrs	r2, r0, #8
 8010b44:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010b48:	0a0b      	lsrs	r3, r1, #8
 8010b4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8010b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010b52:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 8010b56:	f143 0900 	adc.w	r9, r3, #0
 8010b5a:	f04f 0200 	mov.w	r2, #0
 8010b5e:	f04f 0300 	mov.w	r3, #0
 8010b62:	ea4f 22d8 	mov.w	r2, r8, lsr #11
 8010b66:	ea42 5249 	orr.w	r2, r2, r9, lsl #21
 8010b6a:	ea4f 23d9 	mov.w	r3, r9, lsr #11
 8010b6e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (xtalk_total_events > 0xFFFFFFFF)
 8010b72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010b76:	2b01      	cmp	r3, #1
 8010b78:	bf08      	it	eq
 8010b7a:	2a00      	cmpeq	r2, #0
 8010b7c:	d305      	bcc.n	8010b8a <VL53LX_f_033+0x106>
		xtalk_total_events = 0xFFFFFFFF;
 8010b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8010b82:	f04f 0300 	mov.w	r3, #0
 8010b86:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010b90:	e035      	b.n	8010bfe <VL53LX_f_033+0x17a>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8010b92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b96:	68ba      	ldr	r2, [r7, #8]
 8010b98:	3302      	adds	r3, #2
 8010b9a:	009b      	lsls	r3, r3, #2
 8010b9c:	4413      	add	r3, r2
 8010b9e:	685b      	ldr	r3, [r3, #4]
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	f04f 0300 	mov.w	r3, #0
 8010ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ba8:	fb02 f001 	mul.w	r0, r2, r1
 8010bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010bae:	fb03 f101 	mul.w	r1, r3, r1
 8010bb2:	4401      	add	r1, r0
 8010bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bb6:	fba0 2302 	umull	r2, r3, r0, r2
 8010bba:	4419      	add	r1, r3
 8010bbc:	460b      	mov	r3, r1
 8010bbe:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8010bc2:	e9c7 2304 	strd	r2, r3, [r7, #16]
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8010bc6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010bca:	f512 7400 	adds.w	r4, r2, #512	; 0x200
 8010bce:	f143 0500 	adc.w	r5, r3, #0
 8010bd2:	f04f 0200 	mov.w	r2, #0
 8010bd6:	f04f 0300 	mov.w	r3, #0
 8010bda:	0aa2      	lsrs	r2, r4, #10
 8010bdc:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
 8010be0:	0aab      	lsrs	r3, r5, #10
 8010be2:	e9c7 2304 	strd	r2, r3, [r7, #16]

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8010be6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010bea:	6939      	ldr	r1, [r7, #16]
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	3206      	adds	r2, #6
 8010bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8010bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bf8:	3301      	adds	r3, #1
 8010bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	7a9b      	ldrb	r3, [r3, #10]
 8010c02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d3c3      	bcc.n	8010b92 <VL53LX_f_033+0x10e>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8010c0a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	3734      	adds	r7, #52	; 0x34
 8010c12:	46bd      	mov	sp, r7
 8010c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c18 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b084      	sub	sp, #16
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	60b9      	str	r1, [r7, #8]
 8010c22:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	68fa      	ldr	r2, [r7, #12]
 8010c2a:	8910      	ldrh	r0, [r2, #8]
 8010c2c:	687a      	ldr	r2, [r7, #4]
 8010c2e:	b292      	uxth	r2, r2
 8010c30:	68b9      	ldr	r1, [r7, #8]
 8010c32:	4798      	blx	r3
 8010c34:	4603      	mov	r3, r0
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	3710      	adds	r7, #16
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}

08010c3e <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8010c3e:	b580      	push	{r7, lr}
 8010c40:	b084      	sub	sp, #16
 8010c42:	af00      	add	r7, sp, #0
 8010c44:	60f8      	str	r0, [r7, #12]
 8010c46:	60b9      	str	r1, [r7, #8]
 8010c48:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	691b      	ldr	r3, [r3, #16]
 8010c4e:	68fa      	ldr	r2, [r7, #12]
 8010c50:	8910      	ldrh	r0, [r2, #8]
 8010c52:	687a      	ldr	r2, [r7, #4]
 8010c54:	b292      	uxth	r2, r2
 8010c56:	68b9      	ldr	r1, [r7, #8]
 8010c58:	4798      	blx	r3
 8010c5a:	4603      	mov	r3, r0
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3710      	adds	r7, #16
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b086      	sub	sp, #24
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	60f8      	str	r0, [r7, #12]
 8010c6c:	607a      	str	r2, [r7, #4]
 8010c6e:	603b      	str	r3, [r7, #0]
 8010c70:	460b      	mov	r3, r1
 8010c72:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010c74:	2300      	movs	r3, #0
 8010c76:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	2bff      	cmp	r3, #255	; 0xff
 8010c7c:	d902      	bls.n	8010c84 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 8010c7e:	f06f 0303 	mvn.w	r3, #3
 8010c82:	e01d      	b.n	8010cc0 <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8010c84:	897b      	ldrh	r3, [r7, #10]
 8010c86:	0a1b      	lsrs	r3, r3, #8
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	b2da      	uxtb	r2, r3
 8010c8c:	4b0e      	ldr	r3, [pc, #56]	; (8010cc8 <VL53LX_WriteMulti+0x64>)
 8010c8e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010c90:	897b      	ldrh	r3, [r7, #10]
 8010c92:	b2da      	uxtb	r2, r3
 8010c94:	4b0c      	ldr	r3, [pc, #48]	; (8010cc8 <VL53LX_WriteMulti+0x64>)
 8010c96:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8010c98:	683a      	ldr	r2, [r7, #0]
 8010c9a:	6879      	ldr	r1, [r7, #4]
 8010c9c:	480b      	ldr	r0, [pc, #44]	; (8010ccc <VL53LX_WriteMulti+0x68>)
 8010c9e:	f003 fa39 	bl	8014114 <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	3302      	adds	r3, #2
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	4907      	ldr	r1, [pc, #28]	; (8010cc8 <VL53LX_WriteMulti+0x64>)
 8010caa:	68f8      	ldr	r0, [r7, #12]
 8010cac:	f7ff ffb4 	bl	8010c18 <_I2CWrite>
 8010cb0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010cb2:	693b      	ldr	r3, [r7, #16]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d001      	beq.n	8010cbc <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010cb8:	23f3      	movs	r3, #243	; 0xf3
 8010cba:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 8010cbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3718      	adds	r7, #24
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	200070f4 	.word	0x200070f4
 8010ccc:	200070f6 	.word	0x200070f6

08010cd0 <VL53LX_ReadMulti>:

VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b086      	sub	sp, #24
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	60f8      	str	r0, [r7, #12]
 8010cd8:	607a      	str	r2, [r7, #4]
 8010cda:	603b      	str	r3, [r7, #0]
 8010cdc:	460b      	mov	r3, r1
 8010cde:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010ce4:	897b      	ldrh	r3, [r7, #10]
 8010ce6:	0a1b      	lsrs	r3, r3, #8
 8010ce8:	b29b      	uxth	r3, r3
 8010cea:	b2da      	uxtb	r2, r3
 8010cec:	4b12      	ldr	r3, [pc, #72]	; (8010d38 <VL53LX_ReadMulti+0x68>)
 8010cee:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010cf0:	897b      	ldrh	r3, [r7, #10]
 8010cf2:	b2da      	uxtb	r2, r3
 8010cf4:	4b10      	ldr	r3, [pc, #64]	; (8010d38 <VL53LX_ReadMulti+0x68>)
 8010cf6:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010cf8:	2202      	movs	r2, #2
 8010cfa:	490f      	ldr	r1, [pc, #60]	; (8010d38 <VL53LX_ReadMulti+0x68>)
 8010cfc:	68f8      	ldr	r0, [r7, #12]
 8010cfe:	f7ff ff8b 	bl	8010c18 <_I2CWrite>
 8010d02:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010d04:	693b      	ldr	r3, [r7, #16]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d002      	beq.n	8010d10 <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010d0a:	23f3      	movs	r3, #243	; 0xf3
 8010d0c:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010d0e:	e00c      	b.n	8010d2a <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8010d10:	683a      	ldr	r2, [r7, #0]
 8010d12:	6879      	ldr	r1, [r7, #4]
 8010d14:	68f8      	ldr	r0, [r7, #12]
 8010d16:	f7ff ff92 	bl	8010c3e <_I2CRead>
 8010d1a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010d1c:	693b      	ldr	r3, [r7, #16]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d002      	beq.n	8010d28 <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010d22:	23f3      	movs	r3, #243	; 0xf3
 8010d24:	75fb      	strb	r3, [r7, #23]
 8010d26:	e000      	b.n	8010d2a <VL53LX_ReadMulti+0x5a>
    }
done:
 8010d28:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8010d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3718      	adds	r7, #24
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	200070f4 	.word	0x200070f4

08010d3c <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b084      	sub	sp, #16
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	460b      	mov	r3, r1
 8010d46:	807b      	strh	r3, [r7, #2]
 8010d48:	4613      	mov	r3, r2
 8010d4a:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010d50:	887b      	ldrh	r3, [r7, #2]
 8010d52:	0a1b      	lsrs	r3, r3, #8
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	b2da      	uxtb	r2, r3
 8010d58:	4b0c      	ldr	r3, [pc, #48]	; (8010d8c <VL53LX_WrByte+0x50>)
 8010d5a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010d5c:	887b      	ldrh	r3, [r7, #2]
 8010d5e:	b2da      	uxtb	r2, r3
 8010d60:	4b0a      	ldr	r3, [pc, #40]	; (8010d8c <VL53LX_WrByte+0x50>)
 8010d62:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8010d64:	4a09      	ldr	r2, [pc, #36]	; (8010d8c <VL53LX_WrByte+0x50>)
 8010d66:	787b      	ldrb	r3, [r7, #1]
 8010d68:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8010d6a:	2203      	movs	r2, #3
 8010d6c:	4907      	ldr	r1, [pc, #28]	; (8010d8c <VL53LX_WrByte+0x50>)
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f7ff ff52 	bl	8010c18 <_I2CWrite>
 8010d74:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d001      	beq.n	8010d80 <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010d7c:	23f3      	movs	r3, #243	; 0xf3
 8010d7e:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8010d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3710      	adds	r7, #16
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}
 8010d8c:	200070f4 	.word	0x200070f4

08010d90 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b084      	sub	sp, #16
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
 8010d98:	460b      	mov	r3, r1
 8010d9a:	807b      	strh	r3, [r7, #2]
 8010d9c:	4613      	mov	r3, r2
 8010d9e:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010da0:	2300      	movs	r3, #0
 8010da2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010da4:	887b      	ldrh	r3, [r7, #2]
 8010da6:	0a1b      	lsrs	r3, r3, #8
 8010da8:	b29b      	uxth	r3, r3
 8010daa:	b2da      	uxtb	r2, r3
 8010dac:	4b10      	ldr	r3, [pc, #64]	; (8010df0 <VL53LX_WrWord+0x60>)
 8010dae:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010db0:	887b      	ldrh	r3, [r7, #2]
 8010db2:	b2da      	uxtb	r2, r3
 8010db4:	4b0e      	ldr	r3, [pc, #56]	; (8010df0 <VL53LX_WrWord+0x60>)
 8010db6:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8010db8:	883b      	ldrh	r3, [r7, #0]
 8010dba:	0a1b      	lsrs	r3, r3, #8
 8010dbc:	b29b      	uxth	r3, r3
 8010dbe:	b2da      	uxtb	r2, r3
 8010dc0:	4b0b      	ldr	r3, [pc, #44]	; (8010df0 <VL53LX_WrWord+0x60>)
 8010dc2:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8010dc4:	883b      	ldrh	r3, [r7, #0]
 8010dc6:	b2da      	uxtb	r2, r3
 8010dc8:	4b09      	ldr	r3, [pc, #36]	; (8010df0 <VL53LX_WrWord+0x60>)
 8010dca:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8010dcc:	2204      	movs	r2, #4
 8010dce:	4908      	ldr	r1, [pc, #32]	; (8010df0 <VL53LX_WrWord+0x60>)
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f7ff ff21 	bl	8010c18 <_I2CWrite>
 8010dd6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d001      	beq.n	8010de2 <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010dde:	23f3      	movs	r3, #243	; 0xf3
 8010de0:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8010de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3710      	adds	r7, #16
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	200070f4 	.word	0x200070f4

08010df4 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b086      	sub	sp, #24
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	60f8      	str	r0, [r7, #12]
 8010dfc:	460b      	mov	r3, r1
 8010dfe:	607a      	str	r2, [r7, #4]
 8010e00:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010e02:	2300      	movs	r3, #0
 8010e04:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8010e06:	897b      	ldrh	r3, [r7, #10]
 8010e08:	0a1b      	lsrs	r3, r3, #8
 8010e0a:	b29b      	uxth	r3, r3
 8010e0c:	b2da      	uxtb	r2, r3
 8010e0e:	4b12      	ldr	r3, [pc, #72]	; (8010e58 <VL53LX_RdByte+0x64>)
 8010e10:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8010e12:	897b      	ldrh	r3, [r7, #10]
 8010e14:	b2da      	uxtb	r2, r3
 8010e16:	4b10      	ldr	r3, [pc, #64]	; (8010e58 <VL53LX_RdByte+0x64>)
 8010e18:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010e1a:	2202      	movs	r2, #2
 8010e1c:	490e      	ldr	r1, [pc, #56]	; (8010e58 <VL53LX_RdByte+0x64>)
 8010e1e:	68f8      	ldr	r0, [r7, #12]
 8010e20:	f7ff fefa 	bl	8010c18 <_I2CWrite>
 8010e24:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8010e26:	693b      	ldr	r3, [r7, #16]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d002      	beq.n	8010e32 <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010e2c:	23f3      	movs	r3, #243	; 0xf3
 8010e2e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010e30:	e00c      	b.n	8010e4c <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8010e32:	2201      	movs	r2, #1
 8010e34:	6879      	ldr	r1, [r7, #4]
 8010e36:	68f8      	ldr	r0, [r7, #12]
 8010e38:	f7ff ff01 	bl	8010c3e <_I2CRead>
 8010e3c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d002      	beq.n	8010e4a <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010e44:	23f3      	movs	r3, #243	; 0xf3
 8010e46:	75fb      	strb	r3, [r7, #23]
 8010e48:	e000      	b.n	8010e4c <VL53LX_RdByte+0x58>
    }
done:
 8010e4a:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8010e4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e50:	4618      	mov	r0, r3
 8010e52:	3718      	adds	r7, #24
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}
 8010e58:	200070f4 	.word	0x200070f4

08010e5c <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b086      	sub	sp, #24
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	460b      	mov	r3, r1
 8010e66:	607a      	str	r2, [r7, #4]
 8010e68:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010e6e:	897b      	ldrh	r3, [r7, #10]
 8010e70:	0a1b      	lsrs	r3, r3, #8
 8010e72:	b29b      	uxth	r3, r3
 8010e74:	b2da      	uxtb	r2, r3
 8010e76:	4b18      	ldr	r3, [pc, #96]	; (8010ed8 <VL53LX_RdWord+0x7c>)
 8010e78:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8010e7a:	897b      	ldrh	r3, [r7, #10]
 8010e7c:	b2da      	uxtb	r2, r3
 8010e7e:	4b16      	ldr	r3, [pc, #88]	; (8010ed8 <VL53LX_RdWord+0x7c>)
 8010e80:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010e82:	2202      	movs	r2, #2
 8010e84:	4914      	ldr	r1, [pc, #80]	; (8010ed8 <VL53LX_RdWord+0x7c>)
 8010e86:	68f8      	ldr	r0, [r7, #12]
 8010e88:	f7ff fec6 	bl	8010c18 <_I2CWrite>
 8010e8c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d002      	beq.n	8010e9a <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010e94:	23f3      	movs	r3, #243	; 0xf3
 8010e96:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010e98:	e017      	b.n	8010eca <VL53LX_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8010e9a:	2202      	movs	r2, #2
 8010e9c:	490e      	ldr	r1, [pc, #56]	; (8010ed8 <VL53LX_RdWord+0x7c>)
 8010e9e:	68f8      	ldr	r0, [r7, #12]
 8010ea0:	f7ff fecd 	bl	8010c3e <_I2CRead>
 8010ea4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010ea6:	693b      	ldr	r3, [r7, #16]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d002      	beq.n	8010eb2 <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010eac:	23f3      	movs	r3, #243	; 0xf3
 8010eae:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010eb0:	e00b      	b.n	8010eca <VL53LX_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8010eb2:	4b09      	ldr	r3, [pc, #36]	; (8010ed8 <VL53LX_RdWord+0x7c>)
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	b29b      	uxth	r3, r3
 8010eb8:	021b      	lsls	r3, r3, #8
 8010eba:	b29a      	uxth	r2, r3
 8010ebc:	4b06      	ldr	r3, [pc, #24]	; (8010ed8 <VL53LX_RdWord+0x7c>)
 8010ebe:	785b      	ldrb	r3, [r3, #1]
 8010ec0:	b29b      	uxth	r3, r3
 8010ec2:	4413      	add	r3, r2
 8010ec4:	b29a      	uxth	r2, r3
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 8010eca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3718      	adds	r7, #24
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
 8010ed6:	bf00      	nop
 8010ed8:	200070f4 	.word	0x200070f4

08010edc <VL53LX_GetTickCount>:
    VL53LX_PutI2cBus();
    return Status;
}

VL53LX_Error VL53LX_GetTickCount(VL53LX_DEV Dev, uint32_t *ptick_count_ms)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b084      	sub	sp, #16
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	695b      	ldr	r3, [r3, #20]
 8010eee:	4798      	blx	r3
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	461a      	mov	r2, r3
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8010ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010efc:	4618      	mov	r0, r3
 8010efe:	3710      	adds	r7, #16
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}

08010f04 <VL53LX_WaitMs>:
	
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitMs(VL53LX_DEV Dev, int32_t wait_ms){
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b082      	sub	sp, #8
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_ms);
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	4619      	mov	r1, r3
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f000 f8b8 	bl	8011088 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8010f18:	2300      	movs	r3, #0
}
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	3708      	adds	r7, #8
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}
	...

08010f24 <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_DEV Dev, int32_t wait_us){
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b082      	sub	sp, #8
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_us/1000);
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	4a07      	ldr	r2, [pc, #28]	; (8010f50 <VL53LX_WaitUs+0x2c>)
 8010f32:	fb82 1203 	smull	r1, r2, r2, r3
 8010f36:	1192      	asrs	r2, r2, #6
 8010f38:	17db      	asrs	r3, r3, #31
 8010f3a:	1ad3      	subs	r3, r2, r3
 8010f3c:	4619      	mov	r1, r3
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 f8a2 	bl	8011088 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8010f44:	2300      	movs	r3, #0
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3708      	adds	r7, #8
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	10624dd3 	.word	0x10624dd3

08010f54 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8010f54:	b590      	push	{r4, r7, lr}
 8010f56:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	f107 040c 	add.w	r4, r7, #12
 8010f60:	6020      	str	r0, [r4, #0]
 8010f62:	f107 0008 	add.w	r0, r7, #8
 8010f66:	6001      	str	r1, [r0, #0]
 8010f68:	4619      	mov	r1, r3
 8010f6a:	1dbb      	adds	r3, r7, #6
 8010f6c:	801a      	strh	r2, [r3, #0]
 8010f6e:	1d7b      	adds	r3, r7, #5
 8010f70:	460a      	mov	r2, r1
 8010f72:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8010f74:	2300      	movs	r3, #0
 8010f76:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8010f80:	2300      	movs	r3, #0
 8010f82:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8010f86:	2300      	movs	r3, #0
 8010f88:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8010f92:	2300      	movs	r3, #0
 8010f94:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 8010f98:	f107 0310 	add.w	r3, r7, #16
 8010f9c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010fa0:	4938      	ldr	r1, [pc, #224]	; (8011084 <VL53LX_WaitValueMaskEx+0x130>)
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f003 f95a 	bl	801425c <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(Dev, &start_time_ms);
 8010fa8:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8010fac:	f107 030c 	add.w	r3, r7, #12
 8010fb0:	4611      	mov	r1, r2
 8010fb2:	6818      	ldr	r0, [r3, #0]
 8010fb4:	f7ff ff92 	bl	8010edc <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 8010fb8:	e042      	b.n	8011040 <VL53LX_WaitValueMaskEx+0xec>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 8010fba:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d10b      	bne.n	8010fda <VL53LX_WaitValueMaskEx+0x86>
			status = VL53LX_RdByte(
 8010fc2:	f207 2213 	addw	r2, r7, #531	; 0x213
 8010fc6:	1dbb      	adds	r3, r7, #6
 8010fc8:	8819      	ldrh	r1, [r3, #0]
 8010fca:	f107 030c 	add.w	r3, r7, #12
 8010fce:	6818      	ldr	r0, [r3, #0]
 8010fd0:	f7ff ff10 	bl	8010df4 <VL53LX_RdByte>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8010fda:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8010fde:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8010fe2:	4013      	ands	r3, r2
 8010fe4:	b2db      	uxtb	r3, r3
 8010fe6:	1d7a      	adds	r2, r7, #5
 8010fe8:	7812      	ldrb	r2, [r2, #0]
 8010fea:	429a      	cmp	r2, r3
 8010fec:	d102      	bne.n	8010ff4 <VL53LX_WaitValueMaskEx+0xa0>
			found = 1;
 8010fee:	2301      	movs	r3, #1
 8010ff0:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 8010ff4:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d112      	bne.n	8011022 <VL53LX_WaitValueMaskEx+0xce>
 8010ffc:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8011000:	2b00      	cmp	r3, #0
 8011002:	d10e      	bne.n	8011022 <VL53LX_WaitValueMaskEx+0xce>
			found == 0 &&
 8011004:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8011008:	2b00      	cmp	r3, #0
 801100a:	d00a      	beq.n	8011022 <VL53LX_WaitValueMaskEx+0xce>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 801100c:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8011010:	f107 030c 	add.w	r3, r7, #12
 8011014:	4611      	mov	r1, r2
 8011016:	6818      	ldr	r0, [r3, #0]
 8011018:	f7ff ff74 	bl	8010f04 <VL53LX_WaitMs>
 801101c:	4603      	mov	r3, r0
 801101e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(Dev, &current_time_ms);
 8011022:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8011026:	f107 030c 	add.w	r3, r7, #12
 801102a:	4611      	mov	r1, r2
 801102c:	6818      	ldr	r0, [r3, #0]
 801102e:	f7ff ff55 	bl	8010edc <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8011032:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8011036:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801103a:	1ad3      	subs	r3, r2, r3
 801103c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53LX_ERROR_NONE) &&
 8011040:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011044:	2b00      	cmp	r3, #0
 8011046:	d10a      	bne.n	801105e <VL53LX_WaitValueMaskEx+0x10a>
 8011048:	f107 0308 	add.w	r3, r7, #8
 801104c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	429a      	cmp	r2, r3
 8011054:	d203      	bcs.n	801105e <VL53LX_WaitValueMaskEx+0x10a>
		   (polling_time_ms < timeout_ms) &&
 8011056:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 801105a:	2b00      	cmp	r3, #0
 801105c:	d0ad      	beq.n	8010fba <VL53LX_WaitValueMaskEx+0x66>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 801105e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8011062:	2b00      	cmp	r3, #0
 8011064:	d106      	bne.n	8011074 <VL53LX_WaitValueMaskEx+0x120>
 8011066:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 801106a:	2b00      	cmp	r3, #0
 801106c:	d102      	bne.n	8011074 <VL53LX_WaitValueMaskEx+0x120>
		status = VL53LX_ERROR_TIME_OUT;
 801106e:	23f9      	movs	r3, #249	; 0xf9
 8011070:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8011074:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8011078:	4618      	mov	r0, r3
 801107a:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 801107e:	46bd      	mov	sp, r7
 8011080:	bd90      	pop	{r4, r7, pc}
 8011082:	bf00      	nop
 8011084:	0801522c 	.word	0x0801522c

08011088 <VL53LX_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53LX_Error
  */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b084      	sub	sp, #16
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
 8011090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	695b      	ldr	r3, [r3, #20]
 8011096:	4798      	blx	r3
 8011098:	4603      	mov	r3, r0
 801109a:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 801109c:	bf00      	nop
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	695b      	ldr	r3, [r3, #20]
 80110a2:	4798      	blx	r3
 80110a4:	4603      	mov	r3, r0
 80110a6:	461a      	mov	r2, r3
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	1ad3      	subs	r3, r2, r3
 80110ac:	683a      	ldr	r2, [r7, #0]
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d8f5      	bhi.n	801109e <VL53LX_Delay+0x16>
  {
  }

  return VL53LX_ERROR_NONE;
 80110b2:	2300      	movs	r3, #0
}
 80110b4:	4618      	mov	r0, r3
 80110b6:	3710      	adds	r7, #16
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}

080110bc <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b08c      	sub	sp, #48	; 0x30
 80110c0:	af06      	add	r7, sp, #24
 80110c2:	60f8      	str	r0, [r7, #12]
 80110c4:	60b9      	str	r1, [r7, #8]
 80110c6:	607a      	str	r2, [r7, #4]
 80110c8:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80110ca:	2300      	movs	r3, #0
 80110cc:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 80110ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110d0:	9304      	str	r3, [sp, #16]
 80110d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110d4:	9303      	str	r3, [sp, #12]
 80110d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d8:	9302      	str	r3, [sp, #8]
 80110da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110dc:	9301      	str	r3, [sp, #4]
 80110de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e0:	9300      	str	r3, [sp, #0]
 80110e2:	6a3b      	ldr	r3, [r7, #32]
 80110e4:	683a      	ldr	r2, [r7, #0]
 80110e6:	6879      	ldr	r1, [r7, #4]
 80110e8:	68b8      	ldr	r0, [r7, #8]
 80110ea:	f7fd f98c 	bl	800e406 <VL53LX_hist_process_data>
 80110ee:	4603      	mov	r3, r0
 80110f0:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 80110f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3718      	adds	r7, #24
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}

080110fe <VL53L3CX_RegisterBusIO>:
  * @param pObj    vl53l3cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_RegisterBusIO(VL53L3CX_Object_t *pObj, VL53L3CX_IO_t *pIO)
{
 80110fe:	b580      	push	{r7, lr}
 8011100:	b084      	sub	sp, #16
 8011102:	af00      	add	r7, sp, #0
 8011104:	6078      	str	r0, [r7, #4]
 8011106:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d103      	bne.n	8011116 <VL53L3CX_RegisterBusIO+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 801110e:	f06f 0301 	mvn.w	r3, #1
 8011112:	60fb      	str	r3, [r7, #12]
 8011114:	e023      	b.n	801115e <VL53L3CX_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	681a      	ldr	r2, [r3, #0]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	685a      	ldr	r2, [r3, #4]
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	891a      	ldrh	r2, [r3, #8]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	68da      	ldr	r2, [r3, #12]
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	691a      	ldr	r2, [r3, #16]
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	695a      	ldr	r2, [r3, #20]
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d004      	beq.n	8011158 <VL53L3CX_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	4798      	blx	r3
 8011154:	60f8      	str	r0, [r7, #12]
 8011156:	e002      	b.n	801115e <VL53L3CX_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L3CX_ERROR;
 8011158:	f04f 33ff 	mov.w	r3, #4294967295
 801115c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 801115e:	68fb      	ldr	r3, [r7, #12]
}
 8011160:	4618      	mov	r0, r3
 8011162:	3710      	adds	r7, #16
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <VL53L3CX_Init>:
  * @brief Initializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Init(VL53L3CX_Object_t *pObj)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b084      	sub	sp, #16
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011176:	3328      	adds	r3, #40	; 0x28
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d003      	beq.n	8011186 <VL53L3CX_Init+0x1e>
  {
    ret =  VL53L3CX_ERROR;
 801117e:	f04f 33ff 	mov.w	r3, #4294967295
 8011182:	60fb      	str	r3, [r7, #12]
 8011184:	e043      	b.n	801120e <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_WaitDeviceBooted(pObj) != VL53LX_ERROR_NONE)
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f7f0 fcb8 	bl	8001afc <VL53LX_WaitDeviceBooted>
 801118c:	4603      	mov	r3, r0
 801118e:	2b00      	cmp	r3, #0
 8011190:	d003      	beq.n	801119a <VL53L3CX_Init+0x32>
  {
    ret =  VL53L3CX_ERROR;
 8011192:	f04f 33ff 	mov.w	r3, #4294967295
 8011196:	60fb      	str	r3, [r7, #12]
 8011198:	e039      	b.n	801120e <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_DataInit(pObj) != VL53LX_ERROR_NONE)
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f7f0 fc53 	bl	8001a46 <VL53LX_DataInit>
 80111a0:	4603      	mov	r3, r0
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d003      	beq.n	80111ae <VL53L3CX_Init+0x46>
  {
    ret = VL53L3CX_ERROR;
 80111a6:	f04f 33ff 	mov.w	r3, #4294967295
 80111aa:	60fb      	str	r3, [r7, #12]
 80111ac:	e02f      	b.n	801120e <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_PerformRefSpadManagement(pObj) != VL53LX_ERROR_NONE)
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f7f1 fb46 	bl	8002840 <VL53LX_PerformRefSpadManagement>
 80111b4:	4603      	mov	r3, r0
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d003      	beq.n	80111c2 <VL53L3CX_Init+0x5a>
  {
    ret = VL53L3CX_ERROR;
 80111ba:	f04f 33ff 	mov.w	r3, #4294967295
 80111be:	60fb      	str	r3, [r7, #12]
 80111c0:	e025      	b.n	801120e <VL53L3CX_Init+0xa6>
  }
  else
  {
    pObj->IsRanging = 0;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80111c8:	3329      	adds	r3, #41	; 0x29
 80111ca:	2200      	movs	r2, #0
 80111cc:	701a      	strb	r2, [r3, #0]
    pObj->IsBlocking = 0;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80111d4:	332a      	adds	r3, #42	; 0x2a
 80111d6:	2200      	movs	r2, #0
 80111d8:	701a      	strb	r2, [r3, #0]
    pObj->IsContinuous = 0;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80111e0:	332b      	adds	r3, #43	; 0x2b
 80111e2:	2200      	movs	r2, #0
 80111e4:	701a      	strb	r2, [r3, #0]
    pObj->IsAmbientEnabled = 0;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80111ec:	332c      	adds	r3, #44	; 0x2c
 80111ee:	2200      	movs	r2, #0
 80111f0:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = 0;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80111f8:	332d      	adds	r3, #45	; 0x2d
 80111fa:	2200      	movs	r2, #0
 80111fc:	701a      	strb	r2, [r3, #0]
    pObj->IsInitialized = 1;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011204:	3328      	adds	r3, #40	; 0x28
 8011206:	2201      	movs	r2, #1
 8011208:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 801120a:	2300      	movs	r3, #0
 801120c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801120e:	68fb      	ldr	r3, [r7, #12]
}
 8011210:	4618      	mov	r0, r3
 8011212:	3710      	adds	r7, #16
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <VL53L3CX_DeInit>:
  * @brief Deinitializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_DeInit(VL53L3CX_Object_t *pObj)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L3CX_ERROR;
 8011220:	f04f 33ff 	mov.w	r3, #4294967295
 8011224:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801122c:	3328      	adds	r3, #40	; 0x28
 801122e:	781b      	ldrb	r3, [r3, #0]
 8011230:	2b01      	cmp	r3, #1
 8011232:	d111      	bne.n	8011258 <VL53L3CX_DeInit+0x40>
  {
    /* De-initialize the vl53l3cx interface */
    if (pObj->IO.DeInit() != 0)
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	4798      	blx	r3
 801123a:	4603      	mov	r3, r0
 801123c:	2b00      	cmp	r3, #0
 801123e:	d003      	beq.n	8011248 <VL53L3CX_DeInit+0x30>
    {
      ret = VL53L3CX_ERROR;
 8011240:	f04f 33ff 	mov.w	r3, #4294967295
 8011244:	60fb      	str	r3, [r7, #12]
 8011246:	e007      	b.n	8011258 <VL53L3CX_DeInit+0x40>
    }
    else
    {
      ret = VL53L3CX_OK;
 8011248:	2300      	movs	r3, #0
 801124a:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011252:	3328      	adds	r3, #40	; 0x28
 8011254:	2200      	movs	r2, #0
 8011256:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8011258:	68fb      	ldr	r3, [r7, #12]
}
 801125a:	4618      	mov	r0, r3
 801125c:	3710      	adds	r7, #16
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}

08011262 <VL53L3CX_ReadID>:
  * @param pObj    vl53l3cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ReadID(VL53L3CX_Object_t *pObj, uint32_t *pId)
{
 8011262:	b580      	push	{r7, lr}
 8011264:	b084      	sub	sp, #16
 8011266:	af00      	add	r7, sp, #0
 8011268:	6078      	str	r0, [r7, #4]
 801126a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d002      	beq.n	8011278 <VL53L3CX_ReadID+0x16>
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d103      	bne.n	8011280 <VL53L3CX_ReadID+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011278:	f06f 0301 	mvn.w	r3, #1
 801127c:	60fb      	str	r3, [r7, #12]
 801127e:	e00a      	b.n	8011296 <VL53L3CX_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	2200      	movs	r2, #0
 8011284:	601a      	str	r2, [r3, #0]
    ret = VL53LX_RdWord(pObj, VL53L3CX_ID_REG, (uint16_t *) pId);
 8011286:	683a      	ldr	r2, [r7, #0]
 8011288:	f240 110f 	movw	r1, #271	; 0x10f
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f7ff fde5 	bl	8010e5c <VL53LX_RdWord>
 8011292:	4603      	mov	r3, r0
 8011294:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011296:	68fb      	ldr	r3, [r7, #12]
}
 8011298:	4618      	mov	r0, r3
 801129a:	3710      	adds	r7, #16
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <VL53L3CX_GetCapabilities>:
  * @param pObj    vl53l3cx context object.
  * @param pCap    Pointer to the vl53l3cx capabilities.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetCapabilities(VL53L3CX_Object_t *pObj, VL53L3CX_Capabilities_t *pCap)
{
 80112a0:	b480      	push	{r7}
 80112a2:	b085      	sub	sp, #20
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d002      	beq.n	80112b6 <VL53L3CX_GetCapabilities+0x16>
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d103      	bne.n	80112be <VL53L3CX_GetCapabilities+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80112b6:	f06f 0301 	mvn.w	r3, #1
 80112ba:	60fb      	str	r3, [r7, #12]
 80112bc:	e00d      	b.n	80112da <VL53L3CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	2201      	movs	r2, #1
 80112c2:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L3CX_NB_TARGET_PER_ZONE;
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	2204      	movs	r2, #4
 80112c8:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	2201      	movs	r2, #1
 80112ce:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	2200      	movs	r2, #0
 80112d4:	60da      	str	r2, [r3, #12]

    ret = VL53L3CX_OK;
 80112d6:	2300      	movs	r3, #0
 80112d8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80112da:	68fb      	ldr	r3, [r7, #12]
}
 80112dc:	4618      	mov	r0, r3
 80112de:	3714      	adds	r7, #20
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr

080112e8 <VL53L3CX_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L3CX the profile corresponds to the distance modes.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigProfile(VL53L3CX_Object_t *pObj, VL53L3CX_ProfileConfig_t *pConfig)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b084      	sub	sp, #16
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
 80112f0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d009      	beq.n	801130c <VL53L3CX_ConfigProfile+0x24>
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d006      	beq.n	801130c <VL53L3CX_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	781b      	ldrb	r3, [r3, #0]
 8011302:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L3CX_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 8011304:	7afb      	ldrb	r3, [r7, #11]
 8011306:	2b01      	cmp	r3, #1
 8011308:	d103      	bne.n	8011312 <VL53L3CX_ConfigProfile+0x2a>
 801130a:	e00c      	b.n	8011326 <VL53L3CX_ConfigProfile+0x3e>
    return VL53L3CX_INVALID_PARAM;
 801130c:	f06f 0301 	mvn.w	r3, #1
 8011310:	e043      	b.n	801139a <VL53L3CX_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 8011312:	7afb      	ldrb	r3, [r7, #11]
 8011314:	2b02      	cmp	r3, #2
 8011316:	d006      	beq.n	8011326 <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_MEDIUM) &&
 8011318:	7afb      	ldrb	r3, [r7, #11]
 801131a:	2b03      	cmp	r3, #3
 801131c:	d003      	beq.n	8011326 <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_LONG))
  {
    ret = VL53L3CX_INVALID_PARAM;
 801131e:	f06f 0301 	mvn.w	r3, #1
 8011322:	60fb      	str	r3, [r7, #12]
 8011324:	e038      	b.n	8011398 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetDistanceMode(pObj, ranging_profile) != VL53LX_ERROR_NONE)
 8011326:	7afb      	ldrb	r3, [r7, #11]
 8011328:	4619      	mov	r1, r3
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f7f0 fcc9 	bl	8001cc2 <VL53LX_SetDistanceMode>
 8011330:	4603      	mov	r3, r0
 8011332:	2b00      	cmp	r3, #0
 8011334:	d003      	beq.n	801133e <VL53L3CX_ConfigProfile+0x56>
  {
    ret = VL53L3CX_ERROR;
 8011336:	f04f 33ff 	mov.w	r3, #4294967295
 801133a:	60fb      	str	r3, [r7, #12]
 801133c:	e02c      	b.n	8011398 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53LX_ERROR_NONE)
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	685b      	ldr	r3, [r3, #4]
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
 8011342:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011346:	fb02 f303 	mul.w	r3, r2, r3
 801134a:	4619      	mov	r1, r3
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f7f0 fd1f 	bl	8001d90 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8011352:	4603      	mov	r3, r0
 8011354:	2b00      	cmp	r3, #0
 8011356:	d003      	beq.n	8011360 <VL53L3CX_ConfigProfile+0x78>
  {
    ret = VL53L3CX_ERROR;
 8011358:	f04f 33ff 	mov.w	r3, #4294967295
 801135c:	60fb      	str	r3, [r7, #12]
 801135e:	e01b      	b.n	8011398 <VL53L3CX_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	68db      	ldr	r3, [r3, #12]
 8011364:	2b00      	cmp	r3, #0
 8011366:	bf14      	ite	ne
 8011368:	2301      	movne	r3, #1
 801136a:	2300      	moveq	r3, #0
 801136c:	b2db      	uxtb	r3, r3
 801136e:	461a      	mov	r2, r3
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011376:	332c      	adds	r3, #44	; 0x2c
 8011378:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	691b      	ldr	r3, [r3, #16]
 801137e:	2b00      	cmp	r3, #0
 8011380:	bf14      	ite	ne
 8011382:	2301      	movne	r3, #1
 8011384:	2300      	moveq	r3, #0
 8011386:	b2db      	uxtb	r3, r3
 8011388:	461a      	mov	r2, r3
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011390:	332d      	adds	r3, #45	; 0x2d
 8011392:	701a      	strb	r2, [r3, #0]

    ret = VL53L3CX_OK;
 8011394:	2300      	movs	r3, #0
 8011396:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011398:	68fb      	ldr	r3, [r7, #12]
}
 801139a:	4618      	mov	r0, r3
 801139c:	3710      	adds	r7, #16
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}

080113a2 <VL53L3CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigROI(VL53L3CX_Object_t *pObj, VL53L3CX_ROIConfig_t *pROIConfig)
{
 80113a2:	b580      	push	{r7, lr}
 80113a4:	b084      	sub	sp, #16
 80113a6:	af00      	add	r7, sp, #0
 80113a8:	6078      	str	r0, [r7, #4]
 80113aa:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53LX_UserRoi_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d002      	beq.n	80113b8 <VL53L3CX_ConfigROI+0x16>
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d103      	bne.n	80113c0 <VL53L3CX_ConfigROI+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80113b8:	f06f 0301 	mvn.w	r3, #1
 80113bc:	60fb      	str	r3, [r7, #12]
 80113be:	e01a      	b.n	80113f6 <VL53L3CX_ConfigROI+0x54>
  }
  else
  {
    roi_settings.BotRightX = pROIConfig->BotRightX;
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	789b      	ldrb	r3, [r3, #2]
 80113c4:	72bb      	strb	r3, [r7, #10]
    roi_settings.BotRightY = pROIConfig->BotRightY;
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	78db      	ldrb	r3, [r3, #3]
 80113ca:	72fb      	strb	r3, [r7, #11]
    roi_settings.TopLeftX = pROIConfig->TopLeftX;
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	723b      	strb	r3, [r7, #8]
    roi_settings.TopLeftY = pROIConfig->TopLeftY;
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	785b      	ldrb	r3, [r3, #1]
 80113d6:	727b      	strb	r3, [r7, #9]

    if (VL53LX_SetUserROI(pObj, &roi_settings) != VL53LX_ERROR_NONE)
 80113d8:	f107 0308 	add.w	r3, r7, #8
 80113dc:	4619      	mov	r1, r3
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f7f0 fd4e 	bl	8001e80 <VL53LX_SetUserROI>
 80113e4:	4603      	mov	r3, r0
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d003      	beq.n	80113f2 <VL53L3CX_ConfigROI+0x50>
    {
      ret = VL53L3CX_ERROR;
 80113ea:	f04f 33ff 	mov.w	r3, #4294967295
 80113ee:	60fb      	str	r3, [r7, #12]
 80113f0:	e001      	b.n	80113f6 <VL53L3CX_ConfigROI+0x54>
    }
    else
    {
      ret = VL53L3CX_OK;
 80113f2:	2300      	movs	r3, #0
 80113f4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80113f6:	68fb      	ldr	r3, [r7, #12]
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3710      	adds	r7, #16
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <VL53L3CX_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigIT(VL53L3CX_Object_t *pObj, VL53L3CX_ITConfig_t *pITConfig)
{
 8011400:	b480      	push	{r7}
 8011402:	b083      	sub	sp, #12
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L3CX_NOT_IMPLEMENTED;
 801140a:	f06f 0303 	mvn.w	r3, #3
}
 801140e:	4618      	mov	r0, r3
 8011410:	370c      	adds	r7, #12
 8011412:	46bd      	mov	sp, r7
 8011414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011418:	4770      	bx	lr

0801141a <VL53L3CX_GetDistance>:
  * @param pObj    vl53l3cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetDistance(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 801141a:	b580      	push	{r7, lr}
 801141c:	b084      	sub	sp, #16
 801141e:	af00      	add	r7, sp, #0
 8011420:	6078      	str	r0, [r7, #4]
 8011422:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d002      	beq.n	8011430 <VL53L3CX_GetDistance+0x16>
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d103      	bne.n	8011438 <VL53L3CX_GetDistance+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011430:	f06f 0301 	mvn.w	r3, #1
 8011434:	60fb      	str	r3, [r7, #12]
 8011436:	e01d      	b.n	8011474 <VL53L3CX_GetDistance+0x5a>
  }
  else if (pObj->IsRanging == 0U)
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801143e:	3329      	adds	r3, #41	; 0x29
 8011440:	781b      	ldrb	r3, [r3, #0]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d103      	bne.n	801144e <VL53L3CX_GetDistance+0x34>
  {
    ret = VL53L3CX_ERROR;
 8011446:	f04f 33ff 	mov.w	r3, #4294967295
 801144a:	60fb      	str	r3, [r7, #12]
 801144c:	e012      	b.n	8011474 <VL53L3CX_GetDistance+0x5a>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011454:	332a      	adds	r3, #42	; 0x2a
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	2b01      	cmp	r3, #1
 801145a:	d106      	bne.n	801146a <VL53L3CX_GetDistance+0x50>
    {
      ret = vl53l3cx_poll_for_measurement(pObj, V53L3CX_POLL_TIMEOUT);
 801145c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f000 f92b 	bl	80116bc <vl53l3cx_poll_for_measurement>
 8011466:	60f8      	str	r0, [r7, #12]
 8011468:	e004      	b.n	8011474 <VL53L3CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l3cx_poll_for_measurement(pObj, 0U);
 801146a:	2100      	movs	r1, #0
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f000 f925 	bl	80116bc <vl53l3cx_poll_for_measurement>
 8011472:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L3CX_OK)
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d119      	bne.n	80114ae <VL53L3CX_GetDistance+0x94>
  {
    /* retrieve measurements and fill result structure */
    if (vl53l3cx_get_result(pObj, pResult) != VL53L3CX_OK)
 801147a:	6839      	ldr	r1, [r7, #0]
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f000 f94b 	bl	8011718 <vl53l3cx_get_result>
 8011482:	4603      	mov	r3, r0
 8011484:	2b00      	cmp	r3, #0
 8011486:	d003      	beq.n	8011490 <VL53L3CX_GetDistance+0x76>
    {
      ret = VL53L3CX_ERROR;
 8011488:	f04f 33ff 	mov.w	r3, #4294967295
 801148c:	60fb      	str	r3, [r7, #12]
 801148e:	e00e      	b.n	80114ae <VL53L3CX_GetDistance+0x94>
    }
    else if (pObj->IsContinuous == 1U)
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011496:	332b      	adds	r3, #43	; 0x2b
 8011498:	781b      	ldrb	r3, [r3, #0]
 801149a:	2b01      	cmp	r3, #1
 801149c:	d105      	bne.n	80114aa <VL53L3CX_GetDistance+0x90>
    {
      /* trigger new measurement if device configured in continuous mode */
      ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f7f0 fdbe 	bl	8002020 <VL53LX_ClearInterruptAndStartMeasurement>
 80114a4:	4603      	mov	r3, r0
 80114a6:	60fb      	str	r3, [r7, #12]
 80114a8:	e001      	b.n	80114ae <VL53L3CX_GetDistance+0x94>
    }
    else
    {
      ret = VL53L3CX_OK;
 80114aa:	2300      	movs	r3, #0
 80114ac:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80114ae:	68fb      	ldr	r3, [r7, #12]
}
 80114b0:	4618      	mov	r0, r3
 80114b2:	3710      	adds	r7, #16
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}

080114b8 <VL53L3CX_Start>:
  * @param pObj    vl53l3cx context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Start(VL53L3CX_Object_t *pObj, uint32_t Mode)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b084      	sub	sp, #16
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d103      	bne.n	80114d0 <VL53L3CX_Start+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80114c8:	f06f 0301 	mvn.w	r3, #1
 80114cc:	60fb      	str	r3, [r7, #12]
 80114ce:	e068      	b.n	80115a2 <VL53L3CX_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80114d6:	3329      	adds	r3, #41	; 0x29
 80114d8:	781b      	ldrb	r3, [r3, #0]
 80114da:	2b01      	cmp	r3, #1
 80114dc:	d103      	bne.n	80114e6 <VL53L3CX_Start+0x2e>
  {
    ret = VL53L3CX_ERROR;
 80114de:	f04f 33ff 	mov.w	r3, #4294967295
 80114e2:	60fb      	str	r3, [r7, #12]
 80114e4:	e05d      	b.n	80115a2 <VL53L3CX_Start+0xea>
  }
  else if (VL53LX_StartMeasurement(pObj) == VL53LX_ERROR_NONE)
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f7f0 fd38 	bl	8001f5c <VL53LX_StartMeasurement>
 80114ec:	4603      	mov	r3, r0
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d154      	bne.n	801159c <VL53L3CX_Start+0xe4>
  {
    pObj->IsRanging = 1;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80114f8:	3329      	adds	r3, #41	; 0x29
 80114fa:	2201      	movs	r2, #1
 80114fc:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 80114fe:	2300      	movs	r3, #0
 8011500:	60fb      	str	r3, [r7, #12]
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	3b01      	subs	r3, #1
 8011506:	2b03      	cmp	r3, #3
 8011508:	d83e      	bhi.n	8011588 <VL53L3CX_Start+0xd0>
 801150a:	a201      	add	r2, pc, #4	; (adr r2, 8011510 <VL53L3CX_Start+0x58>)
 801150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011510:	08011521 	.word	0x08011521
 8011514:	0801153b 	.word	0x0801153b
 8011518:	08011555 	.word	0x08011555
 801151c:	0801156f 	.word	0x0801156f

    switch (Mode)
    {
    case VL53L3CX_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011526:	332b      	adds	r3, #43	; 0x2b
 8011528:	2201      	movs	r2, #1
 801152a:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011532:	332a      	adds	r3, #42	; 0x2a
 8011534:	2201      	movs	r2, #1
 8011536:	701a      	strb	r2, [r3, #0]
      break;
 8011538:	e033      	b.n	80115a2 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011540:	332b      	adds	r3, #43	; 0x2b
 8011542:	2200      	movs	r2, #0
 8011544:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801154c:	332a      	adds	r3, #42	; 0x2a
 801154e:	2201      	movs	r2, #1
 8011550:	701a      	strb	r2, [r3, #0]
      break;
 8011552:	e026      	b.n	80115a2 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801155a:	332b      	adds	r3, #43	; 0x2b
 801155c:	2201      	movs	r2, #1
 801155e:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011566:	332a      	adds	r3, #42	; 0x2a
 8011568:	2200      	movs	r2, #0
 801156a:	701a      	strb	r2, [r3, #0]
      break;
 801156c:	e019      	b.n	80115a2 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011574:	332b      	adds	r3, #43	; 0x2b
 8011576:	2200      	movs	r2, #0
 8011578:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011580:	332a      	adds	r3, #42	; 0x2a
 8011582:	2200      	movs	r2, #0
 8011584:	701a      	strb	r2, [r3, #0]
      break;
 8011586:	e00c      	b.n	80115a2 <VL53L3CX_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801158e:	3329      	adds	r3, #41	; 0x29
 8011590:	2200      	movs	r2, #0
 8011592:	701a      	strb	r2, [r3, #0]
      ret = VL53L3CX_INVALID_PARAM;
 8011594:	f06f 0301 	mvn.w	r3, #1
 8011598:	60fb      	str	r3, [r7, #12]
      break;
 801159a:	e002      	b.n	80115a2 <VL53L3CX_Start+0xea>
    }
  }
  else
  {
    ret = VL53L3CX_ERROR;
 801159c:	f04f 33ff 	mov.w	r3, #4294967295
 80115a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80115a2:	68fb      	ldr	r3, [r7, #12]
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	3710      	adds	r7, #16
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd80      	pop	{r7, pc}

080115ac <VL53L3CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Stop(VL53L3CX_Object_t *pObj)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b084      	sub	sp, #16
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d103      	bne.n	80115c2 <VL53L3CX_Stop+0x16>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80115ba:	f06f 0301 	mvn.w	r3, #1
 80115be:	60fb      	str	r3, [r7, #12]
 80115c0:	e01c      	b.n	80115fc <VL53L3CX_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80115c8:	3329      	adds	r3, #41	; 0x29
 80115ca:	781b      	ldrb	r3, [r3, #0]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d103      	bne.n	80115d8 <VL53L3CX_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L3CX_ERROR;
 80115d0:	f04f 33ff 	mov.w	r3, #4294967295
 80115d4:	60fb      	str	r3, [r7, #12]
 80115d6:	e011      	b.n	80115fc <VL53L3CX_Stop+0x50>
  }
  else if (VL53LX_StopMeasurement(pObj) == VL53LX_ERROR_NONE)
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f7f0 fd0d 	bl	8001ff8 <VL53LX_StopMeasurement>
 80115de:	4603      	mov	r3, r0
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d108      	bne.n	80115f6 <VL53L3CX_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80115ea:	3329      	adds	r3, #41	; 0x29
 80115ec:	2200      	movs	r2, #0
 80115ee:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 80115f0:	2300      	movs	r3, #0
 80115f2:	60fb      	str	r3, [r7, #12]
 80115f4:	e002      	b.n	80115fc <VL53L3CX_Stop+0x50>
  }
  else
  {
    ret = VL53L3CX_ERROR;
 80115f6:	f04f 33ff 	mov.w	r3, #4294967295
 80115fa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80115fc:	68fb      	ldr	r3, [r7, #12]
}
 80115fe:	4618      	mov	r0, r3
 8011600:	3710      	adds	r7, #16
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}

08011606 <VL53L3CX_SetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param Address     New I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetAddress(VL53L3CX_Object_t *pObj, uint32_t Address)
{
 8011606:	b580      	push	{r7, lr}
 8011608:	b084      	sub	sp, #16
 801160a:	af00      	add	r7, sp, #0
 801160c:	6078      	str	r0, [r7, #4]
 801160e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d103      	bne.n	801161e <VL53L3CX_SetAddress+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011616:	f06f 0301 	mvn.w	r3, #1
 801161a:	60fb      	str	r3, [r7, #12]
 801161c:	e012      	b.n	8011644 <VL53L3CX_SetAddress+0x3e>
  }
  else if (VL53LX_SetDeviceAddress(pObj, (uint8_t)Address) != VL53LX_ERROR_NONE)
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	b2db      	uxtb	r3, r3
 8011622:	4619      	mov	r1, r3
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f7f0 f9e7 	bl	80019f8 <VL53LX_SetDeviceAddress>
 801162a:	4603      	mov	r3, r0
 801162c:	2b00      	cmp	r3, #0
 801162e:	d003      	beq.n	8011638 <VL53L3CX_SetAddress+0x32>
  {
    ret = VL53L3CX_ERROR;
 8011630:	f04f 33ff 	mov.w	r3, #4294967295
 8011634:	60fb      	str	r3, [r7, #12]
 8011636:	e005      	b.n	8011644 <VL53L3CX_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	b29a      	uxth	r2, r3
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	811a      	strh	r2, [r3, #8]
    ret = VL53L3CX_OK;
 8011640:	2300      	movs	r3, #0
 8011642:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011644:	68fb      	ldr	r3, [r7, #12]
}
 8011646:	4618      	mov	r0, r3
 8011648:	3710      	adds	r7, #16
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}

0801164e <VL53L3CX_GetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetAddress(VL53L3CX_Object_t *pObj, uint32_t *pAddress)
{
 801164e:	b480      	push	{r7}
 8011650:	b085      	sub	sp, #20
 8011652:	af00      	add	r7, sp, #0
 8011654:	6078      	str	r0, [r7, #4]
 8011656:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d002      	beq.n	8011664 <VL53L3CX_GetAddress+0x16>
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d103      	bne.n	801166c <VL53L3CX_GetAddress+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011664:	f06f 0301 	mvn.w	r3, #1
 8011668:	60fb      	str	r3, [r7, #12]
 801166a:	e006      	b.n	801167a <VL53L3CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	891b      	ldrh	r3, [r3, #8]
 8011670:	461a      	mov	r2, r3
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	601a      	str	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8011676:	2300      	movs	r3, #0
 8011678:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801167a:	68fb      	ldr	r3, [r7, #12]
}
 801167c:	4618      	mov	r0, r3
 801167e:	3714      	adds	r7, #20
 8011680:	46bd      	mov	sp, r7
 8011682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011686:	4770      	bx	lr

08011688 <VL53L3CX_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetPowerMode(VL53L3CX_Object_t *pObj, uint32_t PowerMode)
{
 8011688:	b480      	push	{r7}
 801168a:	b083      	sub	sp, #12
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
 8011690:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 8011692:	f06f 0303 	mvn.w	r3, #3
}
 8011696:	4618      	mov	r0, r3
 8011698:	370c      	adds	r7, #12
 801169a:	46bd      	mov	sp, r7
 801169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a0:	4770      	bx	lr

080116a2 <VL53L3CX_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetPowerMode(VL53L3CX_Object_t *pObj, uint32_t *pPowerMode)
{
 80116a2:	b480      	push	{r7}
 80116a4:	b083      	sub	sp, #12
 80116a6:	af00      	add	r7, sp, #0
 80116a8:	6078      	str	r0, [r7, #4]
 80116aa:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 80116ac:	f06f 0303 	mvn.w	r3, #3
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	370c      	adds	r7, #12
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr

080116bc <vl53l3cx_poll_for_measurement>:
/** @defgroup VL53L3CX_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l3cx_poll_for_measurement(VL53L3CX_Object_t *pObj, uint32_t Timeout)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b084      	sub	sp, #16
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
 80116c4:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 80116c6:	2300      	movs	r3, #0
 80116c8:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d102      	bne.n	80116d6 <vl53l3cx_poll_for_measurement+0x1a>
  {
    return VL53L3CX_INVALID_PARAM;
 80116d0:	f06f 0301 	mvn.w	r3, #1
 80116d4:	e01b      	b.n	801170e <vl53l3cx_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	695b      	ldr	r3, [r3, #20]
 80116da:	4798      	blx	r3
 80116dc:	4603      	mov	r3, r0
 80116de:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53LX_GetMeasurementDataReady(pObj, &NewDataReady);
 80116e0:	f107 030b 	add.w	r3, r7, #11
 80116e4:	4619      	mov	r1, r3
 80116e6:	6878      	ldr	r0, [r7, #4]
 80116e8:	f7f0 fcb0 	bl	800204c <VL53LX_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 80116ec:	7afb      	ldrb	r3, [r7, #11]
 80116ee:	2b01      	cmp	r3, #1
 80116f0:	d101      	bne.n	80116f6 <vl53l3cx_poll_for_measurement+0x3a>
    {
      return VL53L3CX_OK;
 80116f2:	2300      	movs	r3, #0
 80116f4:	e00b      	b.n	801170e <vl53l3cx_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	695b      	ldr	r3, [r3, #20]
 80116fa:	4798      	blx	r3
 80116fc:	4603      	mov	r3, r0
 80116fe:	461a      	mov	r2, r3
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	1ad3      	subs	r3, r2, r3
 8011704:	683a      	ldr	r2, [r7, #0]
 8011706:	429a      	cmp	r2, r3
 8011708:	d8ea      	bhi.n	80116e0 <vl53l3cx_poll_for_measurement+0x24>

  return VL53L3CX_TIMEOUT;
 801170a:	f06f 0302 	mvn.w	r3, #2
}
 801170e:	4618      	mov	r0, r3
 8011710:	3710      	adds	r7, #16
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}
	...

08011718 <vl53l3cx_get_result>:

static int32_t vl53l3cx_get_result(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 8011718:	b590      	push	{r4, r7, lr}
 801171a:	b09f      	sub	sp, #124	; 0x7c
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53LX_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d002      	beq.n	801172e <vl53l3cx_get_result+0x16>
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d103      	bne.n	8011736 <vl53l3cx_get_result+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 801172e:	f06f 0301 	mvn.w	r3, #1
 8011732:	677b      	str	r3, [r7, #116]	; 0x74
 8011734:	e126      	b.n	8011984 <vl53l3cx_get_result+0x26c>
  }
  else if (VL53LX_GetMultiRangingData(pObj, &data) != VL53LX_ERROR_NONE)
 8011736:	f107 0308 	add.w	r3, r7, #8
 801173a:	4619      	mov	r1, r3
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f7f1 f858 	bl	80027f2 <VL53LX_GetMultiRangingData>
 8011742:	4603      	mov	r3, r0
 8011744:	2b00      	cmp	r3, #0
 8011746:	d003      	beq.n	8011750 <vl53l3cx_get_result+0x38>
  {
    ret = VL53L3CX_ERROR;
 8011748:	f04f 33ff 	mov.w	r3, #4294967295
 801174c:	677b      	str	r3, [r7, #116]	; 0x74
 801174e:	e119      	b.n	8011984 <vl53l3cx_get_result+0x26c>
  }
  else
  {
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 8011750:	2300      	movs	r3, #0
 8011752:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8011756:	e10b      	b.n	8011970 <vl53l3cx_get_result+0x258>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8011758:	7b7b      	ldrb	r3, [r7, #13]
 801175a:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 801175e:	4618      	mov	r0, r3
 8011760:	6839      	ldr	r1, [r7, #0]
 8011762:	4613      	mov	r3, r2
 8011764:	011b      	lsls	r3, r3, #4
 8011766:	4413      	add	r3, r2
 8011768:	009b      	lsls	r3, r3, #2
 801176a:	440b      	add	r3, r1
 801176c:	3304      	adds	r3, #4
 801176e:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8011770:	2300      	movs	r3, #0
 8011772:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8011776:	e0f0      	b.n	801195a <vl53l3cx_get_result+0x242>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8011778:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 801177c:	4613      	mov	r3, r2
 801177e:	009b      	lsls	r3, r3, #2
 8011780:	4413      	add	r3, r2
 8011782:	009b      	lsls	r3, r3, #2
 8011784:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011788:	4413      	add	r3, r2
 801178a:	3b58      	subs	r3, #88	; 0x58
 801178c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011790:	2b00      	cmp	r3, #0
 8011792:	da0d      	bge.n	80117b0 <vl53l3cx_get_result+0x98>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8011794:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011798:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 801179c:	6839      	ldr	r1, [r7, #0]
 801179e:	4613      	mov	r3, r2
 80117a0:	011b      	lsls	r3, r3, #4
 80117a2:	4413      	add	r3, r2
 80117a4:	4403      	add	r3, r0
 80117a6:	009b      	lsls	r3, r3, #2
 80117a8:	440b      	add	r3, r1
 80117aa:	2200      	movs	r2, #0
 80117ac:	609a      	str	r2, [r3, #8]
 80117ae:	e018      	b.n	80117e2 <vl53l3cx_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 80117b0:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80117b4:	4613      	mov	r3, r2
 80117b6:	009b      	lsls	r3, r3, #2
 80117b8:	4413      	add	r3, r2
 80117ba:	009b      	lsls	r3, r3, #2
 80117bc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80117c0:	4413      	add	r3, r2
 80117c2:	3b58      	subs	r3, #88	; 0x58
 80117c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80117c8:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80117cc:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 80117d0:	461c      	mov	r4, r3
 80117d2:	6839      	ldr	r1, [r7, #0]
 80117d4:	4613      	mov	r3, r2
 80117d6:	011b      	lsls	r3, r3, #4
 80117d8:	4413      	add	r3, r2
 80117da:	4403      	add	r3, r0
 80117dc:	009b      	lsls	r3, r3, #2
 80117de:	440b      	add	r3, r1
 80117e0:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117e8:	332c      	adds	r3, #44	; 0x2c
 80117ea:	781b      	ldrb	r3, [r3, #0]
 80117ec:	2b01      	cmp	r3, #1
 80117ee:	d137      	bne.n	8011860 <vl53l3cx_get_result+0x148>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 80117f0:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80117f4:	4613      	mov	r3, r2
 80117f6:	009b      	lsls	r3, r3, #2
 80117f8:	4413      	add	r3, r2
 80117fa:	009b      	lsls	r3, r3, #2
 80117fc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011800:	4413      	add	r3, r2
 8011802:	3b60      	subs	r3, #96	; 0x60
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	ee07 3a90 	vmov	s15, r3
 801180a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801180e:	eddf 6a60 	vldr	s13, [pc, #384]	; 8011990 <vl53l3cx_get_result+0x278>
 8011812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011816:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8011994 <vl53l3cx_get_result+0x27c>
 801181a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801181e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8011822:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011826:	0a1b      	lsrs	r3, r3, #8
 8011828:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 801182c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8011830:	ee07 3a90 	vmov	s15, r3
 8011834:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011838:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 801183c:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011840:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8011844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011848:	6839      	ldr	r1, [r7, #0]
 801184a:	4613      	mov	r3, r2
 801184c:	011b      	lsls	r3, r3, #4
 801184e:	4413      	add	r3, r2
 8011850:	4403      	add	r3, r0
 8011852:	3308      	adds	r3, #8
 8011854:	009b      	lsls	r3, r3, #2
 8011856:	440b      	add	r3, r1
 8011858:	3308      	adds	r3, #8
 801185a:	edc3 7a00 	vstr	s15, [r3]
 801185e:	e00f      	b.n	8011880 <vl53l3cx_get_result+0x168>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8011860:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011864:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011868:	6839      	ldr	r1, [r7, #0]
 801186a:	4613      	mov	r3, r2
 801186c:	011b      	lsls	r3, r3, #4
 801186e:	4413      	add	r3, r2
 8011870:	4403      	add	r3, r0
 8011872:	3308      	adds	r3, #8
 8011874:	009b      	lsls	r3, r3, #2
 8011876:	440b      	add	r3, r1
 8011878:	3308      	adds	r3, #8
 801187a:	f04f 0200 	mov.w	r2, #0
 801187e:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011886:	332d      	adds	r3, #45	; 0x2d
 8011888:	781b      	ldrb	r3, [r3, #0]
 801188a:	2b01      	cmp	r3, #1
 801188c:	d137      	bne.n	80118fe <vl53l3cx_get_result+0x1e6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 801188e:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011892:	4613      	mov	r3, r2
 8011894:	009b      	lsls	r3, r3, #2
 8011896:	4413      	add	r3, r2
 8011898:	009b      	lsls	r3, r3, #2
 801189a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801189e:	4413      	add	r3, r2
 80118a0:	3b64      	subs	r3, #100	; 0x64
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	ee07 3a90 	vmov	s15, r3
 80118a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80118ac:	eddf 6a38 	vldr	s13, [pc, #224]	; 8011990 <vl53l3cx_get_result+0x278>
 80118b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80118b4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8011994 <vl53l3cx_get_result+0x27c>
 80118b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80118bc:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80118c0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80118c4:	0a1b      	lsrs	r3, r3, #8
 80118c6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 80118ca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80118ce:	ee07 3a90 	vmov	s15, r3
 80118d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80118d6:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80118da:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 80118de:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80118e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80118e6:	6839      	ldr	r1, [r7, #0]
 80118e8:	4613      	mov	r3, r2
 80118ea:	011b      	lsls	r3, r3, #4
 80118ec:	4413      	add	r3, r2
 80118ee:	4403      	add	r3, r0
 80118f0:	330c      	adds	r3, #12
 80118f2:	009b      	lsls	r3, r3, #2
 80118f4:	440b      	add	r3, r1
 80118f6:	3308      	adds	r3, #8
 80118f8:	edc3 7a00 	vstr	s15, [r3]
 80118fc:	e00f      	b.n	801191e <vl53l3cx_get_result+0x206>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 80118fe:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011902:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011906:	6839      	ldr	r1, [r7, #0]
 8011908:	4613      	mov	r3, r2
 801190a:	011b      	lsls	r3, r3, #4
 801190c:	4413      	add	r3, r2
 801190e:	4403      	add	r3, r0
 8011910:	330c      	adds	r3, #12
 8011912:	009b      	lsls	r3, r3, #2
 8011914:	440b      	add	r3, r1
 8011916:	3308      	adds	r3, #8
 8011918:	f04f 0200 	mov.w	r2, #0
 801191c:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 801191e:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011922:	4613      	mov	r3, r2
 8011924:	009b      	lsls	r3, r3, #2
 8011926:	4413      	add	r3, r2
 8011928:	009b      	lsls	r3, r3, #2
 801192a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801192e:	4413      	add	r3, r2
 8011930:	3b56      	subs	r3, #86	; 0x56
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011938:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 801193c:	461c      	mov	r4, r3
 801193e:	6839      	ldr	r1, [r7, #0]
 8011940:	4613      	mov	r3, r2
 8011942:	011b      	lsls	r3, r3, #4
 8011944:	4413      	add	r3, r2
 8011946:	4403      	add	r3, r0
 8011948:	3304      	adds	r3, #4
 801194a:	009b      	lsls	r3, r3, #2
 801194c:	440b      	add	r3, r1
 801194e:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8011950:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8011954:	3301      	adds	r3, #1
 8011956:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 801195a:	7b7b      	ldrb	r3, [r7, #13]
 801195c:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011960:	429a      	cmp	r2, r3
 8011962:	f4ff af09 	bcc.w	8011778 <vl53l3cx_get_result+0x60>
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 8011966:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801196a:	3301      	adds	r3, #1
 801196c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8011970:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8011974:	2b00      	cmp	r3, #0
 8011976:	f43f aeef 	beq.w	8011758 <vl53l3cx_get_result+0x40>
      }
    }

    pResult->NumberOfZones = VL53L3CX_MAX_NB_ZONES;
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	2201      	movs	r2, #1
 801197e:	601a      	str	r2, [r3, #0]

    ret = VL53L3CX_OK;
 8011980:	2300      	movs	r3, #0
 8011982:	677b      	str	r3, [r7, #116]	; 0x74
  }

  return ret;
 8011984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8011986:	4618      	mov	r0, r3
 8011988:	377c      	adds	r7, #124	; 0x7c
 801198a:	46bd      	mov	sp, r7
 801198c:	bd90      	pop	{r4, r7, pc}
 801198e:	bf00      	nop
 8011990:	47800000 	.word	0x47800000
 8011994:	447a0000 	.word	0x447a0000

08011998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801199c:	4b0e      	ldr	r3, [pc, #56]	; (80119d8 <HAL_Init+0x40>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	4a0d      	ldr	r2, [pc, #52]	; (80119d8 <HAL_Init+0x40>)
 80119a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80119a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80119a8:	4b0b      	ldr	r3, [pc, #44]	; (80119d8 <HAL_Init+0x40>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	4a0a      	ldr	r2, [pc, #40]	; (80119d8 <HAL_Init+0x40>)
 80119ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80119b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80119b4:	4b08      	ldr	r3, [pc, #32]	; (80119d8 <HAL_Init+0x40>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	4a07      	ldr	r2, [pc, #28]	; (80119d8 <HAL_Init+0x40>)
 80119ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80119be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80119c0:	2003      	movs	r0, #3
 80119c2:	f000 f931 	bl	8011c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80119c6:	2000      	movs	r0, #0
 80119c8:	f000 f808 	bl	80119dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80119cc:	f7ef f8bc 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80119d0:	2300      	movs	r3, #0
}
 80119d2:	4618      	mov	r0, r3
 80119d4:	bd80      	pop	{r7, pc}
 80119d6:	bf00      	nop
 80119d8:	40023c00 	.word	0x40023c00

080119dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b082      	sub	sp, #8
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80119e4:	4b12      	ldr	r3, [pc, #72]	; (8011a30 <HAL_InitTick+0x54>)
 80119e6:	681a      	ldr	r2, [r3, #0]
 80119e8:	4b12      	ldr	r3, [pc, #72]	; (8011a34 <HAL_InitTick+0x58>)
 80119ea:	781b      	ldrb	r3, [r3, #0]
 80119ec:	4619      	mov	r1, r3
 80119ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80119f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80119f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80119fa:	4618      	mov	r0, r3
 80119fc:	f000 f93b 	bl	8011c76 <HAL_SYSTICK_Config>
 8011a00:	4603      	mov	r3, r0
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d001      	beq.n	8011a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8011a06:	2301      	movs	r3, #1
 8011a08:	e00e      	b.n	8011a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2b0f      	cmp	r3, #15
 8011a0e:	d80a      	bhi.n	8011a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011a10:	2200      	movs	r2, #0
 8011a12:	6879      	ldr	r1, [r7, #4]
 8011a14:	f04f 30ff 	mov.w	r0, #4294967295
 8011a18:	f000 f911 	bl	8011c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8011a1c:	4a06      	ldr	r2, [pc, #24]	; (8011a38 <HAL_InitTick+0x5c>)
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8011a22:	2300      	movs	r3, #0
 8011a24:	e000      	b.n	8011a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8011a26:	2301      	movs	r3, #1
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3708      	adds	r7, #8
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}
 8011a30:	20000010 	.word	0x20000010
 8011a34:	2000007c 	.word	0x2000007c
 8011a38:	20000078 	.word	0x20000078

08011a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011a3c:	b480      	push	{r7}
 8011a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011a40:	4b06      	ldr	r3, [pc, #24]	; (8011a5c <HAL_IncTick+0x20>)
 8011a42:	781b      	ldrb	r3, [r3, #0]
 8011a44:	461a      	mov	r2, r3
 8011a46:	4b06      	ldr	r3, [pc, #24]	; (8011a60 <HAL_IncTick+0x24>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	4413      	add	r3, r2
 8011a4c:	4a04      	ldr	r2, [pc, #16]	; (8011a60 <HAL_IncTick+0x24>)
 8011a4e:	6013      	str	r3, [r2, #0]
}
 8011a50:	bf00      	nop
 8011a52:	46bd      	mov	sp, r7
 8011a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a58:	4770      	bx	lr
 8011a5a:	bf00      	nop
 8011a5c:	2000007c 	.word	0x2000007c
 8011a60:	200072f4 	.word	0x200072f4

08011a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011a64:	b480      	push	{r7}
 8011a66:	af00      	add	r7, sp, #0
  return uwTick;
 8011a68:	4b03      	ldr	r3, [pc, #12]	; (8011a78 <HAL_GetTick+0x14>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a74:	4770      	bx	lr
 8011a76:	bf00      	nop
 8011a78:	200072f4 	.word	0x200072f4

08011a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b084      	sub	sp, #16
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011a84:	f7ff ffee 	bl	8011a64 <HAL_GetTick>
 8011a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a94:	d005      	beq.n	8011aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011a96:	4b0a      	ldr	r3, [pc, #40]	; (8011ac0 <HAL_Delay+0x44>)
 8011a98:	781b      	ldrb	r3, [r3, #0]
 8011a9a:	461a      	mov	r2, r3
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	4413      	add	r3, r2
 8011aa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8011aa2:	bf00      	nop
 8011aa4:	f7ff ffde 	bl	8011a64 <HAL_GetTick>
 8011aa8:	4602      	mov	r2, r0
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	1ad3      	subs	r3, r2, r3
 8011aae:	68fa      	ldr	r2, [r7, #12]
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d8f7      	bhi.n	8011aa4 <HAL_Delay+0x28>
  {
  }
}
 8011ab4:	bf00      	nop
 8011ab6:	bf00      	nop
 8011ab8:	3710      	adds	r7, #16
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
 8011abe:	bf00      	nop
 8011ac0:	2000007c 	.word	0x2000007c

08011ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011ac4:	b480      	push	{r7}
 8011ac6:	b085      	sub	sp, #20
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	f003 0307 	and.w	r3, r3, #7
 8011ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011ad4:	4b0c      	ldr	r3, [pc, #48]	; (8011b08 <__NVIC_SetPriorityGrouping+0x44>)
 8011ad6:	68db      	ldr	r3, [r3, #12]
 8011ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011ada:	68ba      	ldr	r2, [r7, #8]
 8011adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011ae0:	4013      	ands	r3, r2
 8011ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011af6:	4a04      	ldr	r2, [pc, #16]	; (8011b08 <__NVIC_SetPriorityGrouping+0x44>)
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	60d3      	str	r3, [r2, #12]
}
 8011afc:	bf00      	nop
 8011afe:	3714      	adds	r7, #20
 8011b00:	46bd      	mov	sp, r7
 8011b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b06:	4770      	bx	lr
 8011b08:	e000ed00 	.word	0xe000ed00

08011b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011b10:	4b04      	ldr	r3, [pc, #16]	; (8011b24 <__NVIC_GetPriorityGrouping+0x18>)
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	0a1b      	lsrs	r3, r3, #8
 8011b16:	f003 0307 	and.w	r3, r3, #7
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b22:	4770      	bx	lr
 8011b24:	e000ed00 	.word	0xe000ed00

08011b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011b28:	b480      	push	{r7}
 8011b2a:	b083      	sub	sp, #12
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	4603      	mov	r3, r0
 8011b30:	6039      	str	r1, [r7, #0]
 8011b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	db0a      	blt.n	8011b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	b2da      	uxtb	r2, r3
 8011b40:	490c      	ldr	r1, [pc, #48]	; (8011b74 <__NVIC_SetPriority+0x4c>)
 8011b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b46:	0112      	lsls	r2, r2, #4
 8011b48:	b2d2      	uxtb	r2, r2
 8011b4a:	440b      	add	r3, r1
 8011b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011b50:	e00a      	b.n	8011b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	b2da      	uxtb	r2, r3
 8011b56:	4908      	ldr	r1, [pc, #32]	; (8011b78 <__NVIC_SetPriority+0x50>)
 8011b58:	79fb      	ldrb	r3, [r7, #7]
 8011b5a:	f003 030f 	and.w	r3, r3, #15
 8011b5e:	3b04      	subs	r3, #4
 8011b60:	0112      	lsls	r2, r2, #4
 8011b62:	b2d2      	uxtb	r2, r2
 8011b64:	440b      	add	r3, r1
 8011b66:	761a      	strb	r2, [r3, #24]
}
 8011b68:	bf00      	nop
 8011b6a:	370c      	adds	r7, #12
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b72:	4770      	bx	lr
 8011b74:	e000e100 	.word	0xe000e100
 8011b78:	e000ed00 	.word	0xe000ed00

08011b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011b7c:	b480      	push	{r7}
 8011b7e:	b089      	sub	sp, #36	; 0x24
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	60f8      	str	r0, [r7, #12]
 8011b84:	60b9      	str	r1, [r7, #8]
 8011b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	f003 0307 	and.w	r3, r3, #7
 8011b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011b90:	69fb      	ldr	r3, [r7, #28]
 8011b92:	f1c3 0307 	rsb	r3, r3, #7
 8011b96:	2b04      	cmp	r3, #4
 8011b98:	bf28      	it	cs
 8011b9a:	2304      	movcs	r3, #4
 8011b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011b9e:	69fb      	ldr	r3, [r7, #28]
 8011ba0:	3304      	adds	r3, #4
 8011ba2:	2b06      	cmp	r3, #6
 8011ba4:	d902      	bls.n	8011bac <NVIC_EncodePriority+0x30>
 8011ba6:	69fb      	ldr	r3, [r7, #28]
 8011ba8:	3b03      	subs	r3, #3
 8011baa:	e000      	b.n	8011bae <NVIC_EncodePriority+0x32>
 8011bac:	2300      	movs	r3, #0
 8011bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8011bb4:	69bb      	ldr	r3, [r7, #24]
 8011bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8011bba:	43da      	mvns	r2, r3
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	401a      	ands	r2, r3
 8011bc0:	697b      	ldr	r3, [r7, #20]
 8011bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	fa01 f303 	lsl.w	r3, r1, r3
 8011bce:	43d9      	mvns	r1, r3
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011bd4:	4313      	orrs	r3, r2
         );
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3724      	adds	r7, #36	; 0x24
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be0:	4770      	bx	lr
	...

08011be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b082      	sub	sp, #8
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	3b01      	subs	r3, #1
 8011bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011bf4:	d301      	bcc.n	8011bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	e00f      	b.n	8011c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011bfa:	4a0a      	ldr	r2, [pc, #40]	; (8011c24 <SysTick_Config+0x40>)
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	3b01      	subs	r3, #1
 8011c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011c02:	210f      	movs	r1, #15
 8011c04:	f04f 30ff 	mov.w	r0, #4294967295
 8011c08:	f7ff ff8e 	bl	8011b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011c0c:	4b05      	ldr	r3, [pc, #20]	; (8011c24 <SysTick_Config+0x40>)
 8011c0e:	2200      	movs	r2, #0
 8011c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011c12:	4b04      	ldr	r3, [pc, #16]	; (8011c24 <SysTick_Config+0x40>)
 8011c14:	2207      	movs	r2, #7
 8011c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011c18:	2300      	movs	r3, #0
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3708      	adds	r7, #8
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}
 8011c22:	bf00      	nop
 8011c24:	e000e010 	.word	0xe000e010

08011c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b082      	sub	sp, #8
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f7ff ff47 	bl	8011ac4 <__NVIC_SetPriorityGrouping>
}
 8011c36:	bf00      	nop
 8011c38:	3708      	adds	r7, #8
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b086      	sub	sp, #24
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	4603      	mov	r3, r0
 8011c46:	60b9      	str	r1, [r7, #8]
 8011c48:	607a      	str	r2, [r7, #4]
 8011c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011c50:	f7ff ff5c 	bl	8011b0c <__NVIC_GetPriorityGrouping>
 8011c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011c56:	687a      	ldr	r2, [r7, #4]
 8011c58:	68b9      	ldr	r1, [r7, #8]
 8011c5a:	6978      	ldr	r0, [r7, #20]
 8011c5c:	f7ff ff8e 	bl	8011b7c <NVIC_EncodePriority>
 8011c60:	4602      	mov	r2, r0
 8011c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c66:	4611      	mov	r1, r2
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7ff ff5d 	bl	8011b28 <__NVIC_SetPriority>
}
 8011c6e:	bf00      	nop
 8011c70:	3718      	adds	r7, #24
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}

08011c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011c76:	b580      	push	{r7, lr}
 8011c78:	b082      	sub	sp, #8
 8011c7a:	af00      	add	r7, sp, #0
 8011c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f7ff ffb0 	bl	8011be4 <SysTick_Config>
 8011c84:	4603      	mov	r3, r0
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3708      	adds	r7, #8
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}
	...

08011c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011c90:	b480      	push	{r7}
 8011c92:	b089      	sub	sp, #36	; 0x24
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	61fb      	str	r3, [r7, #28]
 8011caa:	e159      	b.n	8011f60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011cac:	2201      	movs	r2, #1
 8011cae:	69fb      	ldr	r3, [r7, #28]
 8011cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8011cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	697a      	ldr	r2, [r7, #20]
 8011cbc:	4013      	ands	r3, r2
 8011cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011cc0:	693a      	ldr	r2, [r7, #16]
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	429a      	cmp	r2, r3
 8011cc6:	f040 8148 	bne.w	8011f5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	685b      	ldr	r3, [r3, #4]
 8011cce:	f003 0303 	and.w	r3, r3, #3
 8011cd2:	2b01      	cmp	r3, #1
 8011cd4:	d005      	beq.n	8011ce2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	685b      	ldr	r3, [r3, #4]
 8011cda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011cde:	2b02      	cmp	r3, #2
 8011ce0:	d130      	bne.n	8011d44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	689b      	ldr	r3, [r3, #8]
 8011ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011ce8:	69fb      	ldr	r3, [r7, #28]
 8011cea:	005b      	lsls	r3, r3, #1
 8011cec:	2203      	movs	r2, #3
 8011cee:	fa02 f303 	lsl.w	r3, r2, r3
 8011cf2:	43db      	mvns	r3, r3
 8011cf4:	69ba      	ldr	r2, [r7, #24]
 8011cf6:	4013      	ands	r3, r2
 8011cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	68da      	ldr	r2, [r3, #12]
 8011cfe:	69fb      	ldr	r3, [r7, #28]
 8011d00:	005b      	lsls	r3, r3, #1
 8011d02:	fa02 f303 	lsl.w	r3, r2, r3
 8011d06:	69ba      	ldr	r2, [r7, #24]
 8011d08:	4313      	orrs	r3, r2
 8011d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	69ba      	ldr	r2, [r7, #24]
 8011d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	685b      	ldr	r3, [r3, #4]
 8011d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011d18:	2201      	movs	r2, #1
 8011d1a:	69fb      	ldr	r3, [r7, #28]
 8011d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8011d20:	43db      	mvns	r3, r3
 8011d22:	69ba      	ldr	r2, [r7, #24]
 8011d24:	4013      	ands	r3, r2
 8011d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	685b      	ldr	r3, [r3, #4]
 8011d2c:	091b      	lsrs	r3, r3, #4
 8011d2e:	f003 0201 	and.w	r2, r3, #1
 8011d32:	69fb      	ldr	r3, [r7, #28]
 8011d34:	fa02 f303 	lsl.w	r3, r2, r3
 8011d38:	69ba      	ldr	r2, [r7, #24]
 8011d3a:	4313      	orrs	r3, r2
 8011d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	69ba      	ldr	r2, [r7, #24]
 8011d42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	f003 0303 	and.w	r3, r3, #3
 8011d4c:	2b03      	cmp	r3, #3
 8011d4e:	d017      	beq.n	8011d80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011d56:	69fb      	ldr	r3, [r7, #28]
 8011d58:	005b      	lsls	r3, r3, #1
 8011d5a:	2203      	movs	r2, #3
 8011d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8011d60:	43db      	mvns	r3, r3
 8011d62:	69ba      	ldr	r2, [r7, #24]
 8011d64:	4013      	ands	r3, r2
 8011d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	689a      	ldr	r2, [r3, #8]
 8011d6c:	69fb      	ldr	r3, [r7, #28]
 8011d6e:	005b      	lsls	r3, r3, #1
 8011d70:	fa02 f303 	lsl.w	r3, r2, r3
 8011d74:	69ba      	ldr	r2, [r7, #24]
 8011d76:	4313      	orrs	r3, r2
 8011d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	69ba      	ldr	r2, [r7, #24]
 8011d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	685b      	ldr	r3, [r3, #4]
 8011d84:	f003 0303 	and.w	r3, r3, #3
 8011d88:	2b02      	cmp	r3, #2
 8011d8a:	d123      	bne.n	8011dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011d8c:	69fb      	ldr	r3, [r7, #28]
 8011d8e:	08da      	lsrs	r2, r3, #3
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	3208      	adds	r2, #8
 8011d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011d9a:	69fb      	ldr	r3, [r7, #28]
 8011d9c:	f003 0307 	and.w	r3, r3, #7
 8011da0:	009b      	lsls	r3, r3, #2
 8011da2:	220f      	movs	r2, #15
 8011da4:	fa02 f303 	lsl.w	r3, r2, r3
 8011da8:	43db      	mvns	r3, r3
 8011daa:	69ba      	ldr	r2, [r7, #24]
 8011dac:	4013      	ands	r3, r2
 8011dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	691a      	ldr	r2, [r3, #16]
 8011db4:	69fb      	ldr	r3, [r7, #28]
 8011db6:	f003 0307 	and.w	r3, r3, #7
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8011dc0:	69ba      	ldr	r2, [r7, #24]
 8011dc2:	4313      	orrs	r3, r2
 8011dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011dc6:	69fb      	ldr	r3, [r7, #28]
 8011dc8:	08da      	lsrs	r2, r3, #3
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	3208      	adds	r2, #8
 8011dce:	69b9      	ldr	r1, [r7, #24]
 8011dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011dda:	69fb      	ldr	r3, [r7, #28]
 8011ddc:	005b      	lsls	r3, r3, #1
 8011dde:	2203      	movs	r2, #3
 8011de0:	fa02 f303 	lsl.w	r3, r2, r3
 8011de4:	43db      	mvns	r3, r3
 8011de6:	69ba      	ldr	r2, [r7, #24]
 8011de8:	4013      	ands	r3, r2
 8011dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	685b      	ldr	r3, [r3, #4]
 8011df0:	f003 0203 	and.w	r2, r3, #3
 8011df4:	69fb      	ldr	r3, [r7, #28]
 8011df6:	005b      	lsls	r3, r3, #1
 8011df8:	fa02 f303 	lsl.w	r3, r2, r3
 8011dfc:	69ba      	ldr	r2, [r7, #24]
 8011dfe:	4313      	orrs	r3, r2
 8011e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	69ba      	ldr	r2, [r7, #24]
 8011e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	685b      	ldr	r3, [r3, #4]
 8011e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	f000 80a2 	beq.w	8011f5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011e16:	2300      	movs	r3, #0
 8011e18:	60fb      	str	r3, [r7, #12]
 8011e1a:	4b57      	ldr	r3, [pc, #348]	; (8011f78 <HAL_GPIO_Init+0x2e8>)
 8011e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e1e:	4a56      	ldr	r2, [pc, #344]	; (8011f78 <HAL_GPIO_Init+0x2e8>)
 8011e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011e24:	6453      	str	r3, [r2, #68]	; 0x44
 8011e26:	4b54      	ldr	r3, [pc, #336]	; (8011f78 <HAL_GPIO_Init+0x2e8>)
 8011e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011e2e:	60fb      	str	r3, [r7, #12]
 8011e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8011e32:	4a52      	ldr	r2, [pc, #328]	; (8011f7c <HAL_GPIO_Init+0x2ec>)
 8011e34:	69fb      	ldr	r3, [r7, #28]
 8011e36:	089b      	lsrs	r3, r3, #2
 8011e38:	3302      	adds	r3, #2
 8011e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8011e40:	69fb      	ldr	r3, [r7, #28]
 8011e42:	f003 0303 	and.w	r3, r3, #3
 8011e46:	009b      	lsls	r3, r3, #2
 8011e48:	220f      	movs	r2, #15
 8011e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8011e4e:	43db      	mvns	r3, r3
 8011e50:	69ba      	ldr	r2, [r7, #24]
 8011e52:	4013      	ands	r3, r2
 8011e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	4a49      	ldr	r2, [pc, #292]	; (8011f80 <HAL_GPIO_Init+0x2f0>)
 8011e5a:	4293      	cmp	r3, r2
 8011e5c:	d019      	beq.n	8011e92 <HAL_GPIO_Init+0x202>
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	4a48      	ldr	r2, [pc, #288]	; (8011f84 <HAL_GPIO_Init+0x2f4>)
 8011e62:	4293      	cmp	r3, r2
 8011e64:	d013      	beq.n	8011e8e <HAL_GPIO_Init+0x1fe>
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	4a47      	ldr	r2, [pc, #284]	; (8011f88 <HAL_GPIO_Init+0x2f8>)
 8011e6a:	4293      	cmp	r3, r2
 8011e6c:	d00d      	beq.n	8011e8a <HAL_GPIO_Init+0x1fa>
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	4a46      	ldr	r2, [pc, #280]	; (8011f8c <HAL_GPIO_Init+0x2fc>)
 8011e72:	4293      	cmp	r3, r2
 8011e74:	d007      	beq.n	8011e86 <HAL_GPIO_Init+0x1f6>
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	4a45      	ldr	r2, [pc, #276]	; (8011f90 <HAL_GPIO_Init+0x300>)
 8011e7a:	4293      	cmp	r3, r2
 8011e7c:	d101      	bne.n	8011e82 <HAL_GPIO_Init+0x1f2>
 8011e7e:	2304      	movs	r3, #4
 8011e80:	e008      	b.n	8011e94 <HAL_GPIO_Init+0x204>
 8011e82:	2307      	movs	r3, #7
 8011e84:	e006      	b.n	8011e94 <HAL_GPIO_Init+0x204>
 8011e86:	2303      	movs	r3, #3
 8011e88:	e004      	b.n	8011e94 <HAL_GPIO_Init+0x204>
 8011e8a:	2302      	movs	r3, #2
 8011e8c:	e002      	b.n	8011e94 <HAL_GPIO_Init+0x204>
 8011e8e:	2301      	movs	r3, #1
 8011e90:	e000      	b.n	8011e94 <HAL_GPIO_Init+0x204>
 8011e92:	2300      	movs	r3, #0
 8011e94:	69fa      	ldr	r2, [r7, #28]
 8011e96:	f002 0203 	and.w	r2, r2, #3
 8011e9a:	0092      	lsls	r2, r2, #2
 8011e9c:	4093      	lsls	r3, r2
 8011e9e:	69ba      	ldr	r2, [r7, #24]
 8011ea0:	4313      	orrs	r3, r2
 8011ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011ea4:	4935      	ldr	r1, [pc, #212]	; (8011f7c <HAL_GPIO_Init+0x2ec>)
 8011ea6:	69fb      	ldr	r3, [r7, #28]
 8011ea8:	089b      	lsrs	r3, r3, #2
 8011eaa:	3302      	adds	r3, #2
 8011eac:	69ba      	ldr	r2, [r7, #24]
 8011eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011eb2:	4b38      	ldr	r3, [pc, #224]	; (8011f94 <HAL_GPIO_Init+0x304>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011eb8:	693b      	ldr	r3, [r7, #16]
 8011eba:	43db      	mvns	r3, r3
 8011ebc:	69ba      	ldr	r2, [r7, #24]
 8011ebe:	4013      	ands	r3, r2
 8011ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	685b      	ldr	r3, [r3, #4]
 8011ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d003      	beq.n	8011ed6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8011ece:	69ba      	ldr	r2, [r7, #24]
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	4313      	orrs	r3, r2
 8011ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8011ed6:	4a2f      	ldr	r2, [pc, #188]	; (8011f94 <HAL_GPIO_Init+0x304>)
 8011ed8:	69bb      	ldr	r3, [r7, #24]
 8011eda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8011edc:	4b2d      	ldr	r3, [pc, #180]	; (8011f94 <HAL_GPIO_Init+0x304>)
 8011ede:	685b      	ldr	r3, [r3, #4]
 8011ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	43db      	mvns	r3, r3
 8011ee6:	69ba      	ldr	r2, [r7, #24]
 8011ee8:	4013      	ands	r3, r2
 8011eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	685b      	ldr	r3, [r3, #4]
 8011ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d003      	beq.n	8011f00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8011ef8:	69ba      	ldr	r2, [r7, #24]
 8011efa:	693b      	ldr	r3, [r7, #16]
 8011efc:	4313      	orrs	r3, r2
 8011efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8011f00:	4a24      	ldr	r2, [pc, #144]	; (8011f94 <HAL_GPIO_Init+0x304>)
 8011f02:	69bb      	ldr	r3, [r7, #24]
 8011f04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011f06:	4b23      	ldr	r3, [pc, #140]	; (8011f94 <HAL_GPIO_Init+0x304>)
 8011f08:	689b      	ldr	r3, [r3, #8]
 8011f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011f0c:	693b      	ldr	r3, [r7, #16]
 8011f0e:	43db      	mvns	r3, r3
 8011f10:	69ba      	ldr	r2, [r7, #24]
 8011f12:	4013      	ands	r3, r2
 8011f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d003      	beq.n	8011f2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8011f22:	69ba      	ldr	r2, [r7, #24]
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	4313      	orrs	r3, r2
 8011f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8011f2a:	4a1a      	ldr	r2, [pc, #104]	; (8011f94 <HAL_GPIO_Init+0x304>)
 8011f2c:	69bb      	ldr	r3, [r7, #24]
 8011f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011f30:	4b18      	ldr	r3, [pc, #96]	; (8011f94 <HAL_GPIO_Init+0x304>)
 8011f32:	68db      	ldr	r3, [r3, #12]
 8011f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011f36:	693b      	ldr	r3, [r7, #16]
 8011f38:	43db      	mvns	r3, r3
 8011f3a:	69ba      	ldr	r2, [r7, #24]
 8011f3c:	4013      	ands	r3, r2
 8011f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	685b      	ldr	r3, [r3, #4]
 8011f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d003      	beq.n	8011f54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8011f4c:	69ba      	ldr	r2, [r7, #24]
 8011f4e:	693b      	ldr	r3, [r7, #16]
 8011f50:	4313      	orrs	r3, r2
 8011f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011f54:	4a0f      	ldr	r2, [pc, #60]	; (8011f94 <HAL_GPIO_Init+0x304>)
 8011f56:	69bb      	ldr	r3, [r7, #24]
 8011f58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011f5a:	69fb      	ldr	r3, [r7, #28]
 8011f5c:	3301      	adds	r3, #1
 8011f5e:	61fb      	str	r3, [r7, #28]
 8011f60:	69fb      	ldr	r3, [r7, #28]
 8011f62:	2b0f      	cmp	r3, #15
 8011f64:	f67f aea2 	bls.w	8011cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011f68:	bf00      	nop
 8011f6a:	bf00      	nop
 8011f6c:	3724      	adds	r7, #36	; 0x24
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f74:	4770      	bx	lr
 8011f76:	bf00      	nop
 8011f78:	40023800 	.word	0x40023800
 8011f7c:	40013800 	.word	0x40013800
 8011f80:	40020000 	.word	0x40020000
 8011f84:	40020400 	.word	0x40020400
 8011f88:	40020800 	.word	0x40020800
 8011f8c:	40020c00 	.word	0x40020c00
 8011f90:	40021000 	.word	0x40021000
 8011f94:	40013c00 	.word	0x40013c00

08011f98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011f98:	b480      	push	{r7}
 8011f9a:	b087      	sub	sp, #28
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8011faa:	2300      	movs	r3, #0
 8011fac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011fae:	2300      	movs	r3, #0
 8011fb0:	617b      	str	r3, [r7, #20]
 8011fb2:	e0bb      	b.n	801212c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011fb4:	2201      	movs	r2, #1
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8011fbc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8011fbe:	683a      	ldr	r2, [r7, #0]
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	4013      	ands	r3, r2
 8011fc4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8011fc6:	68fa      	ldr	r2, [r7, #12]
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	f040 80ab 	bne.w	8012126 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8011fd0:	4a5c      	ldr	r2, [pc, #368]	; (8012144 <HAL_GPIO_DeInit+0x1ac>)
 8011fd2:	697b      	ldr	r3, [r7, #20]
 8011fd4:	089b      	lsrs	r3, r3, #2
 8011fd6:	3302      	adds	r3, #2
 8011fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011fdc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	f003 0303 	and.w	r3, r3, #3
 8011fe4:	009b      	lsls	r3, r3, #2
 8011fe6:	220f      	movs	r2, #15
 8011fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8011fec:	68ba      	ldr	r2, [r7, #8]
 8011fee:	4013      	ands	r3, r2
 8011ff0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	4a54      	ldr	r2, [pc, #336]	; (8012148 <HAL_GPIO_DeInit+0x1b0>)
 8011ff6:	4293      	cmp	r3, r2
 8011ff8:	d019      	beq.n	801202e <HAL_GPIO_DeInit+0x96>
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	4a53      	ldr	r2, [pc, #332]	; (801214c <HAL_GPIO_DeInit+0x1b4>)
 8011ffe:	4293      	cmp	r3, r2
 8012000:	d013      	beq.n	801202a <HAL_GPIO_DeInit+0x92>
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	4a52      	ldr	r2, [pc, #328]	; (8012150 <HAL_GPIO_DeInit+0x1b8>)
 8012006:	4293      	cmp	r3, r2
 8012008:	d00d      	beq.n	8012026 <HAL_GPIO_DeInit+0x8e>
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	4a51      	ldr	r2, [pc, #324]	; (8012154 <HAL_GPIO_DeInit+0x1bc>)
 801200e:	4293      	cmp	r3, r2
 8012010:	d007      	beq.n	8012022 <HAL_GPIO_DeInit+0x8a>
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	4a50      	ldr	r2, [pc, #320]	; (8012158 <HAL_GPIO_DeInit+0x1c0>)
 8012016:	4293      	cmp	r3, r2
 8012018:	d101      	bne.n	801201e <HAL_GPIO_DeInit+0x86>
 801201a:	2304      	movs	r3, #4
 801201c:	e008      	b.n	8012030 <HAL_GPIO_DeInit+0x98>
 801201e:	2307      	movs	r3, #7
 8012020:	e006      	b.n	8012030 <HAL_GPIO_DeInit+0x98>
 8012022:	2303      	movs	r3, #3
 8012024:	e004      	b.n	8012030 <HAL_GPIO_DeInit+0x98>
 8012026:	2302      	movs	r3, #2
 8012028:	e002      	b.n	8012030 <HAL_GPIO_DeInit+0x98>
 801202a:	2301      	movs	r3, #1
 801202c:	e000      	b.n	8012030 <HAL_GPIO_DeInit+0x98>
 801202e:	2300      	movs	r3, #0
 8012030:	697a      	ldr	r2, [r7, #20]
 8012032:	f002 0203 	and.w	r2, r2, #3
 8012036:	0092      	lsls	r2, r2, #2
 8012038:	4093      	lsls	r3, r2
 801203a:	68ba      	ldr	r2, [r7, #8]
 801203c:	429a      	cmp	r2, r3
 801203e:	d132      	bne.n	80120a6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8012040:	4b46      	ldr	r3, [pc, #280]	; (801215c <HAL_GPIO_DeInit+0x1c4>)
 8012042:	681a      	ldr	r2, [r3, #0]
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	43db      	mvns	r3, r3
 8012048:	4944      	ldr	r1, [pc, #272]	; (801215c <HAL_GPIO_DeInit+0x1c4>)
 801204a:	4013      	ands	r3, r2
 801204c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801204e:	4b43      	ldr	r3, [pc, #268]	; (801215c <HAL_GPIO_DeInit+0x1c4>)
 8012050:	685a      	ldr	r2, [r3, #4]
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	43db      	mvns	r3, r3
 8012056:	4941      	ldr	r1, [pc, #260]	; (801215c <HAL_GPIO_DeInit+0x1c4>)
 8012058:	4013      	ands	r3, r2
 801205a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801205c:	4b3f      	ldr	r3, [pc, #252]	; (801215c <HAL_GPIO_DeInit+0x1c4>)
 801205e:	689a      	ldr	r2, [r3, #8]
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	43db      	mvns	r3, r3
 8012064:	493d      	ldr	r1, [pc, #244]	; (801215c <HAL_GPIO_DeInit+0x1c4>)
 8012066:	4013      	ands	r3, r2
 8012068:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801206a:	4b3c      	ldr	r3, [pc, #240]	; (801215c <HAL_GPIO_DeInit+0x1c4>)
 801206c:	68da      	ldr	r2, [r3, #12]
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	43db      	mvns	r3, r3
 8012072:	493a      	ldr	r1, [pc, #232]	; (801215c <HAL_GPIO_DeInit+0x1c4>)
 8012074:	4013      	ands	r3, r2
 8012076:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	f003 0303 	and.w	r3, r3, #3
 801207e:	009b      	lsls	r3, r3, #2
 8012080:	220f      	movs	r2, #15
 8012082:	fa02 f303 	lsl.w	r3, r2, r3
 8012086:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8012088:	4a2e      	ldr	r2, [pc, #184]	; (8012144 <HAL_GPIO_DeInit+0x1ac>)
 801208a:	697b      	ldr	r3, [r7, #20]
 801208c:	089b      	lsrs	r3, r3, #2
 801208e:	3302      	adds	r3, #2
 8012090:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	43da      	mvns	r2, r3
 8012098:	482a      	ldr	r0, [pc, #168]	; (8012144 <HAL_GPIO_DeInit+0x1ac>)
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	089b      	lsrs	r3, r3, #2
 801209e:	400a      	ands	r2, r1
 80120a0:	3302      	adds	r3, #2
 80120a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681a      	ldr	r2, [r3, #0]
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	005b      	lsls	r3, r3, #1
 80120ae:	2103      	movs	r1, #3
 80120b0:	fa01 f303 	lsl.w	r3, r1, r3
 80120b4:	43db      	mvns	r3, r3
 80120b6:	401a      	ands	r2, r3
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	08da      	lsrs	r2, r3, #3
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	3208      	adds	r2, #8
 80120c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80120c8:	697b      	ldr	r3, [r7, #20]
 80120ca:	f003 0307 	and.w	r3, r3, #7
 80120ce:	009b      	lsls	r3, r3, #2
 80120d0:	220f      	movs	r2, #15
 80120d2:	fa02 f303 	lsl.w	r3, r2, r3
 80120d6:	43db      	mvns	r3, r3
 80120d8:	697a      	ldr	r2, [r7, #20]
 80120da:	08d2      	lsrs	r2, r2, #3
 80120dc:	4019      	ands	r1, r3
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	3208      	adds	r2, #8
 80120e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	68da      	ldr	r2, [r3, #12]
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	005b      	lsls	r3, r3, #1
 80120ee:	2103      	movs	r1, #3
 80120f0:	fa01 f303 	lsl.w	r3, r1, r3
 80120f4:	43db      	mvns	r3, r3
 80120f6:	401a      	ands	r2, r3
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	685a      	ldr	r2, [r3, #4]
 8012100:	2101      	movs	r1, #1
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	fa01 f303 	lsl.w	r3, r1, r3
 8012108:	43db      	mvns	r3, r3
 801210a:	401a      	ands	r2, r3
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	689a      	ldr	r2, [r3, #8]
 8012114:	697b      	ldr	r3, [r7, #20]
 8012116:	005b      	lsls	r3, r3, #1
 8012118:	2103      	movs	r1, #3
 801211a:	fa01 f303 	lsl.w	r3, r1, r3
 801211e:	43db      	mvns	r3, r3
 8012120:	401a      	ands	r2, r3
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	3301      	adds	r3, #1
 801212a:	617b      	str	r3, [r7, #20]
 801212c:	697b      	ldr	r3, [r7, #20]
 801212e:	2b0f      	cmp	r3, #15
 8012130:	f67f af40 	bls.w	8011fb4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8012134:	bf00      	nop
 8012136:	bf00      	nop
 8012138:	371c      	adds	r7, #28
 801213a:	46bd      	mov	sp, r7
 801213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012140:	4770      	bx	lr
 8012142:	bf00      	nop
 8012144:	40013800 	.word	0x40013800
 8012148:	40020000 	.word	0x40020000
 801214c:	40020400 	.word	0x40020400
 8012150:	40020800 	.word	0x40020800
 8012154:	40020c00 	.word	0x40020c00
 8012158:	40021000 	.word	0x40021000
 801215c:	40013c00 	.word	0x40013c00

08012160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012160:	b480      	push	{r7}
 8012162:	b085      	sub	sp, #20
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	460b      	mov	r3, r1
 801216a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	691a      	ldr	r2, [r3, #16]
 8012170:	887b      	ldrh	r3, [r7, #2]
 8012172:	4013      	ands	r3, r2
 8012174:	2b00      	cmp	r3, #0
 8012176:	d002      	beq.n	801217e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012178:	2301      	movs	r3, #1
 801217a:	73fb      	strb	r3, [r7, #15]
 801217c:	e001      	b.n	8012182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801217e:	2300      	movs	r3, #0
 8012180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012182:	7bfb      	ldrb	r3, [r7, #15]
}
 8012184:	4618      	mov	r0, r3
 8012186:	3714      	adds	r7, #20
 8012188:	46bd      	mov	sp, r7
 801218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218e:	4770      	bx	lr

08012190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012190:	b480      	push	{r7}
 8012192:	b083      	sub	sp, #12
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	460b      	mov	r3, r1
 801219a:	807b      	strh	r3, [r7, #2]
 801219c:	4613      	mov	r3, r2
 801219e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80121a0:	787b      	ldrb	r3, [r7, #1]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d003      	beq.n	80121ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80121a6:	887a      	ldrh	r2, [r7, #2]
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80121ac:	e003      	b.n	80121b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80121ae:	887b      	ldrh	r3, [r7, #2]
 80121b0:	041a      	lsls	r2, r3, #16
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	619a      	str	r2, [r3, #24]
}
 80121b6:	bf00      	nop
 80121b8:	370c      	adds	r7, #12
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr
	...

080121c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b084      	sub	sp, #16
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d101      	bne.n	80121d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80121d2:	2301      	movs	r3, #1
 80121d4:	e12b      	b.n	801242e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80121dc:	b2db      	uxtb	r3, r3
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d106      	bne.n	80121f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2200      	movs	r2, #0
 80121e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f000 f95d 	bl	80124aa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2224      	movs	r2, #36	; 0x24
 80121f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	681a      	ldr	r2, [r3, #0]
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	f022 0201 	bic.w	r2, r2, #1
 8012206:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	681a      	ldr	r2, [r3, #0]
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	681a      	ldr	r2, [r3, #0]
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8012228:	f001 fc0c 	bl	8013a44 <HAL_RCC_GetPCLK1Freq>
 801222c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	685b      	ldr	r3, [r3, #4]
 8012232:	4a81      	ldr	r2, [pc, #516]	; (8012438 <HAL_I2C_Init+0x274>)
 8012234:	4293      	cmp	r3, r2
 8012236:	d807      	bhi.n	8012248 <HAL_I2C_Init+0x84>
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	4a80      	ldr	r2, [pc, #512]	; (801243c <HAL_I2C_Init+0x278>)
 801223c:	4293      	cmp	r3, r2
 801223e:	bf94      	ite	ls
 8012240:	2301      	movls	r3, #1
 8012242:	2300      	movhi	r3, #0
 8012244:	b2db      	uxtb	r3, r3
 8012246:	e006      	b.n	8012256 <HAL_I2C_Init+0x92>
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	4a7d      	ldr	r2, [pc, #500]	; (8012440 <HAL_I2C_Init+0x27c>)
 801224c:	4293      	cmp	r3, r2
 801224e:	bf94      	ite	ls
 8012250:	2301      	movls	r3, #1
 8012252:	2300      	movhi	r3, #0
 8012254:	b2db      	uxtb	r3, r3
 8012256:	2b00      	cmp	r3, #0
 8012258:	d001      	beq.n	801225e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801225a:	2301      	movs	r3, #1
 801225c:	e0e7      	b.n	801242e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	4a78      	ldr	r2, [pc, #480]	; (8012444 <HAL_I2C_Init+0x280>)
 8012262:	fba2 2303 	umull	r2, r3, r2, r3
 8012266:	0c9b      	lsrs	r3, r3, #18
 8012268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	685b      	ldr	r3, [r3, #4]
 8012270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	68ba      	ldr	r2, [r7, #8]
 801227a:	430a      	orrs	r2, r1
 801227c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	6a1b      	ldr	r3, [r3, #32]
 8012284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	685b      	ldr	r3, [r3, #4]
 801228c:	4a6a      	ldr	r2, [pc, #424]	; (8012438 <HAL_I2C_Init+0x274>)
 801228e:	4293      	cmp	r3, r2
 8012290:	d802      	bhi.n	8012298 <HAL_I2C_Init+0xd4>
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	3301      	adds	r3, #1
 8012296:	e009      	b.n	80122ac <HAL_I2C_Init+0xe8>
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801229e:	fb02 f303 	mul.w	r3, r2, r3
 80122a2:	4a69      	ldr	r2, [pc, #420]	; (8012448 <HAL_I2C_Init+0x284>)
 80122a4:	fba2 2303 	umull	r2, r3, r2, r3
 80122a8:	099b      	lsrs	r3, r3, #6
 80122aa:	3301      	adds	r3, #1
 80122ac:	687a      	ldr	r2, [r7, #4]
 80122ae:	6812      	ldr	r2, [r2, #0]
 80122b0:	430b      	orrs	r3, r1
 80122b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	69db      	ldr	r3, [r3, #28]
 80122ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80122be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	685b      	ldr	r3, [r3, #4]
 80122c6:	495c      	ldr	r1, [pc, #368]	; (8012438 <HAL_I2C_Init+0x274>)
 80122c8:	428b      	cmp	r3, r1
 80122ca:	d819      	bhi.n	8012300 <HAL_I2C_Init+0x13c>
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	1e59      	subs	r1, r3, #1
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	005b      	lsls	r3, r3, #1
 80122d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80122da:	1c59      	adds	r1, r3, #1
 80122dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80122e0:	400b      	ands	r3, r1
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d00a      	beq.n	80122fc <HAL_I2C_Init+0x138>
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	1e59      	subs	r1, r3, #1
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	685b      	ldr	r3, [r3, #4]
 80122ee:	005b      	lsls	r3, r3, #1
 80122f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80122f4:	3301      	adds	r3, #1
 80122f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80122fa:	e051      	b.n	80123a0 <HAL_I2C_Init+0x1dc>
 80122fc:	2304      	movs	r3, #4
 80122fe:	e04f      	b.n	80123a0 <HAL_I2C_Init+0x1dc>
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	689b      	ldr	r3, [r3, #8]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d111      	bne.n	801232c <HAL_I2C_Init+0x168>
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	1e58      	subs	r0, r3, #1
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	6859      	ldr	r1, [r3, #4]
 8012310:	460b      	mov	r3, r1
 8012312:	005b      	lsls	r3, r3, #1
 8012314:	440b      	add	r3, r1
 8012316:	fbb0 f3f3 	udiv	r3, r0, r3
 801231a:	3301      	adds	r3, #1
 801231c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012320:	2b00      	cmp	r3, #0
 8012322:	bf0c      	ite	eq
 8012324:	2301      	moveq	r3, #1
 8012326:	2300      	movne	r3, #0
 8012328:	b2db      	uxtb	r3, r3
 801232a:	e012      	b.n	8012352 <HAL_I2C_Init+0x18e>
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	1e58      	subs	r0, r3, #1
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	6859      	ldr	r1, [r3, #4]
 8012334:	460b      	mov	r3, r1
 8012336:	009b      	lsls	r3, r3, #2
 8012338:	440b      	add	r3, r1
 801233a:	0099      	lsls	r1, r3, #2
 801233c:	440b      	add	r3, r1
 801233e:	fbb0 f3f3 	udiv	r3, r0, r3
 8012342:	3301      	adds	r3, #1
 8012344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012348:	2b00      	cmp	r3, #0
 801234a:	bf0c      	ite	eq
 801234c:	2301      	moveq	r3, #1
 801234e:	2300      	movne	r3, #0
 8012350:	b2db      	uxtb	r3, r3
 8012352:	2b00      	cmp	r3, #0
 8012354:	d001      	beq.n	801235a <HAL_I2C_Init+0x196>
 8012356:	2301      	movs	r3, #1
 8012358:	e022      	b.n	80123a0 <HAL_I2C_Init+0x1dc>
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	689b      	ldr	r3, [r3, #8]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d10e      	bne.n	8012380 <HAL_I2C_Init+0x1bc>
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	1e58      	subs	r0, r3, #1
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6859      	ldr	r1, [r3, #4]
 801236a:	460b      	mov	r3, r1
 801236c:	005b      	lsls	r3, r3, #1
 801236e:	440b      	add	r3, r1
 8012370:	fbb0 f3f3 	udiv	r3, r0, r3
 8012374:	3301      	adds	r3, #1
 8012376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801237a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801237e:	e00f      	b.n	80123a0 <HAL_I2C_Init+0x1dc>
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	1e58      	subs	r0, r3, #1
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	6859      	ldr	r1, [r3, #4]
 8012388:	460b      	mov	r3, r1
 801238a:	009b      	lsls	r3, r3, #2
 801238c:	440b      	add	r3, r1
 801238e:	0099      	lsls	r1, r3, #2
 8012390:	440b      	add	r3, r1
 8012392:	fbb0 f3f3 	udiv	r3, r0, r3
 8012396:	3301      	adds	r3, #1
 8012398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801239c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80123a0:	6879      	ldr	r1, [r7, #4]
 80123a2:	6809      	ldr	r1, [r1, #0]
 80123a4:	4313      	orrs	r3, r2
 80123a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	69da      	ldr	r2, [r3, #28]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6a1b      	ldr	r3, [r3, #32]
 80123ba:	431a      	orrs	r2, r3
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	430a      	orrs	r2, r1
 80123c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	689b      	ldr	r3, [r3, #8]
 80123ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80123ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80123d2:	687a      	ldr	r2, [r7, #4]
 80123d4:	6911      	ldr	r1, [r2, #16]
 80123d6:	687a      	ldr	r2, [r7, #4]
 80123d8:	68d2      	ldr	r2, [r2, #12]
 80123da:	4311      	orrs	r1, r2
 80123dc:	687a      	ldr	r2, [r7, #4]
 80123de:	6812      	ldr	r2, [r2, #0]
 80123e0:	430b      	orrs	r3, r1
 80123e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	68db      	ldr	r3, [r3, #12]
 80123ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	695a      	ldr	r2, [r3, #20]
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	699b      	ldr	r3, [r3, #24]
 80123f6:	431a      	orrs	r2, r3
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	430a      	orrs	r2, r1
 80123fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	681a      	ldr	r2, [r3, #0]
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	f042 0201 	orr.w	r2, r2, #1
 801240e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2200      	movs	r2, #0
 8012414:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	2220      	movs	r2, #32
 801241a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2200      	movs	r2, #0
 8012422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2200      	movs	r2, #0
 8012428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801242c:	2300      	movs	r3, #0
}
 801242e:	4618      	mov	r0, r3
 8012430:	3710      	adds	r7, #16
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
 8012436:	bf00      	nop
 8012438:	000186a0 	.word	0x000186a0
 801243c:	001e847f 	.word	0x001e847f
 8012440:	003d08ff 	.word	0x003d08ff
 8012444:	431bde83 	.word	0x431bde83
 8012448:	10624dd3 	.word	0x10624dd3

0801244c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b082      	sub	sp, #8
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d101      	bne.n	801245e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 801245a:	2301      	movs	r3, #1
 801245c:	e021      	b.n	80124a2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2224      	movs	r2, #36	; 0x24
 8012462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	681a      	ldr	r2, [r3, #0]
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	f022 0201 	bic.w	r2, r2, #1
 8012474:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f000 f821 	bl	80124be <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2200      	movs	r2, #0
 8012480:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2200      	movs	r2, #0
 8012486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2200      	movs	r2, #0
 801248e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2200      	movs	r2, #0
 8012494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2200      	movs	r2, #0
 801249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80124a0:	2300      	movs	r3, #0
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3708      	adds	r7, #8
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}

080124aa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80124aa:	b480      	push	{r7}
 80124ac:	b083      	sub	sp, #12
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80124b2:	bf00      	nop
 80124b4:	370c      	adds	r7, #12
 80124b6:	46bd      	mov	sp, r7
 80124b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124bc:	4770      	bx	lr

080124be <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80124be:	b480      	push	{r7}
 80124c0:	b083      	sub	sp, #12
 80124c2:	af00      	add	r7, sp, #0
 80124c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80124c6:	bf00      	nop
 80124c8:	370c      	adds	r7, #12
 80124ca:	46bd      	mov	sp, r7
 80124cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d0:	4770      	bx	lr
	...

080124d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b088      	sub	sp, #32
 80124d8:	af02      	add	r7, sp, #8
 80124da:	60f8      	str	r0, [r7, #12]
 80124dc:	607a      	str	r2, [r7, #4]
 80124de:	461a      	mov	r2, r3
 80124e0:	460b      	mov	r3, r1
 80124e2:	817b      	strh	r3, [r7, #10]
 80124e4:	4613      	mov	r3, r2
 80124e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80124e8:	f7ff fabc 	bl	8011a64 <HAL_GetTick>
 80124ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80124f4:	b2db      	uxtb	r3, r3
 80124f6:	2b20      	cmp	r3, #32
 80124f8:	f040 80e0 	bne.w	80126bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80124fc:	697b      	ldr	r3, [r7, #20]
 80124fe:	9300      	str	r3, [sp, #0]
 8012500:	2319      	movs	r3, #25
 8012502:	2201      	movs	r2, #1
 8012504:	4970      	ldr	r1, [pc, #448]	; (80126c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8012506:	68f8      	ldr	r0, [r7, #12]
 8012508:	f000 fc72 	bl	8012df0 <I2C_WaitOnFlagUntilTimeout>
 801250c:	4603      	mov	r3, r0
 801250e:	2b00      	cmp	r3, #0
 8012510:	d001      	beq.n	8012516 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8012512:	2302      	movs	r3, #2
 8012514:	e0d3      	b.n	80126be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801251c:	2b01      	cmp	r3, #1
 801251e:	d101      	bne.n	8012524 <HAL_I2C_Master_Transmit+0x50>
 8012520:	2302      	movs	r3, #2
 8012522:	e0cc      	b.n	80126be <HAL_I2C_Master_Transmit+0x1ea>
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	2201      	movs	r2, #1
 8012528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	f003 0301 	and.w	r3, r3, #1
 8012536:	2b01      	cmp	r3, #1
 8012538:	d007      	beq.n	801254a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	f042 0201 	orr.w	r2, r2, #1
 8012548:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	681a      	ldr	r2, [r3, #0]
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012558:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	2221      	movs	r2, #33	; 0x21
 801255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	2210      	movs	r2, #16
 8012566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	2200      	movs	r2, #0
 801256e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	687a      	ldr	r2, [r7, #4]
 8012574:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	893a      	ldrh	r2, [r7, #8]
 801257a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012580:	b29a      	uxth	r2, r3
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	4a50      	ldr	r2, [pc, #320]	; (80126cc <HAL_I2C_Master_Transmit+0x1f8>)
 801258a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 801258c:	8979      	ldrh	r1, [r7, #10]
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	6a3a      	ldr	r2, [r7, #32]
 8012592:	68f8      	ldr	r0, [r7, #12]
 8012594:	f000 fadc 	bl	8012b50 <I2C_MasterRequestWrite>
 8012598:	4603      	mov	r3, r0
 801259a:	2b00      	cmp	r3, #0
 801259c:	d001      	beq.n	80125a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 801259e:	2301      	movs	r3, #1
 80125a0:	e08d      	b.n	80126be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80125a2:	2300      	movs	r3, #0
 80125a4:	613b      	str	r3, [r7, #16]
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	695b      	ldr	r3, [r3, #20]
 80125ac:	613b      	str	r3, [r7, #16]
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	699b      	ldr	r3, [r3, #24]
 80125b4:	613b      	str	r3, [r7, #16]
 80125b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80125b8:	e066      	b.n	8012688 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80125ba:	697a      	ldr	r2, [r7, #20]
 80125bc:	6a39      	ldr	r1, [r7, #32]
 80125be:	68f8      	ldr	r0, [r7, #12]
 80125c0:	f000 fcec 	bl	8012f9c <I2C_WaitOnTXEFlagUntilTimeout>
 80125c4:	4603      	mov	r3, r0
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d00d      	beq.n	80125e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125ce:	2b04      	cmp	r3, #4
 80125d0:	d107      	bne.n	80125e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	681a      	ldr	r2, [r3, #0]
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80125e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80125e2:	2301      	movs	r3, #1
 80125e4:	e06b      	b.n	80126be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ea:	781a      	ldrb	r2, [r3, #0]
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125f6:	1c5a      	adds	r2, r3, #1
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012600:	b29b      	uxth	r3, r3
 8012602:	3b01      	subs	r3, #1
 8012604:	b29a      	uxth	r2, r3
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801260e:	3b01      	subs	r3, #1
 8012610:	b29a      	uxth	r2, r3
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	695b      	ldr	r3, [r3, #20]
 801261c:	f003 0304 	and.w	r3, r3, #4
 8012620:	2b04      	cmp	r3, #4
 8012622:	d11b      	bne.n	801265c <HAL_I2C_Master_Transmit+0x188>
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012628:	2b00      	cmp	r3, #0
 801262a:	d017      	beq.n	801265c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012630:	781a      	ldrb	r2, [r3, #0]
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801263c:	1c5a      	adds	r2, r3, #1
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012646:	b29b      	uxth	r3, r3
 8012648:	3b01      	subs	r3, #1
 801264a:	b29a      	uxth	r2, r3
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012654:	3b01      	subs	r3, #1
 8012656:	b29a      	uxth	r2, r3
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801265c:	697a      	ldr	r2, [r7, #20]
 801265e:	6a39      	ldr	r1, [r7, #32]
 8012660:	68f8      	ldr	r0, [r7, #12]
 8012662:	f000 fcdc 	bl	801301e <I2C_WaitOnBTFFlagUntilTimeout>
 8012666:	4603      	mov	r3, r0
 8012668:	2b00      	cmp	r3, #0
 801266a:	d00d      	beq.n	8012688 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012670:	2b04      	cmp	r3, #4
 8012672:	d107      	bne.n	8012684 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	681a      	ldr	r2, [r3, #0]
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012682:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8012684:	2301      	movs	r3, #1
 8012686:	e01a      	b.n	80126be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801268c:	2b00      	cmp	r3, #0
 801268e:	d194      	bne.n	80125ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	681a      	ldr	r2, [r3, #0]
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801269e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	2220      	movs	r2, #32
 80126a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	2200      	movs	r2, #0
 80126ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	2200      	movs	r2, #0
 80126b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80126b8:	2300      	movs	r3, #0
 80126ba:	e000      	b.n	80126be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80126bc:	2302      	movs	r3, #2
  }
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3718      	adds	r7, #24
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}
 80126c6:	bf00      	nop
 80126c8:	00100002 	.word	0x00100002
 80126cc:	ffff0000 	.word	0xffff0000

080126d0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b08c      	sub	sp, #48	; 0x30
 80126d4:	af02      	add	r7, sp, #8
 80126d6:	60f8      	str	r0, [r7, #12]
 80126d8:	607a      	str	r2, [r7, #4]
 80126da:	461a      	mov	r2, r3
 80126dc:	460b      	mov	r3, r1
 80126de:	817b      	strh	r3, [r7, #10]
 80126e0:	4613      	mov	r3, r2
 80126e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80126e4:	f7ff f9be 	bl	8011a64 <HAL_GetTick>
 80126e8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	2b20      	cmp	r3, #32
 80126f4:	f040 820b 	bne.w	8012b0e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80126f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126fa:	9300      	str	r3, [sp, #0]
 80126fc:	2319      	movs	r3, #25
 80126fe:	2201      	movs	r2, #1
 8012700:	497c      	ldr	r1, [pc, #496]	; (80128f4 <HAL_I2C_Master_Receive+0x224>)
 8012702:	68f8      	ldr	r0, [r7, #12]
 8012704:	f000 fb74 	bl	8012df0 <I2C_WaitOnFlagUntilTimeout>
 8012708:	4603      	mov	r3, r0
 801270a:	2b00      	cmp	r3, #0
 801270c:	d001      	beq.n	8012712 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 801270e:	2302      	movs	r3, #2
 8012710:	e1fe      	b.n	8012b10 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012718:	2b01      	cmp	r3, #1
 801271a:	d101      	bne.n	8012720 <HAL_I2C_Master_Receive+0x50>
 801271c:	2302      	movs	r3, #2
 801271e:	e1f7      	b.n	8012b10 <HAL_I2C_Master_Receive+0x440>
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	2201      	movs	r2, #1
 8012724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	f003 0301 	and.w	r3, r3, #1
 8012732:	2b01      	cmp	r3, #1
 8012734:	d007      	beq.n	8012746 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	681a      	ldr	r2, [r3, #0]
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	f042 0201 	orr.w	r2, r2, #1
 8012744:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	681a      	ldr	r2, [r3, #0]
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012754:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	2222      	movs	r2, #34	; 0x22
 801275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	2210      	movs	r2, #16
 8012762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	2200      	movs	r2, #0
 801276a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	687a      	ldr	r2, [r7, #4]
 8012770:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	893a      	ldrh	r2, [r7, #8]
 8012776:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801277c:	b29a      	uxth	r2, r3
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	4a5c      	ldr	r2, [pc, #368]	; (80128f8 <HAL_I2C_Master_Receive+0x228>)
 8012786:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8012788:	8979      	ldrh	r1, [r7, #10]
 801278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801278c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801278e:	68f8      	ldr	r0, [r7, #12]
 8012790:	f000 fa60 	bl	8012c54 <I2C_MasterRequestRead>
 8012794:	4603      	mov	r3, r0
 8012796:	2b00      	cmp	r3, #0
 8012798:	d001      	beq.n	801279e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 801279a:	2301      	movs	r3, #1
 801279c:	e1b8      	b.n	8012b10 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d113      	bne.n	80127ce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80127a6:	2300      	movs	r3, #0
 80127a8:	623b      	str	r3, [r7, #32]
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	695b      	ldr	r3, [r3, #20]
 80127b0:	623b      	str	r3, [r7, #32]
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	699b      	ldr	r3, [r3, #24]
 80127b8:	623b      	str	r3, [r7, #32]
 80127ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	681a      	ldr	r2, [r3, #0]
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80127ca:	601a      	str	r2, [r3, #0]
 80127cc:	e18c      	b.n	8012ae8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127d2:	2b01      	cmp	r3, #1
 80127d4:	d11b      	bne.n	801280e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	681a      	ldr	r2, [r3, #0]
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80127e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80127e6:	2300      	movs	r3, #0
 80127e8:	61fb      	str	r3, [r7, #28]
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	695b      	ldr	r3, [r3, #20]
 80127f0:	61fb      	str	r3, [r7, #28]
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	699b      	ldr	r3, [r3, #24]
 80127f8:	61fb      	str	r3, [r7, #28]
 80127fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	681a      	ldr	r2, [r3, #0]
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801280a:	601a      	str	r2, [r3, #0]
 801280c:	e16c      	b.n	8012ae8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012812:	2b02      	cmp	r3, #2
 8012814:	d11b      	bne.n	801284e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	681a      	ldr	r2, [r3, #0]
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012824:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	681a      	ldr	r2, [r3, #0]
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012834:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012836:	2300      	movs	r3, #0
 8012838:	61bb      	str	r3, [r7, #24]
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	695b      	ldr	r3, [r3, #20]
 8012840:	61bb      	str	r3, [r7, #24]
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	699b      	ldr	r3, [r3, #24]
 8012848:	61bb      	str	r3, [r7, #24]
 801284a:	69bb      	ldr	r3, [r7, #24]
 801284c:	e14c      	b.n	8012ae8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	681a      	ldr	r2, [r3, #0]
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801285c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801285e:	2300      	movs	r3, #0
 8012860:	617b      	str	r3, [r7, #20]
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	695b      	ldr	r3, [r3, #20]
 8012868:	617b      	str	r3, [r7, #20]
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	699b      	ldr	r3, [r3, #24]
 8012870:	617b      	str	r3, [r7, #20]
 8012872:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8012874:	e138      	b.n	8012ae8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801287a:	2b03      	cmp	r3, #3
 801287c:	f200 80f1 	bhi.w	8012a62 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012884:	2b01      	cmp	r3, #1
 8012886:	d123      	bne.n	80128d0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801288a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801288c:	68f8      	ldr	r0, [r7, #12]
 801288e:	f000 fc07 	bl	80130a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012892:	4603      	mov	r3, r0
 8012894:	2b00      	cmp	r3, #0
 8012896:	d001      	beq.n	801289c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8012898:	2301      	movs	r3, #1
 801289a:	e139      	b.n	8012b10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	691a      	ldr	r2, [r3, #16]
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128a6:	b2d2      	uxtb	r2, r2
 80128a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128ae:	1c5a      	adds	r2, r3, #1
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80128b8:	3b01      	subs	r3, #1
 80128ba:	b29a      	uxth	r2, r3
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80128c4:	b29b      	uxth	r3, r3
 80128c6:	3b01      	subs	r3, #1
 80128c8:	b29a      	uxth	r2, r3
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80128ce:	e10b      	b.n	8012ae8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80128d4:	2b02      	cmp	r3, #2
 80128d6:	d14e      	bne.n	8012976 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80128d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128da:	9300      	str	r3, [sp, #0]
 80128dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128de:	2200      	movs	r2, #0
 80128e0:	4906      	ldr	r1, [pc, #24]	; (80128fc <HAL_I2C_Master_Receive+0x22c>)
 80128e2:	68f8      	ldr	r0, [r7, #12]
 80128e4:	f000 fa84 	bl	8012df0 <I2C_WaitOnFlagUntilTimeout>
 80128e8:	4603      	mov	r3, r0
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d008      	beq.n	8012900 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80128ee:	2301      	movs	r3, #1
 80128f0:	e10e      	b.n	8012b10 <HAL_I2C_Master_Receive+0x440>
 80128f2:	bf00      	nop
 80128f4:	00100002 	.word	0x00100002
 80128f8:	ffff0000 	.word	0xffff0000
 80128fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	681a      	ldr	r2, [r3, #0]
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801290e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	691a      	ldr	r2, [r3, #16]
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801291a:	b2d2      	uxtb	r2, r2
 801291c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012922:	1c5a      	adds	r2, r3, #1
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801292c:	3b01      	subs	r3, #1
 801292e:	b29a      	uxth	r2, r3
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012938:	b29b      	uxth	r3, r3
 801293a:	3b01      	subs	r3, #1
 801293c:	b29a      	uxth	r2, r3
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	691a      	ldr	r2, [r3, #16]
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801294c:	b2d2      	uxtb	r2, r2
 801294e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012954:	1c5a      	adds	r2, r3, #1
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801295e:	3b01      	subs	r3, #1
 8012960:	b29a      	uxth	r2, r3
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801296a:	b29b      	uxth	r3, r3
 801296c:	3b01      	subs	r3, #1
 801296e:	b29a      	uxth	r2, r3
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012974:	e0b8      	b.n	8012ae8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012978:	9300      	str	r3, [sp, #0]
 801297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801297c:	2200      	movs	r2, #0
 801297e:	4966      	ldr	r1, [pc, #408]	; (8012b18 <HAL_I2C_Master_Receive+0x448>)
 8012980:	68f8      	ldr	r0, [r7, #12]
 8012982:	f000 fa35 	bl	8012df0 <I2C_WaitOnFlagUntilTimeout>
 8012986:	4603      	mov	r3, r0
 8012988:	2b00      	cmp	r3, #0
 801298a:	d001      	beq.n	8012990 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 801298c:	2301      	movs	r3, #1
 801298e:	e0bf      	b.n	8012b10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	681a      	ldr	r2, [r3, #0]
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801299e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	691a      	ldr	r2, [r3, #16]
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129aa:	b2d2      	uxtb	r2, r2
 80129ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129b2:	1c5a      	adds	r2, r3, #1
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80129bc:	3b01      	subs	r3, #1
 80129be:	b29a      	uxth	r2, r3
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80129c8:	b29b      	uxth	r3, r3
 80129ca:	3b01      	subs	r3, #1
 80129cc:	b29a      	uxth	r2, r3
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80129d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d4:	9300      	str	r3, [sp, #0]
 80129d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d8:	2200      	movs	r2, #0
 80129da:	494f      	ldr	r1, [pc, #316]	; (8012b18 <HAL_I2C_Master_Receive+0x448>)
 80129dc:	68f8      	ldr	r0, [r7, #12]
 80129de:	f000 fa07 	bl	8012df0 <I2C_WaitOnFlagUntilTimeout>
 80129e2:	4603      	mov	r3, r0
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d001      	beq.n	80129ec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80129e8:	2301      	movs	r3, #1
 80129ea:	e091      	b.n	8012b10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	681a      	ldr	r2, [r3, #0]
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80129fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	691a      	ldr	r2, [r3, #16]
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a06:	b2d2      	uxtb	r2, r2
 8012a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a0e:	1c5a      	adds	r2, r3, #1
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a18:	3b01      	subs	r3, #1
 8012a1a:	b29a      	uxth	r2, r3
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012a24:	b29b      	uxth	r3, r3
 8012a26:	3b01      	subs	r3, #1
 8012a28:	b29a      	uxth	r2, r3
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	691a      	ldr	r2, [r3, #16]
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a38:	b2d2      	uxtb	r2, r2
 8012a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a40:	1c5a      	adds	r2, r3, #1
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a4a:	3b01      	subs	r3, #1
 8012a4c:	b29a      	uxth	r2, r3
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012a56:	b29b      	uxth	r3, r3
 8012a58:	3b01      	subs	r3, #1
 8012a5a:	b29a      	uxth	r2, r3
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012a60:	e042      	b.n	8012ae8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012a66:	68f8      	ldr	r0, [r7, #12]
 8012a68:	f000 fb1a 	bl	80130a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d001      	beq.n	8012a76 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8012a72:	2301      	movs	r3, #1
 8012a74:	e04c      	b.n	8012b10 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	691a      	ldr	r2, [r3, #16]
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a80:	b2d2      	uxtb	r2, r2
 8012a82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a88:	1c5a      	adds	r2, r3, #1
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a92:	3b01      	subs	r3, #1
 8012a94:	b29a      	uxth	r2, r3
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	3b01      	subs	r3, #1
 8012aa2:	b29a      	uxth	r2, r3
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	695b      	ldr	r3, [r3, #20]
 8012aae:	f003 0304 	and.w	r3, r3, #4
 8012ab2:	2b04      	cmp	r3, #4
 8012ab4:	d118      	bne.n	8012ae8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	691a      	ldr	r2, [r3, #16]
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ac0:	b2d2      	uxtb	r2, r2
 8012ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ac8:	1c5a      	adds	r2, r3, #1
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ad2:	3b01      	subs	r3, #1
 8012ad4:	b29a      	uxth	r2, r3
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012ade:	b29b      	uxth	r3, r3
 8012ae0:	3b01      	subs	r3, #1
 8012ae2:	b29a      	uxth	r2, r3
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	f47f aec2 	bne.w	8012876 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	2220      	movs	r2, #32
 8012af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	2200      	movs	r2, #0
 8012afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	2200      	movs	r2, #0
 8012b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	e000      	b.n	8012b10 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8012b0e:	2302      	movs	r3, #2
  }
}
 8012b10:	4618      	mov	r0, r3
 8012b12:	3728      	adds	r7, #40	; 0x28
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	00010004 	.word	0x00010004

08012b1c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8012b1c:	b480      	push	{r7}
 8012b1e:	b083      	sub	sp, #12
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012b2a:	b2db      	uxtb	r3, r3
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	370c      	adds	r7, #12
 8012b30:	46bd      	mov	sp, r7
 8012b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b36:	4770      	bx	lr

08012b38 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8012b38:	b480      	push	{r7}
 8012b3a:	b083      	sub	sp, #12
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8012b44:	4618      	mov	r0, r3
 8012b46:	370c      	adds	r7, #12
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4e:	4770      	bx	lr

08012b50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b088      	sub	sp, #32
 8012b54:	af02      	add	r7, sp, #8
 8012b56:	60f8      	str	r0, [r7, #12]
 8012b58:	607a      	str	r2, [r7, #4]
 8012b5a:	603b      	str	r3, [r7, #0]
 8012b5c:	460b      	mov	r3, r1
 8012b5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	2b08      	cmp	r3, #8
 8012b6a:	d006      	beq.n	8012b7a <I2C_MasterRequestWrite+0x2a>
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	2b01      	cmp	r3, #1
 8012b70:	d003      	beq.n	8012b7a <I2C_MasterRequestWrite+0x2a>
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012b78:	d108      	bne.n	8012b8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	681a      	ldr	r2, [r3, #0]
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012b88:	601a      	str	r2, [r3, #0]
 8012b8a:	e00b      	b.n	8012ba4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b90:	2b12      	cmp	r3, #18
 8012b92:	d107      	bne.n	8012ba4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	681a      	ldr	r2, [r3, #0]
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012ba2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	9300      	str	r3, [sp, #0]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2200      	movs	r2, #0
 8012bac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012bb0:	68f8      	ldr	r0, [r7, #12]
 8012bb2:	f000 f91d 	bl	8012df0 <I2C_WaitOnFlagUntilTimeout>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d00d      	beq.n	8012bd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012bca:	d103      	bne.n	8012bd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012bd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8012bd4:	2303      	movs	r3, #3
 8012bd6:	e035      	b.n	8012c44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	691b      	ldr	r3, [r3, #16]
 8012bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012be0:	d108      	bne.n	8012bf4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8012be2:	897b      	ldrh	r3, [r7, #10]
 8012be4:	b2db      	uxtb	r3, r3
 8012be6:	461a      	mov	r2, r3
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8012bf0:	611a      	str	r2, [r3, #16]
 8012bf2:	e01b      	b.n	8012c2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8012bf4:	897b      	ldrh	r3, [r7, #10]
 8012bf6:	11db      	asrs	r3, r3, #7
 8012bf8:	b2db      	uxtb	r3, r3
 8012bfa:	f003 0306 	and.w	r3, r3, #6
 8012bfe:	b2db      	uxtb	r3, r3
 8012c00:	f063 030f 	orn	r3, r3, #15
 8012c04:	b2da      	uxtb	r2, r3
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8012c0c:	683b      	ldr	r3, [r7, #0]
 8012c0e:	687a      	ldr	r2, [r7, #4]
 8012c10:	490e      	ldr	r1, [pc, #56]	; (8012c4c <I2C_MasterRequestWrite+0xfc>)
 8012c12:	68f8      	ldr	r0, [r7, #12]
 8012c14:	f000 f943 	bl	8012e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d001      	beq.n	8012c22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8012c1e:	2301      	movs	r3, #1
 8012c20:	e010      	b.n	8012c44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8012c22:	897b      	ldrh	r3, [r7, #10]
 8012c24:	b2da      	uxtb	r2, r3
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	687a      	ldr	r2, [r7, #4]
 8012c30:	4907      	ldr	r1, [pc, #28]	; (8012c50 <I2C_MasterRequestWrite+0x100>)
 8012c32:	68f8      	ldr	r0, [r7, #12]
 8012c34:	f000 f933 	bl	8012e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d001      	beq.n	8012c42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8012c3e:	2301      	movs	r3, #1
 8012c40:	e000      	b.n	8012c44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8012c42:	2300      	movs	r3, #0
}
 8012c44:	4618      	mov	r0, r3
 8012c46:	3718      	adds	r7, #24
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}
 8012c4c:	00010008 	.word	0x00010008
 8012c50:	00010002 	.word	0x00010002

08012c54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b088      	sub	sp, #32
 8012c58:	af02      	add	r7, sp, #8
 8012c5a:	60f8      	str	r0, [r7, #12]
 8012c5c:	607a      	str	r2, [r7, #4]
 8012c5e:	603b      	str	r3, [r7, #0]
 8012c60:	460b      	mov	r3, r1
 8012c62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	681a      	ldr	r2, [r3, #0]
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012c78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8012c7a:	697b      	ldr	r3, [r7, #20]
 8012c7c:	2b08      	cmp	r3, #8
 8012c7e:	d006      	beq.n	8012c8e <I2C_MasterRequestRead+0x3a>
 8012c80:	697b      	ldr	r3, [r7, #20]
 8012c82:	2b01      	cmp	r3, #1
 8012c84:	d003      	beq.n	8012c8e <I2C_MasterRequestRead+0x3a>
 8012c86:	697b      	ldr	r3, [r7, #20]
 8012c88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012c8c:	d108      	bne.n	8012ca0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012c9c:	601a      	str	r2, [r3, #0]
 8012c9e:	e00b      	b.n	8012cb8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ca4:	2b11      	cmp	r3, #17
 8012ca6:	d107      	bne.n	8012cb8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	681a      	ldr	r2, [r3, #0]
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012cb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012cb8:	683b      	ldr	r3, [r7, #0]
 8012cba:	9300      	str	r3, [sp, #0]
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012cc4:	68f8      	ldr	r0, [r7, #12]
 8012cc6:	f000 f893 	bl	8012df0 <I2C_WaitOnFlagUntilTimeout>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d00d      	beq.n	8012cec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012cde:	d103      	bne.n	8012ce8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ce6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8012ce8:	2303      	movs	r3, #3
 8012cea:	e079      	b.n	8012de0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	691b      	ldr	r3, [r3, #16]
 8012cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012cf4:	d108      	bne.n	8012d08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8012cf6:	897b      	ldrh	r3, [r7, #10]
 8012cf8:	b2db      	uxtb	r3, r3
 8012cfa:	f043 0301 	orr.w	r3, r3, #1
 8012cfe:	b2da      	uxtb	r2, r3
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	611a      	str	r2, [r3, #16]
 8012d06:	e05f      	b.n	8012dc8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8012d08:	897b      	ldrh	r3, [r7, #10]
 8012d0a:	11db      	asrs	r3, r3, #7
 8012d0c:	b2db      	uxtb	r3, r3
 8012d0e:	f003 0306 	and.w	r3, r3, #6
 8012d12:	b2db      	uxtb	r3, r3
 8012d14:	f063 030f 	orn	r3, r3, #15
 8012d18:	b2da      	uxtb	r2, r3
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8012d20:	683b      	ldr	r3, [r7, #0]
 8012d22:	687a      	ldr	r2, [r7, #4]
 8012d24:	4930      	ldr	r1, [pc, #192]	; (8012de8 <I2C_MasterRequestRead+0x194>)
 8012d26:	68f8      	ldr	r0, [r7, #12]
 8012d28:	f000 f8b9 	bl	8012e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d001      	beq.n	8012d36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8012d32:	2301      	movs	r3, #1
 8012d34:	e054      	b.n	8012de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8012d36:	897b      	ldrh	r3, [r7, #10]
 8012d38:	b2da      	uxtb	r2, r3
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	687a      	ldr	r2, [r7, #4]
 8012d44:	4929      	ldr	r1, [pc, #164]	; (8012dec <I2C_MasterRequestRead+0x198>)
 8012d46:	68f8      	ldr	r0, [r7, #12]
 8012d48:	f000 f8a9 	bl	8012e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d001      	beq.n	8012d56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8012d52:	2301      	movs	r3, #1
 8012d54:	e044      	b.n	8012de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012d56:	2300      	movs	r3, #0
 8012d58:	613b      	str	r3, [r7, #16]
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	695b      	ldr	r3, [r3, #20]
 8012d60:	613b      	str	r3, [r7, #16]
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	699b      	ldr	r3, [r3, #24]
 8012d68:	613b      	str	r3, [r7, #16]
 8012d6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	681a      	ldr	r2, [r3, #0]
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012d7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012d7c:	683b      	ldr	r3, [r7, #0]
 8012d7e:	9300      	str	r3, [sp, #0]
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2200      	movs	r2, #0
 8012d84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012d88:	68f8      	ldr	r0, [r7, #12]
 8012d8a:	f000 f831 	bl	8012df0 <I2C_WaitOnFlagUntilTimeout>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d00d      	beq.n	8012db0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012da2:	d103      	bne.n	8012dac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012daa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8012dac:	2303      	movs	r3, #3
 8012dae:	e017      	b.n	8012de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8012db0:	897b      	ldrh	r3, [r7, #10]
 8012db2:	11db      	asrs	r3, r3, #7
 8012db4:	b2db      	uxtb	r3, r3
 8012db6:	f003 0306 	and.w	r3, r3, #6
 8012dba:	b2db      	uxtb	r3, r3
 8012dbc:	f063 030e 	orn	r3, r3, #14
 8012dc0:	b2da      	uxtb	r2, r3
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	687a      	ldr	r2, [r7, #4]
 8012dcc:	4907      	ldr	r1, [pc, #28]	; (8012dec <I2C_MasterRequestRead+0x198>)
 8012dce:	68f8      	ldr	r0, [r7, #12]
 8012dd0:	f000 f865 	bl	8012e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d001      	beq.n	8012dde <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8012dda:	2301      	movs	r3, #1
 8012ddc:	e000      	b.n	8012de0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8012dde:	2300      	movs	r3, #0
}
 8012de0:	4618      	mov	r0, r3
 8012de2:	3718      	adds	r7, #24
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}
 8012de8:	00010008 	.word	0x00010008
 8012dec:	00010002 	.word	0x00010002

08012df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b084      	sub	sp, #16
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	60f8      	str	r0, [r7, #12]
 8012df8:	60b9      	str	r1, [r7, #8]
 8012dfa:	603b      	str	r3, [r7, #0]
 8012dfc:	4613      	mov	r3, r2
 8012dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012e00:	e025      	b.n	8012e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e08:	d021      	beq.n	8012e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012e0a:	f7fe fe2b 	bl	8011a64 <HAL_GetTick>
 8012e0e:	4602      	mov	r2, r0
 8012e10:	69bb      	ldr	r3, [r7, #24]
 8012e12:	1ad3      	subs	r3, r2, r3
 8012e14:	683a      	ldr	r2, [r7, #0]
 8012e16:	429a      	cmp	r2, r3
 8012e18:	d302      	bcc.n	8012e20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d116      	bne.n	8012e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	2200      	movs	r2, #0
 8012e24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	2220      	movs	r2, #32
 8012e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	2200      	movs	r2, #0
 8012e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e3a:	f043 0220 	orr.w	r2, r3, #32
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	2200      	movs	r2, #0
 8012e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8012e4a:	2301      	movs	r3, #1
 8012e4c:	e023      	b.n	8012e96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	0c1b      	lsrs	r3, r3, #16
 8012e52:	b2db      	uxtb	r3, r3
 8012e54:	2b01      	cmp	r3, #1
 8012e56:	d10d      	bne.n	8012e74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	695b      	ldr	r3, [r3, #20]
 8012e5e:	43da      	mvns	r2, r3
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	4013      	ands	r3, r2
 8012e64:	b29b      	uxth	r3, r3
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	bf0c      	ite	eq
 8012e6a:	2301      	moveq	r3, #1
 8012e6c:	2300      	movne	r3, #0
 8012e6e:	b2db      	uxtb	r3, r3
 8012e70:	461a      	mov	r2, r3
 8012e72:	e00c      	b.n	8012e8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	699b      	ldr	r3, [r3, #24]
 8012e7a:	43da      	mvns	r2, r3
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	4013      	ands	r3, r2
 8012e80:	b29b      	uxth	r3, r3
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	bf0c      	ite	eq
 8012e86:	2301      	moveq	r3, #1
 8012e88:	2300      	movne	r3, #0
 8012e8a:	b2db      	uxtb	r3, r3
 8012e8c:	461a      	mov	r2, r3
 8012e8e:	79fb      	ldrb	r3, [r7, #7]
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d0b6      	beq.n	8012e02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012e94:	2300      	movs	r3, #0
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3710      	adds	r7, #16
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd80      	pop	{r7, pc}

08012e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8012e9e:	b580      	push	{r7, lr}
 8012ea0:	b084      	sub	sp, #16
 8012ea2:	af00      	add	r7, sp, #0
 8012ea4:	60f8      	str	r0, [r7, #12]
 8012ea6:	60b9      	str	r1, [r7, #8]
 8012ea8:	607a      	str	r2, [r7, #4]
 8012eaa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8012eac:	e051      	b.n	8012f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	695b      	ldr	r3, [r3, #20]
 8012eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012ebc:	d123      	bne.n	8012f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	681a      	ldr	r2, [r3, #0]
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012ecc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8012ed6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	2200      	movs	r2, #0
 8012edc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	2220      	movs	r2, #32
 8012ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	2200      	movs	r2, #0
 8012eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ef2:	f043 0204 	orr.w	r2, r3, #4
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	2200      	movs	r2, #0
 8012efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8012f02:	2301      	movs	r3, #1
 8012f04:	e046      	b.n	8012f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f0c:	d021      	beq.n	8012f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012f0e:	f7fe fda9 	bl	8011a64 <HAL_GetTick>
 8012f12:	4602      	mov	r2, r0
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	1ad3      	subs	r3, r2, r3
 8012f18:	687a      	ldr	r2, [r7, #4]
 8012f1a:	429a      	cmp	r2, r3
 8012f1c:	d302      	bcc.n	8012f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d116      	bne.n	8012f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	2200      	movs	r2, #0
 8012f28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	2220      	movs	r2, #32
 8012f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	2200      	movs	r2, #0
 8012f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f3e:	f043 0220 	orr.w	r2, r3, #32
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	2200      	movs	r2, #0
 8012f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8012f4e:	2301      	movs	r3, #1
 8012f50:	e020      	b.n	8012f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	0c1b      	lsrs	r3, r3, #16
 8012f56:	b2db      	uxtb	r3, r3
 8012f58:	2b01      	cmp	r3, #1
 8012f5a:	d10c      	bne.n	8012f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	695b      	ldr	r3, [r3, #20]
 8012f62:	43da      	mvns	r2, r3
 8012f64:	68bb      	ldr	r3, [r7, #8]
 8012f66:	4013      	ands	r3, r2
 8012f68:	b29b      	uxth	r3, r3
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	bf14      	ite	ne
 8012f6e:	2301      	movne	r3, #1
 8012f70:	2300      	moveq	r3, #0
 8012f72:	b2db      	uxtb	r3, r3
 8012f74:	e00b      	b.n	8012f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	699b      	ldr	r3, [r3, #24]
 8012f7c:	43da      	mvns	r2, r3
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	4013      	ands	r3, r2
 8012f82:	b29b      	uxth	r3, r3
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	bf14      	ite	ne
 8012f88:	2301      	movne	r3, #1
 8012f8a:	2300      	moveq	r3, #0
 8012f8c:	b2db      	uxtb	r3, r3
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d18d      	bne.n	8012eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8012f92:	2300      	movs	r3, #0
}
 8012f94:	4618      	mov	r0, r3
 8012f96:	3710      	adds	r7, #16
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}

08012f9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b084      	sub	sp, #16
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	60f8      	str	r0, [r7, #12]
 8012fa4:	60b9      	str	r1, [r7, #8]
 8012fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012fa8:	e02d      	b.n	8013006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8012faa:	68f8      	ldr	r0, [r7, #12]
 8012fac:	f000 f8ce 	bl	801314c <I2C_IsAcknowledgeFailed>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d001      	beq.n	8012fba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8012fb6:	2301      	movs	r3, #1
 8012fb8:	e02d      	b.n	8013016 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fc0:	d021      	beq.n	8013006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012fc2:	f7fe fd4f 	bl	8011a64 <HAL_GetTick>
 8012fc6:	4602      	mov	r2, r0
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	1ad3      	subs	r3, r2, r3
 8012fcc:	68ba      	ldr	r2, [r7, #8]
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d302      	bcc.n	8012fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d116      	bne.n	8013006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	2200      	movs	r2, #0
 8012fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	2220      	movs	r2, #32
 8012fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	2200      	movs	r2, #0
 8012fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ff2:	f043 0220 	orr.w	r2, r3, #32
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013002:	2301      	movs	r3, #1
 8013004:	e007      	b.n	8013016 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	695b      	ldr	r3, [r3, #20]
 801300c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013010:	2b80      	cmp	r3, #128	; 0x80
 8013012:	d1ca      	bne.n	8012faa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013014:	2300      	movs	r3, #0
}
 8013016:	4618      	mov	r0, r3
 8013018:	3710      	adds	r7, #16
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}

0801301e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801301e:	b580      	push	{r7, lr}
 8013020:	b084      	sub	sp, #16
 8013022:	af00      	add	r7, sp, #0
 8013024:	60f8      	str	r0, [r7, #12]
 8013026:	60b9      	str	r1, [r7, #8]
 8013028:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801302a:	e02d      	b.n	8013088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801302c:	68f8      	ldr	r0, [r7, #12]
 801302e:	f000 f88d 	bl	801314c <I2C_IsAcknowledgeFailed>
 8013032:	4603      	mov	r3, r0
 8013034:	2b00      	cmp	r3, #0
 8013036:	d001      	beq.n	801303c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8013038:	2301      	movs	r3, #1
 801303a:	e02d      	b.n	8013098 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801303c:	68bb      	ldr	r3, [r7, #8]
 801303e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013042:	d021      	beq.n	8013088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013044:	f7fe fd0e 	bl	8011a64 <HAL_GetTick>
 8013048:	4602      	mov	r2, r0
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	1ad3      	subs	r3, r2, r3
 801304e:	68ba      	ldr	r2, [r7, #8]
 8013050:	429a      	cmp	r2, r3
 8013052:	d302      	bcc.n	801305a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d116      	bne.n	8013088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	2200      	movs	r2, #0
 801305e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	2220      	movs	r2, #32
 8013064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	2200      	movs	r2, #0
 801306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013074:	f043 0220 	orr.w	r2, r3, #32
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	2200      	movs	r2, #0
 8013080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013084:	2301      	movs	r3, #1
 8013086:	e007      	b.n	8013098 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	695b      	ldr	r3, [r3, #20]
 801308e:	f003 0304 	and.w	r3, r3, #4
 8013092:	2b04      	cmp	r3, #4
 8013094:	d1ca      	bne.n	801302c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013096:	2300      	movs	r3, #0
}
 8013098:	4618      	mov	r0, r3
 801309a:	3710      	adds	r7, #16
 801309c:	46bd      	mov	sp, r7
 801309e:	bd80      	pop	{r7, pc}

080130a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b084      	sub	sp, #16
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	60f8      	str	r0, [r7, #12]
 80130a8:	60b9      	str	r1, [r7, #8]
 80130aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80130ac:	e042      	b.n	8013134 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	695b      	ldr	r3, [r3, #20]
 80130b4:	f003 0310 	and.w	r3, r3, #16
 80130b8:	2b10      	cmp	r3, #16
 80130ba:	d119      	bne.n	80130f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	f06f 0210 	mvn.w	r2, #16
 80130c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	2200      	movs	r2, #0
 80130ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	2220      	movs	r2, #32
 80130d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	2200      	movs	r2, #0
 80130d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	2200      	movs	r2, #0
 80130e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80130ec:	2301      	movs	r3, #1
 80130ee:	e029      	b.n	8013144 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80130f0:	f7fe fcb8 	bl	8011a64 <HAL_GetTick>
 80130f4:	4602      	mov	r2, r0
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	1ad3      	subs	r3, r2, r3
 80130fa:	68ba      	ldr	r2, [r7, #8]
 80130fc:	429a      	cmp	r2, r3
 80130fe:	d302      	bcc.n	8013106 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8013100:	68bb      	ldr	r3, [r7, #8]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d116      	bne.n	8013134 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	2200      	movs	r2, #0
 801310a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	2220      	movs	r2, #32
 8013110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	2200      	movs	r2, #0
 8013118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013120:	f043 0220 	orr.w	r2, r3, #32
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	2200      	movs	r2, #0
 801312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8013130:	2301      	movs	r3, #1
 8013132:	e007      	b.n	8013144 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	695b      	ldr	r3, [r3, #20]
 801313a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801313e:	2b40      	cmp	r3, #64	; 0x40
 8013140:	d1b5      	bne.n	80130ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8013142:	2300      	movs	r3, #0
}
 8013144:	4618      	mov	r0, r3
 8013146:	3710      	adds	r7, #16
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}

0801314c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801314c:	b480      	push	{r7}
 801314e:	b083      	sub	sp, #12
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	695b      	ldr	r3, [r3, #20]
 801315a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801315e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013162:	d11b      	bne.n	801319c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801316c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	2200      	movs	r2, #0
 8013172:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2220      	movs	r2, #32
 8013178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2200      	movs	r2, #0
 8013180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013188:	f043 0204 	orr.w	r2, r3, #4
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	2200      	movs	r2, #0
 8013194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8013198:	2301      	movs	r3, #1
 801319a:	e000      	b.n	801319e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801319c:	2300      	movs	r3, #0
}
 801319e:	4618      	mov	r0, r3
 80131a0:	370c      	adds	r7, #12
 80131a2:	46bd      	mov	sp, r7
 80131a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a8:	4770      	bx	lr
	...

080131ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b086      	sub	sp, #24
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d101      	bne.n	80131be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80131ba:	2301      	movs	r3, #1
 80131bc:	e264      	b.n	8013688 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	f003 0301 	and.w	r3, r3, #1
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d075      	beq.n	80132b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80131ca:	4ba3      	ldr	r3, [pc, #652]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 80131cc:	689b      	ldr	r3, [r3, #8]
 80131ce:	f003 030c 	and.w	r3, r3, #12
 80131d2:	2b04      	cmp	r3, #4
 80131d4:	d00c      	beq.n	80131f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80131d6:	4ba0      	ldr	r3, [pc, #640]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 80131d8:	689b      	ldr	r3, [r3, #8]
 80131da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80131de:	2b08      	cmp	r3, #8
 80131e0:	d112      	bne.n	8013208 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80131e2:	4b9d      	ldr	r3, [pc, #628]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 80131e4:	685b      	ldr	r3, [r3, #4]
 80131e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80131ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80131ee:	d10b      	bne.n	8013208 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80131f0:	4b99      	ldr	r3, [pc, #612]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d05b      	beq.n	80132b4 <HAL_RCC_OscConfig+0x108>
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	685b      	ldr	r3, [r3, #4]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d157      	bne.n	80132b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8013204:	2301      	movs	r3, #1
 8013206:	e23f      	b.n	8013688 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	685b      	ldr	r3, [r3, #4]
 801320c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013210:	d106      	bne.n	8013220 <HAL_RCC_OscConfig+0x74>
 8013212:	4b91      	ldr	r3, [pc, #580]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	4a90      	ldr	r2, [pc, #576]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 8013218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801321c:	6013      	str	r3, [r2, #0]
 801321e:	e01d      	b.n	801325c <HAL_RCC_OscConfig+0xb0>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	685b      	ldr	r3, [r3, #4]
 8013224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013228:	d10c      	bne.n	8013244 <HAL_RCC_OscConfig+0x98>
 801322a:	4b8b      	ldr	r3, [pc, #556]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	4a8a      	ldr	r2, [pc, #552]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 8013230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013234:	6013      	str	r3, [r2, #0]
 8013236:	4b88      	ldr	r3, [pc, #544]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	4a87      	ldr	r2, [pc, #540]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 801323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013240:	6013      	str	r3, [r2, #0]
 8013242:	e00b      	b.n	801325c <HAL_RCC_OscConfig+0xb0>
 8013244:	4b84      	ldr	r3, [pc, #528]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	4a83      	ldr	r2, [pc, #524]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 801324a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801324e:	6013      	str	r3, [r2, #0]
 8013250:	4b81      	ldr	r3, [pc, #516]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	4a80      	ldr	r2, [pc, #512]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 8013256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801325a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	685b      	ldr	r3, [r3, #4]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d013      	beq.n	801328c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013264:	f7fe fbfe 	bl	8011a64 <HAL_GetTick>
 8013268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801326a:	e008      	b.n	801327e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801326c:	f7fe fbfa 	bl	8011a64 <HAL_GetTick>
 8013270:	4602      	mov	r2, r0
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	1ad3      	subs	r3, r2, r3
 8013276:	2b64      	cmp	r3, #100	; 0x64
 8013278:	d901      	bls.n	801327e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801327a:	2303      	movs	r3, #3
 801327c:	e204      	b.n	8013688 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801327e:	4b76      	ldr	r3, [pc, #472]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013286:	2b00      	cmp	r3, #0
 8013288:	d0f0      	beq.n	801326c <HAL_RCC_OscConfig+0xc0>
 801328a:	e014      	b.n	80132b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801328c:	f7fe fbea 	bl	8011a64 <HAL_GetTick>
 8013290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013292:	e008      	b.n	80132a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013294:	f7fe fbe6 	bl	8011a64 <HAL_GetTick>
 8013298:	4602      	mov	r2, r0
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	1ad3      	subs	r3, r2, r3
 801329e:	2b64      	cmp	r3, #100	; 0x64
 80132a0:	d901      	bls.n	80132a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80132a2:	2303      	movs	r3, #3
 80132a4:	e1f0      	b.n	8013688 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80132a6:	4b6c      	ldr	r3, [pc, #432]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d1f0      	bne.n	8013294 <HAL_RCC_OscConfig+0xe8>
 80132b2:	e000      	b.n	80132b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80132b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	f003 0302 	and.w	r3, r3, #2
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d063      	beq.n	801338a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80132c2:	4b65      	ldr	r3, [pc, #404]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 80132c4:	689b      	ldr	r3, [r3, #8]
 80132c6:	f003 030c 	and.w	r3, r3, #12
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d00b      	beq.n	80132e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80132ce:	4b62      	ldr	r3, [pc, #392]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 80132d0:	689b      	ldr	r3, [r3, #8]
 80132d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80132d6:	2b08      	cmp	r3, #8
 80132d8:	d11c      	bne.n	8013314 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80132da:	4b5f      	ldr	r3, [pc, #380]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 80132dc:	685b      	ldr	r3, [r3, #4]
 80132de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d116      	bne.n	8013314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80132e6:	4b5c      	ldr	r3, [pc, #368]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	f003 0302 	and.w	r3, r3, #2
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d005      	beq.n	80132fe <HAL_RCC_OscConfig+0x152>
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	68db      	ldr	r3, [r3, #12]
 80132f6:	2b01      	cmp	r3, #1
 80132f8:	d001      	beq.n	80132fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80132fa:	2301      	movs	r3, #1
 80132fc:	e1c4      	b.n	8013688 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80132fe:	4b56      	ldr	r3, [pc, #344]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	691b      	ldr	r3, [r3, #16]
 801330a:	00db      	lsls	r3, r3, #3
 801330c:	4952      	ldr	r1, [pc, #328]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 801330e:	4313      	orrs	r3, r2
 8013310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013312:	e03a      	b.n	801338a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	68db      	ldr	r3, [r3, #12]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d020      	beq.n	801335e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801331c:	4b4f      	ldr	r3, [pc, #316]	; (801345c <HAL_RCC_OscConfig+0x2b0>)
 801331e:	2201      	movs	r2, #1
 8013320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013322:	f7fe fb9f 	bl	8011a64 <HAL_GetTick>
 8013326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013328:	e008      	b.n	801333c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801332a:	f7fe fb9b 	bl	8011a64 <HAL_GetTick>
 801332e:	4602      	mov	r2, r0
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	1ad3      	subs	r3, r2, r3
 8013334:	2b02      	cmp	r3, #2
 8013336:	d901      	bls.n	801333c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013338:	2303      	movs	r3, #3
 801333a:	e1a5      	b.n	8013688 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801333c:	4b46      	ldr	r3, [pc, #280]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	f003 0302 	and.w	r3, r3, #2
 8013344:	2b00      	cmp	r3, #0
 8013346:	d0f0      	beq.n	801332a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013348:	4b43      	ldr	r3, [pc, #268]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	691b      	ldr	r3, [r3, #16]
 8013354:	00db      	lsls	r3, r3, #3
 8013356:	4940      	ldr	r1, [pc, #256]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 8013358:	4313      	orrs	r3, r2
 801335a:	600b      	str	r3, [r1, #0]
 801335c:	e015      	b.n	801338a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801335e:	4b3f      	ldr	r3, [pc, #252]	; (801345c <HAL_RCC_OscConfig+0x2b0>)
 8013360:	2200      	movs	r2, #0
 8013362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013364:	f7fe fb7e 	bl	8011a64 <HAL_GetTick>
 8013368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801336a:	e008      	b.n	801337e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801336c:	f7fe fb7a 	bl	8011a64 <HAL_GetTick>
 8013370:	4602      	mov	r2, r0
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	1ad3      	subs	r3, r2, r3
 8013376:	2b02      	cmp	r3, #2
 8013378:	d901      	bls.n	801337e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801337a:	2303      	movs	r3, #3
 801337c:	e184      	b.n	8013688 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801337e:	4b36      	ldr	r3, [pc, #216]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	f003 0302 	and.w	r3, r3, #2
 8013386:	2b00      	cmp	r3, #0
 8013388:	d1f0      	bne.n	801336c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	f003 0308 	and.w	r3, r3, #8
 8013392:	2b00      	cmp	r3, #0
 8013394:	d030      	beq.n	80133f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	695b      	ldr	r3, [r3, #20]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d016      	beq.n	80133cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801339e:	4b30      	ldr	r3, [pc, #192]	; (8013460 <HAL_RCC_OscConfig+0x2b4>)
 80133a0:	2201      	movs	r2, #1
 80133a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80133a4:	f7fe fb5e 	bl	8011a64 <HAL_GetTick>
 80133a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80133aa:	e008      	b.n	80133be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80133ac:	f7fe fb5a 	bl	8011a64 <HAL_GetTick>
 80133b0:	4602      	mov	r2, r0
 80133b2:	693b      	ldr	r3, [r7, #16]
 80133b4:	1ad3      	subs	r3, r2, r3
 80133b6:	2b02      	cmp	r3, #2
 80133b8:	d901      	bls.n	80133be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80133ba:	2303      	movs	r3, #3
 80133bc:	e164      	b.n	8013688 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80133be:	4b26      	ldr	r3, [pc, #152]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 80133c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133c2:	f003 0302 	and.w	r3, r3, #2
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d0f0      	beq.n	80133ac <HAL_RCC_OscConfig+0x200>
 80133ca:	e015      	b.n	80133f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80133cc:	4b24      	ldr	r3, [pc, #144]	; (8013460 <HAL_RCC_OscConfig+0x2b4>)
 80133ce:	2200      	movs	r2, #0
 80133d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80133d2:	f7fe fb47 	bl	8011a64 <HAL_GetTick>
 80133d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80133d8:	e008      	b.n	80133ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80133da:	f7fe fb43 	bl	8011a64 <HAL_GetTick>
 80133de:	4602      	mov	r2, r0
 80133e0:	693b      	ldr	r3, [r7, #16]
 80133e2:	1ad3      	subs	r3, r2, r3
 80133e4:	2b02      	cmp	r3, #2
 80133e6:	d901      	bls.n	80133ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80133e8:	2303      	movs	r3, #3
 80133ea:	e14d      	b.n	8013688 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80133ec:	4b1a      	ldr	r3, [pc, #104]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 80133ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133f0:	f003 0302 	and.w	r3, r3, #2
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d1f0      	bne.n	80133da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	f003 0304 	and.w	r3, r3, #4
 8013400:	2b00      	cmp	r3, #0
 8013402:	f000 80a0 	beq.w	8013546 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013406:	2300      	movs	r3, #0
 8013408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801340a:	4b13      	ldr	r3, [pc, #76]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 801340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801340e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013412:	2b00      	cmp	r3, #0
 8013414:	d10f      	bne.n	8013436 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013416:	2300      	movs	r3, #0
 8013418:	60bb      	str	r3, [r7, #8]
 801341a:	4b0f      	ldr	r3, [pc, #60]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 801341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801341e:	4a0e      	ldr	r2, [pc, #56]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 8013420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013424:	6413      	str	r3, [r2, #64]	; 0x40
 8013426:	4b0c      	ldr	r3, [pc, #48]	; (8013458 <HAL_RCC_OscConfig+0x2ac>)
 8013428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801342e:	60bb      	str	r3, [r7, #8]
 8013430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013432:	2301      	movs	r3, #1
 8013434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013436:	4b0b      	ldr	r3, [pc, #44]	; (8013464 <HAL_RCC_OscConfig+0x2b8>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801343e:	2b00      	cmp	r3, #0
 8013440:	d121      	bne.n	8013486 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013442:	4b08      	ldr	r3, [pc, #32]	; (8013464 <HAL_RCC_OscConfig+0x2b8>)
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	4a07      	ldr	r2, [pc, #28]	; (8013464 <HAL_RCC_OscConfig+0x2b8>)
 8013448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801344c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801344e:	f7fe fb09 	bl	8011a64 <HAL_GetTick>
 8013452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013454:	e011      	b.n	801347a <HAL_RCC_OscConfig+0x2ce>
 8013456:	bf00      	nop
 8013458:	40023800 	.word	0x40023800
 801345c:	42470000 	.word	0x42470000
 8013460:	42470e80 	.word	0x42470e80
 8013464:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013468:	f7fe fafc 	bl	8011a64 <HAL_GetTick>
 801346c:	4602      	mov	r2, r0
 801346e:	693b      	ldr	r3, [r7, #16]
 8013470:	1ad3      	subs	r3, r2, r3
 8013472:	2b02      	cmp	r3, #2
 8013474:	d901      	bls.n	801347a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8013476:	2303      	movs	r3, #3
 8013478:	e106      	b.n	8013688 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801347a:	4b85      	ldr	r3, [pc, #532]	; (8013690 <HAL_RCC_OscConfig+0x4e4>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013482:	2b00      	cmp	r3, #0
 8013484:	d0f0      	beq.n	8013468 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	689b      	ldr	r3, [r3, #8]
 801348a:	2b01      	cmp	r3, #1
 801348c:	d106      	bne.n	801349c <HAL_RCC_OscConfig+0x2f0>
 801348e:	4b81      	ldr	r3, [pc, #516]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 8013490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013492:	4a80      	ldr	r2, [pc, #512]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 8013494:	f043 0301 	orr.w	r3, r3, #1
 8013498:	6713      	str	r3, [r2, #112]	; 0x70
 801349a:	e01c      	b.n	80134d6 <HAL_RCC_OscConfig+0x32a>
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	689b      	ldr	r3, [r3, #8]
 80134a0:	2b05      	cmp	r3, #5
 80134a2:	d10c      	bne.n	80134be <HAL_RCC_OscConfig+0x312>
 80134a4:	4b7b      	ldr	r3, [pc, #492]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 80134a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134a8:	4a7a      	ldr	r2, [pc, #488]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 80134aa:	f043 0304 	orr.w	r3, r3, #4
 80134ae:	6713      	str	r3, [r2, #112]	; 0x70
 80134b0:	4b78      	ldr	r3, [pc, #480]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 80134b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134b4:	4a77      	ldr	r2, [pc, #476]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 80134b6:	f043 0301 	orr.w	r3, r3, #1
 80134ba:	6713      	str	r3, [r2, #112]	; 0x70
 80134bc:	e00b      	b.n	80134d6 <HAL_RCC_OscConfig+0x32a>
 80134be:	4b75      	ldr	r3, [pc, #468]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 80134c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134c2:	4a74      	ldr	r2, [pc, #464]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 80134c4:	f023 0301 	bic.w	r3, r3, #1
 80134c8:	6713      	str	r3, [r2, #112]	; 0x70
 80134ca:	4b72      	ldr	r3, [pc, #456]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 80134cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134ce:	4a71      	ldr	r2, [pc, #452]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 80134d0:	f023 0304 	bic.w	r3, r3, #4
 80134d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	689b      	ldr	r3, [r3, #8]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d015      	beq.n	801350a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80134de:	f7fe fac1 	bl	8011a64 <HAL_GetTick>
 80134e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80134e4:	e00a      	b.n	80134fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80134e6:	f7fe fabd 	bl	8011a64 <HAL_GetTick>
 80134ea:	4602      	mov	r2, r0
 80134ec:	693b      	ldr	r3, [r7, #16]
 80134ee:	1ad3      	subs	r3, r2, r3
 80134f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80134f4:	4293      	cmp	r3, r2
 80134f6:	d901      	bls.n	80134fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80134f8:	2303      	movs	r3, #3
 80134fa:	e0c5      	b.n	8013688 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80134fc:	4b65      	ldr	r3, [pc, #404]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 80134fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013500:	f003 0302 	and.w	r3, r3, #2
 8013504:	2b00      	cmp	r3, #0
 8013506:	d0ee      	beq.n	80134e6 <HAL_RCC_OscConfig+0x33a>
 8013508:	e014      	b.n	8013534 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801350a:	f7fe faab 	bl	8011a64 <HAL_GetTick>
 801350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013510:	e00a      	b.n	8013528 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013512:	f7fe faa7 	bl	8011a64 <HAL_GetTick>
 8013516:	4602      	mov	r2, r0
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	1ad3      	subs	r3, r2, r3
 801351c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013520:	4293      	cmp	r3, r2
 8013522:	d901      	bls.n	8013528 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8013524:	2303      	movs	r3, #3
 8013526:	e0af      	b.n	8013688 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013528:	4b5a      	ldr	r3, [pc, #360]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 801352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801352c:	f003 0302 	and.w	r3, r3, #2
 8013530:	2b00      	cmp	r3, #0
 8013532:	d1ee      	bne.n	8013512 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013534:	7dfb      	ldrb	r3, [r7, #23]
 8013536:	2b01      	cmp	r3, #1
 8013538:	d105      	bne.n	8013546 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801353a:	4b56      	ldr	r3, [pc, #344]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 801353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801353e:	4a55      	ldr	r2, [pc, #340]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 8013540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013544:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	699b      	ldr	r3, [r3, #24]
 801354a:	2b00      	cmp	r3, #0
 801354c:	f000 809b 	beq.w	8013686 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013550:	4b50      	ldr	r3, [pc, #320]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 8013552:	689b      	ldr	r3, [r3, #8]
 8013554:	f003 030c 	and.w	r3, r3, #12
 8013558:	2b08      	cmp	r3, #8
 801355a:	d05c      	beq.n	8013616 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	699b      	ldr	r3, [r3, #24]
 8013560:	2b02      	cmp	r3, #2
 8013562:	d141      	bne.n	80135e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013564:	4b4c      	ldr	r3, [pc, #304]	; (8013698 <HAL_RCC_OscConfig+0x4ec>)
 8013566:	2200      	movs	r2, #0
 8013568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801356a:	f7fe fa7b 	bl	8011a64 <HAL_GetTick>
 801356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013570:	e008      	b.n	8013584 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013572:	f7fe fa77 	bl	8011a64 <HAL_GetTick>
 8013576:	4602      	mov	r2, r0
 8013578:	693b      	ldr	r3, [r7, #16]
 801357a:	1ad3      	subs	r3, r2, r3
 801357c:	2b02      	cmp	r3, #2
 801357e:	d901      	bls.n	8013584 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8013580:	2303      	movs	r3, #3
 8013582:	e081      	b.n	8013688 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013584:	4b43      	ldr	r3, [pc, #268]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801358c:	2b00      	cmp	r3, #0
 801358e:	d1f0      	bne.n	8013572 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	69da      	ldr	r2, [r3, #28]
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6a1b      	ldr	r3, [r3, #32]
 8013598:	431a      	orrs	r2, r3
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801359e:	019b      	lsls	r3, r3, #6
 80135a0:	431a      	orrs	r2, r3
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135a6:	085b      	lsrs	r3, r3, #1
 80135a8:	3b01      	subs	r3, #1
 80135aa:	041b      	lsls	r3, r3, #16
 80135ac:	431a      	orrs	r2, r3
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135b2:	061b      	lsls	r3, r3, #24
 80135b4:	4937      	ldr	r1, [pc, #220]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 80135b6:	4313      	orrs	r3, r2
 80135b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80135ba:	4b37      	ldr	r3, [pc, #220]	; (8013698 <HAL_RCC_OscConfig+0x4ec>)
 80135bc:	2201      	movs	r2, #1
 80135be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80135c0:	f7fe fa50 	bl	8011a64 <HAL_GetTick>
 80135c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80135c6:	e008      	b.n	80135da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80135c8:	f7fe fa4c 	bl	8011a64 <HAL_GetTick>
 80135cc:	4602      	mov	r2, r0
 80135ce:	693b      	ldr	r3, [r7, #16]
 80135d0:	1ad3      	subs	r3, r2, r3
 80135d2:	2b02      	cmp	r3, #2
 80135d4:	d901      	bls.n	80135da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80135d6:	2303      	movs	r3, #3
 80135d8:	e056      	b.n	8013688 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80135da:	4b2e      	ldr	r3, [pc, #184]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d0f0      	beq.n	80135c8 <HAL_RCC_OscConfig+0x41c>
 80135e6:	e04e      	b.n	8013686 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80135e8:	4b2b      	ldr	r3, [pc, #172]	; (8013698 <HAL_RCC_OscConfig+0x4ec>)
 80135ea:	2200      	movs	r2, #0
 80135ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80135ee:	f7fe fa39 	bl	8011a64 <HAL_GetTick>
 80135f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80135f4:	e008      	b.n	8013608 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80135f6:	f7fe fa35 	bl	8011a64 <HAL_GetTick>
 80135fa:	4602      	mov	r2, r0
 80135fc:	693b      	ldr	r3, [r7, #16]
 80135fe:	1ad3      	subs	r3, r2, r3
 8013600:	2b02      	cmp	r3, #2
 8013602:	d901      	bls.n	8013608 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8013604:	2303      	movs	r3, #3
 8013606:	e03f      	b.n	8013688 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013608:	4b22      	ldr	r3, [pc, #136]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013610:	2b00      	cmp	r3, #0
 8013612:	d1f0      	bne.n	80135f6 <HAL_RCC_OscConfig+0x44a>
 8013614:	e037      	b.n	8013686 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	699b      	ldr	r3, [r3, #24]
 801361a:	2b01      	cmp	r3, #1
 801361c:	d101      	bne.n	8013622 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801361e:	2301      	movs	r3, #1
 8013620:	e032      	b.n	8013688 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013622:	4b1c      	ldr	r3, [pc, #112]	; (8013694 <HAL_RCC_OscConfig+0x4e8>)
 8013624:	685b      	ldr	r3, [r3, #4]
 8013626:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	699b      	ldr	r3, [r3, #24]
 801362c:	2b01      	cmp	r3, #1
 801362e:	d028      	beq.n	8013682 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801363a:	429a      	cmp	r2, r3
 801363c:	d121      	bne.n	8013682 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013648:	429a      	cmp	r2, r3
 801364a:	d11a      	bne.n	8013682 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801364c:	68fa      	ldr	r2, [r7, #12]
 801364e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013652:	4013      	ands	r3, r2
 8013654:	687a      	ldr	r2, [r7, #4]
 8013656:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013658:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801365a:	4293      	cmp	r3, r2
 801365c:	d111      	bne.n	8013682 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013668:	085b      	lsrs	r3, r3, #1
 801366a:	3b01      	subs	r3, #1
 801366c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801366e:	429a      	cmp	r2, r3
 8013670:	d107      	bne.n	8013682 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801367c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801367e:	429a      	cmp	r2, r3
 8013680:	d001      	beq.n	8013686 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8013682:	2301      	movs	r3, #1
 8013684:	e000      	b.n	8013688 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8013686:	2300      	movs	r3, #0
}
 8013688:	4618      	mov	r0, r3
 801368a:	3718      	adds	r7, #24
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}
 8013690:	40007000 	.word	0x40007000
 8013694:	40023800 	.word	0x40023800
 8013698:	42470060 	.word	0x42470060

0801369c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b084      	sub	sp, #16
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
 80136a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d101      	bne.n	80136b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80136ac:	2301      	movs	r3, #1
 80136ae:	e0cc      	b.n	801384a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80136b0:	4b68      	ldr	r3, [pc, #416]	; (8013854 <HAL_RCC_ClockConfig+0x1b8>)
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	f003 0307 	and.w	r3, r3, #7
 80136b8:	683a      	ldr	r2, [r7, #0]
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d90c      	bls.n	80136d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80136be:	4b65      	ldr	r3, [pc, #404]	; (8013854 <HAL_RCC_ClockConfig+0x1b8>)
 80136c0:	683a      	ldr	r2, [r7, #0]
 80136c2:	b2d2      	uxtb	r2, r2
 80136c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80136c6:	4b63      	ldr	r3, [pc, #396]	; (8013854 <HAL_RCC_ClockConfig+0x1b8>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	f003 0307 	and.w	r3, r3, #7
 80136ce:	683a      	ldr	r2, [r7, #0]
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d001      	beq.n	80136d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80136d4:	2301      	movs	r3, #1
 80136d6:	e0b8      	b.n	801384a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	f003 0302 	and.w	r3, r3, #2
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d020      	beq.n	8013726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	f003 0304 	and.w	r3, r3, #4
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d005      	beq.n	80136fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80136f0:	4b59      	ldr	r3, [pc, #356]	; (8013858 <HAL_RCC_ClockConfig+0x1bc>)
 80136f2:	689b      	ldr	r3, [r3, #8]
 80136f4:	4a58      	ldr	r2, [pc, #352]	; (8013858 <HAL_RCC_ClockConfig+0x1bc>)
 80136f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80136fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	f003 0308 	and.w	r3, r3, #8
 8013704:	2b00      	cmp	r3, #0
 8013706:	d005      	beq.n	8013714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013708:	4b53      	ldr	r3, [pc, #332]	; (8013858 <HAL_RCC_ClockConfig+0x1bc>)
 801370a:	689b      	ldr	r3, [r3, #8]
 801370c:	4a52      	ldr	r2, [pc, #328]	; (8013858 <HAL_RCC_ClockConfig+0x1bc>)
 801370e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013714:	4b50      	ldr	r3, [pc, #320]	; (8013858 <HAL_RCC_ClockConfig+0x1bc>)
 8013716:	689b      	ldr	r3, [r3, #8]
 8013718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	689b      	ldr	r3, [r3, #8]
 8013720:	494d      	ldr	r1, [pc, #308]	; (8013858 <HAL_RCC_ClockConfig+0x1bc>)
 8013722:	4313      	orrs	r3, r2
 8013724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	f003 0301 	and.w	r3, r3, #1
 801372e:	2b00      	cmp	r3, #0
 8013730:	d044      	beq.n	80137bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	685b      	ldr	r3, [r3, #4]
 8013736:	2b01      	cmp	r3, #1
 8013738:	d107      	bne.n	801374a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801373a:	4b47      	ldr	r3, [pc, #284]	; (8013858 <HAL_RCC_ClockConfig+0x1bc>)
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013742:	2b00      	cmp	r3, #0
 8013744:	d119      	bne.n	801377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013746:	2301      	movs	r3, #1
 8013748:	e07f      	b.n	801384a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	685b      	ldr	r3, [r3, #4]
 801374e:	2b02      	cmp	r3, #2
 8013750:	d003      	beq.n	801375a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013756:	2b03      	cmp	r3, #3
 8013758:	d107      	bne.n	801376a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801375a:	4b3f      	ldr	r3, [pc, #252]	; (8013858 <HAL_RCC_ClockConfig+0x1bc>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013762:	2b00      	cmp	r3, #0
 8013764:	d109      	bne.n	801377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013766:	2301      	movs	r3, #1
 8013768:	e06f      	b.n	801384a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801376a:	4b3b      	ldr	r3, [pc, #236]	; (8013858 <HAL_RCC_ClockConfig+0x1bc>)
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	f003 0302 	and.w	r3, r3, #2
 8013772:	2b00      	cmp	r3, #0
 8013774:	d101      	bne.n	801377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013776:	2301      	movs	r3, #1
 8013778:	e067      	b.n	801384a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801377a:	4b37      	ldr	r3, [pc, #220]	; (8013858 <HAL_RCC_ClockConfig+0x1bc>)
 801377c:	689b      	ldr	r3, [r3, #8]
 801377e:	f023 0203 	bic.w	r2, r3, #3
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	685b      	ldr	r3, [r3, #4]
 8013786:	4934      	ldr	r1, [pc, #208]	; (8013858 <HAL_RCC_ClockConfig+0x1bc>)
 8013788:	4313      	orrs	r3, r2
 801378a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801378c:	f7fe f96a 	bl	8011a64 <HAL_GetTick>
 8013790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013792:	e00a      	b.n	80137aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013794:	f7fe f966 	bl	8011a64 <HAL_GetTick>
 8013798:	4602      	mov	r2, r0
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	1ad3      	subs	r3, r2, r3
 801379e:	f241 3288 	movw	r2, #5000	; 0x1388
 80137a2:	4293      	cmp	r3, r2
 80137a4:	d901      	bls.n	80137aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80137a6:	2303      	movs	r3, #3
 80137a8:	e04f      	b.n	801384a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80137aa:	4b2b      	ldr	r3, [pc, #172]	; (8013858 <HAL_RCC_ClockConfig+0x1bc>)
 80137ac:	689b      	ldr	r3, [r3, #8]
 80137ae:	f003 020c 	and.w	r2, r3, #12
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	685b      	ldr	r3, [r3, #4]
 80137b6:	009b      	lsls	r3, r3, #2
 80137b8:	429a      	cmp	r2, r3
 80137ba:	d1eb      	bne.n	8013794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80137bc:	4b25      	ldr	r3, [pc, #148]	; (8013854 <HAL_RCC_ClockConfig+0x1b8>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	f003 0307 	and.w	r3, r3, #7
 80137c4:	683a      	ldr	r2, [r7, #0]
 80137c6:	429a      	cmp	r2, r3
 80137c8:	d20c      	bcs.n	80137e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80137ca:	4b22      	ldr	r3, [pc, #136]	; (8013854 <HAL_RCC_ClockConfig+0x1b8>)
 80137cc:	683a      	ldr	r2, [r7, #0]
 80137ce:	b2d2      	uxtb	r2, r2
 80137d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80137d2:	4b20      	ldr	r3, [pc, #128]	; (8013854 <HAL_RCC_ClockConfig+0x1b8>)
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	f003 0307 	and.w	r3, r3, #7
 80137da:	683a      	ldr	r2, [r7, #0]
 80137dc:	429a      	cmp	r2, r3
 80137de:	d001      	beq.n	80137e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80137e0:	2301      	movs	r3, #1
 80137e2:	e032      	b.n	801384a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	f003 0304 	and.w	r3, r3, #4
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d008      	beq.n	8013802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80137f0:	4b19      	ldr	r3, [pc, #100]	; (8013858 <HAL_RCC_ClockConfig+0x1bc>)
 80137f2:	689b      	ldr	r3, [r3, #8]
 80137f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	68db      	ldr	r3, [r3, #12]
 80137fc:	4916      	ldr	r1, [pc, #88]	; (8013858 <HAL_RCC_ClockConfig+0x1bc>)
 80137fe:	4313      	orrs	r3, r2
 8013800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	f003 0308 	and.w	r3, r3, #8
 801380a:	2b00      	cmp	r3, #0
 801380c:	d009      	beq.n	8013822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801380e:	4b12      	ldr	r3, [pc, #72]	; (8013858 <HAL_RCC_ClockConfig+0x1bc>)
 8013810:	689b      	ldr	r3, [r3, #8]
 8013812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	691b      	ldr	r3, [r3, #16]
 801381a:	00db      	lsls	r3, r3, #3
 801381c:	490e      	ldr	r1, [pc, #56]	; (8013858 <HAL_RCC_ClockConfig+0x1bc>)
 801381e:	4313      	orrs	r3, r2
 8013820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013822:	f000 f821 	bl	8013868 <HAL_RCC_GetSysClockFreq>
 8013826:	4602      	mov	r2, r0
 8013828:	4b0b      	ldr	r3, [pc, #44]	; (8013858 <HAL_RCC_ClockConfig+0x1bc>)
 801382a:	689b      	ldr	r3, [r3, #8]
 801382c:	091b      	lsrs	r3, r3, #4
 801382e:	f003 030f 	and.w	r3, r3, #15
 8013832:	490a      	ldr	r1, [pc, #40]	; (801385c <HAL_RCC_ClockConfig+0x1c0>)
 8013834:	5ccb      	ldrb	r3, [r1, r3]
 8013836:	fa22 f303 	lsr.w	r3, r2, r3
 801383a:	4a09      	ldr	r2, [pc, #36]	; (8013860 <HAL_RCC_ClockConfig+0x1c4>)
 801383c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801383e:	4b09      	ldr	r3, [pc, #36]	; (8013864 <HAL_RCC_ClockConfig+0x1c8>)
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	4618      	mov	r0, r3
 8013844:	f7fe f8ca 	bl	80119dc <HAL_InitTick>

  return HAL_OK;
 8013848:	2300      	movs	r3, #0
}
 801384a:	4618      	mov	r0, r3
 801384c:	3710      	adds	r7, #16
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}
 8013852:	bf00      	nop
 8013854:	40023c00 	.word	0x40023c00
 8013858:	40023800 	.word	0x40023800
 801385c:	08015230 	.word	0x08015230
 8013860:	20000010 	.word	0x20000010
 8013864:	20000078 	.word	0x20000078

08013868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013868:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801386c:	b084      	sub	sp, #16
 801386e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013870:	2300      	movs	r3, #0
 8013872:	607b      	str	r3, [r7, #4]
 8013874:	2300      	movs	r3, #0
 8013876:	60fb      	str	r3, [r7, #12]
 8013878:	2300      	movs	r3, #0
 801387a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801387c:	2300      	movs	r3, #0
 801387e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013880:	4b67      	ldr	r3, [pc, #412]	; (8013a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013882:	689b      	ldr	r3, [r3, #8]
 8013884:	f003 030c 	and.w	r3, r3, #12
 8013888:	2b08      	cmp	r3, #8
 801388a:	d00d      	beq.n	80138a8 <HAL_RCC_GetSysClockFreq+0x40>
 801388c:	2b08      	cmp	r3, #8
 801388e:	f200 80bd 	bhi.w	8013a0c <HAL_RCC_GetSysClockFreq+0x1a4>
 8013892:	2b00      	cmp	r3, #0
 8013894:	d002      	beq.n	801389c <HAL_RCC_GetSysClockFreq+0x34>
 8013896:	2b04      	cmp	r3, #4
 8013898:	d003      	beq.n	80138a2 <HAL_RCC_GetSysClockFreq+0x3a>
 801389a:	e0b7      	b.n	8013a0c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801389c:	4b61      	ldr	r3, [pc, #388]	; (8013a24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 801389e:	60bb      	str	r3, [r7, #8]
       break;
 80138a0:	e0b7      	b.n	8013a12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80138a2:	4b61      	ldr	r3, [pc, #388]	; (8013a28 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80138a4:	60bb      	str	r3, [r7, #8]
      break;
 80138a6:	e0b4      	b.n	8013a12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80138a8:	4b5d      	ldr	r3, [pc, #372]	; (8013a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80138aa:	685b      	ldr	r3, [r3, #4]
 80138ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80138b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80138b2:	4b5b      	ldr	r3, [pc, #364]	; (8013a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80138b4:	685b      	ldr	r3, [r3, #4]
 80138b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d04d      	beq.n	801395a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80138be:	4b58      	ldr	r3, [pc, #352]	; (8013a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80138c0:	685b      	ldr	r3, [r3, #4]
 80138c2:	099b      	lsrs	r3, r3, #6
 80138c4:	461a      	mov	r2, r3
 80138c6:	f04f 0300 	mov.w	r3, #0
 80138ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80138ce:	f04f 0100 	mov.w	r1, #0
 80138d2:	ea02 0800 	and.w	r8, r2, r0
 80138d6:	ea03 0901 	and.w	r9, r3, r1
 80138da:	4640      	mov	r0, r8
 80138dc:	4649      	mov	r1, r9
 80138de:	f04f 0200 	mov.w	r2, #0
 80138e2:	f04f 0300 	mov.w	r3, #0
 80138e6:	014b      	lsls	r3, r1, #5
 80138e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80138ec:	0142      	lsls	r2, r0, #5
 80138ee:	4610      	mov	r0, r2
 80138f0:	4619      	mov	r1, r3
 80138f2:	ebb0 0008 	subs.w	r0, r0, r8
 80138f6:	eb61 0109 	sbc.w	r1, r1, r9
 80138fa:	f04f 0200 	mov.w	r2, #0
 80138fe:	f04f 0300 	mov.w	r3, #0
 8013902:	018b      	lsls	r3, r1, #6
 8013904:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8013908:	0182      	lsls	r2, r0, #6
 801390a:	1a12      	subs	r2, r2, r0
 801390c:	eb63 0301 	sbc.w	r3, r3, r1
 8013910:	f04f 0000 	mov.w	r0, #0
 8013914:	f04f 0100 	mov.w	r1, #0
 8013918:	00d9      	lsls	r1, r3, #3
 801391a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801391e:	00d0      	lsls	r0, r2, #3
 8013920:	4602      	mov	r2, r0
 8013922:	460b      	mov	r3, r1
 8013924:	eb12 0208 	adds.w	r2, r2, r8
 8013928:	eb43 0309 	adc.w	r3, r3, r9
 801392c:	f04f 0000 	mov.w	r0, #0
 8013930:	f04f 0100 	mov.w	r1, #0
 8013934:	0259      	lsls	r1, r3, #9
 8013936:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 801393a:	0250      	lsls	r0, r2, #9
 801393c:	4602      	mov	r2, r0
 801393e:	460b      	mov	r3, r1
 8013940:	4610      	mov	r0, r2
 8013942:	4619      	mov	r1, r3
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	461a      	mov	r2, r3
 8013948:	f04f 0300 	mov.w	r3, #0
 801394c:	f7ec fce8 	bl	8000320 <__aeabi_uldivmod>
 8013950:	4602      	mov	r2, r0
 8013952:	460b      	mov	r3, r1
 8013954:	4613      	mov	r3, r2
 8013956:	60fb      	str	r3, [r7, #12]
 8013958:	e04a      	b.n	80139f0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801395a:	4b31      	ldr	r3, [pc, #196]	; (8013a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801395c:	685b      	ldr	r3, [r3, #4]
 801395e:	099b      	lsrs	r3, r3, #6
 8013960:	461a      	mov	r2, r3
 8013962:	f04f 0300 	mov.w	r3, #0
 8013966:	f240 10ff 	movw	r0, #511	; 0x1ff
 801396a:	f04f 0100 	mov.w	r1, #0
 801396e:	ea02 0400 	and.w	r4, r2, r0
 8013972:	ea03 0501 	and.w	r5, r3, r1
 8013976:	4620      	mov	r0, r4
 8013978:	4629      	mov	r1, r5
 801397a:	f04f 0200 	mov.w	r2, #0
 801397e:	f04f 0300 	mov.w	r3, #0
 8013982:	014b      	lsls	r3, r1, #5
 8013984:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8013988:	0142      	lsls	r2, r0, #5
 801398a:	4610      	mov	r0, r2
 801398c:	4619      	mov	r1, r3
 801398e:	1b00      	subs	r0, r0, r4
 8013990:	eb61 0105 	sbc.w	r1, r1, r5
 8013994:	f04f 0200 	mov.w	r2, #0
 8013998:	f04f 0300 	mov.w	r3, #0
 801399c:	018b      	lsls	r3, r1, #6
 801399e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80139a2:	0182      	lsls	r2, r0, #6
 80139a4:	1a12      	subs	r2, r2, r0
 80139a6:	eb63 0301 	sbc.w	r3, r3, r1
 80139aa:	f04f 0000 	mov.w	r0, #0
 80139ae:	f04f 0100 	mov.w	r1, #0
 80139b2:	00d9      	lsls	r1, r3, #3
 80139b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80139b8:	00d0      	lsls	r0, r2, #3
 80139ba:	4602      	mov	r2, r0
 80139bc:	460b      	mov	r3, r1
 80139be:	1912      	adds	r2, r2, r4
 80139c0:	eb45 0303 	adc.w	r3, r5, r3
 80139c4:	f04f 0000 	mov.w	r0, #0
 80139c8:	f04f 0100 	mov.w	r1, #0
 80139cc:	0299      	lsls	r1, r3, #10
 80139ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80139d2:	0290      	lsls	r0, r2, #10
 80139d4:	4602      	mov	r2, r0
 80139d6:	460b      	mov	r3, r1
 80139d8:	4610      	mov	r0, r2
 80139da:	4619      	mov	r1, r3
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	461a      	mov	r2, r3
 80139e0:	f04f 0300 	mov.w	r3, #0
 80139e4:	f7ec fc9c 	bl	8000320 <__aeabi_uldivmod>
 80139e8:	4602      	mov	r2, r0
 80139ea:	460b      	mov	r3, r1
 80139ec:	4613      	mov	r3, r2
 80139ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80139f0:	4b0b      	ldr	r3, [pc, #44]	; (8013a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80139f2:	685b      	ldr	r3, [r3, #4]
 80139f4:	0c1b      	lsrs	r3, r3, #16
 80139f6:	f003 0303 	and.w	r3, r3, #3
 80139fa:	3301      	adds	r3, #1
 80139fc:	005b      	lsls	r3, r3, #1
 80139fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8013a00:	68fa      	ldr	r2, [r7, #12]
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8013a08:	60bb      	str	r3, [r7, #8]
      break;
 8013a0a:	e002      	b.n	8013a12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013a0c:	4b05      	ldr	r3, [pc, #20]	; (8013a24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8013a0e:	60bb      	str	r3, [r7, #8]
      break;
 8013a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013a12:	68bb      	ldr	r3, [r7, #8]
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	3710      	adds	r7, #16
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8013a1e:	bf00      	nop
 8013a20:	40023800 	.word	0x40023800
 8013a24:	00f42400 	.word	0x00f42400
 8013a28:	007a1200 	.word	0x007a1200

08013a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013a2c:	b480      	push	{r7}
 8013a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013a30:	4b03      	ldr	r3, [pc, #12]	; (8013a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8013a32:	681b      	ldr	r3, [r3, #0]
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	46bd      	mov	sp, r7
 8013a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3c:	4770      	bx	lr
 8013a3e:	bf00      	nop
 8013a40:	20000010 	.word	0x20000010

08013a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013a48:	f7ff fff0 	bl	8013a2c <HAL_RCC_GetHCLKFreq>
 8013a4c:	4602      	mov	r2, r0
 8013a4e:	4b05      	ldr	r3, [pc, #20]	; (8013a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013a50:	689b      	ldr	r3, [r3, #8]
 8013a52:	0a9b      	lsrs	r3, r3, #10
 8013a54:	f003 0307 	and.w	r3, r3, #7
 8013a58:	4903      	ldr	r1, [pc, #12]	; (8013a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013a5a:	5ccb      	ldrb	r3, [r1, r3]
 8013a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013a60:	4618      	mov	r0, r3
 8013a62:	bd80      	pop	{r7, pc}
 8013a64:	40023800 	.word	0x40023800
 8013a68:	08015240 	.word	0x08015240

08013a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8013a70:	f7ff ffdc 	bl	8013a2c <HAL_RCC_GetHCLKFreq>
 8013a74:	4602      	mov	r2, r0
 8013a76:	4b05      	ldr	r3, [pc, #20]	; (8013a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8013a78:	689b      	ldr	r3, [r3, #8]
 8013a7a:	0b5b      	lsrs	r3, r3, #13
 8013a7c:	f003 0307 	and.w	r3, r3, #7
 8013a80:	4903      	ldr	r1, [pc, #12]	; (8013a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013a82:	5ccb      	ldrb	r3, [r1, r3]
 8013a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	bd80      	pop	{r7, pc}
 8013a8c:	40023800 	.word	0x40023800
 8013a90:	08015240 	.word	0x08015240

08013a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b082      	sub	sp, #8
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d101      	bne.n	8013aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013aa2:	2301      	movs	r3, #1
 8013aa4:	e03f      	b.n	8013b26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013aac:	b2db      	uxtb	r3, r3
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d106      	bne.n	8013ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013aba:	6878      	ldr	r0, [r7, #4]
 8013abc:	f7ed f86c 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	2224      	movs	r2, #36	; 0x24
 8013ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	68da      	ldr	r2, [r3, #12]
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f000 f929 	bl	8013d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	691a      	ldr	r2, [r3, #16]
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	695a      	ldr	r2, [r3, #20]
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	68da      	ldr	r2, [r3, #12]
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	2200      	movs	r2, #0
 8013b12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	2220      	movs	r2, #32
 8013b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	2220      	movs	r2, #32
 8013b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8013b24:	2300      	movs	r3, #0
}
 8013b26:	4618      	mov	r0, r3
 8013b28:	3708      	adds	r7, #8
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}

08013b2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013b2e:	b580      	push	{r7, lr}
 8013b30:	b08a      	sub	sp, #40	; 0x28
 8013b32:	af02      	add	r7, sp, #8
 8013b34:	60f8      	str	r0, [r7, #12]
 8013b36:	60b9      	str	r1, [r7, #8]
 8013b38:	603b      	str	r3, [r7, #0]
 8013b3a:	4613      	mov	r3, r2
 8013b3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013b48:	b2db      	uxtb	r3, r3
 8013b4a:	2b20      	cmp	r3, #32
 8013b4c:	d17c      	bne.n	8013c48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8013b4e:	68bb      	ldr	r3, [r7, #8]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d002      	beq.n	8013b5a <HAL_UART_Transmit+0x2c>
 8013b54:	88fb      	ldrh	r3, [r7, #6]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d101      	bne.n	8013b5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8013b5a:	2301      	movs	r3, #1
 8013b5c:	e075      	b.n	8013c4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013b64:	2b01      	cmp	r3, #1
 8013b66:	d101      	bne.n	8013b6c <HAL_UART_Transmit+0x3e>
 8013b68:	2302      	movs	r3, #2
 8013b6a:	e06e      	b.n	8013c4a <HAL_UART_Transmit+0x11c>
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	2201      	movs	r2, #1
 8013b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	2200      	movs	r2, #0
 8013b78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	2221      	movs	r2, #33	; 0x21
 8013b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013b82:	f7fd ff6f 	bl	8011a64 <HAL_GetTick>
 8013b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	88fa      	ldrh	r2, [r7, #6]
 8013b8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	88fa      	ldrh	r2, [r7, #6]
 8013b92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	689b      	ldr	r3, [r3, #8]
 8013b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013b9c:	d108      	bne.n	8013bb0 <HAL_UART_Transmit+0x82>
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	691b      	ldr	r3, [r3, #16]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d104      	bne.n	8013bb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8013baa:	68bb      	ldr	r3, [r7, #8]
 8013bac:	61bb      	str	r3, [r7, #24]
 8013bae:	e003      	b.n	8013bb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8013bb0:	68bb      	ldr	r3, [r7, #8]
 8013bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	2200      	movs	r2, #0
 8013bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8013bc0:	e02a      	b.n	8013c18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013bc2:	683b      	ldr	r3, [r7, #0]
 8013bc4:	9300      	str	r3, [sp, #0]
 8013bc6:	697b      	ldr	r3, [r7, #20]
 8013bc8:	2200      	movs	r2, #0
 8013bca:	2180      	movs	r1, #128	; 0x80
 8013bcc:	68f8      	ldr	r0, [r7, #12]
 8013bce:	f000 f840 	bl	8013c52 <UART_WaitOnFlagUntilTimeout>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d001      	beq.n	8013bdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8013bd8:	2303      	movs	r3, #3
 8013bda:	e036      	b.n	8013c4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8013bdc:	69fb      	ldr	r3, [r7, #28]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d10b      	bne.n	8013bfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013be2:	69bb      	ldr	r3, [r7, #24]
 8013be4:	881b      	ldrh	r3, [r3, #0]
 8013be6:	461a      	mov	r2, r3
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013bf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8013bf2:	69bb      	ldr	r3, [r7, #24]
 8013bf4:	3302      	adds	r3, #2
 8013bf6:	61bb      	str	r3, [r7, #24]
 8013bf8:	e007      	b.n	8013c0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8013bfa:	69fb      	ldr	r3, [r7, #28]
 8013bfc:	781a      	ldrb	r2, [r3, #0]
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8013c04:	69fb      	ldr	r3, [r7, #28]
 8013c06:	3301      	adds	r3, #1
 8013c08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013c0e:	b29b      	uxth	r3, r3
 8013c10:	3b01      	subs	r3, #1
 8013c12:	b29a      	uxth	r2, r3
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013c1c:	b29b      	uxth	r3, r3
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d1cf      	bne.n	8013bc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	9300      	str	r3, [sp, #0]
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	2200      	movs	r2, #0
 8013c2a:	2140      	movs	r1, #64	; 0x40
 8013c2c:	68f8      	ldr	r0, [r7, #12]
 8013c2e:	f000 f810 	bl	8013c52 <UART_WaitOnFlagUntilTimeout>
 8013c32:	4603      	mov	r3, r0
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d001      	beq.n	8013c3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8013c38:	2303      	movs	r3, #3
 8013c3a:	e006      	b.n	8013c4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	2220      	movs	r2, #32
 8013c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8013c44:	2300      	movs	r3, #0
 8013c46:	e000      	b.n	8013c4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8013c48:	2302      	movs	r3, #2
  }
}
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	3720      	adds	r7, #32
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	bd80      	pop	{r7, pc}

08013c52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8013c52:	b580      	push	{r7, lr}
 8013c54:	b090      	sub	sp, #64	; 0x40
 8013c56:	af00      	add	r7, sp, #0
 8013c58:	60f8      	str	r0, [r7, #12]
 8013c5a:	60b9      	str	r1, [r7, #8]
 8013c5c:	603b      	str	r3, [r7, #0]
 8013c5e:	4613      	mov	r3, r2
 8013c60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013c62:	e050      	b.n	8013d06 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c6a:	d04c      	beq.n	8013d06 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8013c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d007      	beq.n	8013c82 <UART_WaitOnFlagUntilTimeout+0x30>
 8013c72:	f7fd fef7 	bl	8011a64 <HAL_GetTick>
 8013c76:	4602      	mov	r2, r0
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	1ad3      	subs	r3, r2, r3
 8013c7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d241      	bcs.n	8013d06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	330c      	adds	r3, #12
 8013c88:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c8c:	e853 3f00 	ldrex	r3, [r3]
 8013c90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	330c      	adds	r3, #12
 8013ca0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013ca2:	637a      	str	r2, [r7, #52]	; 0x34
 8013ca4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ca6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013ca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013caa:	e841 2300 	strex	r3, r2, [r1]
 8013cae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d1e5      	bne.n	8013c82 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	3314      	adds	r3, #20
 8013cbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cbe:	697b      	ldr	r3, [r7, #20]
 8013cc0:	e853 3f00 	ldrex	r3, [r3]
 8013cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8013cc6:	693b      	ldr	r3, [r7, #16]
 8013cc8:	f023 0301 	bic.w	r3, r3, #1
 8013ccc:	63bb      	str	r3, [r7, #56]	; 0x38
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	3314      	adds	r3, #20
 8013cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cd6:	623a      	str	r2, [r7, #32]
 8013cd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cda:	69f9      	ldr	r1, [r7, #28]
 8013cdc:	6a3a      	ldr	r2, [r7, #32]
 8013cde:	e841 2300 	strex	r3, r2, [r1]
 8013ce2:	61bb      	str	r3, [r7, #24]
   return(result);
 8013ce4:	69bb      	ldr	r3, [r7, #24]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d1e5      	bne.n	8013cb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	2220      	movs	r2, #32
 8013cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	2220      	movs	r2, #32
 8013cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8013d02:	2303      	movs	r3, #3
 8013d04:	e00f      	b.n	8013d26 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	681a      	ldr	r2, [r3, #0]
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	4013      	ands	r3, r2
 8013d10:	68ba      	ldr	r2, [r7, #8]
 8013d12:	429a      	cmp	r2, r3
 8013d14:	bf0c      	ite	eq
 8013d16:	2301      	moveq	r3, #1
 8013d18:	2300      	movne	r3, #0
 8013d1a:	b2db      	uxtb	r3, r3
 8013d1c:	461a      	mov	r2, r3
 8013d1e:	79fb      	ldrb	r3, [r7, #7]
 8013d20:	429a      	cmp	r2, r3
 8013d22:	d09f      	beq.n	8013c64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013d24:	2300      	movs	r3, #0
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	3740      	adds	r7, #64	; 0x40
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}
	...

08013d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d34:	b09f      	sub	sp, #124	; 0x7c
 8013d36:	af00      	add	r7, sp, #0
 8013d38:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	691b      	ldr	r3, [r3, #16]
 8013d40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8013d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d46:	68d9      	ldr	r1, [r3, #12]
 8013d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d4a:	681a      	ldr	r2, [r3, #0]
 8013d4c:	ea40 0301 	orr.w	r3, r0, r1
 8013d50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8013d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d54:	689a      	ldr	r2, [r3, #8]
 8013d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d58:	691b      	ldr	r3, [r3, #16]
 8013d5a:	431a      	orrs	r2, r3
 8013d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d5e:	695b      	ldr	r3, [r3, #20]
 8013d60:	431a      	orrs	r2, r3
 8013d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d64:	69db      	ldr	r3, [r3, #28]
 8013d66:	4313      	orrs	r3, r2
 8013d68:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8013d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	68db      	ldr	r3, [r3, #12]
 8013d70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8013d74:	f021 010c 	bic.w	r1, r1, #12
 8013d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d7a:	681a      	ldr	r2, [r3, #0]
 8013d7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013d7e:	430b      	orrs	r3, r1
 8013d80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8013d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	695b      	ldr	r3, [r3, #20]
 8013d88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8013d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d8e:	6999      	ldr	r1, [r3, #24]
 8013d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d92:	681a      	ldr	r2, [r3, #0]
 8013d94:	ea40 0301 	orr.w	r3, r0, r1
 8013d98:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8013d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d9c:	681a      	ldr	r2, [r3, #0]
 8013d9e:	4bc5      	ldr	r3, [pc, #788]	; (80140b4 <UART_SetConfig+0x384>)
 8013da0:	429a      	cmp	r2, r3
 8013da2:	d004      	beq.n	8013dae <UART_SetConfig+0x7e>
 8013da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013da6:	681a      	ldr	r2, [r3, #0]
 8013da8:	4bc3      	ldr	r3, [pc, #780]	; (80140b8 <UART_SetConfig+0x388>)
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d103      	bne.n	8013db6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8013dae:	f7ff fe5d 	bl	8013a6c <HAL_RCC_GetPCLK2Freq>
 8013db2:	6778      	str	r0, [r7, #116]	; 0x74
 8013db4:	e002      	b.n	8013dbc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8013db6:	f7ff fe45 	bl	8013a44 <HAL_RCC_GetPCLK1Freq>
 8013dba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013dbe:	69db      	ldr	r3, [r3, #28]
 8013dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013dc4:	f040 80b6 	bne.w	8013f34 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013dca:	461c      	mov	r4, r3
 8013dcc:	f04f 0500 	mov.w	r5, #0
 8013dd0:	4622      	mov	r2, r4
 8013dd2:	462b      	mov	r3, r5
 8013dd4:	1891      	adds	r1, r2, r2
 8013dd6:	6439      	str	r1, [r7, #64]	; 0x40
 8013dd8:	415b      	adcs	r3, r3
 8013dda:	647b      	str	r3, [r7, #68]	; 0x44
 8013ddc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013de0:	1912      	adds	r2, r2, r4
 8013de2:	eb45 0303 	adc.w	r3, r5, r3
 8013de6:	f04f 0000 	mov.w	r0, #0
 8013dea:	f04f 0100 	mov.w	r1, #0
 8013dee:	00d9      	lsls	r1, r3, #3
 8013df0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013df4:	00d0      	lsls	r0, r2, #3
 8013df6:	4602      	mov	r2, r0
 8013df8:	460b      	mov	r3, r1
 8013dfa:	1911      	adds	r1, r2, r4
 8013dfc:	6639      	str	r1, [r7, #96]	; 0x60
 8013dfe:	416b      	adcs	r3, r5
 8013e00:	667b      	str	r3, [r7, #100]	; 0x64
 8013e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e04:	685b      	ldr	r3, [r3, #4]
 8013e06:	461a      	mov	r2, r3
 8013e08:	f04f 0300 	mov.w	r3, #0
 8013e0c:	1891      	adds	r1, r2, r2
 8013e0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8013e10:	415b      	adcs	r3, r3
 8013e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013e14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8013e18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8013e1c:	f7ec fa80 	bl	8000320 <__aeabi_uldivmod>
 8013e20:	4602      	mov	r2, r0
 8013e22:	460b      	mov	r3, r1
 8013e24:	4ba5      	ldr	r3, [pc, #660]	; (80140bc <UART_SetConfig+0x38c>)
 8013e26:	fba3 2302 	umull	r2, r3, r3, r2
 8013e2a:	095b      	lsrs	r3, r3, #5
 8013e2c:	011e      	lsls	r6, r3, #4
 8013e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e30:	461c      	mov	r4, r3
 8013e32:	f04f 0500 	mov.w	r5, #0
 8013e36:	4622      	mov	r2, r4
 8013e38:	462b      	mov	r3, r5
 8013e3a:	1891      	adds	r1, r2, r2
 8013e3c:	6339      	str	r1, [r7, #48]	; 0x30
 8013e3e:	415b      	adcs	r3, r3
 8013e40:	637b      	str	r3, [r7, #52]	; 0x34
 8013e42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8013e46:	1912      	adds	r2, r2, r4
 8013e48:	eb45 0303 	adc.w	r3, r5, r3
 8013e4c:	f04f 0000 	mov.w	r0, #0
 8013e50:	f04f 0100 	mov.w	r1, #0
 8013e54:	00d9      	lsls	r1, r3, #3
 8013e56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013e5a:	00d0      	lsls	r0, r2, #3
 8013e5c:	4602      	mov	r2, r0
 8013e5e:	460b      	mov	r3, r1
 8013e60:	1911      	adds	r1, r2, r4
 8013e62:	65b9      	str	r1, [r7, #88]	; 0x58
 8013e64:	416b      	adcs	r3, r5
 8013e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e6a:	685b      	ldr	r3, [r3, #4]
 8013e6c:	461a      	mov	r2, r3
 8013e6e:	f04f 0300 	mov.w	r3, #0
 8013e72:	1891      	adds	r1, r2, r2
 8013e74:	62b9      	str	r1, [r7, #40]	; 0x28
 8013e76:	415b      	adcs	r3, r3
 8013e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013e7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8013e82:	f7ec fa4d 	bl	8000320 <__aeabi_uldivmod>
 8013e86:	4602      	mov	r2, r0
 8013e88:	460b      	mov	r3, r1
 8013e8a:	4b8c      	ldr	r3, [pc, #560]	; (80140bc <UART_SetConfig+0x38c>)
 8013e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8013e90:	095b      	lsrs	r3, r3, #5
 8013e92:	2164      	movs	r1, #100	; 0x64
 8013e94:	fb01 f303 	mul.w	r3, r1, r3
 8013e98:	1ad3      	subs	r3, r2, r3
 8013e9a:	00db      	lsls	r3, r3, #3
 8013e9c:	3332      	adds	r3, #50	; 0x32
 8013e9e:	4a87      	ldr	r2, [pc, #540]	; (80140bc <UART_SetConfig+0x38c>)
 8013ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8013ea4:	095b      	lsrs	r3, r3, #5
 8013ea6:	005b      	lsls	r3, r3, #1
 8013ea8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013eac:	441e      	add	r6, r3
 8013eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f04f 0100 	mov.w	r1, #0
 8013eb6:	4602      	mov	r2, r0
 8013eb8:	460b      	mov	r3, r1
 8013eba:	1894      	adds	r4, r2, r2
 8013ebc:	623c      	str	r4, [r7, #32]
 8013ebe:	415b      	adcs	r3, r3
 8013ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8013ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8013ec6:	1812      	adds	r2, r2, r0
 8013ec8:	eb41 0303 	adc.w	r3, r1, r3
 8013ecc:	f04f 0400 	mov.w	r4, #0
 8013ed0:	f04f 0500 	mov.w	r5, #0
 8013ed4:	00dd      	lsls	r5, r3, #3
 8013ed6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8013eda:	00d4      	lsls	r4, r2, #3
 8013edc:	4622      	mov	r2, r4
 8013ede:	462b      	mov	r3, r5
 8013ee0:	1814      	adds	r4, r2, r0
 8013ee2:	653c      	str	r4, [r7, #80]	; 0x50
 8013ee4:	414b      	adcs	r3, r1
 8013ee6:	657b      	str	r3, [r7, #84]	; 0x54
 8013ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013eea:	685b      	ldr	r3, [r3, #4]
 8013eec:	461a      	mov	r2, r3
 8013eee:	f04f 0300 	mov.w	r3, #0
 8013ef2:	1891      	adds	r1, r2, r2
 8013ef4:	61b9      	str	r1, [r7, #24]
 8013ef6:	415b      	adcs	r3, r3
 8013ef8:	61fb      	str	r3, [r7, #28]
 8013efa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013efe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8013f02:	f7ec fa0d 	bl	8000320 <__aeabi_uldivmod>
 8013f06:	4602      	mov	r2, r0
 8013f08:	460b      	mov	r3, r1
 8013f0a:	4b6c      	ldr	r3, [pc, #432]	; (80140bc <UART_SetConfig+0x38c>)
 8013f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8013f10:	095b      	lsrs	r3, r3, #5
 8013f12:	2164      	movs	r1, #100	; 0x64
 8013f14:	fb01 f303 	mul.w	r3, r1, r3
 8013f18:	1ad3      	subs	r3, r2, r3
 8013f1a:	00db      	lsls	r3, r3, #3
 8013f1c:	3332      	adds	r3, #50	; 0x32
 8013f1e:	4a67      	ldr	r2, [pc, #412]	; (80140bc <UART_SetConfig+0x38c>)
 8013f20:	fba2 2303 	umull	r2, r3, r2, r3
 8013f24:	095b      	lsrs	r3, r3, #5
 8013f26:	f003 0207 	and.w	r2, r3, #7
 8013f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	4432      	add	r2, r6
 8013f30:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8013f32:	e0b9      	b.n	80140a8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013f36:	461c      	mov	r4, r3
 8013f38:	f04f 0500 	mov.w	r5, #0
 8013f3c:	4622      	mov	r2, r4
 8013f3e:	462b      	mov	r3, r5
 8013f40:	1891      	adds	r1, r2, r2
 8013f42:	6139      	str	r1, [r7, #16]
 8013f44:	415b      	adcs	r3, r3
 8013f46:	617b      	str	r3, [r7, #20]
 8013f48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013f4c:	1912      	adds	r2, r2, r4
 8013f4e:	eb45 0303 	adc.w	r3, r5, r3
 8013f52:	f04f 0000 	mov.w	r0, #0
 8013f56:	f04f 0100 	mov.w	r1, #0
 8013f5a:	00d9      	lsls	r1, r3, #3
 8013f5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013f60:	00d0      	lsls	r0, r2, #3
 8013f62:	4602      	mov	r2, r0
 8013f64:	460b      	mov	r3, r1
 8013f66:	eb12 0804 	adds.w	r8, r2, r4
 8013f6a:	eb43 0905 	adc.w	r9, r3, r5
 8013f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013f70:	685b      	ldr	r3, [r3, #4]
 8013f72:	4618      	mov	r0, r3
 8013f74:	f04f 0100 	mov.w	r1, #0
 8013f78:	f04f 0200 	mov.w	r2, #0
 8013f7c:	f04f 0300 	mov.w	r3, #0
 8013f80:	008b      	lsls	r3, r1, #2
 8013f82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8013f86:	0082      	lsls	r2, r0, #2
 8013f88:	4640      	mov	r0, r8
 8013f8a:	4649      	mov	r1, r9
 8013f8c:	f7ec f9c8 	bl	8000320 <__aeabi_uldivmod>
 8013f90:	4602      	mov	r2, r0
 8013f92:	460b      	mov	r3, r1
 8013f94:	4b49      	ldr	r3, [pc, #292]	; (80140bc <UART_SetConfig+0x38c>)
 8013f96:	fba3 2302 	umull	r2, r3, r3, r2
 8013f9a:	095b      	lsrs	r3, r3, #5
 8013f9c:	011e      	lsls	r6, r3, #4
 8013f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f04f 0100 	mov.w	r1, #0
 8013fa6:	4602      	mov	r2, r0
 8013fa8:	460b      	mov	r3, r1
 8013faa:	1894      	adds	r4, r2, r2
 8013fac:	60bc      	str	r4, [r7, #8]
 8013fae:	415b      	adcs	r3, r3
 8013fb0:	60fb      	str	r3, [r7, #12]
 8013fb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013fb6:	1812      	adds	r2, r2, r0
 8013fb8:	eb41 0303 	adc.w	r3, r1, r3
 8013fbc:	f04f 0400 	mov.w	r4, #0
 8013fc0:	f04f 0500 	mov.w	r5, #0
 8013fc4:	00dd      	lsls	r5, r3, #3
 8013fc6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8013fca:	00d4      	lsls	r4, r2, #3
 8013fcc:	4622      	mov	r2, r4
 8013fce:	462b      	mov	r3, r5
 8013fd0:	1814      	adds	r4, r2, r0
 8013fd2:	64bc      	str	r4, [r7, #72]	; 0x48
 8013fd4:	414b      	adcs	r3, r1
 8013fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fda:	685b      	ldr	r3, [r3, #4]
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f04f 0100 	mov.w	r1, #0
 8013fe2:	f04f 0200 	mov.w	r2, #0
 8013fe6:	f04f 0300 	mov.w	r3, #0
 8013fea:	008b      	lsls	r3, r1, #2
 8013fec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8013ff0:	0082      	lsls	r2, r0, #2
 8013ff2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8013ff6:	f7ec f993 	bl	8000320 <__aeabi_uldivmod>
 8013ffa:	4602      	mov	r2, r0
 8013ffc:	460b      	mov	r3, r1
 8013ffe:	4b2f      	ldr	r3, [pc, #188]	; (80140bc <UART_SetConfig+0x38c>)
 8014000:	fba3 1302 	umull	r1, r3, r3, r2
 8014004:	095b      	lsrs	r3, r3, #5
 8014006:	2164      	movs	r1, #100	; 0x64
 8014008:	fb01 f303 	mul.w	r3, r1, r3
 801400c:	1ad3      	subs	r3, r2, r3
 801400e:	011b      	lsls	r3, r3, #4
 8014010:	3332      	adds	r3, #50	; 0x32
 8014012:	4a2a      	ldr	r2, [pc, #168]	; (80140bc <UART_SetConfig+0x38c>)
 8014014:	fba2 2303 	umull	r2, r3, r2, r3
 8014018:	095b      	lsrs	r3, r3, #5
 801401a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801401e:	441e      	add	r6, r3
 8014020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014022:	4618      	mov	r0, r3
 8014024:	f04f 0100 	mov.w	r1, #0
 8014028:	4602      	mov	r2, r0
 801402a:	460b      	mov	r3, r1
 801402c:	1894      	adds	r4, r2, r2
 801402e:	603c      	str	r4, [r7, #0]
 8014030:	415b      	adcs	r3, r3
 8014032:	607b      	str	r3, [r7, #4]
 8014034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014038:	1812      	adds	r2, r2, r0
 801403a:	eb41 0303 	adc.w	r3, r1, r3
 801403e:	f04f 0400 	mov.w	r4, #0
 8014042:	f04f 0500 	mov.w	r5, #0
 8014046:	00dd      	lsls	r5, r3, #3
 8014048:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801404c:	00d4      	lsls	r4, r2, #3
 801404e:	4622      	mov	r2, r4
 8014050:	462b      	mov	r3, r5
 8014052:	eb12 0a00 	adds.w	sl, r2, r0
 8014056:	eb43 0b01 	adc.w	fp, r3, r1
 801405a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801405c:	685b      	ldr	r3, [r3, #4]
 801405e:	4618      	mov	r0, r3
 8014060:	f04f 0100 	mov.w	r1, #0
 8014064:	f04f 0200 	mov.w	r2, #0
 8014068:	f04f 0300 	mov.w	r3, #0
 801406c:	008b      	lsls	r3, r1, #2
 801406e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014072:	0082      	lsls	r2, r0, #2
 8014074:	4650      	mov	r0, sl
 8014076:	4659      	mov	r1, fp
 8014078:	f7ec f952 	bl	8000320 <__aeabi_uldivmod>
 801407c:	4602      	mov	r2, r0
 801407e:	460b      	mov	r3, r1
 8014080:	4b0e      	ldr	r3, [pc, #56]	; (80140bc <UART_SetConfig+0x38c>)
 8014082:	fba3 1302 	umull	r1, r3, r3, r2
 8014086:	095b      	lsrs	r3, r3, #5
 8014088:	2164      	movs	r1, #100	; 0x64
 801408a:	fb01 f303 	mul.w	r3, r1, r3
 801408e:	1ad3      	subs	r3, r2, r3
 8014090:	011b      	lsls	r3, r3, #4
 8014092:	3332      	adds	r3, #50	; 0x32
 8014094:	4a09      	ldr	r2, [pc, #36]	; (80140bc <UART_SetConfig+0x38c>)
 8014096:	fba2 2303 	umull	r2, r3, r2, r3
 801409a:	095b      	lsrs	r3, r3, #5
 801409c:	f003 020f 	and.w	r2, r3, #15
 80140a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	4432      	add	r2, r6
 80140a6:	609a      	str	r2, [r3, #8]
}
 80140a8:	bf00      	nop
 80140aa:	377c      	adds	r7, #124	; 0x7c
 80140ac:	46bd      	mov	sp, r7
 80140ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140b2:	bf00      	nop
 80140b4:	40011000 	.word	0x40011000
 80140b8:	40011400 	.word	0x40011400
 80140bc:	51eb851f 	.word	0x51eb851f

080140c0 <__errno>:
 80140c0:	4b01      	ldr	r3, [pc, #4]	; (80140c8 <__errno+0x8>)
 80140c2:	6818      	ldr	r0, [r3, #0]
 80140c4:	4770      	bx	lr
 80140c6:	bf00      	nop
 80140c8:	20000080 	.word	0x20000080

080140cc <__libc_init_array>:
 80140cc:	b570      	push	{r4, r5, r6, lr}
 80140ce:	4d0d      	ldr	r5, [pc, #52]	; (8014104 <__libc_init_array+0x38>)
 80140d0:	4c0d      	ldr	r4, [pc, #52]	; (8014108 <__libc_init_array+0x3c>)
 80140d2:	1b64      	subs	r4, r4, r5
 80140d4:	10a4      	asrs	r4, r4, #2
 80140d6:	2600      	movs	r6, #0
 80140d8:	42a6      	cmp	r6, r4
 80140da:	d109      	bne.n	80140f0 <__libc_init_array+0x24>
 80140dc:	4d0b      	ldr	r5, [pc, #44]	; (801410c <__libc_init_array+0x40>)
 80140de:	4c0c      	ldr	r4, [pc, #48]	; (8014110 <__libc_init_array+0x44>)
 80140e0:	f001 f80e 	bl	8015100 <_init>
 80140e4:	1b64      	subs	r4, r4, r5
 80140e6:	10a4      	asrs	r4, r4, #2
 80140e8:	2600      	movs	r6, #0
 80140ea:	42a6      	cmp	r6, r4
 80140ec:	d105      	bne.n	80140fa <__libc_init_array+0x2e>
 80140ee:	bd70      	pop	{r4, r5, r6, pc}
 80140f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80140f4:	4798      	blx	r3
 80140f6:	3601      	adds	r6, #1
 80140f8:	e7ee      	b.n	80140d8 <__libc_init_array+0xc>
 80140fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80140fe:	4798      	blx	r3
 8014100:	3601      	adds	r6, #1
 8014102:	e7f2      	b.n	80140ea <__libc_init_array+0x1e>
 8014104:	080152e8 	.word	0x080152e8
 8014108:	080152e8 	.word	0x080152e8
 801410c:	080152e8 	.word	0x080152e8
 8014110:	080152ec 	.word	0x080152ec

08014114 <memcpy>:
 8014114:	440a      	add	r2, r1
 8014116:	4291      	cmp	r1, r2
 8014118:	f100 33ff 	add.w	r3, r0, #4294967295
 801411c:	d100      	bne.n	8014120 <memcpy+0xc>
 801411e:	4770      	bx	lr
 8014120:	b510      	push	{r4, lr}
 8014122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014126:	f803 4f01 	strb.w	r4, [r3, #1]!
 801412a:	4291      	cmp	r1, r2
 801412c:	d1f9      	bne.n	8014122 <memcpy+0xe>
 801412e:	bd10      	pop	{r4, pc}

08014130 <memset>:
 8014130:	4402      	add	r2, r0
 8014132:	4603      	mov	r3, r0
 8014134:	4293      	cmp	r3, r2
 8014136:	d100      	bne.n	801413a <memset+0xa>
 8014138:	4770      	bx	lr
 801413a:	f803 1b01 	strb.w	r1, [r3], #1
 801413e:	e7f9      	b.n	8014134 <memset+0x4>

08014140 <iprintf>:
 8014140:	b40f      	push	{r0, r1, r2, r3}
 8014142:	4b0a      	ldr	r3, [pc, #40]	; (801416c <iprintf+0x2c>)
 8014144:	b513      	push	{r0, r1, r4, lr}
 8014146:	681c      	ldr	r4, [r3, #0]
 8014148:	b124      	cbz	r4, 8014154 <iprintf+0x14>
 801414a:	69a3      	ldr	r3, [r4, #24]
 801414c:	b913      	cbnz	r3, 8014154 <iprintf+0x14>
 801414e:	4620      	mov	r0, r4
 8014150:	f000 fa72 	bl	8014638 <__sinit>
 8014154:	ab05      	add	r3, sp, #20
 8014156:	9a04      	ldr	r2, [sp, #16]
 8014158:	68a1      	ldr	r1, [r4, #8]
 801415a:	9301      	str	r3, [sp, #4]
 801415c:	4620      	mov	r0, r4
 801415e:	f000 fc43 	bl	80149e8 <_vfiprintf_r>
 8014162:	b002      	add	sp, #8
 8014164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014168:	b004      	add	sp, #16
 801416a:	4770      	bx	lr
 801416c:	20000080 	.word	0x20000080

08014170 <_puts_r>:
 8014170:	b570      	push	{r4, r5, r6, lr}
 8014172:	460e      	mov	r6, r1
 8014174:	4605      	mov	r5, r0
 8014176:	b118      	cbz	r0, 8014180 <_puts_r+0x10>
 8014178:	6983      	ldr	r3, [r0, #24]
 801417a:	b90b      	cbnz	r3, 8014180 <_puts_r+0x10>
 801417c:	f000 fa5c 	bl	8014638 <__sinit>
 8014180:	69ab      	ldr	r3, [r5, #24]
 8014182:	68ac      	ldr	r4, [r5, #8]
 8014184:	b913      	cbnz	r3, 801418c <_puts_r+0x1c>
 8014186:	4628      	mov	r0, r5
 8014188:	f000 fa56 	bl	8014638 <__sinit>
 801418c:	4b2c      	ldr	r3, [pc, #176]	; (8014240 <_puts_r+0xd0>)
 801418e:	429c      	cmp	r4, r3
 8014190:	d120      	bne.n	80141d4 <_puts_r+0x64>
 8014192:	686c      	ldr	r4, [r5, #4]
 8014194:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014196:	07db      	lsls	r3, r3, #31
 8014198:	d405      	bmi.n	80141a6 <_puts_r+0x36>
 801419a:	89a3      	ldrh	r3, [r4, #12]
 801419c:	0598      	lsls	r0, r3, #22
 801419e:	d402      	bmi.n	80141a6 <_puts_r+0x36>
 80141a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80141a2:	f000 fae7 	bl	8014774 <__retarget_lock_acquire_recursive>
 80141a6:	89a3      	ldrh	r3, [r4, #12]
 80141a8:	0719      	lsls	r1, r3, #28
 80141aa:	d51d      	bpl.n	80141e8 <_puts_r+0x78>
 80141ac:	6923      	ldr	r3, [r4, #16]
 80141ae:	b1db      	cbz	r3, 80141e8 <_puts_r+0x78>
 80141b0:	3e01      	subs	r6, #1
 80141b2:	68a3      	ldr	r3, [r4, #8]
 80141b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80141b8:	3b01      	subs	r3, #1
 80141ba:	60a3      	str	r3, [r4, #8]
 80141bc:	bb39      	cbnz	r1, 801420e <_puts_r+0x9e>
 80141be:	2b00      	cmp	r3, #0
 80141c0:	da38      	bge.n	8014234 <_puts_r+0xc4>
 80141c2:	4622      	mov	r2, r4
 80141c4:	210a      	movs	r1, #10
 80141c6:	4628      	mov	r0, r5
 80141c8:	f000 f85c 	bl	8014284 <__swbuf_r>
 80141cc:	3001      	adds	r0, #1
 80141ce:	d011      	beq.n	80141f4 <_puts_r+0x84>
 80141d0:	250a      	movs	r5, #10
 80141d2:	e011      	b.n	80141f8 <_puts_r+0x88>
 80141d4:	4b1b      	ldr	r3, [pc, #108]	; (8014244 <_puts_r+0xd4>)
 80141d6:	429c      	cmp	r4, r3
 80141d8:	d101      	bne.n	80141de <_puts_r+0x6e>
 80141da:	68ac      	ldr	r4, [r5, #8]
 80141dc:	e7da      	b.n	8014194 <_puts_r+0x24>
 80141de:	4b1a      	ldr	r3, [pc, #104]	; (8014248 <_puts_r+0xd8>)
 80141e0:	429c      	cmp	r4, r3
 80141e2:	bf08      	it	eq
 80141e4:	68ec      	ldreq	r4, [r5, #12]
 80141e6:	e7d5      	b.n	8014194 <_puts_r+0x24>
 80141e8:	4621      	mov	r1, r4
 80141ea:	4628      	mov	r0, r5
 80141ec:	f000 f89c 	bl	8014328 <__swsetup_r>
 80141f0:	2800      	cmp	r0, #0
 80141f2:	d0dd      	beq.n	80141b0 <_puts_r+0x40>
 80141f4:	f04f 35ff 	mov.w	r5, #4294967295
 80141f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80141fa:	07da      	lsls	r2, r3, #31
 80141fc:	d405      	bmi.n	801420a <_puts_r+0x9a>
 80141fe:	89a3      	ldrh	r3, [r4, #12]
 8014200:	059b      	lsls	r3, r3, #22
 8014202:	d402      	bmi.n	801420a <_puts_r+0x9a>
 8014204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014206:	f000 fab6 	bl	8014776 <__retarget_lock_release_recursive>
 801420a:	4628      	mov	r0, r5
 801420c:	bd70      	pop	{r4, r5, r6, pc}
 801420e:	2b00      	cmp	r3, #0
 8014210:	da04      	bge.n	801421c <_puts_r+0xac>
 8014212:	69a2      	ldr	r2, [r4, #24]
 8014214:	429a      	cmp	r2, r3
 8014216:	dc06      	bgt.n	8014226 <_puts_r+0xb6>
 8014218:	290a      	cmp	r1, #10
 801421a:	d004      	beq.n	8014226 <_puts_r+0xb6>
 801421c:	6823      	ldr	r3, [r4, #0]
 801421e:	1c5a      	adds	r2, r3, #1
 8014220:	6022      	str	r2, [r4, #0]
 8014222:	7019      	strb	r1, [r3, #0]
 8014224:	e7c5      	b.n	80141b2 <_puts_r+0x42>
 8014226:	4622      	mov	r2, r4
 8014228:	4628      	mov	r0, r5
 801422a:	f000 f82b 	bl	8014284 <__swbuf_r>
 801422e:	3001      	adds	r0, #1
 8014230:	d1bf      	bne.n	80141b2 <_puts_r+0x42>
 8014232:	e7df      	b.n	80141f4 <_puts_r+0x84>
 8014234:	6823      	ldr	r3, [r4, #0]
 8014236:	250a      	movs	r5, #10
 8014238:	1c5a      	adds	r2, r3, #1
 801423a:	6022      	str	r2, [r4, #0]
 801423c:	701d      	strb	r5, [r3, #0]
 801423e:	e7db      	b.n	80141f8 <_puts_r+0x88>
 8014240:	0801526c 	.word	0x0801526c
 8014244:	0801528c 	.word	0x0801528c
 8014248:	0801524c 	.word	0x0801524c

0801424c <puts>:
 801424c:	4b02      	ldr	r3, [pc, #8]	; (8014258 <puts+0xc>)
 801424e:	4601      	mov	r1, r0
 8014250:	6818      	ldr	r0, [r3, #0]
 8014252:	f7ff bf8d 	b.w	8014170 <_puts_r>
 8014256:	bf00      	nop
 8014258:	20000080 	.word	0x20000080

0801425c <strncpy>:
 801425c:	b510      	push	{r4, lr}
 801425e:	3901      	subs	r1, #1
 8014260:	4603      	mov	r3, r0
 8014262:	b132      	cbz	r2, 8014272 <strncpy+0x16>
 8014264:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014268:	f803 4b01 	strb.w	r4, [r3], #1
 801426c:	3a01      	subs	r2, #1
 801426e:	2c00      	cmp	r4, #0
 8014270:	d1f7      	bne.n	8014262 <strncpy+0x6>
 8014272:	441a      	add	r2, r3
 8014274:	2100      	movs	r1, #0
 8014276:	4293      	cmp	r3, r2
 8014278:	d100      	bne.n	801427c <strncpy+0x20>
 801427a:	bd10      	pop	{r4, pc}
 801427c:	f803 1b01 	strb.w	r1, [r3], #1
 8014280:	e7f9      	b.n	8014276 <strncpy+0x1a>
	...

08014284 <__swbuf_r>:
 8014284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014286:	460e      	mov	r6, r1
 8014288:	4614      	mov	r4, r2
 801428a:	4605      	mov	r5, r0
 801428c:	b118      	cbz	r0, 8014296 <__swbuf_r+0x12>
 801428e:	6983      	ldr	r3, [r0, #24]
 8014290:	b90b      	cbnz	r3, 8014296 <__swbuf_r+0x12>
 8014292:	f000 f9d1 	bl	8014638 <__sinit>
 8014296:	4b21      	ldr	r3, [pc, #132]	; (801431c <__swbuf_r+0x98>)
 8014298:	429c      	cmp	r4, r3
 801429a:	d12b      	bne.n	80142f4 <__swbuf_r+0x70>
 801429c:	686c      	ldr	r4, [r5, #4]
 801429e:	69a3      	ldr	r3, [r4, #24]
 80142a0:	60a3      	str	r3, [r4, #8]
 80142a2:	89a3      	ldrh	r3, [r4, #12]
 80142a4:	071a      	lsls	r2, r3, #28
 80142a6:	d52f      	bpl.n	8014308 <__swbuf_r+0x84>
 80142a8:	6923      	ldr	r3, [r4, #16]
 80142aa:	b36b      	cbz	r3, 8014308 <__swbuf_r+0x84>
 80142ac:	6923      	ldr	r3, [r4, #16]
 80142ae:	6820      	ldr	r0, [r4, #0]
 80142b0:	1ac0      	subs	r0, r0, r3
 80142b2:	6963      	ldr	r3, [r4, #20]
 80142b4:	b2f6      	uxtb	r6, r6
 80142b6:	4283      	cmp	r3, r0
 80142b8:	4637      	mov	r7, r6
 80142ba:	dc04      	bgt.n	80142c6 <__swbuf_r+0x42>
 80142bc:	4621      	mov	r1, r4
 80142be:	4628      	mov	r0, r5
 80142c0:	f000 f926 	bl	8014510 <_fflush_r>
 80142c4:	bb30      	cbnz	r0, 8014314 <__swbuf_r+0x90>
 80142c6:	68a3      	ldr	r3, [r4, #8]
 80142c8:	3b01      	subs	r3, #1
 80142ca:	60a3      	str	r3, [r4, #8]
 80142cc:	6823      	ldr	r3, [r4, #0]
 80142ce:	1c5a      	adds	r2, r3, #1
 80142d0:	6022      	str	r2, [r4, #0]
 80142d2:	701e      	strb	r6, [r3, #0]
 80142d4:	6963      	ldr	r3, [r4, #20]
 80142d6:	3001      	adds	r0, #1
 80142d8:	4283      	cmp	r3, r0
 80142da:	d004      	beq.n	80142e6 <__swbuf_r+0x62>
 80142dc:	89a3      	ldrh	r3, [r4, #12]
 80142de:	07db      	lsls	r3, r3, #31
 80142e0:	d506      	bpl.n	80142f0 <__swbuf_r+0x6c>
 80142e2:	2e0a      	cmp	r6, #10
 80142e4:	d104      	bne.n	80142f0 <__swbuf_r+0x6c>
 80142e6:	4621      	mov	r1, r4
 80142e8:	4628      	mov	r0, r5
 80142ea:	f000 f911 	bl	8014510 <_fflush_r>
 80142ee:	b988      	cbnz	r0, 8014314 <__swbuf_r+0x90>
 80142f0:	4638      	mov	r0, r7
 80142f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142f4:	4b0a      	ldr	r3, [pc, #40]	; (8014320 <__swbuf_r+0x9c>)
 80142f6:	429c      	cmp	r4, r3
 80142f8:	d101      	bne.n	80142fe <__swbuf_r+0x7a>
 80142fa:	68ac      	ldr	r4, [r5, #8]
 80142fc:	e7cf      	b.n	801429e <__swbuf_r+0x1a>
 80142fe:	4b09      	ldr	r3, [pc, #36]	; (8014324 <__swbuf_r+0xa0>)
 8014300:	429c      	cmp	r4, r3
 8014302:	bf08      	it	eq
 8014304:	68ec      	ldreq	r4, [r5, #12]
 8014306:	e7ca      	b.n	801429e <__swbuf_r+0x1a>
 8014308:	4621      	mov	r1, r4
 801430a:	4628      	mov	r0, r5
 801430c:	f000 f80c 	bl	8014328 <__swsetup_r>
 8014310:	2800      	cmp	r0, #0
 8014312:	d0cb      	beq.n	80142ac <__swbuf_r+0x28>
 8014314:	f04f 37ff 	mov.w	r7, #4294967295
 8014318:	e7ea      	b.n	80142f0 <__swbuf_r+0x6c>
 801431a:	bf00      	nop
 801431c:	0801526c 	.word	0x0801526c
 8014320:	0801528c 	.word	0x0801528c
 8014324:	0801524c 	.word	0x0801524c

08014328 <__swsetup_r>:
 8014328:	4b32      	ldr	r3, [pc, #200]	; (80143f4 <__swsetup_r+0xcc>)
 801432a:	b570      	push	{r4, r5, r6, lr}
 801432c:	681d      	ldr	r5, [r3, #0]
 801432e:	4606      	mov	r6, r0
 8014330:	460c      	mov	r4, r1
 8014332:	b125      	cbz	r5, 801433e <__swsetup_r+0x16>
 8014334:	69ab      	ldr	r3, [r5, #24]
 8014336:	b913      	cbnz	r3, 801433e <__swsetup_r+0x16>
 8014338:	4628      	mov	r0, r5
 801433a:	f000 f97d 	bl	8014638 <__sinit>
 801433e:	4b2e      	ldr	r3, [pc, #184]	; (80143f8 <__swsetup_r+0xd0>)
 8014340:	429c      	cmp	r4, r3
 8014342:	d10f      	bne.n	8014364 <__swsetup_r+0x3c>
 8014344:	686c      	ldr	r4, [r5, #4]
 8014346:	89a3      	ldrh	r3, [r4, #12]
 8014348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801434c:	0719      	lsls	r1, r3, #28
 801434e:	d42c      	bmi.n	80143aa <__swsetup_r+0x82>
 8014350:	06dd      	lsls	r5, r3, #27
 8014352:	d411      	bmi.n	8014378 <__swsetup_r+0x50>
 8014354:	2309      	movs	r3, #9
 8014356:	6033      	str	r3, [r6, #0]
 8014358:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801435c:	81a3      	strh	r3, [r4, #12]
 801435e:	f04f 30ff 	mov.w	r0, #4294967295
 8014362:	e03e      	b.n	80143e2 <__swsetup_r+0xba>
 8014364:	4b25      	ldr	r3, [pc, #148]	; (80143fc <__swsetup_r+0xd4>)
 8014366:	429c      	cmp	r4, r3
 8014368:	d101      	bne.n	801436e <__swsetup_r+0x46>
 801436a:	68ac      	ldr	r4, [r5, #8]
 801436c:	e7eb      	b.n	8014346 <__swsetup_r+0x1e>
 801436e:	4b24      	ldr	r3, [pc, #144]	; (8014400 <__swsetup_r+0xd8>)
 8014370:	429c      	cmp	r4, r3
 8014372:	bf08      	it	eq
 8014374:	68ec      	ldreq	r4, [r5, #12]
 8014376:	e7e6      	b.n	8014346 <__swsetup_r+0x1e>
 8014378:	0758      	lsls	r0, r3, #29
 801437a:	d512      	bpl.n	80143a2 <__swsetup_r+0x7a>
 801437c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801437e:	b141      	cbz	r1, 8014392 <__swsetup_r+0x6a>
 8014380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014384:	4299      	cmp	r1, r3
 8014386:	d002      	beq.n	801438e <__swsetup_r+0x66>
 8014388:	4630      	mov	r0, r6
 801438a:	f000 fa59 	bl	8014840 <_free_r>
 801438e:	2300      	movs	r3, #0
 8014390:	6363      	str	r3, [r4, #52]	; 0x34
 8014392:	89a3      	ldrh	r3, [r4, #12]
 8014394:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014398:	81a3      	strh	r3, [r4, #12]
 801439a:	2300      	movs	r3, #0
 801439c:	6063      	str	r3, [r4, #4]
 801439e:	6923      	ldr	r3, [r4, #16]
 80143a0:	6023      	str	r3, [r4, #0]
 80143a2:	89a3      	ldrh	r3, [r4, #12]
 80143a4:	f043 0308 	orr.w	r3, r3, #8
 80143a8:	81a3      	strh	r3, [r4, #12]
 80143aa:	6923      	ldr	r3, [r4, #16]
 80143ac:	b94b      	cbnz	r3, 80143c2 <__swsetup_r+0x9a>
 80143ae:	89a3      	ldrh	r3, [r4, #12]
 80143b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80143b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80143b8:	d003      	beq.n	80143c2 <__swsetup_r+0x9a>
 80143ba:	4621      	mov	r1, r4
 80143bc:	4630      	mov	r0, r6
 80143be:	f000 f9ff 	bl	80147c0 <__smakebuf_r>
 80143c2:	89a0      	ldrh	r0, [r4, #12]
 80143c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80143c8:	f010 0301 	ands.w	r3, r0, #1
 80143cc:	d00a      	beq.n	80143e4 <__swsetup_r+0xbc>
 80143ce:	2300      	movs	r3, #0
 80143d0:	60a3      	str	r3, [r4, #8]
 80143d2:	6963      	ldr	r3, [r4, #20]
 80143d4:	425b      	negs	r3, r3
 80143d6:	61a3      	str	r3, [r4, #24]
 80143d8:	6923      	ldr	r3, [r4, #16]
 80143da:	b943      	cbnz	r3, 80143ee <__swsetup_r+0xc6>
 80143dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80143e0:	d1ba      	bne.n	8014358 <__swsetup_r+0x30>
 80143e2:	bd70      	pop	{r4, r5, r6, pc}
 80143e4:	0781      	lsls	r1, r0, #30
 80143e6:	bf58      	it	pl
 80143e8:	6963      	ldrpl	r3, [r4, #20]
 80143ea:	60a3      	str	r3, [r4, #8]
 80143ec:	e7f4      	b.n	80143d8 <__swsetup_r+0xb0>
 80143ee:	2000      	movs	r0, #0
 80143f0:	e7f7      	b.n	80143e2 <__swsetup_r+0xba>
 80143f2:	bf00      	nop
 80143f4:	20000080 	.word	0x20000080
 80143f8:	0801526c 	.word	0x0801526c
 80143fc:	0801528c 	.word	0x0801528c
 8014400:	0801524c 	.word	0x0801524c

08014404 <__sflush_r>:
 8014404:	898a      	ldrh	r2, [r1, #12]
 8014406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801440a:	4605      	mov	r5, r0
 801440c:	0710      	lsls	r0, r2, #28
 801440e:	460c      	mov	r4, r1
 8014410:	d458      	bmi.n	80144c4 <__sflush_r+0xc0>
 8014412:	684b      	ldr	r3, [r1, #4]
 8014414:	2b00      	cmp	r3, #0
 8014416:	dc05      	bgt.n	8014424 <__sflush_r+0x20>
 8014418:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801441a:	2b00      	cmp	r3, #0
 801441c:	dc02      	bgt.n	8014424 <__sflush_r+0x20>
 801441e:	2000      	movs	r0, #0
 8014420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014424:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014426:	2e00      	cmp	r6, #0
 8014428:	d0f9      	beq.n	801441e <__sflush_r+0x1a>
 801442a:	2300      	movs	r3, #0
 801442c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014430:	682f      	ldr	r7, [r5, #0]
 8014432:	602b      	str	r3, [r5, #0]
 8014434:	d032      	beq.n	801449c <__sflush_r+0x98>
 8014436:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014438:	89a3      	ldrh	r3, [r4, #12]
 801443a:	075a      	lsls	r2, r3, #29
 801443c:	d505      	bpl.n	801444a <__sflush_r+0x46>
 801443e:	6863      	ldr	r3, [r4, #4]
 8014440:	1ac0      	subs	r0, r0, r3
 8014442:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014444:	b10b      	cbz	r3, 801444a <__sflush_r+0x46>
 8014446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014448:	1ac0      	subs	r0, r0, r3
 801444a:	2300      	movs	r3, #0
 801444c:	4602      	mov	r2, r0
 801444e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014450:	6a21      	ldr	r1, [r4, #32]
 8014452:	4628      	mov	r0, r5
 8014454:	47b0      	blx	r6
 8014456:	1c43      	adds	r3, r0, #1
 8014458:	89a3      	ldrh	r3, [r4, #12]
 801445a:	d106      	bne.n	801446a <__sflush_r+0x66>
 801445c:	6829      	ldr	r1, [r5, #0]
 801445e:	291d      	cmp	r1, #29
 8014460:	d82c      	bhi.n	80144bc <__sflush_r+0xb8>
 8014462:	4a2a      	ldr	r2, [pc, #168]	; (801450c <__sflush_r+0x108>)
 8014464:	40ca      	lsrs	r2, r1
 8014466:	07d6      	lsls	r6, r2, #31
 8014468:	d528      	bpl.n	80144bc <__sflush_r+0xb8>
 801446a:	2200      	movs	r2, #0
 801446c:	6062      	str	r2, [r4, #4]
 801446e:	04d9      	lsls	r1, r3, #19
 8014470:	6922      	ldr	r2, [r4, #16]
 8014472:	6022      	str	r2, [r4, #0]
 8014474:	d504      	bpl.n	8014480 <__sflush_r+0x7c>
 8014476:	1c42      	adds	r2, r0, #1
 8014478:	d101      	bne.n	801447e <__sflush_r+0x7a>
 801447a:	682b      	ldr	r3, [r5, #0]
 801447c:	b903      	cbnz	r3, 8014480 <__sflush_r+0x7c>
 801447e:	6560      	str	r0, [r4, #84]	; 0x54
 8014480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014482:	602f      	str	r7, [r5, #0]
 8014484:	2900      	cmp	r1, #0
 8014486:	d0ca      	beq.n	801441e <__sflush_r+0x1a>
 8014488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801448c:	4299      	cmp	r1, r3
 801448e:	d002      	beq.n	8014496 <__sflush_r+0x92>
 8014490:	4628      	mov	r0, r5
 8014492:	f000 f9d5 	bl	8014840 <_free_r>
 8014496:	2000      	movs	r0, #0
 8014498:	6360      	str	r0, [r4, #52]	; 0x34
 801449a:	e7c1      	b.n	8014420 <__sflush_r+0x1c>
 801449c:	6a21      	ldr	r1, [r4, #32]
 801449e:	2301      	movs	r3, #1
 80144a0:	4628      	mov	r0, r5
 80144a2:	47b0      	blx	r6
 80144a4:	1c41      	adds	r1, r0, #1
 80144a6:	d1c7      	bne.n	8014438 <__sflush_r+0x34>
 80144a8:	682b      	ldr	r3, [r5, #0]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d0c4      	beq.n	8014438 <__sflush_r+0x34>
 80144ae:	2b1d      	cmp	r3, #29
 80144b0:	d001      	beq.n	80144b6 <__sflush_r+0xb2>
 80144b2:	2b16      	cmp	r3, #22
 80144b4:	d101      	bne.n	80144ba <__sflush_r+0xb6>
 80144b6:	602f      	str	r7, [r5, #0]
 80144b8:	e7b1      	b.n	801441e <__sflush_r+0x1a>
 80144ba:	89a3      	ldrh	r3, [r4, #12]
 80144bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144c0:	81a3      	strh	r3, [r4, #12]
 80144c2:	e7ad      	b.n	8014420 <__sflush_r+0x1c>
 80144c4:	690f      	ldr	r7, [r1, #16]
 80144c6:	2f00      	cmp	r7, #0
 80144c8:	d0a9      	beq.n	801441e <__sflush_r+0x1a>
 80144ca:	0793      	lsls	r3, r2, #30
 80144cc:	680e      	ldr	r6, [r1, #0]
 80144ce:	bf08      	it	eq
 80144d0:	694b      	ldreq	r3, [r1, #20]
 80144d2:	600f      	str	r7, [r1, #0]
 80144d4:	bf18      	it	ne
 80144d6:	2300      	movne	r3, #0
 80144d8:	eba6 0807 	sub.w	r8, r6, r7
 80144dc:	608b      	str	r3, [r1, #8]
 80144de:	f1b8 0f00 	cmp.w	r8, #0
 80144e2:	dd9c      	ble.n	801441e <__sflush_r+0x1a>
 80144e4:	6a21      	ldr	r1, [r4, #32]
 80144e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80144e8:	4643      	mov	r3, r8
 80144ea:	463a      	mov	r2, r7
 80144ec:	4628      	mov	r0, r5
 80144ee:	47b0      	blx	r6
 80144f0:	2800      	cmp	r0, #0
 80144f2:	dc06      	bgt.n	8014502 <__sflush_r+0xfe>
 80144f4:	89a3      	ldrh	r3, [r4, #12]
 80144f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144fa:	81a3      	strh	r3, [r4, #12]
 80144fc:	f04f 30ff 	mov.w	r0, #4294967295
 8014500:	e78e      	b.n	8014420 <__sflush_r+0x1c>
 8014502:	4407      	add	r7, r0
 8014504:	eba8 0800 	sub.w	r8, r8, r0
 8014508:	e7e9      	b.n	80144de <__sflush_r+0xda>
 801450a:	bf00      	nop
 801450c:	20400001 	.word	0x20400001

08014510 <_fflush_r>:
 8014510:	b538      	push	{r3, r4, r5, lr}
 8014512:	690b      	ldr	r3, [r1, #16]
 8014514:	4605      	mov	r5, r0
 8014516:	460c      	mov	r4, r1
 8014518:	b913      	cbnz	r3, 8014520 <_fflush_r+0x10>
 801451a:	2500      	movs	r5, #0
 801451c:	4628      	mov	r0, r5
 801451e:	bd38      	pop	{r3, r4, r5, pc}
 8014520:	b118      	cbz	r0, 801452a <_fflush_r+0x1a>
 8014522:	6983      	ldr	r3, [r0, #24]
 8014524:	b90b      	cbnz	r3, 801452a <_fflush_r+0x1a>
 8014526:	f000 f887 	bl	8014638 <__sinit>
 801452a:	4b14      	ldr	r3, [pc, #80]	; (801457c <_fflush_r+0x6c>)
 801452c:	429c      	cmp	r4, r3
 801452e:	d11b      	bne.n	8014568 <_fflush_r+0x58>
 8014530:	686c      	ldr	r4, [r5, #4]
 8014532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d0ef      	beq.n	801451a <_fflush_r+0xa>
 801453a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801453c:	07d0      	lsls	r0, r2, #31
 801453e:	d404      	bmi.n	801454a <_fflush_r+0x3a>
 8014540:	0599      	lsls	r1, r3, #22
 8014542:	d402      	bmi.n	801454a <_fflush_r+0x3a>
 8014544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014546:	f000 f915 	bl	8014774 <__retarget_lock_acquire_recursive>
 801454a:	4628      	mov	r0, r5
 801454c:	4621      	mov	r1, r4
 801454e:	f7ff ff59 	bl	8014404 <__sflush_r>
 8014552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014554:	07da      	lsls	r2, r3, #31
 8014556:	4605      	mov	r5, r0
 8014558:	d4e0      	bmi.n	801451c <_fflush_r+0xc>
 801455a:	89a3      	ldrh	r3, [r4, #12]
 801455c:	059b      	lsls	r3, r3, #22
 801455e:	d4dd      	bmi.n	801451c <_fflush_r+0xc>
 8014560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014562:	f000 f908 	bl	8014776 <__retarget_lock_release_recursive>
 8014566:	e7d9      	b.n	801451c <_fflush_r+0xc>
 8014568:	4b05      	ldr	r3, [pc, #20]	; (8014580 <_fflush_r+0x70>)
 801456a:	429c      	cmp	r4, r3
 801456c:	d101      	bne.n	8014572 <_fflush_r+0x62>
 801456e:	68ac      	ldr	r4, [r5, #8]
 8014570:	e7df      	b.n	8014532 <_fflush_r+0x22>
 8014572:	4b04      	ldr	r3, [pc, #16]	; (8014584 <_fflush_r+0x74>)
 8014574:	429c      	cmp	r4, r3
 8014576:	bf08      	it	eq
 8014578:	68ec      	ldreq	r4, [r5, #12]
 801457a:	e7da      	b.n	8014532 <_fflush_r+0x22>
 801457c:	0801526c 	.word	0x0801526c
 8014580:	0801528c 	.word	0x0801528c
 8014584:	0801524c 	.word	0x0801524c

08014588 <std>:
 8014588:	2300      	movs	r3, #0
 801458a:	b510      	push	{r4, lr}
 801458c:	4604      	mov	r4, r0
 801458e:	e9c0 3300 	strd	r3, r3, [r0]
 8014592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014596:	6083      	str	r3, [r0, #8]
 8014598:	8181      	strh	r1, [r0, #12]
 801459a:	6643      	str	r3, [r0, #100]	; 0x64
 801459c:	81c2      	strh	r2, [r0, #14]
 801459e:	6183      	str	r3, [r0, #24]
 80145a0:	4619      	mov	r1, r3
 80145a2:	2208      	movs	r2, #8
 80145a4:	305c      	adds	r0, #92	; 0x5c
 80145a6:	f7ff fdc3 	bl	8014130 <memset>
 80145aa:	4b05      	ldr	r3, [pc, #20]	; (80145c0 <std+0x38>)
 80145ac:	6263      	str	r3, [r4, #36]	; 0x24
 80145ae:	4b05      	ldr	r3, [pc, #20]	; (80145c4 <std+0x3c>)
 80145b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80145b2:	4b05      	ldr	r3, [pc, #20]	; (80145c8 <std+0x40>)
 80145b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80145b6:	4b05      	ldr	r3, [pc, #20]	; (80145cc <std+0x44>)
 80145b8:	6224      	str	r4, [r4, #32]
 80145ba:	6323      	str	r3, [r4, #48]	; 0x30
 80145bc:	bd10      	pop	{r4, pc}
 80145be:	bf00      	nop
 80145c0:	08014f91 	.word	0x08014f91
 80145c4:	08014fb3 	.word	0x08014fb3
 80145c8:	08014feb 	.word	0x08014feb
 80145cc:	0801500f 	.word	0x0801500f

080145d0 <_cleanup_r>:
 80145d0:	4901      	ldr	r1, [pc, #4]	; (80145d8 <_cleanup_r+0x8>)
 80145d2:	f000 b8af 	b.w	8014734 <_fwalk_reent>
 80145d6:	bf00      	nop
 80145d8:	08014511 	.word	0x08014511

080145dc <__sfmoreglue>:
 80145dc:	b570      	push	{r4, r5, r6, lr}
 80145de:	1e4a      	subs	r2, r1, #1
 80145e0:	2568      	movs	r5, #104	; 0x68
 80145e2:	4355      	muls	r5, r2
 80145e4:	460e      	mov	r6, r1
 80145e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80145ea:	f000 f979 	bl	80148e0 <_malloc_r>
 80145ee:	4604      	mov	r4, r0
 80145f0:	b140      	cbz	r0, 8014604 <__sfmoreglue+0x28>
 80145f2:	2100      	movs	r1, #0
 80145f4:	e9c0 1600 	strd	r1, r6, [r0]
 80145f8:	300c      	adds	r0, #12
 80145fa:	60a0      	str	r0, [r4, #8]
 80145fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014600:	f7ff fd96 	bl	8014130 <memset>
 8014604:	4620      	mov	r0, r4
 8014606:	bd70      	pop	{r4, r5, r6, pc}

08014608 <__sfp_lock_acquire>:
 8014608:	4801      	ldr	r0, [pc, #4]	; (8014610 <__sfp_lock_acquire+0x8>)
 801460a:	f000 b8b3 	b.w	8014774 <__retarget_lock_acquire_recursive>
 801460e:	bf00      	nop
 8014610:	20007300 	.word	0x20007300

08014614 <__sfp_lock_release>:
 8014614:	4801      	ldr	r0, [pc, #4]	; (801461c <__sfp_lock_release+0x8>)
 8014616:	f000 b8ae 	b.w	8014776 <__retarget_lock_release_recursive>
 801461a:	bf00      	nop
 801461c:	20007300 	.word	0x20007300

08014620 <__sinit_lock_acquire>:
 8014620:	4801      	ldr	r0, [pc, #4]	; (8014628 <__sinit_lock_acquire+0x8>)
 8014622:	f000 b8a7 	b.w	8014774 <__retarget_lock_acquire_recursive>
 8014626:	bf00      	nop
 8014628:	200072fb 	.word	0x200072fb

0801462c <__sinit_lock_release>:
 801462c:	4801      	ldr	r0, [pc, #4]	; (8014634 <__sinit_lock_release+0x8>)
 801462e:	f000 b8a2 	b.w	8014776 <__retarget_lock_release_recursive>
 8014632:	bf00      	nop
 8014634:	200072fb 	.word	0x200072fb

08014638 <__sinit>:
 8014638:	b510      	push	{r4, lr}
 801463a:	4604      	mov	r4, r0
 801463c:	f7ff fff0 	bl	8014620 <__sinit_lock_acquire>
 8014640:	69a3      	ldr	r3, [r4, #24]
 8014642:	b11b      	cbz	r3, 801464c <__sinit+0x14>
 8014644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014648:	f7ff bff0 	b.w	801462c <__sinit_lock_release>
 801464c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014650:	6523      	str	r3, [r4, #80]	; 0x50
 8014652:	4b13      	ldr	r3, [pc, #76]	; (80146a0 <__sinit+0x68>)
 8014654:	4a13      	ldr	r2, [pc, #76]	; (80146a4 <__sinit+0x6c>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	62a2      	str	r2, [r4, #40]	; 0x28
 801465a:	42a3      	cmp	r3, r4
 801465c:	bf04      	itt	eq
 801465e:	2301      	moveq	r3, #1
 8014660:	61a3      	streq	r3, [r4, #24]
 8014662:	4620      	mov	r0, r4
 8014664:	f000 f820 	bl	80146a8 <__sfp>
 8014668:	6060      	str	r0, [r4, #4]
 801466a:	4620      	mov	r0, r4
 801466c:	f000 f81c 	bl	80146a8 <__sfp>
 8014670:	60a0      	str	r0, [r4, #8]
 8014672:	4620      	mov	r0, r4
 8014674:	f000 f818 	bl	80146a8 <__sfp>
 8014678:	2200      	movs	r2, #0
 801467a:	60e0      	str	r0, [r4, #12]
 801467c:	2104      	movs	r1, #4
 801467e:	6860      	ldr	r0, [r4, #4]
 8014680:	f7ff ff82 	bl	8014588 <std>
 8014684:	68a0      	ldr	r0, [r4, #8]
 8014686:	2201      	movs	r2, #1
 8014688:	2109      	movs	r1, #9
 801468a:	f7ff ff7d 	bl	8014588 <std>
 801468e:	68e0      	ldr	r0, [r4, #12]
 8014690:	2202      	movs	r2, #2
 8014692:	2112      	movs	r1, #18
 8014694:	f7ff ff78 	bl	8014588 <std>
 8014698:	2301      	movs	r3, #1
 801469a:	61a3      	str	r3, [r4, #24]
 801469c:	e7d2      	b.n	8014644 <__sinit+0xc>
 801469e:	bf00      	nop
 80146a0:	08015248 	.word	0x08015248
 80146a4:	080145d1 	.word	0x080145d1

080146a8 <__sfp>:
 80146a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146aa:	4607      	mov	r7, r0
 80146ac:	f7ff ffac 	bl	8014608 <__sfp_lock_acquire>
 80146b0:	4b1e      	ldr	r3, [pc, #120]	; (801472c <__sfp+0x84>)
 80146b2:	681e      	ldr	r6, [r3, #0]
 80146b4:	69b3      	ldr	r3, [r6, #24]
 80146b6:	b913      	cbnz	r3, 80146be <__sfp+0x16>
 80146b8:	4630      	mov	r0, r6
 80146ba:	f7ff ffbd 	bl	8014638 <__sinit>
 80146be:	3648      	adds	r6, #72	; 0x48
 80146c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80146c4:	3b01      	subs	r3, #1
 80146c6:	d503      	bpl.n	80146d0 <__sfp+0x28>
 80146c8:	6833      	ldr	r3, [r6, #0]
 80146ca:	b30b      	cbz	r3, 8014710 <__sfp+0x68>
 80146cc:	6836      	ldr	r6, [r6, #0]
 80146ce:	e7f7      	b.n	80146c0 <__sfp+0x18>
 80146d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80146d4:	b9d5      	cbnz	r5, 801470c <__sfp+0x64>
 80146d6:	4b16      	ldr	r3, [pc, #88]	; (8014730 <__sfp+0x88>)
 80146d8:	60e3      	str	r3, [r4, #12]
 80146da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80146de:	6665      	str	r5, [r4, #100]	; 0x64
 80146e0:	f000 f847 	bl	8014772 <__retarget_lock_init_recursive>
 80146e4:	f7ff ff96 	bl	8014614 <__sfp_lock_release>
 80146e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80146ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80146f0:	6025      	str	r5, [r4, #0]
 80146f2:	61a5      	str	r5, [r4, #24]
 80146f4:	2208      	movs	r2, #8
 80146f6:	4629      	mov	r1, r5
 80146f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80146fc:	f7ff fd18 	bl	8014130 <memset>
 8014700:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014704:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014708:	4620      	mov	r0, r4
 801470a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801470c:	3468      	adds	r4, #104	; 0x68
 801470e:	e7d9      	b.n	80146c4 <__sfp+0x1c>
 8014710:	2104      	movs	r1, #4
 8014712:	4638      	mov	r0, r7
 8014714:	f7ff ff62 	bl	80145dc <__sfmoreglue>
 8014718:	4604      	mov	r4, r0
 801471a:	6030      	str	r0, [r6, #0]
 801471c:	2800      	cmp	r0, #0
 801471e:	d1d5      	bne.n	80146cc <__sfp+0x24>
 8014720:	f7ff ff78 	bl	8014614 <__sfp_lock_release>
 8014724:	230c      	movs	r3, #12
 8014726:	603b      	str	r3, [r7, #0]
 8014728:	e7ee      	b.n	8014708 <__sfp+0x60>
 801472a:	bf00      	nop
 801472c:	08015248 	.word	0x08015248
 8014730:	ffff0001 	.word	0xffff0001

08014734 <_fwalk_reent>:
 8014734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014738:	4606      	mov	r6, r0
 801473a:	4688      	mov	r8, r1
 801473c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014740:	2700      	movs	r7, #0
 8014742:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014746:	f1b9 0901 	subs.w	r9, r9, #1
 801474a:	d505      	bpl.n	8014758 <_fwalk_reent+0x24>
 801474c:	6824      	ldr	r4, [r4, #0]
 801474e:	2c00      	cmp	r4, #0
 8014750:	d1f7      	bne.n	8014742 <_fwalk_reent+0xe>
 8014752:	4638      	mov	r0, r7
 8014754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014758:	89ab      	ldrh	r3, [r5, #12]
 801475a:	2b01      	cmp	r3, #1
 801475c:	d907      	bls.n	801476e <_fwalk_reent+0x3a>
 801475e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014762:	3301      	adds	r3, #1
 8014764:	d003      	beq.n	801476e <_fwalk_reent+0x3a>
 8014766:	4629      	mov	r1, r5
 8014768:	4630      	mov	r0, r6
 801476a:	47c0      	blx	r8
 801476c:	4307      	orrs	r7, r0
 801476e:	3568      	adds	r5, #104	; 0x68
 8014770:	e7e9      	b.n	8014746 <_fwalk_reent+0x12>

08014772 <__retarget_lock_init_recursive>:
 8014772:	4770      	bx	lr

08014774 <__retarget_lock_acquire_recursive>:
 8014774:	4770      	bx	lr

08014776 <__retarget_lock_release_recursive>:
 8014776:	4770      	bx	lr

08014778 <__swhatbuf_r>:
 8014778:	b570      	push	{r4, r5, r6, lr}
 801477a:	460e      	mov	r6, r1
 801477c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014780:	2900      	cmp	r1, #0
 8014782:	b096      	sub	sp, #88	; 0x58
 8014784:	4614      	mov	r4, r2
 8014786:	461d      	mov	r5, r3
 8014788:	da07      	bge.n	801479a <__swhatbuf_r+0x22>
 801478a:	2300      	movs	r3, #0
 801478c:	602b      	str	r3, [r5, #0]
 801478e:	89b3      	ldrh	r3, [r6, #12]
 8014790:	061a      	lsls	r2, r3, #24
 8014792:	d410      	bmi.n	80147b6 <__swhatbuf_r+0x3e>
 8014794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014798:	e00e      	b.n	80147b8 <__swhatbuf_r+0x40>
 801479a:	466a      	mov	r2, sp
 801479c:	f000 fc5e 	bl	801505c <_fstat_r>
 80147a0:	2800      	cmp	r0, #0
 80147a2:	dbf2      	blt.n	801478a <__swhatbuf_r+0x12>
 80147a4:	9a01      	ldr	r2, [sp, #4]
 80147a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80147aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80147ae:	425a      	negs	r2, r3
 80147b0:	415a      	adcs	r2, r3
 80147b2:	602a      	str	r2, [r5, #0]
 80147b4:	e7ee      	b.n	8014794 <__swhatbuf_r+0x1c>
 80147b6:	2340      	movs	r3, #64	; 0x40
 80147b8:	2000      	movs	r0, #0
 80147ba:	6023      	str	r3, [r4, #0]
 80147bc:	b016      	add	sp, #88	; 0x58
 80147be:	bd70      	pop	{r4, r5, r6, pc}

080147c0 <__smakebuf_r>:
 80147c0:	898b      	ldrh	r3, [r1, #12]
 80147c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80147c4:	079d      	lsls	r5, r3, #30
 80147c6:	4606      	mov	r6, r0
 80147c8:	460c      	mov	r4, r1
 80147ca:	d507      	bpl.n	80147dc <__smakebuf_r+0x1c>
 80147cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80147d0:	6023      	str	r3, [r4, #0]
 80147d2:	6123      	str	r3, [r4, #16]
 80147d4:	2301      	movs	r3, #1
 80147d6:	6163      	str	r3, [r4, #20]
 80147d8:	b002      	add	sp, #8
 80147da:	bd70      	pop	{r4, r5, r6, pc}
 80147dc:	ab01      	add	r3, sp, #4
 80147de:	466a      	mov	r2, sp
 80147e0:	f7ff ffca 	bl	8014778 <__swhatbuf_r>
 80147e4:	9900      	ldr	r1, [sp, #0]
 80147e6:	4605      	mov	r5, r0
 80147e8:	4630      	mov	r0, r6
 80147ea:	f000 f879 	bl	80148e0 <_malloc_r>
 80147ee:	b948      	cbnz	r0, 8014804 <__smakebuf_r+0x44>
 80147f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147f4:	059a      	lsls	r2, r3, #22
 80147f6:	d4ef      	bmi.n	80147d8 <__smakebuf_r+0x18>
 80147f8:	f023 0303 	bic.w	r3, r3, #3
 80147fc:	f043 0302 	orr.w	r3, r3, #2
 8014800:	81a3      	strh	r3, [r4, #12]
 8014802:	e7e3      	b.n	80147cc <__smakebuf_r+0xc>
 8014804:	4b0d      	ldr	r3, [pc, #52]	; (801483c <__smakebuf_r+0x7c>)
 8014806:	62b3      	str	r3, [r6, #40]	; 0x28
 8014808:	89a3      	ldrh	r3, [r4, #12]
 801480a:	6020      	str	r0, [r4, #0]
 801480c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014810:	81a3      	strh	r3, [r4, #12]
 8014812:	9b00      	ldr	r3, [sp, #0]
 8014814:	6163      	str	r3, [r4, #20]
 8014816:	9b01      	ldr	r3, [sp, #4]
 8014818:	6120      	str	r0, [r4, #16]
 801481a:	b15b      	cbz	r3, 8014834 <__smakebuf_r+0x74>
 801481c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014820:	4630      	mov	r0, r6
 8014822:	f000 fc2d 	bl	8015080 <_isatty_r>
 8014826:	b128      	cbz	r0, 8014834 <__smakebuf_r+0x74>
 8014828:	89a3      	ldrh	r3, [r4, #12]
 801482a:	f023 0303 	bic.w	r3, r3, #3
 801482e:	f043 0301 	orr.w	r3, r3, #1
 8014832:	81a3      	strh	r3, [r4, #12]
 8014834:	89a0      	ldrh	r0, [r4, #12]
 8014836:	4305      	orrs	r5, r0
 8014838:	81a5      	strh	r5, [r4, #12]
 801483a:	e7cd      	b.n	80147d8 <__smakebuf_r+0x18>
 801483c:	080145d1 	.word	0x080145d1

08014840 <_free_r>:
 8014840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014842:	2900      	cmp	r1, #0
 8014844:	d048      	beq.n	80148d8 <_free_r+0x98>
 8014846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801484a:	9001      	str	r0, [sp, #4]
 801484c:	2b00      	cmp	r3, #0
 801484e:	f1a1 0404 	sub.w	r4, r1, #4
 8014852:	bfb8      	it	lt
 8014854:	18e4      	addlt	r4, r4, r3
 8014856:	f000 fc35 	bl	80150c4 <__malloc_lock>
 801485a:	4a20      	ldr	r2, [pc, #128]	; (80148dc <_free_r+0x9c>)
 801485c:	9801      	ldr	r0, [sp, #4]
 801485e:	6813      	ldr	r3, [r2, #0]
 8014860:	4615      	mov	r5, r2
 8014862:	b933      	cbnz	r3, 8014872 <_free_r+0x32>
 8014864:	6063      	str	r3, [r4, #4]
 8014866:	6014      	str	r4, [r2, #0]
 8014868:	b003      	add	sp, #12
 801486a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801486e:	f000 bc2f 	b.w	80150d0 <__malloc_unlock>
 8014872:	42a3      	cmp	r3, r4
 8014874:	d90b      	bls.n	801488e <_free_r+0x4e>
 8014876:	6821      	ldr	r1, [r4, #0]
 8014878:	1862      	adds	r2, r4, r1
 801487a:	4293      	cmp	r3, r2
 801487c:	bf04      	itt	eq
 801487e:	681a      	ldreq	r2, [r3, #0]
 8014880:	685b      	ldreq	r3, [r3, #4]
 8014882:	6063      	str	r3, [r4, #4]
 8014884:	bf04      	itt	eq
 8014886:	1852      	addeq	r2, r2, r1
 8014888:	6022      	streq	r2, [r4, #0]
 801488a:	602c      	str	r4, [r5, #0]
 801488c:	e7ec      	b.n	8014868 <_free_r+0x28>
 801488e:	461a      	mov	r2, r3
 8014890:	685b      	ldr	r3, [r3, #4]
 8014892:	b10b      	cbz	r3, 8014898 <_free_r+0x58>
 8014894:	42a3      	cmp	r3, r4
 8014896:	d9fa      	bls.n	801488e <_free_r+0x4e>
 8014898:	6811      	ldr	r1, [r2, #0]
 801489a:	1855      	adds	r5, r2, r1
 801489c:	42a5      	cmp	r5, r4
 801489e:	d10b      	bne.n	80148b8 <_free_r+0x78>
 80148a0:	6824      	ldr	r4, [r4, #0]
 80148a2:	4421      	add	r1, r4
 80148a4:	1854      	adds	r4, r2, r1
 80148a6:	42a3      	cmp	r3, r4
 80148a8:	6011      	str	r1, [r2, #0]
 80148aa:	d1dd      	bne.n	8014868 <_free_r+0x28>
 80148ac:	681c      	ldr	r4, [r3, #0]
 80148ae:	685b      	ldr	r3, [r3, #4]
 80148b0:	6053      	str	r3, [r2, #4]
 80148b2:	4421      	add	r1, r4
 80148b4:	6011      	str	r1, [r2, #0]
 80148b6:	e7d7      	b.n	8014868 <_free_r+0x28>
 80148b8:	d902      	bls.n	80148c0 <_free_r+0x80>
 80148ba:	230c      	movs	r3, #12
 80148bc:	6003      	str	r3, [r0, #0]
 80148be:	e7d3      	b.n	8014868 <_free_r+0x28>
 80148c0:	6825      	ldr	r5, [r4, #0]
 80148c2:	1961      	adds	r1, r4, r5
 80148c4:	428b      	cmp	r3, r1
 80148c6:	bf04      	itt	eq
 80148c8:	6819      	ldreq	r1, [r3, #0]
 80148ca:	685b      	ldreq	r3, [r3, #4]
 80148cc:	6063      	str	r3, [r4, #4]
 80148ce:	bf04      	itt	eq
 80148d0:	1949      	addeq	r1, r1, r5
 80148d2:	6021      	streq	r1, [r4, #0]
 80148d4:	6054      	str	r4, [r2, #4]
 80148d6:	e7c7      	b.n	8014868 <_free_r+0x28>
 80148d8:	b003      	add	sp, #12
 80148da:	bd30      	pop	{r4, r5, pc}
 80148dc:	20007010 	.word	0x20007010

080148e0 <_malloc_r>:
 80148e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148e2:	1ccd      	adds	r5, r1, #3
 80148e4:	f025 0503 	bic.w	r5, r5, #3
 80148e8:	3508      	adds	r5, #8
 80148ea:	2d0c      	cmp	r5, #12
 80148ec:	bf38      	it	cc
 80148ee:	250c      	movcc	r5, #12
 80148f0:	2d00      	cmp	r5, #0
 80148f2:	4606      	mov	r6, r0
 80148f4:	db01      	blt.n	80148fa <_malloc_r+0x1a>
 80148f6:	42a9      	cmp	r1, r5
 80148f8:	d903      	bls.n	8014902 <_malloc_r+0x22>
 80148fa:	230c      	movs	r3, #12
 80148fc:	6033      	str	r3, [r6, #0]
 80148fe:	2000      	movs	r0, #0
 8014900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014902:	f000 fbdf 	bl	80150c4 <__malloc_lock>
 8014906:	4921      	ldr	r1, [pc, #132]	; (801498c <_malloc_r+0xac>)
 8014908:	680a      	ldr	r2, [r1, #0]
 801490a:	4614      	mov	r4, r2
 801490c:	b99c      	cbnz	r4, 8014936 <_malloc_r+0x56>
 801490e:	4f20      	ldr	r7, [pc, #128]	; (8014990 <_malloc_r+0xb0>)
 8014910:	683b      	ldr	r3, [r7, #0]
 8014912:	b923      	cbnz	r3, 801491e <_malloc_r+0x3e>
 8014914:	4621      	mov	r1, r4
 8014916:	4630      	mov	r0, r6
 8014918:	f000 fb2a 	bl	8014f70 <_sbrk_r>
 801491c:	6038      	str	r0, [r7, #0]
 801491e:	4629      	mov	r1, r5
 8014920:	4630      	mov	r0, r6
 8014922:	f000 fb25 	bl	8014f70 <_sbrk_r>
 8014926:	1c43      	adds	r3, r0, #1
 8014928:	d123      	bne.n	8014972 <_malloc_r+0x92>
 801492a:	230c      	movs	r3, #12
 801492c:	6033      	str	r3, [r6, #0]
 801492e:	4630      	mov	r0, r6
 8014930:	f000 fbce 	bl	80150d0 <__malloc_unlock>
 8014934:	e7e3      	b.n	80148fe <_malloc_r+0x1e>
 8014936:	6823      	ldr	r3, [r4, #0]
 8014938:	1b5b      	subs	r3, r3, r5
 801493a:	d417      	bmi.n	801496c <_malloc_r+0x8c>
 801493c:	2b0b      	cmp	r3, #11
 801493e:	d903      	bls.n	8014948 <_malloc_r+0x68>
 8014940:	6023      	str	r3, [r4, #0]
 8014942:	441c      	add	r4, r3
 8014944:	6025      	str	r5, [r4, #0]
 8014946:	e004      	b.n	8014952 <_malloc_r+0x72>
 8014948:	6863      	ldr	r3, [r4, #4]
 801494a:	42a2      	cmp	r2, r4
 801494c:	bf0c      	ite	eq
 801494e:	600b      	streq	r3, [r1, #0]
 8014950:	6053      	strne	r3, [r2, #4]
 8014952:	4630      	mov	r0, r6
 8014954:	f000 fbbc 	bl	80150d0 <__malloc_unlock>
 8014958:	f104 000b 	add.w	r0, r4, #11
 801495c:	1d23      	adds	r3, r4, #4
 801495e:	f020 0007 	bic.w	r0, r0, #7
 8014962:	1ac2      	subs	r2, r0, r3
 8014964:	d0cc      	beq.n	8014900 <_malloc_r+0x20>
 8014966:	1a1b      	subs	r3, r3, r0
 8014968:	50a3      	str	r3, [r4, r2]
 801496a:	e7c9      	b.n	8014900 <_malloc_r+0x20>
 801496c:	4622      	mov	r2, r4
 801496e:	6864      	ldr	r4, [r4, #4]
 8014970:	e7cc      	b.n	801490c <_malloc_r+0x2c>
 8014972:	1cc4      	adds	r4, r0, #3
 8014974:	f024 0403 	bic.w	r4, r4, #3
 8014978:	42a0      	cmp	r0, r4
 801497a:	d0e3      	beq.n	8014944 <_malloc_r+0x64>
 801497c:	1a21      	subs	r1, r4, r0
 801497e:	4630      	mov	r0, r6
 8014980:	f000 faf6 	bl	8014f70 <_sbrk_r>
 8014984:	3001      	adds	r0, #1
 8014986:	d1dd      	bne.n	8014944 <_malloc_r+0x64>
 8014988:	e7cf      	b.n	801492a <_malloc_r+0x4a>
 801498a:	bf00      	nop
 801498c:	20007010 	.word	0x20007010
 8014990:	20007014 	.word	0x20007014

08014994 <__sfputc_r>:
 8014994:	6893      	ldr	r3, [r2, #8]
 8014996:	3b01      	subs	r3, #1
 8014998:	2b00      	cmp	r3, #0
 801499a:	b410      	push	{r4}
 801499c:	6093      	str	r3, [r2, #8]
 801499e:	da08      	bge.n	80149b2 <__sfputc_r+0x1e>
 80149a0:	6994      	ldr	r4, [r2, #24]
 80149a2:	42a3      	cmp	r3, r4
 80149a4:	db01      	blt.n	80149aa <__sfputc_r+0x16>
 80149a6:	290a      	cmp	r1, #10
 80149a8:	d103      	bne.n	80149b2 <__sfputc_r+0x1e>
 80149aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149ae:	f7ff bc69 	b.w	8014284 <__swbuf_r>
 80149b2:	6813      	ldr	r3, [r2, #0]
 80149b4:	1c58      	adds	r0, r3, #1
 80149b6:	6010      	str	r0, [r2, #0]
 80149b8:	7019      	strb	r1, [r3, #0]
 80149ba:	4608      	mov	r0, r1
 80149bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149c0:	4770      	bx	lr

080149c2 <__sfputs_r>:
 80149c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149c4:	4606      	mov	r6, r0
 80149c6:	460f      	mov	r7, r1
 80149c8:	4614      	mov	r4, r2
 80149ca:	18d5      	adds	r5, r2, r3
 80149cc:	42ac      	cmp	r4, r5
 80149ce:	d101      	bne.n	80149d4 <__sfputs_r+0x12>
 80149d0:	2000      	movs	r0, #0
 80149d2:	e007      	b.n	80149e4 <__sfputs_r+0x22>
 80149d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149d8:	463a      	mov	r2, r7
 80149da:	4630      	mov	r0, r6
 80149dc:	f7ff ffda 	bl	8014994 <__sfputc_r>
 80149e0:	1c43      	adds	r3, r0, #1
 80149e2:	d1f3      	bne.n	80149cc <__sfputs_r+0xa>
 80149e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080149e8 <_vfiprintf_r>:
 80149e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149ec:	460d      	mov	r5, r1
 80149ee:	b09d      	sub	sp, #116	; 0x74
 80149f0:	4614      	mov	r4, r2
 80149f2:	4698      	mov	r8, r3
 80149f4:	4606      	mov	r6, r0
 80149f6:	b118      	cbz	r0, 8014a00 <_vfiprintf_r+0x18>
 80149f8:	6983      	ldr	r3, [r0, #24]
 80149fa:	b90b      	cbnz	r3, 8014a00 <_vfiprintf_r+0x18>
 80149fc:	f7ff fe1c 	bl	8014638 <__sinit>
 8014a00:	4b89      	ldr	r3, [pc, #548]	; (8014c28 <_vfiprintf_r+0x240>)
 8014a02:	429d      	cmp	r5, r3
 8014a04:	d11b      	bne.n	8014a3e <_vfiprintf_r+0x56>
 8014a06:	6875      	ldr	r5, [r6, #4]
 8014a08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a0a:	07d9      	lsls	r1, r3, #31
 8014a0c:	d405      	bmi.n	8014a1a <_vfiprintf_r+0x32>
 8014a0e:	89ab      	ldrh	r3, [r5, #12]
 8014a10:	059a      	lsls	r2, r3, #22
 8014a12:	d402      	bmi.n	8014a1a <_vfiprintf_r+0x32>
 8014a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a16:	f7ff fead 	bl	8014774 <__retarget_lock_acquire_recursive>
 8014a1a:	89ab      	ldrh	r3, [r5, #12]
 8014a1c:	071b      	lsls	r3, r3, #28
 8014a1e:	d501      	bpl.n	8014a24 <_vfiprintf_r+0x3c>
 8014a20:	692b      	ldr	r3, [r5, #16]
 8014a22:	b9eb      	cbnz	r3, 8014a60 <_vfiprintf_r+0x78>
 8014a24:	4629      	mov	r1, r5
 8014a26:	4630      	mov	r0, r6
 8014a28:	f7ff fc7e 	bl	8014328 <__swsetup_r>
 8014a2c:	b1c0      	cbz	r0, 8014a60 <_vfiprintf_r+0x78>
 8014a2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a30:	07dc      	lsls	r4, r3, #31
 8014a32:	d50e      	bpl.n	8014a52 <_vfiprintf_r+0x6a>
 8014a34:	f04f 30ff 	mov.w	r0, #4294967295
 8014a38:	b01d      	add	sp, #116	; 0x74
 8014a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a3e:	4b7b      	ldr	r3, [pc, #492]	; (8014c2c <_vfiprintf_r+0x244>)
 8014a40:	429d      	cmp	r5, r3
 8014a42:	d101      	bne.n	8014a48 <_vfiprintf_r+0x60>
 8014a44:	68b5      	ldr	r5, [r6, #8]
 8014a46:	e7df      	b.n	8014a08 <_vfiprintf_r+0x20>
 8014a48:	4b79      	ldr	r3, [pc, #484]	; (8014c30 <_vfiprintf_r+0x248>)
 8014a4a:	429d      	cmp	r5, r3
 8014a4c:	bf08      	it	eq
 8014a4e:	68f5      	ldreq	r5, [r6, #12]
 8014a50:	e7da      	b.n	8014a08 <_vfiprintf_r+0x20>
 8014a52:	89ab      	ldrh	r3, [r5, #12]
 8014a54:	0598      	lsls	r0, r3, #22
 8014a56:	d4ed      	bmi.n	8014a34 <_vfiprintf_r+0x4c>
 8014a58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a5a:	f7ff fe8c 	bl	8014776 <__retarget_lock_release_recursive>
 8014a5e:	e7e9      	b.n	8014a34 <_vfiprintf_r+0x4c>
 8014a60:	2300      	movs	r3, #0
 8014a62:	9309      	str	r3, [sp, #36]	; 0x24
 8014a64:	2320      	movs	r3, #32
 8014a66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014a6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a6e:	2330      	movs	r3, #48	; 0x30
 8014a70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014c34 <_vfiprintf_r+0x24c>
 8014a74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014a78:	f04f 0901 	mov.w	r9, #1
 8014a7c:	4623      	mov	r3, r4
 8014a7e:	469a      	mov	sl, r3
 8014a80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a84:	b10a      	cbz	r2, 8014a8a <_vfiprintf_r+0xa2>
 8014a86:	2a25      	cmp	r2, #37	; 0x25
 8014a88:	d1f9      	bne.n	8014a7e <_vfiprintf_r+0x96>
 8014a8a:	ebba 0b04 	subs.w	fp, sl, r4
 8014a8e:	d00b      	beq.n	8014aa8 <_vfiprintf_r+0xc0>
 8014a90:	465b      	mov	r3, fp
 8014a92:	4622      	mov	r2, r4
 8014a94:	4629      	mov	r1, r5
 8014a96:	4630      	mov	r0, r6
 8014a98:	f7ff ff93 	bl	80149c2 <__sfputs_r>
 8014a9c:	3001      	adds	r0, #1
 8014a9e:	f000 80aa 	beq.w	8014bf6 <_vfiprintf_r+0x20e>
 8014aa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014aa4:	445a      	add	r2, fp
 8014aa6:	9209      	str	r2, [sp, #36]	; 0x24
 8014aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	f000 80a2 	beq.w	8014bf6 <_vfiprintf_r+0x20e>
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8014ab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014abc:	f10a 0a01 	add.w	sl, sl, #1
 8014ac0:	9304      	str	r3, [sp, #16]
 8014ac2:	9307      	str	r3, [sp, #28]
 8014ac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ac8:	931a      	str	r3, [sp, #104]	; 0x68
 8014aca:	4654      	mov	r4, sl
 8014acc:	2205      	movs	r2, #5
 8014ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ad2:	4858      	ldr	r0, [pc, #352]	; (8014c34 <_vfiprintf_r+0x24c>)
 8014ad4:	f7eb fb84 	bl	80001e0 <memchr>
 8014ad8:	9a04      	ldr	r2, [sp, #16]
 8014ada:	b9d8      	cbnz	r0, 8014b14 <_vfiprintf_r+0x12c>
 8014adc:	06d1      	lsls	r1, r2, #27
 8014ade:	bf44      	itt	mi
 8014ae0:	2320      	movmi	r3, #32
 8014ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ae6:	0713      	lsls	r3, r2, #28
 8014ae8:	bf44      	itt	mi
 8014aea:	232b      	movmi	r3, #43	; 0x2b
 8014aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014af0:	f89a 3000 	ldrb.w	r3, [sl]
 8014af4:	2b2a      	cmp	r3, #42	; 0x2a
 8014af6:	d015      	beq.n	8014b24 <_vfiprintf_r+0x13c>
 8014af8:	9a07      	ldr	r2, [sp, #28]
 8014afa:	4654      	mov	r4, sl
 8014afc:	2000      	movs	r0, #0
 8014afe:	f04f 0c0a 	mov.w	ip, #10
 8014b02:	4621      	mov	r1, r4
 8014b04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b08:	3b30      	subs	r3, #48	; 0x30
 8014b0a:	2b09      	cmp	r3, #9
 8014b0c:	d94e      	bls.n	8014bac <_vfiprintf_r+0x1c4>
 8014b0e:	b1b0      	cbz	r0, 8014b3e <_vfiprintf_r+0x156>
 8014b10:	9207      	str	r2, [sp, #28]
 8014b12:	e014      	b.n	8014b3e <_vfiprintf_r+0x156>
 8014b14:	eba0 0308 	sub.w	r3, r0, r8
 8014b18:	fa09 f303 	lsl.w	r3, r9, r3
 8014b1c:	4313      	orrs	r3, r2
 8014b1e:	9304      	str	r3, [sp, #16]
 8014b20:	46a2      	mov	sl, r4
 8014b22:	e7d2      	b.n	8014aca <_vfiprintf_r+0xe2>
 8014b24:	9b03      	ldr	r3, [sp, #12]
 8014b26:	1d19      	adds	r1, r3, #4
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	9103      	str	r1, [sp, #12]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	bfbb      	ittet	lt
 8014b30:	425b      	neglt	r3, r3
 8014b32:	f042 0202 	orrlt.w	r2, r2, #2
 8014b36:	9307      	strge	r3, [sp, #28]
 8014b38:	9307      	strlt	r3, [sp, #28]
 8014b3a:	bfb8      	it	lt
 8014b3c:	9204      	strlt	r2, [sp, #16]
 8014b3e:	7823      	ldrb	r3, [r4, #0]
 8014b40:	2b2e      	cmp	r3, #46	; 0x2e
 8014b42:	d10c      	bne.n	8014b5e <_vfiprintf_r+0x176>
 8014b44:	7863      	ldrb	r3, [r4, #1]
 8014b46:	2b2a      	cmp	r3, #42	; 0x2a
 8014b48:	d135      	bne.n	8014bb6 <_vfiprintf_r+0x1ce>
 8014b4a:	9b03      	ldr	r3, [sp, #12]
 8014b4c:	1d1a      	adds	r2, r3, #4
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	9203      	str	r2, [sp, #12]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	bfb8      	it	lt
 8014b56:	f04f 33ff 	movlt.w	r3, #4294967295
 8014b5a:	3402      	adds	r4, #2
 8014b5c:	9305      	str	r3, [sp, #20]
 8014b5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014c44 <_vfiprintf_r+0x25c>
 8014b62:	7821      	ldrb	r1, [r4, #0]
 8014b64:	2203      	movs	r2, #3
 8014b66:	4650      	mov	r0, sl
 8014b68:	f7eb fb3a 	bl	80001e0 <memchr>
 8014b6c:	b140      	cbz	r0, 8014b80 <_vfiprintf_r+0x198>
 8014b6e:	2340      	movs	r3, #64	; 0x40
 8014b70:	eba0 000a 	sub.w	r0, r0, sl
 8014b74:	fa03 f000 	lsl.w	r0, r3, r0
 8014b78:	9b04      	ldr	r3, [sp, #16]
 8014b7a:	4303      	orrs	r3, r0
 8014b7c:	3401      	adds	r4, #1
 8014b7e:	9304      	str	r3, [sp, #16]
 8014b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b84:	482c      	ldr	r0, [pc, #176]	; (8014c38 <_vfiprintf_r+0x250>)
 8014b86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014b8a:	2206      	movs	r2, #6
 8014b8c:	f7eb fb28 	bl	80001e0 <memchr>
 8014b90:	2800      	cmp	r0, #0
 8014b92:	d03f      	beq.n	8014c14 <_vfiprintf_r+0x22c>
 8014b94:	4b29      	ldr	r3, [pc, #164]	; (8014c3c <_vfiprintf_r+0x254>)
 8014b96:	bb1b      	cbnz	r3, 8014be0 <_vfiprintf_r+0x1f8>
 8014b98:	9b03      	ldr	r3, [sp, #12]
 8014b9a:	3307      	adds	r3, #7
 8014b9c:	f023 0307 	bic.w	r3, r3, #7
 8014ba0:	3308      	adds	r3, #8
 8014ba2:	9303      	str	r3, [sp, #12]
 8014ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ba6:	443b      	add	r3, r7
 8014ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8014baa:	e767      	b.n	8014a7c <_vfiprintf_r+0x94>
 8014bac:	fb0c 3202 	mla	r2, ip, r2, r3
 8014bb0:	460c      	mov	r4, r1
 8014bb2:	2001      	movs	r0, #1
 8014bb4:	e7a5      	b.n	8014b02 <_vfiprintf_r+0x11a>
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	3401      	adds	r4, #1
 8014bba:	9305      	str	r3, [sp, #20]
 8014bbc:	4619      	mov	r1, r3
 8014bbe:	f04f 0c0a 	mov.w	ip, #10
 8014bc2:	4620      	mov	r0, r4
 8014bc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014bc8:	3a30      	subs	r2, #48	; 0x30
 8014bca:	2a09      	cmp	r2, #9
 8014bcc:	d903      	bls.n	8014bd6 <_vfiprintf_r+0x1ee>
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d0c5      	beq.n	8014b5e <_vfiprintf_r+0x176>
 8014bd2:	9105      	str	r1, [sp, #20]
 8014bd4:	e7c3      	b.n	8014b5e <_vfiprintf_r+0x176>
 8014bd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8014bda:	4604      	mov	r4, r0
 8014bdc:	2301      	movs	r3, #1
 8014bde:	e7f0      	b.n	8014bc2 <_vfiprintf_r+0x1da>
 8014be0:	ab03      	add	r3, sp, #12
 8014be2:	9300      	str	r3, [sp, #0]
 8014be4:	462a      	mov	r2, r5
 8014be6:	4b16      	ldr	r3, [pc, #88]	; (8014c40 <_vfiprintf_r+0x258>)
 8014be8:	a904      	add	r1, sp, #16
 8014bea:	4630      	mov	r0, r6
 8014bec:	f3af 8000 	nop.w
 8014bf0:	4607      	mov	r7, r0
 8014bf2:	1c78      	adds	r0, r7, #1
 8014bf4:	d1d6      	bne.n	8014ba4 <_vfiprintf_r+0x1bc>
 8014bf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014bf8:	07d9      	lsls	r1, r3, #31
 8014bfa:	d405      	bmi.n	8014c08 <_vfiprintf_r+0x220>
 8014bfc:	89ab      	ldrh	r3, [r5, #12]
 8014bfe:	059a      	lsls	r2, r3, #22
 8014c00:	d402      	bmi.n	8014c08 <_vfiprintf_r+0x220>
 8014c02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c04:	f7ff fdb7 	bl	8014776 <__retarget_lock_release_recursive>
 8014c08:	89ab      	ldrh	r3, [r5, #12]
 8014c0a:	065b      	lsls	r3, r3, #25
 8014c0c:	f53f af12 	bmi.w	8014a34 <_vfiprintf_r+0x4c>
 8014c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c12:	e711      	b.n	8014a38 <_vfiprintf_r+0x50>
 8014c14:	ab03      	add	r3, sp, #12
 8014c16:	9300      	str	r3, [sp, #0]
 8014c18:	462a      	mov	r2, r5
 8014c1a:	4b09      	ldr	r3, [pc, #36]	; (8014c40 <_vfiprintf_r+0x258>)
 8014c1c:	a904      	add	r1, sp, #16
 8014c1e:	4630      	mov	r0, r6
 8014c20:	f000 f880 	bl	8014d24 <_printf_i>
 8014c24:	e7e4      	b.n	8014bf0 <_vfiprintf_r+0x208>
 8014c26:	bf00      	nop
 8014c28:	0801526c 	.word	0x0801526c
 8014c2c:	0801528c 	.word	0x0801528c
 8014c30:	0801524c 	.word	0x0801524c
 8014c34:	080152ac 	.word	0x080152ac
 8014c38:	080152b6 	.word	0x080152b6
 8014c3c:	00000000 	.word	0x00000000
 8014c40:	080149c3 	.word	0x080149c3
 8014c44:	080152b2 	.word	0x080152b2

08014c48 <_printf_common>:
 8014c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c4c:	4616      	mov	r6, r2
 8014c4e:	4699      	mov	r9, r3
 8014c50:	688a      	ldr	r2, [r1, #8]
 8014c52:	690b      	ldr	r3, [r1, #16]
 8014c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014c58:	4293      	cmp	r3, r2
 8014c5a:	bfb8      	it	lt
 8014c5c:	4613      	movlt	r3, r2
 8014c5e:	6033      	str	r3, [r6, #0]
 8014c60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014c64:	4607      	mov	r7, r0
 8014c66:	460c      	mov	r4, r1
 8014c68:	b10a      	cbz	r2, 8014c6e <_printf_common+0x26>
 8014c6a:	3301      	adds	r3, #1
 8014c6c:	6033      	str	r3, [r6, #0]
 8014c6e:	6823      	ldr	r3, [r4, #0]
 8014c70:	0699      	lsls	r1, r3, #26
 8014c72:	bf42      	ittt	mi
 8014c74:	6833      	ldrmi	r3, [r6, #0]
 8014c76:	3302      	addmi	r3, #2
 8014c78:	6033      	strmi	r3, [r6, #0]
 8014c7a:	6825      	ldr	r5, [r4, #0]
 8014c7c:	f015 0506 	ands.w	r5, r5, #6
 8014c80:	d106      	bne.n	8014c90 <_printf_common+0x48>
 8014c82:	f104 0a19 	add.w	sl, r4, #25
 8014c86:	68e3      	ldr	r3, [r4, #12]
 8014c88:	6832      	ldr	r2, [r6, #0]
 8014c8a:	1a9b      	subs	r3, r3, r2
 8014c8c:	42ab      	cmp	r3, r5
 8014c8e:	dc26      	bgt.n	8014cde <_printf_common+0x96>
 8014c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014c94:	1e13      	subs	r3, r2, #0
 8014c96:	6822      	ldr	r2, [r4, #0]
 8014c98:	bf18      	it	ne
 8014c9a:	2301      	movne	r3, #1
 8014c9c:	0692      	lsls	r2, r2, #26
 8014c9e:	d42b      	bmi.n	8014cf8 <_printf_common+0xb0>
 8014ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014ca4:	4649      	mov	r1, r9
 8014ca6:	4638      	mov	r0, r7
 8014ca8:	47c0      	blx	r8
 8014caa:	3001      	adds	r0, #1
 8014cac:	d01e      	beq.n	8014cec <_printf_common+0xa4>
 8014cae:	6823      	ldr	r3, [r4, #0]
 8014cb0:	68e5      	ldr	r5, [r4, #12]
 8014cb2:	6832      	ldr	r2, [r6, #0]
 8014cb4:	f003 0306 	and.w	r3, r3, #6
 8014cb8:	2b04      	cmp	r3, #4
 8014cba:	bf08      	it	eq
 8014cbc:	1aad      	subeq	r5, r5, r2
 8014cbe:	68a3      	ldr	r3, [r4, #8]
 8014cc0:	6922      	ldr	r2, [r4, #16]
 8014cc2:	bf0c      	ite	eq
 8014cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014cc8:	2500      	movne	r5, #0
 8014cca:	4293      	cmp	r3, r2
 8014ccc:	bfc4      	itt	gt
 8014cce:	1a9b      	subgt	r3, r3, r2
 8014cd0:	18ed      	addgt	r5, r5, r3
 8014cd2:	2600      	movs	r6, #0
 8014cd4:	341a      	adds	r4, #26
 8014cd6:	42b5      	cmp	r5, r6
 8014cd8:	d11a      	bne.n	8014d10 <_printf_common+0xc8>
 8014cda:	2000      	movs	r0, #0
 8014cdc:	e008      	b.n	8014cf0 <_printf_common+0xa8>
 8014cde:	2301      	movs	r3, #1
 8014ce0:	4652      	mov	r2, sl
 8014ce2:	4649      	mov	r1, r9
 8014ce4:	4638      	mov	r0, r7
 8014ce6:	47c0      	blx	r8
 8014ce8:	3001      	adds	r0, #1
 8014cea:	d103      	bne.n	8014cf4 <_printf_common+0xac>
 8014cec:	f04f 30ff 	mov.w	r0, #4294967295
 8014cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cf4:	3501      	adds	r5, #1
 8014cf6:	e7c6      	b.n	8014c86 <_printf_common+0x3e>
 8014cf8:	18e1      	adds	r1, r4, r3
 8014cfa:	1c5a      	adds	r2, r3, #1
 8014cfc:	2030      	movs	r0, #48	; 0x30
 8014cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014d02:	4422      	add	r2, r4
 8014d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014d0c:	3302      	adds	r3, #2
 8014d0e:	e7c7      	b.n	8014ca0 <_printf_common+0x58>
 8014d10:	2301      	movs	r3, #1
 8014d12:	4622      	mov	r2, r4
 8014d14:	4649      	mov	r1, r9
 8014d16:	4638      	mov	r0, r7
 8014d18:	47c0      	blx	r8
 8014d1a:	3001      	adds	r0, #1
 8014d1c:	d0e6      	beq.n	8014cec <_printf_common+0xa4>
 8014d1e:	3601      	adds	r6, #1
 8014d20:	e7d9      	b.n	8014cd6 <_printf_common+0x8e>
	...

08014d24 <_printf_i>:
 8014d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014d28:	460c      	mov	r4, r1
 8014d2a:	4691      	mov	r9, r2
 8014d2c:	7e27      	ldrb	r7, [r4, #24]
 8014d2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014d30:	2f78      	cmp	r7, #120	; 0x78
 8014d32:	4680      	mov	r8, r0
 8014d34:	469a      	mov	sl, r3
 8014d36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014d3a:	d807      	bhi.n	8014d4c <_printf_i+0x28>
 8014d3c:	2f62      	cmp	r7, #98	; 0x62
 8014d3e:	d80a      	bhi.n	8014d56 <_printf_i+0x32>
 8014d40:	2f00      	cmp	r7, #0
 8014d42:	f000 80d8 	beq.w	8014ef6 <_printf_i+0x1d2>
 8014d46:	2f58      	cmp	r7, #88	; 0x58
 8014d48:	f000 80a3 	beq.w	8014e92 <_printf_i+0x16e>
 8014d4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014d54:	e03a      	b.n	8014dcc <_printf_i+0xa8>
 8014d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014d5a:	2b15      	cmp	r3, #21
 8014d5c:	d8f6      	bhi.n	8014d4c <_printf_i+0x28>
 8014d5e:	a001      	add	r0, pc, #4	; (adr r0, 8014d64 <_printf_i+0x40>)
 8014d60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014d64:	08014dbd 	.word	0x08014dbd
 8014d68:	08014dd1 	.word	0x08014dd1
 8014d6c:	08014d4d 	.word	0x08014d4d
 8014d70:	08014d4d 	.word	0x08014d4d
 8014d74:	08014d4d 	.word	0x08014d4d
 8014d78:	08014d4d 	.word	0x08014d4d
 8014d7c:	08014dd1 	.word	0x08014dd1
 8014d80:	08014d4d 	.word	0x08014d4d
 8014d84:	08014d4d 	.word	0x08014d4d
 8014d88:	08014d4d 	.word	0x08014d4d
 8014d8c:	08014d4d 	.word	0x08014d4d
 8014d90:	08014edd 	.word	0x08014edd
 8014d94:	08014e01 	.word	0x08014e01
 8014d98:	08014ebf 	.word	0x08014ebf
 8014d9c:	08014d4d 	.word	0x08014d4d
 8014da0:	08014d4d 	.word	0x08014d4d
 8014da4:	08014eff 	.word	0x08014eff
 8014da8:	08014d4d 	.word	0x08014d4d
 8014dac:	08014e01 	.word	0x08014e01
 8014db0:	08014d4d 	.word	0x08014d4d
 8014db4:	08014d4d 	.word	0x08014d4d
 8014db8:	08014ec7 	.word	0x08014ec7
 8014dbc:	680b      	ldr	r3, [r1, #0]
 8014dbe:	1d1a      	adds	r2, r3, #4
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	600a      	str	r2, [r1, #0]
 8014dc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014dcc:	2301      	movs	r3, #1
 8014dce:	e0a3      	b.n	8014f18 <_printf_i+0x1f4>
 8014dd0:	6825      	ldr	r5, [r4, #0]
 8014dd2:	6808      	ldr	r0, [r1, #0]
 8014dd4:	062e      	lsls	r6, r5, #24
 8014dd6:	f100 0304 	add.w	r3, r0, #4
 8014dda:	d50a      	bpl.n	8014df2 <_printf_i+0xce>
 8014ddc:	6805      	ldr	r5, [r0, #0]
 8014dde:	600b      	str	r3, [r1, #0]
 8014de0:	2d00      	cmp	r5, #0
 8014de2:	da03      	bge.n	8014dec <_printf_i+0xc8>
 8014de4:	232d      	movs	r3, #45	; 0x2d
 8014de6:	426d      	negs	r5, r5
 8014de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014dec:	485e      	ldr	r0, [pc, #376]	; (8014f68 <_printf_i+0x244>)
 8014dee:	230a      	movs	r3, #10
 8014df0:	e019      	b.n	8014e26 <_printf_i+0x102>
 8014df2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014df6:	6805      	ldr	r5, [r0, #0]
 8014df8:	600b      	str	r3, [r1, #0]
 8014dfa:	bf18      	it	ne
 8014dfc:	b22d      	sxthne	r5, r5
 8014dfe:	e7ef      	b.n	8014de0 <_printf_i+0xbc>
 8014e00:	680b      	ldr	r3, [r1, #0]
 8014e02:	6825      	ldr	r5, [r4, #0]
 8014e04:	1d18      	adds	r0, r3, #4
 8014e06:	6008      	str	r0, [r1, #0]
 8014e08:	0628      	lsls	r0, r5, #24
 8014e0a:	d501      	bpl.n	8014e10 <_printf_i+0xec>
 8014e0c:	681d      	ldr	r5, [r3, #0]
 8014e0e:	e002      	b.n	8014e16 <_printf_i+0xf2>
 8014e10:	0669      	lsls	r1, r5, #25
 8014e12:	d5fb      	bpl.n	8014e0c <_printf_i+0xe8>
 8014e14:	881d      	ldrh	r5, [r3, #0]
 8014e16:	4854      	ldr	r0, [pc, #336]	; (8014f68 <_printf_i+0x244>)
 8014e18:	2f6f      	cmp	r7, #111	; 0x6f
 8014e1a:	bf0c      	ite	eq
 8014e1c:	2308      	moveq	r3, #8
 8014e1e:	230a      	movne	r3, #10
 8014e20:	2100      	movs	r1, #0
 8014e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014e26:	6866      	ldr	r6, [r4, #4]
 8014e28:	60a6      	str	r6, [r4, #8]
 8014e2a:	2e00      	cmp	r6, #0
 8014e2c:	bfa2      	ittt	ge
 8014e2e:	6821      	ldrge	r1, [r4, #0]
 8014e30:	f021 0104 	bicge.w	r1, r1, #4
 8014e34:	6021      	strge	r1, [r4, #0]
 8014e36:	b90d      	cbnz	r5, 8014e3c <_printf_i+0x118>
 8014e38:	2e00      	cmp	r6, #0
 8014e3a:	d04d      	beq.n	8014ed8 <_printf_i+0x1b4>
 8014e3c:	4616      	mov	r6, r2
 8014e3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8014e42:	fb03 5711 	mls	r7, r3, r1, r5
 8014e46:	5dc7      	ldrb	r7, [r0, r7]
 8014e48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014e4c:	462f      	mov	r7, r5
 8014e4e:	42bb      	cmp	r3, r7
 8014e50:	460d      	mov	r5, r1
 8014e52:	d9f4      	bls.n	8014e3e <_printf_i+0x11a>
 8014e54:	2b08      	cmp	r3, #8
 8014e56:	d10b      	bne.n	8014e70 <_printf_i+0x14c>
 8014e58:	6823      	ldr	r3, [r4, #0]
 8014e5a:	07df      	lsls	r7, r3, #31
 8014e5c:	d508      	bpl.n	8014e70 <_printf_i+0x14c>
 8014e5e:	6923      	ldr	r3, [r4, #16]
 8014e60:	6861      	ldr	r1, [r4, #4]
 8014e62:	4299      	cmp	r1, r3
 8014e64:	bfde      	ittt	le
 8014e66:	2330      	movle	r3, #48	; 0x30
 8014e68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014e6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014e70:	1b92      	subs	r2, r2, r6
 8014e72:	6122      	str	r2, [r4, #16]
 8014e74:	f8cd a000 	str.w	sl, [sp]
 8014e78:	464b      	mov	r3, r9
 8014e7a:	aa03      	add	r2, sp, #12
 8014e7c:	4621      	mov	r1, r4
 8014e7e:	4640      	mov	r0, r8
 8014e80:	f7ff fee2 	bl	8014c48 <_printf_common>
 8014e84:	3001      	adds	r0, #1
 8014e86:	d14c      	bne.n	8014f22 <_printf_i+0x1fe>
 8014e88:	f04f 30ff 	mov.w	r0, #4294967295
 8014e8c:	b004      	add	sp, #16
 8014e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e92:	4835      	ldr	r0, [pc, #212]	; (8014f68 <_printf_i+0x244>)
 8014e94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014e98:	6823      	ldr	r3, [r4, #0]
 8014e9a:	680e      	ldr	r6, [r1, #0]
 8014e9c:	061f      	lsls	r7, r3, #24
 8014e9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8014ea2:	600e      	str	r6, [r1, #0]
 8014ea4:	d514      	bpl.n	8014ed0 <_printf_i+0x1ac>
 8014ea6:	07d9      	lsls	r1, r3, #31
 8014ea8:	bf44      	itt	mi
 8014eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8014eae:	6023      	strmi	r3, [r4, #0]
 8014eb0:	b91d      	cbnz	r5, 8014eba <_printf_i+0x196>
 8014eb2:	6823      	ldr	r3, [r4, #0]
 8014eb4:	f023 0320 	bic.w	r3, r3, #32
 8014eb8:	6023      	str	r3, [r4, #0]
 8014eba:	2310      	movs	r3, #16
 8014ebc:	e7b0      	b.n	8014e20 <_printf_i+0xfc>
 8014ebe:	6823      	ldr	r3, [r4, #0]
 8014ec0:	f043 0320 	orr.w	r3, r3, #32
 8014ec4:	6023      	str	r3, [r4, #0]
 8014ec6:	2378      	movs	r3, #120	; 0x78
 8014ec8:	4828      	ldr	r0, [pc, #160]	; (8014f6c <_printf_i+0x248>)
 8014eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014ece:	e7e3      	b.n	8014e98 <_printf_i+0x174>
 8014ed0:	065e      	lsls	r6, r3, #25
 8014ed2:	bf48      	it	mi
 8014ed4:	b2ad      	uxthmi	r5, r5
 8014ed6:	e7e6      	b.n	8014ea6 <_printf_i+0x182>
 8014ed8:	4616      	mov	r6, r2
 8014eda:	e7bb      	b.n	8014e54 <_printf_i+0x130>
 8014edc:	680b      	ldr	r3, [r1, #0]
 8014ede:	6826      	ldr	r6, [r4, #0]
 8014ee0:	6960      	ldr	r0, [r4, #20]
 8014ee2:	1d1d      	adds	r5, r3, #4
 8014ee4:	600d      	str	r5, [r1, #0]
 8014ee6:	0635      	lsls	r5, r6, #24
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	d501      	bpl.n	8014ef0 <_printf_i+0x1cc>
 8014eec:	6018      	str	r0, [r3, #0]
 8014eee:	e002      	b.n	8014ef6 <_printf_i+0x1d2>
 8014ef0:	0671      	lsls	r1, r6, #25
 8014ef2:	d5fb      	bpl.n	8014eec <_printf_i+0x1c8>
 8014ef4:	8018      	strh	r0, [r3, #0]
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	6123      	str	r3, [r4, #16]
 8014efa:	4616      	mov	r6, r2
 8014efc:	e7ba      	b.n	8014e74 <_printf_i+0x150>
 8014efe:	680b      	ldr	r3, [r1, #0]
 8014f00:	1d1a      	adds	r2, r3, #4
 8014f02:	600a      	str	r2, [r1, #0]
 8014f04:	681e      	ldr	r6, [r3, #0]
 8014f06:	6862      	ldr	r2, [r4, #4]
 8014f08:	2100      	movs	r1, #0
 8014f0a:	4630      	mov	r0, r6
 8014f0c:	f7eb f968 	bl	80001e0 <memchr>
 8014f10:	b108      	cbz	r0, 8014f16 <_printf_i+0x1f2>
 8014f12:	1b80      	subs	r0, r0, r6
 8014f14:	6060      	str	r0, [r4, #4]
 8014f16:	6863      	ldr	r3, [r4, #4]
 8014f18:	6123      	str	r3, [r4, #16]
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014f20:	e7a8      	b.n	8014e74 <_printf_i+0x150>
 8014f22:	6923      	ldr	r3, [r4, #16]
 8014f24:	4632      	mov	r2, r6
 8014f26:	4649      	mov	r1, r9
 8014f28:	4640      	mov	r0, r8
 8014f2a:	47d0      	blx	sl
 8014f2c:	3001      	adds	r0, #1
 8014f2e:	d0ab      	beq.n	8014e88 <_printf_i+0x164>
 8014f30:	6823      	ldr	r3, [r4, #0]
 8014f32:	079b      	lsls	r3, r3, #30
 8014f34:	d413      	bmi.n	8014f5e <_printf_i+0x23a>
 8014f36:	68e0      	ldr	r0, [r4, #12]
 8014f38:	9b03      	ldr	r3, [sp, #12]
 8014f3a:	4298      	cmp	r0, r3
 8014f3c:	bfb8      	it	lt
 8014f3e:	4618      	movlt	r0, r3
 8014f40:	e7a4      	b.n	8014e8c <_printf_i+0x168>
 8014f42:	2301      	movs	r3, #1
 8014f44:	4632      	mov	r2, r6
 8014f46:	4649      	mov	r1, r9
 8014f48:	4640      	mov	r0, r8
 8014f4a:	47d0      	blx	sl
 8014f4c:	3001      	adds	r0, #1
 8014f4e:	d09b      	beq.n	8014e88 <_printf_i+0x164>
 8014f50:	3501      	adds	r5, #1
 8014f52:	68e3      	ldr	r3, [r4, #12]
 8014f54:	9903      	ldr	r1, [sp, #12]
 8014f56:	1a5b      	subs	r3, r3, r1
 8014f58:	42ab      	cmp	r3, r5
 8014f5a:	dcf2      	bgt.n	8014f42 <_printf_i+0x21e>
 8014f5c:	e7eb      	b.n	8014f36 <_printf_i+0x212>
 8014f5e:	2500      	movs	r5, #0
 8014f60:	f104 0619 	add.w	r6, r4, #25
 8014f64:	e7f5      	b.n	8014f52 <_printf_i+0x22e>
 8014f66:	bf00      	nop
 8014f68:	080152bd 	.word	0x080152bd
 8014f6c:	080152ce 	.word	0x080152ce

08014f70 <_sbrk_r>:
 8014f70:	b538      	push	{r3, r4, r5, lr}
 8014f72:	4d06      	ldr	r5, [pc, #24]	; (8014f8c <_sbrk_r+0x1c>)
 8014f74:	2300      	movs	r3, #0
 8014f76:	4604      	mov	r4, r0
 8014f78:	4608      	mov	r0, r1
 8014f7a:	602b      	str	r3, [r5, #0]
 8014f7c:	f7ec f90c 	bl	8001198 <_sbrk>
 8014f80:	1c43      	adds	r3, r0, #1
 8014f82:	d102      	bne.n	8014f8a <_sbrk_r+0x1a>
 8014f84:	682b      	ldr	r3, [r5, #0]
 8014f86:	b103      	cbz	r3, 8014f8a <_sbrk_r+0x1a>
 8014f88:	6023      	str	r3, [r4, #0]
 8014f8a:	bd38      	pop	{r3, r4, r5, pc}
 8014f8c:	20007304 	.word	0x20007304

08014f90 <__sread>:
 8014f90:	b510      	push	{r4, lr}
 8014f92:	460c      	mov	r4, r1
 8014f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f98:	f000 f8a0 	bl	80150dc <_read_r>
 8014f9c:	2800      	cmp	r0, #0
 8014f9e:	bfab      	itete	ge
 8014fa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014fa2:	89a3      	ldrhlt	r3, [r4, #12]
 8014fa4:	181b      	addge	r3, r3, r0
 8014fa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014faa:	bfac      	ite	ge
 8014fac:	6563      	strge	r3, [r4, #84]	; 0x54
 8014fae:	81a3      	strhlt	r3, [r4, #12]
 8014fb0:	bd10      	pop	{r4, pc}

08014fb2 <__swrite>:
 8014fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fb6:	461f      	mov	r7, r3
 8014fb8:	898b      	ldrh	r3, [r1, #12]
 8014fba:	05db      	lsls	r3, r3, #23
 8014fbc:	4605      	mov	r5, r0
 8014fbe:	460c      	mov	r4, r1
 8014fc0:	4616      	mov	r6, r2
 8014fc2:	d505      	bpl.n	8014fd0 <__swrite+0x1e>
 8014fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fc8:	2302      	movs	r3, #2
 8014fca:	2200      	movs	r2, #0
 8014fcc:	f000 f868 	bl	80150a0 <_lseek_r>
 8014fd0:	89a3      	ldrh	r3, [r4, #12]
 8014fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014fd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014fda:	81a3      	strh	r3, [r4, #12]
 8014fdc:	4632      	mov	r2, r6
 8014fde:	463b      	mov	r3, r7
 8014fe0:	4628      	mov	r0, r5
 8014fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014fe6:	f000 b817 	b.w	8015018 <_write_r>

08014fea <__sseek>:
 8014fea:	b510      	push	{r4, lr}
 8014fec:	460c      	mov	r4, r1
 8014fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ff2:	f000 f855 	bl	80150a0 <_lseek_r>
 8014ff6:	1c43      	adds	r3, r0, #1
 8014ff8:	89a3      	ldrh	r3, [r4, #12]
 8014ffa:	bf15      	itete	ne
 8014ffc:	6560      	strne	r0, [r4, #84]	; 0x54
 8014ffe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015002:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015006:	81a3      	strheq	r3, [r4, #12]
 8015008:	bf18      	it	ne
 801500a:	81a3      	strhne	r3, [r4, #12]
 801500c:	bd10      	pop	{r4, pc}

0801500e <__sclose>:
 801500e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015012:	f000 b813 	b.w	801503c <_close_r>
	...

08015018 <_write_r>:
 8015018:	b538      	push	{r3, r4, r5, lr}
 801501a:	4d07      	ldr	r5, [pc, #28]	; (8015038 <_write_r+0x20>)
 801501c:	4604      	mov	r4, r0
 801501e:	4608      	mov	r0, r1
 8015020:	4611      	mov	r1, r2
 8015022:	2200      	movs	r2, #0
 8015024:	602a      	str	r2, [r5, #0]
 8015026:	461a      	mov	r2, r3
 8015028:	f7ec f865 	bl	80010f6 <_write>
 801502c:	1c43      	adds	r3, r0, #1
 801502e:	d102      	bne.n	8015036 <_write_r+0x1e>
 8015030:	682b      	ldr	r3, [r5, #0]
 8015032:	b103      	cbz	r3, 8015036 <_write_r+0x1e>
 8015034:	6023      	str	r3, [r4, #0]
 8015036:	bd38      	pop	{r3, r4, r5, pc}
 8015038:	20007304 	.word	0x20007304

0801503c <_close_r>:
 801503c:	b538      	push	{r3, r4, r5, lr}
 801503e:	4d06      	ldr	r5, [pc, #24]	; (8015058 <_close_r+0x1c>)
 8015040:	2300      	movs	r3, #0
 8015042:	4604      	mov	r4, r0
 8015044:	4608      	mov	r0, r1
 8015046:	602b      	str	r3, [r5, #0]
 8015048:	f7ec f871 	bl	800112e <_close>
 801504c:	1c43      	adds	r3, r0, #1
 801504e:	d102      	bne.n	8015056 <_close_r+0x1a>
 8015050:	682b      	ldr	r3, [r5, #0]
 8015052:	b103      	cbz	r3, 8015056 <_close_r+0x1a>
 8015054:	6023      	str	r3, [r4, #0]
 8015056:	bd38      	pop	{r3, r4, r5, pc}
 8015058:	20007304 	.word	0x20007304

0801505c <_fstat_r>:
 801505c:	b538      	push	{r3, r4, r5, lr}
 801505e:	4d07      	ldr	r5, [pc, #28]	; (801507c <_fstat_r+0x20>)
 8015060:	2300      	movs	r3, #0
 8015062:	4604      	mov	r4, r0
 8015064:	4608      	mov	r0, r1
 8015066:	4611      	mov	r1, r2
 8015068:	602b      	str	r3, [r5, #0]
 801506a:	f7ec f86c 	bl	8001146 <_fstat>
 801506e:	1c43      	adds	r3, r0, #1
 8015070:	d102      	bne.n	8015078 <_fstat_r+0x1c>
 8015072:	682b      	ldr	r3, [r5, #0]
 8015074:	b103      	cbz	r3, 8015078 <_fstat_r+0x1c>
 8015076:	6023      	str	r3, [r4, #0]
 8015078:	bd38      	pop	{r3, r4, r5, pc}
 801507a:	bf00      	nop
 801507c:	20007304 	.word	0x20007304

08015080 <_isatty_r>:
 8015080:	b538      	push	{r3, r4, r5, lr}
 8015082:	4d06      	ldr	r5, [pc, #24]	; (801509c <_isatty_r+0x1c>)
 8015084:	2300      	movs	r3, #0
 8015086:	4604      	mov	r4, r0
 8015088:	4608      	mov	r0, r1
 801508a:	602b      	str	r3, [r5, #0]
 801508c:	f7ec f86b 	bl	8001166 <_isatty>
 8015090:	1c43      	adds	r3, r0, #1
 8015092:	d102      	bne.n	801509a <_isatty_r+0x1a>
 8015094:	682b      	ldr	r3, [r5, #0]
 8015096:	b103      	cbz	r3, 801509a <_isatty_r+0x1a>
 8015098:	6023      	str	r3, [r4, #0]
 801509a:	bd38      	pop	{r3, r4, r5, pc}
 801509c:	20007304 	.word	0x20007304

080150a0 <_lseek_r>:
 80150a0:	b538      	push	{r3, r4, r5, lr}
 80150a2:	4d07      	ldr	r5, [pc, #28]	; (80150c0 <_lseek_r+0x20>)
 80150a4:	4604      	mov	r4, r0
 80150a6:	4608      	mov	r0, r1
 80150a8:	4611      	mov	r1, r2
 80150aa:	2200      	movs	r2, #0
 80150ac:	602a      	str	r2, [r5, #0]
 80150ae:	461a      	mov	r2, r3
 80150b0:	f7ec f864 	bl	800117c <_lseek>
 80150b4:	1c43      	adds	r3, r0, #1
 80150b6:	d102      	bne.n	80150be <_lseek_r+0x1e>
 80150b8:	682b      	ldr	r3, [r5, #0]
 80150ba:	b103      	cbz	r3, 80150be <_lseek_r+0x1e>
 80150bc:	6023      	str	r3, [r4, #0]
 80150be:	bd38      	pop	{r3, r4, r5, pc}
 80150c0:	20007304 	.word	0x20007304

080150c4 <__malloc_lock>:
 80150c4:	4801      	ldr	r0, [pc, #4]	; (80150cc <__malloc_lock+0x8>)
 80150c6:	f7ff bb55 	b.w	8014774 <__retarget_lock_acquire_recursive>
 80150ca:	bf00      	nop
 80150cc:	200072fc 	.word	0x200072fc

080150d0 <__malloc_unlock>:
 80150d0:	4801      	ldr	r0, [pc, #4]	; (80150d8 <__malloc_unlock+0x8>)
 80150d2:	f7ff bb50 	b.w	8014776 <__retarget_lock_release_recursive>
 80150d6:	bf00      	nop
 80150d8:	200072fc 	.word	0x200072fc

080150dc <_read_r>:
 80150dc:	b538      	push	{r3, r4, r5, lr}
 80150de:	4d07      	ldr	r5, [pc, #28]	; (80150fc <_read_r+0x20>)
 80150e0:	4604      	mov	r4, r0
 80150e2:	4608      	mov	r0, r1
 80150e4:	4611      	mov	r1, r2
 80150e6:	2200      	movs	r2, #0
 80150e8:	602a      	str	r2, [r5, #0]
 80150ea:	461a      	mov	r2, r3
 80150ec:	f7eb ffe6 	bl	80010bc <_read>
 80150f0:	1c43      	adds	r3, r0, #1
 80150f2:	d102      	bne.n	80150fa <_read_r+0x1e>
 80150f4:	682b      	ldr	r3, [r5, #0]
 80150f6:	b103      	cbz	r3, 80150fa <_read_r+0x1e>
 80150f8:	6023      	str	r3, [r4, #0]
 80150fa:	bd38      	pop	{r3, r4, r5, pc}
 80150fc:	20007304 	.word	0x20007304

08015100 <_init>:
 8015100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015102:	bf00      	nop
 8015104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015106:	bc08      	pop	{r3}
 8015108:	469e      	mov	lr, r3
 801510a:	4770      	bx	lr

0801510c <_fini>:
 801510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801510e:	bf00      	nop
 8015110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015112:	bc08      	pop	{r3}
 8015114:	469e      	mov	lr, r3
 8015116:	4770      	bx	lr
