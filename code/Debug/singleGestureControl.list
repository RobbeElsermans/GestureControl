
singleGestureControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080150dc  080150dc  000250dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080152a4  080152a4  000300e4  2**0
                  CONTENTS
  4 .ARM          00000008  080152a4  080152a4  000252a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080152ac  080152ac  000300e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080152ac  080152ac  000252ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080152b0  080152b0  000252b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  080152b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007220  200000e8  08015398  000300e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007308  08015398  00037308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000669fc  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d0c  00000000  00000000  00096b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  0009c820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001850  00000000  00000000  0009e260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020944  00000000  00000000  0009fab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026035  00000000  00000000  000c03f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7c61  00000000  00000000  000e6429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019e08a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007680  00000000  00000000  0019e0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e8 	.word	0x200000e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080150c4 	.word	0x080150c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ec 	.word	0x200000ec
 80001dc:	080150c4 	.word	0x080150c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9b9 	b.w	8000614 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <MX_TOF_Init>:
static void print_result(RANGING_SENSOR_Result_t *Result);
static void start_sensor(uint8_t sensor);
static void stop_sensor(uint8_t sensor);

void MX_TOF_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L3A2_MultiSensorRanging_Init();
 800061c:	f000 f87c 	bl	8000718 <MX_53L3A2_MultiSensorRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b098      	sub	sp, #96	; 0x60
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */
	RANGING_SENSOR_Result_t Result;

	  int preDis1 = 5000;
 800062a:	f241 3388 	movw	r3, #5000	; 0x1388
 800062e:	65fb      	str	r3, [r7, #92]	; 0x5c
	  int dis1 = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	65bb      	str	r3, [r7, #88]	; 0x58
	  int treshhold = 1000;
 8000634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000638:	653b      	str	r3, [r7, #80]	; 0x50
	  int minDistanceObject = 500;
 800063a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
	  bool ObjectPresent = false;
 8000640:	2300      	movs	r3, #0
 8000642:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  int timeOutmeasurment = 2000; //2 seconden
 8000646:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
	  /*	Hier zeggen we welk profiel we willen gebruiken
	   * 	bv.
	   *
	   */

	   start_sensor(VL53L3A2_DEV_CENTER);
 800064c:	2001      	movs	r0, #1
 800064e:	f000 f8c7 	bl	80007e0 <start_sensor>

  //MX_53L3A2_MultiSensorRanging_Process();

  /* USER CODE BEGIN TOF_Process_PostTreatment */
	  while(1){
		  VL53L3A2_RANGING_SENSOR_GetDistance(VL53L3A2_DEV_CENTER, &Result);
 8000652:	463b      	mov	r3, r7
 8000654:	4619      	mov	r1, r3
 8000656:	2001      	movs	r0, #1
 8000658:	f001 f846 	bl	80016e8 <VL53L3A2_RANGING_SENSOR_GetDistance>
		  dis1 = (long)Result.ZoneResult[0].Distance[0];
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	65bb      	str	r3, [r7, #88]	; 0x58

		  //Bug van 1ste meeting dat deze fout is (Een te hoge waarden)
		  if(dis1 >= 17760520)
 8000660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000662:	4a2b      	ldr	r2, [pc, #172]	; (8000710 <MX_TOF_Process+0xec>)
 8000664:	4293      	cmp	r3, r2
 8000666:	dd09      	ble.n	800067c <MX_TOF_Process+0x58>
		  {
			  HAL_Delay(4);
 8000668:	2004      	movs	r0, #4
 800066a:	f011 f9e9 	bl	8011a40 <HAL_Delay>
			  VL53L3A2_RANGING_SENSOR_GetDistance(VL53L3A2_DEV_CENTER, &Result);
 800066e:	463b      	mov	r3, r7
 8000670:	4619      	mov	r1, r3
 8000672:	2001      	movs	r0, #1
 8000674:	f001 f838 	bl	80016e8 <VL53L3A2_RANGING_SENSOR_GetDistance>
			  dis1 = (long)Result.ZoneResult[0].Distance[0];
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	65bb      	str	r3, [r7, #88]	; 0x58

		  /*	Als de waarde zakt t.o.v. de vorige waarden m.b.v. een treshhold en het object bevind zich op de minimum afstand.
		   * 	We kijken ook ofdat de Status niet = 12 (12 staat voor dat de sensor iets kan detecteren maar het signaal is te zwak dus te ver weg))
		   *
		   */
		  if(preDis1 - dis1 > treshhold && (dis1 <= minDistanceObject) && (uint8_t)Result.ZoneResult[0].Status[0] != 12){
 800067c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800067e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000684:	429a      	cmp	r2, r3
 8000686:	da11      	bge.n	80006ac <MX_TOF_Process+0x88>
 8000688:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800068a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800068c:	429a      	cmp	r2, r3
 800068e:	dc0d      	bgt.n	80006ac <MX_TOF_Process+0x88>
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	2b0c      	cmp	r3, #12
 8000696:	d009      	beq.n	80006ac <MX_TOF_Process+0x88>
			  //Persoon naderd en staat dicht genoeg
			  //Start andere sensoren ook op
			  ObjectPresent = true;
 8000698:	2301      	movs	r3, #1
 800069a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			  start_sensor(VL53L3A2_DEV_LEFT);
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 f89e 	bl	80007e0 <start_sensor>
			  start_sensor(VL53L3A2_DEV_RIGHT);
 80006a4:	2002      	movs	r0, #2
 80006a6:	f000 f89b 	bl	80007e0 <start_sensor>
 80006aa:	e020      	b.n	80006ee <MX_TOF_Process+0xca>

		  }
		  else if (preDis1 - dis1 > treshhold){
 80006ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80006ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80006b4:	429a      	cmp	r2, r3
 80006b6:	da04      	bge.n	80006c2 <MX_TOF_Process+0x9e>
			  //Wat dichter komen
			  //Zolang de distance niet voldoet aan minDistanceObject blijven meten.
			  //De meting stoppen na een bepaalde timeout
			  HAL_Delay(500);
 80006b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006bc:	f011 f9c0 	bl	8011a40 <HAL_Delay>
 80006c0:	e015      	b.n	80006ee <MX_TOF_Process+0xca>
		  }
		  else if( (preDis1 + dis1) > treshhold && ObjectPresent){
 80006c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80006c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006c6:	4413      	add	r3, r2
 80006c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80006ca:	429a      	cmp	r2, r3
 80006cc:	da0f      	bge.n	80006ee <MX_TOF_Process+0xca>
 80006ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00b      	beq.n	80006ee <MX_TOF_Process+0xca>
			  ObjectPresent = false;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			  stop_sensor(VL53L3A2_DEV_LEFT);
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 f8bf 	bl	8000860 <stop_sensor>
			  stop_sensor(VL53L3A2_DEV_RIGHT);
 80006e2:	2002      	movs	r0, #2
 80006e4:	f000 f8bc 	bl	8000860 <stop_sensor>
			  HAL_Delay(10);
 80006e8:	200a      	movs	r0, #10
 80006ea:	f011 f9a9 	bl	8011a40 <HAL_Delay>

		  //Ticks
		  // long x = HAL_GetTick();
		  //printf("Ticks: %ld ", x);

		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, ObjectPresent);
 80006ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80006f2:	461a      	mov	r2, r3
 80006f4:	2120      	movs	r1, #32
 80006f6:	4807      	ldr	r0, [pc, #28]	; (8000714 <MX_TOF_Process+0xf0>)
 80006f8:	f011 fd2c 	bl	8012154 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(L_O_GPIO_Port, L_O_Pin, ObjectPresent);
 80006fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000700:	461a      	mov	r2, r3
 8000702:	2180      	movs	r1, #128	; 0x80
 8000704:	4803      	ldr	r0, [pc, #12]	; (8000714 <MX_TOF_Process+0xf0>)
 8000706:	f011 fd25 	bl	8012154 <HAL_GPIO_WritePin>

		  preDis1 = dis1;
 800070a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800070c:	65fb      	str	r3, [r7, #92]	; 0x5c
		  VL53L3A2_RANGING_SENSOR_GetDistance(VL53L3A2_DEV_CENTER, &Result);
 800070e:	e7a0      	b.n	8000652 <MX_TOF_Process+0x2e>
 8000710:	010f0107 	.word	0x010f0107
 8000714:	40020000 	.word	0x40020000

08000718 <MX_53L3A2_MultiSensorRanging_Init>:
	  }
  /* USER CODE END TOF_Process_PostTreatment */
}

static void MX_53L3A2_MultiSensorRanging_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
  uint8_t device;
  uint16_t i2c_addr;
  uint32_t id;

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800071e:	2000      	movs	r0, #0
 8000720:	f000 fa8e 	bl	8000c40 <BSP_COM_Init>

  printf("53L3A2 Gesture Control\r\n");
 8000724:	482a      	ldr	r0, [pc, #168]	; (80007d0 <MX_53L3A2_MultiSensorRanging_Init+0xb8>)
 8000726:	f013 fd73 	bl	8014210 <puts>

  /* put all the devices in shutdown mode */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 800072a:	2300      	movs	r3, #0
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	e007      	b.n	8000740 <MX_53L3A2_MultiSensorRanging_Init+0x28>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_OFF);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2101      	movs	r1, #1
 8000734:	4618      	mov	r0, r3
 8000736:	f001 f875 	bl	8001824 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	3301      	adds	r3, #1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b02      	cmp	r3, #2
 8000744:	d9f4      	bls.n	8000730 <MX_53L3A2_MultiSensorRanging_Init+0x18>

  /* power on the devices one at a time, initialize them and change their address.
   * once the address is updated, the communication with the devices is checked
   * reading its ID.
   */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8000746:	2300      	movs	r3, #0
 8000748:	71fb      	strb	r3, [r7, #7]
 800074a:	e039      	b.n	80007c0 <MX_53L3A2_MultiSensorRanging_Init+0xa8>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_ON);
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f001 f867 	bl	8001824 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    status = VL53L3A2_RANGING_SENSOR_Init(device);
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	4618      	mov	r0, r3
 800075a:	f000 ff4f 	bl	80015fc <VL53L3A2_RANGING_SENSOR_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 8000762:	6013      	str	r3, [r2, #0]

    /* 0: not detected, 1: detected */
    ToF_Present[device] = (status != BSP_ERROR_NONE) ? 0 : 1;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf0c      	ite	eq
 800076c:	2301      	moveq	r3, #1
 800076e:	2300      	movne	r3, #0
 8000770:	b2da      	uxtb	r2, r3
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	4611      	mov	r1, r2
 8000776:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 8000778:	54d1      	strb	r1, [r2, r3]

    /* skip this device if init not successful */
    if (ToF_Present[device] == 0) continue;
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 800077e:	5cd3      	ldrb	r3, [r2, r3]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d019      	beq.n	80007b8 <MX_53L3A2_MultiSensorRanging_Init+0xa0>

    /* left: 0x54, center: 0x56, right: 0x58 */
    i2c_addr = (RANGING_SENSOR_VL53L3CX_ADDRESS + (device + 1) * 2);
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	3301      	adds	r3, #1
 8000788:	b29b      	uxth	r3, r3
 800078a:	3329      	adds	r3, #41	; 0x29
 800078c:	b29b      	uxth	r3, r3
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	80bb      	strh	r3, [r7, #4]
    VL53L3A2_RANGING_SENSOR_SetAddress(device, i2c_addr);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	88ba      	ldrh	r2, [r7, #4]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f001 f81b 	bl	80017d4 <VL53L3A2_RANGING_SENSOR_SetAddress>

    /* check the communication with the device reading the ID */
    VL53L3A2_RANGING_SENSOR_ReadID(device, &id);
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	463a      	mov	r2, r7
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 ff4f 	bl	8001648 <VL53L3A2_RANGING_SENSOR_ReadID>
    printf("ToF sensor %d - ID: %04lX\r\n", device, (unsigned long)id);
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	4619      	mov	r1, r3
 80007b0:	480a      	ldr	r0, [pc, #40]	; (80007dc <MX_53L3A2_MultiSensorRanging_Init+0xc4>)
 80007b2:	f013 fca7 	bl	8014104 <iprintf>
 80007b6:	e000      	b.n	80007ba <MX_53L3A2_MultiSensorRanging_Init+0xa2>
    if (ToF_Present[device] == 0) continue;
 80007b8:	bf00      	nop
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	3301      	adds	r3, #1
 80007be:	71fb      	strb	r3, [r7, #7]
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	2b02      	cmp	r3, #2
 80007c4:	d9c2      	bls.n	800074c <MX_53L3A2_MultiSensorRanging_Init+0x34>
  }
}
 80007c6:	bf00      	nop
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	080150f4 	.word	0x080150f4
 80007d4:	20000104 	.word	0x20000104
 80007d8:	20000108 	.word	0x20000108
 80007dc:	0801510c 	.word	0x0801510c

080007e0 <start_sensor>:
      (long)Result->ZoneResult[i].Distance[0]);
  }
  printf ("\r\n");
}

static void start_sensor(uint8_t sensor){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	RANGING_SENSOR_ProfileConfig_t Profile;

	Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 80007ea:	2302      	movs	r3, #2
 80007ec:	60fb      	str	r3, [r7, #12]
	Profile.TimingBudget = 30; /* 16 ms < TimingBudget < 500 ms */
 80007ee:	231e      	movs	r3, #30
 80007f0:	613b      	str	r3, [r7, #16]
	Profile.Frequency = 0; /* not necessary in simple ranging */
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
	Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
	Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 80007fa:	2301      	movs	r3, #1
 80007fc:	61fb      	str	r3, [r7, #28]

	VL53L3A2_RANGING_SENSOR_ConfigProfile(sensor, &Profile);
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	f107 020c 	add.w	r2, r7, #12
 8000804:	4611      	mov	r1, r2
 8000806:	4618      	mov	r0, r3
 8000808:	f000 ff46 	bl	8001698 <VL53L3A2_RANGING_SENSOR_ConfigProfile>
	status = VL53L3A2_RANGING_SENSOR_Start(sensor, RS_MODE_BLOCKING_CONTINUOUS);
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2101      	movs	r1, #1
 8000810:	4618      	mov	r0, r3
 8000812:	f000 ff91 	bl	8001738 <VL53L3A2_RANGING_SENSOR_Start>
 8000816:	4603      	mov	r3, r0
 8000818:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <start_sensor+0x70>)
 800081a:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <start_sensor+0x70>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d008      	beq.n	8000836 <start_sensor+0x56>
    {
    	printf("VL53L3A2_RANGING_SENSOR_Start failed for sensor %s \r\n", TofDevStr[sensor]);
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <start_sensor+0x74>)
 8000828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082c:	4619      	mov	r1, r3
 800082e:	480a      	ldr	r0, [pc, #40]	; (8000858 <start_sensor+0x78>)
 8000830:	f013 fc68 	bl	8014104 <iprintf>
		while(1);
 8000834:	e7fe      	b.n	8000834 <start_sensor+0x54>
    }
    else
	{
    	printf("sensor %s\t opgestart \r\n", TofDevStr[sensor]);
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <start_sensor+0x74>)
 800083a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083e:	4619      	mov	r1, r3
 8000840:	4806      	ldr	r0, [pc, #24]	; (800085c <start_sensor+0x7c>)
 8000842:	f013 fc5f 	bl	8014104 <iprintf>
	}
}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000104 	.word	0x20000104
 8000854:	20000000 	.word	0x20000000
 8000858:	08015158 	.word	0x08015158
 800085c:	08015190 	.word	0x08015190

08000860 <stop_sensor>:

static void stop_sensor(uint8_t sensor){
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
	status = VL53L3A2_RANGING_SENSOR_Stop(sensor);
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	4618      	mov	r0, r3
 800086e:	f000 ff8b 	bl	8001788 <VL53L3A2_RANGING_SENSOR_Stop>
 8000872:	4603      	mov	r3, r0
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <stop_sensor+0x40>)
 8000876:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <stop_sensor+0x40>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d003      	beq.n	8000888 <stop_sensor+0x28>
    {
    	printf("VL53L3A2_RANGING_SENSOR_Stop failed\r\n");
 8000880:	4808      	ldr	r0, [pc, #32]	; (80008a4 <stop_sensor+0x44>)
 8000882:	f013 fcc5 	bl	8014210 <puts>
		while(1);
 8000886:	e7fe      	b.n	8000886 <stop_sensor+0x26>
    }
    else
	{
    	printf("sensor %s\t afgezet \r\n", TofDevStr[sensor]);
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <stop_sensor+0x48>)
 800088c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000890:	4619      	mov	r1, r3
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <stop_sensor+0x4c>)
 8000894:	f013 fc36 	bl	8014104 <iprintf>
	}
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000104 	.word	0x20000104
 80008a4:	080151a8 	.word	0x080151a8
 80008a8:	20000000 	.word	0x20000000
 80008ac:	080151d0 	.word	0x080151d0

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b4:	f011 f852 	bl	801195c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b8:	f000 f80a 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008bc:	f000 f89e 	bl	80009fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008c0:	f000 f872 	bl	80009a8 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  MX_TOF_Init();
 80008c4:	f7ff fea8 	bl	8000618 <MX_TOF_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_TOF_Process();
 80008c8:	f7ff feac 	bl	8000624 <MX_TOF_Process>
 80008cc:	e7fc      	b.n	80008c8 <main+0x18>
	...

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	; 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	2230      	movs	r2, #48	; 0x30
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f013 fc08 	bl	80140f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <SystemClock_Config+0xd0>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	4a28      	ldr	r2, [pc, #160]	; (80009a0 <SystemClock_Config+0xd0>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	; 0x40
 8000904:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <SystemClock_Config+0xd0>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <SystemClock_Config+0xd4>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800091c:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <SystemClock_Config+0xd4>)
 800091e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <SystemClock_Config+0xd4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000930:	2302      	movs	r3, #2
 8000932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000934:	2301      	movs	r3, #1
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000938:	2310      	movs	r3, #16
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093c:	2302      	movs	r3, #2
 800093e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000940:	2300      	movs	r3, #0
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000944:	2310      	movs	r3, #16
 8000946:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000948:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800094c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800094e:	2304      	movs	r3, #4
 8000950:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000952:	2307      	movs	r3, #7
 8000954:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000956:	f107 0320 	add.w	r3, r7, #32
 800095a:	4618      	mov	r0, r3
 800095c:	f012 fc08 	bl	8013170 <HAL_RCC_OscConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000966:	f000 f8cb 	bl	8000b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096a:	230f      	movs	r3, #15
 800096c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096e:	2302      	movs	r3, #2
 8000970:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2102      	movs	r1, #2
 8000986:	4618      	mov	r0, r3
 8000988:	f012 fe6a 	bl	8013660 <HAL_RCC_ClockConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000992:	f000 f8b5 	bl	8000b00 <Error_Handler>
  }
}
 8000996:	bf00      	nop
 8000998:	3750      	adds	r7, #80	; 0x50
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40007000 	.word	0x40007000

080009a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_USART2_UART_Init+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009e0:	f013 f83a 	bl	8013a58 <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ea:	f000 f889 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200070b0 	.word	0x200070b0
 80009f8:	40004400 	.word	0x40004400

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b37      	ldr	r3, [pc, #220]	; (8000af4 <MX_GPIO_Init+0xf8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a36      	ldr	r2, [pc, #216]	; (8000af4 <MX_GPIO_Init+0xf8>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b34      	ldr	r3, [pc, #208]	; (8000af4 <MX_GPIO_Init+0xf8>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <MX_GPIO_Init+0xf8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a2f      	ldr	r2, [pc, #188]	; (8000af4 <MX_GPIO_Init+0xf8>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <MX_GPIO_Init+0xf8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <MX_GPIO_Init+0xf8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a28      	ldr	r2, [pc, #160]	; (8000af4 <MX_GPIO_Init+0xf8>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <MX_GPIO_Init+0xf8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <MX_GPIO_Init+0xf8>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a21      	ldr	r2, [pc, #132]	; (8000af4 <MX_GPIO_Init+0xf8>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_GPIO_Init+0xf8>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2120      	movs	r1, #32
 8000a86:	481c      	ldr	r0, [pc, #112]	; (8000af8 <MX_GPIO_Init+0xfc>)
 8000a88:	f011 fb64 	bl	8012154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L_O_GPIO_Port, L_O_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	4819      	ldr	r0, [pc, #100]	; (8000af8 <MX_GPIO_Init+0xfc>)
 8000a92:	f011 fb5f 	bl	8012154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a9c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4813      	ldr	r0, [pc, #76]	; (8000afc <MX_GPIO_Init+0x100>)
 8000aae:	f011 f8d1 	bl	8011c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ab2:	2320      	movs	r3, #32
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <MX_GPIO_Init+0xfc>)
 8000aca:	f011 f8c3 	bl	8011c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_O_Pin */
   GPIO_InitStruct.Pin = L_O_Pin;
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(L_O_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_GPIO_Init+0xfc>)
 8000ae6:	f011 f8b5 	bl	8011c54 <HAL_GPIO_Init>

}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	; 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020800 	.word	0x40020800

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>
	...

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b4a:	2007      	movs	r0, #7
 8000b4c:	f011 f84e 	bl	8011bec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <HAL_UART_MspInit+0x84>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d12b      	bne.n	8000bd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <HAL_UART_MspInit+0x88>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <HAL_UART_MspInit+0x88>)
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_UART_MspInit+0x88>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_UART_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <HAL_UART_MspInit+0x88>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_UART_MspInit+0x88>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	; (8000be8 <HAL_UART_MspInit+0x8c>)
 8000bd2:	f011 f83f 	bl	8011c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	; 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40004400 	.word	0x40004400
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c38:	f010 fee2 	bl	8011a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d903      	bls.n	8000c5c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c54:	f06f 0301 	mvn.w	r3, #1
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e025      	b.n	8000ca8 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	79fa      	ldrb	r2, [r7, #7]
 8000c60:	4914      	ldr	r1, [pc, #80]	; (8000cb4 <BSP_COM_Init+0x74>)
 8000c62:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000c66:	4814      	ldr	r0, [pc, #80]	; (8000cb8 <BSP_COM_Init+0x78>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	011b      	lsls	r3, r3, #4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	4403      	add	r3, r0
 8000c72:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8000c74:	79fa      	ldrb	r2, [r7, #7]
 8000c76:	4613      	mov	r3, r2
 8000c78:	011b      	lsls	r3, r3, #4
 8000c7a:	4413      	add	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <BSP_COM_Init+0x78>)
 8000c80:	4413      	add	r3, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f864 	bl	8000d50 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8000c88:	79fa      	ldrb	r2, [r7, #7]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	4413      	add	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4a09      	ldr	r2, [pc, #36]	; (8000cb8 <BSP_COM_Init+0x78>)
 8000c94:	4413      	add	r3, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f810 	bl	8000cbc <MX_USART2_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d002      	beq.n	8000ca8 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000ca2:	f06f 0303 	mvn.w	r3, #3
 8000ca6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000000c 	.word	0x2000000c
 8000cb8:	200070b0 	.word	0x200070b0

08000cbc <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <MX_USART2_UART_Init+0x58>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd4:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f012 feac 	bl	8013a58 <HAL_UART_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40004400 	.word	0x40004400

08000d18 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <__io_putchar+0x30>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4613      	mov	r3, r2
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	4413      	add	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <__io_putchar+0x34>)
 8000d30:	1898      	adds	r0, r3, r2
 8000d32:	1d39      	adds	r1, r7, #4
 8000d34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f012 feda 	bl	8013af2 <HAL_UART_Transmit>
  return ch;
 8000d3e:	687b      	ldr	r3, [r7, #4]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2000010b 	.word	0x2000010b
 8000d4c:	200070b0 	.word	0x200070b0

08000d50 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <USART2_MspInit+0x88>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <USART2_MspInit+0x88>)
 8000d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d66:	6413      	str	r3, [r2, #64]	; 0x40
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <USART2_MspInit+0x88>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <USART2_MspInit+0x88>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <USART2_MspInit+0x88>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6313      	str	r3, [r2, #48]	; 0x30
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <USART2_MspInit+0x88>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8000d90:	2304      	movs	r3, #4
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8000da0:	2307      	movs	r3, #7
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	480c      	ldr	r0, [pc, #48]	; (8000ddc <USART2_MspInit+0x8c>)
 8000dac:	f010 ff52 	bl	8011c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8000db0:	2308      	movs	r3, #8
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8000dc0:	2307      	movs	r3, #7
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4804      	ldr	r0, [pc, #16]	; (8000ddc <USART2_MspInit+0x8c>)
 8000dcc:	f010 ff42 	bl	8011c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000

08000de0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <BSP_I2C1_Init+0x58>)
 8000dec:	4a13      	ldr	r2, [pc, #76]	; (8000e3c <BSP_I2C1_Init+0x5c>)
 8000dee:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <BSP_I2C1_Init+0x60>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	1c5a      	adds	r2, r3, #1
 8000df6:	4912      	ldr	r1, [pc, #72]	; (8000e40 <BSP_I2C1_Init+0x60>)
 8000df8:	600a      	str	r2, [r1, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d117      	bne.n	8000e2e <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000dfe:	480e      	ldr	r0, [pc, #56]	; (8000e38 <BSP_I2C1_Init+0x58>)
 8000e00:	f011 fe6e 	bl	8012ae0 <HAL_I2C_GetState>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d111      	bne.n	8000e2e <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000e0a:	480b      	ldr	r0, [pc, #44]	; (8000e38 <BSP_I2C1_Init+0x58>)
 8000e0c:	f000 f8d2 	bl	8000fb4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10b      	bne.n	8000e2e <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000e16:	4808      	ldr	r0, [pc, #32]	; (8000e38 <BSP_I2C1_Init+0x58>)
 8000e18:	f000 f898 	bl	8000f4c <MX_I2C1_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000e22:	f06f 0307 	mvn.w	r3, #7
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	e001      	b.n	8000e2e <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000e2e:	687b      	ldr	r3, [r7, #4]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2000705c 	.word	0x2000705c
 8000e3c:	40005400 	.word	0x40005400
 8000e40:	2000010c 	.word	0x2000010c

08000e44 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <BSP_I2C1_DeInit+0x48>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d014      	beq.n	8000e80 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <BSP_I2C1_DeInit+0x48>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <BSP_I2C1_DeInit+0x48>)
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <BSP_I2C1_DeInit+0x48>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10b      	bne.n	8000e80 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000e68:	4809      	ldr	r0, [pc, #36]	; (8000e90 <BSP_I2C1_DeInit+0x4c>)
 8000e6a:	f000 f8ed 	bl	8001048 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000e6e:	4808      	ldr	r0, [pc, #32]	; (8000e90 <BSP_I2C1_DeInit+0x4c>)
 8000e70:	f011 face 	bl	8012410 <HAL_I2C_DeInit>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d002      	beq.n	8000e80 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000e7a:	f06f 0307 	mvn.w	r3, #7
 8000e7e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000e80:	687b      	ldr	r3, [r7, #4]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000010c 	.word	0x2000010c
 8000e90:	2000705c 	.word	0x2000705c

08000e94 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	80fb      	strh	r3, [r7, #6]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000ea8:	88bb      	ldrh	r3, [r7, #4]
 8000eaa:	88f9      	ldrh	r1, [r7, #6]
 8000eac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eb0:	9200      	str	r2, [sp, #0]
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <BSP_I2C1_Send+0x50>)
 8000eb6:	f011 faef 	bl	8012498 <HAL_I2C_Master_Transmit>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00c      	beq.n	8000eda <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000ec0:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <BSP_I2C1_Send+0x50>)
 8000ec2:	f011 fe1b 	bl	8012afc <HAL_I2C_GetError>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d003      	beq.n	8000ed4 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000ecc:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	e002      	b.n	8000eda <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000ed4:	f06f 0303 	mvn.w	r3, #3
 8000ed8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000705c 	.word	0x2000705c

08000ee8 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	80fb      	strh	r3, [r7, #6]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000efc:	88bb      	ldrh	r3, [r7, #4]
 8000efe:	88f9      	ldrh	r1, [r7, #6]
 8000f00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f04:	9200      	str	r2, [sp, #0]
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	480b      	ldr	r0, [pc, #44]	; (8000f38 <BSP_I2C1_Recv+0x50>)
 8000f0a:	f011 fbc3 	bl	8012694 <HAL_I2C_Master_Receive>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00c      	beq.n	8000f2e <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000f14:	4808      	ldr	r0, [pc, #32]	; (8000f38 <BSP_I2C1_Recv+0x50>)
 8000f16:	f011 fdf1 	bl	8012afc <HAL_I2C_GetError>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d003      	beq.n	8000f28 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000f20:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	e002      	b.n	8000f2e <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000f28:	f06f 0303 	mvn.w	r3, #3
 8000f2c:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	2000705c 	.word	0x2000705c

08000f3c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000f40:	f010 fd72 	bl	8011a28 <HAL_GetTick>
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a14      	ldr	r2, [pc, #80]	; (8000fac <MX_I2C1_Init+0x60>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <MX_I2C1_Init+0x64>)
 8000f62:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f76:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f011 f8f9 	bl	8012188 <HAL_I2C_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40005400 	.word	0x40005400
 8000fb0:	000186a0 	.word	0x000186a0

08000fb4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <I2C1_MspInit+0x8c>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	4a1e      	ldr	r2, [pc, #120]	; (8001040 <I2C1_MspInit+0x8c>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	6313      	str	r3, [r2, #48]	; 0x30
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <I2C1_MspInit+0x8c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fde:	2312      	movs	r3, #18
 8000fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000fea:	2304      	movs	r3, #4
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4813      	ldr	r0, [pc, #76]	; (8001044 <I2C1_MspInit+0x90>)
 8000ff6:	f010 fe2d 	bl	8011c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001000:	2312      	movs	r3, #18
 8001002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800100c:	2304      	movs	r3, #4
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	480b      	ldr	r0, [pc, #44]	; (8001044 <I2C1_MspInit+0x90>)
 8001018:	f010 fe1c 	bl	8011c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <I2C1_MspInit+0x8c>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <I2C1_MspInit+0x8c>)
 8001026:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800102a:	6413      	str	r3, [r2, #64]	; 0x40
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <I2C1_MspInit+0x8c>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	; 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40020400 	.word	0x40020400

08001048 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <I2C1_MspDeInit+0x30>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	4a08      	ldr	r2, [pc, #32]	; (8001078 <I2C1_MspDeInit+0x30>)
 8001056:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800105a:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800105c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001060:	4806      	ldr	r0, [pc, #24]	; (800107c <I2C1_MspDeInit+0x34>)
 8001062:	f010 ff7b 	bl	8011f5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106a:	4804      	ldr	r0, [pc, #16]	; (800107c <I2C1_MspDeInit+0x34>)
 800106c:	f010 ff76 	bl	8011f5c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40023800 	.word	0x40023800
 800107c:	40020400 	.word	0x40020400

08001080 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e00a      	b.n	80010a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001092:	f3af 8000 	nop.w
 8001096:	4601      	mov	r1, r0
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	60ba      	str	r2, [r7, #8]
 800109e:	b2ca      	uxtb	r2, r1
 80010a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dbf0      	blt.n	8001092 <_read+0x12>
	}

return len;
 80010b0:	687b      	ldr	r3, [r7, #4]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	e009      	b.n	80010e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	60ba      	str	r2, [r7, #8]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fe1f 	bl	8000d18 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbf1      	blt.n	80010cc <_write+0x12>
	}
	return len;
 80010e8:	687b      	ldr	r3, [r7, #4]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_close>:

int _close(int file)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
	return -1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800111a:	605a      	str	r2, [r3, #4]
	return 0;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_isatty>:

int _isatty(int file)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
	return 1;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
	return 0;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <_sbrk+0x5c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <_sbrk+0x60>)
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <_sbrk+0x64>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <_sbrk+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	429a      	cmp	r2, r3
 800118a:	d207      	bcs.n	800119c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800118c:	f012 ff7a 	bl	8014084 <__errno>
 8001190:	4603      	mov	r3, r0
 8001192:	220c      	movs	r2, #12
 8001194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	e009      	b.n	80011b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <_sbrk+0x64>)
 80011ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20018000 	.word	0x20018000
 80011bc:	00000400 	.word	0x00000400
 80011c0:	20000110 	.word	0x20000110
 80011c4:	20007308 	.word	0x20007308

080011c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <SystemInit+0x20>)
 80011ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <SystemInit+0x20>)
 80011d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001224 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f0:	480d      	ldr	r0, [pc, #52]	; (8001228 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011f2:	490e      	ldr	r1, [pc, #56]	; (800122c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011f4:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001208:	4c0b      	ldr	r4, [pc, #44]	; (8001238 <LoopFillZerobss+0x26>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001216:	f7ff ffd7 	bl	80011c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800121a:	f012 ff39 	bl	8014090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121e:	f7ff fb47 	bl	80008b0 <main>
  bx  lr    
 8001222:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001224:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8001230:	080152b4 	.word	0x080152b4
  ldr r2, =_sbss
 8001234:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001238:	20007308 	.word	0x20007308

0800123c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC_IRQHandler>
	...

08001240 <VL53L3A2_Init>:
  * @brief Initialize X-NUCLEO-53L3A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L3A2_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  int32_t status = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <VL53L3A2_Init+0xe4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	4934      	ldr	r1, [pc, #208]	; (8001324 <VL53L3A2_Init+0xe4>)
 8001252:	600a      	str	r2, [r1, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d154      	bne.n	8001302 <VL53L3A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 8001258:	f000 f8d4 	bl	8001404 <_I2cFailRecover>
 800125c:	4602      	mov	r2, r0
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4313      	orrs	r3, r2
 8001262:	607b      	str	r3, [r7, #4]
    status |= VL53L3A2_I2C_Init();
 8001264:	f7ff fdbc 	bl	8000de0 <BSP_I2C1_Init>
 8001268:	4602      	mov	r2, r0
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4313      	orrs	r3, r2
 800126e:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d147      	bne.n	8001306 <VL53L3A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 8001276:	463a      	mov	r2, r7
 8001278:	2302      	movs	r3, #2
 800127a:	2100      	movs	r1, #0
 800127c:	2086      	movs	r0, #134	; 0x86
 800127e:	f000 f963 	bl	8001548 <_ExpanderRd>
 8001282:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d13f      	bne.n	800130a <VL53L3A2_Init+0xca>
 800128a:	783b      	ldrb	r3, [r7, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d13c      	bne.n	800130a <VL53L3A2_Init+0xca>
 8001290:	787b      	ldrb	r3, [r7, #1]
 8001292:	2b16      	cmp	r3, #22
 8001294:	d139      	bne.n	800130a <VL53L3A2_Init+0xca>
	  {
      VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 8001296:	463a      	mov	r2, r7
 8001298:	2302      	movs	r3, #2
 800129a:	2100      	movs	r1, #0
 800129c:	2084      	movs	r0, #132	; 0x84
 800129e:	f000 f953 	bl	8001548 <_ExpanderRd>
 80012a2:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d131      	bne.n	800130e <VL53L3A2_Init+0xce>
 80012aa:	783b      	ldrb	r3, [r7, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d12e      	bne.n	800130e <VL53L3A2_Init+0xce>
 80012b0:	787b      	ldrb	r3, [r7, #1]
 80012b2:	2b16      	cmp	r3, #22
 80012b4:	d12b      	bne.n	800130e <VL53L3A2_Init+0xce>
	  {
		  VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <VL53L3A2_Init+0xe8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 80012bc:	23ff      	movs	r3, #255	; 0xff
 80012be:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 80012c0:	23ff      	movs	r3, #255	; 0xff
 80012c2:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 80012c4:	463a      	mov	r2, r7
 80012c6:	2302      	movs	r3, #2
 80012c8:	2114      	movs	r1, #20
 80012ca:	2086      	movs	r0, #134	; 0x86
 80012cc:	f000 f96e 	bl	80015ac <_ExpanderWR>
 80012d0:	6078      	str	r0, [r7, #4]

	  if (status)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d11c      	bne.n	8001312 <VL53L3A2_Init+0xd2>
	  {
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 80012d8:	23ff      	movs	r3, #255	; 0xff
 80012da:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 80012dc:	23bf      	movs	r3, #191	; 0xbf
 80012de:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 80012e0:	463a      	mov	r2, r7
 80012e2:	2302      	movs	r3, #2
 80012e4:	2114      	movs	r1, #20
 80012e6:	2084      	movs	r0, #132	; 0x84
 80012e8:	f000 f960 	bl	80015ac <_ExpanderWR>
 80012ec:	6078      	str	r0, [r7, #4]

	  if (status)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d110      	bne.n	8001316 <VL53L3A2_Init+0xd6>
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <VL53L3A2_Init+0xe8>)
 80012f6:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 80012fa:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 80012fc:	f000 f904 	bl	8001508 <_ExpandersSetAllIO>
 8001300:	6078      	str	r0, [r7, #4]
	  {
		VL53L3A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 8001302:	bf00      	nop
 8001304:	e008      	b.n	8001318 <VL53L3A2_Init+0xd8>
      goto done_err;
 8001306:	bf00      	nop
 8001308:	e006      	b.n	8001318 <VL53L3A2_Init+0xd8>
      goto done_err;
 800130a:	bf00      	nop
 800130c:	e004      	b.n	8001318 <VL53L3A2_Init+0xd8>
		  goto done_err;
 800130e:	bf00      	nop
 8001310:	e002      	b.n	8001318 <VL53L3A2_Init+0xd8>
		goto done_err;
 8001312:	bf00      	nop
 8001314:	e000      	b.n	8001318 <VL53L3A2_Init+0xd8>
		goto done_err;
 8001316:	bf00      	nop
  return status;
 8001318:	687b      	ldr	r3, [r7, #4]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000114 	.word	0x20000114
 8001328:	20000118 	.word	0x20000118

0800132c <VL53L3A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L3A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L3A2_ResetId(uint8_t DevNo, uint8_t state)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	460a      	mov	r2, r1
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	4613      	mov	r3, r2
 800133a:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d037      	beq.n	80013b2 <VL53L3A2_ResetId+0x86>
 8001342:	2b02      	cmp	r3, #2
 8001344:	dc4e      	bgt.n	80013e4 <VL53L3A2_ResetId+0xb8>
 8001346:	2b00      	cmp	r3, #0
 8001348:	d01a      	beq.n	8001380 <VL53L3A2_ResetId+0x54>
 800134a:	2b01      	cmp	r3, #1
 800134c:	d14a      	bne.n	80013e4 <VL53L3A2_ResetId+0xb8>
  {
    case VL53L3A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <VL53L3A2_ResetId+0xcc>)
 8001350:	78db      	ldrb	r3, [r3, #3]
 8001352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001356:	b2da      	uxtb	r2, r3
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <VL53L3A2_ResetId+0xcc>)
 800135a:	70da      	strb	r2, [r3, #3]

      if (state)
 800135c:	79bb      	ldrb	r3, [r7, #6]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d006      	beq.n	8001370 <VL53L3A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 8001362:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <VL53L3A2_ResetId+0xcc>)
 8001364:	78db      	ldrb	r3, [r3, #3]
 8001366:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <VL53L3A2_ResetId+0xcc>)
 800136e:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8001370:	2301      	movs	r3, #1
 8001372:	4a22      	ldr	r2, [pc, #136]	; (80013fc <VL53L3A2_ResetId+0xd0>)
 8001374:	2113      	movs	r1, #19
 8001376:	2084      	movs	r0, #132	; 0x84
 8001378:	f000 f918 	bl	80015ac <_ExpanderWR>
 800137c:	60f8      	str	r0, [r7, #12]
      break;
 800137e:	e035      	b.n	80013ec <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 8001380:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <VL53L3A2_ResetId+0xcc>)
 8001382:	785b      	ldrb	r3, [r3, #1]
 8001384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <VL53L3A2_ResetId+0xcc>)
 800138c:	705a      	strb	r2, [r3, #1]

      if (state)
 800138e:	79bb      	ldrb	r3, [r7, #6]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d006      	beq.n	80013a2 <VL53L3A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <VL53L3A2_ResetId+0xcc>)
 8001396:	785b      	ldrb	r3, [r3, #1]
 8001398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <VL53L3A2_ResetId+0xcc>)
 80013a0:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80013a2:	2301      	movs	r3, #1
 80013a4:	4a16      	ldr	r2, [pc, #88]	; (8001400 <VL53L3A2_ResetId+0xd4>)
 80013a6:	2113      	movs	r1, #19
 80013a8:	2086      	movs	r0, #134	; 0x86
 80013aa:	f000 f8ff 	bl	80015ac <_ExpanderWR>
 80013ae:	60f8      	str	r0, [r7, #12]
      break;
 80013b0:	e01c      	b.n	80013ec <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <VL53L3A2_ResetId+0xcc>)
 80013b4:	785b      	ldrb	r3, [r3, #1]
 80013b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <VL53L3A2_ResetId+0xcc>)
 80013be:	705a      	strb	r2, [r3, #1]

      if (state)
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <VL53L3A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <VL53L3A2_ResetId+0xcc>)
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <VL53L3A2_ResetId+0xcc>)
 80013d2:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80013d4:	2301      	movs	r3, #1
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <VL53L3A2_ResetId+0xd4>)
 80013d8:	2113      	movs	r1, #19
 80013da:	2086      	movs	r0, #134	; 0x86
 80013dc:	f000 f8e6 	bl	80015ac <_ExpanderWR>
 80013e0:	60f8      	str	r0, [r7, #12]
      break;
 80013e2:	e003      	b.n	80013ec <VL53L3A2_ResetId+0xc0>

    default:
      VL53L3A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
 80013e8:	60fb      	str	r3, [r7, #12]
      goto done;
 80013ea:	e000      	b.n	80013ee <VL53L3A2_ResetId+0xc2>
  if (status)
  {
    VL53L3A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 80013ec:	bf00      	nop
  return status;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000118 	.word	0x20000118
 80013fc:	2000011b 	.word	0x2000011b
 8001400:	20000119 	.word	0x20000119

08001404 <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	77bb      	strb	r3, [r7, #30]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 800140e:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <_I2cFailRecover+0xf8>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d101      	bne.n	800141a <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 8001416:	2300      	movs	r3, #0
 8001418:	e06b      	b.n	80014f2 <_I2cFailRecover+0xee>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b38      	ldr	r3, [pc, #224]	; (8001500 <_I2cFailRecover+0xfc>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a37      	ldr	r2, [pc, #220]	; (8001500 <_I2cFailRecover+0xfc>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b35      	ldr	r3, [pc, #212]	; (8001500 <_I2cFailRecover+0xfc>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SCL_GPIO_PIN;
 8001436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800143c:	2311      	movs	r3, #17
 800143e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001440:	2301      	movs	r3, #1
 8001442:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	4619      	mov	r1, r3
 800144a:	482e      	ldr	r0, [pc, #184]	; (8001504 <_I2cFailRecover+0x100>)
 800144c:	f010 fc02 	bl	8011c54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SDA_GPIO_PIN;
 8001450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001454:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001456:	2311      	movs	r3, #17
 8001458:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145a:	2301      	movs	r3, #1
 800145c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	4619      	mov	r1, r3
 8001464:	4827      	ldr	r0, [pc, #156]	; (8001504 <_I2cFailRecover+0x100>)
 8001466:	f010 fbf5 	bl	8011c54 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001470:	4824      	ldr	r0, [pc, #144]	; (8001504 <_I2cFailRecover+0x100>)
 8001472:	f010 fe6f 	bl	8012154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147c:	4821      	ldr	r0, [pc, #132]	; (8001504 <_I2cFailRecover+0x100>)
 800147e:	f010 fe69 	bl	8012154 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8001482:	2300      	movs	r3, #0
 8001484:	77fb      	strb	r3, [r7, #31]
 8001486:	e014      	b.n	80014b2 <_I2cFailRecover+0xae>
    {
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148e:	481d      	ldr	r0, [pc, #116]	; (8001504 <_I2cFailRecover+0x100>)
 8001490:	f010 fe60 	bl	8012154 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001494:	2001      	movs	r0, #1
 8001496:	f010 fad3 	bl	8011a40 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a0:	4818      	ldr	r0, [pc, #96]	; (8001504 <_I2cFailRecover+0x100>)
 80014a2:	f010 fe57 	bl	8012154 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80014a6:	2001      	movs	r0, #1
 80014a8:	f010 faca 	bl	8011a40 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 80014ac:	7ffb      	ldrb	r3, [r7, #31]
 80014ae:	3301      	adds	r3, #1
 80014b0:	77fb      	strb	r3, [r7, #31]
 80014b2:	7ffb      	ldrb	r3, [r7, #31]
 80014b4:	2b09      	cmp	r3, #9
 80014b6:	d9e7      	bls.n	8001488 <_I2cFailRecover+0x84>
    }
    retry_cnt++;
 80014b8:	7fbb      	ldrb	r3, [r7, #30]
 80014ba:	3301      	adds	r3, #1
 80014bc:	77bb      	strb	r3, [r7, #30]
  } while ((HAL_GPIO_ReadPin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 80014be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c2:	4810      	ldr	r0, [pc, #64]	; (8001504 <_I2cFailRecover+0x100>)
 80014c4:	f010 fe2e 	bl	8012124 <HAL_GPIO_ReadPin>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <_I2cFailRecover+0xd0>
 80014ce:	7fbb      	ldrb	r3, [r7, #30]
 80014d0:	2b06      	cmp	r3, #6
 80014d2:	d9d6      	bls.n	8001482 <_I2cFailRecover+0x7e>

  if (HAL_GPIO_ReadPin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 80014d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d8:	480a      	ldr	r0, [pc, #40]	; (8001504 <_I2cFailRecover+0x100>)
 80014da:	f010 fe23 	bl	8012124 <HAL_GPIO_ReadPin>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <_I2cFailRecover+0xe6>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 80014e4:	f06f 0304 	mvn.w	r3, #4
 80014e8:	e003      	b.n	80014f2 <_I2cFailRecover+0xee>
  }

  is_already_init = 1U;
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <_I2cFailRecover+0xf8>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000011c 	.word	0x2000011c
 8001500:	40023800 	.word	0x40023800
 8001504:	40020400 	.word	0x40020400

08001508 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 800150e:	2302      	movs	r3, #2
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <_ExpandersSetAllIO+0x38>)
 8001512:	2112      	movs	r1, #18
 8001514:	2086      	movs	r0, #134	; 0x86
 8001516:	f000 f849 	bl	80015ac <_ExpanderWR>
 800151a:	6078      	str	r0, [r7, #4]

  if (status)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d107      	bne.n	8001532 <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 8001522:	2302      	movs	r3, #2
 8001524:	4a07      	ldr	r2, [pc, #28]	; (8001544 <_ExpandersSetAllIO+0x3c>)
 8001526:	2112      	movs	r1, #18
 8001528:	2084      	movs	r0, #132	; 0x84
 800152a:	f000 f83f 	bl	80015ac <_ExpanderWR>
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	e000      	b.n	8001534 <_ExpandersSetAllIO+0x2c>
    goto done_err;
 8001532:	bf00      	nop

done_err:
  return status;
 8001534:	687b      	ldr	r3, [r7, #4]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000118 	.word	0x20000118
 8001544:	2000011a 	.word	0x2000011a

08001548 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af02      	add	r7, sp, #8
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	74fb      	strb	r3, [r7, #19]
  VL53L3A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	b299      	uxth	r1, r3
 8001560:	f107 0213 	add.w	r2, r7, #19
 8001564:	2364      	movs	r3, #100	; 0x64
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2301      	movs	r3, #1
 800156a:	480f      	ldr	r0, [pc, #60]	; (80015a8 <_ExpanderRd+0x60>)
 800156c:	f010 ff94 	bl	8012498 <HAL_I2C_Master_Transmit>
 8001570:	4603      	mov	r3, r0
 8001572:	617b      	str	r3, [r7, #20]

    if (status)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d110      	bne.n	800159c <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L3A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	b299      	uxth	r1, r3
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	b29a      	uxth	r2, r3
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2064      	movs	r0, #100	; 0x64
 8001586:	fb00 f303 	mul.w	r3, r0, r3
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	4613      	mov	r3, r2
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <_ExpanderRd+0x60>)
 8001592:	f011 f87f 	bl	8012694 <HAL_I2C_Master_Receive>
 8001596:	4603      	mov	r3, r0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e000      	b.n	800159e <_ExpanderRd+0x56>
      break;
 800159c:	bf00      	nop
  } while (0);

  VL53L3A2_PutI2cBus();

  return status;
 800159e:	697b      	ldr	r3, [r7, #20]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2000705c 	.word	0x2000705c

080015ac <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08c      	sub	sp, #48	; 0x30
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	3301      	adds	r3, #1
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f012 fd84 	bl	80140d8 <memcpy>

  VL53L3A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	b299      	uxth	r1, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	3301      	adds	r3, #1
 80015da:	b29b      	uxth	r3, r3
 80015dc:	f107 0214 	add.w	r2, r7, #20
 80015e0:	2064      	movs	r0, #100	; 0x64
 80015e2:	9000      	str	r0, [sp, #0]
 80015e4:	4804      	ldr	r0, [pc, #16]	; (80015f8 <_ExpanderWR+0x4c>)
 80015e6:	f010 ff57 	bl	8012498 <HAL_I2C_Master_Transmit>
 80015ea:	4603      	mov	r3, r0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L3A2_PutI2cBus();

  return status;
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	2000705c 	.word	0x2000705c

080015fc <VL53L3A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d903      	bls.n	8001612 <VL53L3A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800160a:	f06f 0301 	mvn.w	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	e014      	b.n	800163c <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L3A2_Init() != 0)
 8001612:	f7ff fe15 	bl	8001240 <VL53L3A2_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <VL53L3A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800161c:	f06f 0303 	mvn.w	r3, #3
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	e00b      	b.n	800163c <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 8001624:	2101      	movs	r1, #1
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f8fc 	bl	8001824 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 800162c:	2100      	movs	r1, #0
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f8f8 	bl	8001824 <VL53L3A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L3CX_Probe(Instance);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f935 	bl	80018a4 <VL53L3CX_Probe>
 800163a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800163c:	68fb      	ldr	r3, [r7, #12]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <VL53L3A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d903      	bls.n	8001660 <VL53L3A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001658:	f06f 0301 	mvn.w	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	e012      	b.n	8001686 <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ReadID(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <VL53L3A2_RANGING_SENSOR_ReadID+0x48>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	490b      	ldr	r1, [pc, #44]	; (8001694 <VL53L3A2_RANGING_SENSOR_ReadID+0x4c>)
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800166e:	6839      	ldr	r1, [r7, #0]
 8001670:	4610      	mov	r0, r2
 8001672:	4798      	blx	r3
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	da03      	bge.n	8001682 <VL53L3A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800167a:	f06f 0304 	mvn.w	r3, #4
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	e001      	b.n	8001686 <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000012c 	.word	0x2000012c
 8001694:	20000120 	.word	0x20000120

08001698 <VL53L3A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d903      	bls.n	80016b0 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016a8:	f06f 0301 	mvn.w	r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	e012      	b.n	80016d6 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x48>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	490b      	ldr	r1, [pc, #44]	; (80016e4 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80016be:	6839      	ldr	r1, [r7, #0]
 80016c0:	4610      	mov	r0, r2
 80016c2:	4798      	blx	r3
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	da03      	bge.n	80016d2 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80016ca:	f06f 0304 	mvn.w	r3, #4
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e001      	b.n	80016d6 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000012c 	.word	0x2000012c
 80016e4:	20000120 	.word	0x20000120

080016e8 <VL53L3A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d903      	bls.n	8001700 <VL53L3A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016f8:	f06f 0301 	mvn.w	r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	e012      	b.n	8001726 <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->GetDistance(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <VL53L3A2_RANGING_SENSOR_GetDistance+0x48>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	490b      	ldr	r1, [pc, #44]	; (8001734 <VL53L3A2_RANGING_SENSOR_GetDistance+0x4c>)
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800170e:	6839      	ldr	r1, [r7, #0]
 8001710:	4610      	mov	r0, r2
 8001712:	4798      	blx	r3
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	da03      	bge.n	8001722 <VL53L3A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800171a:	f06f 0304 	mvn.w	r3, #4
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e001      	b.n	8001726 <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001726:	68fb      	ldr	r3, [r7, #12]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	2000012c 	.word	0x2000012c
 8001734:	20000120 	.word	0x20000120

08001738 <VL53L3A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d903      	bls.n	8001750 <VL53L3A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001748:	f06f 0301 	mvn.w	r3, #1
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	e012      	b.n	8001776 <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->Start(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <VL53L3A2_RANGING_SENSOR_Start+0x48>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	490b      	ldr	r1, [pc, #44]	; (8001784 <VL53L3A2_RANGING_SENSOR_Start+0x4c>)
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800175e:	6839      	ldr	r1, [r7, #0]
 8001760:	4610      	mov	r0, r2
 8001762:	4798      	blx	r3
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	da03      	bge.n	8001772 <VL53L3A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800176a:	f06f 0304 	mvn.w	r3, #4
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e001      	b.n	8001776 <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000012c 	.word	0x2000012c
 8001784:	20000120 	.word	0x20000120

08001788 <VL53L3A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d903      	bls.n	800179e <VL53L3A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001796:	f06f 0301 	mvn.w	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	e011      	b.n	80017c2 <VL53L3A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->Stop(VL53L3A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <VL53L3A2_RANGING_SENSOR_Stop+0x44>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	490a      	ldr	r1, [pc, #40]	; (80017d0 <VL53L3A2_RANGING_SENSOR_Stop+0x48>)
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80017ac:	4610      	mov	r0, r2
 80017ae:	4798      	blx	r3
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	da03      	bge.n	80017be <VL53L3A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80017b6:	f06f 0304 	mvn.w	r3, #4
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	e001      	b.n	80017c2 <VL53L3A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2000012c 	.word	0x2000012c
 80017d0:	20000120 	.word	0x20000120

080017d4 <VL53L3A2_RANGING_SENSOR_SetAddress>:
  * @param Instance    Ranging sensor instance.
  * @param Address     New I2C address.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetAddress(uint32_t Instance, uint32_t Address)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d903      	bls.n	80017ec <VL53L3A2_RANGING_SENSOR_SetAddress+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017e4:	f06f 0301 	mvn.w	r3, #1
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e012      	b.n	8001812 <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->SetAddress(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Address) < 0)
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <VL53L3A2_RANGING_SENSOR_SetAddress+0x48>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	490b      	ldr	r1, [pc, #44]	; (8001820 <VL53L3A2_RANGING_SENSOR_SetAddress+0x4c>)
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80017fa:	6839      	ldr	r1, [r7, #0]
 80017fc:	4610      	mov	r0, r2
 80017fe:	4798      	blx	r3
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	da03      	bge.n	800180e <VL53L3A2_RANGING_SENSOR_SetAddress+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001806:	f06f 0304 	mvn.w	r3, #4
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e001      	b.n	8001812 <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	2000012c 	.word	0x2000012c
 8001820:	20000120 	.word	0x20000120

08001824 <VL53L3A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d903      	bls.n	800183c <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001834:	f06f 0301 	mvn.w	r3, #1
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e02e      	b.n	800189a <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d112      	bne.n	8001868 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 1) < 0)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2101      	movs	r1, #1
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fd6f 	bl	800132c <VL53L3A2_ResetId>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	da03      	bge.n	800185c <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001854:	f06f 0303 	mvn.w	r3, #3
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	e01e      	b.n	800189a <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 800185c:	2002      	movs	r0, #2
 800185e:	f010 f8ef 	bl	8011a40 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	e018      	b.n	800189a <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d112      	bne.n	8001894 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 0) < 0)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fd59 	bl	800132c <VL53L3A2_ResetId>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	da03      	bge.n	8001888 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001880:	f06f 0303 	mvn.w	r3, #3
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	e008      	b.n	800189a <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001888:	2002      	movs	r0, #2
 800188a:	f010 f8d9 	bl	8011a40 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	e002      	b.n	800189a <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001894:	f06f 0301 	mvn.w	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <VL53L3CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L3CX_Probe(uint32_t Instance)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  VL53L3CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L3CX_Object_t   VL53L3CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L3CX_ADDRESS;
 80018ac:	2352      	movs	r3, #82	; 0x52
 80018ae:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L3A2_I2C_Init;
 80018b0:	4b38      	ldr	r3, [pc, #224]	; (8001994 <VL53L3CX_Probe+0xf0>)
 80018b2:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L3A2_I2C_DeInit;
 80018b4:	4b38      	ldr	r3, [pc, #224]	; (8001998 <VL53L3CX_Probe+0xf4>)
 80018b6:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L3A2_I2C_WriteReg;
 80018b8:	4b38      	ldr	r3, [pc, #224]	; (800199c <VL53L3CX_Probe+0xf8>)
 80018ba:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L3A2_I2C_ReadReg;
 80018bc:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <VL53L3CX_Probe+0xfc>)
 80018be:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L3A2_GetTick;
 80018c0:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <VL53L3CX_Probe+0x100>)
 80018c2:	623b      	str	r3, [r7, #32]

  if (VL53L3CX_RegisterBusIO(&(VL53L3CXObj[Instance]), &IOCtx) != VL53L3CX_OK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f242 42f0 	movw	r2, #9456	; 0x24f0
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	4a36      	ldr	r2, [pc, #216]	; (80019a8 <VL53L3CX_Probe+0x104>)
 80018d0:	4413      	add	r3, r2
 80018d2:	f107 020c 	add.w	r2, r7, #12
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f00f fbf2 	bl	80110c2 <VL53L3CX_RegisterBusIO>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <VL53L3CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80018e4:	f06f 0304 	mvn.w	r3, #4
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ea:	e04d      	b.n	8001988 <VL53L3CX_Probe+0xe4>
  }
  else if (VL53L3CX_ReadID(&(VL53L3CXObj[Instance]), &id) != VL53L3CX_OK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f242 42f0 	movw	r2, #9456	; 0x24f0
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	4a2c      	ldr	r2, [pc, #176]	; (80019a8 <VL53L3CX_Probe+0x104>)
 80018f8:	4413      	add	r3, r2
 80018fa:	f107 0208 	add.w	r2, r7, #8
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f00f fc90 	bl	8011226 <VL53L3CX_ReadID>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <VL53L3CX_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800190c:	f06f 0304 	mvn.w	r3, #4
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
 8001912:	e039      	b.n	8001988 <VL53L3CX_Probe+0xe4>
  }
  else
  {
    if (id != VL53L3CX_ID)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	f64e 22aa 	movw	r2, #60074	; 0xeaaa
 800191a:	4293      	cmp	r3, r2
 800191c:	d003      	beq.n	8001926 <VL53L3CX_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800191e:	f06f 0306 	mvn.w	r3, #6
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
 8001924:	e030      	b.n	8001988 <VL53L3CX_Probe+0xe4>
    }
    else
    {
      VL53L3A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L3CX_RANGING_SENSOR_Driver;
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <VL53L3CX_Probe+0x108>)
 8001928:	4a21      	ldr	r2, [pc, #132]	; (80019b0 <VL53L3CX_Probe+0x10c>)
 800192a:	601a      	str	r2, [r3, #0]
      VL53L3A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L3CXObj[Instance]);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f242 42f0 	movw	r2, #9456	; 0x24f0
 8001932:	fb02 f303 	mul.w	r3, r2, r3
 8001936:	4a1c      	ldr	r2, [pc, #112]	; (80019a8 <VL53L3CX_Probe+0x104>)
 8001938:	441a      	add	r2, r3
 800193a:	491e      	ldr	r1, [pc, #120]	; (80019b4 <VL53L3CX_Probe+0x110>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L3A2_RANGING_SENSOR_Drv->Init(VL53L3A2_RANGING_SENSOR_CompObj[Instance]) != VL53L3CX_OK)
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <VL53L3CX_Probe+0x108>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	491a      	ldr	r1, [pc, #104]	; (80019b4 <VL53L3CX_Probe+0x110>)
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001950:	4610      	mov	r0, r2
 8001952:	4798      	blx	r3
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <VL53L3CX_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800195a:	f06f 0304 	mvn.w	r3, #4
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
 8001960:	e012      	b.n	8001988 <VL53L3CX_Probe+0xe4>
      }
      else if (VL53L3A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L3A2_RANGING_SENSOR_CompObj[Instance], &VL53L3A2_RANGING_SENSOR_Cap) != VL53L3CX_OK)
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <VL53L3CX_Probe+0x108>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4912      	ldr	r1, [pc, #72]	; (80019b4 <VL53L3CX_Probe+0x110>)
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001970:	4911      	ldr	r1, [pc, #68]	; (80019b8 <VL53L3CX_Probe+0x114>)
 8001972:	4610      	mov	r0, r2
 8001974:	4798      	blx	r3
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <VL53L3CX_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800197c:	f06f 0304 	mvn.w	r3, #4
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
 8001982:	e001      	b.n	8001988 <VL53L3CX_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800198a:	4618      	mov	r0, r3
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	08000de1 	.word	0x08000de1
 8001998:	08000e45 	.word	0x08000e45
 800199c:	08000e95 	.word	0x08000e95
 80019a0:	08000ee9 	.word	0x08000ee9
 80019a4:	08000f3d 	.word	0x08000f3d
 80019a8:	20000140 	.word	0x20000140
 80019ac:	2000012c 	.word	0x2000012c
 80019b0:	20000040 	.word	0x20000040
 80019b4:	20000120 	.word	0x20000120
 80019b8:	20000130 	.word	0x20000130

080019bc <VL53LX_SetDeviceAddress>:
}



VL53LX_Error VL53LX_SetDeviceAddress(VL53LX_DEV Dev, uint8_t DeviceAddress)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3318      	adds	r3, #24
 80019d0:	613b      	str	r3, [r7, #16]
	VL53LX_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80019d8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53LX_WrByte(Dev, VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	085b      	lsrs	r3, r3, #1
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	461a      	mov	r2, r3
 80019e2:	2101      	movs	r1, #1
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f00f f98b 	bl	8010d00 <VL53LX_WrByte>
 80019ea:	4603      	mov	r3, r0
 80019ec:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	085b      	lsrs	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80019fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <VL53LX_DataInit>:


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 8001a16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d105      	bne.n	8001a2a <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 8001a1e:	2101      	movs	r1, #1
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f001 fcba 	bl	800339a <VL53LX_data_init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 8001a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d107      	bne.n	8001a42 <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 8001a32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a36:	2102      	movs	r1, #2
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f887 	bl	8001b4c <SetPresetModeL3CX>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 8001a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d106      	bne.n	8001a58 <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001a4a:	f248 2135 	movw	r1, #33333	; 0x8235
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f980 	bl	8001d54 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8001a54:	4603      	mov	r3, r0
 8001a56:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8001a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10a      	bne.n	8001a76 <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3318      	adds	r3, #24
 8001a64:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8001a6c:	220c      	movs	r2, #12
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f012 fb3f 	bl	80140f4 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001a76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d105      	bne.n	8001a8a <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 8001a7e:	2102      	movs	r1, #2
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f003 fdb0 	bl	80055e6 <VL53LX_set_dmax_mode>
 8001a86:	4603      	mov	r3, r0
 8001a88:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 8001a8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d105      	bne.n	8001a9e <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 8001a92:	2100      	movs	r1, #0
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 ff41 	bl	800291c <VL53LX_SmudgeCorrectionEnable>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001a9e:	2320      	movs	r3, #32
 8001aa0:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	76da      	strb	r2, [r3, #27]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8001aae:	3320      	adds	r3, #32
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	701a      	strb	r2, [r3, #0]
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 8001ab4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 8001acc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f00e fd5c 	bl	801058e <VL53LX_poll_for_boot_completion>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 8001af8:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <ComputeDevicePresetMode+0x60>)
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	4611      	mov	r1, r2
 8001b02:	8019      	strh	r1, [r3, #0]
 8001b04:	3302      	adds	r3, #2
 8001b06:	0c12      	lsrs	r2, r2, #16
 8001b08:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d002      	beq.n	8001b16 <ComputeDevicePresetMode+0x2e>
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d003      	beq.n	8001b1c <ComputeDevicePresetMode+0x34>
 8001b14:	e005      	b.n	8001b22 <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	73fb      	strb	r3, [r7, #15]
		break;
 8001b1a:	e004      	b.n	8001b26 <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
		break;
 8001b20:	e001      	b.n	8001b26 <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 8001b22:	2302      	movs	r3, #2
 8001b24:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	f107 0210 	add.w	r2, r7, #16
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	701a      	strb	r2, [r3, #0]

	return Status;
 8001b36:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	080151e8 	.word	0x080151e8

08001b4c <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001b4c:	b5b0      	push	{r4, r5, r7, lr}
 8001b4e:	b08e      	sub	sp, #56	; 0x38
 8001b50:	af04      	add	r7, sp, #16
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	460b      	mov	r3, r1
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001b70:	2320      	movs	r3, #32
 8001b72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 8001b76:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8001b7a:	7afb      	ldrb	r3, [r7, #11]
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ffb2 	bl	8001ae8 <ComputeDevicePresetMode>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 8001b8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d112      	bne.n	8001bb8 <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 8001b92:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001b96:	f107 001c 	add.w	r0, r7, #28
 8001b9a:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	f107 0318 	add.w	r3, r7, #24
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	4603      	mov	r3, r0
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f002 f859 	bl	8003c64 <VL53LX_get_preset_mode_timing_cfg>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 8001bb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d112      	bne.n	8001be6 <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 8001bc0:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001bc4:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8001bc6:	69fd      	ldr	r5, [r7, #28]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	9102      	str	r1, [sp, #8]
 8001bd0:	9201      	str	r2, [sp, #4]
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	462b      	mov	r3, r5
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	4601      	mov	r1, r0
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f002 f8a3 	bl	8003d26 <VL53LX_set_preset_mode>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001be6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d103      	bne.n	8001bf6 <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001bf4:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 8001bf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3728      	adds	r7, #40	; 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bdb0      	pop	{r4, r5, r7, pc}

08001c02 <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b085      	sub	sp, #20
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3318      	adds	r3, #24
 8001c12:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	f893 3393 	ldrb.w	r3, [r3, #915]	; 0x393
 8001c1a:	2baa      	cmp	r3, #170	; 0xaa
 8001c1c:	d106      	bne.n	8001c2c <IsL4+0x2a>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f893 3392 	ldrb.w	r3, [r3, #914]	; 0x392
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001c24:	2beb      	cmp	r3, #235	; 0xeb
 8001c26:	d101      	bne.n	8001c2c <IsL4+0x2a>
		devL4 = 1;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
	return devL4;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <CheckValidRectRoi>:

static VL53LX_Error CheckValidRectRoi(VL53LX_UserRoi_t ROI)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001c46:	793b      	ldrb	r3, [r7, #4]
 8001c48:	2b0f      	cmp	r3, #15
 8001c4a:	d808      	bhi.n	8001c5e <CheckValidRectRoi+0x24>
 8001c4c:	797b      	ldrb	r3, [r7, #5]
 8001c4e:	2b0f      	cmp	r3, #15
 8001c50:	d805      	bhi.n	8001c5e <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001c52:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d802      	bhi.n	8001c5e <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	2b0f      	cmp	r3, #15
 8001c5c:	d901      	bls.n	8001c62 <CheckValidRectRoi+0x28>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001c5e:	23fc      	movs	r3, #252	; 0xfc
 8001c60:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8001c62:	793a      	ldrb	r2, [r7, #4]
 8001c64:	79bb      	ldrb	r3, [r7, #6]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d803      	bhi.n	8001c72 <CheckValidRectRoi+0x38>
 8001c6a:	797a      	ldrb	r2, [r7, #5]
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d201      	bcs.n	8001c76 <CheckValidRectRoi+0x3c>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001c72:	23fc      	movs	r3, #252	; 0xfc
 8001c74:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <VL53LX_SetDistanceMode>:


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b088      	sub	sp, #32
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d008      	beq.n	8001cba <VL53LX_SetDistanceMode+0x34>
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d005      	beq.n	8001cba <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d002      	beq.n	8001cba <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 8001cb4:	f06f 0303 	mvn.w	r3, #3
 8001cb8:	e048      	b.n	8001d4c <VL53LX_SetDistanceMode+0xc6>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffa1 	bl	8001c02 <IsL4>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <VL53LX_SetDistanceMode+0x4c>
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d102      	bne.n	8001cd2 <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 8001ccc:	f06f 0303 	mvn.w	r3, #3
 8001cd0:	e03c      	b.n	8001d4c <VL53LX_SetDistanceMode+0xc6>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001cd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10a      	bne.n	8001cf6 <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	f107 0210 	add.w	r2, r7, #16
 8001ce8:	f107 010c 	add.w	r1, r7, #12
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f001 fe92 	bl	8003a16 <VL53LX_get_timeouts_us>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 8001cf6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d107      	bne.n	8001d0e <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4619      	mov	r1, r3
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ff21 	bl	8001b4c <SetPresetModeL3CX>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 8001d0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d105      	bne.n	8001d22 <VL53LX_SetDistanceMode+0x9c>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8001d1c:	3320      	adds	r3, #32
 8001d1e:	78fa      	ldrb	r2, [r7, #3]
 8001d20:	701a      	strb	r2, [r3, #0]
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001d22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10e      	bne.n	8001d48 <VL53LX_SetDistanceMode+0xc2>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8001d2a:	68f9      	ldr	r1, [r7, #12]
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f001 fe37 	bl	80039a4 <VL53LX_set_timeouts_us>
 8001d36:	4603      	mov	r3, r0
 8001d38:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 8001d3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d102      	bne.n	8001d48 <VL53LX_SetDistanceMode+0xc2>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001d48:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001d70:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 8001d72:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	4a31      	ldr	r2, [pc, #196]	; (8001e3c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d902      	bls.n	8001d82 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001d7c:	23fc      	movs	r3, #252	; 0xfc
 8001d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53LX_ERROR_NONE)
 8001d82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10b      	bne.n	8001da2 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	f107 0210 	add.w	r2, r7, #16
 8001d92:	f107 010c 	add.w	r1, r7, #12
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f001 fe3d 	bl	8003a16 <VL53LX_get_timeouts_us>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 8001da2:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001da6:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 8001da8:	2306      	movs	r3, #6
 8001daa:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff28 	bl	8001c02 <IsL4>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 8001db8:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 8001dba:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d803      	bhi.n	8001dcc <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001dc4:	23fc      	movs	r3, #252	; 0xfc
 8001dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001dca:	e003      	b.n	8001dd4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8001dd2:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001dd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d11c      	bne.n	8001e16 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	6a3a      	ldr	r2, [r7, #32]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d203      	bcs.n	8001dec <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 8001de4:	23fc      	movs	r3, #252	; 0xfc
 8001de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001dea:	e00d      	b.n	8001e08 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df4:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 8001df6:	68f9      	ldr	r1, [r7, #12]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f001 fdd1 	bl	80039a4 <VL53LX_set_timeouts_us>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 8001e08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001e16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd6>
		VL53LXDevDataSet(Dev,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8001e24:	3324      	adds	r3, #36	; 0x24
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	601a      	str	r2, [r3, #0]
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001e2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3728      	adds	r7, #40	; 0x28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	00086470 	.word	0x00086470
 8001e3c:	00989680 	.word	0x00989680
 8001e40:	00030d40 	.word	0x00030d40

08001e44 <VL53LX_SetUserROI>:



VL53LX_Error VL53LX_SetUserROI(VL53LX_DEV Dev,
		VL53LX_UserRoi_t *pRoi)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b092      	sub	sp, #72	; 0x48
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53LX_zone_config_t  zone_cfg;
	uint8_t x_centre, y_centre, width, height;

	Status = CheckValidRectRoi(*pRoi);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff feec 	bl	8001c3a <CheckValidRectRoi>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (Status != VL53LX_ERROR_NONE)
 8001e68:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <VL53LX_SetUserROI+0x32>
		return VL53LX_ERROR_INVALID_PARAMS;
 8001e70:	f06f 0303 	mvn.w	r3, #3
 8001e74:	e050      	b.n	8001f18 <VL53LX_SetUserROI+0xd4>

	x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	789b      	ldrb	r3, [r3, #2]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4413      	add	r3, r2
 8001e82:	3301      	adds	r3, #1
 8001e84:	0fda      	lsrs	r2, r3, #31
 8001e86:	4413      	add	r3, r2
 8001e88:	105b      	asrs	r3, r3, #1
 8001e8a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	785b      	ldrb	r3, [r3, #1]
 8001e92:	461a      	mov	r2, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	78db      	ldrb	r3, [r3, #3]
 8001e98:	4413      	add	r3, r2
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	0fda      	lsrs	r2, r3, #31
 8001e9e:	4413      	add	r3, r2
 8001ea0:	105b      	asrs	r3, r3, #1
 8001ea2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	width =    (pRoi->BotRightX - pRoi->TopLeftX);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	789a      	ldrb	r2, [r3, #2]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	785a      	ldrb	r2, [r3, #1]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	78db      	ldrb	r3, [r3, #3]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	zone_cfg.max_zones = 1;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	733b      	strb	r3, [r7, #12]
	zone_cfg.active_zones = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	737b      	strb	r3, [r7, #13]
	zone_cfg.user_zones[0].x_centre = x_centre;
 8001eca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001ece:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	zone_cfg.user_zones[0].y_centre = y_centre;
 8001ed2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001ed6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	zone_cfg.user_zones[0].width = width;
 8001eda:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001ede:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	zone_cfg.user_zones[0].height = height;
 8001ee2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if ((width < 3) || (height < 3))
 8001eea:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d903      	bls.n	8001efa <VL53LX_SetUserROI+0xb6>
 8001ef2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d803      	bhi.n	8001f02 <VL53LX_SetUserROI+0xbe>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001efa:	23fc      	movs	r3, #252	; 0xfc
 8001efc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001f00:	e008      	b.n	8001f14 <VL53LX_SetUserROI+0xd0>
	else
		Status =  VL53LX_set_zone_config(Dev, &zone_cfg);
 8001f02:	f107 030c 	add.w	r3, r7, #12
 8001f06:	4619      	mov	r1, r3
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f001 fe68 	bl	8003bde <VL53LX_set_zone_config>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	LOG_FUNCTION_END(Status);
	return Status;
 8001f14:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3748      	adds	r7, #72	; 0x48
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3318      	adds	r3, #24
 8001f30:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f001 f90c 	bl	8003150 <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001f38:	2300      	movs	r3, #0
 8001f3a:	75bb      	strb	r3, [r7, #22]
 8001f3c:	e01a      	b.n	8001f74 <VL53LX_StartMeasurement+0x54>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8001f3e:	7dbb      	ldrb	r3, [r7, #22]
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001f46:	3308      	adds	r3, #8
 8001f48:	2100      	movs	r1, #0
 8001f4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8001f4e:	7dbb      	ldrb	r3, [r7, #22]
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001f58:	3318      	adds	r3, #24
 8001f5a:	22ff      	movs	r2, #255	; 0xff
 8001f5c:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8001f5e:	7dbb      	ldrb	r3, [r7, #22]
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001f68:	331c      	adds	r3, #28
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001f6e:	7dbb      	ldrb	r3, [r7, #22]
 8001f70:	3301      	adds	r3, #1
 8001f72:	75bb      	strb	r3, [r7, #22]
 8001f74:	7dbb      	ldrb	r3, [r7, #22]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d9e1      	bls.n	8001f3e <VL53LX_StartMeasurement+0x1e>
	}
	pdev->PreviousStreamCount = 0;
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001f80:	3321      	adds	r3, #33	; 0x21
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = 0;
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001f8c:	3320      	adds	r3, #32
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7edb      	ldrb	r3, [r3, #27]
 8001f96:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 8001f98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d107      	bne.n	8001fb0 <VL53LX_StartMeasurement+0x90>
		Status = VL53LX_init_and_start_range(
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	2206      	movs	r2, #6
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f001 ff80 	bl	8003eac <VL53LX_init_and_start_range>
 8001fac:	4603      	mov	r3, r0
 8001fae:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 8001fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <VL53LX_StopMeasurement>:

VL53LX_Error VL53LX_StopMeasurement(VL53LX_DEV Dev)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_stop_range(Dev);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f002 f9f9 	bl	80043c0 <VL53LX_stop_range>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	73fb      	strb	r3, [r7, #15]

	VL53LX_unload_patch(Dev);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f001 f9ac 	bl	8003330 <VL53LX_unload_patch>

	LOG_FUNCTION_END(Status);
	return Status;
 8001fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <VL53LX_ClearInterruptAndStartMeasurement>:


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7edb      	ldrb	r3, [r3, #27]
 8001ff4:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 8001ff6:	7bbb      	ldrb	r3, [r7, #14]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f002 fedc 	bl	8004db8 <VL53LX_clear_interrupt_and_enable_next_range>
 8002000:	4603      	mov	r3, r0
 8002002:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002004:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800201a:	2300      	movs	r3, #0
 800201c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f00e fa7a 	bl	801051a <VL53LX_is_new_data_ready>
 8002026:	4603      	mov	r3, r0
 8002028:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800202a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <ConvertStatusHisto>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	3b05      	subs	r3, #5
 8002046:	2b12      	cmp	r3, #18
 8002048:	d840      	bhi.n	80020cc <ConvertStatusHisto+0x94>
 800204a:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <ConvertStatusHisto+0x18>)
 800204c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002050:	0800209d 	.word	0x0800209d
 8002054:	080020a3 	.word	0x080020a3
 8002058:	080020af 	.word	0x080020af
 800205c:	080020cd 	.word	0x080020cd
 8002060:	080020c7 	.word	0x080020c7
 8002064:	080020cd 	.word	0x080020cd
 8002068:	080020cd 	.word	0x080020cd
 800206c:	080020cd 	.word	0x080020cd
 8002070:	080020cd 	.word	0x080020cd
 8002074:	080020cd 	.word	0x080020cd
 8002078:	080020cd 	.word	0x080020cd
 800207c:	080020cd 	.word	0x080020cd
 8002080:	080020cd 	.word	0x080020cd
 8002084:	080020cd 	.word	0x080020cd
 8002088:	080020a9 	.word	0x080020a9
 800208c:	080020bb 	.word	0x080020bb
 8002090:	080020cd 	.word	0x080020cd
 8002094:	080020c1 	.word	0x080020c1
 8002098:	080020b5 	.word	0x080020b5
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800209c:	2304      	movs	r3, #4
 800209e:	73fb      	strb	r3, [r7, #15]
		break;
 80020a0:	e016      	b.n	80020d0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 80020a2:	2301      	movs	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
		break;
 80020a6:	e013      	b.n	80020d0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 80020a8:	2306      	movs	r3, #6
 80020aa:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 80020ac:	e010      	b.n	80020d0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 80020ae:	2307      	movs	r3, #7
 80020b0:	73fb      	strb	r3, [r7, #15]
		break;
 80020b2:	e00d      	b.n	80020d0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 80020b4:	230c      	movs	r3, #12
 80020b6:	73fb      	strb	r3, [r7, #15]
		break;
 80020b8:	e00a      	b.n	80020d0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 80020ba:	2307      	movs	r3, #7
 80020bc:	73fb      	strb	r3, [r7, #15]
		break;
 80020be:	e007      	b.n	80020d0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 80020c0:	230b      	movs	r3, #11
 80020c2:	73fb      	strb	r3, [r7, #15]
		break;
 80020c4:	e004      	b.n	80020d0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
		break;
 80020ca:	e001      	b.n	80020d0 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 80020cc:	23ff      	movs	r3, #255	; 0xff
 80020ce:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop

080020e0 <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08e      	sub	sp, #56	; 0x38
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	4608      	mov	r0, r1
 80020ea:	4611      	mov	r1, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	4603      	mov	r3, r0
 80020f0:	70fb      	strb	r3, [r7, #3]
 80020f2:	460b      	mov	r3, r1
 80020f4:	70bb      	strb	r3, [r7, #2]
 80020f6:	4613      	mov	r3, r2
 80020f8:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	VL53LX_LLDriverData_t *pdev =
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3318      	adds	r3, #24
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 8002106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002108:	33f8      	adds	r3, #248	; 0xf8
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8002110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002112:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002116:	f003 031f 	and.w	r3, r3, #31
 800211a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 800211e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002120:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002122:	025b      	lsls	r3, r3, #9
 8002124:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8002126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002128:	6a3a      	ldr	r2, [r7, #32]
 800212a:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 800212c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800212e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002130:	025b      	lsls	r3, r3, #9
 8002132:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8002134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 800213a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800213c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800213e:	025b      	lsls	r3, r3, #9
 8002140:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8002142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8002148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800214a:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800214e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002150:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8002152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002154:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8002158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800215a:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 800215c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800215e:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8002162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002164:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 8002166:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800216a:	2b11      	cmp	r3, #17
 800216c:	d009      	beq.n	8002182 <SetTargetData+0xa2>
 800216e:	2b11      	cmp	r3, #17
 8002170:	dc0f      	bgt.n	8002192 <SetTargetData+0xb2>
 8002172:	2b03      	cmp	r3, #3
 8002174:	dc02      	bgt.n	800217c <SetTargetData+0x9c>
 8002176:	2b00      	cmp	r3, #0
 8002178:	dc03      	bgt.n	8002182 <SetTargetData+0xa2>
 800217a:	e00a      	b.n	8002192 <SetTargetData+0xb2>
 800217c:	2b0d      	cmp	r3, #13
 800217e:	d004      	beq.n	800218a <SetTargetData+0xaa>
 8002180:	e007      	b.n	8002192 <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 8002182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002184:	2205      	movs	r2, #5
 8002186:	749a      	strb	r2, [r3, #18]
		break;
 8002188:	e006      	b.n	8002198 <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 800218a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800218c:	220d      	movs	r2, #13
 800218e:	749a      	strb	r2, [r3, #18]
		break;
 8002190:	e002      	b.n	8002198 <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 8002192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002194:	2200      	movs	r2, #0
 8002196:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8002198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800219a:	7c9b      	ldrb	r3, [r3, #18]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d117      	bne.n	80021d0 <SetTargetData+0xf0>
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d114      	bne.n	80021d0 <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 80021a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a8:	22ff      	movs	r2, #255	; 0xff
 80021aa:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 80021ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ae:	2200      	movs	r2, #0
 80021b0:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 80021b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021b4:	2200      	movs	r2, #0
 80021b6:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 80021b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ba:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80021be:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 80021c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c2:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80021c6:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 80021c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ca:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80021ce:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 80021d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d2:	7c9b      	ldrb	r3, [r3, #18]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d108      	bne.n	80021ea <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 80021d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff2b 	bl	8002038 <ConvertStatusHisto>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 80021e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e8:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 80021ea:	f107 030c 	add.w	r3, r7, #12
 80021ee:	461a      	mov	r2, r3
 80021f0:	f248 0191 	movw	r1, #32913	; 0x8091
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f003 fa37 	bl	8005668 <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 80021fa:	78bb      	ldrb	r3, [r7, #2]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8002208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800220a:	8a1b      	ldrh	r3, [r3, #16]
 800220c:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	86bb      	strh	r3, [r7, #52]	; 0x34

	pRangeData->ExtendedRange = 0;
 8002212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002214:	2200      	movs	r2, #0
 8002216:	74da      	strb	r2, [r3, #19]

	if ((active_results != 1) ||
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d106      	bne.n	800222c <SetTargetData+0x14c>
		(pdev->PreviousRangeActiveResults != 1))
 800221e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002220:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002224:	3320      	adds	r3, #32
 8002226:	781b      	ldrb	r3, [r3, #0]
	if ((active_results != 1) ||
 8002228:	2b01      	cmp	r3, #1
 800222a:	d001      	beq.n	8002230 <SetTargetData+0x150>
		ExtendedRangeEnabled = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 81dc 	beq.w	80025f0 <SetTargetData+0x510>
		(pRangeData->RangeStatus ==
 8002238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800223a:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 800223c:	2b07      	cmp	r3, #7
 800223e:	d004      	beq.n	800224a <SetTargetData+0x16a>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8002240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002242:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002244:	2b04      	cmp	r3, #4
 8002246:	f040 81d3 	bne.w	80025f0 <SetTargetData+0x510>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 800224a:	787b      	ldrb	r3, [r7, #1]
 800224c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800224e:	4413      	add	r3, r2
 8002250:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002254:	3318      	adds	r3, #24
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b07      	cmp	r3, #7
 800225a:	d01c      	beq.n	8002296 <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 800225c:	787b      	ldrb	r3, [r7, #1]
 800225e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002260:	4413      	add	r3, r2
 8002262:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002266:	3318      	adds	r3, #24
 8002268:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 800226a:	2b04      	cmp	r3, #4
 800226c:	d013      	beq.n	8002296 <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 800226e:	787b      	ldrb	r3, [r7, #1]
 8002270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002272:	4413      	add	r3, r2
 8002274:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002278:	3318      	adds	r3, #24
 800227a:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 800227c:	2b00      	cmp	r3, #0
 800227e:	f040 81b7 	bne.w	80025f0 <SetTargetData+0x510>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 8002282:	787b      	ldrb	r3, [r7, #1]
 8002284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002286:	4413      	add	r3, r2
 8002288:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800228c:	331c      	adds	r3, #28
 800228e:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 8002290:	2b01      	cmp	r3, #1
 8002292:	f040 81ad 	bne.w	80025f0 <SetTargetData+0x510>
	{
		if (((pdev->PreviousStreamCount) ==
 8002296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002298:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800229c:	3321      	adds	r3, #33	; 0x21
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 80022a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a4:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 80022a8:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d00c      	beq.n	80022c8 <SetTargetData+0x1e8>
		|| ((pdev->PreviousStreamCount) ==
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80022b4:	3321      	adds	r3, #33	; 0x21
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 80022c0:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 80022c2:	429a      	cmp	r2, r3
 80022c4:	f040 816b 	bne.w	800259e <SetTargetData+0x4be>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 80022c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ca:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80022ce:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 80022d0:	787b      	ldrb	r3, [r7, #1]
 80022d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022d4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80022d8:	3308      	adds	r3, #8
 80022da:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80022de:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 80022e6:	2301      	movs	r3, #1
 80022e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		switch (pdev->preset_mode) {
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ee:	785b      	ldrb	r3, [r3, #1]
 80022f0:	2b21      	cmp	r3, #33	; 0x21
 80022f2:	d008      	beq.n	8002306 <SetTargetData+0x226>
 80022f4:	2b21      	cmp	r3, #33	; 0x21
 80022f6:	f300 814e 	bgt.w	8002596 <SetTargetData+0x4b6>
 80022fa:	2b1b      	cmp	r3, #27
 80022fc:	f000 80d7 	beq.w	80024ae <SetTargetData+0x3ce>
 8002300:	2b1e      	cmp	r3, #30
 8002302:	d004      	beq.n	800230e <SetTargetData+0x22e>
 8002304:	e147      	b.n	8002596 <SetTargetData+0x4b6>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 800230c:	e148      	b.n	80025a0 <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8002314:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002318:	429a      	cmp	r2, r3
 800231a:	dd0e      	ble.n	800233a <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 800231c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231e:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8002322:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002326:	429a      	cmp	r2, r3
 8002328:	da07      	bge.n	800233a <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 800232a:	7dfb      	ldrb	r3, [r7, #23]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d104      	bne.n	800233a <SetTargetData+0x25a>
					sequency == 1) {
					AddOffset =
 8002330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002332:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002336:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002338:	e0b8      	b.n	80024ac <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 800233a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002340:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8002344:	425b      	negs	r3, r3
 8002346:	429a      	cmp	r2, r3
 8002348:	da0f      	bge.n	800236a <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 800234a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002350:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 8002354:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8002356:	429a      	cmp	r2, r3
 8002358:	dd07      	ble.n	800236a <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 800235a:	7dfb      	ldrb	r3, [r7, #23]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d104      	bne.n	800236a <SetTargetData+0x28a>
					sequency == 0) {
					AddOffset =
 8002360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002362:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8002366:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002368:	e0a0      	b.n	80024ac <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236c:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8002370:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002374:	429a      	cmp	r2, r3
 8002376:	dd0e      	ble.n	8002396 <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8002378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237a:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 800237e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002382:	429a      	cmp	r2, r3
 8002384:	da07      	bge.n	8002396 <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8002386:	7dfb      	ldrb	r3, [r7, #23]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d104      	bne.n	8002396 <SetTargetData+0x2b6>
					sequency == 0) {
					AddOffset =
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8002392:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002394:	e08a      	b.n	80024ac <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8002396:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239c:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80023a0:	425b      	negs	r3, r3
 80023a2:	429a      	cmp	r2, r3
 80023a4:	da0f      	bge.n	80023c6 <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80023a6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ac:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 80023b0:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80023b2:	429a      	cmp	r2, r3
 80023b4:	dd07      	ble.n	80023c6 <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d104      	bne.n	80023c6 <SetTargetData+0x2e6>
					sequency == 1) {
					AddOffset =
 80023bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023be:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80023c2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80023c4:	e072      	b.n	80024ac <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 80023cc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	dd0e      	ble.n	80023f2 <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d6:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80023da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023de:	429a      	cmp	r2, r3
 80023e0:	da07      	bge.n	80023f2 <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80023e2:	7dfb      	ldrb	r3, [r7, #23]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d104      	bne.n	80023f2 <SetTargetData+0x312>
					sequency == 1) {
					AddOffset =
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80023ee:	86bb      	strh	r3, [r7, #52]	; 0x34
 80023f0:	e05c      	b.n	80024ac <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 80023f2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 80023fc:	425b      	negs	r3, r3
 80023fe:	429a      	cmp	r2, r3
 8002400:	da0f      	bge.n	8002422 <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8002402:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 800240c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 800240e:	429a      	cmp	r2, r3
 8002410:	dd07      	ble.n	8002422 <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8002412:	7dfb      	ldrb	r3, [r7, #23]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d104      	bne.n	8002422 <SetTargetData+0x342>
					sequency == 0) {
					AddOffset =
 8002418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800241e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002420:	e044      	b.n	80024ac <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002424:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002428:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800242c:	429a      	cmp	r2, r3
 800242e:	dd0e      	ble.n	800244e <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8002430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002432:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002436:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800243a:	429a      	cmp	r2, r3
 800243c:	da07      	bge.n	800244e <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 800243e:	7dfb      	ldrb	r3, [r7, #23]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d104      	bne.n	800244e <SetTargetData+0x36e>
					sequency == 0) {
					AddOffset =
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800244a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800244c:	e02e      	b.n	80024ac <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800244e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002458:	425b      	negs	r3, r3
 800245a:	429a      	cmp	r2, r3
 800245c:	da0f      	bge.n	800247e <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800245e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002464:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8002468:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800246a:	429a      	cmp	r2, r3
 800246c:	dd07      	ble.n	800247e <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800246e:	7dfb      	ldrb	r3, [r7, #23]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d104      	bne.n	800247e <SetTargetData+0x39e>
					sequency == 1) {
					AddOffset =
 8002474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002476:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800247a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800247c:	e016      	b.n	80024ac <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8002484:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002488:	429a      	cmp	r2, r3
 800248a:	da0b      	bge.n	80024a4 <SetTargetData+0x3c4>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 800248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248e:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002492:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002496:	429a      	cmp	r2, r3
 8002498:	dd04      	ble.n	80024a4 <SetTargetData+0x3c4>
					AddOffset =
 800249a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249c:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 80024a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80024a2:	e003      	b.n	80024ac <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 80024aa:	e079      	b.n	80025a0 <SetTargetData+0x4c0>
 80024ac:	e078      	b.n	80025a0 <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 80024b4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	dd0e      	ble.n	80024da <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80024bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024be:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80024c2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	da07      	bge.n	80024da <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d104      	bne.n	80024da <SetTargetData+0x3fa>
					sequency == 0) {
					AddOffset =
 80024d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d2:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 80024d6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80024d8:	e05c      	b.n	8002594 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80024da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80024de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e0:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 80024e4:	425b      	negs	r3, r3
 80024e6:	429a      	cmp	r2, r3
 80024e8:	da0f      	bge.n	800250a <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80024ea:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 80024f4:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80024f6:	429a      	cmp	r2, r3
 80024f8:	dd07      	ble.n	800250a <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d104      	bne.n	800250a <SetTargetData+0x42a>
					sequency == 1) {
					AddOffset =
 8002500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002502:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002506:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002508:	e044      	b.n	8002594 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8002510:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002514:	429a      	cmp	r2, r3
 8002516:	dd0e      	ble.n	8002536 <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 800251e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002522:	429a      	cmp	r2, r3
 8002524:	da07      	bge.n	8002536 <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8002526:	7dfb      	ldrb	r3, [r7, #23]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d104      	bne.n	8002536 <SetTargetData+0x456>
					sequency == 1) {
					AddOffset =
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8002532:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002534:	e02e      	b.n	8002594 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8002536:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8002540:	425b      	negs	r3, r3
 8002542:	429a      	cmp	r2, r3
 8002544:	da0f      	bge.n	8002566 <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8002546:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800254a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254c:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 8002550:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8002552:	429a      	cmp	r2, r3
 8002554:	dd07      	ble.n	8002566 <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8002556:	7dfb      	ldrb	r3, [r7, #23]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d104      	bne.n	8002566 <SetTargetData+0x486>
					sequency == 0) {
					AddOffset =
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 8002562:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002564:	e016      	b.n	8002594 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 800256c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002570:	429a      	cmp	r2, r3
 8002572:	da0b      	bge.n	800258c <SetTargetData+0x4ac>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8002574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002576:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 800257a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800257e:	429a      	cmp	r2, r3
 8002580:	dd04      	ble.n	800258c <SetTargetData+0x4ac>
					AddOffset =
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8002588:	86bb      	strh	r3, [r7, #52]	; 0x34
 800258a:	e003      	b.n	8002594 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002592:	e005      	b.n	80025a0 <SetTargetData+0x4c0>
 8002594:	e004      	b.n	80025a0 <SetTargetData+0x4c0>

			default:
				uwr_status = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 800259c:	e000      	b.n	80025a0 <SetTargetData+0x4c0>
			}
		}
 800259e:	bf00      	nop

		if (uwr_status) {
 80025a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d023      	beq.n	80025f0 <SetTargetData+0x510>
			pRangeData->RangeMilliMeter += AddOffset;
 80025a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025aa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80025b2:	4413      	add	r3, r2
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	b21a      	sxth	r2, r3
 80025b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ba:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 80025bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80025c6:	4413      	add	r3, r2
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	b21a      	sxth	r2, r3
 80025cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ce:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 80025d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80025da:	4413      	add	r3, r2
 80025dc:	b29b      	uxth	r3, r3
 80025de:	b21a      	sxth	r2, r3
 80025e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e2:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 80025e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e6:	2201      	movs	r2, #1
 80025e8:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 80025ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ec:	2200      	movs	r2, #0
 80025ee:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 80025f0:	787b      	ldrb	r3, [r7, #1]
 80025f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80025f8:	3308      	adds	r3, #8
 80025fa:	8ab9      	ldrh	r1, [r7, #20]
 80025fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8002600:	787b      	ldrb	r3, [r7, #1]
 8002602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002604:	7c91      	ldrb	r1, [r2, #18]
 8002606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002608:	4413      	add	r3, r2
 800260a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800260e:	3318      	adds	r3, #24
 8002610:	460a      	mov	r2, r1
 8002612:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8002614:	787b      	ldrb	r3, [r7, #1]
 8002616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002618:	7cd1      	ldrb	r1, [r2, #19]
 800261a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800261c:	4413      	add	r3, r2
 800261e:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002622:	331c      	adds	r3, #28
 8002624:	460a      	mov	r2, r1
 8002626:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800262e:	3320      	adds	r3, #32
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	701a      	strb	r2, [r3, #0]

	Range = pRangeData->RangeMilliMeter;
 8002634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002636:	8a1b      	ldrh	r3, [r3, #16]
 8002638:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 800263a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800263c:	7c9b      	ldrb	r3, [r3, #18]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d110      	bne.n	8002664 <SetTargetData+0x584>
 8002642:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	da0c      	bge.n	8002664 <SetTargetData+0x584>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 800264a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <SetTargetData+0x590>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	429a      	cmp	r2, r3
 8002654:	da03      	bge.n	800265e <SetTargetData+0x57e>
			pRangeData->RangeStatus =
 8002656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002658:	220e      	movs	r2, #14
 800265a:	749a      	strb	r2, [r3, #18]
 800265c:	e002      	b.n	8002664 <SetTargetData+0x584>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800265e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002660:	2200      	movs	r2, #0
 8002662:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 8002664:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
}
 8002668:	4618      	mov	r0, r3
 800266a:	3738      	adds	r7, #56	; 0x38
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000014 	.word	0x20000014

08002674 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b08f      	sub	sp, #60	; 0x3c
 8002678:	af04      	add	r7, sp, #16
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3318      	adds	r3, #24
 8002684:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	7c9a      	ldrb	r2, [r3, #18]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


	pMultiRangingData->TimeStamp = 0;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	78da      	ldrb	r2, [r3, #3]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	7c9b      	ldrb	r3, [r3, #18]
 80026b2:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 80026b4:	7ffb      	ldrb	r3, [r7, #31]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d103      	bne.n	80026c2 <SetMeasurementData+0x4e>

		iteration = 1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80026c0:	e002      	b.n	80026c8 <SetMeasurementData+0x54>
	else
		iteration = ActiveResults;
 80026c2:	7ffb      	ldrb	r3, [r7, #31]
 80026c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (i = 0; i < iteration; i++) {
 80026c8:	2300      	movs	r3, #0
 80026ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80026ce:	e035      	b.n	800273c <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 80026d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	3308      	adds	r3, #8
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 80026e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026e8:	224c      	movs	r2, #76	; 0x4c
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	3310      	adds	r3, #16
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	4413      	add	r3, r2
 80026f4:	3304      	adds	r3, #4
 80026f6:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 80026f8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d113      	bne.n	8002728 <SetMeasurementData+0xb4>
			Status = SetTargetData(Dev, ActiveResults,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	7918      	ldrb	r0, [r3, #4]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	7c1b      	ldrb	r3, [r3, #16]
 8002708:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 800270c:	7ff9      	ldrb	r1, [r7, #31]
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	9202      	str	r2, [sp, #8]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	9201      	str	r2, [sp, #4]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	4623      	mov	r3, r4
 800271a:	4602      	mov	r2, r0
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f7ff fcdf 	bl	80020e0 <SetTargetData>
 8002722:	4603      	mov	r3, r0
 8002724:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	for (i = 0; i < iteration; i++) {
 8002732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002736:	3301      	adds	r3, #1
 8002738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800273c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002740:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002744:	429a      	cmp	r2, r3
 8002746:	d3c3      	bcc.n	80026d0 <SetMeasurementData+0x5c>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	f893 243f 	ldrb.w	r2, [r3, #1087]	; 0x43f
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002754:	3321      	adds	r3, #33	; 0x21
 8002756:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002758:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800275c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002760:	e01f      	b.n	80027a2 <SetMeasurementData+0x12e>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8002762:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002766:	6a3a      	ldr	r2, [r7, #32]
 8002768:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800276c:	3308      	adds	r3, #8
 800276e:	2100      	movs	r1, #0
 8002770:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002778:	6a3a      	ldr	r2, [r7, #32]
 800277a:	4413      	add	r3, r2
 800277c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002780:	3318      	adds	r3, #24
 8002782:	22ff      	movs	r2, #255	; 0xff
 8002784:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8002786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800278a:	6a3a      	ldr	r2, [r7, #32]
 800278c:	4413      	add	r3, r2
 800278e:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002792:	331c      	adds	r3, #28
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800279c:	3301      	adds	r3, #1
 800279e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80027a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d9db      	bls.n	8002762 <SetMeasurementData+0xee>
	}

	return Status;
 80027aa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	372c      	adds	r7, #44	; 0x2c
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd90      	pop	{r4, r7, pc}

080027b6 <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3318      	adds	r3, #24
 80027c8:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80027d0:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 80027d2:	225c      	movs	r2, #92	; 0x5c
 80027d4:	21ff      	movs	r1, #255	; 0xff
 80027d6:	6838      	ldr	r0, [r7, #0]
 80027d8:	f011 fc8c 	bl	80140f4 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	2102      	movs	r1, #2
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f001 fee7 	bl	80045b4 <VL53LX_get_device_results>
 80027e6:	4603      	mov	r3, r0
 80027e8:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	68f9      	ldr	r1, [r7, #12]
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ff40 	bl	8002674 <SetMeasurementData>
 80027f4:	4603      	mov	r3, r0
 80027f6:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 80027f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <VL53LX_PerformRefSpadManagement>:
	return Status;
}


VL53LX_Error VL53LX_PerformRefSpadManagement(VL53LX_DEV Dev)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b090      	sub	sp, #64	; 0x40
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800280c:	2300      	movs	r3, #0
 800280e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8002812:	f240 3305 	movw	r3, #773	; 0x305
 8002816:	81bb      	strh	r3, [r7, #12]
	VL53LX_customer_nvm_managed_t *pc;
	VL53LX_DistanceModes DistanceMode;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3318      	adds	r3, #24
 800281c:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 800281e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002820:	3348      	adds	r3, #72	; 0x48
 8002822:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53LX_ERROR_NONE) {
 8002824:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002828:	2b00      	cmp	r3, #0
 800282a:	d11c      	bne.n	8002866 <VL53LX_PerformRefSpadManagement+0x62>
		DistanceMode = VL53LXDevDataGet(Dev,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002832:	3320      	adds	r3, #32
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.DistanceMode);
		Status = VL53LX_run_ref_spad_char(Dev, &RawStatus);
 800283a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800283e:	4619      	mov	r1, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f8e3 	bl	8002a0c <VL53LX_run_ref_spad_char>
 8002846:	4603      	mov	r3, r0
 8002848:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53LX_ERROR_NONE)
 800284c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002850:	2b00      	cmp	r3, #0
 8002852:	d108      	bne.n	8002866 <VL53LX_PerformRefSpadManagement+0x62>
			Status = VL53LX_SetDistanceMode(Dev, DistanceMode);
 8002854:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002858:	4619      	mov	r1, r3
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff fa13 	bl	8001c86 <VL53LX_SetDistanceMode>
 8002860:	4603      	mov	r3, r0
 8002862:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8002866:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800286a:	f113 0f1d 	cmn.w	r3, #29
 800286e:	d14e      	bne.n	800290e <VL53LX_PerformRefSpadManagement+0x10a>

		Status = VL53LX_read_nvm_raw_data(Dev,
 8002870:	f107 0310 	add.w	r3, r7, #16
 8002874:	2206      	movs	r2, #6
 8002876:	2128      	movs	r1, #40	; 0x28
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f00c f991 	bl	800eba0 <VL53LX_read_nvm_raw_data>
 800287e:	4603      	mov	r3, r0
 8002880:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53LX_ERROR_NONE)
 8002884:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <VL53LX_PerformRefSpadManagement+0x9c>
			Status = VL53LX_WriteMulti(Dev,
 800288c:	f107 020c 	add.w	r2, r7, #12
 8002890:	2302      	movs	r3, #2
 8002892:	2114      	movs	r1, #20
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f00e f9c7 	bl	8010c28 <VL53LX_WriteMulti>
 800289a:	4603      	mov	r3, r0
 800289c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53LX_ERROR_NONE) {
 80028a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d105      	bne.n	80028b4 <VL53LX_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 80028a8:	7b3a      	ldrb	r2, [r7, #12]
 80028aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ac:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 80028ae:	7b7a      	ldrb	r2, [r7, #13]
 80028b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b2:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	3310      	adds	r3, #16
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c



		if (Status == VL53LX_ERROR_NONE)
 80028bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d108      	bne.n	80028d6 <VL53LX_PerformRefSpadManagement+0xd2>
			Status = VL53LX_WriteMulti(Dev,
 80028c4:	2306      	movs	r3, #6
 80028c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c8:	210d      	movs	r1, #13
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f00e f9ac 	bl	8010c28 <VL53LX_WriteMulti>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53LX_ERROR_NONE) {
 80028d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d117      	bne.n	800290e <VL53LX_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e4:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	785a      	ldrb	r2, [r3, #1]
 80028ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ec:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	789a      	ldrb	r2, [r3, #2]
 80028f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f4:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	78da      	ldrb	r2, [r3, #3]
 80028fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fc:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002900:	791a      	ldrb	r2, [r3, #4]
 8002902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002904:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8002906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002908:	795a      	ldrb	r2, [r3, #5]
 800290a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290c:	715a      	strb	r2, [r3, #5]
		}

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800290e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8002912:	4618      	mov	r0, r3
 8002914:	3740      	adds	r7, #64	; 0x40
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <VL53LX_SmudgeCorrectionEnable>:


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 800292c:	2300      	movs	r3, #0
 800292e:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 8002930:	2300      	movs	r3, #0
 8002932:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 8002934:	2300      	movs	r3, #0
 8002936:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	2b03      	cmp	r3, #3
 800293c:	d84a      	bhi.n	80029d4 <VL53LX_SmudgeCorrectionEnable+0xb8>
 800293e:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <VL53LX_SmudgeCorrectionEnable+0x28>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	08002955 	.word	0x08002955
 8002948:	08002975 	.word	0x08002975
 800294c:	08002995 	.word	0x08002995
 8002950:	080029b5 	.word	0x080029b5
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f003 fd92 	bl	800647e <VL53LX_dynamic_xtalk_correction_disable>
 800295a:	4603      	mov	r3, r0
 800295c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f003 fda4 	bl	80064ac <VL53LX_dynamic_xtalk_correction_apply_disable>
 8002964:	4603      	mov	r3, r0
 8002966:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f003 fdcd 	bl	8006508 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 800296e:	4603      	mov	r3, r0
 8002970:	733b      	strb	r3, [r7, #12]
		break;
 8002972:	e032      	b.n	80029da <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f003 fd6b 	bl	8006450 <VL53LX_dynamic_xtalk_correction_enable>
 800297a:	4603      	mov	r3, r0
 800297c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f003 fdd9 	bl	8006536 <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002984:	4603      	mov	r3, r0
 8002986:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f003 fdbd 	bl	8006508 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 800298e:	4603      	mov	r3, r0
 8002990:	733b      	strb	r3, [r7, #12]
		break;
 8002992:	e022      	b.n	80029da <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f003 fd5b 	bl	8006450 <VL53LX_dynamic_xtalk_correction_enable>
 800299a:	4603      	mov	r3, r0
 800299c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f003 fdc9 	bl	8006536 <VL53LX_dynamic_xtalk_correction_apply_enable>
 80029a4:	4603      	mov	r3, r0
 80029a6:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f003 fd96 	bl	80064da <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 80029ae:	4603      	mov	r3, r0
 80029b0:	733b      	strb	r3, [r7, #12]
		break;
 80029b2:	e012      	b.n	80029da <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f003 fd4b 	bl	8006450 <VL53LX_dynamic_xtalk_correction_enable>
 80029ba:	4603      	mov	r3, r0
 80029bc:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f003 fd74 	bl	80064ac <VL53LX_dynamic_xtalk_correction_apply_disable>
 80029c4:	4603      	mov	r3, r0
 80029c6:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f003 fd9d 	bl	8006508 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 80029ce:	4603      	mov	r3, r0
 80029d0:	733b      	strb	r3, [r7, #12]
		break;
 80029d2:	e002      	b.n	80029da <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80029d4:	23fc      	movs	r3, #252	; 0xfc
 80029d6:	73fb      	strb	r3, [r7, #15]
		break;
 80029d8:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 80029da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10d      	bne.n	80029fe <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 80029e2:	7bbb      	ldrb	r3, [r7, #14]
 80029e4:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 80029ee:	7b7b      	ldrb	r3, [r7, #13]
 80029f0:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 80029f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 80029fa:	7b3b      	ldrb	r3, [r7, #12]
 80029fc:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80029fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop

08002a0c <VL53LX_run_ref_spad_char>:


VL53LX_Error VL53LX_run_ref_spad_char(
	VL53LX_DEV        Dev,
	VL53LX_Error     *pcal_status)
{
 8002a0c:	b5b0      	push	{r4, r5, r7, lr}
 8002a0e:	b08c      	sub	sp, #48	; 0x30
 8002a10:	af04      	add	r7, sp, #16
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3318      	adds	r3, #24
 8002a1e:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53LX_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a26:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002a28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d104      	bne.n	8002a3a <VL53LX_run_ref_spad_char+0x2e>
		status = VL53LX_enable_powerforce(Dev);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f005 fd62 	bl	80084fa <VL53LX_enable_powerforce>
 8002a36:	4603      	mov	r3, r0
 8002a38:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 8002a3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d117      	bne.n	8002a72 <VL53LX_run_ref_spad_char+0x66>
		status =
		VL53LX_set_ref_spad_char_config(
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	7858      	ldrb	r0, [r3, #1]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	685c      	ldr	r4, [r3, #4]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	891d      	ldrh	r5, [r3, #8]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	899b      	ldrh	r3, [r3, #12]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	8952      	ldrh	r2, [r2, #10]
 8002a56:	69b9      	ldr	r1, [r7, #24]
 8002a58:	f8b1 12de 	ldrh.w	r1, [r1, #734]	; 0x2de
 8002a5c:	9102      	str	r1, [sp, #8]
 8002a5e:	9201      	str	r2, [sp, #4]
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	462b      	mov	r3, r5
 8002a64:	4622      	mov	r2, r4
 8002a66:	4601      	mov	r1, r0
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f007 fb71 	bl	800a150 <VL53LX_set_ref_spad_char_config>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53LX_ERROR_NONE)
 8002a72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d107      	bne.n	8002a8a <VL53LX_run_ref_spad_char+0x7e>
		status = VL53LX_run_device_test(
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f890 	bl	8002ba6 <VL53LX_run_device_test>
 8002a86:	4603      	mov	r3, r0
 8002a88:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53LX_ERROR_NONE)
 8002a8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d108      	bne.n	8002aa4 <VL53LX_run_ref_spad_char+0x98>
		status =
		VL53LX_ReadMulti(
 8002a92:	f107 020c 	add.w	r2, r7, #12
 8002a96:	2302      	movs	r3, #2
 8002a98:	21d9      	movs	r1, #217	; 0xd9
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f00e f8fa 	bl	8010c94 <VL53LX_ReadMulti>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53LX_ERROR_NONE) {
 8002aa4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10a      	bne.n	8002ac2 <VL53LX_run_ref_spad_char+0xb6>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8002aac:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8002ab4:	331f      	adds	r3, #31
 8002ab6:	701a      	strb	r2, [r3, #0]
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8002ab8:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8002ac0:	701a      	strb	r2, [r3, #0]
	}



	if (status == VL53LX_ERROR_NONE)
 8002ac2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d108      	bne.n	8002adc <VL53LX_run_ref_spad_char+0xd0>
		status =
			VL53LX_WriteMulti(
 8002aca:	f107 020c 	add.w	r2, r7, #12
 8002ace:	2302      	movs	r3, #2
 8002ad0:	2114      	movs	r1, #20
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f00e f8a8 	bl	8010c28 <VL53LX_WriteMulti>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8002adc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d107      	bne.n	8002af4 <VL53LX_run_ref_spad_char+0xe8>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8002ae4:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8002aec:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53LX_ERROR_NONE)
 8002af4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d108      	bne.n	8002b0e <VL53LX_run_ref_spad_char+0x102>
		status =
			VL53LX_ReadMulti(
 8002afc:	f107 020c 	add.w	r2, r7, #12
 8002b00:	2306      	movs	r3, #6
 8002b02:	21ac      	movs	r1, #172	; 0xac
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f00e f8c5 	bl	8010c94 <VL53LX_ReadMulti>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53LX_ERROR_NONE)
 8002b0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d108      	bne.n	8002b28 <VL53LX_run_ref_spad_char+0x11c>
		status =
			VL53LX_WriteMulti(
 8002b16:	f107 020c 	add.w	r2, r7, #12
 8002b1a:	2306      	movs	r3, #6
 8002b1c:	210d      	movs	r1, #13
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f00e f882 	bl	8010c28 <VL53LX_WriteMulti>
 8002b24:	4603      	mov	r3, r0
 8002b26:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53LX_ERROR_NONE) {
 8002b28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d117      	bne.n	8002b60 <VL53LX_run_ref_spad_char+0x154>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8002b30:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8002b38:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8002b40:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8002b50:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8002b58:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53LX_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53LX_ERROR_NONE) {
 8002b60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d114      	bne.n	8002b92 <VL53LX_run_ref_spad_char+0x186>

		switch (pdev->sys_results.result__range_status) {
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d00c      	beq.n	8002b8c <VL53LX_run_ref_spad_char+0x180>
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	dc0e      	bgt.n	8002b94 <VL53LX_run_ref_spad_char+0x188>
 8002b76:	2b0e      	cmp	r3, #14
 8002b78:	d002      	beq.n	8002b80 <VL53LX_run_ref_spad_char+0x174>
 8002b7a:	2b0f      	cmp	r3, #15
 8002b7c:	d003      	beq.n	8002b86 <VL53LX_run_ref_spad_char+0x17a>
 8002b7e:	e009      	b.n	8002b94 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53LX_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8002b80:	23e4      	movs	r3, #228	; 0xe4
 8002b82:	77fb      	strb	r3, [r7, #31]
			break;
 8002b84:	e006      	b.n	8002b94 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8002b86:	23e3      	movs	r3, #227	; 0xe3
 8002b88:	77fb      	strb	r3, [r7, #31]
			break;
 8002b8a:	e003      	b.n	8002b94 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8002b8c:	23e2      	movs	r3, #226	; 0xe2
 8002b8e:	77fb      	strb	r3, [r7, #31]
			break;
 8002b90:	e000      	b.n	8002b94 <VL53LX_run_ref_spad_char+0x188>
		}
	}
 8002b92:	bf00      	nop



	*pcal_status = status;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	7ffa      	ldrb	r2, [r7, #31]
 8002b98:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8002b9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bdb0      	pop	{r4, r5, r7, pc}

08002ba6 <VL53LX_run_device_test>:


VL53LX_Error VL53LX_run_device_test(
	VL53LX_DEV             Dev,
	VL53LX_DeviceTestMode  device_test_mode)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b086      	sub	sp, #24
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3318      	adds	r3, #24
 8002bba:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002bc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d108      	bne.n	8002bda <VL53LX_run_device_test+0x34>
		status =
			VL53LX_RdByte(
 8002bc8:	f107 030b 	add.w	r3, r7, #11
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2130      	movs	r1, #48	; 0x30
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f00e f8f1 	bl	8010db8 <VL53LX_RdByte>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53LX_ERROR_NONE)
 8002bda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <VL53LX_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8002be2:	7afa      	ldrb	r2, [r7, #11]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a


	if (status == VL53LX_ERROR_NONE)
 8002bea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <VL53LX_run_device_test+0x5a>
		status = VL53LX_start_test(
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f005 fc03 	bl	8008402 <VL53LX_start_test>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53LX_ERROR_NONE)
 8002c00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d104      	bne.n	8002c12 <VL53LX_run_device_test+0x6c>
		status = VL53LX_wait_for_test_completion(Dev);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f00d fc4d 	bl	80104a8 <VL53LX_wait_for_test_completion>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8002c12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d108      	bne.n	8002c2c <VL53LX_run_device_test+0x86>
		status =
			VL53LX_ReadMulti(
 8002c1a:	f107 020c 	add.w	r2, r7, #12
 8002c1e:	2302      	movs	r3, #2
 8002c20:	2189      	movs	r1, #137	; 0x89
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f00e f836 	bl	8010c94 <VL53LX_ReadMulti>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8002c2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d107      	bne.n	8002c44 <VL53LX_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8002c34:	7b3a      	ldrb	r2, [r7, #12]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		pdev->sys_results.result__report_status = comms_buffer[1];
 8002c3c:	7b7a      	ldrb	r2, [r7, #13]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
	}



	pdev->sys_results.result__range_status &=
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53LX_ERROR_NONE) {
 8002c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d108      	bne.n	8002c70 <VL53LX_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53LX_ERROR_NONE)
 8002c5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d104      	bne.n	8002c70 <VL53LX_run_device_test+0xca>
			status = VL53LX_clear_interrupt(Dev);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f005 fc6b 	bl	8008542 <VL53LX_clear_interrupt>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53LX_ERROR_NONE)
 8002c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d105      	bne.n	8002c84 <VL53LX_run_device_test+0xde>
		status =
			VL53LX_start_test(
 8002c78:	2100      	movs	r1, #0
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f005 fbc1 	bl	8008402 <VL53LX_start_test>
 8002c80:	4603      	mov	r3, r0
 8002c82:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8002c84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	785b      	ldrb	r3, [r3, #1]
 8002ca2:	2b21      	cmp	r3, #33	; 0x21
 8002ca4:	d006      	beq.n	8002cb4 <select_offset_per_vcsel+0x24>
 8002ca6:	2b21      	cmp	r3, #33	; 0x21
 8002ca8:	dc2a      	bgt.n	8002d00 <select_offset_per_vcsel+0x70>
 8002caa:	2b1b      	cmp	r3, #27
 8002cac:	d01b      	beq.n	8002ce6 <select_offset_per_vcsel+0x56>
 8002cae:	2b1e      	cmp	r3, #30
 8002cb0:	d00c      	beq.n	8002ccc <select_offset_per_vcsel+0x3c>
 8002cb2:	e025      	b.n	8002d00 <select_offset_per_vcsel+0x70>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	817b      	strh	r3, [r7, #10]
		break;
 8002cca:	e02b      	b.n	8002d24 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002cde:	3306      	adds	r3, #6
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	817b      	strh	r3, [r7, #10]
		break;
 8002ce4:	e01e      	b.n	8002d24 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002cec:	3308      	adds	r3, #8
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002cf8:	330a      	adds	r3, #10
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	817b      	strh	r3, [r7, #10]
		break;
 8002cfe:	e011      	b.n	8002d24 <select_offset_per_vcsel+0x94>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002d06:	3308      	adds	r3, #8
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002d12:	330a      	adds	r3, #10
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8002d18:	23fc      	movs	r3, #252	; 0xfc
 8002d1a:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	801a      	strh	r2, [r3, #0]
		break;
 8002d22:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002d2a:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 8002d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10b      	bne.n	8002d4c <select_offset_per_vcsel+0xbc>
		*poffset = (isc & 0x01) ? tA : tB;
 8002d34:	7a7b      	ldrb	r3, [r7, #9]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <select_offset_per_vcsel+0xb4>
 8002d3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d42:	e001      	b.n	8002d48 <select_offset_per_vcsel+0xb8>
 8002d44:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	8013      	strh	r3, [r2, #0]

	return status;
 8002d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8002d5c:	b490      	push	{r4, r7}
 8002d5e:	b08a      	sub	sp, #40	; 0x28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	4611      	mov	r1, r2
 8002d68:	461a      	mov	r2, r3
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	71fb      	strb	r3, [r7, #7]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002d8e:	e021      	b.n	8002dd4 <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8002d90:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	0052      	lsls	r2, r2, #1
 8002d9e:	441a      	add	r2, r3
 8002da0:	00d3      	lsls	r3, r2, #3
 8002da2:	461a      	mov	r2, r3
 8002da4:	460b      	mov	r3, r1
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	440b      	add	r3, r1
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	4413      	add	r3, r2
 8002dae:	4423      	add	r3, r4
 8002db0:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8002db4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8002db8:	6a3a      	ldr	r2, [r7, #32]
 8002dba:	4413      	add	r3, r2
 8002dbc:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8002dbe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	3206      	adds	r2, #6
 8002dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	4413      	add	r3, r2
 8002dcc:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8002dce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002dd4:	79bb      	ldrb	r3, [r7, #6]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d3d8      	bcc.n	8002d90 <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d047      	beq.n	8002e74 <vl53lx_diff_histo_stddev+0x118>
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d044      	beq.n	8002e74 <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002df2:	e03a      	b.n	8002e6a <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8002df4:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	0052      	lsls	r2, r2, #1
 8002e02:	441a      	add	r2, r3
 8002e04:	00d3      	lsls	r3, r2, #3
 8002e06:	461a      	mov	r2, r3
 8002e08:	460b      	mov	r3, r1
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	440b      	add	r3, r1
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	4413      	add	r3, r2
 8002e12:	4423      	add	r3, r4
 8002e14:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8002e18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002e1c:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e24:	fb02 f203 	mul.w	r2, r2, r3
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e2e:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8002e30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	3206      	adds	r2, #6
 8002e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e3e:	fb02 f203 	mul.w	r2, r2, r3
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e48:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	69b9      	ldr	r1, [r7, #24]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8002e54:	69b8      	ldr	r0, [r7, #24]
 8002e56:	6979      	ldr	r1, [r7, #20]
 8002e58:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	441a      	add	r2, r3
 8002e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e62:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8002e64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e66:	3301      	adds	r3, #1
 8002e68:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e6a:	79bb      	ldrb	r3, [r7, #6]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d3bf      	bcc.n	8002df4 <vl53lx_diff_histo_stddev+0x98>
	}
}
 8002e74:	bf00      	nop
 8002e76:	3728      	adds	r7, #40	; 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc90      	pop	{r4, r7}
 8002e7c:	4770      	bx	lr

08002e7e <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 8002e7e:	b5b0      	push	{r4, r5, r7, lr}
 8002e80:	b08c      	sub	sp, #48	; 0x30
 8002e82:	af02      	add	r7, sp, #8
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3318      	adds	r3, #24
 8002e8c:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8002eae:	2318      	movs	r3, #24
 8002eb0:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8002eb2:	f107 0314 	add.w	r3, r7, #20
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f248 018f 	movw	r1, #32911	; 0x808f
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f002 fbd3 	bl	8005668 <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8002ec2:	f107 0310 	add.w	r3, r7, #16
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f248 018e 	movw	r1, #32910	; 0x808e
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f002 fbcb 	bl	8005668 <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002ed8:	330d      	adds	r3, #13
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f040 811a 	bne.w	8003116 <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8002efc:	7efb      	ldrb	r3, [r7, #27]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	7eba      	ldrb	r2, [r7, #26]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f0e:	330c      	adds	r3, #12
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <vl53lx_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f26:	e004      	b.n	8002f32 <vl53lx_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8002f32:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8002f36:	7efb      	ldrb	r3, [r7, #27]
 8002f38:	69f8      	ldr	r0, [r7, #28]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	0052      	lsls	r2, r2, #1
 8002f3e:	441a      	add	r2, r3
 8002f40:	0153      	lsls	r3, r2, #5
 8002f42:	461a      	mov	r2, r3
 8002f44:	460b      	mov	r3, r1
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	440b      	add	r3, r1
 8002f4a:	019b      	lsls	r3, r3, #6
 8002f4c:	4413      	add	r3, r2
 8002f4e:	4403      	add	r3, r0
 8002f50:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	dd0c      	ble.n	8002f74 <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 8002f5a:	7e79      	ldrb	r1, [r7, #25]
 8002f5c:	7efa      	ldrb	r2, [r7, #27]
 8002f5e:	f107 030c 	add.w	r3, r7, #12
 8002f62:	9301      	str	r3, [sp, #4]
 8002f64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	6839      	ldr	r1, [r7, #0]
 8002f6e:	69f8      	ldr	r0, [r7, #28]
 8002f70:	f7ff fef4 	bl	8002d5c <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	db23      	blt.n	8002fc4 <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f82:	3310      	adds	r3, #16
 8002f84:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f011 f8b2 	bl	80140f4 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f96:	330c      	adds	r3, #12
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]

			recom_been_reset = 1;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8002fa2:	7efb      	ldrb	r3, [r7, #27]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d106      	bne.n	8002fb6 <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002fae:	330d      	adds	r3, #13
 8002fb0:	2206      	movs	r2, #6
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e034      	b.n	8003020 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002fbc:	330d      	adds	r3, #13
 8002fbe:	2207      	movs	r2, #7
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	e02d      	b.n	8003020 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002fca:	330c      	adds	r3, #12
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002fd6:	e01e      	b.n	8003016 <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8002fd8:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8002fdc:	7e39      	ldrb	r1, [r7, #24]
 8002fde:	7efb      	ldrb	r3, [r7, #27]
 8002fe0:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	3006      	adds	r0, #6
 8002fe8:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8002fec:	69f8      	ldr	r0, [r7, #28]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	0052      	lsls	r2, r2, #1
 8002ff2:	441a      	add	r2, r3
 8002ff4:	00d3      	lsls	r3, r2, #3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	440b      	add	r3, r1
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	4413      	add	r3, r2
 8003002:	442b      	add	r3, r5
 8003004:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8003008:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 800300c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003010:	3301      	adds	r3, #1
 8003012:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003016:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800301a:	7ebb      	ldrb	r3, [r7, #26]
 800301c:	429a      	cmp	r2, r3
 800301e:	d3db      	bcc.n	8002fd8 <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003026:	330c      	adds	r3, #12
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	3b01      	subs	r3, #1
 8003030:	429a      	cmp	r2, r3
 8003032:	d109      	bne.n	8003048 <vl53lx_histo_merge+0x1ca>
 8003034:	7efb      	ldrb	r3, [r7, #27]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d106      	bne.n	8003048 <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003040:	330c      	adds	r3, #12
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e00e      	b.n	8003066 <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 8003048:	7efb      	ldrb	r3, [r7, #27]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d10b      	bne.n	8003066 <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003054:	330c      	adds	r3, #12
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	b2da      	uxtb	r2, r3
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003062:	330c      	adds	r3, #12
 8003064:	701a      	strb	r2, [r3, #0]

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8003066:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800306a:	2b01      	cmp	r3, #1
 800306c:	d102      	bne.n	8003074 <vl53lx_histo_merge+0x1f6>
 800306e:	7efb      	ldrb	r3, [r7, #27]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d069      	beq.n	8003148 <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800307a:	330d      	adds	r3, #13
 800307c:	781b      	ldrb	r3, [r3, #0]
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 800307e:	2b00      	cmp	r3, #0
 8003080:	d162      	bne.n	8003148 <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 8003082:	2300      	movs	r3, #0
 8003084:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003086:	e008      	b.n	800309a <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 8003088:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	3206      	adds	r2, #6
 800308e:	2100      	movs	r1, #0
 8003090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8003094:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003096:	3301      	adds	r3, #1
 8003098:	84fb      	strh	r3, [r7, #38]	; 0x26
 800309a:	7ebb      	ldrb	r3, [r7, #26]
 800309c:	b29b      	uxth	r3, r3
 800309e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d3f1      	bcc.n	8003088 <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 80030a4:	2300      	movs	r3, #0
 80030a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80030a8:	e02f      	b.n	800310a <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80030b0:	e023      	b.n	80030fa <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 80030b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	3206      	adds	r2, #6
 80030b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 80030bc:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80030c0:	7efb      	ldrb	r3, [r7, #27]
 80030c2:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 80030c4:	69fc      	ldr	r4, [r7, #28]
 80030c6:	461a      	mov	r2, r3
 80030c8:	0052      	lsls	r2, r2, #1
 80030ca:	441a      	add	r2, r3
 80030cc:	00d3      	lsls	r3, r2, #3
 80030ce:	461a      	mov	r2, r3
 80030d0:	460b      	mov	r3, r1
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	440b      	add	r3, r1
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	4413      	add	r3, r2
 80030da:	442b      	add	r3, r5
 80030dc:	f203 7304 	addw	r3, r3, #1796	; 0x704
 80030e0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 80030e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80030e6:	18c1      	adds	r1, r0, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	3206      	adds	r2, #6
 80030ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 80030f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80030f4:	3301      	adds	r3, #1
 80030f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80030fa:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	429a      	cmp	r2, r3
 8003102:	dbd6      	blt.n	80030b2 <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 8003104:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003106:	3301      	adds	r3, #1
 8003108:	84fb      	strh	r3, [r7, #38]	; 0x26
 800310a:	7ebb      	ldrb	r3, [r7, #26]
 800310c:	b29b      	uxth	r3, r3
 800310e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003110:	429a      	cmp	r2, r3
 8003112:	d3ca      	bcc.n	80030aa <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8003114:	e018      	b.n	8003148 <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800311c:	330d      	adds	r3, #13
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	3b01      	subs	r3, #1
 8003122:	b2da      	uxtb	r2, r3
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800312a:	330d      	adds	r3, #13
 800312c:	701a      	strb	r2, [r3, #0]
		if (pdev->pos_before_next_recom == 255)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003134:	330d      	adds	r3, #13
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2bff      	cmp	r3, #255	; 0xff
 800313a:	d105      	bne.n	8003148 <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003142:	330d      	adds	r3, #13
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
}
 8003148:	bf00      	nop
 800314a:	3728      	adds	r7, #40	; 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bdb0      	pop	{r4, r5, r7, pc}

08003150 <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b0c6      	sub	sp, #280	; 0x118
 8003154:	af00      	add	r7, sp, #0
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 800315a:	2300      	movs	r3, #0
 800315c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8003166:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800316a:	2b00      	cmp	r3, #0
 800316c:	d108      	bne.n	8003180 <VL53LX_load_patch+0x30>
		status = VL53LX_WrByte(Dev,
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	2200      	movs	r2, #0
 8003172:	2185      	movs	r1, #133	; 0x85
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	f00d fdc3 	bl	8010d00 <VL53LX_WrByte>
 800317a:	4603      	mov	r3, r0
 800317c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003180:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003184:	2b00      	cmp	r3, #0
 8003186:	d103      	bne.n	8003190 <VL53LX_load_patch+0x40>
		VL53LX_enable_powerforce(Dev);
 8003188:	1d3b      	adds	r3, r7, #4
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	f005 f9b5 	bl	80084fa <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 8003190:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8003194:	1d3b      	adds	r3, r7, #4
 8003196:	f248 018c 	movw	r1, #32908	; 0x808c
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	f002 fa64 	bl	8005668 <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 80031a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d81b      	bhi.n	80031e0 <VL53LX_load_patch+0x90>
 80031a8:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <VL53LX_load_patch+0x60>)
 80031aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ae:	bf00      	nop
 80031b0:	080031c1 	.word	0x080031c1
 80031b4:	080031c9 	.word	0x080031c9
 80031b8:	080031d1 	.word	0x080031d1
 80031bc:	080031d9 	.word	0x080031d9
	case 0:
		patch_power = 0x00;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80031c6:	e00e      	b.n	80031e6 <VL53LX_load_patch+0x96>
	case 1:
		patch_power = 0x10;
 80031c8:	2310      	movs	r3, #16
 80031ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80031ce:	e00a      	b.n	80031e6 <VL53LX_load_patch+0x96>
	case 2:
		patch_power = 0x20;
 80031d0:	2320      	movs	r3, #32
 80031d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80031d6:	e006      	b.n	80031e6 <VL53LX_load_patch+0x96>
	case 3:
		patch_power = 0x40;
 80031d8:	2340      	movs	r3, #64	; 0x40
 80031da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80031de:	e002      	b.n	80031e6 <VL53LX_load_patch+0x96>
	default:
		patch_power = 0x00;
 80031e0:	2300      	movs	r3, #0
 80031e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 80031e6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d125      	bne.n	800323a <VL53LX_load_patch+0xea>

		comms_buffer[0] = 0x29;
 80031ee:	f107 030c 	add.w	r3, r7, #12
 80031f2:	2229      	movs	r2, #41	; 0x29
 80031f4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80031f6:	f107 030c 	add.w	r3, r7, #12
 80031fa:	22c9      	movs	r2, #201	; 0xc9
 80031fc:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 80031fe:	f107 030c 	add.w	r3, r7, #12
 8003202:	220e      	movs	r2, #14
 8003204:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8003206:	f107 030c 	add.w	r3, r7, #12
 800320a:	2240      	movs	r2, #64	; 0x40
 800320c:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800320e:	f107 030c 	add.w	r3, r7, #12
 8003212:	2228      	movs	r2, #40	; 0x28
 8003214:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8003216:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800321a:	b2da      	uxtb	r2, r3
 800321c:	f107 030c 	add.w	r3, r7, #12
 8003220:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 8003222:	f107 020c 	add.w	r2, r7, #12
 8003226:	1d38      	adds	r0, r7, #4
 8003228:	2306      	movs	r3, #6
 800322a:	f240 4176 	movw	r1, #1142	; 0x476
 800322e:	6800      	ldr	r0, [r0, #0]
 8003230:	f00d fcfa 	bl	8010c28 <VL53LX_WriteMulti>
 8003234:	4603      	mov	r3, r0
 8003236:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 800323a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800323e:	2b00      	cmp	r3, #0
 8003240:	d123      	bne.n	800328a <VL53LX_load_patch+0x13a>
		comms_buffer[0] = 0x03;
 8003242:	f107 030c 	add.w	r3, r7, #12
 8003246:	2203      	movs	r2, #3
 8003248:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800324a:	f107 030c 	add.w	r3, r7, #12
 800324e:	226d      	movs	r2, #109	; 0x6d
 8003250:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8003252:	f107 030c 	add.w	r3, r7, #12
 8003256:	2203      	movs	r2, #3
 8003258:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800325a:	f107 030c 	add.w	r3, r7, #12
 800325e:	226f      	movs	r2, #111	; 0x6f
 8003260:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8003262:	f107 030c 	add.w	r3, r7, #12
 8003266:	2207      	movs	r2, #7
 8003268:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 800326a:	f107 030c 	add.w	r3, r7, #12
 800326e:	2229      	movs	r2, #41	; 0x29
 8003270:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 8003272:	f107 020c 	add.w	r2, r7, #12
 8003276:	1d38      	adds	r0, r7, #4
 8003278:	2306      	movs	r3, #6
 800327a:	f240 4196 	movw	r1, #1174	; 0x496
 800327e:	6800      	ldr	r0, [r0, #0]
 8003280:	f00d fcd2 	bl	8010c28 <VL53LX_WriteMulti>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 800328a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800328e:	2b00      	cmp	r3, #0
 8003290:	d113      	bne.n	80032ba <VL53LX_load_patch+0x16a>
		comms_buffer[0] = 0x00;
 8003292:	f107 030c 	add.w	r3, r7, #12
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800329a:	f107 030c 	add.w	r3, r7, #12
 800329e:	2207      	movs	r2, #7
 80032a0:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 80032a2:	f107 020c 	add.w	r2, r7, #12
 80032a6:	1d38      	adds	r0, r7, #4
 80032a8:	2302      	movs	r3, #2
 80032aa:	f240 4172 	movw	r1, #1138	; 0x472
 80032ae:	6800      	ldr	r0, [r0, #0]
 80032b0:	f00d fcba 	bl	8010c28 <VL53LX_WriteMulti>
 80032b4:	4603      	mov	r3, r0
 80032b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 80032ba:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d113      	bne.n	80032ea <VL53LX_load_patch+0x19a>
		comms_buffer[0] = 0x00;
 80032c2:	f107 030c 	add.w	r3, r7, #12
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80032ca:	f107 030c 	add.w	r3, r7, #12
 80032ce:	2207      	movs	r2, #7
 80032d0:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 80032d2:	f107 020c 	add.w	r2, r7, #12
 80032d6:	1d38      	adds	r0, r7, #4
 80032d8:	2302      	movs	r3, #2
 80032da:	f240 4174 	movw	r1, #1140	; 0x474
 80032de:	6800      	ldr	r0, [r0, #0]
 80032e0:	f00d fca2 	bl	8010c28 <VL53LX_WriteMulti>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 80032ea:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <VL53LX_load_patch+0x1b6>
		status = VL53LX_WrByte(Dev,
 80032f2:	1d3b      	adds	r3, r7, #4
 80032f4:	2201      	movs	r2, #1
 80032f6:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	f00d fd00 	bl	8010d00 <VL53LX_WrByte>
 8003300:	4603      	mov	r3, r0
 8003302:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 8003306:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800330a:	2b00      	cmp	r3, #0
 800330c:	d108      	bne.n	8003320 <VL53LX_load_patch+0x1d0>
		status = VL53LX_WrByte(Dev,
 800330e:	1d3b      	adds	r3, r7, #4
 8003310:	2201      	movs	r2, #1
 8003312:	2185      	movs	r1, #133	; 0x85
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	f00d fcf3 	bl	8010d00 <VL53LX_WrByte>
 800331a:	4603      	mov	r3, r0
 800331c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8003320:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8003324:	4618      	mov	r0, r3
 8003326:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop

08003330 <VL53LX_unload_patch>:

VL53LX_Error VL53LX_unload_patch(VL53LX_DEV Dev)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE)
 800333c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d106      	bne.n	8003352 <VL53LX_unload_patch+0x22>
		status = VL53LX_WrByte(Dev,
 8003344:	2200      	movs	r2, #0
 8003346:	2185      	movs	r1, #133	; 0x85
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f00d fcd9 	bl	8010d00 <VL53LX_WrByte>
 800334e:	4603      	mov	r3, r0
 8003350:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d102      	bne.n	8003360 <VL53LX_unload_patch+0x30>
		VL53LX_disable_powerforce(Dev);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f005 f8df 	bl	800851e <VL53LX_disable_powerforce>

	if (status == VL53LX_ERROR_NONE)
 8003360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d107      	bne.n	8003378 <VL53LX_unload_patch+0x48>
		status = VL53LX_WrByte(Dev,
 8003368:	2200      	movs	r2, #0
 800336a:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f00d fcc6 	bl	8010d00 <VL53LX_WrByte>
 8003374:	4603      	mov	r3, r0
 8003376:	73fb      	strb	r3, [r7, #15]
		VL53LX_PATCH__CTRL, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d106      	bne.n	800338e <VL53LX_unload_patch+0x5e>
		status = VL53LX_WrByte(Dev,
 8003380:	2201      	movs	r2, #1
 8003382:	2185      	movs	r1, #133	; 0x85
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f00d fcbb 	bl	8010d00 <VL53LX_WrByte>
 800338a:	4603      	mov	r3, r0
 800338c:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800338e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800339a:	b5b0      	push	{r4, r5, r7, lr}
 800339c:	b08a      	sub	sp, #40	; 0x28
 800339e:	af04      	add	r7, sp, #16
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3318      	adds	r3, #24
 80033ae:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80033b6:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 80033bc:	2162      	movs	r1, #98	; 0x62
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f004 f920 	bl	8007604 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2204      	movs	r2, #4
 80033c8:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2205      	movs	r2, #5
 80033d4:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	pres->zone_results.active_zones    = 0;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80033e0:	2300      	movs	r3, #0
 80033e2:	75bb      	strb	r3, [r7, #22]
 80033e4:	e01b      	b.n	800341e <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 80033e6:	7dba      	ldrb	r2, [r7, #22]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	3308      	adds	r3, #8
 80033fa:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2200      	movs	r2, #0
 8003400:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2200      	movs	r2, #0
 8003406:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2200      	movs	r2, #0
 800340c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003418:	7dbb      	ldrb	r3, [r7, #22]
 800341a:	3301      	adds	r3, #1
 800341c:	75bb      	strb	r3, [r7, #22]
 800341e:	7dbb      	ldrb	r3, [r7, #22]
 8003420:	2b04      	cmp	r3, #4
 8003422:	d9e0      	bls.n	80033e6 <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2205      	movs	r2, #5
 8003428:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
	pres->zone_hists.active_zones      = 0;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2205      	movs	r2, #5
 8003438:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
	pres->zone_cal.active_zones        = 0;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003444:	2300      	movs	r3, #0
 8003446:	75bb      	strb	r3, [r7, #22]
 8003448:	e039      	b.n	80034be <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 800344a:	7dba      	ldrb	r2, [r7, #22]
 800344c:	68f9      	ldr	r1, [r7, #12]
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	f503 7365 	add.w	r3, r3, #916	; 0x394
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 8003460:	7dba      	ldrb	r2, [r7, #22]
 8003462:	68f9      	ldr	r1, [r7, #12]
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 8003476:	7dba      	ldrb	r2, [r7, #22]
 8003478:	68f9      	ldr	r1, [r7, #12]
 800347a:	4613      	mov	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 800348c:	7dba      	ldrb	r2, [r7, #22]
 800348e:	68f9      	ldr	r1, [r7, #12]
 8003490:	4613      	mov	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 80034a2:	7dba      	ldrb	r2, [r7, #22]
 80034a4:	68f9      	ldr	r1, [r7, #12]
 80034a6:	4613      	mov	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80034b8:	7dbb      	ldrb	r3, [r7, #22]
 80034ba:	3301      	adds	r3, #1
 80034bc:	75bb      	strb	r3, [r7, #22]
 80034be:	7dbb      	ldrb	r3, [r7, #22]
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d9c2      	bls.n	800344a <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2200      	movs	r2, #0
 80034c8:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	221e      	movs	r2, #30
 80034ce:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	2200      	movs	r2, #0
 80034d4:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	2200      	movs	r2, #0
 80034da:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2201      	movs	r2, #1
 80034e0:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	2201      	movs	r2, #1
 80034e6:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	2201      	movs	r2, #1
 80034ec:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034f4:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80034fc:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8003504:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	2264      	movs	r2, #100	; 0x64
 800350a:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8003512:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003522:	3302      	adds	r3, #2
 8003524:	2203      	movs	r2, #3
 8003526:	701a      	strb	r2, [r3, #0]
	pdev->offset_results.active_results = 0;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800352e:	3303      	adds	r3, #3
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]



	pdev->gain_cal.standard_ranging_gain_factor =
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f240 72db 	movw	r2, #2011	; 0x7db
 800353a:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8003544:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f004 f83f 	bl	80075cc <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003554:	3310      	adds	r3, #16
 8003556:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f010 fdc9 	bl	80140f4 <memset>
	pdev->bin_rec_pos = 0;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003568:	330c      	adds	r3, #12
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
	pdev->pos_before_next_recom = 0;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003574:	330d      	adds	r3, #13
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <VL53LX_data_init+0x1f8>
 8003580:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d104      	bne.n	8003592 <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f8b7 	bl	80036fc <VL53LX_read_p2p_data>
 800358e:	4603      	mov	r3, r0
 8003590:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8003592:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d107      	bne.n	80035aa <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035a0:	4618      	mov	r0, r3
 80035a2:	f002 ffdf 	bl	8006564 <VL53LX_init_refspadchar_config_struct>
 80035a6:	4603      	mov	r3, r0
 80035a8:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 80035aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d107      	bne.n	80035c2 <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035b8:	4618      	mov	r0, r3
 80035ba:	f002 fff7 	bl	80065ac <VL53LX_init_ssc_config_struct>
 80035be:	4603      	mov	r3, r0
 80035c0:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 80035c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10b      	bne.n	80035e2 <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80035d6:	4619      	mov	r1, r3
 80035d8:	4610      	mov	r0, r2
 80035da:	f003 f808 	bl	80065ee <VL53LX_init_xtalk_config_struct>
 80035de:	4603      	mov	r3, r0
 80035e0:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 80035e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d107      	bne.n	80035fa <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80035f0:	4618      	mov	r0, r3
 80035f2:	f003 f86f 	bl	80066d4 <VL53LX_init_xtalk_extract_config_struct>
 80035f6:	4603      	mov	r3, r0
 80035f8:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 80035fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d107      	bne.n	8003612 <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003608:	4618      	mov	r0, r3
 800360a:	f003 f892 	bl	8006732 <VL53LX_init_offset_cal_config_struct>
 800360e:	4603      	mov	r3, r0
 8003610:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003612:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d107      	bne.n	800362a <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8003620:	4618      	mov	r0, r3
 8003622:	f003 f8ad 	bl	8006780 <VL53LX_init_zone_cal_config_struct>
 8003626:	4603      	mov	r3, r0
 8003628:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 800362a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800363e:	4619      	mov	r1, r3
 8003640:	4610      	mov	r0, r2
 8003642:	f003 f8c1 	bl	80067c8 <VL53LX_init_hist_post_process_config_struct>
 8003646:	4603      	mov	r3, r0
 8003648:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 800364a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d107      	bne.n	8003662 <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003658:	4618      	mov	r0, r3
 800365a:	f003 fac0 	bl	8006bde <VL53LX_init_hist_gen3_dmax_config_struct>
 800365e:	4603      	mov	r3, r0
 8003660:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003662:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <VL53LX_data_init+0x2de>
		status = VL53LX_init_tuning_parm_storage_struct(
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	33f8      	adds	r3, #248	; 0xf8
 800366e:	4618      	mov	r0, r3
 8003670:	f003 f919 	bl	80068a6 <VL53LX_init_tuning_parm_storage_struct>
 8003674:	4603      	mov	r3, r0
 8003676:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 8003678:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d116      	bne.n	80036ae <VL53LX_data_init+0x314>
		status = VL53LX_set_preset_mode(
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	7858      	ldrb	r0, [r3, #1]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	8b1c      	ldrh	r4, [r3, #24]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	689d      	ldr	r5, [r3, #8]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	6912      	ldr	r2, [r2, #16]
 8003694:	6939      	ldr	r1, [r7, #16]
 8003696:	6949      	ldr	r1, [r1, #20]
 8003698:	9102      	str	r1, [sp, #8]
 800369a:	9201      	str	r2, [sp, #4]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	462b      	mov	r3, r5
 80036a0:	4622      	mov	r2, r4
 80036a2:	4601      	mov	r1, r0
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fb3e 	bl	8003d26 <VL53LX_set_preset_mode>
 80036aa:	4603      	mov	r3, r0
 80036ac:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036b4:	461a      	mov	r2, r3
 80036b6:	2118      	movs	r1, #24
 80036b8:	2000      	movs	r0, #0
 80036ba:	f008 fa30 	bl	800bb1e <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80036c4:	461a      	mov	r2, r3
 80036c6:	2118      	movs	r1, #24
 80036c8:	2000      	movs	r0, #0
 80036ca:	f008 fa28 	bl	800bb1e <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80036d4:	461a      	mov	r2, r3
 80036d6:	210c      	movs	r1, #12
 80036d8:	2000      	movs	r0, #0
 80036da:	f004 fd33 	bl	8008144 <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f007 fc24 	bl	800af2c <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f007 fb3b 	bl	800ad60 <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f007 fc47 	bl	800af7e <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 80036f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bdb0      	pop	{r4, r5, r7, pc}

080036fc <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 80036fc:	b590      	push	{r4, r7, lr}
 80036fe:	b091      	sub	sp, #68	; 0x44
 8003700:	af04      	add	r7, sp, #16
 8003702:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8003704:	2300      	movs	r3, #0
 8003706:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3318      	adds	r3, #24
 800370e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8003710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003712:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8003718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371a:	3348      	adds	r3, #72	; 0x48
 800371c:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	339c      	adds	r3, #156	; 0x9c
 8003722:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8003724:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003728:	2b00      	cmp	r3, #0
 800372a:	d109      	bne.n	8003740 <VL53LX_read_p2p_data+0x44>
		status = VL53LX_get_static_nvm_managed(
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8003732:	4619      	mov	r1, r3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f00b fbb0 	bl	800ee9a <VL53LX_get_static_nvm_managed>
 800373a:	4603      	mov	r3, r0
 800373c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 8003740:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003744:	2b00      	cmp	r3, #0
 8003746:	d108      	bne.n	800375a <VL53LX_read_p2p_data+0x5e>
		status = VL53LX_get_customer_nvm_managed(
 8003748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374a:	3348      	adds	r3, #72	; 0x48
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f00b fce1 	bl	800f116 <VL53LX_get_customer_nvm_managed>
 8003754:	4603      	mov	r3, r0
 8003756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 800375a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800375e:	2b00      	cmp	r3, #0
 8003760:	d117      	bne.n	8003792 <VL53LX_read_p2p_data+0x96>

		status = VL53LX_get_nvm_copy_data(
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	f203 3392 	addw	r3, r3, #914	; 0x392
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f00c fbdd 	bl	800ff2a <VL53LX_get_nvm_copy_data>
 8003770:	4603      	mov	r3, r0
 8003772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 8003776:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <VL53LX_read_p2p_data+0x96>
			VL53LX_copy_rtn_good_spads_to_buffer(
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	f203 3292 	addw	r2, r3, #914	; 0x392
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f004 fa2f 	bl	8007bf0 <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 8003792:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10e      	bne.n	80037b8 <VL53LX_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	895b      	ldrh	r3, [r3, #10]
 800379e:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 80037b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d108      	bne.n	80037d2 <VL53LX_read_p2p_data+0xd6>
		status =
			VL53LX_read_nvm_optical_centre(
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	33c0      	adds	r3, #192	; 0xc0
 80037c4:	4619      	mov	r1, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f00b fa1b 	bl	800ec02 <VL53LX_read_nvm_optical_centre>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 80037d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d108      	bne.n	80037ec <VL53LX_read_p2p_data+0xf0>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	3360      	adds	r3, #96	; 0x60
 80037de:	4619      	mov	r1, r3
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f00b fa31 	bl	800ec48 <VL53LX_read_nvm_cal_peak_rate_map>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 80037ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d12d      	bne.n	8003850 <VL53LX_read_p2p_data+0x154>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f6:	339c      	adds	r3, #156	; 0x9c
 80037f8:	4619      	mov	r1, r3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f00b fa4a 	bl	800ec94 <VL53LX_read_nvm_additional_offset_cal_data>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	889b      	ldrh	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d120      	bne.n	8003850 <VL53LX_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8003812:	2b00      	cmp	r3, #0
 8003814:	d11c      	bne.n	8003850 <VL53LX_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	2280      	movs	r2, #128	; 0x80
 800381a:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003822:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	f893 03c2 	ldrb.w	r0, [r3, #962]	; 0x3c2
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	f893 43c3 	ldrb.w	r4, [r3, #963]	; 0x3c3
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	69f9      	ldr	r1, [r7, #28]
 800383a:	3102      	adds	r1, #2
 800383c:	9103      	str	r1, [sp, #12]
 800383e:	9202      	str	r2, [sp, #8]
 8003840:	2238      	movs	r2, #56	; 0x38
 8003842:	9201      	str	r2, [sp, #4]
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	23ff      	movs	r3, #255	; 0xff
 8003848:	22c7      	movs	r2, #199	; 0xc7
 800384a:	4621      	mov	r1, r4
 800384c:	f006 f97a 	bl	8009b44 <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 8003850:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003854:	2b00      	cmp	r3, #0
 8003856:	d12f      	bne.n	80038b8 <VL53LX_read_p2p_data+0x1bc>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 8003858:	f107 030c 	add.w	r3, r7, #12
 800385c:	461a      	mov	r2, r3
 800385e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f00b fa39 	bl	800ecda <VL53LX_read_nvm_fmt_range_results_data>
 8003868:	4603      	mov	r3, r0
 800386a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 800386e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003872:	2b00      	cmp	r3, #0
 8003874:	d120      	bne.n	80038b8 <VL53LX_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8003876:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8003878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 800387e:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8003886:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 800388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003890:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003894:	2b00      	cmp	r3, #0
 8003896:	d006      	beq.n	80038a6 <VL53LX_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8003898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 80038a4:	e003      	b.n	80038ae <VL53LX_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	2214      	movs	r2, #20
 80038aa:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038b4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 80038b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10b      	bne.n	80038d8 <VL53LX_read_p2p_data+0x1dc>
		status =
			VL53LX_RdWord(
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80038c6:	3304      	adds	r3, #4
 80038c8:	461a      	mov	r2, r3
 80038ca:	21de      	movs	r1, #222	; 0xde
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f00d faa7 	bl	8010e20 <VL53LX_RdWord>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 80038d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038da:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 80038de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e2:	d204      	bcs.n	80038ee <VL53LX_read_p2p_data+0x1f2>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 80038ea:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
	}



	if (status == VL53LX_ERROR_NONE)
 80038ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d108      	bne.n	8003908 <VL53LX_read_p2p_data+0x20c>
		status =
			VL53LX_get_mode_mitigation_roi(
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	33bc      	adds	r3, #188	; 0xbc
 80038fa:	4619      	mov	r1, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f91a 	bl	8003b36 <VL53LX_get_mode_mitigation_roi>
 8003902:	4603      	mov	r3, r0
 8003904:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d114      	bne.n	800393c <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10f      	bne.n	800393c <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 800393c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003940:	4618      	mov	r0, r3
 8003942:	3734      	adds	r7, #52	; 0x34
 8003944:	46bd      	mov	sp, r7
 8003946:	bd90      	pop	{r4, r7, pc}

08003948 <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003952:	2300      	movs	r3, #0
 8003954:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3318      	adds	r3, #24
 800395a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003962:	3304      	adds	r3, #4
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <VL53LX_set_inter_measurement_period_ms+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800396a:	23f1      	movs	r3, #241	; 0xf1
 800396c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 800396e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10e      	bne.n	8003994 <VL53LX_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003982:	3304      	adds	r3, #4
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	}

	LOG_FUNCTION_END(status);

	return status;
 8003994:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3318      	adds	r3, #24
 80039ba:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <VL53LX_set_timeouts_us+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80039c6:	23f1      	movs	r3, #241	; 0xf1
 80039c8:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 80039ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d11b      	bne.n	8003a0a <VL53LX_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f8b3 12de 	ldrh.w	r1, [r3, #734]	; 0x2de
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f203 331e 	addw	r3, r3, #798	; 0x31e
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	f502 724d 	add.w	r2, r2, #820	; 0x334
 80039f6:	9201      	str	r2, [sp, #4]
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	460b      	mov	r3, r1
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	68b8      	ldr	r0, [r7, #8]
 8003a02:	f004 ff42 	bl	800888a <VL53LX_calc_timeout_register_values>
 8003a06:	4603      	mov	r3, r0
 8003a08:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8003a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b088      	sub	sp, #32
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	3318      	adds	r3, #24
 8003a2c:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <VL53LX_get_timeouts_us+0x2e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003a40:	23f1      	movs	r3, #241	; 0xf1
 8003a42:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 8003a44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d14a      	bne.n	8003ae2 <VL53LX_get_timeouts_us+0xcc>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f8b3 22de 	ldrh.w	r2, [r3, #734]	; 0x2de
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f004 fd8e 	bl	800857c <VL53LX_calc_macro_period_us>
 8003a60:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
			VL53LX_calc_timeout_us(
 8003a68:	6979      	ldr	r1, [r7, #20]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f004 fe4d 	bl	800870a <VL53LX_calc_timeout_us>
 8003a70:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		timeout_encoded =
 8003a7c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8003a7e:	8a7b      	ldrh	r3, [r7, #18]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8003a8a:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8003a8c:	4413      	add	r3, r2
 8003a8e:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8003a90:	8a7b      	ldrh	r3, [r7, #18]
 8003a92:	6979      	ldr	r1, [r7, #20]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f004 fe9d 	bl	80087d4 <VL53LX_calc_decoded_timeout_us>
 8003a9a:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
		timeout_encoded =
 8003aa6:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8003aa8:	8a7b      	ldrh	r3, [r7, #18]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8003ab4:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8003ab6:	4413      	add	r3, r2
 8003ab8:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8003aba:	8a7b      	ldrh	r3, [r7, #18]
 8003abc:	6979      	ldr	r1, [r7, #20]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f004 fe88 	bl	80087d4 <VL53LX_calc_decoded_timeout_us>
 8003ac4:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8003ae2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3318      	adds	r3, #24
 8003b00:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	7858      	ldrb	r0, [r3, #1]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	7819      	ldrb	r1, [r3, #0]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f203 335b 	addw	r3, r3, #859	; 0x35b
 8003b10:	461a      	mov	r2, r3
 8003b12:	f005 fe94 	bl	800983e <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	7898      	ldrb	r0, [r3, #2]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	78d9      	ldrb	r1, [r3, #3]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8003b24:	461a      	mov	r2, r3
 8003b26:	f005 fec9 	bl	80098bc <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8003b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b086      	sub	sp, #24
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3318      	adds	r3, #24
 8003b48:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f893 33c2 	ldrb.w	r3, [r3, #962]	; 0x3c2
 8003b5c:	f107 020e 	add.w	r2, r7, #14
 8003b60:	f107 010d 	add.w	r1, r7, #13
 8003b64:	4618      	mov	r0, r3
 8003b66:	f008 f883 	bl	800bc70 <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8003b6a:	7bba      	ldrb	r2, [r7, #14]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8003b70:	7b7a      	ldrb	r2, [r7, #13]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f893 33c3 	ldrb.w	r3, [r3, #963]	; 0x3c3
 8003b7c:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8003b94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <VL53LX_init_zone_config_histogram_bins>:

VL53LX_Error VL53LX_init_zone_config_histogram_bins(
	VL53LX_zone_config_t   *pdata)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8003bac:	2300      	movs	r3, #0
 8003bae:	73fb      	strb	r3, [r7, #15]
 8003bb0:	e008      	b.n	8003bc4 <VL53LX_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for (i = 0; i < pdata->max_zones; i++)
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	7bfa      	ldrb	r2, [r7, #15]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d3f1      	bcc.n	8003bb2 <VL53LX_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 8003bce:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <VL53LX_set_zone_config>:

VL53LX_Error VL53LX_set_zone_config(
	VL53LX_DEV                 Dev,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3318      	adds	r3, #24
 8003bf0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	331c      	adds	r3, #28
 8003bfc:	2214      	movs	r2, #20
 8003bfe:	4619      	mov	r1, r3
 8003c00:	f010 fa6a 	bl	80140d8 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781a      	ldrb	r2, [r3, #0]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	785a      	ldrb	r2, [r3, #1]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53LX_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	33c2      	adds	r3, #194	; 0xc2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff ffbf 	bl	8003ba0 <VL53LX_init_zone_config_histogram_bins>
 8003c22:	4603      	mov	r3, r0
 8003c24:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	785b      	ldrb	r3, [r3, #1]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d104      	bne.n	8003c38 <VL53LX_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8003c36:	e00f      	b.n	8003c58 <VL53LX_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53LX_MAX_USER_ZONES)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	785b      	ldrb	r3, [r3, #1]
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d807      	bhi.n	8003c50 <VL53LX_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	785b      	ldrb	r3, [r3, #1]
 8003c44:	3301      	adds	r3, #1
 8003c46:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8003c4e:	e003      	b.n	8003c58 <VL53LX_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2206      	movs	r2, #6
 8003c54:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
				VL53LX_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8003c58:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	460b      	mov	r3, r1
 8003c72:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003c74:	2300      	movs	r3, #0
 8003c76:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3318      	adds	r3, #24
 8003c7c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8003c7e:	7afb      	ldrb	r3, [r7, #11]
 8003c80:	2b21      	cmp	r3, #33	; 0x21
 8003c82:	d030      	beq.n	8003ce6 <VL53LX_get_preset_mode_timing_cfg+0x82>
 8003c84:	2b21      	cmp	r3, #33	; 0x21
 8003c86:	dc43      	bgt.n	8003d10 <VL53LX_get_preset_mode_timing_cfg+0xac>
 8003c88:	2b1b      	cmp	r3, #27
 8003c8a:	d002      	beq.n	8003c92 <VL53LX_get_preset_mode_timing_cfg+0x2e>
 8003c8c:	2b1e      	cmp	r3, #30
 8003c8e:	d015      	beq.n	8003cbc <VL53LX_get_preset_mode_timing_cfg+0x58>
 8003c90:	e03e      	b.n	8003d10 <VL53LX_get_preset_mode_timing_cfg+0xac>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
		*pphasecal_config_timeout_us =
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	601a      	str	r2, [r3, #0]

	break;
 8003cba:	e02c      	b.n	8003d16 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
		*pphasecal_config_timeout_us =
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	601a      	str	r2, [r3, #0]
	break;
 8003ce4:	e017      	b.n	8003d16 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
		*pphasecal_config_timeout_us =
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	601a      	str	r2, [r3, #0]
	break;
 8003d0e:	e002      	b.n	8003d16 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003d10:	23fc      	movs	r3, #252	; 0xfc
 8003d12:	75fb      	strb	r3, [r7, #23]
		break;
 8003d14:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8003d16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b096      	sub	sp, #88	; 0x58
 8003d2a:	af06      	add	r7, sp, #24
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	72fb      	strb	r3, [r7, #11]
 8003d34:	4613      	mov	r3, r2
 8003d36:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_LLDriverData_t *pdev =
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3318      	adds	r3, #24
 8003d42:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003d4a:	637b      	str	r3, [r7, #52]	; 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d52:	633b      	str	r3, [r7, #48]	; 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d56:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5e:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8003d62:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d66:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8003d72:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d76:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8003d7a:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003d82:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8003d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d86:	33c2      	adds	r3, #194	; 0xc2
 8003d88:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8c:	33f8      	adds	r3, #248	; 0xf8
 8003d8e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8003d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d92:	7afa      	ldrb	r2, [r7, #11]
 8003d94:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d9a:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003da0:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003da6:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 8003da8:	2103      	movs	r1, #3
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f003 fc2a 	bl	8007604 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8003db0:	7afb      	ldrb	r3, [r7, #11]
 8003db2:	2b21      	cmp	r3, #33	; 0x21
 8003db4:	d02e      	beq.n	8003e14 <VL53LX_set_preset_mode+0xee>
 8003db6:	2b21      	cmp	r3, #33	; 0x21
 8003db8:	dc40      	bgt.n	8003e3c <VL53LX_set_preset_mode+0x116>
 8003dba:	2b1b      	cmp	r3, #27
 8003dbc:	d002      	beq.n	8003dc4 <VL53LX_set_preset_mode+0x9e>
 8003dbe:	2b1e      	cmp	r3, #30
 8003dc0:	d014      	beq.n	8003dec <VL53LX_set_preset_mode+0xc6>
 8003dc2:	e03b      	b.n	8003e3c <VL53LX_set_preset_mode+0x116>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	9304      	str	r3, [sp, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	9303      	str	r3, [sp, #12]
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	9302      	str	r3, [sp, #8]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ddc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003de0:	f003 f941 	bl	8007066 <VL53LX_preset_mode_histogram_long_range>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003dea:	e02b      	b.n	8003e44 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	9304      	str	r3, [sp, #16]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	9303      	str	r3, [sp, #12]
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	9302      	str	r3, [sp, #8]
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e08:	f003 f9cb 	bl	80071a2 <VL53LX_preset_mode_histogram_medium_range>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003e12:	e017      	b.n	8003e44 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	9304      	str	r3, [sp, #16]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	9303      	str	r3, [sp, #12]
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	9302      	str	r3, [sp, #8]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	9301      	str	r3, [sp, #4]
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e30:	f003 fa55 	bl	80072de <VL53LX_preset_mode_histogram_short_range>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003e3a:	e003      	b.n	8003e44 <VL53LX_set_preset_mode+0x11e>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003e3c:	23fc      	movs	r3, #252	; 0xfc
 8003e3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 8003e42:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 8003e44:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <VL53LX_set_preset_mode+0x132>

		pstatic->dss_config__target_total_rate_mcps =
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	893a      	ldrh	r2, [r7, #8]
 8003e50:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8003e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e54:	893a      	ldrh	r2, [r7, #8]
 8003e56:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 8003e58:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d108      	bne.n	8003e72 <VL53LX_set_preset_mode+0x14c>
		status =
			VL53LX_set_timeouts_us(
 8003e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7ff fd9c 	bl	80039a4 <VL53LX_set_timeouts_us>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 8003e72:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <VL53LX_set_preset_mode+0x162>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8003e7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff fd63 	bl	8003948 <VL53LX_set_inter_measurement_period_ms>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8003e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8003e8e:	3301      	adds	r3, #1
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e94:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f003 ffc8 	bl	8007e30 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8003ea0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3740      	adds	r7, #64	; 0x40
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b0d2      	sub	sp, #328	; 0x148
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	1d3b      	adds	r3, r7, #4
 8003eb4:	6018      	str	r0, [r3, #0]
 8003eb6:	4608      	mov	r0, r1
 8003eb8:	4611      	mov	r1, r2
 8003eba:	1cfb      	adds	r3, r7, #3
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	1cbb      	adds	r3, r7, #2
 8003ec2:	460a      	mov	r2, r1
 8003ec4:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003ecc:	1d3b      	adds	r3, r7, #4
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3318      	adds	r3, #24
 8003ed2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53LX_LLDriverResults_t  *pres =
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003ede:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8003ee2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ee6:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8003eea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8003eee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ef2:	3348      	adds	r3, #72	; 0x48
 8003ef4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003ef8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003efc:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003f00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003f04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f08:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8003f0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003f10:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f14:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8003f18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003f1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f20:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8003f24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8003f28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f2c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003f30:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8003f34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f38:	332c      	adds	r3, #44	; 0x2c
 8003f3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8003f3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f42:	3348      	adds	r3, #72	; 0x48
 8003f44:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8003f48:	f107 030c 	add.w	r3, r7, #12
 8003f4c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8003f68:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f6c:	1cfa      	adds	r2, r7, #3
 8003f6e:	7812      	ldrb	r2, [r2, #0]
 8003f70:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8003f72:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003f76:	791b      	ldrb	r3, [r3, #4]
 8003f78:	b25b      	sxtb	r3, r3
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8003f80:	1cfb      	adds	r3, r7, #3
 8003f82:	f993 3000 	ldrsb.w	r3, [r3]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	b25b      	sxtb	r3, r3
 8003f8a:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8003f8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003f90:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8003f92:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f96:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53LX_set_user_zone(
 8003f9a:	3336      	adds	r3, #54	; 0x36
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8003fa2:	4413      	add	r3, r2
 8003fa4:	1d9a      	adds	r2, r3, #6
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	4611      	mov	r1, r2
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	f7ff fd9f 	bl	8003aee <VL53LX_set_user_zone>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8003fb6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003fba:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <VL53LX_init_and_start_range+0x144>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 8003fc2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003fc6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003fca:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8003fd8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003fdc:	4413      	add	r3, r2
 8003fde:	1c9a      	adds	r2, r3, #2
 8003fe0:	1d3b      	adds	r3, r7, #4
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	f001 fad7 	bl	8005598 <VL53LX_set_zone_dss_config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8003ff0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ff4:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10d      	bne.n	800401c <VL53LX_init_and_start_range+0x170>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8004000:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8004008:	2b01      	cmp	r3, #1
 800400a:	d107      	bne.n	800401c <VL53LX_init_and_start_range+0x170>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800400c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004010:	f8b3 22a4 	ldrh.w	r2, [r3, #676]	; 0x2a4
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8004014:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004018:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 800401c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004020:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004024:	3312      	adds	r3, #18
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2bff      	cmp	r3, #255	; 0xff
 800402a:	d106      	bne.n	800403a <VL53LX_init_and_start_range+0x18e>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800402c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004030:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004034:	3312      	adds	r3, #18
 8004036:	2200      	movs	r2, #0
 8004038:	701a      	strb	r2, [r3, #0]


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800403a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800403e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004042:	3311      	adds	r3, #17
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d133      	bne.n	80040b2 <VL53LX_init_and_start_range+0x206>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800404a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800404e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004052:	3312      	adds	r3, #18
 8004054:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004056:	2b00      	cmp	r3, #0
 8004058:	d12b      	bne.n	80040b2 <VL53LX_init_and_start_range+0x206>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800405a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800405e:	f893 2320 	ldrb.w	r2, [r3, #800]	; 0x320
		pdev->low_power_auto_data.saved_interrupt_config =
 8004062:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004066:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800406a:	3313      	adds	r3, #19
 800406c:	701a      	strb	r2, [r3, #0]

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800406e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004072:	2220      	movs	r2, #32
 8004074:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		if ((pdev->dyn_cfg.system__sequence_config & (
 8004078:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800407c:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
 8004080:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <VL53LX_init_and_start_range+0x1f0>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8004088:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800408c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004090:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8004092:	b21a      	sxth	r2, r3
 8004094:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004098:	825a      	strh	r2, [r3, #18]
 800409a:	e003      	b.n	80040a4 <VL53LX_init_and_start_range+0x1f8>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 800409c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040a0:	2200      	movs	r2, #0
 80040a2:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 80040a4:	1cbb      	adds	r3, r7, #2
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d802      	bhi.n	80040b2 <VL53LX_init_and_start_range+0x206>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 80040ac:	1cbb      	adds	r3, r7, #2
 80040ae:	2205      	movs	r2, #5
 80040b0:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80040b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80040b6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80040ba:	3311      	adds	r3, #17
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d114      	bne.n	80040ec <VL53LX_init_and_start_range+0x240>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80040c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80040c6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80040ca:	3312      	adds	r3, #18
 80040cc:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d10c      	bne.n	80040ec <VL53LX_init_and_start_range+0x240>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 80040d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80040d6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80040da:	3313      	adds	r3, #19
 80040dc:	781a      	ldrb	r2, [r3, #0]
		pdev->gen_cfg.system__interrupt_config_gpio =
 80040de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80040e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 80040e6:	1cbb      	adds	r3, r7, #2
 80040e8:	2206      	movs	r2, #6
 80040ea:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 80040ec:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d106      	bne.n	8004102 <VL53LX_init_and_start_range+0x256>
		status = VL53LX_save_cfg_data(Dev);
 80040f4:	1d3b      	adds	r3, r7, #4
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	f005 fe8e 	bl	8009e18 <VL53LX_save_cfg_data>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8004102:	1cbb      	adds	r3, r7, #2
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	3b01      	subs	r3, #1
 8004108:	2b05      	cmp	r3, #5
 800410a:	d827      	bhi.n	800415c <VL53LX_init_and_start_range+0x2b0>
 800410c:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <VL53LX_init_and_start_range+0x268>)
 800410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004112:	bf00      	nop
 8004114:	08004155 	.word	0x08004155
 8004118:	0800414d 	.word	0x0800414d
 800411c:	08004145 	.word	0x08004145
 8004120:	0800413d 	.word	0x0800413d
 8004124:	08004135 	.word	0x08004135
 8004128:	0800412d 	.word	0x0800412d
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 800412c:	2301      	movs	r3, #1
 800412e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004132:	e017      	b.n	8004164 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8004134:	230d      	movs	r3, #13
 8004136:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800413a:	e013      	b.n	8004164 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 800413c:	2324      	movs	r3, #36	; 0x24
 800413e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004142:	e00f      	b.n	8004164 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 8004144:	2344      	movs	r3, #68	; 0x44
 8004146:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800414a:	e00b      	b.n	8004164 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 800414c:	235a      	movs	r3, #90	; 0x5a
 800414e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004152:	e007      	b.n	8004164 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 8004154:	2371      	movs	r3, #113	; 0x71
 8004156:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800415a:	e003      	b.n	8004164 <VL53LX_init_and_start_range+0x2b8>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 800415c:	2383      	movs	r3, #131	; 0x83
 800415e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004162:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8004164:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004168:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800416c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8004170:	f107 030c 	add.w	r3, r7, #12
 8004174:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8004178:	2300      	movs	r3, #0
 800417a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800417e:	e00b      	b.n	8004198 <VL53LX_init_and_start_range+0x2ec>
		*pbuffer++ = 0;
 8004180:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 800418e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8004192:	3301      	adds	r3, #1
 8004194:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8004198:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 800419c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d3ed      	bcc.n	8004180 <VL53LX_init_and_start_range+0x2d4>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 80041a4:	1cbb      	adds	r3, r7, #2
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b05      	cmp	r3, #5
 80041aa:	d917      	bls.n	80041dc <VL53LX_init_and_start_range+0x330>
 80041ac:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d113      	bne.n	80041dc <VL53LX_init_and_start_range+0x330>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80041b4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80041b8:	f1c3 0301 	rsb	r3, r3, #1
 80041bc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80041c0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 80041c4:	f107 020c 	add.w	r2, r7, #12
 80041c8:	4413      	add	r3, r2
 80041ca:	461a      	mov	r2, r3
 80041cc:	210b      	movs	r1, #11
 80041ce:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80041d2:	f00a fdad 	bl	800ed30 <VL53LX_i2c_encode_static_nvm_managed>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80041dc:	1cbb      	adds	r3, r7, #2
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d917      	bls.n	8004214 <VL53LX_init_and_start_range+0x368>
 80041e4:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d113      	bne.n	8004214 <VL53LX_init_and_start_range+0x368>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80041ec:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80041f0:	f1c3 030d 	rsb	r3, r3, #13
 80041f4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80041f8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 80041fc:	f107 020c 	add.w	r2, r7, #12
 8004200:	4413      	add	r3, r2
 8004202:	461a      	mov	r2, r3
 8004204:	2117      	movs	r1, #23
 8004206:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800420a:	f00a fe6d 	bl	800eee8 <VL53LX_i2c_encode_customer_nvm_managed>
 800420e:	4603      	mov	r3, r0
 8004210:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8004214:	1cbb      	adds	r3, r7, #2
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b03      	cmp	r3, #3
 800421a:	d917      	bls.n	800424c <VL53LX_init_and_start_range+0x3a0>
 800421c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004220:	2b00      	cmp	r3, #0
 8004222:	d113      	bne.n	800424c <VL53LX_init_and_start_range+0x3a0>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004224:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004228:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800422c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004230:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_config(
 8004234:	f107 020c 	add.w	r2, r7, #12
 8004238:	4413      	add	r3, r2
 800423a:	461a      	mov	r2, r3
 800423c:	2120      	movs	r1, #32
 800423e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8004242:	f00a ffb3 	bl	800f1ac <VL53LX_i2c_encode_static_config>
 8004246:	4603      	mov	r3, r0
 8004248:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800424c:	1cbb      	adds	r3, r7, #2
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d917      	bls.n	8004284 <VL53LX_init_and_start_range+0x3d8>
 8004254:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004258:	2b00      	cmp	r3, #0
 800425a:	d113      	bne.n	8004284 <VL53LX_init_and_start_range+0x3d8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800425c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004260:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8004264:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004268:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_general_config(
 800426c:	f107 020c 	add.w	r2, r7, #12
 8004270:	4413      	add	r3, r2
 8004272:	461a      	mov	r2, r3
 8004274:	2116      	movs	r1, #22
 8004276:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800427a:	f00b f87a 	bl	800f372 <VL53LX_i2c_encode_general_config>
 800427e:	4603      	mov	r3, r0
 8004280:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8004284:	1cbb      	adds	r3, r7, #2
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d917      	bls.n	80042bc <VL53LX_init_and_start_range+0x410>
 800428c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004290:	2b00      	cmp	r3, #0
 8004292:	d113      	bne.n	80042bc <VL53LX_init_and_start_range+0x410>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004294:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004298:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800429c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80042a0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_timing_config(
 80042a4:	f107 020c 	add.w	r2, r7, #12
 80042a8:	4413      	add	r3, r2
 80042aa:	461a      	mov	r2, r3
 80042ac:	2117      	movs	r1, #23
 80042ae:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80042b2:	f00b f8e2 	bl	800f47a <VL53LX_i2c_encode_timing_config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80042bc:	1cbb      	adds	r3, r7, #2
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d036      	beq.n	8004332 <VL53LX_init_and_start_range+0x486>
 80042c4:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d132      	bne.n	8004332 <VL53LX_init_and_start_range+0x486>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80042cc:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80042d0:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 80042d4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 80042d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80042dc:	791b      	ldrb	r3, [r3, #4]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d017      	beq.n	8004316 <VL53LX_init_and_start_range+0x46a>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ea:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042f6:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 80042f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fc:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	b2da      	uxtb	r2, r3
 8004304:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004308:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 800430a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800430e:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8004310:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004314:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004316:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_dynamic_config(
 800431a:	f107 020c 	add.w	r2, r7, #12
 800431e:	4413      	add	r3, r2
 8004320:	461a      	mov	r2, r3
 8004322:	2112      	movs	r1, #18
 8004324:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8004328:	f00b f929 	bl	800f57e <VL53LX_i2c_encode_dynamic_config>
 800432c:	4603      	mov	r3, r0
 800432e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 8004332:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004336:	2b00      	cmp	r3, #0
 8004338:	d113      	bne.n	8004362 <VL53LX_init_and_start_range+0x4b6>

		i2c_buffer_offset_bytes =
 800433a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800433e:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8004342:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004346:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_system_control(
 800434a:	f107 020c 	add.w	r2, r7, #12
 800434e:	4413      	add	r3, r2
 8004350:	461a      	mov	r2, r3
 8004352:	2105      	movs	r1, #5
 8004354:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8004358:	f00b f996 	bl	800f688 <VL53LX_i2c_encode_system_control>
 800435c:	4603      	mov	r3, r0
 800435e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 8004362:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10c      	bne.n	8004384 <VL53LX_init_and_start_range+0x4d8>
		status =
			VL53LX_WriteMulti(
 800436a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800436e:	f107 020c 	add.w	r2, r7, #12
 8004372:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 8004376:	1d38      	adds	r0, r7, #4
 8004378:	6800      	ldr	r0, [r0, #0]
 800437a:	f00c fc55 	bl	8010c28 <VL53LX_WriteMulti>
 800437e:	4603      	mov	r3, r0
 8004380:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 8004384:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004388:	2b00      	cmp	r3, #0
 800438a:	d106      	bne.n	800439a <VL53LX_init_and_start_range+0x4ee>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 800438c:	1d3b      	adds	r3, r7, #4
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	f003 f968 	bl	8007664 <VL53LX_update_ll_driver_rd_state>
 8004394:	4603      	mov	r3, r0
 8004396:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53LX_ERROR_NONE)
 800439a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <VL53LX_init_and_start_range+0x504>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 80043a2:	1d3b      	adds	r3, r7, #4
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	f003 fafd 	bl	80079a4 <VL53LX_update_ll_driver_cfg_state>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 80043b0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop

080043c0 <VL53LX_stop_range>:


VL53LX_Error VL53LX_stop_range(
	VL53LX_DEV     Dev)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80043c8:	2300      	movs	r3, #0
 80043ca:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev =
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3318      	adds	r3, #24
 80043d0:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80043d8:	60fb      	str	r3, [r7, #12]
			VL53LXDevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80043e0:	b25b      	sxtb	r3, r3
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	b25b      	sxtb	r3, r3
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80043e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043ec:	b25b      	sxtb	r3, r3
 80043ee:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
			 VL53LX_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53LX_set_system_control(
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f00b f97d 	bl	800f6fe <VL53LX_set_system_control>
 8004404:	4603      	mov	r3, r0
 8004406:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53LX_init_ll_driver_state(
 800441a:	2103      	movs	r1, #3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f003 f8f1 	bl	8007604 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8004428:	3301      	adds	r3, #1
 800442a:	b2da      	uxtb	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f003 fcfb 	bl	8007e30 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f003 fd2d 	bl	8007e9a <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004446:	3311      	adds	r3, #17
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d102      	bne.n	8004454 <VL53LX_stop_range+0x94>
		VL53LX_low_power_auto_data_stop_range(Dev);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f006 fddc 	bl	800b00c <VL53LX_low_power_auto_data_stop_range>

	return status;
 8004454:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b0c8      	sub	sp, #288	; 0x120
 8004464:	af00      	add	r7, sp, #0
 8004466:	1d3b      	adds	r3, r7, #4
 8004468:	6018      	str	r0, [r3, #0]
 800446a:	460a      	mov	r2, r1
 800446c:	1cfb      	adds	r3, r7, #3
 800446e:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004470:	2300      	movs	r3, #0
 8004472:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004476:	1d3b      	adds	r3, r7, #4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3318      	adds	r3, #24
 800447c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 8004480:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004484:	f203 3366 	addw	r3, r3, #870	; 0x366
 8004488:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 800448c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004490:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8004494:	3318      	adds	r3, #24
 8004496:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800449a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800449e:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 80044a2:	331c      	adds	r3, #28
 80044a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 80044a8:	2388      	movs	r3, #136	; 0x88
 80044aa:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 80044ba:	1cfb      	adds	r3, r7, #3
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d008      	beq.n	80044d4 <VL53LX_get_measurement_results+0x74>
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d10d      	bne.n	80044e2 <VL53LX_get_measurement_results+0x82>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 80044c6:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80044ca:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 80044ce:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80044d2:	e00a      	b.n	80044ea <VL53LX_get_measurement_results+0x8a>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 80044d4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80044d8:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 80044dc:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80044e0:	e003      	b.n	80044ea <VL53LX_get_measurement_results+0x8a>
	default:
		i2c_buffer_size_bytes =
 80044e2:	232c      	movs	r3, #44	; 0x2c
 80044e4:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80044e8:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 80044ea:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10c      	bne.n	800450c <VL53LX_get_measurement_results+0xac>
		status =
			VL53LX_ReadMulti(
 80044f2:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80044f6:	f107 0208 	add.w	r2, r7, #8
 80044fa:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 80044fe:	1d38      	adds	r0, r7, #4
 8004500:	6800      	ldr	r0, [r0, #0]
 8004502:	f00c fbc7 	bl	8010c94 <VL53LX_ReadMulti>
 8004506:	4603      	mov	r3, r0
 8004508:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 800450c:	1cfb      	adds	r3, r7, #3
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d917      	bls.n	8004544 <VL53LX_get_measurement_results+0xe4>
 8004514:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8004518:	2b00      	cmp	r3, #0
 800451a:	d113      	bne.n	8004544 <VL53LX_get_measurement_results+0xe4>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800451c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8004520:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8004524:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004528:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_debug_results(
 800452c:	f107 0208 	add.w	r2, r7, #8
 8004530:	4413      	add	r3, r2
 8004532:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004536:	4619      	mov	r1, r3
 8004538:	2038      	movs	r0, #56	; 0x38
 800453a:	f00b fa5e 	bl	800f9fa <VL53LX_i2c_decode_debug_results>
 800453e:	4603      	mov	r3, r0
 8004540:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 8004544:	1cfb      	adds	r3, r7, #3
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d017      	beq.n	800457c <VL53LX_get_measurement_results+0x11c>
 800454c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8004550:	2b00      	cmp	r3, #0
 8004552:	d113      	bne.n	800457c <VL53LX_get_measurement_results+0x11c>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004554:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8004558:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800455c:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004560:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_core_results(
 8004564:	f107 0208 	add.w	r2, r7, #8
 8004568:	4413      	add	r3, r2
 800456a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800456e:	4619      	mov	r1, r3
 8004570:	2021      	movs	r0, #33	; 0x21
 8004572:	f00b f9e1 	bl	800f938 <VL53LX_i2c_decode_core_results>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 800457c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8004580:	2b00      	cmp	r3, #0
 8004582:	d110      	bne.n	80045a6 <VL53LX_get_measurement_results+0x146>

		i2c_buffer_offset_bytes = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800458a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_system_results(
 800458e:	f107 0208 	add.w	r2, r7, #8
 8004592:	4413      	add	r3, r2
 8004594:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004598:	4619      	mov	r1, r3
 800459a:	202c      	movs	r0, #44	; 0x2c
 800459c:	f00b f8d6 	bl	800f74c <VL53LX_i2c_decode_system_results>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 80045a6:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 80045b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045b8:	b0a0      	sub	sp, #128	; 0x80
 80045ba:	af06      	add	r7, sp, #24
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	460b      	mov	r3, r1
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53LX_LLDriverData_t *pdev =
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3318      	adds	r3, #24
 80045ce:	663b      	str	r3, [r7, #96]	; 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80045d6:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 80045d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045da:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 80045dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045de:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80045e2:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 80045e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045e6:	332c      	adds	r3, #44	; 0x2c
 80045e8:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 80045ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045ec:	33c2      	adds	r3, #194	; 0xc2
 80045ee:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 80045f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045f2:	f503 734c 	add.w	r3, r3, #816	; 0x330
 80045f6:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 80045f8:	f107 0314 	add.w	r3, r7, #20
 80045fc:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80045fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004600:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004604:	643b      	str	r3, [r7, #64]	; 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8004606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004608:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800460c:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 800460e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004610:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004614:	3310      	adds	r3, #16
 8004616:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8004618:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800461a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800461e:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8004620:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004622:	3348      	adds	r3, #72	; 0x48
 8004624:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 8004626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004628:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 800462e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004630:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8004634:	331c      	adds	r3, #28
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 8004638:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800463a:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 8290 	beq.w	8004b68 <VL53LX_get_device_results+0x5b4>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 8004648:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800464a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800464e:	4619      	mov	r1, r3
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 fbcb 	bl	8004dec <VL53LX_get_histogram_bin_data>
 8004656:	4603      	mov	r3, r0
 8004658:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 800465c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004660:	2b00      	cmp	r3, #0
 8004662:	d118      	bne.n	8004696 <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 8004664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004666:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 8004668:	2b00      	cmp	r3, #0
 800466a:	d114      	bne.n	8004696 <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 800466c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800466e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 8004676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800467e:	4413      	add	r3, r2
 8004680:	1d1a      	adds	r2, r3, #4
 8004682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004684:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004688:	4619      	mov	r1, r3
 800468a:	4610      	mov	r0, r2
 800468c:	f004 f976 	bl	800897c <VL53LX_hist_copy_and_scale_ambient_info>
 8004690:	4603      	mov	r3, r0
 8004692:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 8004696:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800469a:	2b00      	cmp	r3, #0
 800469c:	f040 8206 	bne.w	8004aac <VL53LX_get_device_results+0x4f8>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80046a0:	f107 0313 	add.w	r3, r7, #19
 80046a4:	4619      	mov	r1, r3
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f006 fdd5 	bl	800b256 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 80046ac:	7cfb      	ldrb	r3, [r7, #19]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 80046b2:	2301      	movs	r3, #1
 80046b4:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 80046b6:	7cfb      	ldrb	r3, [r7, #19]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 80046be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046c0:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d107      	bne.n	80046d8 <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 80046c8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	3202      	adds	r2, #2
 80046d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80046d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d6:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 80046d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046da:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 80046de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e0:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 80046e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80046ec:	4619      	mov	r1, r3
 80046ee:	4610      	mov	r0, r2
 80046f0:	f004 f84a 	bl	8008788 <VL53LX_calc_crosstalk_plane_offset_with_margin>
 80046f4:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80046f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f8:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80046fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8004700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004702:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004706:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800470a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470c:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 800470e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004710:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 8004712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004714:	f883 2255 	strb.w	r2, [r3, #597]	; 0x255
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8004718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800471a:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 800471c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800471e:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8004722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004724:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8004726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004728:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 800472c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800472e:	f8b3 22fe 	ldrh.w	r2, [r3, #766]	; 0x2fe
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8004732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004734:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8004738:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800473a:	f893 2331 	ldrb.w	r2, [r3, #817]	; 0x331
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 800473e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004740:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8004744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004746:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 800474a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800474c:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 800474e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004750:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8004754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004756:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8004758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800475a:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 800475c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475e:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 8004760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004762:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8004764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004766:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 8004768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800476a:	f203 3292 	addw	r2, r3, #914	; 0x392
 800476e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004770:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004774:	4619      	mov	r1, r3
 8004776:	4610      	mov	r0, r2
 8004778:	f003 fa3a 	bl	8007bf0 <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 800477c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800477e:	795b      	ldrb	r3, [r3, #5]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d002      	beq.n	800478a <VL53LX_get_device_results+0x1d6>
 8004784:	2b03      	cmp	r3, #3
 8004786:	d02e      	beq.n	80047e6 <VL53LX_get_device_results+0x232>
 8004788:	e03d      	b.n	8004806 <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 800478a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800478c:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8004790:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 80047a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047a2:	f893 e3c2 	ldrb.w	lr, [r3, #962]	; 0x3c2
 80047a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047a8:	f893 83c3 	ldrb.w	r8, [r3, #963]	; 0x3c3
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ae:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80047b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047b4:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 80047b8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80047ba:	319c      	adds	r1, #156	; 0x9c
 80047bc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80047be:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 80047c2:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 80047c6:	b2a4      	uxth	r4, r4
 80047c8:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 80047ca:	351c      	adds	r5, #28
 80047cc:	9505      	str	r5, [sp, #20]
 80047ce:	9404      	str	r4, [sp, #16]
 80047d0:	9003      	str	r0, [sp, #12]
 80047d2:	9102      	str	r1, [sp, #8]
 80047d4:	9201      	str	r2, [sp, #4]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	4643      	mov	r3, r8
 80047da:	4672      	mov	r2, lr
 80047dc:	4661      	mov	r1, ip
 80047de:	4630      	mov	r0, r6
 80047e0:	f004 ff7d 	bl	80096de <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 80047e4:	e013      	b.n	800480e <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 80047e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e8:	331c      	adds	r3, #28
 80047ea:	4619      	mov	r1, r3
 80047ec:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80047ee:	f7fe fa4f 	bl	8002c90 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 80047f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	b21a      	sxth	r2, r3
 8004800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004802:	839a      	strh	r2, [r3, #28]
		break;
 8004804:	e003      	b.n	800480e <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 8004806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004808:	2200      	movs	r2, #0
 800480a:	839a      	strh	r2, [r3, #28]
		break;
 800480c:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 800480e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004812:	2b00      	cmp	r3, #0
 8004814:	f040 814c 	bne.w	8004ab0 <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 8004818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481a:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 800481e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004820:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 8004824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004826:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 800482a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800482c:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		VL53LX_calc_max_effective_spads(
 8004830:	b29c      	uxth	r4, r3
 8004832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004834:	f203 236a 	addw	r3, r3, #618	; 0x26a
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	4623      	mov	r3, r4
 800483c:	f005 f8f4 	bl	8009a28 <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 8004840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004842:	799b      	ldrb	r3, [r3, #6]
 8004844:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004846:	4619      	mov	r1, r3
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fee2 	bl	8005612 <VL53LX_get_dmax_calibration_data>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 8004854:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004858:	2b00      	cmp	r3, #0
 800485a:	f040 812b 	bne.w	8004ab4 <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 800485e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004860:	f503 7515 	add.w	r5, r3, #596	; 0x254
 8004864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004866:	f503 7605 	add.w	r6, r3, #532	; 0x214
 800486a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800486c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004870:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004872:	f202 521c 	addw	r2, r2, #1308	; 0x51c
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8004876:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004878:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
				pdev->wArea2,
 800487c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800487e:	f500 50d0 	add.w	r0, r0, #6656	; 0x1a00
		status = VL53LX_ipp_hist_process_data(
 8004882:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004884:	9405      	str	r4, [sp, #20]
 8004886:	f107 0413 	add.w	r4, r7, #19
 800488a:	9404      	str	r4, [sp, #16]
 800488c:	9003      	str	r0, [sp, #12]
 800488e:	9102      	str	r1, [sp, #8]
 8004890:	9201      	str	r2, [sp, #4]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	4633      	mov	r3, r6
 8004896:	462a      	mov	r2, r5
 8004898:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f00c fbf0 	bl	8011080 <VL53LX_ipp_hist_process_data>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80048a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048a8:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d150      	bne.n	8004952 <VL53LX_get_device_results+0x39e>
			(histo_merge_nb > 1))
 80048b0:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d94d      	bls.n	8004952 <VL53LX_get_device_results+0x39e>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80048b6:	2300      	movs	r3, #0
 80048b8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80048bc:	e045      	b.n	800494a <VL53LX_get_device_results+0x396>
			pdata = &(presults->VL53LX_p_003[i]);
 80048be:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80048c2:	224c      	movs	r2, #76	; 0x4c
 80048c4:	fb02 f303 	mul.w	r3, r2, r3
 80048c8:	3310      	adds	r3, #16
 80048ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048cc:	4413      	add	r3, r2
 80048ce:	3304      	adds	r3, #4
 80048d0:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	7cfa      	ldrb	r2, [r7, #19]
 80048d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	7cfa      	ldrb	r2, [r7, #19]
 80048e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	7cfa      	ldrb	r2, [r7, #19]
 80048f4:	fb93 f2f2 	sdiv	r2, r3, r2
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004900:	461a      	mov	r2, r3
 8004902:	7cfb      	ldrb	r3, [r7, #19]
 8004904:	fb92 f3f3 	sdiv	r3, r2, r3
 8004908:	b29a      	uxth	r2, r3
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004912:	461a      	mov	r2, r3
 8004914:	7cfb      	ldrb	r3, [r7, #19]
 8004916:	fb92 f3f3 	sdiv	r3, r2, r3
 800491a:	b29a      	uxth	r2, r3
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004924:	461a      	mov	r2, r3
 8004926:	7cfb      	ldrb	r3, [r7, #19]
 8004928:	fb92 f3f3 	sdiv	r3, r2, r3
 800492c:	b29a      	uxth	r2, r3
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	7cfa      	ldrb	r2, [r7, #19]
 8004938:	fbb3 f2f2 	udiv	r2, r3, r2
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8004940:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004944:	3301      	adds	r3, #1
 8004946:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800494a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800494e:	2b03      	cmp	r3, #3
 8004950:	d9b5      	bls.n	80048be <VL53LX_get_device_results+0x30a>
		}


		if (status != VL53LX_ERROR_NONE)
 8004952:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004956:	2b00      	cmp	r3, #0
 8004958:	f040 80ae 	bne.w	8004ab8 <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 800495c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800495e:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8004962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004964:	f503 7171 	add.w	r1, r3, #964	; 0x3c4
 8004968:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800496a:	330e      	adds	r3, #14
 800496c:	461a      	mov	r2, r3
 800496e:	f004 fe80 	bl	8009672 <VL53LX_hist_wrap_dmax>
 8004972:	4603      	mov	r3, r0
 8004974:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 8004978:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800497c:	2b00      	cmp	r3, #0
 800497e:	f040 809d 	bne.w	8004abc <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8004982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004984:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 800498c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004994:	4413      	add	r3, r2
 8004996:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8004998:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 800499c:	4613      	mov	r3, r2
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	4413      	add	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80049a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049aa:	4413      	add	r3, r2
 80049ac:	f103 0208 	add.w	r2, r3, #8
 80049b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f004 fa10 	bl	8008dd8 <VL53LX_hist_phase_consistency_check>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 80049be:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d17c      	bne.n	8004ac0 <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80049c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 80049d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d8:	4413      	add	r3, r2
 80049da:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 80049dc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 80049e0:	4613      	mov	r3, r2
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	4413      	add	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80049ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049ee:	4413      	add	r3, r2
 80049f0:	f103 0208 	add.w	r2, r3, #8
 80049f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f004 fde1 	bl	80095c2 <VL53LX_hist_xmonitor_consistency_check>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 8004a06:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d15a      	bne.n	8004ac4 <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 8004a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8004a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1a:	2205      	movs	r2, #5
 8004a1c:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 8004a1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a20:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004a24:	3301      	adds	r3, #1
 8004a26:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8004a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2a:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8004a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004a32:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8004a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a36:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
		if (zid <
 8004a3a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d222      	bcs.n	8004a88 <VL53LX_get_device_results+0x4d4>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 8004a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			phist_info =
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8004a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a52:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8004a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a56:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8004a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5a:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8004a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5e:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8004a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a62:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 8004a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a68:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 8004a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6c:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53LX_p_005 =
 8004a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a72:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8004a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 8004a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a7c:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8004a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a80:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 8004a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a86:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 8004a88:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d11b      	bne.n	8004ac8 <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 8004a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a92:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 8004a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a98:	f203 3266 	addw	r2, r3, #870	; 0x366
 8004a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a9e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8004aa2:	3318      	adds	r3, #24
 8004aa4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004aa6:	f005 f91c 	bl	8009ce2 <VL53LX_hist_copy_results_to_sys_and_core>
 8004aaa:	e00e      	b.n	8004aca <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004aac:	bf00      	nop
 8004aae:	e00c      	b.n	8004aca <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004ab0:	bf00      	nop
 8004ab2:	e00a      	b.n	8004aca <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004ab4:	bf00      	nop
 8004ab6:	e008      	b.n	8004aca <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004ab8:	bf00      	nop
 8004aba:	e006      	b.n	8004aca <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004abc:	bf00      	nop
 8004abe:	e004      	b.n	8004aca <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004ac0:	bf00      	nop
 8004ac2:	e002      	b.n	8004aca <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004ac4:	bf00      	nop
 8004ac6:	e000      	b.n	8004aca <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004ac8:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 8004aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004acc:	785b      	ldrb	r3, [r3, #1]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d036      	beq.n	8004b40 <VL53LX_get_device_results+0x58c>
			if (pstate->rd_device_state !=
 8004ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad4:	79db      	ldrb	r3, [r3, #7]
 8004ad6:	2b06      	cmp	r3, #6
 8004ad8:	d00a      	beq.n	8004af0 <VL53LX_get_device_results+0x53c>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 8004ada:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <VL53LX_get_device_results+0x53c>
					status = VL53LX_dynamic_zone_update(
 8004ae2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f005 f9d0 	bl	8009e8a <VL53LX_dynamic_zone_update>
 8004aea:	4603      	mov	r3, r0
 8004aec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004af0:	2300      	movs	r3, #0
 8004af2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004af6:	e015      	b.n	8004b24 <VL53LX_get_device_results+0x570>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8004af8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004afa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 8004afe:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <VL53LX_get_device_results+0x556>
 8004b06:	2103      	movs	r1, #3
 8004b08:	e000      	b.n	8004b0c <VL53LX_get_device_results+0x558>
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004b10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b12:	4413      	add	r3, r2
 8004b14:	460a      	mov	r2, r1
 8004b16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004b1a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004b1e:	3301      	adds	r3, #1
 8004b20:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004b24:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d9e5      	bls.n	8004af8 <VL53LX_get_device_results+0x544>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 8004b2c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d105      	bne.n	8004b40 <VL53LX_get_device_results+0x58c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f005 fa22 	bl	8009f7e <VL53LX_multizone_hist_bins_update>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 8004b40:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <VL53LX_get_device_results+0x5a0>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f005 fe79 	bl	800a840 <VL53LX_dynamic_xtalk_correction_corrector>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (pdev->tuning_parms.tp_hist_merge == 1)
 8004b54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b56:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d151      	bne.n	8004c02 <VL53LX_get_device_results+0x64e>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8004b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	e04c      	b.n	8004c02 <VL53LX_get_device_results+0x64e>
	} else {

		if (status == VL53LX_ERROR_NONE)
 8004b68:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d107      	bne.n	8004b80 <VL53LX_get_device_results+0x5cc>
			status = VL53LX_get_measurement_results(
 8004b70:	7afb      	ldrb	r3, [r7, #11]
 8004b72:	4619      	mov	r1, r3
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f7ff fc73 	bl	8004460 <VL53LX_get_measurement_results>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 8004b80:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10d      	bne.n	8004ba4 <VL53LX_get_device_results+0x5f0>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8004b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b8a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 8004b8e:	4618      	mov	r0, r3
 8004b90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b92:	f203 3166 	addw	r1, r3, #870	; 0x366
 8004b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b98:	f503 5299 	add.w	r2, r3, #4896	; 0x1320
 8004b9c:	3218      	adds	r2, #24
 8004b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ba0:	f000 fb86 	bl	80052b0 <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8004ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba6:	785b      	ldrb	r3, [r3, #1]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d12a      	bne.n	8004c02 <VL53LX_get_device_results+0x64e>

			if ((status == VL53LX_ERROR_NONE) &&
 8004bac:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10d      	bne.n	8004bd0 <VL53LX_get_device_results+0x61c>
				(pL->low_power_auto_range_count == 0)) {
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb6:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d109      	bne.n	8004bd0 <VL53LX_get_device_results+0x61c>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f006 fa70 	bl	800b0a2 <VL53LX_low_power_auto_setup_manual_calibration>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8004bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bca:	2201      	movs	r2, #1
 8004bcc:	709a      	strb	r2, [r3, #2]
 8004bce:	e00a      	b.n	8004be6 <VL53LX_get_device_results+0x632>
			} else if ((status == VL53LX_ERROR_NONE) &&
 8004bd0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d106      	bne.n	8004be6 <VL53LX_get_device_results+0x632>
				(pL->low_power_auto_range_count == 1)) {
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bda:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d102      	bne.n	8004be6 <VL53LX_get_device_results+0x632>
				pL->low_power_auto_range_count = 2;
 8004be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be2:	2202      	movs	r2, #2
 8004be4:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	789b      	ldrb	r3, [r3, #2]
 8004bea:	2bff      	cmp	r3, #255	; 0xff
 8004bec:	d009      	beq.n	8004c02 <VL53LX_get_device_results+0x64e>
 8004bee:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d105      	bne.n	8004c02 <VL53LX_get_device_results+0x64e>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f006 faa5 	bl	800b146 <VL53LX_low_power_auto_update_DSS>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8004c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c04:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004c08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c0a:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8004c0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c0e:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8004c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c14:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8004c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c18:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8004c1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c1e:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 8004c20:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f040 80b0 	bne.w	8004d8a <VL53LX_get_device_results+0x7d6>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8004c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c2c:	2205      	movs	r2, #5
 8004c2e:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8004c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c34:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004c38:	3301      	adds	r3, #1
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c3e:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
		zid = pdev->ll_state.rd_zone_id;
 8004c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (zid < pres->zone_results.max_zones) {
 8004c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c4e:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8004c52:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004c56:	429a      	cmp	r2, r3
 8004c58:	f080 8097 	bcs.w	8004d8a <VL53LX_get_device_results+0x7d6>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 8004c5c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
			pobjects =
 8004c60:	4613      	mov	r3, r2
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	4413      	add	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004c6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c6e:	4413      	add	r3, r2
 8004c70:	3308      	adds	r3, #8
 8004c72:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8004c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c76:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8004c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c7a:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8004c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c7e:	785a      	ldrb	r2, [r3, #1]
 8004c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c82:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8004c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c86:	789a      	ldrb	r2, [r3, #2]
 8004c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c8a:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8004c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c8e:	78da      	ldrb	r2, [r3, #3]
 8004c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c92:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 8004c94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c96:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 8004c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c9c:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 8004c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ca0:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 8004ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca6:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 8004ca8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004caa:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 8004cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8004cb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cb6:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 8004cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 8004cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cc2:	7c5a      	ldrb	r2, [r3, #17]
 8004cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc6:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8004cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cca:	7c9a      	ldrb	r2, [r3, #18]
 8004ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cce:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004cd6:	e052      	b.n	8004d7e <VL53LX_get_device_results+0x7ca>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004cd8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004cdc:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004ce0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ce2:	204c      	movs	r0, #76	; 0x4c
 8004ce4:	fb00 f303 	mul.w	r3, r0, r3
 8004ce8:	440b      	add	r3, r1
 8004cea:	3338      	adds	r3, #56	; 0x38
 8004cec:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004cee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4403      	add	r3, r0
 8004cfa:	3308      	adds	r3, #8
 8004cfc:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004cfe:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004d02:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004d06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d08:	204c      	movs	r0, #76	; 0x4c
 8004d0a:	fb00 f303 	mul.w	r3, r0, r3
 8004d0e:	440b      	add	r3, r1
 8004d10:	333c      	adds	r3, #60	; 0x3c
 8004d12:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004d14:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004d16:	4613      	mov	r3, r2
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4403      	add	r3, r0
 8004d20:	330c      	adds	r3, #12
 8004d22:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004d24:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004d28:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004d2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d2e:	204c      	movs	r0, #76	; 0x4c
 8004d30:	fb00 f303 	mul.w	r3, r0, r3
 8004d34:	440b      	add	r3, r1
 8004d36:	3354      	adds	r3, #84	; 0x54
 8004d38:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004d3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	3310      	adds	r3, #16
 8004d48:	4602      	mov	r2, r0
 8004d4a:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8004d4c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].range_status =
 8004d50:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].range_status;
 8004d54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d56:	204c      	movs	r0, #76	; 0x4c
 8004d58:	fb00 f303 	mul.w	r3, r0, r3
 8004d5c:	440b      	add	r3, r1
 8004d5e:	335e      	adds	r3, #94	; 0x5e
 8004d60:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 8004d62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d64:	4613      	mov	r3, r2
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	3312      	adds	r3, #18
 8004d70:	4602      	mov	r2, r0
 8004d72:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8004d74:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004d78:	3301      	adds	r3, #1
 8004d7a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004d7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d80:	7c9b      	ldrb	r3, [r3, #18]
 8004d82:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d3a6      	bcc.n	8004cd8 <VL53LX_get_device_results+0x724>
		}
	}



	memcpy(
 8004d8a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8004d8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f00f f9a1 	bl	80140d8 <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 8004d96:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d105      	bne.n	8004daa <VL53LX_get_device_results+0x7f6>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f002 fd4e 	bl	8007840 <VL53LX_check_ll_driver_rd_state>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8004daa:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3768      	adds	r7, #104	; 0x68
 8004db2:	46bd      	mov	sp, r7
 8004db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004db8 <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 8004dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d107      	bne.n	8004de0 <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	2203      	movs	r2, #3
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff f868 	bl	8003eac <VL53LX_init_and_start_range>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8004de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b0d2      	sub	sp, #328	; 0x148
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	1d3b      	adds	r3, r7, #4
 8004df4:	6018      	str	r0, [r3, #0]
 8004df6:	463b      	mov	r3, r7
 8004df8:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev =
 8004e00:	1d3b      	adds	r3, r7, #4
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3318      	adds	r3, #24
 8004e06:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004e0a:	1d3b      	adds	r3, r7, #4
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004e12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8004e16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e1a:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8004e1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8004e22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e26:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8004e2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8004e2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e32:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8004e36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8004e3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e3e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8004e42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 8004e46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004e4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8004e4e:	f107 030c 	add.w	r3, r7, #12
 8004e52:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c

	uint32_t   pll_period_us            = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t    i                        = 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b

	int32_t    hist_merge				= 0;
 8004e80:	f107 0308 	add.w	r3, r7, #8
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8004e88:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <VL53LX_get_histogram_bin_data+0xba>
		status = VL53LX_ReadMulti(
 8004e90:	1d38      	adds	r0, r7, #4
 8004e92:	2353      	movs	r3, #83	; 0x53
 8004e94:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8004e98:	2188      	movs	r1, #136	; 0x88
 8004e9a:	6800      	ldr	r0, [r0, #0]
 8004e9c:	f00b fefa 	bl	8010c94 <VL53LX_ReadMulti>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8004ea6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004eaa:	781a      	ldrb	r2, [r3, #0]
 8004eac:	463b      	mov	r3, r7
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8004eb4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004eb8:	785a      	ldrb	r2, [r3, #1]
 8004eba:	463b      	mov	r3, r7
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8004ec2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004ec6:	789a      	ldrb	r2, [r3, #2]
 8004ec8:	463b      	mov	r3, r7
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8004ed0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004ed4:	78da      	ldrb	r2, [r3, #3]
 8004ed6:	463b      	mov	r3, r7
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 8004ede:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	2002      	movs	r0, #2
 8004ee8:	f003 f9aa 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 8004eec:	4603      	mov	r3, r0
 8004eee:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8004ef0:	463b      	mov	r3, r7
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8004ef8:	234e      	movs	r3, #78	; 0x4e
 8004efa:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8004efe:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004f02:	f107 020c 	add.w	r2, r7, #12
 8004f06:	4413      	add	r3, r2
 8004f08:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8004f0c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004f10:	2002      	movs	r0, #2
 8004f12:	f003 f995 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 8004f16:	4603      	mov	r3, r0
 8004f18:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8004f1a:	463b      	mov	r3, r7
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8004f22:	2350      	movs	r3, #80	; 0x50
 8004f24:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8004f28:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004f2c:	f107 020c 	add.w	r2, r7, #12
 8004f30:	5cd2      	ldrb	r2, [r2, r3]
 8004f32:	463b      	mov	r3, r7
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8004f3a:	463b      	mov	r3, r7
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8004f42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f46:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8004f4a:	331c      	adds	r3, #28
 8004f4c:	801a      	strh	r2, [r3, #0]
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8004f4e:	463b      	mov	r3, r7
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8004f56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f5a:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8004f5e:	331e      	adds	r3, #30
 8004f60:	701a      	strb	r2, [r3, #0]



	i2c_buffer_offset_bytes =
 8004f62:	2351      	movs	r3, #81	; 0x51
 8004f64:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8004f68:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004f6c:	f107 020c 	add.w	r2, r7, #12
 8004f70:	5cd3      	ldrb	r3, [r2, r3]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8004f78:	2352      	movs	r3, #82	; 0x52
 8004f7a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8004f7e:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004f82:	f107 020c 	add.w	r2, r7, #12
 8004f86:	5cd2      	ldrb	r2, [r2, r3]
 8004f88:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8004f92:	234d      	movs	r3, #77	; 0x4d
 8004f94:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8004f98:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004f9c:	f107 020c 	add.w	r2, r7, #12
 8004fa0:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8004fa4:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8004fa6:	2306      	movs	r3, #6
 8004fa8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8004fac:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004fb0:	f107 020c 	add.w	r2, r7, #12
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8004fc0:	e017      	b.n	8004ff2 <VL53LX_get_histogram_bin_data+0x206>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8004fc2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004fc6:	2003      	movs	r0, #3
 8004fc8:	f003 f9d9 	bl	800837e <VL53LX_i2c_decode_uint32_t>
 8004fcc:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8004fce:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8004fd2:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8004fd4:	463b      	mov	r3, r7
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3206      	adds	r2, #6
 8004fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8004fde:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004fe2:	3303      	adds	r3, #3
 8004fe4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8004fe8:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8004fec:	3301      	adds	r3, #1
 8004fee:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8004ff2:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8004ff6:	2b17      	cmp	r3, #23
 8004ff8:	d9e3      	bls.n	8004fc2 <VL53LX_get_histogram_bin_data+0x1d6>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 8004ffa:	f107 0208 	add.w	r2, r7, #8
 8004ffe:	1d3b      	adds	r3, r7, #4
 8005000:	f248 018d 	movw	r1, #32909	; 0x808d
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	f000 fb2f 	bl	8005668 <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 800500a:	463b      	mov	r3, r7
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8005012:	2b00      	cmp	r3, #0
 8005014:	d118      	bne.n	8005048 <VL53LX_get_histogram_bin_data+0x25c>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8005016:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800501a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800501e:	3310      	adds	r3, #16
 8005020:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8005024:	2100      	movs	r1, #0
 8005026:	4618      	mov	r0, r3
 8005028:	f00f f864 	bl	80140f4 <memset>
		pdev->bin_rec_pos = 0;
 800502c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005030:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8005034:	330c      	adds	r3, #12
 8005036:	2200      	movs	r2, #0
 8005038:	701a      	strb	r2, [r3, #0]
		pdev->pos_before_next_recom = 0;
 800503a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800503e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8005042:	330d      	adds	r3, #13
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
	}

	if (hist_merge == 1)
 8005048:	f107 0308 	add.w	r3, r7, #8
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d105      	bne.n	800505e <VL53LX_get_histogram_bin_data+0x272>
		vl53lx_histo_merge(Dev, pdata);
 8005052:	463a      	mov	r2, r7
 8005054:	1d3b      	adds	r3, r7, #4
 8005056:	6811      	ldr	r1, [r2, #0]
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	f7fd ff10 	bl	8002e7e <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 800505e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005062:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8005066:	463b      	mov	r3, r7
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 800506c:	463b      	mov	r3, r7
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2200      	movs	r2, #0
 8005072:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8005074:	463b      	mov	r3, r7
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2218      	movs	r2, #24
 800507a:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800507c:	463b      	mov	r3, r7
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2218      	movs	r2, #24
 8005082:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8005084:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005088:	78da      	ldrb	r2, [r3, #3]
 800508a:	463b      	mov	r3, r7
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8005092:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005096:	799b      	ldrb	r3, [r3, #6]
 8005098:	b29b      	uxth	r3, r3
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 800509e:	463b      	mov	r3, r7
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 80050a6:	463b      	mov	r3, r7
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 80050ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050b2:	7c1b      	ldrb	r3, [r3, #16]
 80050b4:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 80050b6:	4413      	add	r3, r2
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	463b      	mov	r3, r7
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 80050c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c6:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 80050c8:	463b      	mov	r3, r7
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 80050d0:	463a      	mov	r2, r7
 80050d2:	1d3b      	adds	r3, r7, #4
 80050d4:	6811      	ldr	r1, [r2, #0]
 80050d6:	6818      	ldr	r0, [r3, #0]
 80050d8:	f003 fd20 	bl	8008b1c <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 80050dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d114      	bne.n	8005112 <VL53LX_get_histogram_bin_data+0x326>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 80050e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050ec:	791b      	ldrb	r3, [r3, #4]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 80050f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050f8:	795b      	ldrb	r3, [r3, #5]
 80050fa:	b29b      	uxth	r3, r3
		encoded_timeout =
 80050fc:	4413      	add	r3, r2
 80050fe:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 8005102:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005106:	799a      	ldrb	r2, [r3, #6]
 8005108:	463b      	mov	r3, r7
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005110:	e013      	b.n	800513a <VL53LX_get_histogram_bin_data+0x34e>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8005112:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005116:	79db      	ldrb	r3, [r3, #7]
 8005118:	b29b      	uxth	r3, r3
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 800511e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005122:	7a1b      	ldrb	r3, [r3, #8]
 8005124:	b29b      	uxth	r3, r3
		encoded_timeout =
 8005126:	4413      	add	r3, r2
 8005128:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 800512c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005130:	7a5a      	ldrb	r2, [r3, #9]
 8005132:	463b      	mov	r3, r7
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 800513a:	463b      	mov	r3, r7
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2200      	movs	r2, #0
 8005140:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8005142:	2300      	movs	r3, #0
 8005144:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8005148:	e016      	b.n	8005178 <VL53LX_get_histogram_bin_data+0x38c>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 800514a:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800514e:	463a      	mov	r2, r7
 8005150:	6812      	ldr	r2, [r2, #0]
 8005152:	4413      	add	r3, r2
 8005154:	7b1b      	ldrb	r3, [r3, #12]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	2b07      	cmp	r3, #7
 800515c:	d107      	bne.n	800516e <VL53LX_get_histogram_bin_data+0x382>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 800515e:	463b      	mov	r3, r7
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	7adb      	ldrb	r3, [r3, #11]
 8005164:	3304      	adds	r3, #4
 8005166:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8005168:	463b      	mov	r3, r7
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 800516e:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005172:	3301      	adds	r3, #1
 8005174:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8005178:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800517c:	2b05      	cmp	r3, #5
 800517e:	d9e4      	bls.n	800514a <VL53LX_get_histogram_bin_data+0x35e>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 8005180:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005184:	4618      	mov	r0, r3
 8005186:	f003 fb6a 	bl	800885e <VL53LX_decode_timeout>
 800518a:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 800518c:	463b      	mov	r3, r7
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 8005194:	463b      	mov	r3, r7
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800519c:	4618      	mov	r0, r3
 800519e:	f006 f89a 	bl	800b2d6 <VL53LX_calc_pll_period_us>
 80051a2:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 80051a6:	463b      	mov	r3, r7
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ae:	3301      	adds	r3, #1
 80051b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 80051b4:	463b      	mov	r3, r7
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53LX_duration_maths(
 80051bc:	4619      	mov	r1, r3
 80051be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051c6:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80051ca:	f006 f89b 	bl	800b304 <VL53LX_duration_maths>
 80051ce:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 80051d0:	463b      	mov	r3, r7
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 80051d8:	463b      	mov	r3, r7
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2200      	movs	r2, #0
 80051de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 80051e2:	463b      	mov	r3, r7
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	f006 f9a4 	bl	800b532 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 80051ea:	463b      	mov	r3, r7
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	f006 fdb0 	bl	800bd52 <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 80051f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051f6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80051fa:	463b      	mov	r3, r7
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8005200:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005204:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8005208:	463b      	mov	r3, r7
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 800520e:	463b      	mov	r3, r7
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	789b      	ldrb	r3, [r3, #2]
 8005214:	461a      	mov	r2, r3
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005222:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005226:	4413      	add	r3, r2
 8005228:	3302      	adds	r3, #2
 800522a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 800522e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005232:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8005234:	463b      	mov	r3, r7
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 800523c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005240:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8005242:	463b      	mov	r3, r7
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 800524a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800524e:	2200      	movs	r2, #0
 8005250:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8005252:	463b      	mov	r3, r7
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	2b11      	cmp	r3, #17
 8005260:	bf8c      	ite	hi
 8005262:	2201      	movhi	r2, #1
 8005264:	2200      	movls	r2, #0
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	2a00      	cmp	r2, #0
 800526a:	d118      	bne.n	800529e <VL53LX_get_histogram_bin_data+0x4b2>
 800526c:	2201      	movs	r2, #1
 800526e:	409a      	lsls	r2, r3
 8005270:	4b0e      	ldr	r3, [pc, #56]	; (80052ac <VL53LX_get_histogram_bin_data+0x4c0>)
 8005272:	4013      	ands	r3, r2
 8005274:	2b00      	cmp	r3, #0
 8005276:	bf14      	ite	ne
 8005278:	2301      	movne	r3, #1
 800527a:	2300      	moveq	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00d      	beq.n	800529e <VL53LX_get_histogram_bin_data+0x4b2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8005282:	463b      	mov	r3, r7
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800528a:	f003 031f 	and.w	r3, r3, #31
 800528e:	b2da      	uxtb	r2, r3
 8005290:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005294:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 8005296:	23fa      	movs	r3, #250	; 0xfa
 8005298:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 800529c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800529e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	0002200e 	.word	0x0002200e

080052b0 <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b08b      	sub	sp, #44	; 0x2c
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 80052c8:	2300      	movs	r3, #0
 80052ca:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2200      	movs	r2, #0
 80052d0:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	78da      	ldrb	r2, [r3, #3]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2200      	movs	r2, #0
 80052de:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2204      	movs	r2, #4
 80052e4:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2201      	movs	r2, #1
 80052ea:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	8a1b      	ldrh	r3, [r3, #16]
 80052f0:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	8a9b      	ldrh	r3, [r3, #20]
 80052f6:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	8a5b      	ldrh	r3, [r3, #18]
 80052fc:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 80052fe:	2300      	movs	r3, #0
 8005300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005304:	e00b      	b.n	800531e <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 8005306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	4413      	add	r3, r2
 8005310:	2200      	movs	r2, #0
 8005312:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8005314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005318:	3301      	adds	r3, #1
 800531a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800531e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005322:	2b04      	cmp	r3, #4
 8005324:	d9ef      	bls.n	8005306 <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	3314      	adds	r3, #20
 800532a:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 800532c:	2300      	movs	r3, #0
 800532e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005332:	e0fe      	b.n	8005532 <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800533a:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	2200      	movs	r2, #0
 8005340:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	78db      	ldrb	r3, [r3, #3]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	785b      	ldrb	r3, [r3, #1]
 800534e:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8005352:	2b09      	cmp	r3, #9
 8005354:	d104      	bne.n	8005360 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	2213      	movs	r2, #19
 800535a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800535e:	e007      	b.n	8005370 <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	785b      	ldrb	r3, [r3, #1]
 8005364:	f003 031f 	and.w	r3, r3, #31
 8005368:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	2200      	movs	r2, #0
 8005374:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	2200      	movs	r2, #0
 800537a:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	2200      	movs	r2, #0
 8005380:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	2200      	movs	r2, #0
 8005386:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	2200      	movs	r2, #0
 800538c:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	2200      	movs	r2, #0
 8005392:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8005394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 800539c:	2b01      	cmp	r3, #1
 800539e:	d05c      	beq.n	800545a <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 80053a0:	e0a8      	b.n	80054f4 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	789b      	ldrb	r3, [r3, #2]
 80053a6:	2b07      	cmp	r3, #7
 80053a8:	d103      	bne.n	80053b2 <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	8a7a      	ldrh	r2, [r7, #18]
 80053ae:	82da      	strh	r2, [r3, #22]
 80053b0:	e00b      	b.n	80053ca <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	789b      	ldrb	r3, [r3, #2]
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d103      	bne.n	80053c2 <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	8aba      	ldrh	r2, [r7, #20]
 80053be:	82da      	strh	r2, [r3, #22]
 80053c0:	e003      	b.n	80053ca <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	8afa      	ldrh	r2, [r7, #22]
 80053ce:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	895b      	ldrh	r3, [r3, #10]
 80053e4:	015b      	lsls	r3, r3, #5
 80053e6:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ee:	d302      	bcc.n	80053f6 <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 80053f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053f4:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 800540c:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	fb02 f303 	mul.w	r3, r2, r3
 8005416:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800541e:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	2b00      	cmp	r3, #0
 8005424:	da01      	bge.n	800542a <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 8005426:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800542a:	12db      	asrs	r3, r3, #11
 800542c:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	b21a      	sxth	r2, r3
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8005458:	e04c      	b.n	80054f4 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005470:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	8bdb      	ldrh	r3, [r3, #30]
 800547e:	015b      	lsls	r3, r3, #5
 8005480:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005488:	d302      	bcc.n	8005490 <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 800548a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800548e:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	b29a      	uxth	r2, r3
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 80054a6:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	fb02 f303 	mul.w	r3, r2, r3
 80054b0:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054b8:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	da01      	bge.n	80054c4 <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 80054c0:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80054c4:	12db      	asrs	r3, r3, #11
 80054c6:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	b21a      	sxth	r2, r3
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 80054f2:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	334c      	adds	r3, #76	; 0x4c
 8005526:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8005528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800552c:	3301      	adds	r3, #1
 800552e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005536:	2b01      	cmp	r3, #1
 8005538:	f67f aefc 	bls.w	8005334 <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2200      	movs	r2, #0
 8005540:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	785b      	ldrb	r3, [r3, #1]
 8005546:	f003 031f 	and.w	r3, r3, #31
 800554a:	2b11      	cmp	r3, #17
 800554c:	bf8c      	ite	hi
 800554e:	2201      	movhi	r2, #1
 8005550:	2200      	movls	r2, #0
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	2a00      	cmp	r2, #0
 8005556:	d116      	bne.n	8005586 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
 8005558:	2201      	movs	r2, #1
 800555a:	409a      	lsls	r2, r3
 800555c:	4b0d      	ldr	r3, [pc, #52]	; (8005594 <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 800555e:	4013      	ands	r3, r2
 8005560:	2b00      	cmp	r3, #0
 8005562:	bf14      	ite	ne
 8005564:	2301      	movne	r3, #1
 8005566:	2300      	moveq	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	785b      	ldrb	r3, [r3, #1]
 8005572:	f003 031f 	and.w	r3, r3, #31
 8005576:	b2da      	uxtb	r2, r3
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 8005584:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8005586:	bf00      	nop
 8005588:	372c      	adds	r7, #44	; 0x2c
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	0002200e 	.word	0x0002200e

08005598 <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3318      	adds	r3, #24
 80055aa:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	332c      	adds	r3, #44	; 0x2c
 80055b0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b05      	cmp	r3, #5
 80055b8:	d109      	bne.n	80055ce <VL53LX_set_zone_dss_config+0x36>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
 80055cc:	e003      	b.n	80055d6 <VL53LX_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 80055d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b085      	sub	sp, #20
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	460b      	mov	r3, r1
 80055f0:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3318      	adds	r3, #24
 80055fa:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	78fa      	ldrb	r2, [r7, #3]
 8005600:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8005602:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b086      	sub	sp, #24
 8005616:	af00      	add	r7, sp, #0
 8005618:	60f8      	str	r0, [r7, #12]
 800561a:	460b      	mov	r3, r1
 800561c:	607a      	str	r2, [r7, #4]
 800561e:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005620:	2300      	movs	r3, #0
 8005622:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3318      	adds	r3, #24
 8005628:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 800562a:	7afb      	ldrb	r3, [r7, #11]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d009      	beq.n	8005644 <VL53LX_get_dmax_calibration_data+0x32>
 8005630:	2b02      	cmp	r3, #2
 8005632:	d10f      	bne.n	8005654 <VL53LX_get_dmax_calibration_data+0x42>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8005638:	220a      	movs	r2, #10
 800563a:	4619      	mov	r1, r3
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f00e fd4b 	bl	80140d8 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 8005642:	e00a      	b.n	800565a <VL53LX_get_dmax_calibration_data+0x48>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8005648:	220a      	movs	r2, #10
 800564a:	4619      	mov	r1, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f00e fd43 	bl	80140d8 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 8005652:	e002      	b.n	800565a <VL53LX_get_dmax_calibration_data+0x48>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8005654:	23fc      	movs	r3, #252	; 0xfc
 8005656:	75fb      	strb	r3, [r7, #23]
	break;
 8005658:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800565a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8005668:	b480      	push	{r7}
 800566a:	b089      	sub	sp, #36	; 0x24
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	460b      	mov	r3, r1
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005676:	2300      	movs	r3, #0
 8005678:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3318      	adds	r3, #24
 800567e:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005686:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800568e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8005690:	897b      	ldrh	r3, [r7, #10]
 8005692:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8005696:	2bb9      	cmp	r3, #185	; 0xb9
 8005698:	f200 86ca 	bhi.w	8006430 <VL53LX_get_tuning_parm+0xdc8>
 800569c:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <VL53LX_get_tuning_parm+0x3c>)
 800569e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a2:	bf00      	nop
 80056a4:	0800598d 	.word	0x0800598d
 80056a8:	0800599d 	.word	0x0800599d
 80056ac:	080059ad 	.word	0x080059ad
 80056b0:	080059bd 	.word	0x080059bd
 80056b4:	080059cb 	.word	0x080059cb
 80056b8:	080059d9 	.word	0x080059d9
 80056bc:	080059e7 	.word	0x080059e7
 80056c0:	080059f5 	.word	0x080059f5
 80056c4:	08005a03 	.word	0x08005a03
 80056c8:	08005a11 	.word	0x08005a11
 80056cc:	08005a1f 	.word	0x08005a1f
 80056d0:	08005a2b 	.word	0x08005a2b
 80056d4:	08005a39 	.word	0x08005a39
 80056d8:	08005a47 	.word	0x08005a47
 80056dc:	08005a53 	.word	0x08005a53
 80056e0:	08005a61 	.word	0x08005a61
 80056e4:	08005a6f 	.word	0x08005a6f
 80056e8:	08005a7f 	.word	0x08005a7f
 80056ec:	08005a8f 	.word	0x08005a8f
 80056f0:	08005a9d 	.word	0x08005a9d
 80056f4:	08005aad 	.word	0x08005aad
 80056f8:	08005abb 	.word	0x08005abb
 80056fc:	08005acb 	.word	0x08005acb
 8005700:	08005adb 	.word	0x08005adb
 8005704:	08005aeb 	.word	0x08005aeb
 8005708:	08005afb 	.word	0x08005afb
 800570c:	08005b0b 	.word	0x08005b0b
 8005710:	08005b1b 	.word	0x08005b1b
 8005714:	08005b2b 	.word	0x08005b2b
 8005718:	08005b3b 	.word	0x08005b3b
 800571c:	08005b4b 	.word	0x08005b4b
 8005720:	08005b59 	.word	0x08005b59
 8005724:	08005b69 	.word	0x08005b69
 8005728:	08005b79 	.word	0x08005b79
 800572c:	08005b89 	.word	0x08005b89
 8005730:	08005b99 	.word	0x08005b99
 8005734:	08005ba9 	.word	0x08005ba9
 8005738:	08005bb9 	.word	0x08005bb9
 800573c:	08005bc9 	.word	0x08005bc9
 8005740:	08005bd9 	.word	0x08005bd9
 8005744:	08005be9 	.word	0x08005be9
 8005748:	08005bf9 	.word	0x08005bf9
 800574c:	08005c09 	.word	0x08005c09
 8005750:	08005c19 	.word	0x08005c19
 8005754:	08005c29 	.word	0x08005c29
 8005758:	08005c39 	.word	0x08005c39
 800575c:	08005c47 	.word	0x08005c47
 8005760:	08005c55 	.word	0x08005c55
 8005764:	08005c63 	.word	0x08005c63
 8005768:	08005c71 	.word	0x08005c71
 800576c:	08005c7f 	.word	0x08005c7f
 8005770:	08005c8d 	.word	0x08005c8d
 8005774:	08005c9b 	.word	0x08005c9b
 8005778:	08005ca9 	.word	0x08005ca9
 800577c:	08005cb7 	.word	0x08005cb7
 8005780:	08005cc5 	.word	0x08005cc5
 8005784:	08005cd3 	.word	0x08005cd3
 8005788:	08005ce1 	.word	0x08005ce1
 800578c:	08005cef 	.word	0x08005cef
 8005790:	08005cfd 	.word	0x08005cfd
 8005794:	08005d0b 	.word	0x08005d0b
 8005798:	08005d19 	.word	0x08005d19
 800579c:	08005d27 	.word	0x08005d27
 80057a0:	08005d35 	.word	0x08005d35
 80057a4:	08005d43 	.word	0x08005d43
 80057a8:	08005d51 	.word	0x08005d51
 80057ac:	08005d5f 	.word	0x08005d5f
 80057b0:	08005d6d 	.word	0x08005d6d
 80057b4:	08005d7b 	.word	0x08005d7b
 80057b8:	08005d89 	.word	0x08005d89
 80057bc:	08005d97 	.word	0x08005d97
 80057c0:	08005da5 	.word	0x08005da5
 80057c4:	08005db3 	.word	0x08005db3
 80057c8:	08005dc1 	.word	0x08005dc1
 80057cc:	08005dcd 	.word	0x08005dcd
 80057d0:	08005ddb 	.word	0x08005ddb
 80057d4:	08005de9 	.word	0x08005de9
 80057d8:	08005df5 	.word	0x08005df5
 80057dc:	08005e01 	.word	0x08005e01
 80057e0:	08005e0d 	.word	0x08005e0d
 80057e4:	08005e19 	.word	0x08005e19
 80057e8:	08005e25 	.word	0x08005e25
 80057ec:	08005e31 	.word	0x08005e31
 80057f0:	08005e3f 	.word	0x08005e3f
 80057f4:	08005e4d 	.word	0x08005e4d
 80057f8:	08005e5b 	.word	0x08005e5b
 80057fc:	08005e69 	.word	0x08005e69
 8005800:	08005e77 	.word	0x08005e77
 8005804:	08005e85 	.word	0x08005e85
 8005808:	08005e93 	.word	0x08005e93
 800580c:	08005ea1 	.word	0x08005ea1
 8005810:	08005eaf 	.word	0x08005eaf
 8005814:	08005ebd 	.word	0x08005ebd
 8005818:	08005ecb 	.word	0x08005ecb
 800581c:	08005ed9 	.word	0x08005ed9
 8005820:	08005ee7 	.word	0x08005ee7
 8005824:	08005ef5 	.word	0x08005ef5
 8005828:	08005f03 	.word	0x08005f03
 800582c:	08005f11 	.word	0x08005f11
 8005830:	08005f1f 	.word	0x08005f1f
 8005834:	08005f2d 	.word	0x08005f2d
 8005838:	08005f3b 	.word	0x08005f3b
 800583c:	08005f49 	.word	0x08005f49
 8005840:	08005f57 	.word	0x08005f57
 8005844:	08005f65 	.word	0x08005f65
 8005848:	08005f73 	.word	0x08005f73
 800584c:	08005f81 	.word	0x08005f81
 8005850:	08005f8f 	.word	0x08005f8f
 8005854:	08005f9d 	.word	0x08005f9d
 8005858:	08005fab 	.word	0x08005fab
 800585c:	08005fb9 	.word	0x08005fb9
 8005860:	08005fc7 	.word	0x08005fc7
 8005864:	08005fd5 	.word	0x08005fd5
 8005868:	08005fe3 	.word	0x08005fe3
 800586c:	08005ff1 	.word	0x08005ff1
 8005870:	08005fff 	.word	0x08005fff
 8005874:	0800600d 	.word	0x0800600d
 8005878:	0800601b 	.word	0x0800601b
 800587c:	08006029 	.word	0x08006029
 8005880:	0800603b 	.word	0x0800603b
 8005884:	0800604d 	.word	0x0800604d
 8005888:	0800605d 	.word	0x0800605d
 800588c:	0800606f 	.word	0x0800606f
 8005890:	08006081 	.word	0x08006081
 8005894:	08006093 	.word	0x08006093
 8005898:	080060a5 	.word	0x080060a5
 800589c:	080060b7 	.word	0x080060b7
 80058a0:	080060c9 	.word	0x080060c9
 80058a4:	080060dd 	.word	0x080060dd
 80058a8:	080060ef 	.word	0x080060ef
 80058ac:	08006101 	.word	0x08006101
 80058b0:	08006113 	.word	0x08006113
 80058b4:	08006125 	.word	0x08006125
 80058b8:	08006137 	.word	0x08006137
 80058bc:	08006149 	.word	0x08006149
 80058c0:	0800615b 	.word	0x0800615b
 80058c4:	0800616d 	.word	0x0800616d
 80058c8:	0800617f 	.word	0x0800617f
 80058cc:	0800618d 	.word	0x0800618d
 80058d0:	0800619b 	.word	0x0800619b
 80058d4:	080061a9 	.word	0x080061a9
 80058d8:	080061b7 	.word	0x080061b7
 80058dc:	080061c5 	.word	0x080061c5
 80058e0:	080061d3 	.word	0x080061d3
 80058e4:	080061e1 	.word	0x080061e1
 80058e8:	080061f3 	.word	0x080061f3
 80058ec:	08006201 	.word	0x08006201
 80058f0:	0800620f 	.word	0x0800620f
 80058f4:	0800621d 	.word	0x0800621d
 80058f8:	0800622b 	.word	0x0800622b
 80058fc:	08006239 	.word	0x08006239
 8005900:	08006247 	.word	0x08006247
 8005904:	08006255 	.word	0x08006255
 8005908:	08006263 	.word	0x08006263
 800590c:	08006271 	.word	0x08006271
 8005910:	0800627f 	.word	0x0800627f
 8005914:	0800628d 	.word	0x0800628d
 8005918:	0800629b 	.word	0x0800629b
 800591c:	080062a9 	.word	0x080062a9
 8005920:	080062b7 	.word	0x080062b7
 8005924:	080062c5 	.word	0x080062c5
 8005928:	080062d3 	.word	0x080062d3
 800592c:	080062e1 	.word	0x080062e1
 8005930:	080062ef 	.word	0x080062ef
 8005934:	080062fd 	.word	0x080062fd
 8005938:	0800630b 	.word	0x0800630b
 800593c:	08006319 	.word	0x08006319
 8005940:	08006327 	.word	0x08006327
 8005944:	08006335 	.word	0x08006335
 8005948:	08006343 	.word	0x08006343
 800594c:	08006351 	.word	0x08006351
 8005950:	0800635f 	.word	0x0800635f
 8005954:	0800636d 	.word	0x0800636d
 8005958:	0800637b 	.word	0x0800637b
 800595c:	08006389 	.word	0x08006389
 8005960:	08006397 	.word	0x08006397
 8005964:	080063a5 	.word	0x080063a5
 8005968:	080063b3 	.word	0x080063b3
 800596c:	080063c1 	.word	0x080063c1
 8005970:	080063cf 	.word	0x080063cf
 8005974:	080063dd 	.word	0x080063dd
 8005978:	080063eb 	.word	0x080063eb
 800597c:	080063f9 	.word	0x080063f9
 8005980:	08006407 	.word	0x08006407
 8005984:	08006415 	.word	0x08006415
 8005988:	08006423 	.word	0x08006423

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005992:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	601a      	str	r2, [r3, #0]
	break;
 8005998:	f000 bd51 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 80059a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	601a      	str	r2, [r3, #0]
	break;
 80059a8:	f000 bd49 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 80059b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	601a      	str	r2, [r3, #0]
	break;
 80059b8:	f000 bd41 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	601a      	str	r2, [r3, #0]
	break;
 80059c6:	f000 bd3a 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	601a      	str	r2, [r3, #0]
	break;
 80059d4:	f000 bd33 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	789b      	ldrb	r3, [r3, #2]
 80059dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	601a      	str	r2, [r3, #0]
	break;
 80059e2:	f000 bd2c 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	78db      	ldrb	r3, [r3, #3]
 80059ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	601a      	str	r2, [r3, #0]
	break;
 80059f0:	f000 bd25 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	791b      	ldrb	r3, [r3, #4]
 80059f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	601a      	str	r2, [r3, #0]
	break;
 80059fe:	f000 bd1e 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	795b      	ldrb	r3, [r3, #5]
 8005a06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	601a      	str	r2, [r3, #0]
	break;
 8005a0c:	f000 bd17 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	799b      	ldrb	r3, [r3, #6]
 8005a14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	601a      	str	r2, [r3, #0]
	break;
 8005a1a:	f000 bd10 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	601a      	str	r2, [r3, #0]
	break;
 8005a26:	f000 bd0a 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	891b      	ldrh	r3, [r3, #8]
 8005a2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	601a      	str	r2, [r3, #0]
	break;
 8005a34:	f000 bd03 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	8a1b      	ldrh	r3, [r3, #16]
 8005a3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
	break;
 8005a42:	f000 bcfc 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	601a      	str	r2, [r3, #0]
	break;
 8005a4e:	f000 bcf6 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	7e1b      	ldrb	r3, [r3, #24]
 8005a56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	601a      	str	r2, [r3, #0]
	break;
 8005a5c:	f000 bcef 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	8b5b      	ldrh	r3, [r3, #26]
 8005a64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	601a      	str	r2, [r3, #0]
	break;
 8005a6a:	f000 bce8 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8005a74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	601a      	str	r2, [r3, #0]
	break;
 8005a7a:	f000 bce0 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005a84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	601a      	str	r2, [r3, #0]
	break;
 8005a8a:	f000 bcd8 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	601a      	str	r2, [r3, #0]
	break;
 8005a98:	f000 bcd1 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005aa2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	601a      	str	r2, [r3, #0]
	break;
 8005aa8:	f000 bcc9 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ab0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	601a      	str	r2, [r3, #0]
	break;
 8005ab6:	f000 bcc2 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8005ac0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	601a      	str	r2, [r3, #0]
	break;
 8005ac6:	f000 bcba 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8005ad0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	601a      	str	r2, [r3, #0]
	break;
 8005ad6:	f000 bcb2 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8005ae0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	601a      	str	r2, [r3, #0]
	break;
 8005ae6:	f000 bcaa 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8005af0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	601a      	str	r2, [r3, #0]
	break;
 8005af6:	f000 bca2 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8005b00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	601a      	str	r2, [r3, #0]
	break;
 8005b06:	f000 bc9a 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8005b10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	601a      	str	r2, [r3, #0]
	break;
 8005b16:	f000 bc92 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	f9b3 32a6 	ldrsh.w	r3, [r3, #678]	; 0x2a6
		*ptuning_parm_value = (int32_t)(
 8005b20:	461a      	mov	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	601a      	str	r2, [r3, #0]
	break;
 8005b26:	f000 bc8a 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	f9b3 32a8 	ldrsh.w	r3, [r3, #680]	; 0x2a8
		*ptuning_parm_value = (int32_t)(
 8005b30:	461a      	mov	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	601a      	str	r2, [r3, #0]
	break;
 8005b36:	f000 bc82 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8005b40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	601a      	str	r2, [r3, #0]
	break;
 8005b46:	f000 bc7a 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	601a      	str	r2, [r3, #0]
	break;
 8005b54:	f000 bc73 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
		*ptuning_parm_value = (int32_t)(
 8005b5e:	461a      	mov	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	601a      	str	r2, [r3, #0]
	break;
 8005b64:	f000 bc6b 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	601a      	str	r2, [r3, #0]
	break;
 8005b74:	f000 bc63 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	f9b3 329e 	ldrsh.w	r3, [r3, #670]	; 0x29e
 8005b7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	601a      	str	r2, [r3, #0]
	break;
 8005b84:	f000 bc5b 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8005b8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	601a      	str	r2, [r3, #0]
	break;
 8005b94:	f000 bc53 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005b9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	601a      	str	r2, [r3, #0]
	break;
 8005ba4:	f000 bc4b 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8005bae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	601a      	str	r2, [r3, #0]
	break;
 8005bb4:	f000 bc43 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8005bbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	601a      	str	r2, [r3, #0]
	break;
 8005bc4:	f000 bc3b 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8005bce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	601a      	str	r2, [r3, #0]
	break;
 8005bd4:	f000 bc33 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 8005bde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	601a      	str	r2, [r3, #0]
	break;
 8005be4:	f000 bc2b 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8005bee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	601a      	str	r2, [r3, #0]
	break;
 8005bf4:	f000 bc23 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8005bfe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	601a      	str	r2, [r3, #0]
	break;
 8005c04:	f000 bc1b 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
		*ptuning_parm_value = (int32_t)(
 8005c0e:	461a      	mov	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	601a      	str	r2, [r3, #0]
	break;
 8005c14:	f000 bc13 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8005c1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	601a      	str	r2, [r3, #0]
	break;
 8005c24:	f000 bc0b 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
		*ptuning_parm_value = (int32_t)(
 8005c2e:	461a      	mov	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	601a      	str	r2, [r3, #0]
	break;
 8005c34:	f000 bc03 	b.w	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8005c3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	601a      	str	r2, [r3, #0]
	break;
 8005c44:	e3fb      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8005c4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	601a      	str	r2, [r3, #0]
	break;
 8005c52:	e3f4      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8005c5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	601a      	str	r2, [r3, #0]
	break;
 8005c60:	e3ed      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 8005c68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	601a      	str	r2, [r3, #0]
	break;
 8005c6e:	e3e6      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 8005c76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	601a      	str	r2, [r3, #0]
	break;
 8005c7c:	e3df      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8005c84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	601a      	str	r2, [r3, #0]
	break;
 8005c8a:	e3d8      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8005c92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	601a      	str	r2, [r3, #0]
	break;
 8005c98:	e3d1      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	f9b3 32a0 	ldrsh.w	r3, [r3, #672]	; 0x2a0
 8005ca0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	601a      	str	r2, [r3, #0]
	break;
 8005ca6:	e3ca      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8005cae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	601a      	str	r2, [r3, #0]
	break;
 8005cb4:	e3c3      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8005cbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	601a      	str	r2, [r3, #0]
	break;
 8005cc2:	e3bc      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8005cca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	601a      	str	r2, [r3, #0]
	break;
 8005cd0:	e3b5      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005cd8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	601a      	str	r2, [r3, #0]
	break;
 8005cde:	e3ae      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8005ce6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	601a      	str	r2, [r3, #0]
	break;
 8005cec:	e3a7      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8005cf4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	601a      	str	r2, [r3, #0]
	break;
 8005cfa:	e3a0      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8005d02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	601a      	str	r2, [r3, #0]
	break;
 8005d08:	e399      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	f893 3254 	ldrb.w	r3, [r3, #596]	; 0x254
 8005d10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	601a      	str	r2, [r3, #0]
	break;
 8005d16:	e392      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	f8b3 3260 	ldrh.w	r3, [r3, #608]	; 0x260
 8005d1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	601a      	str	r2, [r3, #0]
	break;
 8005d24:	e38b      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	f8b3 3262 	ldrh.w	r3, [r3, #610]	; 0x262
 8005d2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	601a      	str	r2, [r3, #0]
	break;
 8005d32:	e384      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005d3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	601a      	str	r2, [r3, #0]
	break;
 8005d40:	e37d      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	f8b3 3266 	ldrh.w	r3, [r3, #614]	; 0x266
 8005d48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	601a      	str	r2, [r3, #0]
	break;
 8005d4e:	e376      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 8005d56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	601a      	str	r2, [r3, #0]
	break;
 8005d5c:	e36f      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005d64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	601a      	str	r2, [r3, #0]
	break;
 8005d6a:	e368      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8005d72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	601a      	str	r2, [r3, #0]
	break;
 8005d78:	e361      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8005d80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	601a      	str	r2, [r3, #0]
	break;
 8005d86:	e35a      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8005d8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	601a      	str	r2, [r3, #0]
	break;
 8005d94:	e353      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8005d9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	601a      	str	r2, [r3, #0]
	break;
 8005da2:	e34c      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8005daa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	601a      	str	r2, [r3, #0]
	break;
 8005db0:	e345      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8005db8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	601a      	str	r2, [r3, #0]
	break;
 8005dbe:	e33e      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	7c1b      	ldrb	r3, [r3, #16]
 8005dc4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	601a      	str	r2, [r3, #0]
	break;
 8005dca:	e338      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005dd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	601a      	str	r2, [r3, #0]
	break;
 8005dd8:	e331      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005de0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	601a      	str	r2, [r3, #0]
	break;
 8005de6:	e32a      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	601a      	str	r2, [r3, #0]
	break;
 8005df2:	e324      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
	break;
 8005dfe:	e31e      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	8adb      	ldrh	r3, [r3, #22]
 8005e04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	601a      	str	r2, [r3, #0]
	break;
 8005e0a:	e318      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	8b1b      	ldrh	r3, [r3, #24]
 8005e10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	601a      	str	r2, [r3, #0]
	break;
 8005e16:	e312      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	601a      	str	r2, [r3, #0]
	break;
 8005e22:	e30c      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	601a      	str	r2, [r3, #0]
	break;
 8005e2e:	e306      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005e36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	601a      	str	r2, [r3, #0]
	break;
 8005e3c:	e2ff      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	601a      	str	r2, [r3, #0]
	break;
 8005e4a:	e2f8      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	601a      	str	r2, [r3, #0]
	break;
 8005e58:	e2f1      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	601a      	str	r2, [r3, #0]
	break;
 8005e66:	e2ea      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	f893 32c0 	ldrb.w	r3, [r3, #704]	; 0x2c0
 8005e6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	601a      	str	r2, [r3, #0]
	break;
 8005e74:	e2e3      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 8005e7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	601a      	str	r2, [r3, #0]
	break;
 8005e82:	e2dc      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
 8005e8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	601a      	str	r2, [r3, #0]
	break;
 8005e90:	e2d5      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	; 0x2c4
 8005e98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	601a      	str	r2, [r3, #0]
	break;
 8005e9e:	e2ce      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005ea6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	601a      	str	r2, [r3, #0]
	break;
 8005eac:	e2c7      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005eb4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	601a      	str	r2, [r3, #0]
	break;
 8005eba:	e2c0      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	; 0x2d4
 8005ec2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	601a      	str	r2, [r3, #0]
	break;
 8005ec8:	e2b9      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8005ed0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	601a      	str	r2, [r3, #0]
	break;
 8005ed6:	e2b2      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	; 0x2d6
 8005ede:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	601a      	str	r2, [r3, #0]
	break;
 8005ee4:	e2ab      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8005eec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	601a      	str	r2, [r3, #0]
	break;
 8005ef2:	e2a4      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 8005efa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	601a      	str	r2, [r3, #0]
	break;
 8005f00:	e29d      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8005f08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	601a      	str	r2, [r3, #0]
	break;
 8005f0e:	e296      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8005f16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	601a      	str	r2, [r3, #0]
	break;
 8005f1c:	e28f      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 8005f24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	601a      	str	r2, [r3, #0]
	break;
 8005f2a:	e288      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 8005f32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	601a      	str	r2, [r3, #0]
	break;
 8005f38:	e281      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8005f40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]
	break;
 8005f46:	e27a      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8005f4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	601a      	str	r2, [r3, #0]
	break;
 8005f54:	e273      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8005f5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	601a      	str	r2, [r3, #0]
	break;
 8005f62:	e26c      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8005f6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	601a      	str	r2, [r3, #0]
	break;
 8005f70:	e265      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8005f78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	601a      	str	r2, [r3, #0]
	break;
 8005f7e:	e25e      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005f86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	601a      	str	r2, [r3, #0]
	break;
 8005f8c:	e257      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8005f94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	601a      	str	r2, [r3, #0]
	break;
 8005f9a:	e250      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005fa2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	601a      	str	r2, [r3, #0]
	break;
 8005fa8:	e249      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005fb0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	601a      	str	r2, [r3, #0]
	break;
 8005fb6:	e242      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8005fbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	601a      	str	r2, [r3, #0]
	break;
 8005fc4:	e23b      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005fcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	601a      	str	r2, [r3, #0]
	break;
 8005fd2:	e234      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8005fda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	601a      	str	r2, [r3, #0]
	break;
 8005fe0:	e22d      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8005fe8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	601a      	str	r2, [r3, #0]
	break;
 8005fee:	e226      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8005ff6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	601a      	str	r2, [r3, #0]
	break;
 8005ffc:	e21f      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8006004:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	601a      	str	r2, [r3, #0]
	break;
 800600a:	e218      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8006012:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]
	break;
 8006018:	e211      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8006020:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
	break;
 8006026:	e20a      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800602e:	3318      	adds	r3, #24
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	601a      	str	r2, [r3, #0]
	break;
 8006038:	e201      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006040:	331c      	adds	r3, #28
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	601a      	str	r2, [r3, #0]
	break;
 800604a:	e1f8      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	601a      	str	r2, [r3, #0]
	break;
 800605a:	e1f0      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006062:	3304      	adds	r3, #4
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	601a      	str	r2, [r3, #0]
	break;
 800606c:	e1e7      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006074:	3308      	adds	r3, #8
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	601a      	str	r2, [r3, #0]
	break;
 800607e:	e1de      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006086:	330c      	adds	r3, #12
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	601a      	str	r2, [r3, #0]
	break;
 8006090:	e1d5      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006098:	3310      	adds	r3, #16
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	601a      	str	r2, [r3, #0]
	break;
 80060a2:	e1cc      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80060aa:	3314      	adds	r3, #20
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	601a      	str	r2, [r3, #0]
	break;
 80060b4:	e1c3      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80060bc:	331c      	adds	r3, #28
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	601a      	str	r2, [r3, #0]
	break;
 80060c6:	e1ba      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80060ce:	331e      	adds	r3, #30
 80060d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	601a      	str	r2, [r3, #0]
	break;
 80060da:	e1b0      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80060e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	601a      	str	r2, [r3, #0]
	break;
 80060ec:	e1a7      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80060f4:	3302      	adds	r3, #2
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	601a      	str	r2, [r3, #0]
	break;
 80060fe:	e19e      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006106:	3316      	adds	r3, #22
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	601a      	str	r2, [r3, #0]
	break;
 8006110:	e195      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006118:	3318      	adds	r3, #24
 800611a:	681b      	ldr	r3, [r3, #0]
		*ptuning_parm_value = (int32_t)(
 800611c:	461a      	mov	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	601a      	str	r2, [r3, #0]
	break;
 8006122:	e18c      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800612a:	3304      	adds	r3, #4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	601a      	str	r2, [r3, #0]
	break;
 8006134:	e183      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800613c:	3308      	adds	r3, #8
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	601a      	str	r2, [r3, #0]
	break;
 8006146:	e17a      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800614e:	330c      	adds	r3, #12
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	601a      	str	r2, [r3, #0]
	break;
 8006158:	e171      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006160:	3310      	adds	r3, #16
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	601a      	str	r2, [r3, #0]
	break;
 800616a:	e168      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8006172:	3310      	adds	r3, #16
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	601a      	str	r2, [r3, #0]
	break;
 800617c:	e15f      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006184:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	601a      	str	r2, [r3, #0]
	break;
 800618a:	e158      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8006192:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	601a      	str	r2, [r3, #0]
	break;
 8006198:	e151      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 80061a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	601a      	str	r2, [r3, #0]
	break;
 80061a6:	e14a      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80061ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	601a      	str	r2, [r3, #0]
	break;
 80061b4:	e143      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80061bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	601a      	str	r2, [r3, #0]
	break;
 80061c2:	e13c      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80061ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	601a      	str	r2, [r3, #0]
	break;
 80061d0:	e135      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80061d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	601a      	str	r2, [r3, #0]
	break;
 80061de:	e12e      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80061e6:	3314      	adds	r3, #20
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	601a      	str	r2, [r3, #0]
	break;
 80061f0:	e125      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 80061f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	601a      	str	r2, [r3, #0]
	break;
 80061fe:	e11e      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	; 0x186
 8006206:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	601a      	str	r2, [r3, #0]
	break;
 800620c:	e117      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	; 0x188
 8006214:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	601a      	str	r2, [r3, #0]
	break;
 800621a:	e110      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	; 0x18a
 8006222:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	601a      	str	r2, [r3, #0]
	break;
 8006228:	e109      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	; 0x18c
 8006230:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	601a      	str	r2, [r3, #0]
	break;
 8006236:	e102      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	; 0x18e
 800623e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	601a      	str	r2, [r3, #0]
	break;
 8006244:	e0fb      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	; 0x190
 800624c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	601a      	str	r2, [r3, #0]
	break;
 8006252:	e0f4      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 800625a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	601a      	str	r2, [r3, #0]
	break;
 8006260:	e0ed      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	; 0x194
 8006268:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	601a      	str	r2, [r3, #0]
	break;
 800626e:	e0e6      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	f9b3 3196 	ldrsh.w	r3, [r3, #406]	; 0x196
 8006276:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	601a      	str	r2, [r3, #0]
	break;
 800627c:	e0df      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	f9b3 3198 	ldrsh.w	r3, [r3, #408]	; 0x198
 8006284:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	601a      	str	r2, [r3, #0]
	break;
 800628a:	e0d8      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	; 0x19a
 8006292:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	601a      	str	r2, [r3, #0]
	break;
 8006298:	e0d1      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	; 0x19c
 80062a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	601a      	str	r2, [r3, #0]
	break;
 80062a6:	e0ca      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	; 0x19e
 80062ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	601a      	str	r2, [r3, #0]
	break;
 80062b4:	e0c3      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	; 0x1a0
 80062bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	601a      	str	r2, [r3, #0]
	break;
 80062c2:	e0bc      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f9b3 31a2 	ldrsh.w	r3, [r3, #418]	; 0x1a2
 80062ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	601a      	str	r2, [r3, #0]
	break;
 80062d0:	e0b5      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	f9b3 31a4 	ldrsh.w	r3, [r3, #420]	; 0x1a4
 80062d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	601a      	str	r2, [r3, #0]
	break;
 80062de:	e0ae      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	f9b3 31a6 	ldrsh.w	r3, [r3, #422]	; 0x1a6
 80062e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	601a      	str	r2, [r3, #0]
	break;
 80062ec:	e0a7      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	; 0x1a8
 80062f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	601a      	str	r2, [r3, #0]
	break;
 80062fa:	e0a0      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	f9b3 31aa 	ldrsh.w	r3, [r3, #426]	; 0x1aa
 8006302:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	601a      	str	r2, [r3, #0]
	break;
 8006308:	e099      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	; 0x1ac
 8006310:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	601a      	str	r2, [r3, #0]
	break;
 8006316:	e092      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	; 0x1ae
 800631e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	601a      	str	r2, [r3, #0]
	break;
 8006324:	e08b      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	f9b3 31b0 	ldrsh.w	r3, [r3, #432]	; 0x1b0
 800632c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	601a      	str	r2, [r3, #0]
	break;
 8006332:	e084      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	; 0x1b2
 800633a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	601a      	str	r2, [r3, #0]
	break;
 8006340:	e07d      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	f9b3 31b4 	ldrsh.w	r3, [r3, #436]	; 0x1b4
 8006348:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]
	break;
 800634e:	e076      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	f9b3 31b6 	ldrsh.w	r3, [r3, #438]	; 0x1b6
 8006356:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	601a      	str	r2, [r3, #0]
	break;
 800635c:	e06f      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	f9b3 31b8 	ldrsh.w	r3, [r3, #440]	; 0x1b8
 8006364:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	601a      	str	r2, [r3, #0]
	break;
 800636a:	e068      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	; 0x1ba
 8006372:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	601a      	str	r2, [r3, #0]
	break;
 8006378:	e061      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	f9b3 31bc 	ldrsh.w	r3, [r3, #444]	; 0x1bc
 8006380:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	601a      	str	r2, [r3, #0]
	break;
 8006386:	e05a      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 800638e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	601a      	str	r2, [r3, #0]
	break;
 8006394:	e053      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 800639c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	601a      	str	r2, [r3, #0]
	break;
 80063a2:	e04c      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 80063aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	601a      	str	r2, [r3, #0]
	break;
 80063b0:	e045      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 80063b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	601a      	str	r2, [r3, #0]
	break;
 80063be:	e03e      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 80063c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	601a      	str	r2, [r3, #0]
	break;
 80063cc:	e037      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 80063d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	601a      	str	r2, [r3, #0]
	break;
 80063da:	e030      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 80063e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	601a      	str	r2, [r3, #0]
	break;
 80063e8:	e029      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 80063f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	601a      	str	r2, [r3, #0]
	break;
 80063f6:	e022      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 80063fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	601a      	str	r2, [r3, #0]
	break;
 8006404:	e01b      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 800640c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	601a      	str	r2, [r3, #0]
	break;
 8006412:	e014      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 800641a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	601a      	str	r2, [r3, #0]
	break;
 8006420:	e00d      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 8006428:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	601a      	str	r2, [r3, #0]
	break;
 800642e:	e006      	b.n	800643e <VL53LX_get_tuning_parm+0xdd6>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006436:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8006438:	23fc      	movs	r3, #252	; 0xfc
 800643a:	77fb      	strb	r3, [r7, #31]
	break;
 800643c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800643e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3724      	adds	r7, #36	; 0x24
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop

08006450 <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006458:	2300      	movs	r3, #0
 800645a:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3318      	adds	r3, #24
 8006460:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006468:	3314      	adds	r3, #20
 800646a:	2201      	movs	r2, #1
 800646c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800646e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 800647e:	b480      	push	{r7}
 8006480:	b085      	sub	sp, #20
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006486:	2300      	movs	r3, #0
 8006488:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3318      	adds	r3, #24
 800648e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006496:	3314      	adds	r3, #20
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800649c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80064b4:	2300      	movs	r3, #0
 80064b6:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3318      	adds	r3, #24
 80064bc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80064c4:	3315      	adds	r3, #21
 80064c6:	2200      	movs	r2, #0
 80064c8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80064ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 80064da:	b480      	push	{r7}
 80064dc:	b085      	sub	sp, #20
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3318      	adds	r3, #24
 80064ea:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80064f2:	3316      	adds	r3, #22
 80064f4:	2201      	movs	r2, #1
 80064f6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80064f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006510:	2300      	movs	r3, #0
 8006512:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3318      	adds	r3, #24
 8006518:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006520:	3316      	adds	r3, #22
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006526:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8006536:	b480      	push	{r7}
 8006538:	b085      	sub	sp, #20
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800653e:	2300      	movs	r3, #0
 8006540:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3318      	adds	r3, #24
 8006546:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800654e:	3315      	adds	r3, #21
 8006550:	2201      	movs	r2, #1
 8006552:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006554:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800656c:	2300      	movs	r3, #0
 800656e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2208      	movs	r2, #8
 8006574:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	220b      	movs	r2, #11
 800657a:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006582:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800658a:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8006592:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800659a:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800659c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80065b4:	2300      	movs	r3, #0
 80065b6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2212      	movs	r2, #18
 80065c2:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	220f      	movs	r2, #15
 80065c8:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2202      	movs	r2, #2
 80065ce:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80065d6:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	220c      	movs	r2, #12
 80065dc:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80065de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80065f8:	2300      	movs	r3, #0
 80065fa:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	895b      	ldrh	r3, [r3, #10]
 8006600:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	895b      	ldrh	r3, [r3, #10]
 800661e:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2200      	movs	r2, #0
 800663c:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2200      	movs	r2, #0
 8006642:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2240      	movs	r2, #64	; 0x40
 8006648:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10d      	bne.n	800666e <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d108      	bne.n	800666e <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d103      	bne.n	800666e <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2200      	movs	r2, #0
 800666a:	741a      	strb	r2, [r3, #16]
 800666c:	e002      	b.n	8006674 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2201      	movs	r2, #1
 8006672:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 8006674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d114      	bne.n	80066a6 <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 8006680:	2b01      	cmp	r3, #1
 8006682:	d110      	bne.n	80066a6 <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	6818      	ldr	r0, [r3, #0]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	7d9b      	ldrb	r3, [r3, #22]
 8006698:	f001 ffa0 	bl	80085dc <VL53LX_calc_range_ignore_threshold>
 800669c:	4603      	mov	r3, r0
 800669e:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	831a      	strh	r2, [r3, #24]
 80066a4:	e002      	b.n	80066ac <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2200      	movs	r2, #0
 80066aa:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	f64f 72ce 	movw	r2, #65486	; 0xffce
 80066b2:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2232      	movs	r2, #50	; 0x32
 80066b8:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80066c0:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	228c      	movs	r2, #140	; 0x8c
 80066c6:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80066c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80066dc:	2300      	movs	r3, #0
 80066de:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80066e6:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80066ee:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2207      	movs	r2, #7
 80066f4:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f643 2298 	movw	r2, #15000	; 0x3a98
 80066fc:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f242 7210 	movw	r2, #10000	; 0x2710
 8006704:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f64f 72ba 	movw	r2, #65466	; 0xffba
 800670c:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2246      	movs	r2, #70	; 0x46
 8006712:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f44f 7220 	mov.w	r2, #640	; 0x280
 800671a:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	228c      	movs	r2, #140	; 0x8c
 8006720:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8006722:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 8006732:	b480      	push	{r7}
 8006734:	b085      	sub	sp, #20
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800673a:	2300      	movs	r3, #0
 800673c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006744:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f643 2298 	movw	r2, #15000	; 0x3a98
 800674c:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006754:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800675c:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2208      	movs	r2, #8
 8006762:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2228      	movs	r2, #40	; 0x28
 8006768:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2209      	movs	r2, #9
 800676e:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006770:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006788:	2300      	movs	r3, #0
 800678a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006792:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f643 2298 	movw	r2, #15000	; 0x3a98
 800679a:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067a2:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80067aa:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2210      	movs	r2, #16
 80067b0:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2208      	movs	r2, #8
 80067b6:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80067b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	4603      	mov	r3, r0
 80067d0:	6039      	str	r1, [r7, #0]
 80067d2:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2204      	movs	r2, #4
 80067dc:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2201      	movs	r2, #1
 80067e2:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2201      	movs	r2, #1
 80067e8:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2202      	movs	r2, #2
 80067ee:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2201      	movs	r2, #1
 80067f4:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2250      	movs	r2, #80	; 0x50
 80067fa:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2264      	movs	r2, #100	; 0x64
 8006800:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	f241 023d 	movw	r2, #4157	; 0x103d
 8006808:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2210      	movs	r2, #16
 800680e:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2232      	movs	r2, #50	; 0x32
 8006814:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2264      	movs	r2, #100	; 0x64
 800681a:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2201      	movs	r2, #1
 8006820:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	22b4      	movs	r2, #180	; 0xb4
 8006826:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2200      	movs	r2, #0
 800682c:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8006834:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2208      	movs	r2, #8
 800683a:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2288      	movs	r2, #136	; 0x88
 8006842:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2208      	movs	r2, #8
 800684a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800685c:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2200      	movs	r2, #0
 8006862:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	79fa      	ldrb	r2, [r7, #7]
 8006868:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8006872:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2232      	movs	r2, #50	; 0x32
 8006878:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006880:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	228c      	movs	r2, #140	; 0x8c
 8006886:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2250      	movs	r2, #80	; 0x50
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2232      	movs	r2, #50	; 0x32
 8006894:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 8006896:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b085      	sub	sp, #20
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	221e      	movs	r2, #30
 80068b6:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	220e      	movs	r2, #14
 80068bc:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f642 7294 	movw	r2, #12180	; 0x2f94
 80068c4:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	220e      	movs	r2, #14
 80068ca:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	220a      	movs	r2, #10
 80068d0:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2206      	movs	r2, #6
 80068d6:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	220e      	movs	r2, #14
 80068dc:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	220a      	movs	r2, #10
 80068e2:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2206      	movs	r2, #6
 80068e8:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2209      	movs	r2, #9
 80068ee:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2205      	movs	r2, #5
 80068f4:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2203      	movs	r2, #3
 80068fa:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2206      	movs	r2, #6
 8006900:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2206      	movs	r2, #6
 8006906:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2206      	movs	r2, #6
 800690c:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2202      	movs	r2, #2
 8006912:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2221      	movs	r2, #33	; 0x21
 8006918:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	223c      	movs	r2, #60	; 0x3c
 800692a:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	223c      	movs	r2, #60	; 0x3c
 8006930:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	223c      	movs	r2, #60	; 0x3c
 8006936:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2280      	movs	r2, #128	; 0x80
 800693c:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2280      	movs	r2, #128	; 0x80
 8006942:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2280      	movs	r2, #128	; 0x80
 8006948:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2208      	movs	r2, #8
 800694e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2210      	movs	r2, #16
 8006956:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2202      	movs	r2, #2
 8006966:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2202      	movs	r2, #2
 8006976:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006990:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f640 22be 	movw	r2, #2750	; 0xabe
 800699a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	22fa      	movs	r2, #250	; 0xfa
 80069a2:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069ac:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80069b6:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80069c0:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80069ca:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80069d4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f64f 7238 	movw	r2, #65336	; 0xff38
 80069de:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	22c8      	movs	r2, #200	; 0xc8
 80069e6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80069f0:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8006a02:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f640 32ea 	movw	r2, #3050	; 0xbea
 8006a0c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006a16:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f640 32ea 	movw	r2, #3050	; 0xbea
 8006a20:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006a2a:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f641 0238 	movw	r2, #6200	; 0x1838
 8006a34:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	22fa      	movs	r2, #250	; 0xfa
 8006a4c:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006a56:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8006a60:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f241 1294 	movw	r2, #4500	; 0x1194
 8006a6a:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f64f 7238 	movw	r2, #65336	; 0xff38
 8006a74:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	22c8      	movs	r2, #200	; 0xc8
 8006a7c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f640 720a 	movw	r2, #3850	; 0xf0a
 8006aa6:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006ab0:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f640 720a 	movw	r2, #3850	; 0xf0a
 8006aba:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006afc:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006b04:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006b0c:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006b14:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b1c:	639a      	str	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006b24:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f242 3228 	movw	r2, #9000	; 0x2328
 8006b2c:	641a      	str	r2, [r3, #64]	; 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f241 7270 	movw	r2, #6000	; 0x1770
 8006b34:	645a      	str	r2, [r3, #68]	; 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006b3c:	649a      	str	r2, [r3, #72]	; 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f242 3228 	movw	r2, #9000	; 0x2328
 8006b44:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f241 7270 	movw	r2, #6000	; 0x1770
 8006b4c:	651a      	str	r2, [r3, #80]	; 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b54:	655a      	str	r2, [r3, #84]	; 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006b5c:	659a      	str	r2, [r3, #88]	; 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006b64:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006b6c:	661a      	str	r2, [r3, #96]	; 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006b74:	665a      	str	r2, [r3, #100]	; 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f24f 6218 	movw	r2, #63000	; 0xf618
 8006b7c:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006b84:	671a      	str	r2, [r3, #112]	; 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006b8c:	675a      	str	r2, [r3, #116]	; 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006b94:	679a      	str	r2, [r3, #120]	; 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	669a      	str	r2, [r3, #104]	; 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006ba2:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006baa:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2206      	movs	r2, #6
 8006bca:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b085      	sub	sp, #20
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006be6:	2300      	movs	r3, #0
 8006be8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006bf0:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2238      	movs	r2, #56	; 0x38
 8006bf6:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2270      	movs	r2, #112	; 0x70
 8006c02:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2210      	movs	r2, #16
 8006c08:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2264      	movs	r2, #100	; 0x64
 8006c0e:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c16:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	220f      	movs	r2, #15
 8006c1c:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2234      	movs	r2, #52	; 0x34
 8006c22:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	22c8      	movs	r2, #200	; 0xc8
 8006c28:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006c30:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006c38:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b087      	sub	sp, #28
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	607a      	str	r2, [r7, #4]
 8006c56:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006c62:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2211      	movs	r2, #17
 8006ca4:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2202      	movs	r2, #2
 8006caa:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2208      	movs	r2, #8
 8006cbc:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8006cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd0:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	22ff      	movs	r2, #255	; 0xff
 8006cfe:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	220b      	movs	r2, #11
 8006d38:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	220d      	movs	r2, #13
 8006d4c:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8006d74:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2238      	movs	r2, #56	; 0x38
 8006d80:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	22ff      	movs	r2, #255	; 0xff
 8006d86:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2200      	movs	r2, #0
 8006d92:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	221a      	movs	r2, #26
 8006d98:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2220      	movs	r2, #32
 8006da4:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2201      	movs	r2, #1
 8006daa:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	22cc      	movs	r2, #204	; 0xcc
 8006db0:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	220b      	movs	r2, #11
 8006db6:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	22f5      	movs	r2, #245	; 0xf5
 8006dc2:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2209      	movs	r2, #9
 8006dc8:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2208      	movs	r2, #8
 8006dde:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	2278      	movs	r2, #120	; 0x78
 8006de4:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2200      	movs	r2, #0
 8006dea:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2200      	movs	r2, #0
 8006df0:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2207      	movs	r2, #7
 8006df6:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2221      	movs	r2, #33	; 0x21
 8006dfc:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2243      	movs	r2, #67	; 0x43
 8006e02:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2210      	movs	r2, #16
 8006e08:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2232      	movs	r2, #50	; 0x32
 8006e0e:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2254      	movs	r2, #84	; 0x54
 8006e14:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2207      	movs	r2, #7
 8006e1a:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2221      	movs	r2, #33	; 0x21
 8006e20:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2243      	movs	r2, #67	; 0x43
 8006e26:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2210      	movs	r2, #16
 8006e2c:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	2202      	movs	r2, #2
 8006e32:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2243      	movs	r2, #67	; 0x43
 8006e38:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2205      	movs	r2, #5
 8006e3e:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2200      	movs	r2, #0
 8006e44:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2207      	movs	r2, #7
 8006e4a:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2221      	movs	r2, #33	; 0x21
 8006e50:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2243      	movs	r2, #67	; 0x43
 8006e56:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2210      	movs	r2, #16
 8006e5c:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2232      	movs	r2, #50	; 0x32
 8006e62:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2254      	movs	r2, #84	; 0x54
 8006e68:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e70:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e78:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8006e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e82:	2205      	movs	r2, #5
 8006e84:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8006e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e88:	2200      	movs	r2, #0
 8006e8a:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8006e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8e:	220f      	movs	r2, #15
 8006e90:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8006e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e94:	220f      	movs	r2, #15
 8006e96:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8006e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9a:	2208      	movs	r2, #8
 8006e9c:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8006e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea0:	2208      	movs	r2, #8
 8006ea2:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	2200      	movs	r2, #0
 8006eae:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	220b      	movs	r2, #11
 8006eca:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	2209      	movs	r2, #9
 8006ed0:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8006ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed4:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8006eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006edc:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8006ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eea:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8006ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	22c7      	movs	r2, #199	; 0xc7
 8006f00:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	22ff      	movs	r2, #255	; 0xff
 8006f06:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	22db      	movs	r2, #219	; 0xdb
 8006f0c:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	2202      	movs	r2, #2
 8006f12:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	2200      	movs	r2, #0
 8006f18:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	2201      	movs	r2, #1
 8006f24:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	2221      	movs	r2, #33	; 0x21
 8006f2a:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8006f2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b090      	sub	sp, #64	; 0x40
 8006f40:	af0a      	add	r7, sp, #40	; 0x28
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f50:	9303      	str	r3, [sp, #12]
 8006f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f54:	9302      	str	r3, [sp, #8]
 8006f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f58:	9301      	str	r3, [sp, #4]
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	68b8      	ldr	r0, [r7, #8]
 8006f66:	f7ff fe70 	bl	8006c4a <VL53LX_preset_mode_standard_ranging>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8006f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d171      	bne.n	800705a <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006f7c:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	9308      	str	r3, [sp, #32]
 8006f82:	2305      	movs	r3, #5
 8006f84:	9307      	str	r3, [sp, #28]
 8006f86:	2304      	movs	r3, #4
 8006f88:	9306      	str	r3, [sp, #24]
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	9305      	str	r3, [sp, #20]
 8006f8e:	2302      	movs	r3, #2
 8006f90:	9304      	str	r3, [sp, #16]
 8006f92:	2301      	movs	r3, #1
 8006f94:	9303      	str	r3, [sp, #12]
 8006f96:	2300      	movs	r3, #0
 8006f98:	9302      	str	r3, [sp, #8]
 8006f9a:	2304      	movs	r3, #4
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	2007      	movs	r0, #7
 8006faa:	f000 ffab 	bl	8007f04 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8006fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb0:	3302      	adds	r3, #2
 8006fb2:	9308      	str	r3, [sp, #32]
 8006fb4:	2305      	movs	r3, #5
 8006fb6:	9307      	str	r3, [sp, #28]
 8006fb8:	2304      	movs	r3, #4
 8006fba:	9306      	str	r3, [sp, #24]
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	9305      	str	r3, [sp, #20]
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	9304      	str	r3, [sp, #16]
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	9303      	str	r3, [sp, #12]
 8006fc8:	2300      	movs	r3, #0
 8006fca:	9302      	str	r3, [sp, #8]
 8006fcc:	2304      	movs	r3, #4
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	2100      	movs	r1, #0
 8006fda:	2007      	movs	r0, #7
 8006fdc:	f001 f822 	bl	8008024 <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	2209      	movs	r2, #9
 8006fe4:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	220b      	movs	r2, #11
 8006fea:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	2209      	movs	r2, #9
 8006ff0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	220b      	movs	r2, #11
 8006ff6:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	2220      	movs	r2, #32
 8007002:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	2200      	movs	r2, #0
 8007008:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	221a      	movs	r2, #26
 800700e:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	2200      	movs	r2, #0
 8007014:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	2228      	movs	r2, #40	; 0x28
 800701a:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	2200      	movs	r2, #0
 8007020:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	2221      	movs	r2, #33	; 0x21
 8007026:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	22f5      	movs	r2, #245	; 0xf5
 800702c:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2208      	movs	r2, #8
 8007032:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2288      	movs	r2, #136	; 0x88
 800703a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	68b9      	ldr	r1, [r7, #8]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f9e6 	bl	800741a <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	229b      	movs	r2, #155	; 0x9b
 8007052:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007056:	2226      	movs	r2, #38	; 0x26
 8007058:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800705a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b090      	sub	sp, #64	; 0x40
 800706a:	af0a      	add	r7, sp, #40	; 0x28
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	607a      	str	r2, [r7, #4]
 8007072:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007074:	2300      	movs	r3, #0
 8007076:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	9304      	str	r3, [sp, #16]
 800707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707e:	9303      	str	r3, [sp, #12]
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	9302      	str	r3, [sp, #8]
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	9301      	str	r3, [sp, #4]
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	68b9      	ldr	r1, [r7, #8]
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f7ff ff52 	bl	8006f3c <VL53LX_preset_mode_histogram_ranging>
 8007098:	4603      	mov	r3, r0
 800709a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 800709c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d178      	bne.n	8007196 <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	9308      	str	r3, [sp, #32]
 80070a8:	2305      	movs	r3, #5
 80070aa:	9307      	str	r3, [sp, #28]
 80070ac:	2304      	movs	r3, #4
 80070ae:	9306      	str	r3, [sp, #24]
 80070b0:	2303      	movs	r3, #3
 80070b2:	9305      	str	r3, [sp, #20]
 80070b4:	2302      	movs	r3, #2
 80070b6:	9304      	str	r3, [sp, #16]
 80070b8:	2301      	movs	r3, #1
 80070ba:	9303      	str	r3, [sp, #12]
 80070bc:	2300      	movs	r3, #0
 80070be:	9302      	str	r3, [sp, #8]
 80070c0:	2304      	movs	r3, #4
 80070c2:	9301      	str	r3, [sp, #4]
 80070c4:	2303      	movs	r3, #3
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	2302      	movs	r3, #2
 80070ca:	2201      	movs	r2, #1
 80070cc:	2100      	movs	r1, #0
 80070ce:	2007      	movs	r0, #7
 80070d0:	f000 ff18 	bl	8007f04 <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80070d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d6:	3302      	adds	r3, #2
 80070d8:	9308      	str	r3, [sp, #32]
 80070da:	2305      	movs	r3, #5
 80070dc:	9307      	str	r3, [sp, #28]
 80070de:	2304      	movs	r3, #4
 80070e0:	9306      	str	r3, [sp, #24]
 80070e2:	2303      	movs	r3, #3
 80070e4:	9305      	str	r3, [sp, #20]
 80070e6:	2302      	movs	r3, #2
 80070e8:	9304      	str	r3, [sp, #16]
 80070ea:	2301      	movs	r3, #1
 80070ec:	9303      	str	r3, [sp, #12]
 80070ee:	2300      	movs	r3, #0
 80070f0:	9302      	str	r3, [sp, #8]
 80070f2:	2304      	movs	r3, #4
 80070f4:	9301      	str	r3, [sp, #4]
 80070f6:	2303      	movs	r3, #3
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	2302      	movs	r3, #2
 80070fc:	2201      	movs	r2, #1
 80070fe:	2100      	movs	r1, #0
 8007100:	2007      	movs	r0, #7
 8007102:	f000 ff8f 	bl	8008024 <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	68b9      	ldr	r1, [r7, #8]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f982 	bl	800741a <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	2209      	movs	r2, #9
 800711a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	220b      	movs	r2, #11
 8007120:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	2200      	movs	r2, #0
 8007126:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	2221      	movs	r2, #33	; 0x21
 800712c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	2200      	movs	r2, #0
 8007132:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	221b      	movs	r2, #27
 8007138:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	2200      	movs	r2, #0
 800713e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	2229      	movs	r2, #41	; 0x29
 8007144:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	2200      	movs	r2, #0
 800714a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	2222      	movs	r2, #34	; 0x22
 8007150:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2209      	movs	r2, #9
 8007156:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	22f5      	movs	r2, #245	; 0xf5
 800715c:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	2209      	movs	r2, #9
 8007162:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	220b      	movs	r2, #11
 8007168:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 800716a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716c:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2208      	movs	r2, #8
 800717e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2288      	movs	r2, #136	; 0x88
 8007186:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	229b      	movs	r2, #155	; 0x9b
 800718e:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	2226      	movs	r2, #38	; 0x26
 8007194:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007196:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b090      	sub	sp, #64	; 0x40
 80071a6:	af0a      	add	r7, sp, #40	; 0x28
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	60b9      	str	r1, [r7, #8]
 80071ac:	607a      	str	r2, [r7, #4]
 80071ae:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80071b0:	2300      	movs	r3, #0
 80071b2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	9304      	str	r3, [sp, #16]
 80071b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ba:	9303      	str	r3, [sp, #12]
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	9302      	str	r3, [sp, #8]
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	9301      	str	r3, [sp, #4]
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff feb4 	bl	8006f3c <VL53LX_preset_mode_histogram_ranging>
 80071d4:	4603      	mov	r3, r0
 80071d6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80071d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d178      	bne.n	80072d2 <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	9308      	str	r3, [sp, #32]
 80071e4:	2303      	movs	r3, #3
 80071e6:	9307      	str	r3, [sp, #28]
 80071e8:	2302      	movs	r3, #2
 80071ea:	9306      	str	r3, [sp, #24]
 80071ec:	2301      	movs	r3, #1
 80071ee:	9305      	str	r3, [sp, #20]
 80071f0:	2302      	movs	r3, #2
 80071f2:	9304      	str	r3, [sp, #16]
 80071f4:	2301      	movs	r3, #1
 80071f6:	9303      	str	r3, [sp, #12]
 80071f8:	2300      	movs	r3, #0
 80071fa:	9302      	str	r3, [sp, #8]
 80071fc:	2302      	movs	r3, #2
 80071fe:	9301      	str	r3, [sp, #4]
 8007200:	2302      	movs	r3, #2
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	2301      	movs	r3, #1
 8007206:	2201      	movs	r2, #1
 8007208:	2100      	movs	r1, #0
 800720a:	2007      	movs	r0, #7
 800720c:	f000 fe7a 	bl	8007f04 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	3302      	adds	r3, #2
 8007214:	9308      	str	r3, [sp, #32]
 8007216:	2303      	movs	r3, #3
 8007218:	9307      	str	r3, [sp, #28]
 800721a:	2302      	movs	r3, #2
 800721c:	9306      	str	r3, [sp, #24]
 800721e:	2301      	movs	r3, #1
 8007220:	9305      	str	r3, [sp, #20]
 8007222:	2302      	movs	r3, #2
 8007224:	9304      	str	r3, [sp, #16]
 8007226:	2301      	movs	r3, #1
 8007228:	9303      	str	r3, [sp, #12]
 800722a:	2300      	movs	r3, #0
 800722c:	9302      	str	r3, [sp, #8]
 800722e:	2302      	movs	r3, #2
 8007230:	9301      	str	r3, [sp, #4]
 8007232:	2302      	movs	r3, #2
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	2301      	movs	r3, #1
 8007238:	2201      	movs	r2, #1
 800723a:	2100      	movs	r1, #0
 800723c:	2007      	movs	r0, #7
 800723e:	f000 fef1 	bl	8008024 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	68b9      	ldr	r1, [r7, #8]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f8e4 	bl	800741a <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	2205      	movs	r2, #5
 8007256:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	2207      	movs	r2, #7
 800725c:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	2200      	movs	r2, #0
 8007262:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	2236      	movs	r2, #54	; 0x36
 8007268:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	2200      	movs	r2, #0
 800726e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	2228      	movs	r2, #40	; 0x28
 8007274:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	2200      	movs	r2, #0
 800727a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	2244      	movs	r2, #68	; 0x44
 8007280:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	2200      	movs	r2, #0
 8007286:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	2233      	movs	r2, #51	; 0x33
 800728c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2205      	movs	r2, #5
 8007292:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	22f5      	movs	r2, #245	; 0xf5
 8007298:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	2205      	movs	r2, #5
 800729e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	2207      	movs	r2, #7
 80072a4:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 80072a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a8:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b0:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2208      	movs	r2, #8
 80072ba:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2248      	movs	r2, #72	; 0x48
 80072c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 80072c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c8:	229b      	movs	r2, #155	; 0x9b
 80072ca:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80072cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ce:	2226      	movs	r2, #38	; 0x26
 80072d0:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80072d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b090      	sub	sp, #64	; 0x40
 80072e2:	af0a      	add	r7, sp, #40	; 0x28
 80072e4:	60f8      	str	r0, [r7, #12]
 80072e6:	60b9      	str	r1, [r7, #8]
 80072e8:	607a      	str	r2, [r7, #4]
 80072ea:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80072ec:	2300      	movs	r3, #0
 80072ee:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 80072f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f2:	9304      	str	r3, [sp, #16]
 80072f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f6:	9303      	str	r3, [sp, #12]
 80072f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fa:	9302      	str	r3, [sp, #8]
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	9301      	str	r3, [sp, #4]
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	68b9      	ldr	r1, [r7, #8]
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f7ff fe16 	bl	8006f3c <VL53LX_preset_mode_histogram_ranging>
 8007310:	4603      	mov	r3, r0
 8007312:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007314:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d178      	bne.n	800740e <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	9308      	str	r3, [sp, #32]
 8007320:	2302      	movs	r3, #2
 8007322:	9307      	str	r3, [sp, #28]
 8007324:	2302      	movs	r3, #2
 8007326:	9306      	str	r3, [sp, #24]
 8007328:	2301      	movs	r3, #1
 800732a:	9305      	str	r3, [sp, #20]
 800732c:	2301      	movs	r3, #1
 800732e:	9304      	str	r3, [sp, #16]
 8007330:	2301      	movs	r3, #1
 8007332:	9303      	str	r3, [sp, #12]
 8007334:	2300      	movs	r3, #0
 8007336:	9302      	str	r3, [sp, #8]
 8007338:	2301      	movs	r3, #1
 800733a:	9301      	str	r3, [sp, #4]
 800733c:	2301      	movs	r3, #1
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	2301      	movs	r3, #1
 8007342:	2200      	movs	r2, #0
 8007344:	2107      	movs	r1, #7
 8007346:	2007      	movs	r0, #7
 8007348:	f000 fddc 	bl	8007f04 <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	3302      	adds	r3, #2
 8007350:	9308      	str	r3, [sp, #32]
 8007352:	2302      	movs	r3, #2
 8007354:	9307      	str	r3, [sp, #28]
 8007356:	2302      	movs	r3, #2
 8007358:	9306      	str	r3, [sp, #24]
 800735a:	2301      	movs	r3, #1
 800735c:	9305      	str	r3, [sp, #20]
 800735e:	2301      	movs	r3, #1
 8007360:	9304      	str	r3, [sp, #16]
 8007362:	2301      	movs	r3, #1
 8007364:	9303      	str	r3, [sp, #12]
 8007366:	2300      	movs	r3, #0
 8007368:	9302      	str	r3, [sp, #8]
 800736a:	2301      	movs	r3, #1
 800736c:	9301      	str	r3, [sp, #4]
 800736e:	2301      	movs	r3, #1
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	2301      	movs	r3, #1
 8007374:	2200      	movs	r2, #0
 8007376:	2107      	movs	r1, #7
 8007378:	2007      	movs	r0, #7
 800737a:	f000 fe53 	bl	8008024 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	68b9      	ldr	r1, [r7, #8]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f846 	bl	800741a <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	2203      	movs	r2, #3
 8007392:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	2205      	movs	r2, #5
 8007398:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	2200      	movs	r2, #0
 800739e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	2252      	movs	r2, #82	; 0x52
 80073a4:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	2200      	movs	r2, #0
 80073aa:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	2237      	movs	r2, #55	; 0x37
 80073b0:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	2200      	movs	r2, #0
 80073b6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	2266      	movs	r2, #102	; 0x66
 80073bc:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	2200      	movs	r2, #0
 80073c2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	2244      	movs	r2, #68	; 0x44
 80073c8:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2203      	movs	r2, #3
 80073ce:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	22f5      	movs	r2, #245	; 0xf5
 80073d4:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	2203      	movs	r2, #3
 80073da:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	2205      	movs	r2, #5
 80073e0:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 80073ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ec:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2208      	movs	r2, #8
 80073f6:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2228      	movs	r2, #40	; 0x28
 80073fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	22bb      	movs	r2, #187	; 0xbb
 8007406:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	2226      	movs	r2, #38	; 0x26
 800740c:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800740e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3718      	adds	r7, #24
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 800741a:	b480      	push	{r7}
 800741c:	b085      	sub	sp, #20
 800741e:	af00      	add	r7, sp, #0
 8007420:	60f8      	str	r0, [r7, #12]
 8007422:	60b9      	str	r1, [r7, #8]
 8007424:	607a      	str	r2, [r7, #4]
 8007426:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	79db      	ldrb	r3, [r3, #7]
 800745c:	b29b      	uxth	r3, r3
				<< 8)
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	7a1b      	ldrb	r3, [r3, #8]
 8007466:	b29b      	uxth	r3, r3
 8007468:	4413      	add	r3, r2
 800746a:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	785b      	ldrb	r3, [r3, #1]
 80074a4:	b29b      	uxth	r3, r3
				<< 8)
 80074a6:	021b      	lsls	r3, r3, #8
 80074a8:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	789b      	ldrb	r3, [r3, #2]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	4413      	add	r3, r2
 80074b2:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	78db      	ldrb	r3, [r3, #3]
 80074bc:	b29b      	uxth	r3, r3
				<< 8)
 80074be:	021b      	lsls	r3, r3, #8
 80074c0:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	791b      	ldrb	r3, [r3, #4]
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	4413      	add	r3, r2
 80074ca:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 80074f8:	bf00      	nop
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	79db      	ldrb	r3, [r3, #7]
 8007544:	b29b      	uxth	r3, r3
				<< 8)
 8007546:	021b      	lsls	r3, r3, #8
 8007548:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	7a1b      	ldrb	r3, [r3, #8]
 800754e:	b29b      	uxth	r3, r3
 8007550:	4413      	add	r3, r2
 8007552:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	785b      	ldrb	r3, [r3, #1]
 8007584:	b29b      	uxth	r3, r3
				<< 8)
 8007586:	021b      	lsls	r3, r3, #8
 8007588:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	789b      	ldrb	r3, [r3, #2]
 800758e:	b29b      	uxth	r3, r3
 8007590:	4413      	add	r3, r2
 8007592:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	78db      	ldrb	r3, [r3, #3]
 800759c:	b29b      	uxth	r3, r3
				<< 8)
 800759e:	021b      	lsls	r3, r3, #8
 80075a0:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	791b      	ldrb	r3, [r3, #4]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	4413      	add	r3, r2
 80075aa:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 80075c0:	bf00      	nop
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3318      	adds	r3, #24
 80075d8:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80075f8:	bf00      	nop
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3318      	adds	r3, #24
 8007614:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	332c      	adds	r3, #44	; 0x2c
 800761a:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	78fa      	ldrb	r2, [r7, #3]
 8007620:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2200      	movs	r2, #0
 8007626:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2202      	movs	r2, #2
 800762c:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2200      	movs	r2, #0
 8007632:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2200      	movs	r2, #0
 8007638:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	78fa      	ldrb	r2, [r7, #3]
 800763e:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2200      	movs	r2, #0
 8007644:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2202      	movs	r2, #2
 800764a:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2200      	movs	r2, #0
 8007650:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	2200      	movs	r2, #0
 8007656:	735a      	strb	r2, [r3, #13]

}
 8007658:	bf00      	nop
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 800766c:	2300      	movs	r3, #0
 800766e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3318      	adds	r3, #24
 8007674:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	332c      	adds	r3, #44	; 0x2c
 800767a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007682:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d115      	bne.n	80076b6 <VL53LX_update_ll_driver_rd_state+0x52>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2203      	movs	r2, #3
 800768e:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2202      	movs	r2, #2
 80076a6:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	735a      	strb	r2, [r3, #13]
 80076b4:	e0be      	b.n	8007834 <VL53LX_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	7a1b      	ldrb	r3, [r3, #8]
 80076ba:	2bff      	cmp	r3, #255	; 0xff
 80076bc:	d103      	bne.n	80076c6 <VL53LX_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2280      	movs	r2, #128	; 0x80
 80076c2:	721a      	strb	r2, [r3, #8]
 80076c4:	e005      	b.n	80076d2 <VL53LX_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	7a1b      	ldrb	r3, [r3, #8]
 80076ca:	3301      	adds	r3, #1
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	7a19      	ldrb	r1, [r3, #8]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f103 0209 	add.w	r2, r3, #9
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	330a      	adds	r3, #10
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f002 fcf6 	bl	800a0d2 <VL53LX_update_internal_stream_counters>
 80076e6:	4603      	mov	r3, r0
 80076e8:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	7adb      	ldrb	r3, [r3, #11]
 80076ee:	f083 0302 	eor.w	r3, r3, #2
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	79db      	ldrb	r3, [r3, #7]
 80076fc:	3b03      	subs	r3, #3
 80076fe:	2b05      	cmp	r3, #5
 8007700:	f200 8082 	bhi.w	8007808 <VL53LX_update_ll_driver_rd_state+0x1a4>
 8007704:	a201      	add	r2, pc, #4	; (adr r2, 800770c <VL53LX_update_ll_driver_rd_state+0xa8>)
 8007706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770a:	bf00      	nop
 800770c:	08007725 	.word	0x08007725
 8007710:	08007809 	.word	0x08007809
 8007714:	08007809 	.word	0x08007809
 8007718:	08007777 	.word	0x08007777
 800771c:	080077ad 	.word	0x080077ad
 8007720:	080077d7 	.word	0x080077d7

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	f893 335e 	ldrb.w	r3, [r3, #862]	; 0x35e
 800772a:	f003 0302 	and.w	r3, r3, #2
 800772e:	2b00      	cmp	r3, #0
 8007730:	dd03      	ble.n	800773a <VL53LX_update_ll_driver_rd_state+0xd6>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2206      	movs	r2, #6
 8007736:	71da      	strb	r2, [r3, #7]
 8007738:	e00d      	b.n	8007756 <VL53LX_update_ll_driver_rd_state+0xf2>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 8007744:	429a      	cmp	r2, r3
 8007746:	d303      	bcc.n	8007750 <VL53LX_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2208      	movs	r2, #8
 800774c:	71da      	strb	r2, [r3, #7]
 800774e:	e002      	b.n	8007756 <VL53LX_update_ll_driver_rd_state+0xf2>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2207      	movs	r2, #7
 8007754:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	735a      	strb	r2, [r3, #13]

			break;
 8007774:	e05e      	b.n	8007834 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8007798:	429a      	cmp	r2, r3
 800779a:	d303      	bcc.n	80077a4 <VL53LX_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2208      	movs	r2, #8
 80077a0:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 80077a2:	e047      	b.n	8007834 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2207      	movs	r2, #7
 80077a8:	71da      	strb	r2, [r3, #7]
			break;
 80077aa:	e043      	b.n	8007834 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	7b5b      	ldrb	r3, [r3, #13]
 80077b0:	3301      	adds	r3, #1
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d303      	bcc.n	80077ce <VL53LX_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2208      	movs	r2, #8
 80077ca:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 80077cc:	e032      	b.n	8007834 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2207      	movs	r2, #7
 80077d2:	71da      	strb	r2, [r3, #7]
			break;
 80077d4:	e02e      	b.n	8007834 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	7b1b      	ldrb	r3, [r3, #12]
 80077e0:	f083 0301 	eor.w	r3, r3, #1
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d303      	bcc.n	8007800 <VL53LX_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2208      	movs	r2, #8
 80077fc:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 80077fe:	e019      	b.n	8007834 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2207      	movs	r2, #7
 8007804:	71da      	strb	r2, [r3, #7]
			break;
 8007806:	e015      	b.n	8007834 <VL53LX_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2203      	movs	r2, #3
 800780c:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2202      	movs	r2, #2
 8007824:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	735a      	strb	r2, [r3, #13]
			break;
 8007832:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 8007834:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8007840:	b480      	push	{r7}
 8007842:	b08d      	sub	sp, #52	; 0x34
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8007848:	2300      	movs	r3, #0
 800784a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t  *pdev =
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	3318      	adds	r3, #24
 8007852:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	332c      	adds	r3, #44	; 0x2c
 8007860:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	f203 3366 	addw	r3, r3, #870	; 0x366
 8007868:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800786a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007870:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8007878:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800787a:	2300      	movs	r3, #0
 800787c:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800787e:	2300      	movs	r3, #0
 8007880:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 8007882:	2300      	movs	r3, #0
 8007884:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 8007888:	2300      	movs	r3, #0
 800788a:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800788c:	2300      	movs	r3, #0
 800788e:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 8007890:	2300      	movs	r3, #0
 8007892:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8007898:	f003 031f 	and.w	r3, r3, #31
 800789c:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	78db      	ldrb	r3, [r3, #3]
 80078a2:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80078aa:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	bf14      	ite	ne
 80078b2:	2301      	movne	r3, #1
 80078b4:	2300      	moveq	r3, #0
 80078b6:	b2db      	uxtb	r3, r3
	histogram_mode =
 80078b8:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80078be:	111b      	asrs	r3, r3, #4
 80078c0:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 80078ca:	7c7b      	ldrb	r3, [r7, #17]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d008      	beq.n	80078e2 <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80078d6:	111b      	asrs	r3, r3, #4
 80078d8:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80078e8:	f003 0320 	and.w	r3, r3, #32
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d04e      	beq.n	800798e <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	79db      	ldrb	r3, [r3, #7]
 80078f4:	2b06      	cmp	r3, #6
 80078f6:	d109      	bne.n	800790c <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 80078f8:	7c7b      	ldrb	r3, [r7, #17]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d14a      	bne.n	8007994 <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 80078fe:	7cfb      	ldrb	r3, [r7, #19]
 8007900:	2b12      	cmp	r3, #18
 8007902:	d047      	beq.n	8007994 <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8007904:	23ef      	movs	r3, #239	; 0xef
 8007906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800790a:	e043      	b.n	8007994 <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	7a1b      	ldrb	r3, [r3, #8]
 8007910:	7cba      	ldrb	r2, [r7, #18]
 8007912:	429a      	cmp	r2, r3
 8007914:	d002      	beq.n	800791c <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 8007916:	23ee      	movs	r3, #238	; 0xee
 8007918:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	7adb      	ldrb	r3, [r3, #11]
 8007920:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007924:	429a      	cmp	r2, r3
 8007926:	d002      	beq.n	800792e <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8007928:	23ed      	movs	r3, #237	; 0xed
 800792a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	7b5b      	ldrb	r3, [r3, #13]
 8007932:	4619      	mov	r1, r3
		expected_stream_count =
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	460b      	mov	r3, r1
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	440b      	add	r3, r1
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	4413      	add	r3, r2
 8007940:	3302      	adds	r3, #2
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	7b5b      	ldrb	r3, [r3, #13]
 800794a:	4619      	mov	r1, r3
		expected_gph_id =
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	460b      	mov	r3, r1
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	440b      	add	r3, r1
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	4413      	add	r3, r2
 8007958:	3303      	adds	r3, #3
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800795e:	7c3a      	ldrb	r2, [r7, #16]
 8007960:	7cbb      	ldrb	r3, [r7, #18]
 8007962:	429a      	cmp	r2, r3
 8007964:	d00a      	beq.n	800797c <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800796c:	2b00      	cmp	r3, #0
 800796e:	d102      	bne.n	8007976 <VL53LX_check_ll_driver_rd_state+0x136>
 8007970:	7cbb      	ldrb	r3, [r7, #18]
 8007972:	2bff      	cmp	r3, #255	; 0xff
 8007974:	d002      	beq.n	800797c <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 8007976:	23ec      	movs	r3, #236	; 0xec
 8007978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800797c:	7bfa      	ldrb	r2, [r7, #15]
 800797e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007982:	429a      	cmp	r2, r3
 8007984:	d005      	beq.n	8007992 <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 8007986:	23eb      	movs	r3, #235	; 0xeb
 8007988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800798c:	e002      	b.n	8007994 <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 800798e:	bf00      	nop
 8007990:	e000      	b.n	8007994 <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 8007992:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8007994:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007998:	4618      	mov	r0, r3
 800799a:	3734      	adds	r7, #52	; 0x34
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b088      	sub	sp, #32
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 80079ac:	2300      	movs	r3, #0
 80079ae:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3318      	adds	r3, #24
 80079b4:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80079bc:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	332c      	adds	r3, #44	; 0x2c
 80079c2:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80079ca:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80079d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d11b      	bne.n	8007a12 <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	2203      	movs	r2, #3
 80079de:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	2200      	movs	r2, #0
 80079e4:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	2200      	movs	r2, #0
 80079ea:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	2200      	movs	r2, #0
 80079f0:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	2202      	movs	r2, #2
 80079f6:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	2200      	movs	r2, #0
 80079fc:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	2200      	movs	r2, #0
 8007a02:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8007a04:	2300      	movs	r3, #0
 8007a06:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	773b      	strb	r3, [r7, #28]
 8007a10:	e0b1      	b.n	8007b76 <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	791b      	ldrb	r3, [r3, #4]
 8007a16:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	799b      	ldrb	r3, [r3, #6]
 8007a1c:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	785b      	ldrb	r3, [r3, #1]
 8007a22:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	785b      	ldrb	r3, [r3, #1]
 8007a28:	2bff      	cmp	r3, #255	; 0xff
 8007a2a:	d103      	bne.n	8007a34 <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	2280      	movs	r2, #128	; 0x80
 8007a30:	705a      	strb	r2, [r3, #1]
 8007a32:	e005      	b.n	8007a40 <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	785b      	ldrb	r3, [r3, #1]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	7859      	ldrb	r1, [r3, #1]
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	1c9a      	adds	r2, r3, #2
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	3303      	adds	r3, #3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f002 fb40 	bl	800a0d2 <VL53LX_update_internal_stream_counters>
 8007a52:	4603      	mov	r3, r0
 8007a54:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	791b      	ldrb	r3, [r3, #4]
 8007a5a:	f083 0302 	eor.w	r3, r3, #2
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	2b05      	cmp	r3, #5
 8007a6a:	d053      	beq.n	8007b14 <VL53LX_update_ll_driver_cfg_state+0x170>
 8007a6c:	2b05      	cmp	r3, #5
 8007a6e:	dc69      	bgt.n	8007b44 <VL53LX_update_ll_driver_cfg_state+0x1a0>
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d002      	beq.n	8007a7a <VL53LX_update_ll_driver_cfg_state+0xd6>
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	d02d      	beq.n	8007ad4 <VL53LX_update_ll_driver_cfg_state+0x130>
 8007a78:	e064      	b.n	8007b44 <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d909      	bls.n	8007aa2 <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	2200      	movs	r2, #0
 8007a92:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	795b      	ldrb	r3, [r3, #5]
 8007a98:	f083 0301 	eor.w	r3, r3, #1
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d106      	bne.n	8007ac0 <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	2200      	movs	r2, #0
 8007abc:	70da      	strb	r2, [r3, #3]
 8007abe:	e005      	b.n	8007acc <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	2204      	movs	r2, #4
 8007ad0:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 8007ad2:	e050      	b.n	8007b76 <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	799b      	ldrb	r3, [r3, #6]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d940      	bls.n	8007b70 <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	2200      	movs	r2, #0
 8007af2:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	795b      	ldrb	r3, [r3, #5]
 8007af8:	f083 0301 	eor.w	r3, r3, #1
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d031      	beq.n	8007b70 <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2205      	movs	r2, #5
 8007b10:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 8007b12:	e02d      	b.n	8007b70 <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	799b      	ldrb	r3, [r3, #6]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d922      	bls.n	8007b74 <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	2200      	movs	r2, #0
 8007b32:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	795b      	ldrb	r3, [r3, #5]
 8007b38:	f083 0301 	eor.w	r3, r3, #1
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	715a      	strb	r2, [r3, #5]
			}
			break;
 8007b42:	e017      	b.n	8007b74 <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	2203      	movs	r2, #3
 8007b48:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	2200      	movs	r2, #0
 8007b54:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	2200      	movs	r2, #0
 8007b66:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	719a      	strb	r2, [r3, #6]
			break;
 8007b6e:	e002      	b.n	8007b76 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007b70:	bf00      	nop
 8007b72:	e000      	b.n	8007b76 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007b74:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d11d      	bne.n	8007bbc <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007b80:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 8007b82:	7f3b      	ldrb	r3, [r7, #28]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	b2d8      	uxtb	r0, r3
 8007b88:	68f9      	ldr	r1, [r7, #12]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	005b      	lsls	r3, r3, #1
 8007b92:	440b      	add	r3, r1
 8007b94:	3302      	adds	r3, #2
 8007b96:	4602      	mov	r2, r0
 8007b98:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	7b5b      	ldrb	r3, [r3, #13]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	7f7b      	ldrb	r3, [r7, #29]
 8007ba2:	f083 0302 	eor.w	r3, r3, #2
 8007ba6:	b2d8      	uxtb	r0, r3
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	460b      	mov	r3, r1
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	440b      	add	r3, r1
 8007bb0:	005b      	lsls	r3, r3, #1
 8007bb2:	4413      	add	r3, r2
 8007bb4:	3303      	adds	r3, #3
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	701a      	strb	r2, [r3, #0]
 8007bba:	e013      	b.n	8007be4 <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007bbc:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 8007bbe:	68f9      	ldr	r1, [r7, #12]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	440b      	add	r3, r1
 8007bca:	3302      	adds	r3, #2
 8007bcc:	7f3a      	ldrb	r2, [r7, #28]
 8007bce:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 8007bd0:	7fba      	ldrb	r2, [r7, #30]
 8007bd2:	68f9      	ldr	r1, [r7, #12]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	005b      	lsls	r3, r3, #1
 8007bdc:	440b      	add	r3, r1
 8007bde:	3303      	adds	r3, #3
 8007be0:	7f7a      	ldrb	r2, [r7, #29]
 8007be2:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 8007be4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3720      	adds	r7, #32
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	7c1a      	ldrb	r2, [r3, #16]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	3301      	adds	r3, #1
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	7c52      	ldrb	r2, [r2, #17]
 8007c0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	3302      	adds	r3, #2
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	7c92      	ldrb	r2, [r2, #18]
 8007c14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	3303      	adds	r3, #3
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	7cd2      	ldrb	r2, [r2, #19]
 8007c1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	3304      	adds	r3, #4
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	7d12      	ldrb	r2, [r2, #20]
 8007c28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	3305      	adds	r3, #5
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	7d52      	ldrb	r2, [r2, #21]
 8007c32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	3306      	adds	r3, #6
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	7d92      	ldrb	r2, [r2, #22]
 8007c3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	3307      	adds	r3, #7
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	7dd2      	ldrb	r2, [r2, #23]
 8007c46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	7e12      	ldrb	r2, [r2, #24]
 8007c50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	3309      	adds	r3, #9
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	7e52      	ldrb	r2, [r2, #25]
 8007c5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	330a      	adds	r3, #10
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	7e92      	ldrb	r2, [r2, #26]
 8007c64:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	330b      	adds	r3, #11
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	7ed2      	ldrb	r2, [r2, #27]
 8007c6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	330c      	adds	r3, #12
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	7f12      	ldrb	r2, [r2, #28]
 8007c78:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	330d      	adds	r3, #13
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	7f52      	ldrb	r2, [r2, #29]
 8007c82:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	330e      	adds	r3, #14
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	7f92      	ldrb	r2, [r2, #30]
 8007c8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	330f      	adds	r3, #15
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	7fd2      	ldrb	r2, [r2, #31]
 8007c96:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	3310      	adds	r3, #16
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007ca2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	3311      	adds	r3, #17
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007cae:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	3312      	adds	r3, #18
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8007cba:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	3313      	adds	r3, #19
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8007cc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	3314      	adds	r3, #20
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007cd2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	3315      	adds	r3, #21
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007cde:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	3316      	adds	r3, #22
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8007cea:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	3317      	adds	r3, #23
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8007cf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	3318      	adds	r3, #24
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8007d02:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	3319      	adds	r3, #25
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8007d0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	331a      	adds	r3, #26
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8007d1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	331b      	adds	r3, #27
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8007d26:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	331c      	adds	r3, #28
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007d32:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	331d      	adds	r3, #29
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007d3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	331e      	adds	r3, #30
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007d4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	331f      	adds	r3, #31
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8007d56:	701a      	strb	r2, [r3, #0]
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	22ff      	movs	r2, #255	; 0xff
 8007d70:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	22ff      	movs	r2, #255	; 0xff
 8007d76:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	22ff      	movs	r2, #255	; 0xff
 8007d7c:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	22ff      	movs	r2, #255	; 0xff
 8007d82:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d8a:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d92:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d9a:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007da2:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007daa:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007db2:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dba:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dc2:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dca:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dd2:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dda:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007de2:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dea:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007df2:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dfa:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e02:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e0a:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e12:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e1a:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	22ff      	movs	r2, #255	; 0xff
 8007e20:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	4603      	mov	r3, r0
 8007e38:	6039      	str	r1, [r7, #0]
 8007e3a:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	2205      	movs	r2, #5
 8007e44:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	79fa      	ldrb	r2, [r7, #7]
 8007e4a:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73fb      	strb	r3, [r7, #15]
 8007e50:	e017      	b.n	8007e82 <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 8007e52:	7bfa      	ldrb	r2, [r7, #15]
 8007e54:	4613      	mov	r3, r2
 8007e56:	011b      	lsls	r3, r3, #4
 8007e58:	4413      	add	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	4413      	add	r3, r2
 8007e60:	3304      	adds	r3, #4
 8007e62:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2203      	movs	r2, #3
 8007e68:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2203      	movs	r2, #3
 8007e6e:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2204      	movs	r2, #4
 8007e74:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	73fb      	strb	r3, [r7, #15]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	7bfa      	ldrb	r2, [r7, #15]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d3e2      	bcc.n	8007e52 <V53L1_init_zone_results_structure+0x22>
	}
}
 8007e8c:	bf00      	nop
 8007e8e:	bf00      	nop
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53LX_DEV              Dev)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b087      	sub	sp, #28
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverResults_t  *pres =
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007ea8:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53LX_MAX_USER_ZONES;
 8007eae:	2305      	movs	r3, #5
 8007eb0:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8007eb8:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 8007eba:	2300      	movs	r3, #0
 8007ebc:	75fb      	strb	r3, [r7, #23]
 8007ebe:	e016      	b.n	8007eee <V53L1_init_zone_dss_configs+0x54>
		pdata->VL53LX_p_003[z].dss_mode =
 8007ec0:	7dfa      	ldrb	r2, [r7, #23]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	440b      	add	r3, r1
 8007ece:	3304      	adds	r3, #4
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	701a      	strb	r2, [r3, #0]
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53LX_p_003[z].dss_requested_effective_spad_count = 0;
 8007ed4:	7dfa      	ldrb	r2, [r7, #23]
 8007ed6:	68b9      	ldr	r1, [r7, #8]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	440b      	add	r3, r1
 8007ee2:	3306      	adds	r3, #6
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
 8007eea:	3301      	adds	r3, #1
 8007eec:	75fb      	strb	r3, [r7, #23]
 8007eee:	7dfa      	ldrb	r2, [r7, #23]
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d3e4      	bcc.n	8007ec0 <V53L1_init_zone_dss_configs+0x26>
	}
}
 8007ef6:	bf00      	nop
 8007ef8:	bf00      	nop
 8007efa:	371c      	adds	r7, #28
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8007f04:	b490      	push	{r4, r7}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	4608      	mov	r0, r1
 8007f0e:	4611      	mov	r1, r2
 8007f10:	461a      	mov	r2, r3
 8007f12:	4623      	mov	r3, r4
 8007f14:	71fb      	strb	r3, [r7, #7]
 8007f16:	4603      	mov	r3, r0
 8007f18:	71bb      	strb	r3, [r7, #6]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	717b      	strb	r3, [r7, #5]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8007f22:	79bb      	ldrb	r3, [r7, #6]
 8007f24:	011b      	lsls	r3, r3, #4
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	79fb      	ldrb	r3, [r7, #7]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f30:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8007f32:	793b      	ldrb	r3, [r7, #4]
 8007f34:	011b      	lsls	r3, r3, #4
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	797b      	ldrb	r3, [r7, #5]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8007f42:	7d3b      	ldrb	r3, [r7, #20]
 8007f44:	011b      	lsls	r3, r3, #4
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	7c3b      	ldrb	r3, [r7, #16]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 8007f52:	7f3b      	ldrb	r3, [r7, #28]
 8007f54:	011b      	lsls	r3, r3, #4
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	7e3b      	ldrb	r3, [r7, #24]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 8007f62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007f66:	011b      	lsls	r3, r3, #4
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f6e:	4413      	add	r3, r2
 8007f70:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 8007f76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f7a:	011b      	lsls	r3, r3, #4
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f82:	4413      	add	r3, r2
 8007f84:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 8007f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f98:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa8:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007fb0:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8007fb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007fb6:	011b      	lsls	r3, r3, #4
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007fbe:	4413      	add	r3, r2
 8007fc0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007fcc:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd6:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fda:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fde:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe6:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fea:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8007fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fee:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8008004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800800a:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008012:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	2200      	movs	r2, #0
 8008018:	701a      	strb	r2, [r3, #0]

}
 800801a:	bf00      	nop
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bc90      	pop	{r4, r7}
 8008022:	4770      	bx	lr

08008024 <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8008024:	b490      	push	{r4, r7}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	4604      	mov	r4, r0
 800802c:	4608      	mov	r0, r1
 800802e:	4611      	mov	r1, r2
 8008030:	461a      	mov	r2, r3
 8008032:	4623      	mov	r3, r4
 8008034:	71fb      	strb	r3, [r7, #7]
 8008036:	4603      	mov	r3, r0
 8008038:	71bb      	strb	r3, [r7, #6]
 800803a:	460b      	mov	r3, r1
 800803c:	717b      	strb	r3, [r7, #5]
 800803e:	4613      	mov	r3, r2
 8008040:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8008042:	79bb      	ldrb	r3, [r7, #6]
 8008044:	011b      	lsls	r3, r3, #4
 8008046:	b2da      	uxtb	r2, r3
 8008048:	79fb      	ldrb	r3, [r7, #7]
 800804a:	4413      	add	r3, r2
 800804c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8008052:	793b      	ldrb	r3, [r7, #4]
 8008054:	011b      	lsls	r3, r3, #4
 8008056:	b2da      	uxtb	r2, r3
 8008058:	797b      	ldrb	r3, [r7, #5]
 800805a:	4413      	add	r3, r2
 800805c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008060:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8008062:	7d3b      	ldrb	r3, [r7, #20]
 8008064:	011b      	lsls	r3, r3, #4
 8008066:	b2da      	uxtb	r2, r3
 8008068:	7c3b      	ldrb	r3, [r7, #16]
 800806a:	4413      	add	r3, r2
 800806c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807c:	789a      	ldrb	r2, [r3, #2]
 800807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008080:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	78da      	ldrb	r2, [r3, #3]
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	789a      	ldrb	r2, [r3, #2]
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	78da      	ldrb	r2, [r3, #3]
 800809e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a0:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	791a      	ldrb	r2, [r3, #4]
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80080b0:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 80080b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080b6:	011b      	lsls	r3, r3, #4
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80080be:	4413      	add	r3, r2
 80080c0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 80080c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c4:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 80080c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80080cc:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 80080ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d0:	2200      	movs	r2, #0
 80080d2:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 80080d4:	7f3b      	ldrb	r3, [r7, #28]
 80080d6:	011b      	lsls	r3, r3, #4
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	7e3b      	ldrb	r3, [r7, #24]
 80080dc:	4413      	add	r3, r2
 80080de:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 80080e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80080e8:	011b      	lsls	r3, r3, #4
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080f0:	4413      	add	r3, r2
 80080f2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 80080f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f6:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 80080f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80080fc:	011b      	lsls	r3, r3, #4
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008104:	4413      	add	r3, r2
 8008106:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810a:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	7bda      	ldrb	r2, [r3, #15]
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 8008114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008116:	7c1a      	ldrb	r2, [r3, #16]
 8008118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811a:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	7c5a      	ldrb	r2, [r3, #17]
 8008120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008122:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8008124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800812a:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008132:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8008134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008136:	2200      	movs	r2, #0
 8008138:	701a      	strb	r2, [r3, #0]
}
 800813a:	bf00      	nop
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bc90      	pop	{r4, r7}
 8008142:	4770      	bx	lr

08008144 <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	460b      	mov	r3, r1
 800814e:	607a      	str	r2, [r7, #4]
 8008150:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 8008152:	2300      	movs	r3, #0
 8008154:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	220c      	movs	r2, #12
 800816c:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800816e:	897b      	ldrh	r3, [r7, #10]
 8008170:	b2da      	uxtb	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_015                = 0;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 80081a4:	2300      	movs	r3, #0
 80081a6:	82fb      	strh	r3, [r7, #22]
 80081a8:	e015      	b.n	80081d6 <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 80081aa:	8afa      	ldrh	r2, [r7, #22]
 80081ac:	897b      	ldrh	r3, [r7, #10]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d207      	bcs.n	80081c2 <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 80081b2:	8afb      	ldrh	r3, [r7, #22]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	3302      	adds	r3, #2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	605a      	str	r2, [r3, #4]
 80081c0:	e006      	b.n	80081d0 <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 80081c2:	8afb      	ldrh	r3, [r7, #22]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	3302      	adds	r3, #2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	2200      	movs	r2, #0
 80081ce:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 80081d0:	8afb      	ldrh	r3, [r7, #22]
 80081d2:	3301      	adds	r3, #1
 80081d4:	82fb      	strh	r3, [r7, #22]
 80081d6:	8afb      	ldrh	r3, [r7, #22]
 80081d8:	2b0b      	cmp	r3, #11
 80081da:	d9e6      	bls.n	80081aa <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	371c      	adds	r7, #28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b085      	sub	sp, #20
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	4603      	mov	r3, r0
 80081f2:	603a      	str	r2, [r7, #0]
 80081f4:	80fb      	strh	r3, [r7, #6]
 80081f6:	460b      	mov	r3, r1
 80081f8:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 80081fe:	2300      	movs	r3, #0
 8008200:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 8008202:	88fb      	ldrh	r3, [r7, #6]
 8008204:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8008206:	2300      	movs	r3, #0
 8008208:	81fb      	strh	r3, [r7, #14]
 800820a:	e00e      	b.n	800822a <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 800820c:	88ba      	ldrh	r2, [r7, #4]
 800820e:	89fb      	ldrh	r3, [r7, #14]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	3b01      	subs	r3, #1
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	4413      	add	r3, r2
 8008218:	89ba      	ldrh	r2, [r7, #12]
 800821a:	b2d2      	uxtb	r2, r2
 800821c:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 800821e:	89bb      	ldrh	r3, [r7, #12]
 8008220:	0a1b      	lsrs	r3, r3, #8
 8008222:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8008224:	89fb      	ldrh	r3, [r7, #14]
 8008226:	3301      	adds	r3, #1
 8008228:	81fb      	strh	r3, [r7, #14]
 800822a:	89fa      	ldrh	r2, [r7, #14]
 800822c:	88bb      	ldrh	r3, [r7, #4]
 800822e:	429a      	cmp	r2, r3
 8008230:	d3ec      	bcc.n	800820c <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 8008232:	bf00      	nop
 8008234:	bf00      	nop
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	6039      	str	r1, [r7, #0]
 800824a:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800824c:	2300      	movs	r3, #0
 800824e:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8008250:	e00a      	b.n	8008268 <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8008252:	89fb      	ldrh	r3, [r7, #14]
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	b21a      	sxth	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	1c59      	adds	r1, r3, #1
 800825c:	6039      	str	r1, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	b21b      	sxth	r3, r3
 8008262:	4313      	orrs	r3, r2
 8008264:	b21b      	sxth	r3, r3
 8008266:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 8008268:	88fb      	ldrh	r3, [r7, #6]
 800826a:	1e5a      	subs	r2, r3, #1
 800826c:	80fa      	strh	r2, [r7, #6]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1ef      	bne.n	8008252 <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 8008272:	89fb      	ldrh	r3, [r7, #14]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	603a      	str	r2, [r7, #0]
 800828a:	80fb      	strh	r3, [r7, #6]
 800828c:	460b      	mov	r3, r1
 800828e:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 8008294:	2300      	movs	r3, #0
 8008296:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 8008298:	88fb      	ldrh	r3, [r7, #6]
 800829a:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800829c:	2300      	movs	r3, #0
 800829e:	81fb      	strh	r3, [r7, #14]
 80082a0:	e00f      	b.n	80082c2 <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80082a2:	88ba      	ldrh	r2, [r7, #4]
 80082a4:	89fb      	ldrh	r3, [r7, #14]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	3b01      	subs	r3, #1
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	4413      	add	r3, r2
 80082ae:	89ba      	ldrh	r2, [r7, #12]
 80082b0:	b2d2      	uxtb	r2, r2
 80082b2:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80082b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80082b8:	121b      	asrs	r3, r3, #8
 80082ba:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 80082bc:	89fb      	ldrh	r3, [r7, #14]
 80082be:	3301      	adds	r3, #1
 80082c0:	81fb      	strh	r3, [r7, #14]
 80082c2:	89fa      	ldrh	r2, [r7, #14]
 80082c4:	88bb      	ldrh	r3, [r7, #4]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d3eb      	bcc.n	80082a2 <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 80082ca:	bf00      	nop
 80082cc:	bf00      	nop
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	4603      	mov	r3, r0
 80082e0:	6039      	str	r1, [r7, #0]
 80082e2:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 80082e4:	2300      	movs	r3, #0
 80082e6:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	b25b      	sxtb	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	da0e      	bge.n	8008310 <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 80082f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082f6:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 80082f8:	e00a      	b.n	8008310 <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 80082fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80082fe:	021b      	lsls	r3, r3, #8
 8008300:	b21a      	sxth	r2, r3
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	1c59      	adds	r1, r3, #1
 8008306:	6039      	str	r1, [r7, #0]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	b21b      	sxth	r3, r3
 800830c:	4313      	orrs	r3, r2
 800830e:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 8008310:	88fb      	ldrh	r3, [r7, #6]
 8008312:	1e5a      	subs	r2, r3, #1
 8008314:	80fa      	strh	r2, [r7, #6]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1ef      	bne.n	80082fa <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 800831a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3714      	adds	r7, #20
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800832a:	b480      	push	{r7}
 800832c:	b087      	sub	sp, #28
 800832e:	af00      	add	r7, sp, #0
 8008330:	60f8      	str	r0, [r7, #12]
 8008332:	460b      	mov	r3, r1
 8008334:	607a      	str	r2, [r7, #4]
 8008336:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 800833c:	2300      	movs	r3, #0
 800833e:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 8008344:	2300      	movs	r3, #0
 8008346:	82fb      	strh	r3, [r7, #22]
 8008348:	e00e      	b.n	8008368 <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 800834a:	897a      	ldrh	r2, [r7, #10]
 800834c:	8afb      	ldrh	r3, [r7, #22]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	3b01      	subs	r3, #1
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	4413      	add	r3, r2
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	b2d2      	uxtb	r2, r2
 800835a:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	0a1b      	lsrs	r3, r3, #8
 8008360:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 8008362:	8afb      	ldrh	r3, [r7, #22]
 8008364:	3301      	adds	r3, #1
 8008366:	82fb      	strh	r3, [r7, #22]
 8008368:	8afa      	ldrh	r2, [r7, #22]
 800836a:	897b      	ldrh	r3, [r7, #10]
 800836c:	429a      	cmp	r2, r3
 800836e:	d3ec      	bcc.n	800834a <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 8008370:	bf00      	nop
 8008372:	bf00      	nop
 8008374:	371c      	adds	r7, #28
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr

0800837e <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800837e:	b480      	push	{r7}
 8008380:	b085      	sub	sp, #20
 8008382:	af00      	add	r7, sp, #0
 8008384:	4603      	mov	r3, r0
 8008386:	6039      	str	r1, [r7, #0]
 8008388:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800838a:	2300      	movs	r3, #0
 800838c:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800838e:	e007      	b.n	80083a0 <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	021a      	lsls	r2, r3, #8
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	1c59      	adds	r1, r3, #1
 8008398:	6039      	str	r1, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	4313      	orrs	r3, r2
 800839e:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 80083a0:	88fb      	ldrh	r3, [r7, #6]
 80083a2:	1e5a      	subs	r2, r3, #1
 80083a4:	80fa      	strh	r2, [r7, #6]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1f2      	bne.n	8008390 <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 80083aa:	68fb      	ldr	r3, [r7, #12]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	6039      	str	r1, [r7, #0]
 80083c2:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 80083c4:	2300      	movs	r3, #0
 80083c6:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	b25b      	sxtb	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	da0b      	bge.n	80083ea <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 80083d2:	f04f 33ff 	mov.w	r3, #4294967295
 80083d6:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 80083d8:	e007      	b.n	80083ea <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	021a      	lsls	r2, r3, #8
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	1c59      	adds	r1, r3, #1
 80083e2:	6039      	str	r1, [r7, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 80083ea:	88fb      	ldrh	r3, [r7, #6]
 80083ec:	1e5a      	subs	r2, r3, #1
 80083ee:	80fa      	strh	r2, [r7, #6]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1f2      	bne.n	80083da <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 80083f4:	68fb      	ldr	r3, [r7, #12]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <VL53LX_start_test>:


VL53LX_Error VL53LX_start_test(
	VL53LX_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	460b      	mov	r3, r1
 800840c:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800840e:	2300      	movs	r3, #0
 8008410:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE) {
 8008412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d107      	bne.n	800842a <VL53LX_start_test+0x28>
		status = VL53LX_WrByte(
 800841a:	78fb      	ldrb	r3, [r7, #3]
 800841c:	461a      	mov	r2, r3
 800841e:	2127      	movs	r1, #39	; 0x27
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f008 fc6d 	bl	8010d00 <VL53LX_WrByte>
 8008426:	4603      	mov	r3, r0
 8008428:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800842a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	460b      	mov	r3, r1
 8008440:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8008442:	2300      	movs	r3, #0
 8008444:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	3318      	adds	r3, #24
 800844a:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	78fa      	ldrb	r2, [r7, #3]
 8008450:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362

	status = VL53LX_WrByte(
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	f893 3362 	ldrb.w	r3, [r3, #866]	; 0x362
 800845a:	461a      	mov	r2, r3
 800845c:	2185      	movs	r1, #133	; 0x85
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f008 fc4e 	bl	8010d00 <VL53LX_WrByte>
 8008464:	4603      	mov	r3, r0
 8008466:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 8008468:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800847c:	2300      	movs	r3, #0
 800847e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 8008480:	2101      	movs	r1, #1
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff ffd7 	bl	8008436 <VL53LX_set_firmware_enable_register>
 8008488:	4603      	mov	r3, r0
 800848a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800848c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 80084a4:	2100      	movs	r1, #0
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7ff ffc5 	bl	8008436 <VL53LX_set_firmware_enable_register>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80084b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80084c8:	2300      	movs	r3, #0
 80084ca:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3318      	adds	r3, #24
 80084d0:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	78fa      	ldrb	r2, [r7, #3]
 80084d6:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360

	status = VL53LX_WrByte(
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	f893 3360 	ldrb.w	r3, [r3, #864]	; 0x360
 80084e0:	461a      	mov	r2, r3
 80084e2:	2183      	movs	r1, #131	; 0x83
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f008 fc0b 	bl	8010d00 <VL53LX_WrByte>
 80084ea:	4603      	mov	r3, r0
 80084ec:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 80084ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 8008506:	2101      	movs	r1, #1
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7ff ffd7 	bl	80084bc <VL53LX_set_powerforce_register>
 800850e:	4603      	mov	r3, r0
 8008510:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008512:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008526:	2300      	movs	r3, #0
 8008528:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 800852a:	2100      	movs	r1, #0
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff ffc5 	bl	80084bc <VL53LX_set_powerforce_register>
 8008532:	4603      	mov	r3, r0
 8008534:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008536:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <VL53LX_clear_interrupt>:


VL53LX_Error VL53LX_clear_interrupt(
	VL53LX_DEV    Dev)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b084      	sub	sp, #16
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	3318      	adds	r3, #24
 8008552:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53LX_CLEAR_RANGE_INT;
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363

	status = VL53LX_WrByte(
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 8008562:	461a      	mov	r2, r3
 8008564:	2186      	movs	r1, #134	; 0x86
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f008 fbca 	bl	8010d00 <VL53LX_WrByte>
 800856c:	4603      	mov	r3, r0
 800856e:	73fb      	strb	r3, [r7, #15]
				VL53LX_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 8008570:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
 8008582:	4603      	mov	r3, r0
 8008584:	460a      	mov	r2, r1
 8008586:	80fb      	strh	r3, [r7, #6]
 8008588:	4613      	mov	r3, r2
 800858a:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800858c:	2300      	movs	r3, #0
 800858e:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 8008590:	2300      	movs	r3, #0
 8008592:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8008594:	2300      	movs	r3, #0
 8008596:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 8008598:	88fb      	ldrh	r3, [r7, #6]
 800859a:	4618      	mov	r0, r3
 800859c:	f002 fe9b 	bl	800b2d6 <VL53LX_calc_pll_period_us>
 80085a0:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 80085a2:	797b      	ldrb	r3, [r7, #5]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f003 fa69 	bl	800ba7c <VL53LX_decode_vcsel_period>
 80085aa:	4603      	mov	r3, r0
 80085ac:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	4613      	mov	r3, r2
 80085b2:	00db      	lsls	r3, r3, #3
 80085b4:	4413      	add	r3, r2
 80085b6:	021b      	lsls	r3, r3, #8
 80085b8:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	099b      	lsrs	r3, r3, #6
 80085be:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 80085c0:	7cfa      	ldrb	r2, [r7, #19]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	fb02 f303 	mul.w	r3, r2, r3
 80085c8:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	099b      	lsrs	r3, r3, #6
 80085ce:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 80085d0:	68fb      	ldr	r3, [r7, #12]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3718      	adds	r7, #24
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
	...

080085dc <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 80085dc:	b480      	push	{r7}
 80085de:	b089      	sub	sp, #36	; 0x24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	4608      	mov	r0, r1
 80085e6:	4611      	mov	r1, r2
 80085e8:	461a      	mov	r2, r3
 80085ea:	4603      	mov	r3, r0
 80085ec:	817b      	strh	r3, [r7, #10]
 80085ee:	460b      	mov	r3, r1
 80085f0:	813b      	strh	r3, [r7, #8]
 80085f2:	4613      	mov	r3, r2
 80085f4:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 80085fe:	2300      	movs	r3, #0
 8008600:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8008602:	2300      	movs	r3, #0
 8008604:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8008606:	2300      	movs	r3, #0
 8008608:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	011b      	lsls	r3, r3, #4
 800860e:	4a23      	ldr	r2, [pc, #140]	; (800869c <VL53LX_calc_range_ignore_threshold+0xc0>)
 8008610:	fb82 1203 	smull	r1, r2, r2, r3
 8008614:	1192      	asrs	r2, r2, #6
 8008616:	17db      	asrs	r3, r3, #31
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800861c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008620:	2b00      	cmp	r3, #0
 8008622:	da03      	bge.n	800862c <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8008624:	897b      	ldrh	r3, [r7, #10]
 8008626:	425b      	negs	r3, r3
 8008628:	b29b      	uxth	r3, r3
 800862a:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800862c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	da03      	bge.n	800863c <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8008634:	893b      	ldrh	r3, [r7, #8]
 8008636:	425b      	negs	r3, r3
 8008638:	b29b      	uxth	r3, r3
 800863a:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800863c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008640:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008644:	4413      	add	r3, r2
 8008646:	015b      	lsls	r3, r3, #5
 8008648:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	4a13      	ldr	r2, [pc, #76]	; (800869c <VL53LX_calc_range_ignore_threshold+0xc0>)
 800864e:	fb82 1203 	smull	r1, r2, r2, r3
 8008652:	1192      	asrs	r2, r2, #6
 8008654:	17db      	asrs	r3, r3, #31
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	4413      	add	r3, r2
 8008660:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8008662:	79fa      	ldrb	r2, [r7, #7]
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	fb02 f303 	mul.w	r3, r2, r3
 800866a:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	3310      	adds	r3, #16
 8008670:	2b00      	cmp	r3, #0
 8008672:	da00      	bge.n	8008676 <VL53LX_calc_range_ignore_threshold+0x9a>
 8008674:	331f      	adds	r3, #31
 8008676:	115b      	asrs	r3, r3, #5
 8008678:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008680:	db03      	blt.n	800868a <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8008682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008686:	83fb      	strh	r3, [r7, #30]
 8008688:	e001      	b.n	800868e <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800868e:	8bfb      	ldrh	r3, [r7, #30]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3724      	adds	r7, #36	; 0x24
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	10624dd3 	.word	0x10624dd3

080086a0 <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 80086aa:	2300      	movs	r3, #0
 80086ac:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d102      	bne.n	80086ba <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	60fb      	str	r3, [r7, #12]
 80086b8:	e008      	b.n	80086cc <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	031a      	lsls	r2, r3, #12
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	085b      	lsrs	r3, r3, #1
 80086c2:	441a      	add	r2, r3
		timeout_mclks   =
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ca:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 80086cc:	68fb      	ldr	r3, [r7, #12]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b084      	sub	sp, #16
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7ff ffd6 	bl	80086a0 <VL53LX_calc_timeout_mclks>
 80086f4:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f000 f885 	bl	8008806 <VL53LX_encode_timeout>
 80086fc:	4603      	mov	r3, r0
 80086fe:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8008700:	897b      	ldrh	r3, [r7, #10]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800870a:	b4f0      	push	{r4, r5, r6, r7}
 800870c:	b086      	sub	sp, #24
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 8008718:	f04f 0200 	mov.w	r2, #0
 800871c:	f04f 0300 	mov.w	r3, #0
 8008720:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4618      	mov	r0, r3
 8008728:	f04f 0100 	mov.w	r1, #0
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	f04f 0300 	mov.w	r3, #0
 8008734:	fb02 fc01 	mul.w	ip, r2, r1
 8008738:	fb00 f603 	mul.w	r6, r0, r3
 800873c:	4466      	add	r6, ip
 800873e:	fba0 2302 	umull	r2, r3, r0, r2
 8008742:	18f1      	adds	r1, r6, r3
 8008744:	460b      	mov	r3, r1
 8008746:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800874a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800874e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008752:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 8008756:	f143 0500 	adc.w	r5, r3, #0
 800875a:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 800875e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008762:	f04f 0200 	mov.w	r2, #0
 8008766:	f04f 0300 	mov.w	r3, #0
 800876a:	0b02      	lsrs	r2, r0, #12
 800876c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8008770:	0b0b      	lsrs	r3, r1, #12
 8008772:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800877a:	697b      	ldr	r3, [r7, #20]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bcf0      	pop	{r4, r5, r6, r7}
 8008784:	4770      	bx	lr
	...

08008788 <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 8008794:	2300      	movs	r3, #0
 8008796:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800879c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 80087a0:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 80087a2:	4413      	add	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	da02      	bge.n	80087b2 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 80087ac:	2300      	movs	r3, #0
 80087ae:	60fb      	str	r3, [r7, #12]
 80087b0:	e005      	b.n	80087be <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087b8:	db01      	blt.n	80087be <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 80087ba:	4b05      	ldr	r3, [pc, #20]	; (80087d0 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 80087bc:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 80087c2:	68bb      	ldr	r3, [r7, #8]

}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	0003ffff 	.word	0x0003ffff

080087d4 <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	4603      	mov	r3, r0
 80087dc:	6039      	str	r1, [r7, #0]
 80087de:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 80087e8:	88fb      	ldrh	r3, [r7, #6]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 f837 	bl	800885e <VL53LX_decode_timeout>
 80087f0:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f7ff ff88 	bl	800870a <VL53LX_calc_timeout_us>
 80087fa:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 80087fc:	68bb      	ldr	r3, [r7, #8]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 8008806:	b480      	push	{r7}
 8008808:	b087      	sub	sp, #28
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008812:	2300      	movs	r3, #0
 8008814:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d017      	beq.n	8008850 <VL53LX_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3b01      	subs	r3, #1
 8008824:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008826:	e005      	b.n	8008834 <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	085b      	lsrs	r3, r3, #1
 800882c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800882e:	89fb      	ldrh	r3, [r7, #14]
 8008830:	3301      	adds	r3, #1
 8008832:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1f4      	bne.n	8008828 <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800883e:	89fb      	ldrh	r3, [r7, #14]
 8008840:	021b      	lsls	r3, r3, #8
 8008842:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	b29b      	uxth	r3, r3
 8008848:	b2db      	uxtb	r3, r3
 800884a:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800884c:	4413      	add	r3, r2
 800884e:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008850:	8afb      	ldrh	r3, [r7, #22]
}
 8008852:	4618      	mov	r0, r3
 8008854:	371c      	adds	r7, #28
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 800885e:	b480      	push	{r7}
 8008860:	b085      	sub	sp, #20
 8008862:	af00      	add	r7, sp, #0
 8008864:	4603      	mov	r3, r0
 8008866:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800886c:	88fb      	ldrh	r3, [r7, #6]
 800886e:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008870:	88fa      	ldrh	r2, [r7, #6]
 8008872:	0a12      	lsrs	r2, r2, #8
 8008874:	b292      	uxth	r2, r2
 8008876:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008878:	3301      	adds	r3, #1
 800887a:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800887c:	68fb      	ldr	r3, [r7, #12]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b088      	sub	sp, #32
 800888e:	af00      	add	r7, sp, #0
 8008890:	60f8      	str	r0, [r7, #12]
 8008892:	60b9      	str	r1, [r7, #8]
 8008894:	607a      	str	r2, [r7, #4]
 8008896:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008898:	2300      	movs	r3, #0
 800889a:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 80088a8:	887b      	ldrh	r3, [r7, #2]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d102      	bne.n	80088b4 <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80088ae:	23f1      	movs	r3, #241	; 0xf1
 80088b0:	77fb      	strb	r3, [r7, #31]
 80088b2:	e05d      	b.n	8008970 <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 80088b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b6:	799a      	ldrb	r2, [r3, #6]
 80088b8:	887b      	ldrh	r3, [r7, #2]
 80088ba:	4611      	mov	r1, r2
 80088bc:	4618      	mov	r0, r3
 80088be:	f7ff fe5d 	bl	800857c <VL53LX_calc_macro_period_us>
 80088c2:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 80088c4:	6979      	ldr	r1, [r7, #20]
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f7ff feea 	bl	80086a0 <VL53LX_calc_timeout_mclks>
 80088cc:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	2bff      	cmp	r3, #255	; 0xff
 80088d2:	d901      	bls.n	80088d8 <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 80088d4:	23ff      	movs	r3, #255	; 0xff
 80088d6:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 80088dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088de:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 80088e0:	6979      	ldr	r1, [r7, #20]
 80088e2:	68b8      	ldr	r0, [r7, #8]
 80088e4:	f7ff fef9 	bl	80086da <VL53LX_calc_encoded_timeout>
 80088e8:	4603      	mov	r3, r0
 80088ea:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80088ec:	8a7b      	ldrh	r3, [r7, #18]
 80088ee:	0a1b      	lsrs	r3, r3, #8
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 80088f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f6:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80088f8:	8a7b      	ldrh	r3, [r7, #18]
 80088fa:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 80088fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fe:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8008900:	6979      	ldr	r1, [r7, #20]
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7ff fee9 	bl	80086da <VL53LX_calc_encoded_timeout>
 8008908:	4603      	mov	r3, r0
 800890a:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800890c:	8a7b      	ldrh	r3, [r7, #18]
 800890e:	0a1b      	lsrs	r3, r3, #8
 8008910:	b29b      	uxth	r3, r3
 8008912:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8008914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008916:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008918:	8a7b      	ldrh	r3, [r7, #18]
 800891a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800891c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891e:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 8008920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008922:	7a5a      	ldrb	r2, [r3, #9]
 8008924:	887b      	ldrh	r3, [r7, #2]
 8008926:	4611      	mov	r1, r2
 8008928:	4618      	mov	r0, r3
 800892a:	f7ff fe27 	bl	800857c <VL53LX_calc_macro_period_us>
 800892e:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 8008930:	6979      	ldr	r1, [r7, #20]
 8008932:	68b8      	ldr	r0, [r7, #8]
 8008934:	f7ff fed1 	bl	80086da <VL53LX_calc_encoded_timeout>
 8008938:	4603      	mov	r3, r0
 800893a:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800893c:	8a7b      	ldrh	r3, [r7, #18]
 800893e:	0a1b      	lsrs	r3, r3, #8
 8008940:	b29b      	uxth	r3, r3
 8008942:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8008944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008946:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008948:	8a7b      	ldrh	r3, [r7, #18]
 800894a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800894c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894e:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 8008950:	6979      	ldr	r1, [r7, #20]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7ff fec1 	bl	80086da <VL53LX_calc_encoded_timeout>
 8008958:	4603      	mov	r3, r0
 800895a:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800895c:	8a7b      	ldrh	r3, [r7, #18]
 800895e:	0a1b      	lsrs	r3, r3, #8
 8008960:	b29b      	uxth	r3, r3
 8008962:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8008964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008966:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008968:	8a7b      	ldrh	r3, [r7, #18]
 800896a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896e:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8008970:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008974:	4618      	mov	r0, r3
 8008976:	3720      	adds	r7, #32
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	b08b      	sub	sp, #44	; 0x2c
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008988:	2100      	movs	r1, #0
 800898a:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27

	int64_t  evts              = 0;
 800898e:	f04f 0000 	mov.w	r0, #0
 8008992:	f04f 0100 	mov.w	r1, #0
 8008996:	e9c7 0106 	strd	r0, r1, [r7, #24]
	int64_t  tmpi              = 0;
 800899a:	f04f 0000 	mov.w	r0, #0
 800899e:	f04f 0100 	mov.w	r1, #0
 80089a2:	e9c7 0104 	strd	r0, r1, [r7, #16]
	int64_t  tmpo              = 0;
 80089a6:	f04f 0000 	mov.w	r0, #0
 80089aa:	f04f 0100 	mov.w	r1, #0
 80089ae:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 80089b2:	6879      	ldr	r1, [r7, #4]
 80089b4:	8849      	ldrh	r1, [r1, #2]
 80089b6:	2900      	cmp	r1, #0
 80089b8:	d103      	bne.n	80089c2 <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80089ba:	23f1      	movs	r3, #241	; 0xf1
 80089bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80089c0:	e0a5      	b.n	8008b0e <VL53LX_hist_copy_and_scale_ambient_info+0x192>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 80089c2:	6879      	ldr	r1, [r7, #4]
 80089c4:	7849      	ldrb	r1, [r1, #1]
 80089c6:	2900      	cmp	r1, #0
 80089c8:	f000 80a1 	beq.w	8008b0e <VL53LX_hist_copy_and_scale_ambient_info+0x192>
			podata->number_of_ambient_bins == 0) {
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	7ac9      	ldrb	r1, [r1, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 80089d0:	2900      	cmp	r1, #0
 80089d2:	f040 809c 	bne.w	8008b0e <VL53LX_hist_copy_and_scale_ambient_info+0x192>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	f8d1 1088 	ldr.w	r1, [r1, #136]	; 0x88
 80089dc:	4608      	mov	r0, r1
 80089de:	f04f 0100 	mov.w	r1, #0
 80089e2:	f110 0a01 	adds.w	sl, r0, #1
 80089e6:	f141 0b00 	adc.w	fp, r1, #0
 80089ea:	e9c7 ab02 	strd	sl, fp, [r7, #8]
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
 80089f4:	b288      	uxth	r0, r1
 80089f6:	f04f 0100 	mov.w	r1, #0
			tmpo   *=
 80089fa:	68fe      	ldr	r6, [r7, #12]
 80089fc:	fb00 fc06 	mul.w	ip, r0, r6
 8008a00:	68be      	ldr	r6, [r7, #8]
 8008a02:	fb01 f606 	mul.w	r6, r1, r6
 8008a06:	44b4      	add	ip, r6
 8008a08:	68be      	ldr	r6, [r7, #8]
 8008a0a:	fba6 0100 	umull	r0, r1, r6, r0
 8008a0e:	eb0c 0601 	add.w	r6, ip, r1
 8008a12:	4631      	mov	r1, r6
 8008a14:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8008a18:	e9c7 0102 	strd	r0, r1, [r7, #8]

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8008a1c:	6879      	ldr	r1, [r7, #4]
 8008a1e:	6889      	ldr	r1, [r1, #8]
 8008a20:	4608      	mov	r0, r1
 8008a22:	f04f 0100 	mov.w	r1, #0
 8008a26:	1c44      	adds	r4, r0, #1
 8008a28:	f141 0500 	adc.w	r5, r1, #0
 8008a2c:	e9c7 4504 	strd	r4, r5, [r7, #16]
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 8008a30:	6879      	ldr	r1, [r7, #4]
 8008a32:	8849      	ldrh	r1, [r1, #2]
 8008a34:	b288      	uxth	r0, r1
 8008a36:	f04f 0100 	mov.w	r1, #0
			tmpi   *=
 8008a3a:	697c      	ldr	r4, [r7, #20]
 8008a3c:	fb00 f504 	mul.w	r5, r0, r4
 8008a40:	693c      	ldr	r4, [r7, #16]
 8008a42:	fb01 f404 	mul.w	r4, r1, r4
 8008a46:	442c      	add	r4, r5
 8008a48:	693d      	ldr	r5, [r7, #16]
 8008a4a:	fba5 0100 	umull	r0, r1, r5, r0
 8008a4e:	440c      	add	r4, r1
 8008a50:	4621      	mov	r1, r4
 8008a52:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8008a56:	e9c7 0104 	strd	r0, r1, [r7, #16]

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	68c9      	ldr	r1, [r1, #12]
 8008a5e:	4608      	mov	r0, r1
 8008a60:	ea4f 71e0 	mov.w	r1, r0, asr #31
			evts  = tmpo *
 8008a64:	68fc      	ldr	r4, [r7, #12]
 8008a66:	fb00 f504 	mul.w	r5, r0, r4
 8008a6a:	68bc      	ldr	r4, [r7, #8]
 8008a6c:	fb01 f404 	mul.w	r4, r1, r4
 8008a70:	442c      	add	r4, r5
 8008a72:	68bd      	ldr	r5, [r7, #8]
 8008a74:	fba5 0100 	umull	r0, r1, r5, r0
 8008a78:	440c      	add	r4, r1
 8008a7a:	4621      	mov	r1, r4
 8008a7c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8008a80:	e9c7 0106 	strd	r0, r1, [r7, #24]
			evts += (tmpi/2);
 8008a84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008a88:	0fcc      	lsrs	r4, r1, #31
 8008a8a:	f04f 0500 	mov.w	r5, #0
 8008a8e:	1822      	adds	r2, r4, r0
 8008a90:	eb45 0301 	adc.w	r3, r5, r1
 8008a94:	f04f 0000 	mov.w	r0, #0
 8008a98:	f04f 0100 	mov.w	r1, #0
 8008a9c:	0850      	lsrs	r0, r2, #1
 8008a9e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8008aa2:	1059      	asrs	r1, r3, #1
 8008aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008aa8:	eb12 0800 	adds.w	r8, r2, r0
 8008aac:	eb43 0901 	adc.w	r9, r3, r1
 8008ab0:	e9c7 8906 	strd	r8, r9, [r7, #24]


			if (tmpi != 0)
 8008ab4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	d009      	beq.n	8008ad0 <VL53LX_hist_copy_and_scale_ambient_info+0x154>
				evts = do_division_s(evts, tmpi);
 8008abc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ac0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ac4:	f7f7 fbdc 	bl	8000280 <__aeabi_ldivmod>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	460b      	mov	r3, r1
 8008acc:	e9c7 2306 	strd	r2, r3, [r7, #24]

			podata->ambient_events_sum = (int32_t)evts;
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53LX_p_028 =
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 +=
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	7852      	ldrb	r2, [r2, #1]
 8008aee:	0852      	lsrs	r2, r2, #1
 8008af0:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 8008af2:	441a      	add	r2, r3
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 /=
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 8008b04:	fb93 f2f2 	sdiv	r2, r3, r2
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 8008b0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	372c      	adds	r7, #44	; 0x2c
 8008b16:	46bd      	mov	sp, r7
 8008b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b1c <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	3318      	adds	r3, #24
 8008b2a:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 8008b30:	2300      	movs	r3, #0
 8008b32:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 8008b34:	2300      	movs	r3, #0
 8008b36:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	; 0x2fa
	amb_thresh_low  = 1024 *
 8008b3e:	029b      	lsls	r3, r3, #10
 8008b40:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
	amb_thresh_high = 1024 *
 8008b48:	029b      	lsls	r3, r3, #10
 8008b4a:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f040 8095 	bne.w	8008c86 <VL53LX_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
		pdata->bin_seq[5] =
 8008b62:	091b      	lsrs	r3, r3, #4
 8008b64:	b2da      	uxtb	r2, r3
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
 8008b70:	f003 030f 	and.w	r3, r3, #15
 8008b74:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
		pdata->bin_seq[3] =
 8008b80:	091b      	lsrs	r3, r3, #4
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
 8008b8e:	f003 030f 	and.w	r3, r3, #15
 8008b92:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
		pdata->bin_seq[1] =
 8008b9e:	091b      	lsrs	r3, r3, #4
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
 8008bac:	f003 030f 	and.w	r3, r3, #15
 8008bb0:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	da2c      	bge.n	8008c1c <VL53LX_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			pdata->bin_seq[5] =
 8008bc8:	091b      	lsrs	r3, r3, #4
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			& 0x0F;
 8008bd6:	f003 030f 	and.w	r3, r3, #15
 8008bda:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			pdata->bin_seq[3] =
 8008be6:	091b      	lsrs	r3, r3, #4
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			& 0x0F;
 8008bf4:	f003 030f 	and.w	r3, r3, #15
 8008bf8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			pdata->bin_seq[1] =
 8008c04:	091b      	lsrs	r3, r3, #4
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			& 0x0F;
 8008c12:	f003 030f 	and.w	r3, r3, #15
 8008c16:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	f340 80c2 	ble.w	8008dae <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			pdata->bin_seq[5] =
 8008c30:	091b      	lsrs	r3, r3, #4
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			& 0x0F;
 8008c3e:	f003 030f 	and.w	r3, r3, #15
 8008c42:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			pdata->bin_seq[3] =
 8008c4e:	091b      	lsrs	r3, r3, #4
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			& 0x0F;
 8008c5c:	f003 030f 	and.w	r3, r3, #15
 8008c60:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			pdata->bin_seq[1] =
 8008c6c:	091b      	lsrs	r3, r3, #4
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			& 0x0F;
 8008c7a:	f003 030f 	and.w	r3, r3, #15
 8008c7e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	731a      	strb	r2, [r3, #12]
 8008c84:	e093      	b.n	8008dae <VL53LX_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	f893 32f1 	ldrb.w	r3, [r3, #753]	; 0x2f1
			& 0x0F;
 8008c8c:	f003 030f 	and.w	r3, r3, #15
 8008c90:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
			& 0x0F;
 8008c9c:	f003 030f 	and.w	r3, r3, #15
 8008ca0:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
		pdata->bin_seq[3] =
 8008cac:	091b      	lsrs	r3, r3, #4
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	f893 32ef 	ldrb.w	r3, [r3, #751]	; 0x2ef
 8008cba:	f003 030f 	and.w	r3, r3, #15
 8008cbe:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
		pdata->bin_seq[1] =
 8008cca:	091b      	lsrs	r3, r3, #4
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
			& 0x0F;
 8008cd8:	f003 030f 	and.w	r3, r3, #15
 8008cdc:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	da2c      	bge.n	8008d48 <VL53LX_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			pdata->bin_seq[5] =
 8008cf4:	091b      	lsrs	r3, r3, #4
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			& 0x0F;
 8008d02:	f003 030f 	and.w	r3, r3, #15
 8008d06:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			pdata->bin_seq[3] =
 8008d12:	091b      	lsrs	r3, r3, #4
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			& 0x0F;
 8008d20:	f003 030f 	and.w	r3, r3, #15
 8008d24:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			pdata->bin_seq[1] =
 8008d30:	091b      	lsrs	r3, r3, #4
 8008d32:	b2da      	uxtb	r2, r3
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			& 0x0F;
 8008d3e:	f003 030f 	and.w	r3, r3, #15
 8008d42:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	dd2c      	ble.n	8008dae <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			pdata->bin_seq[5] =
 8008d5a:	091b      	lsrs	r3, r3, #4
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			& 0x0F;
 8008d68:	f003 030f 	and.w	r3, r3, #15
 8008d6c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			pdata->bin_seq[3] =
 8008d78:	091b      	lsrs	r3, r3, #4
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			& 0x0F;
 8008d86:	f003 030f 	and.w	r3, r3, #15
 8008d8a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			pdata->bin_seq[1] =
 8008d96:	091b      	lsrs	r3, r3, #4
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			& 0x0F;
 8008da4:	f003 030f 	and.w	r3, r3, #15
 8008da8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8008dae:	2300      	movs	r3, #0
 8008db0:	75fb      	strb	r3, [r7, #23]
 8008db2:	e007      	b.n	8008dc4 <VL53LX_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 8008db4:	7dfb      	ldrb	r3, [r7, #23]
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	4413      	add	r3, r2
 8008dba:	2201      	movs	r2, #1
 8008dbc:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	75fb      	strb	r3, [r7, #23]
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
 8008dc6:	2b05      	cmp	r3, #5
 8008dc8:	d9f4      	bls.n	8008db4 <VL53LX_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 8008dca:	bf00      	nop
 8008dcc:	bf00      	nop
 8008dce:	371c      	adds	r7, #28
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 8008dd8:	b590      	push	{r4, r7, lr}
 8008dda:	b093      	sub	sp, #76	; 0x4c
 8008ddc:	af04      	add	r7, sp, #16
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
 8008de4:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008de6:	2300      	movs	r3, #0
 8008de8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_LLDriverData_t *pdev =
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	3318      	adds	r3, #24
 8008df0:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8008e18:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 8008e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1e:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 8008e22:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 8008e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e26:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 8008e2a:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 8008e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2e:	f893 3236 	ldrb.w	r3, [r3, #566]	; 0x236
 8008e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 8008e36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e3a:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 8008e3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008e3e:	021b      	lsls	r3, r3, #8
 8008e40:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	785b      	ldrb	r3, [r3, #1]
 8008e46:	2b07      	cmp	r3, #7
 8008e48:	d006      	beq.n	8008e58 <VL53LX_hist_phase_consistency_check+0x80>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 8008e4e:	2b08      	cmp	r3, #8
 8008e50:	d002      	beq.n	8008e58 <VL53LX_hist_phase_consistency_check+0x80>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 8008e52:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008e56:	e0ec      	b.n	8009032 <VL53LX_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 8008e58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d102      	bne.n	8008e64 <VL53LX_hist_phase_consistency_check+0x8c>
		return status;
 8008e5e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008e62:	e0e6      	b.n	8009032 <VL53LX_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8008e64:	2300      	movs	r3, #0
 8008e66:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8008e6a:	e0d9      	b.n	8009020 <VL53LX_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8008e6c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	214c      	movs	r1, #76	; 0x4c
 8008e74:	fb01 f303 	mul.w	r3, r1, r3
 8008e78:	4413      	add	r3, r2
 8008e7a:	335e      	adds	r3, #94	; 0x5e
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	2b09      	cmp	r3, #9
 8008e80:	d00b      	beq.n	8008e9a <VL53LX_hist_phase_consistency_check+0xc2>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 8008e82:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	214c      	movs	r1, #76	; 0x4c
 8008e8a:	fb01 f303 	mul.w	r3, r1, r3
 8008e8e:	4413      	add	r3, r2
 8008e90:	335e      	adds	r3, #94	; 0x5e
 8008e92:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8008e94:	2b13      	cmp	r3, #19
 8008e96:	f040 80bd 	bne.w	8009014 <VL53LX_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	795b      	ldrb	r3, [r3, #5]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10a      	bne.n	8008eb8 <VL53LX_hist_phase_consistency_check+0xe0>
			prange_curr->VL53LX_p_003[lc].range_status =
 8008ea2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	214c      	movs	r1, #76	; 0x4c
 8008eaa:	fb01 f303 	mul.w	r3, r1, r3
 8008eae:	4413      	add	r3, r2
 8008eb0:	335e      	adds	r3, #94	; 0x5e
 8008eb2:	2217      	movs	r2, #23
 8008eb4:	701a      	strb	r2, [r3, #0]
 8008eb6:	e009      	b.n	8008ecc <VL53LX_hist_phase_consistency_check+0xf4>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 8008eb8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	214c      	movs	r1, #76	; 0x4c
 8008ec0:	fb01 f303 	mul.w	r3, r1, r3
 8008ec4:	4413      	add	r3, r2
 8008ec6:	335e      	adds	r3, #94	; 0x5e
 8008ec8:	2207      	movs	r2, #7
 8008eca:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8008ed2:	e097      	b.n	8009004 <VL53LX_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8008ed4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	214c      	movs	r1, #76	; 0x4c
 8008edc:	fb01 f303 	mul.w	r3, r1, r3
 8008ee0:	4413      	add	r3, r2
 8008ee2:	3354      	adds	r3, #84	; 0x54
 8008ee4:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8008ee6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	4613      	mov	r3, r2
 8008eee:	005b      	lsls	r3, r3, #1
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4403      	add	r3, r0
 8008ef6:	3310      	adds	r3, #16
 8008ef8:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8008efa:	4299      	cmp	r1, r3
 8008efc:	d915      	bls.n	8008f2a <VL53LX_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 8008efe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	214c      	movs	r1, #76	; 0x4c
 8008f06:	fb01 f303 	mul.w	r3, r1, r3
 8008f0a:	4413      	add	r3, r2
 8008f0c:	3354      	adds	r3, #84	; 0x54
 8008f0e:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 8008f10:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	4613      	mov	r3, r2
 8008f18:	005b      	lsls	r3, r3, #1
 8008f1a:	4413      	add	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4403      	add	r3, r0
 8008f20:	3310      	adds	r3, #16
 8008f22:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8008f24:	1acb      	subs	r3, r1, r3
 8008f26:	867b      	strh	r3, [r7, #50]	; 0x32
 8008f28:	e014      	b.n	8008f54 <VL53LX_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 8008f2a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008f2e:	6879      	ldr	r1, [r7, #4]
 8008f30:	4613      	mov	r3, r2
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	4413      	add	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	440b      	add	r3, r1
 8008f3a:	3310      	adds	r3, #16
 8008f3c:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 8008f3e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	204c      	movs	r0, #76	; 0x4c
 8008f46:	fb00 f303 	mul.w	r3, r0, r3
 8008f4a:	440b      	add	r3, r1
 8008f4c:	3354      	adds	r3, #84	; 0x54
 8008f4e:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 8008f54:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008f56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d24e      	bcs.n	8008ffa <VL53LX_hist_phase_consistency_check+0x222>





				if (status == VL53LX_ERROR_NONE)
 8008f5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d125      	bne.n	8008fb0 <VL53LX_hist_phase_consistency_check+0x1d8>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 8008f64:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53LX_hist_events_consistency_check(
 8008f68:	4613      	mov	r3, r2
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	4413      	add	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	3308      	adds	r3, #8
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 8008f76:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_events_consistency_check(
 8008f7a:	224c      	movs	r2, #76	; 0x4c
 8008f7c:	fb02 f303 	mul.w	r3, r2, r3
 8008f80:	3310      	adds	r3, #16
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	4413      	add	r3, r2
 8008f86:	3304      	adds	r3, #4
 8008f88:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8008f8a:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 8008f8e:	f107 0217 	add.w	r2, r7, #23
 8008f92:	9203      	str	r2, [sp, #12]
 8008f94:	f107 021c 	add.w	r2, r7, #28
 8008f98:	9202      	str	r2, [sp, #8]
 8008f9a:	f107 0218 	add.w	r2, r7, #24
 8008f9e:	9201      	str	r2, [sp, #4]
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	4623      	mov	r3, r4
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	f000 f848 	bl	800903a <VL53LX_hist_events_consistency_check>
 8008faa:	4603      	mov	r3, r0
 8008fac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 8008fb0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d115      	bne.n	8008fe4 <VL53LX_hist_phase_consistency_check+0x20c>
					range_status ==
 8008fb8:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 8008fba:	2b09      	cmp	r3, #9
 8008fbc:	d112      	bne.n	8008fe4 <VL53LX_hist_phase_consistency_check+0x20c>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 8008fbe:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 8008fc2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_merged_pulse_check(
 8008fc6:	224c      	movs	r2, #76	; 0x4c
 8008fc8:	fb02 f303 	mul.w	r3, r2, r3
 8008fcc:	3310      	adds	r3, #16
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	f107 0217 	add.w	r2, r7, #23
 8008fd8:	4619      	mov	r1, r3
 8008fda:	f000 faaf 	bl	800953c <VL53LX_hist_merged_pulse_check>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 8008fe4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008fe8:	7df8      	ldrb	r0, [r7, #23]
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	214c      	movs	r1, #76	; 0x4c
 8008fee:	fb01 f303 	mul.w	r3, r1, r3
 8008ff2:	4413      	add	r3, r2
 8008ff4:	335e      	adds	r3, #94	; 0x5e
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 8008ffa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008ffe:	3301      	adds	r3, #1
 8009000:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	795b      	ldrb	r3, [r3, #5]
 8009008:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800900c:	429a      	cmp	r2, r3
 800900e:	f4ff af61 	bcc.w	8008ed4 <VL53LX_hist_phase_consistency_check+0xfc>
 8009012:	e000      	b.n	8009016 <VL53LX_hist_phase_consistency_check+0x23e>
			continue;
 8009014:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8009016:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800901a:	3301      	adds	r3, #1
 800901c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	7c9b      	ldrb	r3, [r3, #18]
 8009024:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8009028:	429a      	cmp	r2, r3
 800902a:	f4ff af1f 	bcc.w	8008e6c <VL53LX_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800902e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009032:	4618      	mov	r0, r3
 8009034:	373c      	adds	r7, #60	; 0x3c
 8009036:	46bd      	mov	sp, r7
 8009038:	bd90      	pop	{r4, r7, pc}

0800903a <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 800903a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800903e:	b0a8      	sub	sp, #160	; 0xa0
 8009040:	af00      	add	r7, sp, #0
 8009042:	64ba      	str	r2, [r7, #72]	; 0x48
 8009044:	647b      	str	r3, [r7, #68]	; 0x44
 8009046:	4603      	mov	r3, r0
 8009048:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800904c:	460b      	mov	r3, r1
 800904e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009052:	2300      	movs	r3, #0
 8009054:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	int64_t   tmpp                   = 0;
 8009058:	f04f 0200 	mov.w	r2, #0
 800905c:	f04f 0300 	mov.w	r3, #0
 8009060:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	int64_t   tmpc                   = 0;
 8009064:	f04f 0200 	mov.w	r2, #0
 8009068:	f04f 0300 	mov.w	r3, #0
 800906c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	int64_t   events_scaler          = 0;
 8009070:	f04f 0200 	mov.w	r2, #0
 8009074:	f04f 0300 	mov.w	r3, #0
 8009078:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	int64_t   events_scaler_sq       = 0;
 800907c:	f04f 0200 	mov.w	r2, #0
 8009080:	f04f 0300 	mov.w	r3, #0
 8009084:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t   c_signal_events        = 0;
 8009088:	f04f 0200 	mov.w	r2, #0
 800908c:	f04f 0300 	mov.w	r3, #0
 8009090:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	int64_t   c_sig_noise_sq         = 0;
 8009094:	f04f 0200 	mov.w	r2, #0
 8009098:	f04f 0300 	mov.w	r3, #0
 800909c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t   c_amb_noise_sq         = 0;
 80090a0:	f04f 0200 	mov.w	r2, #0
 80090a4:	f04f 0300 	mov.w	r3, #0
 80090a8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t   p_amb_noise_sq         = 0;
 80090ac:	f04f 0200 	mov.w	r2, #0
 80090b0:	f04f 0300 	mov.w	r3, #0
 80090b4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	int32_t   p_signal_events        = 0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t  noise_sq_sum           = 0;
 80090bc:	2300      	movs	r3, #0
 80090be:	653b      	str	r3, [r7, #80]	; 0x50



	if (event_sigma == 0) {
 80090c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d106      	bne.n	80090d6 <VL53LX_hist_events_consistency_check+0x9c>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 80090c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80090cc:	2209      	movs	r2, #9
 80090ce:	701a      	strb	r2, [r3, #0]
		return status;
 80090d0:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 80090d4:	e22d      	b.n	8009532 <VL53LX_hist_events_consistency_check+0x4f8>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 80090d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	461a      	mov	r2, r3
 80090dc:	f04f 0300 	mov.w	r3, #0
 80090e0:	f112 0801 	adds.w	r8, r2, #1
 80090e4:	f143 0900 	adc.w	r9, r3, #0
 80090e8:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 80090ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ee:	885b      	ldrh	r3, [r3, #2]
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	f04f 0300 	mov.w	r3, #0
 80090f6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80090fa:	fb02 f001 	mul.w	r0, r2, r1
 80090fe:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8009102:	fb03 f101 	mul.w	r1, r3, r1
 8009106:	4408      	add	r0, r1
 8009108:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800910c:	fba1 2302 	umull	r2, r3, r1, r2
 8009110:	18c1      	adds	r1, r0, r3
 8009112:	460b      	mov	r3, r1
 8009114:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8009118:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800911c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	461a      	mov	r2, r3
 8009124:	f04f 0300 	mov.w	r3, #0
 8009128:	f112 0a01 	adds.w	sl, r2, #1
 800912c:	f143 0b00 	adc.w	fp, r3, #0
 8009130:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 8009134:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009138:	8adb      	ldrh	r3, [r3, #22]
 800913a:	b29a      	uxth	r2, r3
 800913c:	f04f 0300 	mov.w	r3, #0
 8009140:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009144:	fb02 f001 	mul.w	r0, r2, r1
 8009148:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800914c:	fb03 f101 	mul.w	r1, r3, r1
 8009150:	4408      	add	r0, r1
 8009152:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009156:	fba1 2302 	umull	r2, r3, r1, r2
 800915a:	18c1      	adds	r1, r0, r3
 800915c:	460b      	mov	r3, r1
 800915e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8009162:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80



	events_scaler  = tmpp * 4096;
 8009166:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800916a:	f04f 0000 	mov.w	r0, #0
 800916e:	f04f 0100 	mov.w	r1, #0
 8009172:	0319      	lsls	r1, r3, #12
 8009174:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8009178:	0310      	lsls	r0, r2, #12
 800917a:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
	if (tmpc != 0) {
 800917e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009182:	4313      	orrs	r3, r2
 8009184:	d026      	beq.n	80091d4 <VL53LX_hist_events_consistency_check+0x19a>
		events_scaler += (tmpc/2);
 8009186:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800918a:	0fcb      	lsrs	r3, r1, #31
 800918c:	461a      	mov	r2, r3
 800918e:	f04f 0300 	mov.w	r3, #0
 8009192:	1814      	adds	r4, r2, r0
 8009194:	eb43 0501 	adc.w	r5, r3, r1
 8009198:	f04f 0200 	mov.w	r2, #0
 800919c:	f04f 0300 	mov.w	r3, #0
 80091a0:	0862      	lsrs	r2, r4, #1
 80091a2:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 80091a6:	106b      	asrs	r3, r5, #1
 80091a8:	4610      	mov	r0, r2
 80091aa:	4619      	mov	r1, r3
 80091ac:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80091b0:	1814      	adds	r4, r2, r0
 80091b2:	63bc      	str	r4, [r7, #56]	; 0x38
 80091b4:	414b      	adcs	r3, r1
 80091b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091b8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80091bc:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		events_scaler  = do_division_s(events_scaler, tmpc);
 80091c0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80091c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80091c8:	f7f7 f85a 	bl	8000280 <__aeabi_ldivmod>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	}

	events_scaler_sq  = events_scaler * events_scaler;
 80091d4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80091d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091dc:	fb03 f102 	mul.w	r1, r3, r2
 80091e0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80091e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091e8:	fb03 f302 	mul.w	r3, r3, r2
 80091ec:	4419      	add	r1, r3
 80091ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091f2:	fba3 2303 	umull	r2, r3, r3, r3
 80091f6:	4419      	add	r1, r3
 80091f8:	460b      	mov	r3, r1
 80091fa:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 80091fe:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	events_scaler_sq += 2048;
 8009202:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009206:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800920a:	6339      	str	r1, [r7, #48]	; 0x30
 800920c:	f143 0300 	adc.w	r3, r3, #0
 8009210:	637b      	str	r3, [r7, #52]	; 0x34
 8009212:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8009216:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	events_scaler_sq /= 4096;
 800921a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800921e:	4610      	mov	r0, r2
 8009220:	4619      	mov	r1, r3
 8009222:	2800      	cmp	r0, #0
 8009224:	f171 0300 	sbcs.w	r3, r1, #0
 8009228:	da06      	bge.n	8009238 <VL53LX_hist_events_consistency_check+0x1fe>
 800922a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800922e:	f04f 0300 	mov.w	r3, #0
 8009232:	1880      	adds	r0, r0, r2
 8009234:	eb43 0101 	adc.w	r1, r3, r1
 8009238:	f04f 0200 	mov.w	r2, #0
 800923c:	f04f 0300 	mov.w	r3, #0
 8009240:	0b02      	lsrs	r2, r0, #12
 8009242:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8009246:	130b      	asrs	r3, r1, #12
 8009248:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 800924c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009252:	461a      	mov	r2, r3
 8009254:	f04f 0300 	mov.w	r3, #0
 8009258:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 800925c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	4618      	mov	r0, r3
 8009264:	f04f 0100 	mov.w	r1, #0
 8009268:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800926c:	1a14      	subs	r4, r2, r0
 800926e:	62bc      	str	r4, [r7, #40]	; 0x28
 8009270:	eb63 0301 	sbc.w	r3, r3, r1
 8009274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009276:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800927a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events *= (int64_t)events_scaler;
 800927e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009280:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009284:	fb02 f203 	mul.w	r2, r2, r3
 8009288:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800928c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800928e:	fb01 f303 	mul.w	r3, r1, r3
 8009292:	18d1      	adds	r1, r2, r3
 8009294:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009296:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800929a:	fba2 2303 	umull	r2, r3, r2, r3
 800929e:	4419      	add	r1, r3
 80092a0:	460b      	mov	r3, r1
 80092a2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80092a6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events += 2048;
 80092aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80092ae:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 80092b2:	6239      	str	r1, [r7, #32]
 80092b4:	f143 0300 	adc.w	r3, r3, #0
 80092b8:	627b      	str	r3, [r7, #36]	; 0x24
 80092ba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80092be:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events /= 4096;
 80092c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80092c6:	2a00      	cmp	r2, #0
 80092c8:	f173 0100 	sbcs.w	r1, r3, #0
 80092cc:	da06      	bge.n	80092dc <VL53LX_hist_events_consistency_check+0x2a2>
 80092ce:	f640 70ff 	movw	r0, #4095	; 0xfff
 80092d2:	f04f 0100 	mov.w	r1, #0
 80092d6:	1812      	adds	r2, r2, r0
 80092d8:	eb41 0303 	adc.w	r3, r1, r3
 80092dc:	f04f 0000 	mov.w	r0, #0
 80092e0:	f04f 0100 	mov.w	r1, #0
 80092e4:	0b10      	lsrs	r0, r2, #12
 80092e6:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80092ea:	1319      	asrs	r1, r3, #12
 80092ec:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 80092f0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80092f4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 80092f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80092fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fe:	461a      	mov	r2, r3
 8009300:	f04f 0300 	mov.w	r3, #0
 8009304:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009306:	fb02 f001 	mul.w	r0, r2, r1
 800930a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800930c:	fb03 f101 	mul.w	r1, r3, r1
 8009310:	4401      	add	r1, r0
 8009312:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009314:	fba0 2302 	umull	r2, r3, r0, r2
 8009318:	4419      	add	r1, r3
 800931a:	460b      	mov	r3, r1
 800931c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8009320:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq += 2048;
 8009324:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009328:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800932c:	61b9      	str	r1, [r7, #24]
 800932e:	f143 0300 	adc.w	r3, r3, #0
 8009332:	61fb      	str	r3, [r7, #28]
 8009334:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009338:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	c_sig_noise_sq /= 4096;
 800933c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009340:	2a00      	cmp	r2, #0
 8009342:	f173 0100 	sbcs.w	r1, r3, #0
 8009346:	da06      	bge.n	8009356 <VL53LX_hist_events_consistency_check+0x31c>
 8009348:	f640 70ff 	movw	r0, #4095	; 0xfff
 800934c:	f04f 0100 	mov.w	r1, #0
 8009350:	1812      	adds	r2, r2, r0
 8009352:	eb41 0303 	adc.w	r3, r1, r3
 8009356:	f04f 0000 	mov.w	r0, #0
 800935a:	f04f 0100 	mov.w	r1, #0
 800935e:	0b10      	lsrs	r0, r2, #12
 8009360:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009364:	1319      	asrs	r1, r3, #12
 8009366:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800936a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800936e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 8009372:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009378:	461a      	mov	r2, r3
 800937a:	f04f 0300 	mov.w	r3, #0
 800937e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009380:	fb02 f001 	mul.w	r0, r2, r1
 8009384:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009386:	fb03 f101 	mul.w	r1, r3, r1
 800938a:	4401      	add	r1, r0
 800938c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800938e:	fba0 2302 	umull	r2, r3, r0, r2
 8009392:	4419      	add	r1, r3
 8009394:	460b      	mov	r3, r1
 8009396:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800939a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq += 2048;
 800939e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80093a2:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 80093a6:	6139      	str	r1, [r7, #16]
 80093a8:	f143 0300 	adc.w	r3, r3, #0
 80093ac:	617b      	str	r3, [r7, #20]
 80093ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80093b2:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4096;
 80093b6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80093ba:	2a00      	cmp	r2, #0
 80093bc:	f173 0100 	sbcs.w	r1, r3, #0
 80093c0:	da06      	bge.n	80093d0 <VL53LX_hist_events_consistency_check+0x396>
 80093c2:	f640 70ff 	movw	r0, #4095	; 0xfff
 80093c6:	f04f 0100 	mov.w	r1, #0
 80093ca:	1812      	adds	r2, r2, r0
 80093cc:	eb41 0303 	adc.w	r3, r1, r3
 80093d0:	f04f 0000 	mov.w	r0, #0
 80093d4:	f04f 0100 	mov.w	r1, #0
 80093d8:	0b10      	lsrs	r0, r2, #12
 80093da:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80093de:	1319      	asrs	r1, r3, #12
 80093e0:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60


	c_amb_noise_sq += 2;
 80093e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80093e8:	1c91      	adds	r1, r2, #2
 80093ea:	60b9      	str	r1, [r7, #8]
 80093ec:	f143 0300 	adc.w	r3, r3, #0
 80093f0:	60fb      	str	r3, [r7, #12]
 80093f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80093f6:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4;
 80093fa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80093fe:	2a00      	cmp	r2, #0
 8009400:	f173 0100 	sbcs.w	r1, r3, #0
 8009404:	da02      	bge.n	800940c <VL53LX_hist_events_consistency_check+0x3d2>
 8009406:	3203      	adds	r2, #3
 8009408:	f143 0300 	adc.w	r3, r3, #0
 800940c:	f04f 0000 	mov.w	r0, #0
 8009410:	f04f 0100 	mov.w	r1, #0
 8009414:	0890      	lsrs	r0, r2, #2
 8009416:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800941a:	1099      	asrs	r1, r3, #2
 800941c:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 8009420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009422:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 8009424:	461a      	mov	r2, r3
 8009426:	f04f 0300 	mov.w	r3, #0
 800942a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	p_amb_noise_sq += 2;
 800942e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009432:	1c91      	adds	r1, r2, #2
 8009434:	6039      	str	r1, [r7, #0]
 8009436:	f143 0300 	adc.w	r3, r3, #0
 800943a:	607b      	str	r3, [r7, #4]
 800943c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009440:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	p_amb_noise_sq /= 4;
 8009444:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009448:	2a00      	cmp	r2, #0
 800944a:	f173 0100 	sbcs.w	r1, r3, #0
 800944e:	da02      	bge.n	8009456 <VL53LX_hist_events_consistency_check+0x41c>
 8009450:	3203      	adds	r2, #3
 8009452:	f143 0300 	adc.w	r3, r3, #0
 8009456:	f04f 0000 	mov.w	r0, #0
 800945a:	f04f 0100 	mov.w	r1, #0
 800945e:	0890      	lsrs	r0, r2, #2
 8009460:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8009464:	1099      	asrs	r1, r3, #2
 8009466:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 800946a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800946c:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800946e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
		(uint32_t)prange_prev->VL53LX_p_017 +
 8009470:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 8009472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		(uint32_t)c_sig_noise_sq +
 8009474:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 8009476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	noise_sq_sum =
 8009478:	4413      	add	r3, r2
 800947a:	653b      	str	r3, [r7, #80]	; 0x50

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 800947c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800947e:	011b      	lsls	r3, r3, #4
 8009480:	4618      	mov	r0, r3
 8009482:	f002 f822 	bl	800b4ca <VL53LX_isqrt>
 8009486:	4603      	mov	r3, r0
 8009488:	461a      	mov	r2, r3
	*pevents_tolerance =
 800948a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800948e:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 8009490:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800949a:	fb02 f203 	mul.w	r2, r2, r3
 800949e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094a2:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 80094a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f103 0220 	add.w	r2, r3, #32
 80094ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094b2:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 80094b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	da00      	bge.n	80094c0 <VL53LX_hist_events_consistency_check+0x486>
 80094be:	333f      	adds	r3, #63	; 0x3f
 80094c0:	119b      	asrs	r3, r3, #6
 80094c2:	461a      	mov	r2, r3
 80094c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094c8:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 80094ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	657b      	str	r3, [r7, #84]	; 0x54
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 80094d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	461a      	mov	r2, r3
 80094d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094d8:	1a9b      	subs	r3, r3, r2
 80094da:	657b      	str	r3, [r7, #84]	; 0x54

	if ((int32_t)c_signal_events > p_signal_events)
 80094dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094e0:	429a      	cmp	r2, r3
 80094e2:	da06      	bge.n	80094f2 <VL53LX_hist_events_consistency_check+0x4b8>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 80094e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80094e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094e8:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 80094ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094ee:	601a      	str	r2, [r3, #0]
 80094f0:	e005      	b.n	80094fe <VL53LX_hist_events_consistency_check+0x4c4>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 80094f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094f6:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 80094f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094fc:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 80094fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	429a      	cmp	r2, r3
 800950c:	dd0b      	ble.n	8009526 <VL53LX_hist_events_consistency_check+0x4ec>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 800950e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009512:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 8009514:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009518:	429a      	cmp	r2, r3
 800951a:	d204      	bcs.n	8009526 <VL53LX_hist_events_consistency_check+0x4ec>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 800951c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009520:	2214      	movs	r2, #20
 8009522:	701a      	strb	r2, [r3, #0]
 8009524:	e003      	b.n	800952e <VL53LX_hist_events_consistency_check+0x4f4>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8009526:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800952a:	2209      	movs	r2, #9
 800952c:	701a      	strb	r2, [r3, #0]





	return status;
 800952e:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 8009532:	4618      	mov	r0, r3
 8009534:	37a0      	adds	r7, #160	; 0xa0
 8009536:	46bd      	mov	sp, r7
 8009538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800953c <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 800953c:	b480      	push	{r7}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	4603      	mov	r3, r0
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
 8009548:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 800954a:	2300      	movs	r3, #0
 800954c:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800955e:	429a      	cmp	r2, r3
 8009560:	dd0b      	ble.n	800957a <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8009568:	b29a      	uxth	r2, r3
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8009570:	b29b      	uxth	r3, r3
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	b29b      	uxth	r3, r3
		delta_mm =
 8009576:	82fb      	strh	r3, [r7, #22]
 8009578:	e00a      	b.n	8009590 <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8009580:	b29a      	uxth	r2, r3
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8009588:	b29b      	uxth	r3, r3
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	b29b      	uxth	r3, r3
		delta_mm =
 800958e:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 8009590:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009594:	2b00      	cmp	r3, #0
 8009596:	dd09      	ble.n	80095ac <VL53LX_hist_merged_pulse_check+0x70>
 8009598:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800959c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	dd03      	ble.n	80095ac <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2216      	movs	r2, #22
 80095a8:	701a      	strb	r2, [r3, #0]
 80095aa:	e002      	b.n	80095b2 <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2209      	movs	r2, #9
 80095b0:	701a      	strb	r2, [r3, #0]

	return status;
 80095b2:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	371c      	adds	r7, #28
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b08e      	sub	sp, #56	; 0x38
 80095c6:	af04      	add	r7, sp, #16
 80095c8:	60f8      	str	r0, [r7, #12]
 80095ca:	60b9      	str	r1, [r7, #8]
 80095cc:	607a      	str	r2, [r7, #4]
 80095ce:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80095d0:	2300      	movs	r3, #0
 80095d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev =
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	3318      	adds	r3, #24
 80095da:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 80095dc:	2300      	movs	r3, #0
 80095de:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 80095ea:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 80095f2:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80095fa:	2b09      	cmp	r3, #9
 80095fc:	d009      	beq.n	8009612 <VL53LX_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009604:	2b13      	cmp	r3, #19
 8009606:	d004      	beq.n	8009612 <VL53LX_hist_xmonitor_consistency_check+0x50>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800960e:	2b14      	cmp	r3, #20
 8009610:	d129      	bne.n	8009666 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009618:	2b09      	cmp	r3, #9
 800961a:	d009      	beq.n	8009630 <VL53LX_hist_xmonitor_consistency_check+0x6e>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009622:	2b13      	cmp	r3, #19
 8009624:	d004      	beq.n	8009630 <VL53LX_hist_xmonitor_consistency_check+0x6e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800962c:	2b14      	cmp	r3, #20
 800962e:	d11a      	bne.n	8009666 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2209      	movs	r2, #9
 8009634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	334a      	adds	r3, #74	; 0x4a
				VL53LX_hist_events_consistency_check(
 8009642:	8bb9      	ldrh	r1, [r7, #28]
 8009644:	7ff8      	ldrb	r0, [r7, #31]
 8009646:	9303      	str	r3, [sp, #12]
 8009648:	f107 0318 	add.w	r3, r7, #24
 800964c:	9302      	str	r3, [sp, #8]
 800964e:	f107 0314 	add.w	r3, r7, #20
 8009652:	9301      	str	r3, [sp, #4]
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	4613      	mov	r3, r2
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	f7ff fced 	bl	800903a <VL53LX_hist_events_consistency_check>
 8009660:	4603      	mov	r3, r0
 8009662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 8009666:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800966a:	4618      	mov	r0, r3
 800966c:	3728      	adds	r7, #40	; 0x28
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b088      	sub	sp, #32
 8009676:	af00      	add	r7, sp, #0
 8009678:	60f8      	str	r0, [r7, #12]
 800967a:	60b9      	str	r1, [r7, #8]
 800967c:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800967e:	2300      	movs	r3, #0
 8009680:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 8009686:	2300      	movs	r3, #0
 8009688:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800969a:	2b00      	cmp	r3, #0
 800969c:	d019      	beq.n	80096d2 <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80096a4:	4618      	mov	r0, r3
 80096a6:	f002 f877 	bl	800b798 <VL53LX_calc_pll_period_mm>
 80096aa:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 80096b2:	021b      	lsls	r3, r3, #8
 80096b4:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	fb02 f303 	mul.w	r3, r2, r3
 80096be:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80096c6:	0bdb      	lsrs	r3, r3, #15
 80096c8:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	b21a      	sxth	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 80096d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3720      	adds	r7, #32
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 80096de:	b590      	push	{r4, r7, lr}
 80096e0:	b08d      	sub	sp, #52	; 0x34
 80096e2:	af04      	add	r7, sp, #16
 80096e4:	4604      	mov	r4, r0
 80096e6:	4608      	mov	r0, r1
 80096e8:	4611      	mov	r1, r2
 80096ea:	461a      	mov	r2, r3
 80096ec:	4623      	mov	r3, r4
 80096ee:	80fb      	strh	r3, [r7, #6]
 80096f0:	4603      	mov	r3, r0
 80096f2:	80bb      	strh	r3, [r7, #4]
 80096f4:	460b      	mov	r3, r1
 80096f6:	70fb      	strb	r3, [r7, #3]
 80096f8:	4613      	mov	r3, r2
 80096fa:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 80096fc:	2300      	movs	r3, #0
 80096fe:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 8009700:	2300      	movs	r3, #0
 8009702:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 8009704:	2300      	movs	r3, #0
 8009706:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 8009708:	2300      	movs	r3, #0
 800970a:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 8009710:	2300      	movs	r3, #0
 8009712:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 8009714:	2300      	movs	r3, #0
 8009716:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 8009718:	2300      	movs	r3, #0
 800971a:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 800971c:	78b9      	ldrb	r1, [r7, #2]
 800971e:	78f8      	ldrb	r0, [r7, #3]
 8009720:	f107 030c 	add.w	r3, r7, #12
 8009724:	9303      	str	r3, [sp, #12]
 8009726:	f107 030e 	add.w	r3, r7, #14
 800972a:	9302      	str	r3, [sp, #8]
 800972c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009730:	9301      	str	r3, [sp, #4]
 8009732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	23ff      	movs	r3, #255	; 0xff
 8009738:	22c7      	movs	r2, #199	; 0xc7
 800973a:	f000 fa03 	bl	8009b44 <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800973e:	89fb      	ldrh	r3, [r7, #14]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d050      	beq.n	80097e6 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 8009744:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 8009746:	2b00      	cmp	r3, #0
 8009748:	d04d      	beq.n	80097e6 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 800974a:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800974e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8009752:	78b9      	ldrb	r1, [r7, #2]
 8009754:	78f8      	ldrb	r0, [r7, #3]
 8009756:	f107 0308 	add.w	r3, r7, #8
 800975a:	9303      	str	r3, [sp, #12]
 800975c:	f107 030a 	add.w	r3, r7, #10
 8009760:	9302      	str	r3, [sp, #8]
 8009762:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009766:	9301      	str	r3, [sp, #4]
 8009768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	4623      	mov	r3, r4
 800976e:	f000 f9e9 	bl	8009b44 <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 8009772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009774:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 8009776:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 8009778:	897b      	ldrh	r3, [r7, #10]
 800977a:	461a      	mov	r2, r3
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	fb02 f303 	mul.w	r3, r2, r3
 8009782:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 8009784:	89fb      	ldrh	r3, [r7, #14]
 8009786:	461a      	mov	r2, r3
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	fbb3 f3f2 	udiv	r3, r3, r2
 800978e:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 8009790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009792:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 8009794:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 8009796:	893b      	ldrh	r3, [r7, #8]
 8009798:	461a      	mov	r2, r3
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	fb02 f303 	mul.w	r3, r2, r3
 80097a0:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 80097a2:	89bb      	ldrh	r3, [r7, #12]
 80097a4:	461a      	mov	r2, r3
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80097ac:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 80097ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097b2:	69ba      	ldr	r2, [r7, #24]
 80097b4:	fb02 f303 	mul.w	r3, r2, r3
 80097b8:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 80097ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	fb02 f303 	mul.w	r3, r2, r3
 80097c4:	69fa      	ldr	r2, [r7, #28]
 80097c6:	4413      	add	r3, r2
 80097c8:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 80097ca:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 80097cc:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 80097ce:	4413      	add	r3, r2
 80097d0:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d008      	beq.n	80097ea <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	009a      	lsls	r2, r3, #2
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	fb92 f3f3 	sdiv	r3, r2, r3
 80097e2:	61fb      	str	r3, [r7, #28]
 80097e4:	e002      	b.n	80097ec <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 80097e6:	bf00      	nop
 80097e8:	e000      	b.n	80097ec <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 80097ea:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	b21a      	sxth	r2, r3
 80097f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097f2:	801a      	strh	r2, [r3, #0]

}
 80097f4:	bf00      	nop
 80097f6:	3724      	adds	r7, #36	; 0x24
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd90      	pop	{r4, r7, pc}

080097fc <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	60b9      	str	r1, [r7, #8]
 8009804:	607a      	str	r2, [r7, #4]
 8009806:	603b      	str	r3, [r7, #0]
 8009808:	4603      	mov	r3, r0
 800980a:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800980c:	7bfb      	ldrb	r3, [r7, #15]
 800980e:	08db      	lsrs	r3, r3, #3
 8009810:	b2da      	uxtb	r2, r3
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 8009816:	7bfb      	ldrb	r3, [r7, #15]
 8009818:	f003 0307 	and.w	r3, r3, #7
 800981c:	b2da      	uxtb	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	2301      	movs	r3, #1
 800982a:	4093      	lsls	r3, r2
 800982c:	b2da      	uxtb	r2, r3
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	701a      	strb	r2, [r3, #0]

}
 8009832:	bf00      	nop
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr

0800983e <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800983e:	b480      	push	{r7}
 8009840:	b083      	sub	sp, #12
 8009842:	af00      	add	r7, sp, #0
 8009844:	4603      	mov	r3, r0
 8009846:	603a      	str	r2, [r7, #0]
 8009848:	71fb      	strb	r3, [r7, #7]
 800984a:	460b      	mov	r3, r1
 800984c:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800984e:	79fb      	ldrb	r3, [r7, #7]
 8009850:	2b07      	cmp	r3, #7
 8009852:	d90a      	bls.n	800986a <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8009854:	79bb      	ldrb	r3, [r7, #6]
 8009856:	00db      	lsls	r3, r3, #3
 8009858:	b2da      	uxtb	r2, r3
 800985a:	79fb      	ldrb	r3, [r7, #7]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	b2db      	uxtb	r3, r3
 8009860:	3b71      	subs	r3, #113	; 0x71
 8009862:	b2da      	uxtb	r2, r3
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 8009868:	e00a      	b.n	8009880 <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800986a:	79bb      	ldrb	r3, [r7, #6]
 800986c:	f1c3 030f 	rsb	r3, r3, #15
 8009870:	b2db      	uxtb	r3, r3
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	b2da      	uxtb	r2, r3
 8009876:	79fb      	ldrb	r3, [r7, #7]
 8009878:	4413      	add	r3, r2
 800987a:	b2da      	uxtb	r2, r3
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	701a      	strb	r2, [r3, #0]
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	4603      	mov	r3, r0
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
 8009898:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800989a:	7bfb      	ldrb	r3, [r7, #15]
 800989c:	091b      	lsrs	r3, r3, #4
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
 80098a6:	f003 030f 	and.w	r3, r3, #15
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	701a      	strb	r2, [r3, #0]

}
 80098b0:	bf00      	nop
 80098b2:	3714      	adds	r7, #20
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	603a      	str	r2, [r7, #0]
 80098c6:	71fb      	strb	r3, [r7, #7]
 80098c8:	460b      	mov	r3, r1
 80098ca:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 80098cc:	79bb      	ldrb	r3, [r7, #6]
 80098ce:	011b      	lsls	r3, r3, #4
 80098d0:	b2da      	uxtb	r2, r3
 80098d2:	79fb      	ldrb	r3, [r7, #7]
 80098d4:	4413      	add	r3, r2
 80098d6:	b2da      	uxtb	r2, r3
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	701a      	strb	r2, [r3, #0]

}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60ba      	str	r2, [r7, #8]
 80098f0:	607b      	str	r3, [r7, #4]
 80098f2:	4603      	mov	r3, r0
 80098f4:	73fb      	strb	r3, [r7, #15]
 80098f6:	460b      	mov	r3, r1
 80098f8:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 80098fa:	2300      	movs	r3, #0
 80098fc:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 800990a:	f107 0217 	add.w	r2, r7, #23
 800990e:	f107 0116 	add.w	r1, r7, #22
 8009912:	7bfb      	ldrb	r3, [r7, #15]
 8009914:	4618      	mov	r0, r3
 8009916:	f002 f9ab 	bl	800bc70 <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 800991a:	f107 0214 	add.w	r2, r7, #20
 800991e:	f107 0115 	add.w	r1, r7, #21
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	4618      	mov	r0, r3
 8009926:	f7ff ffb1 	bl	800988c <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800992a:	7dfb      	ldrb	r3, [r7, #23]
 800992c:	b29a      	uxth	r2, r3
 800992e:	7d7b      	ldrb	r3, [r7, #21]
 8009930:	3301      	adds	r3, #1
 8009932:	0fd9      	lsrs	r1, r3, #31
 8009934:	440b      	add	r3, r1
 8009936:	105b      	asrs	r3, r3, #1
 8009938:	425b      	negs	r3, r3
 800993a:	b29b      	uxth	r3, r3
 800993c:	4413      	add	r3, r2
 800993e:	b29b      	uxth	r3, r3
 8009940:	b21a      	sxth	r2, r3
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800994c:	2b00      	cmp	r3, #0
 800994e:	da02      	bge.n	8009956 <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2200      	movs	r2, #0
 8009954:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800995c:	b29a      	uxth	r2, r3
 800995e:	7d7b      	ldrb	r3, [r7, #21]
 8009960:	b29b      	uxth	r3, r3
 8009962:	4413      	add	r3, r2
 8009964:	b29b      	uxth	r3, r3
 8009966:	b21a      	sxth	r2, r3
 8009968:	6a3b      	ldr	r3, [r7, #32]
 800996a:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009972:	2b0f      	cmp	r3, #15
 8009974:	dd02      	ble.n	800997c <VL53LX_decode_zone_limits+0x94>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 8009976:	6a3b      	ldr	r3, [r7, #32]
 8009978:	220f      	movs	r2, #15
 800997a:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800997c:	7dbb      	ldrb	r3, [r7, #22]
 800997e:	b29a      	uxth	r2, r3
 8009980:	7d3b      	ldrb	r3, [r7, #20]
 8009982:	3301      	adds	r3, #1
 8009984:	0fd9      	lsrs	r1, r3, #31
 8009986:	440b      	add	r3, r1
 8009988:	105b      	asrs	r3, r3, #1
 800998a:	425b      	negs	r3, r3
 800998c:	b29b      	uxth	r3, r3
 800998e:	4413      	add	r3, r2
 8009990:	b29b      	uxth	r3, r3
 8009992:	b21a      	sxth	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	da02      	bge.n	80099a8 <VL53LX_decode_zone_limits+0xc0>
		*py_ll = 0;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	7d3b      	ldrb	r3, [r7, #20]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	4413      	add	r3, r2
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	b21a      	sxth	r2, r3
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 80099be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099c4:	2b0f      	cmp	r3, #15
 80099c6:	dd02      	ble.n	80099ce <VL53LX_decode_zone_limits+0xe6>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	220f      	movs	r2, #15
 80099cc:	801a      	strh	r2, [r3, #0]
}
 80099ce:	bf00      	nop
 80099d0:	3718      	adds	r7, #24
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 80099d6:	b480      	push	{r7}
 80099d8:	b085      	sub	sp, #20
 80099da:	af00      	add	r7, sp, #0
 80099dc:	4603      	mov	r3, r0
 80099de:	460a      	mov	r2, r1
 80099e0:	71fb      	strb	r3, [r7, #7]
 80099e2:	4613      	mov	r3, r2
 80099e4:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 80099e6:	2300      	movs	r3, #0
 80099e8:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	f003 0303 	and.w	r3, r3, #3
 80099f0:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 80099f2:	79bb      	ldrb	r3, [r7, #6]
 80099f4:	f003 0303 	and.w	r3, r3, #3
 80099f8:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 80099fa:	7bbb      	ldrb	r3, [r7, #14]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d104      	bne.n	8009a0a <VL53LX_is_aperture_location+0x34>
 8009a00:	7b7b      	ldrb	r3, [r7, #13]
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d101      	bne.n	8009a0a <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 8009a06:	2301      	movs	r3, #1
 8009a08:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d104      	bne.n	8009a1a <VL53LX_is_aperture_location+0x44>
 8009a10:	7b7b      	ldrb	r3, [r7, #13]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 8009a16:	2301      	movs	r3, #1
 8009a18:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 8009a28:	b590      	push	{r4, r7, lr}
 8009a2a:	b08b      	sub	sp, #44	; 0x2c
 8009a2c:	af02      	add	r7, sp, #8
 8009a2e:	603a      	str	r2, [r7, #0]
 8009a30:	461a      	mov	r2, r3
 8009a32:	4603      	mov	r3, r0
 8009a34:	71fb      	strb	r3, [r7, #7]
 8009a36:	460b      	mov	r3, r1
 8009a38:	71bb      	strb	r3, [r7, #6]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 8009a42:	2300      	movs	r3, #0
 8009a44:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 8009a46:	2300      	movs	r3, #0
 8009a48:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 8009a56:	2300      	movs	r3, #0
 8009a58:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 8009a6a:	f107 0416 	add.w	r4, r7, #22
 8009a6e:	f107 0218 	add.w	r2, r7, #24
 8009a72:	79b9      	ldrb	r1, [r7, #6]
 8009a74:	79f8      	ldrb	r0, [r7, #7]
 8009a76:	f107 0312 	add.w	r3, r7, #18
 8009a7a:	9301      	str	r3, [sp, #4]
 8009a7c:	f107 0314 	add.w	r3, r7, #20
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	4623      	mov	r3, r4
 8009a84:	f7ff ff30 	bl	80098e8 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 8009a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009a8e:	8afb      	ldrh	r3, [r7, #22]
 8009a90:	83bb      	strh	r3, [r7, #28]
 8009a92:	e04c      	b.n	8009b2e <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009a94:	8b3b      	ldrh	r3, [r7, #24]
 8009a96:	83fb      	strh	r3, [r7, #30]
 8009a98:	e03d      	b.n	8009b16 <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 8009a9a:	8bbb      	ldrh	r3, [r7, #28]
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	8bfa      	ldrh	r2, [r7, #30]
 8009aa0:	b2d1      	uxtb	r1, r2
 8009aa2:	f107 0211 	add.w	r2, r7, #17
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7ff fec9 	bl	800983e <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009aac:	7c78      	ldrb	r0, [r7, #17]
 8009aae:	f107 030e 	add.w	r3, r7, #14
 8009ab2:	f107 020f 	add.w	r2, r7, #15
 8009ab6:	f107 0110 	add.w	r1, r7, #16
 8009aba:	f7ff fe9f 	bl	80097fc <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009abe:	7c3b      	ldrb	r3, [r7, #16]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	781a      	ldrb	r2, [r3, #0]
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	4013      	ands	r3, r2
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d01b      	beq.n	8009b0a <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 8009ad2:	8bbb      	ldrh	r3, [r7, #28]
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	8bfa      	ldrh	r2, [r7, #30]
 8009ad8:	b2d2      	uxtb	r2, r2
 8009ada:	4611      	mov	r1, r2
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7ff ff7a 	bl	80099d6 <VL53LX_is_aperture_location>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009ae6:	7efb      	ldrb	r3, [r7, #27]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d007      	beq.n	8009afc <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 8009aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aee:	881a      	ldrh	r2, [r3, #0]
 8009af0:	88bb      	ldrh	r3, [r7, #4]
 8009af2:	4413      	add	r3, r2
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af8:	801a      	strh	r2, [r3, #0]
 8009afa:	e006      	b.n	8009b0a <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 8009afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b08:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009b0a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	3301      	adds	r3, #1
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	83fb      	strh	r3, [r7, #30]
 8009b16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009b1a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	ddbb      	ble.n	8009a9a <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009b22:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	3301      	adds	r3, #1
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	83bb      	strh	r3, [r7, #28]
 8009b2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b32:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	ddac      	ble.n	8009a94 <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 8009b3a:	bf00      	nop
 8009b3c:	bf00      	nop
 8009b3e:	3724      	adds	r7, #36	; 0x24
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd90      	pop	{r4, r7, pc}

08009b44 <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 8009b44:	b590      	push	{r4, r7, lr}
 8009b46:	b08d      	sub	sp, #52	; 0x34
 8009b48:	af02      	add	r7, sp, #8
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	4608      	mov	r0, r1
 8009b4e:	4611      	mov	r1, r2
 8009b50:	461a      	mov	r2, r3
 8009b52:	4623      	mov	r3, r4
 8009b54:	71fb      	strb	r3, [r7, #7]
 8009b56:	4603      	mov	r3, r0
 8009b58:	71bb      	strb	r3, [r7, #6]
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	717b      	strb	r3, [r7, #5]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 8009b66:	2300      	movs	r3, #0
 8009b68:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 8009b76:	2300      	movs	r3, #0
 8009b78:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 8009b86:	2300      	movs	r3, #0
 8009b88:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 8009b96:	2300      	movs	r3, #0
 8009b98:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53LX_decode_zone_limits(
 8009ba4:	f107 041c 	add.w	r4, r7, #28
 8009ba8:	f107 021e 	add.w	r2, r7, #30
 8009bac:	79b9      	ldrb	r1, [r7, #6]
 8009bae:	79f8      	ldrb	r0, [r7, #7]
 8009bb0:	f107 0318 	add.w	r3, r7, #24
 8009bb4:	9301      	str	r3, [sp, #4]
 8009bb6:	f107 031a 	add.w	r3, r7, #26
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	4623      	mov	r3, r4
 8009bbe:	f7ff fe93 	bl	80098e8 <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 8009bc2:	f107 0414 	add.w	r4, r7, #20
 8009bc6:	f107 0216 	add.w	r2, r7, #22
 8009bca:	7939      	ldrb	r1, [r7, #4]
 8009bcc:	7978      	ldrb	r0, [r7, #5]
 8009bce:	f107 0310 	add.w	r3, r7, #16
 8009bd2:	9301      	str	r3, [sp, #4]
 8009bd4:	f107 0312 	add.w	r3, r7, #18
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	4623      	mov	r3, r4
 8009bdc:	f7ff fe84 	bl	80098e8 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 8009be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009be2:	2200      	movs	r2, #0
 8009be4:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 8009be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009be8:	2200      	movs	r2, #0
 8009bea:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009bec:	8abb      	ldrh	r3, [r7, #20]
 8009bee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009bf0:	e06c      	b.n	8009ccc <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009bf2:	8afb      	ldrh	r3, [r7, #22]
 8009bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009bf6:	e05d      	b.n	8009cb4 <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 8009bf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009bfe:	b2d1      	uxtb	r1, r2
 8009c00:	f107 020f 	add.w	r2, r7, #15
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7ff fe1a 	bl	800983e <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009c0a:	7bf8      	ldrb	r0, [r7, #15]
 8009c0c:	f107 030c 	add.w	r3, r7, #12
 8009c10:	f107 020d 	add.w	r2, r7, #13
 8009c14:	f107 010e 	add.w	r1, r7, #14
 8009c18:	f7ff fdf0 	bl	80097fc <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009c1c:	7bbb      	ldrb	r3, [r7, #14]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c22:	4413      	add	r3, r2
 8009c24:	781a      	ldrb	r2, [r3, #0]
 8009c26:	7b3b      	ldrb	r3, [r7, #12]
 8009c28:	4013      	ands	r3, r2
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d03b      	beq.n	8009ca8 <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 8009c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009c36:	b2d2      	uxtb	r2, r2
 8009c38:	4611      	mov	r1, r2
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7ff fecb 	bl	80099d6 <VL53LX_is_aperture_location>
 8009c40:	4603      	mov	r3, r0
 8009c42:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009c46:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d002      	beq.n	8009c54 <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 8009c4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009c50:	847b      	strh	r3, [r7, #34]	; 0x22
 8009c52:	e002      	b.n	8009c5a <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 8009c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c58:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009c5a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009c5e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009c62:	429a      	cmp	r2, r3
 8009c64:	db19      	blt.n	8009c9a <VL53LX_calc_mm_effective_spads+0x156>
 8009c66:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009c6a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	dc13      	bgt.n	8009c9a <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009c72:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009c76:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	db0d      	blt.n	8009c9a <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009c7e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009c82:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009c86:	429a      	cmp	r2, r3
 8009c88:	dc07      	bgt.n	8009c9a <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 8009c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c8c:	881a      	ldrh	r2, [r3, #0]
 8009c8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c90:	4413      	add	r3, r2
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c96:	801a      	strh	r2, [r3, #0]
 8009c98:	e006      	b.n	8009ca8 <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 8009c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c9c:	881a      	ldrh	r2, [r3, #0]
 8009c9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ca0:	4413      	add	r3, r2
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ca6:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009ca8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	3301      	adds	r3, #1
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009cb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009cb8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	dd9b      	ble.n	8009bf8 <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009cc0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009ccc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009cd0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	dd8c      	ble.n	8009bf2 <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 8009cd8:	bf00      	nop
 8009cda:	bf00      	nop
 8009cdc:	372c      	adds	r7, #44	; 0x2c
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd90      	pop	{r4, r7, pc}

08009ce2 <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b086      	sub	sp, #24
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	60f8      	str	r0, [r7, #12]
 8009cea:	60b9      	str	r1, [r7, #8]
 8009cec:	607a      	str	r2, [r7, #4]
 8009cee:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7fe f835 	bl	8007d64 <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	7c9a      	ldrb	r2, [r3, #18]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	3314      	adds	r3, #20
 8009d24:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 8009d26:	2300      	movs	r3, #0
 8009d28:	75fb      	strb	r3, [r7, #23]
 8009d2a:	e06b      	b.n	8009e04 <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 8009d2c:	7dfb      	ldrb	r3, [r7, #23]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d002      	beq.n	8009d38 <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d034      	beq.n	8009da0 <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 8009d36:	e05f      	b.n	8009df8 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8009d70:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	8a9a      	ldrh	r2, [r3, #20]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	601a      	str	r2, [r3, #0]

			break;
 8009d9e:	e02b      	b.n	8009df8 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8009dd0:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	611a      	str	r2, [r3, #16]
			break;
 8009df6:	bf00      	nop
		}

		pdata++;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	334c      	adds	r3, #76	; 0x4c
 8009dfc:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 8009dfe:	7dfb      	ldrb	r3, [r7, #23]
 8009e00:	3301      	adds	r3, #1
 8009e02:	75fb      	strb	r3, [r7, #23]
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	7c9b      	ldrb	r3, [r3, #18]
 8009e08:	7dfa      	ldrb	r2, [r7, #23]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d38e      	bcc.n	8009d2c <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 8009e0e:	bf00      	nop
 8009e10:	bf00      	nop
 8009e12:	3718      	adds	r7, #24
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b089      	sub	sp, #36	; 0x24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009e20:	2300      	movs	r3, #0
 8009e22:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	3318      	adds	r3, #24
 8009e28:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8009e30:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8009e38:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009e40:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 8009e42:	4613      	mov	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	005b      	lsls	r3, r3, #1
 8009e4a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009e4e:	697a      	ldr	r2, [r7, #20]
 8009e50:	4413      	add	r3, r2
 8009e52:	3302      	adds	r3, #2
 8009e54:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 8009e7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3724      	adds	r7, #36	; 0x24
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b08b      	sub	sp, #44	; 0x2c
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
 8009e92:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009e94:	2300      	movs	r3, #0
 8009e96:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	3318      	adds	r3, #24
 8009e9c:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8009ea4:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009eac:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009eb4:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8009ebc:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 8009ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ec2:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 8009ec4:	7bfa      	ldrb	r2, [r7, #15]
 8009ec6:	6939      	ldr	r1, [r7, #16]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	4413      	add	r3, r2
 8009ece:	005b      	lsls	r3, r3, #1
 8009ed0:	440b      	add	r3, r1
 8009ed2:	3306      	adds	r3, #6
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009ede:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ee6:	e01a      	b.n	8009f1e <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 8009ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eec:	683a      	ldr	r2, [r7, #0]
 8009eee:	214c      	movs	r1, #76	; 0x4c
 8009ef0:	fb01 f303 	mul.w	r3, r1, r3
 8009ef4:	4413      	add	r3, r2
 8009ef6:	334a      	adds	r3, #74	; 0x4a
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d209      	bcs.n	8009f14 <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 8009f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	214c      	movs	r1, #76	; 0x4c
 8009f08:	fb01 f303 	mul.w	r3, r1, r3
 8009f0c:	4413      	add	r3, r2
 8009f0e:	334a      	adds	r3, #74	; 0x4a
 8009f10:	881b      	ldrh	r3, [r3, #0]
 8009f12:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 8009f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f18:	3301      	adds	r3, #1
 8009f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	7c9b      	ldrb	r3, [r3, #18]
 8009f22:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d3de      	bcc.n	8009ee8 <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 8009f2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d103      	bne.n	8009f38 <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 8009f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f34:	623b      	str	r3, [r7, #32]
 8009f36:	e00e      	b.n	8009f56 <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 8009f38:	89bb      	ldrh	r3, [r7, #12]
 8009f3a:	039b      	lsls	r3, r3, #14
 8009f3c:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 8009f3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f40:	6a3a      	ldr	r2, [r7, #32]
 8009f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f46:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f4e:	d302      	bcc.n	8009f56 <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 8009f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f54:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 8009f56:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 8009f58:	6a3b      	ldr	r3, [r7, #32]
 8009f5a:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 8009f5c:	6939      	ldr	r1, [r7, #16]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4413      	add	r3, r2
 8009f64:	005b      	lsls	r3, r3, #1
 8009f66:	440b      	add	r3, r1
 8009f68:	3306      	adds	r3, #6
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 8009f6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	372c      	adds	r7, #44	; 0x2c
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b08a      	sub	sp, #40	; 0x28
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009f86:	2300      	movs	r3, #0
 8009f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	3318      	adds	r3, #24
 8009f90:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8009f92:	6a3b      	ldr	r3, [r7, #32]
 8009f94:	332c      	adds	r3, #44	; 0x2c
 8009f96:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 8009f98:	6a3b      	ldr	r3, [r7, #32]
 8009f9a:	33c2      	adds	r3, #194	; 0xc2
 8009f9c:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8009fa4:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	3302      	adds	r3, #2
 8009faa:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	785b      	ldrb	r3, [r3, #1]
 8009fb0:	f003 0301 	and.w	r3, r3, #1
 8009fb4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 8009fb6:	6a3b      	ldr	r3, [r7, #32]
 8009fb8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d11e      	bne.n	800a008 <VL53LX_multizone_hist_bins_update+0x8a>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 8009fca:	7bfb      	ldrb	r3, [r7, #15]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10b      	bne.n	8009fe8 <VL53LX_multizone_hist_bins_update+0x6a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d05d      	beq.n	800a0aa <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	719a      	strb	r2, [r3, #6]
 800a006:	e050      	b.n	800a0aa <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a00e:	461a      	mov	r2, r3
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	4413      	add	r3, r2
 800a014:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d11e      	bne.n	800a05a <VL53LX_multizone_hist_bins_update+0xdc>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10b      	bne.n	800a03a <VL53LX_multizone_hist_bins_update+0xbc>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d034      	beq.n	800a0aa <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	719a      	strb	r2, [r3, #6]
 800a058:	e027      	b.n	800a0aa <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a05a:	6a3b      	ldr	r3, [r7, #32]
 800a05c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a060:	461a      	mov	r2, r3
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	4413      	add	r3, r2
 800a066:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a06a:	2b03      	cmp	r3, #3
 800a06c:	d11d      	bne.n	800a0aa <VL53LX_multizone_hist_bins_update+0x12c>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800a06e:	7bfb      	ldrb	r3, [r7, #15]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10b      	bne.n	800a08c <VL53LX_multizone_hist_bins_update+0x10e>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00b      	beq.n	800a0aa <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800a0aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d109      	bne.n	800a0c6 <VL53LX_multizone_hist_bins_update+0x148>
		VL53LX_copy_hist_bins_to_static_cfg(
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	f203 21fe 	addw	r1, r3, #766	; 0x2fe
 800a0b8:	6a3b      	ldr	r3, [r7, #32]
 800a0ba:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800a0be:	461a      	mov	r2, r3
 800a0c0:	6978      	ldr	r0, [r7, #20]
 800a0c2:	f7fd fa1f 	bl	8007504 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800a0c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3728      	adds	r7, #40	; 0x28
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800a0d2:	b480      	push	{r7}
 800a0d4:	b089      	sub	sp, #36	; 0x24
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	607a      	str	r2, [r7, #4]
 800a0dc:	603b      	str	r3, [r7, #0]
 800a0de:	460b      	mov	r3, r1
 800a0e0:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3318      	adds	r3, #24
 800a0ea:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a0f2:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800a0f4:	7dfb      	ldrb	r3, [r7, #23]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d103      	bne.n	800a102 <VL53LX_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	7afa      	ldrb	r2, [r7, #11]
 800a0fe:	701a      	strb	r2, [r3, #0]
 800a100:	e01e      	b.n	800a140 <VL53LX_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	7dfb      	ldrb	r3, [r7, #23]
 800a10a:	3b01      	subs	r3, #1
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d111      	bne.n	800a134 <VL53LX_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	2bff      	cmp	r3, #255	; 0xff
 800a116:	d103      	bne.n	800a120 <VL53LX_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2280      	movs	r2, #128	; 0x80
 800a11c:	701a      	strb	r2, [r3, #0]
 800a11e:	e005      	b.n	800a12c <VL53LX_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	3301      	adds	r3, #1
 800a126:	b2da      	uxtb	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	2200      	movs	r2, #0
 800a130:	701a      	strb	r2, [r3, #0]
 800a132:	e005      	b.n	800a140 <VL53LX_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	3301      	adds	r3, #1
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800a140:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3724      	adds	r7, #36	; 0x24
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <VL53LX_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b08a      	sub	sp, #40	; 0x28
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	607a      	str	r2, [r7, #4]
 800a15a:	461a      	mov	r2, r3
 800a15c:	460b      	mov	r3, r1
 800a15e:	72fb      	strb	r3, [r7, #11]
 800a160:	4613      	mov	r3, r2
 800a162:	813b      	strh	r3, [r7, #8]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a164:	2300      	movs	r3, #0
 800a166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3318      	adds	r3, #24
 800a16e:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800a170:	2300      	movs	r3, #0
 800a172:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800a174:	2300      	movs	r3, #0
 800a176:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53LX_calc_macro_period_us(
 800a178:	7afa      	ldrb	r2, [r7, #11]
 800a17a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a17c:	4611      	mov	r1, r2
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fe f9fc 	bl	800857c <VL53LX_calc_macro_period_us>
 800a184:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800a186:	6a3b      	ldr	r3, [r7, #32]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d101      	bne.n	800a190 <VL53LX_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800a18c:	2301      	movs	r3, #1
 800a18e:	623b      	str	r3, [r7, #32]


	timeout_mclks = phasecal_timeout_us << 12;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	031b      	lsls	r3, r3, #12
 800a194:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	085b      	lsrs	r3, r3, #1
 800a19a:	69ba      	ldr	r2, [r7, #24]
 800a19c:	4413      	add	r3, r2
 800a19e:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800a1a0:	69ba      	ldr	r2, [r7, #24]
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
 800a1a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1a8:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	2bff      	cmp	r3, #255	; 0xff
 800a1ae:	d904      	bls.n	800a1ba <VL53LX_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	22ff      	movs	r2, #255	; 0xff
 800a1b4:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
 800a1b8:	e004      	b.n	800a1c4 <VL53LX_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	7afa      	ldrb	r2, [r7, #11]
 800a1c8:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a



	if (status == VL53LX_ERROR_NONE)
 800a1cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10a      	bne.n	800a1ea <VL53LX_set_ref_spad_char_config+0x9a>
		status =
			VL53LX_WrByte(
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
 800a1da:	461a      	mov	r2, r3
 800a1dc:	214b      	movs	r1, #75	; 0x4b
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f006 fd8e 	bl	8010d00 <VL53LX_WrByte>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53LX_ERROR_NONE)
 800a1ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d10a      	bne.n	800a208 <VL53LX_set_ref_spad_char_config+0xb8>
		status =
			VL53LX_WrByte(
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	2160      	movs	r1, #96	; 0x60
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f006 fd7f 	bl	8010d00 <VL53LX_WrByte>
 800a202:	4603      	mov	r3, r0
 800a204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a20e:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a216:	757b      	strb	r3, [r7, #21]

	if (status == VL53LX_ERROR_NONE)
 800a218:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d109      	bne.n	800a234 <VL53LX_set_ref_spad_char_config+0xe4>
		status =
			VL53LX_WriteMulti(
 800a220:	f107 0214 	add.w	r2, r7, #20
 800a224:	2302      	movs	r3, #2
 800a226:	2178      	movs	r1, #120	; 0x78
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f006 fcfd 	bl	8010c28 <VL53LX_WriteMulti>
 800a22e:	4603      	mov	r3, r0
 800a230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	893a      	ldrh	r2, [r7, #8]
 800a238:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53LX_ERROR_NONE)
 800a23c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a240:	2b00      	cmp	r3, #0
 800a242:	d108      	bne.n	800a256 <VL53LX_set_ref_spad_char_config+0x106>
		status =
			VL53LX_WrWord(
 800a244:	893b      	ldrh	r3, [r7, #8]
 800a246:	461a      	mov	r2, r3
 800a248:	211c      	movs	r1, #28
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f006 fd82 	bl	8010d54 <VL53LX_WrWord>
 800a250:	4603      	mov	r3, r0
 800a252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a256:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d108      	bne.n	800a270 <VL53LX_set_ref_spad_char_config+0x120>
		status =
			VL53LX_WrWord(
 800a25e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a260:	461a      	mov	r2, r3
 800a262:	2164      	movs	r1, #100	; 0x64
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f006 fd75 	bl	8010d54 <VL53LX_WrWord>
 800a26a:	4603      	mov	r3, r0
 800a26c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a270:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a274:	2b00      	cmp	r3, #0
 800a276:	d108      	bne.n	800a28a <VL53LX_set_ref_spad_char_config+0x13a>
		status =
			VL53LX_WrWord(
 800a278:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a27a:	461a      	mov	r2, r3
 800a27c:	2166      	movs	r1, #102	; 0x66
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f006 fd68 	bl	8010d54 <VL53LX_WrWord>
 800a284:	4603      	mov	r3, r0
 800a286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800a28a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3728      	adds	r7, #40	; 0x28
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800a296:	b5b0      	push	{r4, r5, r7, lr}
 800a298:	b090      	sub	sp, #64	; 0x40
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3318      	adds	r3, #24
 800a2a8:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a2b0:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_smudge_corrector_config_t *pconfig =
 800a2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a2b8:	3314      	adds	r3, #20
 800a2ba:	623b      	str	r3, [r7, #32]
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800a2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2be:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a2c2:	3318      	adds	r3, #24
 800a2c4:	61fb      	str	r3, [r7, #28]
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c8:	61bb      	str	r3, [r7, #24]
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a2d0:	617b      	str	r3, [r7, #20]

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53LX_p_016;
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800a2e0:	4413      	add	r3, r2
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	f04f 0300 	mov.w	r3, #0
 800a2e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (peak_duration_us == 0)
 800a2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d102      	bne.n	800a2f8 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x62>
		peak_duration_us = 1000;
 800a2f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a2f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	460b      	mov	r3, r1
 800a300:	f04f 0400 	mov.w	r4, #0
 800a304:	f04f 0500 	mov.w	r5, #0
 800a308:	015d      	lsls	r5, r3, #5
 800a30a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a30e:	0154      	lsls	r4, r2, #5
 800a310:	4622      	mov	r2, r4
 800a312:	462b      	mov	r3, r5
 800a314:	1a12      	subs	r2, r2, r0
 800a316:	eb63 0301 	sbc.w	r3, r3, r1
 800a31a:	f04f 0400 	mov.w	r4, #0
 800a31e:	f04f 0500 	mov.w	r5, #0
 800a322:	009d      	lsls	r5, r3, #2
 800a324:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a328:	0094      	lsls	r4, r2, #2
 800a32a:	4622      	mov	r2, r4
 800a32c:	462b      	mov	r3, r5
 800a32e:	1812      	adds	r2, r2, r0
 800a330:	eb41 0303 	adc.w	r3, r1, r3
 800a334:	f04f 0000 	mov.w	r0, #0
 800a338:	f04f 0100 	mov.w	r1, #0
 800a33c:	00d9      	lsls	r1, r3, #3
 800a33e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a342:	00d0      	lsls	r0, r2, #3
 800a344:	4602      	mov	r2, r0
 800a346:	460b      	mov	r3, r1
 800a348:	4610      	mov	r0, r2
 800a34a:	4619      	mov	r1, r3
 800a34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a34e:	461a      	mov	r2, r3
 800a350:	f04f 0300 	mov.w	r3, #0
 800a354:	f7f5 ffe4 	bl	8000320 <__aeabi_uldivmod>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a360:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	f04f 0400 	mov.w	r4, #0
 800a36c:	f04f 0500 	mov.w	r5, #0
 800a370:	015d      	lsls	r5, r3, #5
 800a372:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a376:	0154      	lsls	r4, r2, #5
 800a378:	4622      	mov	r2, r4
 800a37a:	462b      	mov	r3, r5
 800a37c:	1a12      	subs	r2, r2, r0
 800a37e:	eb63 0301 	sbc.w	r3, r3, r1
 800a382:	f04f 0400 	mov.w	r4, #0
 800a386:	f04f 0500 	mov.w	r5, #0
 800a38a:	009d      	lsls	r5, r3, #2
 800a38c:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a390:	0094      	lsls	r4, r2, #2
 800a392:	4622      	mov	r2, r4
 800a394:	462b      	mov	r3, r5
 800a396:	1812      	adds	r2, r2, r0
 800a398:	eb41 0303 	adc.w	r3, r1, r3
 800a39c:	f04f 0000 	mov.w	r0, #0
 800a3a0:	f04f 0100 	mov.w	r1, #0
 800a3a4:	00d9      	lsls	r1, r3, #3
 800a3a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a3aa:	00d0      	lsls	r0, r2, #3
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	4610      	mov	r0, r2
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f04f 0300 	mov.w	r3, #0
 800a3bc:	f7f5 ffb0 	bl	8000320 <__aeabi_uldivmod>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800a3c8:	6a3b      	ldr	r3, [r7, #32]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	697a      	ldr	r2, [r7, #20]
 800a3ce:	8ad2      	ldrh	r2, [r2, #22]
 800a3d0:	fb02 f303 	mul.w	r3, r2, r3
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	f04f 0300 	mov.w	r3, #0
 800a3da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (temp64z == 0)
 800a3de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	d105      	bne.n	800a3f2 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x15c>
		temp64z = 1;
 800a3e6:	f04f 0201 	mov.w	r2, #1
 800a3ea:	f04f 0300 	mov.w	r3, #0
 800a3ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	temp64a = temp64a * 1000 * 256;
 800a3f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	f04f 0400 	mov.w	r4, #0
 800a3fe:	f04f 0500 	mov.w	r5, #0
 800a402:	015d      	lsls	r5, r3, #5
 800a404:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a408:	0154      	lsls	r4, r2, #5
 800a40a:	4622      	mov	r2, r4
 800a40c:	462b      	mov	r3, r5
 800a40e:	1a12      	subs	r2, r2, r0
 800a410:	eb63 0301 	sbc.w	r3, r3, r1
 800a414:	f04f 0400 	mov.w	r4, #0
 800a418:	f04f 0500 	mov.w	r5, #0
 800a41c:	009d      	lsls	r5, r3, #2
 800a41e:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a422:	0094      	lsls	r4, r2, #2
 800a424:	4622      	mov	r2, r4
 800a426:	462b      	mov	r3, r5
 800a428:	1812      	adds	r2, r2, r0
 800a42a:	eb41 0303 	adc.w	r3, r1, r3
 800a42e:	f04f 0000 	mov.w	r0, #0
 800a432:	f04f 0100 	mov.w	r1, #0
 800a436:	02d9      	lsls	r1, r3, #11
 800a438:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800a43c:	02d0      	lsls	r0, r2, #11
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800a446:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a44a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a44e:	f7f5 ff67 	bl	8000320 <__aeabi_uldivmod>
 800a452:	4602      	mov	r2, r0
 800a454:	460b      	mov	r3, r1
 800a456:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = temp64a * 1000 * 256;
 800a45a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a45e:	4602      	mov	r2, r0
 800a460:	460b      	mov	r3, r1
 800a462:	f04f 0400 	mov.w	r4, #0
 800a466:	f04f 0500 	mov.w	r5, #0
 800a46a:	015d      	lsls	r5, r3, #5
 800a46c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a470:	0154      	lsls	r4, r2, #5
 800a472:	4622      	mov	r2, r4
 800a474:	462b      	mov	r3, r5
 800a476:	1a12      	subs	r2, r2, r0
 800a478:	eb63 0301 	sbc.w	r3, r3, r1
 800a47c:	f04f 0400 	mov.w	r4, #0
 800a480:	f04f 0500 	mov.w	r5, #0
 800a484:	009d      	lsls	r5, r3, #2
 800a486:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a48a:	0094      	lsls	r4, r2, #2
 800a48c:	4622      	mov	r2, r4
 800a48e:	462b      	mov	r3, r5
 800a490:	1812      	adds	r2, r2, r0
 800a492:	eb41 0303 	adc.w	r3, r1, r3
 800a496:	f04f 0000 	mov.w	r0, #0
 800a49a:	f04f 0100 	mov.w	r1, #0
 800a49e:	02d9      	lsls	r1, r3, #11
 800a4a0:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800a4a4:	02d0      	lsls	r0, r2, #11
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800a4ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a4b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a4b6:	f7f5 ff33 	bl	8000320 <__aeabi_uldivmod>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	460b      	mov	r3, r1
 800a4be:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pint->required_samples = (uint32_t)temp64a;
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d802      	bhi.n	800a4d6 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x240>
		pint->required_samples = 2;
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800a4d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3740      	adds	r7, #64	; 0x40
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a4e4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b096      	sub	sp, #88	; 0x58
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	607a      	str	r2, [r7, #4]
 800a4f0:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	3318      	adds	r3, #24
 800a4fc:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800a4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a500:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a504:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800a506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a508:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800a50c:	331c      	adds	r3, #28
 800a50e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800a510:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800a514:	2b01      	cmp	r3, #1
 800a516:	d107      	bne.n	800a528 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	889b      	ldrh	r3, [r3, #4]
 800a51c:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	609a      	str	r2, [r3, #8]
 800a526:	e002      	b.n	800a52e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800a52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800a534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a536:	899b      	ldrh	r3, [r3, #12]
 800a538:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53e:	89db      	ldrh	r3, [r3, #14]
 800a540:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d004      	beq.n	800a558 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x74>
		(pconfig->scaler_calc_method == 1)) &&
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800a554:	2b01      	cmp	r3, #1
 800a556:	d126      	bne.n	800a5a6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800a558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55a:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d022      	beq.n	800a5a6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a560:	f107 0317 	add.w	r3, r7, #23
 800a564:	4619      	mov	r1, r3
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f000 fe75 	bl	800b256 <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800a56c:	7dfb      	ldrb	r3, [r7, #23]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d101      	bne.n	800a576 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
			histo_merge_nb = 1;
 800a572:	2301      	movs	r3, #1
 800a574:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800a576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a578:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d003      	beq.n	800a588 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa4>
			orig_xtalk_offset =
 800a580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	653b      	str	r3, [r7, #80]	; 0x50
 800a586:	e006      	b.n	800a596 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800a588:	7dfb      	ldrb	r3, [r7, #23]
 800a58a:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800a58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58e:	3202      	adds	r2, #2
 800a590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a594:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800a596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a598:	889b      	ldrh	r3, [r3, #4]
 800a59a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800a59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a0:	88db      	ldrh	r3, [r3, #6]
 800a5a2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10a      	bne.n	800a5c6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
 800a5b0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d106      	bne.n	800a5c6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
		pout->gradient_zero_flag |= 0x01;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	795b      	ldrb	r3, [r3, #5]
 800a5bc:	f043 0301 	orr.w	r3, r3, #1
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10a      	bne.n	800a5e6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
 800a5d0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d106      	bne.n	800a5e6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		pout->gradient_zero_flag |= 0x02;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	795b      	ldrb	r3, [r3, #5]
 800a5dc:	f043 0302 	orr.w	r3, r3, #2
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800a5e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
		orig_xtalk_offset = 1;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d108      	bne.n	800a60c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x128>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a606:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800a60a:	e019      	b.n	800a640 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x15c>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800a60c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a610:	019b      	lsls	r3, r3, #6
 800a612:	461a      	mov	r2, r3
 800a614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a616:	fbb2 f3f3 	udiv	r3, r2, r3
 800a61a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800a624:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800a626:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800a62a:	019b      	lsls	r3, r3, #6
 800a62c:	461a      	mov	r2, r3
 800a62e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a630:	fbb2 f3f3 	udiv	r3, r2, r3
 800a634:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a63e:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a646:	2b00      	cmp	r3, #0
 800a648:	d12a      	bne.n	800a6a0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1bc>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800a652:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a656:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a65a:	119b      	asrs	r3, r3, #6
 800a65c:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a65e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a664:	db02      	blt.n	800a66c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x188>
			itemp32 = 0xFFFF;
 800a666:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a66a:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a66c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a66e:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800a67c:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a680:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a684:	119b      	asrs	r3, r3, #6
 800a686:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a68a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a68e:	db02      	blt.n	800a696 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b2>
			itemp32 = 0xFFFF;
 800a690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a694:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a698:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	81da      	strh	r2, [r3, #14]
 800a69e:	e042      	b.n	800a726 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>
	} else if (pconfig->scaler_calc_method == 1) {
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d13d      	bne.n	800a726 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a6ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6b0:	1ad3      	subs	r3, r2, r3
 800a6b2:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800a6b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	da00      	bge.n	800a6bc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d8>
 800a6ba:	330f      	adds	r3, #15
 800a6bc:	111b      	asrs	r3, r3, #4
 800a6be:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800a6c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800a6c6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a6ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6cc:	4413      	add	r3, r2
 800a6ce:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a6d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6d6:	db02      	blt.n	800a6de <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1fa>
			itemp32 = 0xFFFF;
 800a6d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a6dc:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a6de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6e0:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a6ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6ec:	1ad3      	subs	r3, r2, r3
 800a6ee:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800a6f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6f2:	4a52      	ldr	r2, [pc, #328]	; (800a83c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x358>)
 800a6f4:	fb82 1203 	smull	r1, r2, r2, r3
 800a6f8:	1152      	asrs	r2, r2, #5
 800a6fa:	17db      	asrs	r3, r3, #31
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800a700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800a706:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800a70a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a70c:	4413      	add	r3, r2
 800a70e:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a716:	db02      	blt.n	800a71e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23a>
			itemp32 = 0xFFFF;
 800a718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a71c:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a71e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a720:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	785b      	ldrb	r3, [r3, #1]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d178      	bne.n	800a820 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
 800a72e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800a732:	2b01      	cmp	r3, #1
 800a734:	d074      	beq.n	800a820 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	2201      	movs	r2, #1
 800a73a:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	62bb      	str	r3, [r7, #40]	; 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a742:	f107 0317 	add.w	r3, r7, #23
 800a746:	4619      	mov	r1, r3
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f000 fd84 	bl	800b256 <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800a74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a750:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800a754:	627b      	str	r3, [r7, #36]	; 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800a756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a758:	3308      	adds	r3, #8
 800a75a:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) &&
 800a75c:	7dfb      	ldrb	r3, [r7, #23]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d042      	beq.n	800a7e8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800a762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a764:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		if ((histo_merge_nb > 0) &&
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d13d      	bne.n	800a7e8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800a76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d03a      	beq.n	800a7e8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(nXtalk != 0)) {
			cXtalk =
 800a772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800a778:	6a3b      	ldr	r3, [r7, #32]
 800a77a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a77e:	fb02 f203 	mul.w	r2, r2, r3
 800a782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a784:	fbb2 f3f3 	udiv	r3, r2, r3
 800a788:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d004      	beq.n	800a79a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b6>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800a794:	69fa      	ldr	r2, [r7, #28]
 800a796:	429a      	cmp	r2, r3
 800a798:	d303      	bcc.n	800a7a2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2be>
				pout->new_xtalk_applied_flag = 0;
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	2200      	movs	r2, #0
 800a79e:	719a      	strb	r2, [r3, #6]
 800a7a0:	e022      	b.n	800a7e8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			else {
				incXtalk = nXtalk / max;
 800a7a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7aa:	61bb      	str	r3, [r7, #24]
				cval = 0;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800a7b6:	e00e      	b.n	800a7d6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2f2>
					cval += incXtalk;
 800a7b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	4413      	add	r3, r2
 800a7be:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800a7c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7c4:	601a      	str	r2, [r3, #0]
					pcpo++;
 800a7c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800a7cc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800a7d6:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800a7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d3ea      	bcc.n	800a7b8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d4>
				}
				*pcpo = nXtalk;
 800a7e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7e6:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	799b      	ldrb	r3, [r3, #6]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d017      	beq.n	800a820 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f6:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80a:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	789b      	ldrb	r3, [r3, #2]
 800a810:	2b01      	cmp	r3, #1
 800a812:	d105      	bne.n	800a820 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

			pconfig->smudge_corr_apply_enabled = 0;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800a820:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800a824:	2b01      	cmp	r3, #1
 800a826:	d002      	beq.n	800a82e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x34a>
		pout->smudge_corr_valid = 1;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	2201      	movs	r2, #1
 800a82c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a82e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800a832:	4618      	mov	r0, r3
 800a834:	3758      	adds	r7, #88	; 0x58
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	66666667 	.word	0x66666667

0800a840 <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800a840:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a844:	b09a      	sub	sp, #104	; 0x68
 800a846:	af02      	add	r7, sp, #8
 800a848:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a84a:	2300      	movs	r3, #0
 800a84c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	3318      	adds	r3, #24
 800a854:	64bb      	str	r3, [r7, #72]	; 0x48
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a85c:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_smudge_corrector_config_t *pconfig =
 800a85e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a860:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a864:	3314      	adds	r3, #20
 800a866:	643b      	str	r3, [r7, #64]	; 0x40
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800a868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a86a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a86e:	3318      	adds	r3, #24
 800a870:	63fb      	str	r3, [r7, #60]	; 0x3c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800a872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a874:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a878:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800a87a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a87c:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800a87e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a880:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a884:	633b      	str	r3, [r7, #48]	; 0x30

	uint8_t	run_smudge_detection = 0;
 800a886:	2300      	movs	r3, #0
 800a888:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t merging_complete = 0;
 800a88c:	2300      	movs	r3, #0
 800a88e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t	run_nodetect = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t ambient_check = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	int32_t itemp32 = 0;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	65bb      	str	r3, [r7, #88]	; 0x58
	uint64_t utemp64 = 0;
 800a8a2:	f04f 0200 	mov.w	r2, #0
 800a8a6:	f04f 0300 	mov.w	r3, #0
 800a8aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t continue_processing = CONT_CONTINUE;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t xtalk_offset_out = 0;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t xtalk_offset_in = 0;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	61fb      	str	r3, [r7, #28]
	uint32_t current_xtalk = 0;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	61bb      	str	r3, [r7, #24]
	uint32_t smudge_margin_adjusted = 0;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	617b      	str	r3, [r7, #20]
	uint8_t i = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t nodetect_index = 0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a8d0:	f107 030b 	add.w	r3, r7, #11
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fcbd 	bl	800b256 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800a8dc:	7afb      	ldrb	r3, [r7, #11]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d004      	beq.n	800a8ec <VL53LX_dynamic_xtalk_correction_corrector+0xac>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800a8e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8e4:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	if ((histo_merge_nb == 0) ||
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d001      	beq.n	800a8f0 <VL53LX_dynamic_xtalk_correction_corrector+0xb0>
		histo_merge_nb = 1;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	72fb      	strb	r3, [r7, #11]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800a8f0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a8f2:	f000 faeb 	bl	800aecc <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800a8f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d009      	beq.n	800a912 <VL53LX_dynamic_xtalk_correction_corrector+0xd2>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800a8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a902:	7afa      	ldrb	r2, [r7, #11]
 800a904:	fb02 f303 	mul.w	r3, r2, r3
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800a908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a90a:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800a90e:	4293      	cmp	r3, r2
 800a910:	d901      	bls.n	800a916 <VL53LX_dynamic_xtalk_correction_corrector+0xd6>
 800a912:	2301      	movs	r3, #1
 800a914:	e000      	b.n	800a918 <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
 800a916:	2300      	movs	r3, #0
 800a918:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800a91c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a91e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800a922:	2b01      	cmp	r3, #1
 800a924:	d105      	bne.n	800a932 <VL53LX_dynamic_xtalk_correction_corrector+0xf2>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800a926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a928:	f893 2184 	ldrb.w	r2, [r3, #388]	; 0x184
 800a92c:	7afb      	ldrb	r3, [r7, #11]
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800a92e:	429a      	cmp	r2, r3
 800a930:	d101      	bne.n	800a936 <VL53LX_dynamic_xtalk_correction_corrector+0xf6>
 800a932:	2301      	movs	r3, #1
 800a934:	e000      	b.n	800a938 <VL53LX_dynamic_xtalk_correction_corrector+0xf8>
 800a936:	2300      	movs	r3, #0
	merging_complete =
 800a938:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800a93c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a93e:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800a940:	2b01      	cmp	r3, #1
 800a942:	d10e      	bne.n	800a962 <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pconfig->smudge_corr_enabled == 1) &&
 800a944:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00a      	beq.n	800a962 <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pR->xmonitor.range_status
 800a94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a94e:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800a952:	2b09      	cmp	r3, #9
 800a954:	d105      	bne.n	800a962 <VL53LX_dynamic_xtalk_correction_corrector+0x122>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800a956:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d001      	beq.n	800a962 <VL53LX_dynamic_xtalk_correction_corrector+0x122>
 800a95e:	2301      	movs	r3, #1
 800a960:	e000      	b.n	800a964 <VL53LX_dynamic_xtalk_correction_corrector+0x124>
 800a962:	2300      	movs	r3, #0
	run_smudge_detection =
 800a964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		merging_complete;


	if ((pR->xmonitor.range_status
 800a968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96a:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800a96e:	2b09      	cmp	r3, #9
 800a970:	f000 809e 	beq.w	800aab0 <VL53LX_dynamic_xtalk_correction_corrector+0x270>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800a974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a976:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800a978:	2b01      	cmp	r3, #1
 800a97a:	f040 8099 	bne.w	800aab0 <VL53LX_dynamic_xtalk_correction_corrector+0x270>

		run_nodetect = 2;
 800a97e:	2302      	movs	r3, #2
 800a980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		for (i = 0; i < pR->active_results; i++) {
 800a984:	2300      	movs	r3, #0
 800a986:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a98a:	e02d      	b.n	800a9e8 <VL53LX_dynamic_xtalk_correction_corrector+0x1a8>
			if (pR->VL53LX_p_003[i].range_status ==
 800a98c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a990:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a992:	214c      	movs	r1, #76	; 0x4c
 800a994:	fb01 f303 	mul.w	r3, r1, r3
 800a998:	4413      	add	r3, r2
 800a99a:	335e      	adds	r3, #94	; 0x5e
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	2b09      	cmp	r3, #9
 800a9a0:	d11d      	bne.n	800a9de <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800a9a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a9a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9a8:	214c      	movs	r1, #76	; 0x4c
 800a9aa:	fb01 f303 	mul.w	r3, r1, r3
 800a9ae:	4413      	add	r3, r2
 800a9b0:	335a      	adds	r3, #90	; 0x5a
 800a9b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9b6:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800a9b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9ba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	dc03      	bgt.n	800a9c8 <VL53LX_dynamic_xtalk_correction_corrector+0x188>
					run_nodetect = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a9c6:	e00a      	b.n	800a9de <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				} else {
					if (run_nodetect == 2) {
 800a9c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d106      	bne.n	800a9de <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
						run_nodetect = 1;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						nodetect_index = i;
 800a9d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a9da:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		for (i = 0; i < pR->active_results; i++) {
 800a9de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ea:	7c9b      	ldrb	r3, [r3, #18]
 800a9ec:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d3cb      	bcc.n	800a98c <VL53LX_dynamic_xtalk_correction_corrector+0x14c>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800a9f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d102      	bne.n	800aa02 <VL53LX_dynamic_xtalk_correction_corrector+0x1c2>

			run_nodetect = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800aa02:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
		amr =
 800aa06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa08:	214c      	movs	r1, #76	; 0x4c
 800aa0a:	fb01 f303 	mul.w	r3, r1, r3
 800aa0e:	4413      	add	r3, r2
 800aa10:	3348      	adds	r3, #72	; 0x48
 800aa12:	881b      	ldrh	r3, [r3, #0]
 800aa14:	827b      	strh	r3, [r7, #18]

		if (run_nodetect == 1) {
 800aa16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d148      	bne.n	800aab0 <VL53LX_dynamic_xtalk_correction_corrector+0x270>




			utemp64 = 1000 * ((uint64_t)amr);
 800aa1e:	8a78      	ldrh	r0, [r7, #18]
 800aa20:	f04f 0100 	mov.w	r1, #0
 800aa24:	4602      	mov	r2, r0
 800aa26:	460b      	mov	r3, r1
 800aa28:	f04f 0400 	mov.w	r4, #0
 800aa2c:	f04f 0500 	mov.w	r5, #0
 800aa30:	015d      	lsls	r5, r3, #5
 800aa32:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800aa36:	0154      	lsls	r4, r2, #5
 800aa38:	4622      	mov	r2, r4
 800aa3a:	462b      	mov	r3, r5
 800aa3c:	1a12      	subs	r2, r2, r0
 800aa3e:	eb63 0301 	sbc.w	r3, r3, r1
 800aa42:	f04f 0400 	mov.w	r4, #0
 800aa46:	f04f 0500 	mov.w	r5, #0
 800aa4a:	009d      	lsls	r5, r3, #2
 800aa4c:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800aa50:	0094      	lsls	r4, r2, #2
 800aa52:	4622      	mov	r2, r4
 800aa54:	462b      	mov	r3, r5
 800aa56:	1812      	adds	r2, r2, r0
 800aa58:	eb41 0303 	adc.w	r3, r1, r3
 800aa5c:	f04f 0000 	mov.w	r0, #0
 800aa60:	f04f 0100 	mov.w	r1, #0
 800aa64:	00d9      	lsls	r1, r3, #3
 800aa66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aa6a:	00d0      	lsls	r0, r2, #3
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	460b      	mov	r3, r1
 800aa70:	e9c7 2308 	strd	r2, r3, [r7, #32]


			utemp64 = utemp64 << 9;
 800aa74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800aa78:	f04f 0200 	mov.w	r2, #0
 800aa7c:	f04f 0300 	mov.w	r3, #0
 800aa80:	024b      	lsls	r3, r1, #9
 800aa82:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800aa86:	0242      	lsls	r2, r0, #9
 800aa88:	e9c7 2308 	strd	r2, r3, [r7, #32]


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800aa8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa90:	461a      	mov	r2, r3
 800aa92:	f04f 0300 	mov.w	r3, #0
 800aa96:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800aa9a:	4299      	cmp	r1, r3
 800aa9c:	bf08      	it	eq
 800aa9e:	4290      	cmpeq	r0, r2
 800aaa0:	d203      	bcs.n	800aaaa <VL53LX_dynamic_xtalk_correction_corrector+0x26a>
				run_nodetect = 1;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aaa8:	e002      	b.n	800aab0 <VL53LX_dynamic_xtalk_correction_corrector+0x270>
			else
				run_nodetect = 0;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		}
	}


	if (run_smudge_detection) {
 800aab0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f000 8101 	beq.w	800acbc <VL53LX_dynamic_xtalk_correction_corrector+0x47c>

		pint->nodetect_counter = 0;
 800aaba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aabc:	2200      	movs	r2, #0
 800aabe:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff fbe8 	bl	800a296 <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800aac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac8:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800aacc:	61fb      	str	r3, [r7, #28]
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	60fb      	str	r3, [r7, #12]
		current_xtalk = ((uint32_t)cco) << 2;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	61bb      	str	r3, [r7, #24]


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800aada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aadc:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	617b      	str	r3, [r7, #20]


		itemp32 = xtalk_offset_in - current_xtalk +
 800aae2:	69fa      	ldr	r2, [r7, #28]
 800aae4:	69bb      	ldr	r3, [r7, #24]
 800aae6:	1ad2      	subs	r2, r2, r3
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	4413      	add	r3, r2
 800aaec:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800aaee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	da02      	bge.n	800aafa <VL53LX_dynamic_xtalk_correction_corrector+0x2ba>
			itemp32 = itemp32 * (-1);
 800aaf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aaf6:	425b      	negs	r3, r3
 800aaf8:	65bb      	str	r3, [r7, #88]	; 0x58


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800aafa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aafc:	699b      	ldr	r3, [r3, #24]
 800aafe:	461a      	mov	r2, r3
 800ab00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab02:	4293      	cmp	r3, r2
 800ab04:	dd0c      	ble.n	800ab20 <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800ab06:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted)) {
 800ab08:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800ab0a:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	da03      	bge.n	800ab1a <VL53LX_dynamic_xtalk_correction_corrector+0x2da>
				pout->single_xtalk_delta_flag = 1;
 800ab12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab14:	2201      	movs	r2, #1
 800ab16:	709a      	strb	r2, [r3, #2]
 800ab18:	e002      	b.n	800ab20 <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800ab1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1c:	2202      	movs	r2, #2
 800ab1e:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800ab20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	1c5a      	adds	r2, r3, #1
 800ab26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab28:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800ab2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab30:	695b      	ldr	r3, [r3, #20]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d906      	bls.n	800ab44 <VL53LX_dynamic_xtalk_correction_corrector+0x304>
			pout->sample_limit_exceeded_flag = 1;
 800ab36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab38:	2201      	movs	r2, #1
 800ab3a:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800ab42:	e00d      	b.n	800ab60 <VL53LX_dynamic_xtalk_correction_corrector+0x320>
		} else {
			pint->accumulator = pint->accumulator +
 800ab44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab46:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	f04f 0300 	mov.w	r3, #0
 800ab52:	eb10 0802 	adds.w	r8, r0, r2
 800ab56:	eb41 0903 	adc.w	r9, r1, r3
 800ab5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab5c:	e9c3 8902 	strd	r8, r9, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800ab60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d202      	bcs.n	800ab72 <VL53LX_dynamic_xtalk_correction_corrector+0x332>
			continue_processing = CONT_NEXT_LOOP;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800ab72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab74:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ab78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	f04f 0300 	mov.w	r3, #0
 800ab82:	f7f5 fbcd 	bl	8000320 <__aeabi_uldivmod>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
		xtalk_offset_out =
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	653b      	str	r3, [r7, #80]	; 0x50
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800ab8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	1ad2      	subs	r2, r2, r3
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	4413      	add	r3, r2
 800ab98:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800ab9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	da02      	bge.n	800aba6 <VL53LX_dynamic_xtalk_correction_corrector+0x366>
			itemp32 = itemp32 * (-1);
 800aba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aba2:	425b      	negs	r3, r3
 800aba4:	65bb      	str	r3, [r7, #88]	; 0x58

		if (continue_processing == CONT_CONTINUE &&
 800aba6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d112      	bne.n	800abd4 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800abae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abb0:	69db      	ldr	r3, [r3, #28]
 800abb2:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800abb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abb6:	4293      	cmp	r3, r2
 800abb8:	db0c      	blt.n	800abd4 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800abba:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted))
 800abbc:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800abbe:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800abc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abc2:	429a      	cmp	r2, r3
 800abc4:	da03      	bge.n	800abce <VL53LX_dynamic_xtalk_correction_corrector+0x38e>
				pout->averaged_xtalk_delta_flag = 1;
 800abc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc8:	2201      	movs	r2, #1
 800abca:	70da      	strb	r2, [r3, #3]
 800abcc:	e002      	b.n	800abd4 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800abce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd0:	2202      	movs	r2, #2
 800abd2:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800abd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d108      	bne.n	800abee <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800abdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abde:	69db      	ldr	r3, [r3, #28]
 800abe0:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800abe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abe4:	4293      	cmp	r3, r2
 800abe6:	da02      	bge.n	800abee <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			)

			continue_processing = CONT_RESET;
 800abe8:	2302      	movs	r3, #2
 800abea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



		pout->smudge_corr_clipped = 0;
 800abee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf0:	2200      	movs	r2, #0
 800abf2:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800abf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d111      	bne.n	800ac20 <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800abfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abfe:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00d      	beq.n	800ac20 <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800ac04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac06:	6a1b      	ldr	r3, [r3, #32]
 800ac08:	7afa      	ldrb	r2, [r7, #11]
 800ac0a:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800ac0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d905      	bls.n	800ac20 <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
				pout->smudge_corr_clipped = 1;
 800ac14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac16:	2201      	movs	r2, #1
 800ac18:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800ac20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac22:	7c1b      	ldrb	r3, [r3, #16]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d007      	beq.n	800ac38 <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800ac28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac2a:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800ac2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d902      	bls.n	800ac38 <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			xtalk_offset_out =
 800ac32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800ac38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac3a:	7c1b      	ldrb	r3, [r3, #16]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d107      	bne.n	800ac50 <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800ac40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac42:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800ac44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d202      	bcs.n	800ac50 <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			xtalk_offset_out =
 800ac4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800ac50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac52:	089b      	lsrs	r3, r3, #2
 800ac54:	653b      	str	r3, [r7, #80]	; 0x50
		if (xtalk_offset_out > 0x3FFFF)
 800ac56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac5c:	d301      	bcc.n	800ac62 <VL53LX_dynamic_xtalk_correction_corrector+0x422>
			xtalk_offset_out = 0x3FFFF;
 800ac5e:	4b3f      	ldr	r3, [pc, #252]	; (800ad5c <VL53LX_dynamic_xtalk_correction_corrector+0x51c>)
 800ac60:	653b      	str	r3, [r7, #80]	; 0x50


		if (continue_processing == CONT_CONTINUE) {
 800ac62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10d      	bne.n	800ac86 <VL53LX_dynamic_xtalk_correction_corrector+0x446>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	9301      	str	r3, [sp, #4]
 800ac6e:	2301      	movs	r3, #1
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7ff fc33 	bl	800a4e4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800ac7e:	2302      	movs	r3, #2
 800ac80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800ac84:	e009      	b.n	800ac9a <VL53LX_dynamic_xtalk_correction_corrector+0x45a>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800ac86:	2301      	movs	r3, #1
 800ac88:	9301      	str	r3, [sp, #4]
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f7ff fc25 	bl	800a4e4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800ac9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d10c      	bne.n	800acbc <VL53LX_dynamic_xtalk_correction_corrector+0x47c>
			pint->accumulator = 0;
 800aca2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aca4:	f04f 0200 	mov.w	r2, #0
 800aca8:	f04f 0300 	mov.w	r3, #0
 800acac:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800acb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acb2:	2200      	movs	r2, #0
 800acb4:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800acb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acb8:	2200      	movs	r2, #0
 800acba:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800acbc:	2300      	movs	r3, #0
 800acbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (run_nodetect == 1) {
 800acc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d140      	bne.n	800ad4c <VL53LX_dynamic_xtalk_correction_corrector+0x50c>

		pint->nodetect_counter += 1;
 800acca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	1c5a      	adds	r2, r3, #1
 800acd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acd2:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800acd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acd6:	691a      	ldr	r2, [r3, #16]
 800acd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acdc:	429a      	cmp	r2, r3
 800acde:	d202      	bcs.n	800ace6 <VL53LX_dynamic_xtalk_correction_corrector+0x4a6>
			continue_processing = CONT_NEXT_LOOP;
 800ace0:	2301      	movs	r3, #1
 800ace2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800ace6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ace8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acea:	653b      	str	r3, [r7, #80]	; 0x50

		if (continue_processing == CONT_CONTINUE) {
 800acec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d110      	bne.n	800ad16 <VL53LX_dynamic_xtalk_correction_corrector+0x4d6>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800acf4:	2300      	movs	r3, #0
 800acf6:	9301      	str	r3, [sp, #4]
 800acf8:	2300      	movs	r3, #0
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7ff fbee 	bl	800a4e4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800ad08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0a:	2202      	movs	r2, #2
 800ad0c:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800ad0e:	2302      	movs	r3, #2
 800ad10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800ad14:	e009      	b.n	800ad2a <VL53LX_dynamic_xtalk_correction_corrector+0x4ea>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800ad16:	2301      	movs	r3, #1
 800ad18:	9301      	str	r3, [sp, #4]
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7ff fbdd 	bl	800a4e4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800ad2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d10c      	bne.n	800ad4c <VL53LX_dynamic_xtalk_correction_corrector+0x50c>
			pint->accumulator = 0;
 800ad32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad34:	f04f 0200 	mov.w	r2, #0
 800ad38:	f04f 0300 	mov.w	r3, #0
 800ad3c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800ad40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad42:	2200      	movs	r2, #0
 800ad44:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800ad46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad48:	2200      	movs	r2, #0
 800ad4a:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800ad4c:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3760      	adds	r7, #96	; 0x60
 800ad54:	46bd      	mov	sp, r7
 800ad56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ad5a:	bf00      	nop
 800ad5c:	0003ffff 	.word	0x0003ffff

0800ad60 <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	3318      	adds	r3, #24
 800ad70:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800ad78:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ad80:	3314      	adds	r3, #20
 800ad82:	2201      	movs	r2, #1
 800ad84:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ad8c:	3315      	adds	r3, #21
 800ad8e:	2201      	movs	r2, #1
 800ad90:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ad98:	3316      	adds	r3, #22
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ada4:	3318      	adds	r3, #24
 800ada6:	2200      	movs	r2, #0
 800ada8:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800adb0:	331c      	adds	r3, #28
 800adb2:	2264      	movs	r2, #100	; 0x64
 800adb4:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800adbc:	2200      	movs	r2, #0
 800adbe:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800adc6:	3304      	adds	r3, #4
 800adc8:	2200      	movs	r2, #0
 800adca:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800add2:	3308      	adds	r3, #8
 800add4:	22c8      	movs	r2, #200	; 0xc8
 800add6:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800adde:	330c      	adds	r3, #12
 800ade0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ade4:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800adec:	3310      	adds	r3, #16
 800adee:	f44f 729a 	mov.w	r2, #308	; 0x134
 800adf2:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800adfa:	3314      	adds	r3, #20
 800adfc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ae00:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800ae08:	3318      	adds	r3, #24
 800ae0a:	2280      	movs	r2, #128	; 0x80
 800ae0c:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800ae14:	331c      	adds	r3, #28
 800ae16:	2200      	movs	r2, #0
 800ae18:	701a      	strb	r2, [r3, #0]
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800ae20:	331e      	adds	r3, #30
 800ae22:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae26:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ae2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae32:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ae3a:	3302      	adds	r3, #2
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ae46:	3304      	adds	r3, #4
 800ae48:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
 800ae4c:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ae54:	3308      	adds	r3, #8
 800ae56:	2228      	movs	r2, #40	; 0x28
 800ae58:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ae60:	330c      	adds	r3, #12
 800ae62:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800ae66:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ae6e:	3310      	adds	r3, #16
 800ae70:	f44f 7261 	mov.w	r2, #900	; 0x384
 800ae74:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ae7c:	3314      	adds	r3, #20
 800ae7e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ae82:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ae8a:	3318      	adds	r3, #24
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.required_samples = 0;
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ae96:	331c      	adds	r3, #28
 800ae98:	2200      	movs	r2, #0
 800ae9a:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.accumulator = 0;
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	f503 519f 	add.w	r1, r3, #5088	; 0x13e0
 800aea2:	f04f 0200 	mov.w	r2, #0
 800aea6:	f04f 0300 	mov.w	r3, #0
 800aeaa:	e9c1 2300 	strd	r2, r3, [r1]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800aeb4:	3308      	adds	r3, #8
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	601a      	str	r2, [r3, #0]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	f000 f806 	bl	800aecc <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800aec0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3718      	adds	r7, #24
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800aed4:	2300      	movs	r3, #0
 800aed6:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800aede:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	2200      	movs	r2, #0
 800aee4:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	2200      	movs	r2, #0
 800aeea:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	2200      	movs	r2, #0
 800aef0:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	2200      	movs	r2, #0
 800aef6:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	2200      	movs	r2, #0
 800aefc:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	2200      	movs	r2, #0
 800af02:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	2200      	movs	r2, #0
 800af08:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	2200      	movs	r2, #0
 800af0e:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	2200      	movs	r2, #0
 800af14:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	2200      	movs	r2, #0
 800af1a:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800af1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800af34:	2300      	movs	r3, #0
 800af36:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	3318      	adds	r3, #24
 800af3c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800af44:	331c      	adds	r3, #28
 800af46:	2200      	movs	r2, #0
 800af48:	601a      	str	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800af50:	2200      	movs	r2, #0
 800af52:	801a      	strh	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800af5a:	3302      	adds	r3, #2
 800af5c:	2200      	movs	r2, #0
 800af5e:	801a      	strh	r2, [r3, #0]
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800af66:	3304      	adds	r3, #4
 800af68:	2218      	movs	r2, #24
 800af6a:	2100      	movs	r1, #0
 800af6c:	4618      	mov	r0, r3
 800af6e:	f009 f8c1 	bl	80140f4 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800af72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800af7e:	b480      	push	{r7}
 800af80:	b085      	sub	sp, #20
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800af86:	2300      	movs	r3, #0
 800af88:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	3318      	adds	r3, #24
 800af8e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800af96:	3310      	adds	r3, #16
 800af98:	2203      	movs	r2, #3
 800af9a:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800afa2:	3311      	adds	r3, #17
 800afa4:	2200      	movs	r2, #0
 800afa6:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800afae:	3312      	adds	r3, #18
 800afb0:	2200      	movs	r2, #0
 800afb2:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800afba:	3313      	adds	r3, #19
 800afbc:	2200      	movs	r2, #0
 800afbe:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800afc6:	3314      	adds	r3, #20
 800afc8:	2200      	movs	r2, #0
 800afca:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800afd2:	3315      	adds	r3, #21
 800afd4:	2200      	movs	r2, #0
 800afd6:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800afde:	3316      	adds	r3, #22
 800afe0:	2200      	movs	r2, #0
 800afe2:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800afea:	3318      	adds	r3, #24
 800afec:	2200      	movs	r2, #0
 800afee:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800aff6:	331c      	adds	r3, #28
 800aff8:	2200      	movs	r2, #0
 800affa:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800affc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <VL53LX_low_power_auto_data_stop_range>:

VL53LX_Error VL53LX_low_power_auto_data_stop_range(
	VL53LX_DEV                          Dev
	)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b014:	2300      	movs	r3, #0
 800b016:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	3318      	adds	r3, #24
 800b01c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b024:	3312      	adds	r3, #18
 800b026:	22ff      	movs	r2, #255	; 0xff
 800b028:	701a      	strb	r2, [r3, #0]

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b030:	3316      	adds	r3, #22
 800b032:	2200      	movs	r2, #0
 800b034:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b03c:	3318      	adds	r3, #24
 800b03e:	2200      	movs	r2, #0
 800b040:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b048:	331c      	adds	r3, #28
 800b04a:	2200      	movs	r2, #0
 800b04c:	801a      	strh	r2, [r3, #0]


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b054:	3314      	adds	r3, #20
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d007      	beq.n	800b06c <VL53LX_low_power_auto_data_stop_range+0x60>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b062:	3314      	adds	r3, #20
 800b064:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__init =
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b072:	3315      	adds	r3, #21
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d007      	beq.n	800b08a <VL53LX_low_power_auto_data_stop_range+0x7e>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b080:	3315      	adds	r3, #21
 800b082:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	LOG_FUNCTION_END(status);

	return status;
 800b092:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3714      	adds	r7, #20
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr

0800b0a2 <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800b0a2:	b480      	push	{r7}
 800b0a4:	b085      	sub	sp, #20
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	3318      	adds	r3, #24
 800b0ae:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f893 22e3 	ldrb.w	r2, [r3, #739]	; 0x2e3
	pdev->low_power_auto_data.saved_vhv_init =
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b0c0:	3314      	adds	r3, #20
 800b0c2:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
	pdev->low_power_auto_data.saved_vhv_timeout =
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b0d0:	3315      	adds	r3, #21
 800b0d2:	701a      	strb	r2, [r3, #0]


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f893 32e3 	ldrb.w	r3, [r3, #739]	; 0x2e3
 800b0da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0de:	b2da      	uxtb	r2, r3
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b0ec:	f003 0303 	and.w	r3, r3, #3
 800b0f0:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b0f8:	3310      	adds	r3, #16
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b100:	4413      	add	r3, r2
 800b102:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2201      	movs	r2, #1
 800b10e:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 800b118:	331e      	adds	r3, #30
 800b11a:	781a      	ldrb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result =
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b122:	3316      	adds	r3, #22
 800b124:	701a      	strb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b12c:	3316      	adds	r3, #22
 800b12e:	781a      	ldrb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

	LOG_FUNCTION_END(status);

	return status;
 800b136:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3714      	adds	r7, #20
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800b146:	b480      	push	{r7}
 800b148:	b087      	sub	sp, #28
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	3318      	adds	r3, #24
 800b152:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f203 3366 	addw	r3, r3, #870	; 0x366
 800b15a:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b15c:	2300      	movs	r3, #0
 800b15e:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	8a1b      	ldrh	r3, [r3, #16]
 800b164:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	891b      	ldrh	r3, [r3, #8]
 800b16a:	4413      	add	r3, r2
	utemp32a =
 800b16c:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b174:	d302      	bcc.n	800b17c <VL53LX_low_power_auto_update_DSS+0x36>
		utemp32a = 0xFFFF;
 800b176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b17a:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	041b      	lsls	r3, r3, #16
 800b180:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d102      	bne.n	800b192 <VL53LX_low_power_auto_update_DSS+0x4c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b18c:	23f1      	movs	r3, #241	; 0xf1
 800b18e:	75fb      	strb	r3, [r7, #23]
 800b190:	e03f      	b.n	800b212 <VL53LX_low_power_auto_update_DSS+0xcc>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800b198:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1a0:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b1a8:	3318      	adds	r3, #24
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	601a      	str	r2, [r3, #0]
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800b1b4:	041b      	lsls	r3, r3, #16
 800b1b6:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b1be:	3318      	adds	r3, #24
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d102      	bne.n	800b1cc <VL53LX_low_power_auto_update_DSS+0x86>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b1c6:	23f1      	movs	r3, #241	; 0xf1
 800b1c8:	75fb      	strb	r3, [r7, #23]
 800b1ca:	e022      	b.n	800b212 <VL53LX_low_power_auto_update_DSS+0xcc>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b1d2:	3318      	adds	r3, #24
 800b1d4:	681b      	ldr	r3, [r3, #0]
			utemp32a = utemp32a /
 800b1d6:	693a      	ldr	r2, [r7, #16]
 800b1d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1dc:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1e4:	d302      	bcc.n	800b1ec <VL53LX_low_power_auto_update_DSS+0xa6>
				utemp32a = 0xFFFF;
 800b1e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1ea:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b1f6:	331c      	adds	r3, #28
 800b1f8:	801a      	strh	r2, [r3, #0]


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b200:	331c      	adds	r3, #28
 800b202:	881a      	ldrh	r2, [r3, #0]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
			pdev->gen_cfg.dss_config__roi_mode_control =
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2202      	movs	r2, #2
 800b20e:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800b212:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b216:	f113 0f0f 	cmn.w	r3, #15
 800b21a:	d114      	bne.n	800b246 <VL53LX_low_power_auto_update_DSS+0x100>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b222:	331c      	adds	r3, #28
 800b224:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b228:	801a      	strh	r2, [r3, #0]


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b230:	331c      	adds	r3, #28
 800b232:	881a      	ldrh	r2, [r3, #0]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2202      	movs	r2, #2
 800b23e:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800b242:	2300      	movs	r3, #0
 800b244:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b246:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	371c      	adds	r7, #28
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr

0800b256 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800b256:	b480      	push	{r7}
 800b258:	b087      	sub	sp, #28
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
 800b25e:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	3318      	adds	r3, #24
 800b264:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b266:	2300      	movs	r3, #0
 800b268:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800b26a:	2300      	movs	r3, #0
 800b26c:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800b274:	2b07      	cmp	r3, #7
 800b276:	bf0c      	ite	eq
 800b278:	2301      	moveq	r3, #1
 800b27a:	2300      	movne	r3, #0
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b280:	2300      	movs	r3, #0
 800b282:	75fb      	strb	r3, [r7, #23]
 800b284:	e019      	b.n	800b2ba <VL53LX_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800b286:	7df9      	ldrb	r1, [r7, #23]
 800b288:	7bbb      	ldrb	r3, [r7, #14]
 800b28a:	6938      	ldr	r0, [r7, #16]
 800b28c:	461a      	mov	r2, r3
 800b28e:	0052      	lsls	r2, r2, #1
 800b290:	441a      	add	r2, r3
 800b292:	0153      	lsls	r3, r2, #5
 800b294:	461a      	mov	r2, r3
 800b296:	460b      	mov	r3, r1
 800b298:	005b      	lsls	r3, r3, #1
 800b29a:	440b      	add	r3, r1
 800b29c:	019b      	lsls	r3, r3, #6
 800b29e:	4413      	add	r3, r2
 800b2a0:	4403      	add	r3, r0
 800b2a2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800b2a6:	330c      	adds	r3, #12
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	dd02      	ble.n	800b2b4 <VL53LX_compute_histo_merge_nb+0x5e>
			sum++;
 800b2ae:	7dbb      	ldrb	r3, [r7, #22]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b2b4:	7dfb      	ldrb	r3, [r7, #23]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	75fb      	strb	r3, [r7, #23]
 800b2ba:	7dfb      	ldrb	r3, [r7, #23]
 800b2bc:	2b05      	cmp	r3, #5
 800b2be:	d9e2      	bls.n	800b286 <VL53LX_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	7dba      	ldrb	r2, [r7, #22]
 800b2c4:	701a      	strb	r2, [r3, #0]

	return status;
 800b2c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	371c      	adds	r7, #28
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	b085      	sub	sp, #20
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	4603      	mov	r3, r0
 800b2de:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800b2e4:	88fb      	ldrh	r3, [r7, #6]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d005      	beq.n	800b2f6 <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800b2ea:	88fb      	ldrh	r3, [r7, #6]
 800b2ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b2f0:	fb92 f3f3 	sdiv	r3, r2, r3
 800b2f4:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3714      	adds	r7, #20
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800b304:	b480      	push	{r7}
 800b306:	b089      	sub	sp, #36	; 0x24
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
 800b310:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800b312:	f04f 0200 	mov.w	r2, #0
 800b316:	f04f 0300 	mov.w	r3, #0
 800b31a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800b31e:	2300      	movs	r3, #0
 800b320:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	fb02 f303 	mul.w	r3, r2, r3
 800b32a:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	0b1b      	lsrs	r3, r3, #12
 800b330:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	461a      	mov	r2, r3
 800b336:	f04f 0300 	mov.w	r3, #0
 800b33a:	e9c7 2306 	strd	r2, r3, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	fb02 f303 	mul.w	r3, r2, r3
 800b346:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	091b      	lsrs	r3, r3, #4
 800b34c:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	461a      	mov	r2, r3
 800b352:	f04f 0300 	mov.w	r3, #0
 800b356:	69f9      	ldr	r1, [r7, #28]
 800b358:	fb02 f001 	mul.w	r0, r2, r1
 800b35c:	69b9      	ldr	r1, [r7, #24]
 800b35e:	fb03 f101 	mul.w	r1, r3, r1
 800b362:	4401      	add	r1, r0
 800b364:	69b8      	ldr	r0, [r7, #24]
 800b366:	fba0 2302 	umull	r2, r3, r0, r2
 800b36a:	4419      	add	r1, r3
 800b36c:	460b      	mov	r3, r1
 800b36e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800b372:	e9c7 2306 	strd	r2, r3, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800b376:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b37a:	f04f 0200 	mov.w	r2, #0
 800b37e:	f04f 0300 	mov.w	r3, #0
 800b382:	0b02      	lsrs	r2, r0, #12
 800b384:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b388:	0b0b      	lsrs	r3, r1, #12
 800b38a:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800b38e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b392:	2b01      	cmp	r3, #1
 800b394:	bf08      	it	eq
 800b396:	2a00      	cmpeq	r2, #0
 800b398:	d305      	bcc.n	800b3a6 <VL53LX_duration_maths+0xa2>
		tmp_long_int = 0xFFFFFFFF;
 800b39a:	f04f 32ff 	mov.w	r2, #4294967295
 800b39e:	f04f 0300 	mov.w	r3, #0
 800b3a2:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	617b      	str	r3, [r7, #20]

	return duration_us;
 800b3aa:	697b      	ldr	r3, [r7, #20]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3724      	adds	r7, #36	; 0x24
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800b3b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b3bc:	b08e      	sub	sp, #56	; 0x38
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	60f8      	str	r0, [r7, #12]
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	607a      	str	r2, [r7, #4]
 800b3c6:	817b      	strh	r3, [r7, #10]
	uint64_t total_hist_counts  = 0;
 800b3c8:	f04f 0200 	mov.w	r2, #0
 800b3cc:	f04f 0300 	mov.w	r3, #0
 800b3d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint64_t xtalk_per_spad     = 0;
 800b3d4:	f04f 0200 	mov.w	r2, #0
 800b3d8:	f04f 0300 	mov.w	r3, #0
 800b3dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint32_t rate_per_spad_kcps = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	627b      	str	r3, [r7, #36]	; 0x24





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	f04f 0400 	mov.w	r4, #0
 800b3f4:	f04f 0500 	mov.w	r5, #0
 800b3f8:	015d      	lsls	r5, r3, #5
 800b3fa:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800b3fe:	0154      	lsls	r4, r2, #5
 800b400:	4622      	mov	r2, r4
 800b402:	462b      	mov	r3, r5
 800b404:	1a12      	subs	r2, r2, r0
 800b406:	eb63 0301 	sbc.w	r3, r3, r1
 800b40a:	f04f 0400 	mov.w	r4, #0
 800b40e:	f04f 0500 	mov.w	r5, #0
 800b412:	009d      	lsls	r5, r3, #2
 800b414:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800b418:	0094      	lsls	r4, r2, #2
 800b41a:	4622      	mov	r2, r4
 800b41c:	462b      	mov	r3, r5
 800b41e:	1812      	adds	r2, r2, r0
 800b420:	eb41 0303 	adc.w	r3, r1, r3
 800b424:	f04f 0000 	mov.w	r0, #0
 800b428:	f04f 0100 	mov.w	r1, #0
 800b42c:	02d9      	lsls	r1, r3, #11
 800b42e:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800b432:	02d0      	lsls	r0, r2, #11
 800b434:	4602      	mov	r2, r0
 800b436:	460b      	mov	r3, r1
 800b438:	e9c7 2306 	strd	r2, r3, [r7, #24]
			* 1000 * 256);

	if (num_spads != 0)
 800b43c:	897b      	ldrh	r3, [r7, #10]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00a      	beq.n	800b458 <VL53LX_events_per_spad_maths+0xa0>
		total_hist_counts = do_division_u(
 800b442:	897a      	ldrh	r2, [r7, #10]
 800b444:	f04f 0300 	mov.w	r3, #0
 800b448:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b44c:	f7f4 ff68 	bl	8000320 <__aeabi_uldivmod>
 800b450:	4602      	mov	r2, r0
 800b452:	460b      	mov	r3, r1
 800b454:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d021      	beq.n	800b4a2 <VL53LX_events_per_spad_maths+0xea>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b45e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800b462:	f04f 0200 	mov.w	r2, #0
 800b466:	f04f 0300 	mov.w	r3, #0
 800b46a:	02cb      	lsls	r3, r1, #11
 800b46c:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b470:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800b472:	6879      	ldr	r1, [r7, #4]
 800b474:	0849      	lsrs	r1, r1, #1
 800b476:	4608      	mov	r0, r1
 800b478:	f04f 0100 	mov.w	r1, #0
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b47c:	eb12 0800 	adds.w	r8, r2, r0
 800b480:	eb43 0901 	adc.w	r9, r3, r1
 800b484:	e9c7 8904 	strd	r8, r9, [r7, #16]

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	461a      	mov	r2, r3
 800b48c:	f04f 0300 	mov.w	r3, #0
 800b490:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b494:	f7f4 ff44 	bl	8000320 <__aeabi_uldivmod>
 800b498:	4602      	mov	r2, r0
 800b49a:	460b      	mov	r3, r1
 800b49c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800b4a0:	e00b      	b.n	800b4ba <VL53LX_events_per_spad_maths+0x102>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800b4a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800b4a6:	f04f 0200 	mov.w	r2, #0
 800b4aa:	f04f 0300 	mov.w	r3, #0
 800b4ae:	02cb      	lsls	r3, r1, #11
 800b4b0:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b4b4:	02c2      	lsls	r2, r0, #11
 800b4b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800b4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4bc:	627b      	str	r3, [r7, #36]	; 0x24

	return rate_per_spad_kcps;
 800b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3738      	adds	r7, #56	; 0x38
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b4ca <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800b4ca:	b480      	push	{r7}
 800b4cc:	b085      	sub	sp, #20
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b4d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b4da:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800b4dc:	e002      	b.n	800b4e4 <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	089b      	lsrs	r3, r3, #2
 800b4e2:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d8f8      	bhi.n	800b4de <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800b4ec:	e017      	b.n	800b51e <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800b4ee:	68fa      	ldr	r2, [r7, #12]
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d30b      	bcc.n	800b512 <VL53LX_isqrt+0x48>
			num -= res + bit;
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	4413      	add	r3, r2
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	085b      	lsrs	r3, r3, #1
 800b50a:	68ba      	ldr	r2, [r7, #8]
 800b50c:	4413      	add	r3, r2
 800b50e:	60fb      	str	r3, [r7, #12]
 800b510:	e002      	b.n	800b518 <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	085b      	lsrs	r3, r3, #1
 800b516:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	089b      	lsrs	r3, r3, #2
 800b51c:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1e4      	bne.n	800b4ee <VL53LX_isqrt+0x24>
	}

	return res;
 800b524:	68fb      	ldr	r3, [r7, #12]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3714      	adds	r7, #20
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr

0800b532 <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b084      	sub	sp, #16
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800b53a:	2300      	movs	r3, #0
 800b53c:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800b53e:	2300      	movs	r3, #0
 800b540:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 fa97 	bl	800ba7c <VL53LX_decode_vcsel_period>
 800b54e:	4603      	mov	r3, r0
	period = 2048 *
 800b550:	02db      	lsls	r3, r3, #11
 800b552:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800b55e:	461a      	mov	r2, r3
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	4413      	add	r3, r2
 800b564:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b56c:	02db      	lsls	r3, r3, #11
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	4413      	add	r3, r2
 800b572:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b57a:	02db      	lsls	r3, r3, #11
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d009      	beq.n	800b59c <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b590:	68b9      	ldr	r1, [r7, #8]
 800b592:	fb01 f202 	mul.w	r2, r1, r2
 800b596:	1a9b      	subs	r3, r3, r2
 800b598:	60fb      	str	r3, [r7, #12]
 800b59a:	e001      	b.n	800b5a0 <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800b59c:	2300      	movs	r3, #0
 800b59e:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800b5aa:	bf00      	nop
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b084      	sub	sp, #16
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
 800b5ba:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800b5c4:	6838      	ldr	r0, [r7, #0]
 800b5c6:	f000 fb82 	bl	800bcce <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7ff ff7a 	bl	800b4ca <VL53LX_isqrt>
 800b5d6:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800b5d8:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	fb02 f303 	mul.w	r3, r2, r3
 800b5e2:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	3307      	adds	r3, #7
 800b5e8:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	111b      	asrs	r3, r3, #4
 800b5ee:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	2200      	movs	r2, #0
 800b600:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	2200      	movs	r2, #0
 800b608:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b60c:	2300      	movs	r3, #0
 800b60e:	73fb      	strb	r3, [r7, #15]
 800b610:	e01e      	b.n	800b650 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800b612:	7bfa      	ldrb	r2, [r7, #15]
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	3206      	adds	r2, #6
 800b618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	429a      	cmp	r2, r3
 800b620:	dd13      	ble.n	800b64a <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800b628:	7bf9      	ldrb	r1, [r7, #15]
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	3106      	adds	r1, #6
 800b62e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b632:	441a      	add	r2, r3
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800b640:	3301      	adds	r3, #1
 800b642:	b2da      	uxtb	r2, r3
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b64a:	7bfb      	ldrb	r3, [r7, #15]
 800b64c:	3301      	adds	r3, #1
 800b64e:	73fb      	strb	r3, [r7, #15]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	7a9b      	ldrb	r3, [r3, #10]
 800b654:	7bfa      	ldrb	r2, [r7, #15]
 800b656:	429a      	cmp	r2, r3
 800b658:	d3db      	bcc.n	800b612 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800b660:	2b00      	cmp	r3, #0
 800b662:	d01c      	beq.n	800b69e <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53LX_p_028 =
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800b676:	683a      	ldr	r2, [r7, #0]
 800b678:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800b67c:	0852      	lsrs	r2, r2, #1
 800b67e:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800b680:	441a      	add	r2, r3
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800b68e:	683a      	ldr	r2, [r7, #0]
 800b690:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53LX_p_028 /=
 800b694:	fb93 f2f2 	sdiv	r2, r3, r2
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800b69e:	bf00      	nop
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b6a6:	b480      	push	{r7}
 800b6a8:	b085      	sub	sp, #20
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	7b1b      	ldrb	r3, [r3, #12]
 800b6be:	f003 0307 	and.w	r3, r3, #7
 800b6c2:	2b07      	cmp	r3, #7
 800b6c4:	d13a      	bne.n	800b73c <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	73bb      	strb	r3, [r7, #14]
 800b6ce:	e01f      	b.n	800b710 <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800b6d0:	7bbb      	ldrb	r3, [r7, #14]
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	7b1b      	ldrb	r3, [r3, #12]
 800b6d8:	f003 0307 	and.w	r3, r3, #7
 800b6dc:	2b07      	cmp	r3, #7
 800b6de:	d014      	beq.n	800b70a <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800b6e0:	7bba      	ldrb	r2, [r7, #14]
 800b6e2:	7b7b      	ldrb	r3, [r7, #13]
 800b6e4:	6879      	ldr	r1, [r7, #4]
 800b6e6:	440a      	add	r2, r1
 800b6e8:	7b11      	ldrb	r1, [r2, #12]
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	460a      	mov	r2, r1
 800b6f0:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800b6f2:	7bba      	ldrb	r2, [r7, #14]
 800b6f4:	7b7b      	ldrb	r3, [r7, #13]
 800b6f6:	6879      	ldr	r1, [r7, #4]
 800b6f8:	440a      	add	r2, r1
 800b6fa:	7c91      	ldrb	r1, [r2, #18]
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	4413      	add	r3, r2
 800b700:	460a      	mov	r2, r1
 800b702:	749a      	strb	r2, [r3, #18]
				i++;
 800b704:	7b7b      	ldrb	r3, [r7, #13]
 800b706:	3301      	adds	r3, #1
 800b708:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b70a:	7bbb      	ldrb	r3, [r7, #14]
 800b70c:	3301      	adds	r3, #1
 800b70e:	73bb      	strb	r3, [r7, #14]
 800b710:	7bbb      	ldrb	r3, [r7, #14]
 800b712:	2b05      	cmp	r3, #5
 800b714:	d9dc      	bls.n	800b6d0 <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b716:	7b7b      	ldrb	r3, [r7, #13]
 800b718:	73bb      	strb	r3, [r7, #14]
 800b71a:	e00c      	b.n	800b736 <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800b71c:	7bbb      	ldrb	r3, [r7, #14]
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	4413      	add	r3, r2
 800b722:	2210      	movs	r2, #16
 800b724:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800b726:	7bbb      	ldrb	r3, [r7, #14]
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	4413      	add	r3, r2
 800b72c:	2200      	movs	r2, #0
 800b72e:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b730:	7bbb      	ldrb	r3, [r7, #14]
 800b732:	3301      	adds	r3, #1
 800b734:	73bb      	strb	r3, [r7, #14]
 800b736:	7bbb      	ldrb	r3, [r7, #14]
 800b738:	2b05      	cmp	r3, #5
 800b73a:	d9ef      	bls.n	800b71c <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	7adb      	ldrb	r3, [r3, #11]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d023      	beq.n	800b78c <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	7adb      	ldrb	r3, [r3, #11]
 800b748:	73fb      	strb	r3, [r7, #15]
 800b74a:	e00f      	b.n	800b76c <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800b74c:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	7ad2      	ldrb	r2, [r2, #11]
 800b754:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	3106      	adds	r1, #6
 800b75a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	3206      	adds	r2, #6
 800b762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800b766:	7bfb      	ldrb	r3, [r7, #15]
 800b768:	3301      	adds	r3, #1
 800b76a:	73fb      	strb	r3, [r7, #15]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800b770:	7bfa      	ldrb	r2, [r7, #15]
 800b772:	429a      	cmp	r2, r3
 800b774:	d3ea      	bcc.n	800b74c <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	72da      	strb	r2, [r3, #11]
	}
}
 800b78c:	bf00      	nop
 800b78e:	3714      	adds	r7, #20
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	4603      	mov	r3, r0
 800b7a0:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800b7aa:	88fb      	ldrh	r3, [r7, #6]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7ff fd92 	bl	800b2d6 <VL53LX_calc_pll_period_us>
 800b7b2:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800b7b8:	f249 2257 	movw	r2, #37463	; 0x9257
 800b7bc:	fb02 f303 	mul.w	r3, r2, r3
 800b7c0:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b7c8:	0c1b      	lsrs	r3, r3, #16
 800b7ca:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800b7cc:	68bb      	ldr	r3, [r7, #8]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b087      	sub	sp, #28
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
 800b7de:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800b7e4:	2307      	movs	r3, #7
 800b7e6:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7f2:	db03      	blt.n	800b7fc <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800b7f4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b7f8:	617b      	str	r3, [r7, #20]
 800b7fa:	e004      	b.n	800b806 <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	dd01      	ble.n	800b806 <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b80c:	dd02      	ble.n	800b814 <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800b80e:	2303      	movs	r3, #3
 800b810:	613b      	str	r3, [r7, #16]
 800b812:	e001      	b.n	800b818 <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800b814:	2307      	movs	r3, #7
 800b816:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d009      	beq.n	800b832 <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800b81e:	697a      	ldr	r2, [r7, #20]
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	409a      	lsls	r2, r3
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	085b      	lsrs	r3, r3, #1
 800b828:	441a      	add	r2, r3
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b830:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b838:	dd02      	ble.n	800b840 <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	011b      	lsls	r3, r3, #4
 800b83e:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b846:	d302      	bcc.n	800b84e <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800b848:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b84c:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800b852:	89fb      	ldrh	r3, [r7, #14]
}
 800b854:	4618      	mov	r0, r3
 800b856:	371c      	adds	r7, #28
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800b860:	b480      	push	{r7}
 800b862:	b087      	sub	sp, #28
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	603b      	str	r3, [r7, #0]
 800b86c:	4613      	mov	r3, r2
 800b86e:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800b874:	2300      	movs	r3, #0
 800b876:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800b878:	88fb      	ldrh	r3, [r7, #6]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d010      	beq.n	800b8a0 <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	021a      	lsls	r2, r3, #8
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	fa02 f303 	lsl.w	r3, r2, r3
 800b888:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800b88a:	88fb      	ldrh	r3, [r7, #6]
 800b88c:	085b      	lsrs	r3, r3, #1
 800b88e:	b29b      	uxth	r3, r3
 800b890:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800b896:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800b898:	fbb2 f3f3 	udiv	r3, r2, r3
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	e004      	b.n	800b8aa <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a8:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800b8aa:	697a      	ldr	r2, [r7, #20]
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d901      	bls.n	800b8b6 <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800b8ba:	8a7b      	ldrh	r3, [r7, #18]
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	371c      	adds	r7, #28
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800b8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ca:	b089      	sub	sp, #36	; 0x24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	4606      	mov	r6, r0
 800b8d0:	4608      	mov	r0, r1
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	4633      	mov	r3, r6
 800b8d8:	80fb      	strh	r3, [r7, #6]
 800b8da:	4603      	mov	r3, r0
 800b8dc:	80bb      	strh	r3, [r7, #4]
 800b8de:	460b      	mov	r3, r1
 800b8e0:	807b      	strh	r3, [r7, #2]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	707b      	strb	r3, [r7, #1]


	uint32_t    pll_period_us = 0;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	61bb      	str	r3, [r7, #24]
	int64_t     tmp_long_int  = 0;
 800b8ea:	f04f 0200 	mov.w	r2, #0
 800b8ee:	f04f 0300 	mov.w	r3, #0
 800b8f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int32_t     range_mm      = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	61fb      	str	r3, [r7, #28]
	int32_t     range_mm_10   = 0;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	60fb      	str	r3, [r7, #12]



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800b8fe:	88fb      	ldrh	r3, [r7, #6]
 800b900:	4618      	mov	r0, r3
 800b902:	f7ff fce8 	bl	800b2d6 <VL53LX_calc_pll_period_us>
 800b906:	61b8      	str	r0, [r7, #24]



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800b908:	88b8      	ldrh	r0, [r7, #4]
 800b90a:	f04f 0100 	mov.w	r1, #0
 800b90e:	887a      	ldrh	r2, [r7, #2]
 800b910:	f04f 0300 	mov.w	r3, #0
 800b914:	1a84      	subs	r4, r0, r2
 800b916:	eb61 0503 	sbc.w	r5, r1, r3
 800b91a:	e9c7 4504 	strd	r4, r5, [r7, #16]



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800b91e:	69bb      	ldr	r3, [r7, #24]
 800b920:	461a      	mov	r2, r3
 800b922:	f04f 0300 	mov.w	r3, #0
 800b926:	6979      	ldr	r1, [r7, #20]
 800b928:	fb02 f001 	mul.w	r0, r2, r1
 800b92c:	6939      	ldr	r1, [r7, #16]
 800b92e:	fb03 f101 	mul.w	r1, r3, r1
 800b932:	4401      	add	r1, r0
 800b934:	6938      	ldr	r0, [r7, #16]
 800b936:	fba0 2302 	umull	r2, r3, r0, r2
 800b93a:	4419      	add	r1, r3
 800b93c:	460b      	mov	r3, r1
 800b93e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800b942:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800b946:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b94a:	2a00      	cmp	r2, #0
 800b94c:	f173 0100 	sbcs.w	r1, r3, #0
 800b950:	da06      	bge.n	800b960 <VL53LX_range_maths+0x98>
 800b952:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b956:	f04f 0100 	mov.w	r1, #0
 800b95a:	1812      	adds	r2, r2, r0
 800b95c:	eb41 0303 	adc.w	r3, r1, r3
 800b960:	f04f 0000 	mov.w	r0, #0
 800b964:	f04f 0100 	mov.w	r1, #0
 800b968:	0a50      	lsrs	r0, r2, #9
 800b96a:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800b96e:	1259      	asrs	r1, r3, #9
 800b970:	e9c7 0104 	strd	r0, r1, [r7, #16]



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	f249 2257 	movw	r2, #37463	; 0x9257
 800b97a:	fb02 f203 	mul.w	r2, r2, r3
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	2100      	movs	r1, #0
 800b982:	fb01 f303 	mul.w	r3, r1, r3
 800b986:	18d1      	adds	r1, r2, r3
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	f249 2257 	movw	r2, #37463	; 0x9257
 800b98e:	fba3 2302 	umull	r2, r3, r3, r2
 800b992:	4419      	add	r1, r3
 800b994:	460b      	mov	r3, r1
 800b996:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800b99a:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800b99e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b9a2:	2a00      	cmp	r2, #0
 800b9a4:	f173 0100 	sbcs.w	r1, r3, #0
 800b9a8:	da05      	bge.n	800b9b6 <VL53LX_range_maths+0xee>
 800b9aa:	4832      	ldr	r0, [pc, #200]	; (800ba74 <VL53LX_range_maths+0x1ac>)
 800b9ac:	f04f 0100 	mov.w	r1, #0
 800b9b0:	1812      	adds	r2, r2, r0
 800b9b2:	eb41 0303 	adc.w	r3, r1, r3
 800b9b6:	f04f 0000 	mov.w	r0, #0
 800b9ba:	f04f 0100 	mov.w	r1, #0
 800b9be:	0d90      	lsrs	r0, r2, #22
 800b9c0:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800b9c4:	1599      	asrs	r1, r3, #22
 800b9c6:	e9c7 0104 	strd	r0, r1, [r7, #16]


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9ce:	4413      	add	r3, r2
 800b9d0:	61fb      	str	r3, [r7, #28]


	range_mm *= gain_factor;
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9d6:	fb02 f303 	mul.w	r3, r2, r3
 800b9da:	61fb      	str	r3, [r7, #28]
	range_mm += 0x0400;
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9e2:	61fb      	str	r3, [r7, #28]
	range_mm /= 0x0800;
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	da01      	bge.n	800b9ee <VL53LX_range_maths+0x126>
 800b9ea:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800b9ee:	12db      	asrs	r3, r3, #11
 800b9f0:	61fb      	str	r3, [r7, #28]


	if (fractional_bits == 0) {
 800b9f2:	787b      	ldrb	r3, [r7, #1]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d130      	bne.n	800ba5a <VL53LX_range_maths+0x192>
		range_mm_10 = range_mm * 10;
 800b9f8:	69fa      	ldr	r2, [r7, #28]
 800b9fa:	4613      	mov	r3, r2
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	4413      	add	r3, r2
 800ba00:	005b      	lsls	r3, r3, #1
 800ba02:	60fb      	str	r3, [r7, #12]
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	da00      	bge.n	800ba0c <VL53LX_range_maths+0x144>
 800ba0a:	3303      	adds	r3, #3
 800ba0c:	109b      	asrs	r3, r3, #2
 800ba0e:	60fb      	str	r3, [r7, #12]
		if ((range_mm_10 % 10) < 5)
 800ba10:	68f9      	ldr	r1, [r7, #12]
 800ba12:	4b19      	ldr	r3, [pc, #100]	; (800ba78 <VL53LX_range_maths+0x1b0>)
 800ba14:	fb83 2301 	smull	r2, r3, r3, r1
 800ba18:	109a      	asrs	r2, r3, #2
 800ba1a:	17cb      	asrs	r3, r1, #31
 800ba1c:	1ad2      	subs	r2, r2, r3
 800ba1e:	4613      	mov	r3, r2
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4413      	add	r3, r2
 800ba24:	005b      	lsls	r3, r3, #1
 800ba26:	1aca      	subs	r2, r1, r3
 800ba28:	2a04      	cmp	r2, #4
 800ba2a:	dc09      	bgt.n	800ba40 <VL53LX_range_maths+0x178>
			range_mm = (int16_t)(range_mm_10 / 10);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	4a12      	ldr	r2, [pc, #72]	; (800ba78 <VL53LX_range_maths+0x1b0>)
 800ba30:	fb82 1203 	smull	r1, r2, r2, r3
 800ba34:	1092      	asrs	r2, r2, #2
 800ba36:	17db      	asrs	r3, r3, #31
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	b21b      	sxth	r3, r3
 800ba3c:	61fb      	str	r3, [r7, #28]
 800ba3e:	e014      	b.n	800ba6a <VL53LX_range_maths+0x1a2>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	4a0d      	ldr	r2, [pc, #52]	; (800ba78 <VL53LX_range_maths+0x1b0>)
 800ba44:	fb82 1203 	smull	r1, r2, r2, r3
 800ba48:	1092      	asrs	r2, r2, #2
 800ba4a:	17db      	asrs	r3, r3, #31
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	3301      	adds	r3, #1
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	b21b      	sxth	r3, r3
 800ba56:	61fb      	str	r3, [r7, #28]
 800ba58:	e007      	b.n	800ba6a <VL53LX_range_maths+0x1a2>
	} else if (fractional_bits == 1)
 800ba5a:	787b      	ldrb	r3, [r7, #1]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d104      	bne.n	800ba6a <VL53LX_range_maths+0x1a2>
		range_mm = range_mm / (0x01 << 1);
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	0fda      	lsrs	r2, r3, #31
 800ba64:	4413      	add	r3, r2
 800ba66:	105b      	asrs	r3, r3, #1
 800ba68:	61fb      	str	r3, [r7, #28]

	return range_mm;
 800ba6a:	69fb      	ldr	r3, [r7, #28]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3724      	adds	r7, #36	; 0x24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba74:	003fffff 	.word	0x003fffff
 800ba78:	66666667 	.word	0x66666667

0800ba7c <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b085      	sub	sp, #20
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	4603      	mov	r3, r0
 800ba84:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800ba86:	2300      	movs	r3, #0
 800ba88:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800ba8a:	79fb      	ldrb	r3, [r7, #7]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	005b      	lsls	r3, r3, #1
 800ba92:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3714      	adds	r7, #20
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr

0800baa2 <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800baa2:	b480      	push	{r7}
 800baa4:	b083      	sub	sp, #12
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53LX_p_015 =
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	781a      	ldrb	r2, [r3, #0]
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	7a5a      	ldrb	r2, [r3, #9]
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	685a      	ldr	r2, [r3, #4]
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	605a      	str	r2, [r3, #4]
}
 800bb12:	bf00      	nop
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800bb1e:	b480      	push	{r7}
 800bb20:	b087      	sub	sp, #28
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	60f8      	str	r0, [r7, #12]
 800bb26:	460b      	mov	r3, r1
 800bb28:	607a      	str	r2, [r7, #4]
 800bb2a:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2203      	movs	r2, #3
 800bb34:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2203      	movs	r2, #3
 800bb3a:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2218      	movs	r2, #24
 800bb52:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800bb54:	897b      	ldrh	r3, [r7, #10]
 800bb56:	b2da      	uxtb	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53LX_p_005                       = 0;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53LX_p_015                = 0;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53LX_p_028             = 0;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	82fb      	strh	r3, [r7, #22]
 800bbf6:	e009      	b.n	800bc0c <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800bbf8:	8afb      	ldrh	r3, [r7, #22]
 800bbfa:	8afa      	ldrh	r2, [r7, #22]
 800bbfc:	b2d1      	uxtb	r1, r2
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	4413      	add	r3, r2
 800bc02:	460a      	mov	r2, r1
 800bc04:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bc06:	8afb      	ldrh	r3, [r7, #22]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	82fb      	strh	r3, [r7, #22]
 800bc0c:	8afb      	ldrh	r3, [r7, #22]
 800bc0e:	2b05      	cmp	r3, #5
 800bc10:	d9f2      	bls.n	800bbf8 <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bc12:	2300      	movs	r3, #0
 800bc14:	82fb      	strh	r3, [r7, #22]
 800bc16:	e007      	b.n	800bc28 <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800bc18:	8afb      	ldrh	r3, [r7, #22]
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	2201      	movs	r2, #1
 800bc20:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bc22:	8afb      	ldrh	r3, [r7, #22]
 800bc24:	3301      	adds	r3, #1
 800bc26:	82fb      	strh	r3, [r7, #22]
 800bc28:	8afb      	ldrh	r3, [r7, #22]
 800bc2a:	2b05      	cmp	r3, #5
 800bc2c:	d9f4      	bls.n	800bc18 <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800bc2e:	2300      	movs	r3, #0
 800bc30:	82fb      	strh	r3, [r7, #22]
 800bc32:	e013      	b.n	800bc5c <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800bc34:	8afa      	ldrh	r2, [r7, #22]
 800bc36:	897b      	ldrh	r3, [r7, #10]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d206      	bcs.n	800bc4a <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800bc3c:	8afa      	ldrh	r2, [r7, #22]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	3206      	adds	r2, #6
 800bc42:	68f9      	ldr	r1, [r7, #12]
 800bc44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bc48:	e005      	b.n	800bc56 <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800bc4a:	8afa      	ldrh	r2, [r7, #22]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	3206      	adds	r2, #6
 800bc50:	2100      	movs	r1, #0
 800bc52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800bc56:	8afb      	ldrh	r3, [r7, #22]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	82fb      	strh	r3, [r7, #22]
 800bc5c:	8afb      	ldrh	r3, [r7, #22]
 800bc5e:	2b17      	cmp	r3, #23
 800bc60:	d9e8      	bls.n	800bc34 <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800bc62:	bf00      	nop
 800bc64:	bf00      	nop
 800bc66:	371c      	adds	r7, #28
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	4603      	mov	r3, r0
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]
 800bc7c:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800bc7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	da10      	bge.n	800bca8 <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800bc86:	7bfb      	ldrb	r3, [r7, #15]
 800bc88:	43db      	mvns	r3, r3
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	f003 0307 	and.w	r3, r3, #7
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	3308      	adds	r3, #8
 800bc94:	b2da      	uxtb	r2, r3
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
 800bc9c:	3b80      	subs	r3, #128	; 0x80
 800bc9e:	10db      	asrs	r3, r3, #3
 800bca0:	b2da      	uxtb	r2, r3
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800bca6:	e00c      	b.n	800bcc2 <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800bca8:	7bfb      	ldrb	r3, [r7, #15]
 800bcaa:	f003 0307 	and.w	r3, r3, #7
 800bcae:	b2da      	uxtb	r2, r3
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800bcb4:	7bfb      	ldrb	r3, [r7, #15]
 800bcb6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800bcba:	10db      	asrs	r3, r3, #3
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	701a      	strb	r2, [r3, #0]
}
 800bcc2:	bf00      	nop
 800bcc4:	3714      	adds	r7, #20
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr

0800bcce <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bcce:	b480      	push	{r7}
 800bcd0:	b085      	sub	sp, #20
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800bcda:	2300      	movs	r3, #0
 800bcdc:	73fb      	strb	r3, [r7, #15]
 800bcde:	e02c      	b.n	800bd3a <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800bce0:	7bfb      	ldrb	r3, [r7, #15]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d009      	beq.n	800bcfa <VL53LX_hist_find_min_max_bin_values+0x2c>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800bcec:	7bf9      	ldrb	r1, [r7, #15]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	3106      	adds	r1, #6
 800bcf2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	db07      	blt.n	800bd0a <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800bcfa:	7bfa      	ldrb	r2, [r7, #15]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	3206      	adds	r2, #6
 800bd00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800bd0a:	7bfb      	ldrb	r3, [r7, #15]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d009      	beq.n	800bd24 <VL53LX_hist_find_min_max_bin_values+0x56>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800bd16:	7bf9      	ldrb	r1, [r7, #15]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	3106      	adds	r1, #6
 800bd1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	dc07      	bgt.n	800bd34 <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800bd24:	7bfa      	ldrb	r2, [r7, #15]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	3206      	adds	r2, #6
 800bd2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
 800bd36:	3301      	adds	r3, #1
 800bd38:	73fb      	strb	r3, [r7, #15]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	7a9b      	ldrb	r3, [r3, #10]
 800bd3e:	7bfa      	ldrb	r2, [r7, #15]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d3cd      	bcc.n	800bce0 <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800bd44:	bf00      	nop
 800bd46:	bf00      	nop
 800bd48:	3714      	adds	r7, #20
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr

0800bd52 <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bd52:	b480      	push	{r7}
 800bd54:	b085      	sub	sp, #20
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	7adb      	ldrb	r3, [r3, #11]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d03a      	beq.n	800bddc <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800bd78:	2300      	movs	r3, #0
 800bd7a:	73fb      	strb	r3, [r7, #15]
 800bd7c:	e00e      	b.n	800bd9c <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bd84:	7bf9      	ldrb	r1, [r7, #15]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	3106      	adds	r1, #6
 800bd8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd8e:	441a      	add	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800bd96:	7bfb      	ldrb	r3, [r7, #15]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	73fb      	strb	r3, [r7, #15]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	7adb      	ldrb	r3, [r3, #11]
 800bda0:	7bfa      	ldrb	r2, [r7, #15]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d3eb      	bcc.n	800bd7e <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	7ad2      	ldrb	r2, [r2, #11]
 800bdbc:	0852      	lsrs	r2, r2, #1
 800bdbe:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800bdc0:	441a      	add	r2, r3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800bdd2:	fb93 f2f2 	sdiv	r2, r3, r2
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800bddc:	bf00      	nop
 800bdde:	3714      	adds	r7, #20
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800bde8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bdec:	b096      	sub	sp, #88	; 0x58
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6339      	str	r1, [r7, #48]	; 0x30
 800bdf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bdf4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	86fb      	strh	r3, [r7, #54]	; 0x36



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	uint32_t    pll_period_us       = 0;
 800be00:	2300      	movs	r3, #0
 800be02:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t    periods_elapsed     = 0;
 800be04:	2300      	movs	r3, #0
 800be06:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint32_t    tmp32               = 0;
 800be08:	2300      	movs	r3, #0
 800be0a:	657b      	str	r3, [r7, #84]	; 0x54
	uint64_t    tmp64               = 0;
 800be0c:	f04f 0200 	mov.w	r2, #0
 800be10:	f04f 0300 	mov.w	r3, #0
 800be14:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint32_t    amb_thres_delta     = 0;
 800be18:	2300      	movs	r3, #0
 800be1a:	63bb      	str	r3, [r7, #56]	; 0x38

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800be1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be1e:	2300      	movs	r3, #0
 800be20:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800be22:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be24:	2300      	movs	r3, #0
 800be26:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800be28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be2a:	2300      	movs	r3, #0
 800be2c:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800be2e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be30:	2300      	movs	r3, #0
 800be32:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800be34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be36:	2300      	movs	r3, #0
 800be38:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800be3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be3c:	2300      	movs	r3, #0
 800be3e:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800be40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be42:	2300      	movs	r3, #0
 800be44:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53LX_p_022            = 0;
 800be46:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be48:	2300      	movs	r3, #0
 800be4a:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800be4c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800be4e:	2300      	movs	r3, #0
 800be50:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800be52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be54:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f000 80ab 	beq.w	800bfb4 <VL53LX_f_001+0x1cc>
		(pbins->total_periods_elapsed      != 0)) {
 800be5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800be64:	2b00      	cmp	r3, #0
 800be66:	f000 80a5 	beq.w	800bfb4 <VL53LX_f_001+0x1cc>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800be6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800be70:	4618      	mov	r0, r3
 800be72:	f7ff fa30 	bl	800b2d6 <VL53LX_calc_pll_period_us>
 800be76:	6438      	str	r0, [r7, #64]	; 0x40



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800be78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be7e:	3301      	adds	r3, #1
 800be80:	63fb      	str	r3, [r7, #60]	; 0x3c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800be82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be88:	2110      	movs	r1, #16
 800be8a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800be8c:	f7ff fa3a 	bl	800b304 <VL53LX_duration_maths>
 800be90:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800be92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be94:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800be96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be98:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800be9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4619      	mov	r1, r3
 800bea2:	4610      	mov	r0, r2
 800bea4:	f7ff fc97 	bl	800b7d6 <VL53LX_rate_maths>
 800bea8:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800beaa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800beac:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800beae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb0:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800beb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb6:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800beba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	461a      	mov	r2, r3
 800bec0:	f7ff fa7a 	bl	800b3b8 <VL53LX_events_per_spad_maths>
 800bec4:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800bec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bec8:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800beca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800becc:	8adb      	ldrh	r3, [r3, #22]
 800bece:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bed0:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800bed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed4:	8adb      	ldrh	r3, [r3, #22]
 800bed6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bed8:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800beda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bedc:	695b      	ldr	r3, [r3, #20]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d068      	beq.n	800bfb4 <VL53LX_f_001+0x1cc>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800bee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee4:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800bee6:	b29a      	uxth	r2, r3
 800bee8:	f04f 0300 	mov.w	r3, #0
 800beec:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64  *= 1000;
 800bef0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800bef4:	4622      	mov	r2, r4
 800bef6:	462b      	mov	r3, r5
 800bef8:	f04f 0000 	mov.w	r0, #0
 800befc:	f04f 0100 	mov.w	r1, #0
 800bf00:	0159      	lsls	r1, r3, #5
 800bf02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bf06:	0150      	lsls	r0, r2, #5
 800bf08:	4602      	mov	r2, r0
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	1b12      	subs	r2, r2, r4
 800bf0e:	eb63 0305 	sbc.w	r3, r3, r5
 800bf12:	f04f 0000 	mov.w	r0, #0
 800bf16:	f04f 0100 	mov.w	r1, #0
 800bf1a:	0099      	lsls	r1, r3, #2
 800bf1c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800bf20:	0090      	lsls	r0, r2, #2
 800bf22:	4602      	mov	r2, r0
 800bf24:	460b      	mov	r3, r1
 800bf26:	1912      	adds	r2, r2, r4
 800bf28:	eb45 0303 	adc.w	r3, r5, r3
 800bf2c:	f04f 0000 	mov.w	r0, #0
 800bf30:	f04f 0100 	mov.w	r1, #0
 800bf34:	00d9      	lsls	r1, r3, #3
 800bf36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bf3a:	00d0      	lsls	r0, r2, #3
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	460b      	mov	r3, r1
 800bf40:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64 <<= (11+1);
 800bf44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bf48:	f04f 0000 	mov.w	r0, #0
 800bf4c:	f04f 0100 	mov.w	r1, #0
 800bf50:	0319      	lsls	r1, r3, #12
 800bf52:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800bf56:	0310      	lsls	r0, r2, #12
 800bf58:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
			tmp32 = pdata->VL53LX_p_033/2;
 800bf5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf5e:	695b      	ldr	r3, [r3, #20]
 800bf60:	085b      	lsrs	r3, r3, #1
 800bf62:	657b      	str	r3, [r7, #84]	; 0x54
			tmp64 += (uint64_t)tmp32;
 800bf64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf66:	4618      	mov	r0, r3
 800bf68:	f04f 0100 	mov.w	r1, #0
 800bf6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bf70:	eb12 0800 	adds.w	r8, r2, r0
 800bf74:	eb43 0901 	adc.w	r9, r3, r1
 800bf78:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
			tmp64 = do_division_u(tmp64,
 800bf7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf7e:	695b      	ldr	r3, [r3, #20]
 800bf80:	461a      	mov	r2, r3
 800bf82:	f04f 0300 	mov.w	r3, #0
 800bf86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bf8a:	f7f4 f9c9 	bl	8000320 <__aeabi_uldivmod>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	460b      	mov	r3, r1
 800bf92:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800bf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf98:	8adb      	ldrh	r3, [r3, #22]
 800bf9a:	b298      	uxth	r0, r3
 800bf9c:	f04f 0100 	mov.w	r1, #0
 800bfa0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bfa4:	428b      	cmp	r3, r1
 800bfa6:	bf08      	it	eq
 800bfa8:	4282      	cmpeq	r2, r0
 800bfaa:	d203      	bcs.n	800bfb4 <VL53LX_f_001+0x1cc>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800bfac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bfb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bfb2:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb6:	881b      	ldrh	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 8203 	beq.w	800c3c4 <VL53LX_f_001+0x5dc>
		(pbins->VL53LX_p_015        != 0) &&
 800bfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f000 81fd 	beq.w	800c3c4 <VL53LX_f_001+0x5dc>
		(pcal->ref_reflectance_pc          != 0) &&
 800bfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfcc:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	f000 81f8 	beq.w	800c3c4 <VL53LX_f_001+0x5dc>
		(pbins->total_periods_elapsed      != 0)) {
 800bfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	f000 81f2 	beq.w	800c3c4 <VL53LX_f_001+0x5dc>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800bfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe2:	885b      	ldrh	r3, [r3, #2]
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	f04f 0300 	mov.w	r3, #0
 800bfea:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64 *= (1000 * 256);
 800bfee:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800bff2:	4622      	mov	r2, r4
 800bff4:	462b      	mov	r3, r5
 800bff6:	f04f 0000 	mov.w	r0, #0
 800bffa:	f04f 0100 	mov.w	r1, #0
 800bffe:	0159      	lsls	r1, r3, #5
 800c000:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c004:	0150      	lsls	r0, r2, #5
 800c006:	4602      	mov	r2, r0
 800c008:	460b      	mov	r3, r1
 800c00a:	1b12      	subs	r2, r2, r4
 800c00c:	eb63 0305 	sbc.w	r3, r3, r5
 800c010:	f04f 0000 	mov.w	r0, #0
 800c014:	f04f 0100 	mov.w	r1, #0
 800c018:	0099      	lsls	r1, r3, #2
 800c01a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c01e:	0090      	lsls	r0, r2, #2
 800c020:	4602      	mov	r2, r0
 800c022:	460b      	mov	r3, r1
 800c024:	1912      	adds	r2, r2, r4
 800c026:	eb45 0303 	adc.w	r3, r5, r3
 800c02a:	f04f 0000 	mov.w	r0, #0
 800c02e:	f04f 0100 	mov.w	r1, #0
 800c032:	02d9      	lsls	r1, r3, #11
 800c034:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800c038:	02d0      	lsls	r0, r2, #11
 800c03a:	4602      	mov	r2, r0
 800c03c:	460b      	mov	r3, r1
 800c03e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp32  = pcal->ref__actual_effective_spads/2;
 800c042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c044:	881b      	ldrh	r3, [r3, #0]
 800c046:	085b      	lsrs	r3, r3, #1
 800c048:	b29b      	uxth	r3, r3
 800c04a:	657b      	str	r3, [r7, #84]	; 0x54
		tmp64 += (uint64_t)tmp32;
 800c04c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c04e:	4618      	mov	r0, r3
 800c050:	f04f 0100 	mov.w	r1, #0
 800c054:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c058:	eb12 0a00 	adds.w	sl, r2, r0
 800c05c:	eb43 0b01 	adc.w	fp, r3, r1
 800c060:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800c064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c066:	881b      	ldrh	r3, [r3, #0]
 800c068:	b29a      	uxth	r2, r3
 800c06a:	f04f 0300 	mov.w	r3, #0
 800c06e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c072:	f7f4 f955 	bl	8000320 <__aeabi_uldivmod>
 800c076:	4602      	mov	r2, r0
 800c078:	460b      	mov	r3, r1
 800c07a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800c07e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c082:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800c084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c086:	691b      	ldr	r3, [r3, #16]
 800c088:	011a      	lsls	r2, r3, #4
 800c08a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c08c:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c08e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	461a      	mov	r2, r3
 800c094:	f04f 0300 	mov.w	r3, #0
 800c098:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800c09c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c09e:	695b      	ldr	r3, [r3, #20]
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	f04f 0300 	mov.w	r3, #0
 800c0a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c0a8:	fb02 f001 	mul.w	r0, r2, r1
 800c0ac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c0ae:	fb03 f101 	mul.w	r1, r3, r1
 800c0b2:	4401      	add	r1, r0
 800c0b4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c0b6:	fba0 2302 	umull	r2, r3, r0, r2
 800c0ba:	4419      	add	r1, r3
 800c0bc:	460b      	mov	r3, r1
 800c0be:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c0c2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c0c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0c8:	8b5b      	ldrh	r3, [r3, #26]
 800c0ca:	b29a      	uxth	r2, r3
 800c0cc:	f04f 0300 	mov.w	r3, #0
 800c0d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c0d2:	fb02 f001 	mul.w	r0, r2, r1
 800c0d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c0d8:	fb03 f101 	mul.w	r1, r3, r1
 800c0dc:	4401      	add	r1, r0
 800c0de:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c0e0:	fba0 2302 	umull	r2, r3, r0, r2
 800c0e4:	4419      	add	r1, r3
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c0ec:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800c0f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c0f4:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800c0f8:	6239      	str	r1, [r7, #32]
 800c0fa:	f143 0300 	adc.w	r3, r3, #0
 800c0fe:	627b      	str	r3, [r7, #36]	; 0x24
 800c100:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c104:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800c108:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c10c:	f04f 0200 	mov.w	r2, #0
 800c110:	f04f 0300 	mov.w	r3, #0
 800c114:	0cc2      	lsrs	r2, r0, #19
 800c116:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800c11a:	0ccb      	lsrs	r3, r1, #19
 800c11c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  +=  500;
 800c120:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c124:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800c128:	61b9      	str	r1, [r7, #24]
 800c12a:	f143 0300 	adc.w	r3, r3, #0
 800c12e:	61fb      	str	r3, [r7, #28]
 800c130:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c134:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64   = do_division_u(tmp64, 1000);
 800c138:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c13c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c140:	f04f 0300 	mov.w	r3, #0
 800c144:	f7f4 f8ec 	bl	8000320 <__aeabi_uldivmod>
 800c148:	4602      	mov	r2, r0
 800c14a:	460b      	mov	r3, r1
 800c14c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800c150:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c154:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c158:	f04f 0100 	mov.w	r1, #0
 800c15c:	4299      	cmp	r1, r3
 800c15e:	bf08      	it	eq
 800c160:	4290      	cmpeq	r0, r2
 800c162:	d205      	bcs.n	800c170 <VL53LX_f_001+0x388>
			tmp64 = 0x00FFFFFF;
 800c164:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c168:	f04f 0300 	mov.w	r3, #0
 800c16c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800c170:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c172:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c174:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c176:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	461a      	mov	r2, r3
 800c17c:	f04f 0300 	mov.w	r3, #0
 800c180:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800c184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c186:	691b      	ldr	r3, [r3, #16]
 800c188:	461a      	mov	r2, r3
 800c18a:	f04f 0300 	mov.w	r3, #0
 800c18e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c190:	fb02 f001 	mul.w	r0, r2, r1
 800c194:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c196:	fb03 f101 	mul.w	r1, r3, r1
 800c19a:	4401      	add	r1, r0
 800c19c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c19e:	fba0 2302 	umull	r2, r3, r0, r2
 800c1a2:	4419      	add	r1, r3
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c1aa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c1ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1b0:	8b5b      	ldrh	r3, [r3, #26]
 800c1b2:	b29a      	uxth	r2, r3
 800c1b4:	f04f 0300 	mov.w	r3, #0
 800c1b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c1ba:	fb02 f001 	mul.w	r0, r2, r1
 800c1be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c1c0:	fb03 f101 	mul.w	r1, r3, r1
 800c1c4:	4401      	add	r1, r0
 800c1c6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c1c8:	fba0 2302 	umull	r2, r3, r0, r2
 800c1cc:	4419      	add	r1, r3
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c1d4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800c1d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c1dc:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800c1e0:	6139      	str	r1, [r7, #16]
 800c1e2:	f143 0300 	adc.w	r3, r3, #0
 800c1e6:	617b      	str	r3, [r7, #20]
 800c1e8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c1ec:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800c1f0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c1f4:	f04f 0200 	mov.w	r2, #0
 800c1f8:	f04f 0300 	mov.w	r3, #0
 800c1fc:	0cc2      	lsrs	r2, r0, #19
 800c1fe:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800c202:	0ccb      	lsrs	r3, r1, #19
 800c204:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48



		tmp64  *= ((uint64_t)target_reflectance *
 800c208:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 800c20a:	f04f 0100 	mov.w	r1, #0
				   (uint64_t)pcal->coverglass_transmission);
 800c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c210:	891b      	ldrh	r3, [r3, #8]
 800c212:	b29a      	uxth	r2, r3
 800c214:	f04f 0300 	mov.w	r3, #0
		tmp64  *= ((uint64_t)target_reflectance *
 800c218:	fb02 f501 	mul.w	r5, r2, r1
 800c21c:	fb00 f403 	mul.w	r4, r0, r3
 800c220:	442c      	add	r4, r5
 800c222:	fba0 2302 	umull	r2, r3, r0, r2
 800c226:	18e1      	adds	r1, r4, r3
 800c228:	460b      	mov	r3, r1
 800c22a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c22c:	fb02 f001 	mul.w	r0, r2, r1
 800c230:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c232:	fb03 f101 	mul.w	r1, r3, r1
 800c236:	4401      	add	r1, r0
 800c238:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c23a:	fba0 2302 	umull	r2, r3, r0, r2
 800c23e:	4419      	add	r1, r3
 800c240:	460b      	mov	r3, r1
 800c242:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c246:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800c24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24c:	88db      	ldrh	r3, [r3, #6]
 800c24e:	b298      	uxth	r0, r3
 800c250:	f04f 0100 	mov.w	r1, #0
 800c254:	f04f 0200 	mov.w	r2, #0
 800c258:	f04f 0300 	mov.w	r3, #0
 800c25c:	01cb      	lsls	r3, r1, #7
 800c25e:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 800c262:	01c2      	lsls	r2, r0, #7
 800c264:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c268:	1884      	adds	r4, r0, r2
 800c26a:	60bc      	str	r4, [r7, #8]
 800c26c:	eb41 0303 	adc.w	r3, r1, r3
 800c270:	60fb      	str	r3, [r7, #12]
 800c272:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c276:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800c27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27c:	88db      	ldrh	r3, [r3, #6]
 800c27e:	b298      	uxth	r0, r3
 800c280:	f04f 0100 	mov.w	r1, #0
 800c284:	f04f 0200 	mov.w	r2, #0
 800c288:	f04f 0300 	mov.w	r3, #0
 800c28c:	020b      	lsls	r3, r1, #8
 800c28e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c292:	0202      	lsls	r2, r0, #8
 800c294:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c298:	f7f4 f842 	bl	8000320 <__aeabi_uldivmod>
 800c29c:	4602      	mov	r2, r0
 800c29e:	460b      	mov	r3, r1
 800c2a0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800c2a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c2a8:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800c2ac:	6039      	str	r1, [r7, #0]
 800c2ae:	f143 0300 	adc.w	r3, r3, #0
 800c2b2:	607b      	str	r3, [r7, #4]
 800c2b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c2b8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64, 1000);
 800c2bc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c2c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c2c4:	f04f 0300 	mov.w	r3, #0
 800c2c8:	f7f4 f82a 	bl	8000320 <__aeabi_uldivmod>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800c2d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c2d8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c2dc:	f04f 0100 	mov.w	r1, #0
 800c2e0:	4299      	cmp	r1, r3
 800c2e2:	bf08      	it	eq
 800c2e4:	4290      	cmpeq	r0, r2
 800c2e6:	d205      	bcs.n	800c2f4 <VL53LX_f_001+0x50c>
			tmp64 = 0x00FFFFFF;
 800c2e8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c2ec:	f04f 0300 	mov.w	r3, #0
 800c2f0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800c2f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2f8:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800c2fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2fc:	69db      	ldr	r3, [r3, #28]
 800c2fe:	021b      	lsls	r3, r3, #8
 800c300:	4618      	mov	r0, r3
 800c302:	f7ff f8e2 	bl	800b4ca <VL53LX_isqrt>
 800c306:	6578      	str	r0, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800c308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30a:	785b      	ldrb	r3, [r3, #1]
 800c30c:	461a      	mov	r2, r3
 800c30e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c310:	fb02 f303 	mul.w	r3, r2, r3
 800c314:	657b      	str	r3, [r7, #84]	; 0x54



		if (pdata->VL53LX_p_028 <
 800c316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c318:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800c31a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c31c:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800c31e:	4293      	cmp	r3, r2
 800c320:	d20f      	bcs.n	800c342 <VL53LX_f_001+0x55a>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800c322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800c328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c32a:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800c32c:	1ad3      	subs	r3, r2, r3
 800c32e:	63bb      	str	r3, [r7, #56]	; 0x38


			amb_thres_delta <<= 8;
 800c330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c332:	021b      	lsls	r3, r3, #8
 800c334:	63bb      	str	r3, [r7, #56]	; 0x38

			if (tmp32 < amb_thres_delta)
 800c336:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d201      	bcs.n	800c342 <VL53LX_f_001+0x55a>
				tmp32 = amb_thres_delta;
 800c33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c340:	657b      	str	r3, [r7, #84]	; 0x54
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800c342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c344:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800c346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c348:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c34a:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34e:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c350:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c352:	f000 f83e 	bl	800c3d2 <VL53LX_f_002>
 800c356:	4603      	mov	r3, r0
 800c358:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800c35a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c35c:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800c35e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c360:	6a1b      	ldr	r3, [r3, #32]
 800c362:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800c364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c366:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800c36a:	461a      	mov	r2, r3
 800c36c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c36e:	fb02 f303 	mul.w	r3, r2, r3
 800c372:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 += (1 << 3);
 800c374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c376:	3308      	adds	r3, #8
 800c378:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 /= (1 << 4);
 800c37a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c37c:	091b      	lsrs	r3, r3, #4
 800c37e:	657b      	str	r3, [r7, #84]	; 0x54

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800c380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c382:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800c384:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800c386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c388:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c38a:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38e:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c390:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c392:	f000 f81e 	bl	800c3d2 <VL53LX_f_002>
 800c396:	4603      	mov	r3, r0
 800c398:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800c39a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c39c:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800c39e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3a0:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800c3a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3a6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	da05      	bge.n	800c3ba <VL53LX_f_001+0x5d2>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800c3ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3b0:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800c3b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3b6:	801a      	strh	r2, [r3, #0]
 800c3b8:	e004      	b.n	800c3c4 <VL53LX_f_001+0x5dc>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800c3ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3bc:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800c3c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3c2:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800c3c4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47

}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3758      	adds	r7, #88	; 0x58
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c3d2 <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b086      	sub	sp, #24
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	60f8      	str	r0, [r7, #12]
 800c3da:	60b9      	str	r1, [r7, #8]
 800c3dc:	607a      	str	r2, [r7, #4]
 800c3de:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	fb03 f303 	mul.w	r3, r3, r3
 800c3f4:	693a      	ldr	r2, [r7, #16]
 800c3f6:	4413      	add	r3, r2
 800c3f8:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800c3fa:	6938      	ldr	r0, [r7, #16]
 800c3fc:	f7ff f865 	bl	800b4ca <VL53LX_isqrt>
 800c400:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800c402:	693a      	ldr	r2, [r7, #16]
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	4413      	add	r3, r2
 800c408:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	011b      	lsls	r3, r3, #4
 800c40e:	4618      	mov	r0, r3
 800c410:	f7ff f85b 	bl	800b4ca <VL53LX_isqrt>
 800c414:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	fb02 f303 	mul.w	r3, r2, r3
 800c41e:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d009      	beq.n	800c43a <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800c426:	697a      	ldr	r2, [r7, #20]
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	4413      	add	r3, r2
 800c42c:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	005b      	lsls	r3, r3, #1
 800c432:	697a      	ldr	r2, [r7, #20]
 800c434:	fbb2 f3f3 	udiv	r3, r2, r3
 800c438:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800c43a:	697b      	ldr	r3, [r7, #20]

}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3718      	adds	r7, #24
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800c44c:	2300      	movs	r3, #0
 800c44e:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2218      	movs	r2, #24
 800c454:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2200      	movs	r2, #0
 800c45a:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	73fb      	strb	r3, [r7, #15]
 800c47a:	e01f      	b.n	800c4bc <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800c47c:	7bfb      	ldrb	r3, [r7, #15]
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	4413      	add	r3, r2
 800c482:	2200      	movs	r2, #0
 800c484:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800c486:	7bfb      	ldrb	r3, [r7, #15]
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	4413      	add	r3, r2
 800c48c:	2200      	movs	r2, #0
 800c48e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800c492:	7bfb      	ldrb	r3, [r7, #15]
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	4413      	add	r3, r2
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800c49e:	7bfa      	ldrb	r2, [r7, #15]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	322e      	adds	r2, #46	; 0x2e
 800c4a4:	2100      	movs	r1, #0
 800c4a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800c4aa:	7bfa      	ldrb	r2, [r7, #15]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	3246      	adds	r2, #70	; 0x46
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c4b6:	7bfb      	ldrb	r3, [r7, #15]
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	73fb      	strb	r3, [r7, #15]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	785b      	ldrb	r3, [r3, #1]
 800c4c0:	7bfa      	ldrb	r2, [r7, #15]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d3da      	bcc.n	800c47c <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2208      	movs	r2, #8
 800c4d2:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53LX_p_046             = 0;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	2118      	movs	r1, #24
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	f7ff fb18 	bl	800bb1e <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	2118      	movs	r1, #24
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	f7ff fb10 	bl	800bb1e <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800c504:	461a      	mov	r2, r3
 800c506:	2118      	movs	r1, #24
 800c508:	2000      	movs	r0, #0
 800c50a:	f7ff fb08 	bl	800bb1e <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800c514:	461a      	mov	r2, r3
 800c516:	2118      	movs	r1, #24
 800c518:	2000      	movs	r0, #0
 800c51a:	f7ff fb00 	bl	800bb1e <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800c524:	461a      	mov	r2, r3
 800c526:	2118      	movs	r1, #24
 800c528:	2000      	movs	r0, #0
 800c52a:	f7ff faf8 	bl	800bb1e <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800c52e:	bf00      	nop
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c536:	b5b0      	push	{r4, r5, r7, lr}
 800c538:	b08c      	sub	sp, #48	; 0x30
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
 800c540:	461a      	mov	r2, r3
 800c542:	4603      	mov	r3, r0
 800c544:	81fb      	strh	r3, [r7, #14]
 800c546:	4613      	mov	r3, r2
 800c548:	737b      	strb	r3, [r7, #13]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c54a:	2300      	movs	r3, #0
 800c54c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  lb            = 0;
 800c550:	2300      	movs	r3, #0
 800c552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t  VL53LX_p_001            = 0;
 800c556:	2300      	movs	r3, #0
 800c558:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int64_t  tmp          = 0;
 800c55c:	f04f 0200 	mov.w	r2, #0
 800c560:	f04f 0300 	mov.w	r3, #0
 800c564:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int32_t  amb_events   = 0;
 800c568:	2300      	movs	r3, #0
 800c56a:	617b      	str	r3, [r7, #20]
	int32_t  VL53LX_p_018       = 0;
 800c56c:	2300      	movs	r3, #0
 800c56e:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  samples      = 0;
 800c570:	2300      	movs	r3, #0
 800c572:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800c574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c576:	7a5a      	ldrb	r2, [r3, #9]
 800c578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c57a:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800c57c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c57e:	7a1a      	ldrb	r2, [r3, #8]
 800c580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c582:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800c584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c586:	7a9a      	ldrb	r2, [r3, #10]
 800c588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c58a:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800c58c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c58e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c594:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800c596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c598:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7ff fa6d 	bl	800ba7c <VL53LX_decode_vcsel_period>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800c5a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5a8:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800c5aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c5b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800c5ba:	89fa      	ldrh	r2, [r7, #14]
 800c5bc:	f04f 0300 	mov.w	r3, #0
 800c5c0:	69f9      	ldr	r1, [r7, #28]
 800c5c2:	fb02 f001 	mul.w	r0, r2, r1
 800c5c6:	69b9      	ldr	r1, [r7, #24]
 800c5c8:	fb03 f101 	mul.w	r1, r3, r1
 800c5cc:	4401      	add	r1, r0
 800c5ce:	69b8      	ldr	r0, [r7, #24]
 800c5d0:	fba0 2302 	umull	r2, r3, r0, r2
 800c5d4:	4419      	add	r1, r3
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800c5dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp += 2048;
 800c5e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c5e4:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800c5e8:	f143 0500 	adc.w	r5, r3, #0
 800c5ec:	e9c7 4506 	strd	r4, r5, [r7, #24]
	tmp = do_division_s(tmp, 4096);
 800c5f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c5f4:	2a00      	cmp	r2, #0
 800c5f6:	f173 0100 	sbcs.w	r1, r3, #0
 800c5fa:	da06      	bge.n	800c60a <VL53LX_f_006+0xd4>
 800c5fc:	f640 70ff 	movw	r0, #4095	; 0xfff
 800c600:	f04f 0100 	mov.w	r1, #0
 800c604:	1812      	adds	r2, r2, r0
 800c606:	eb41 0303 	adc.w	r3, r1, r3
 800c60a:	f04f 0000 	mov.w	r0, #0
 800c60e:	f04f 0100 	mov.w	r1, #0
 800c612:	0b10      	lsrs	r0, r2, #12
 800c614:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c618:	1319      	asrs	r1, r3, #12
 800c61a:	e9c7 0106 	strd	r0, r1, [r7, #24]
	amb_events = (int32_t)tmp;
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	617b      	str	r3, [r7, #20]



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800c622:	2300      	movs	r3, #0
 800c624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c628:	e062      	b.n	800c6f0 <VL53LX_f_006+0x1ba>

		VL53LX_p_001 = lb >> 2;
 800c62a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c62e:	089b      	lsrs	r3, r3, #2
 800c630:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800c634:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c638:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c63a:	4413      	add	r3, r2
 800c63c:	7c9b      	ldrb	r3, [r3, #18]
 800c63e:	613b      	str	r3, [r7, #16]

		if (samples > 0) {
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	2b00      	cmp	r3, #0
 800c644:	dd4f      	ble.n	800c6e6 <VL53LX_f_006+0x1b0>

			if (lb < pxtalk->VL53LX_p_021 &&
 800c646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c648:	7a9b      	ldrb	r3, [r3, #10]
 800c64a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c64e:	429a      	cmp	r2, r3
 800c650:	d20f      	bcs.n	800c672 <VL53LX_f_006+0x13c>
 800c652:	7b7b      	ldrb	r3, [r7, #13]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d00c      	beq.n	800c672 <VL53LX_f_006+0x13c>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800c658:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c65c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c65e:	3206      	adds	r2, #6
 800c660:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	441a      	add	r2, r3
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	fb02 f303 	mul.w	r3, r2, r3
 800c66e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c670:	e004      	b.n	800c67c <VL53LX_f_006+0x146>
			else
				VL53LX_p_018 = samples *  amb_events;
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	697a      	ldr	r2, [r7, #20]
 800c676:	fb02 f303 	mul.w	r3, r2, r3
 800c67a:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800c67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67e:	4618      	mov	r0, r3
 800c680:	f7fe ff23 	bl	800b4ca <VL53LX_isqrt>
 800c684:	4603      	mov	r3, r0
 800c686:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018 += (samples/2);
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	0fda      	lsrs	r2, r3, #31
 800c68c:	4413      	add	r3, r2
 800c68e:	105b      	asrs	r3, r3, #1
 800c690:	461a      	mov	r2, r3
 800c692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c694:	4413      	add	r3, r2
 800c696:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= samples;
 800c698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	fb92 f3f3 	sdiv	r3, r2, r3
 800c6a0:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 *= ambient_threshold_sigma;
 800c6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a4:	68ba      	ldr	r2, [r7, #8]
 800c6a6:	fb02 f303 	mul.w	r3, r2, r3
 800c6aa:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += 8;
 800c6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= 16;
 800c6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	da00      	bge.n	800c6ba <VL53LX_f_006+0x184>
 800c6b8:	330f      	adds	r3, #15
 800c6ba:	111b      	asrs	r3, r3, #4
 800c6bc:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += amb_events;
 800c6be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	62bb      	str	r3, [r7, #40]	; 0x28

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800c6c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	da01      	bge.n	800c6d2 <VL53LX_f_006+0x19c>
				VL53LX_p_018 = min_ambient_threshold_events;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	62bb      	str	r3, [r7, #40]	; 0x28

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800c6d2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c6d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6d8:	3216      	adds	r2, #22
 800c6da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800c6e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6e4:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800c6e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c6f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6f2:	7a9b      	ldrb	r3, [r3, #10]
 800c6f4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d396      	bcc.n	800c62a <VL53LX_f_006+0xf4>

	}



	palgo->VL53LX_p_039 = 0;
 800c6fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6fe:	2200      	movs	r2, #0
 800c700:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800c702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c704:	7a1b      	ldrb	r3, [r3, #8]
 800c706:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c70a:	e033      	b.n	800c774 <VL53LX_f_006+0x23e>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800c70c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c712:	3206      	adds	r2, #6
 800c714:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c718:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800c71c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c71e:	3116      	adds	r1, #22
 800c720:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c724:	429a      	cmp	r2, r3
 800c726:	dd13      	ble.n	800c750 <VL53LX_f_006+0x21a>
			palgo->VL53LX_p_040[lb]      = 1;
 800c728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c72c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c72e:	4413      	add	r3, r2
 800c730:	2201      	movs	r2, #1
 800c732:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800c734:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c738:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c73a:	4413      	add	r3, r2
 800c73c:	2201      	movs	r2, #1
 800c73e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53LX_p_039++;
 800c742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c744:	791b      	ldrb	r3, [r3, #4]
 800c746:	3301      	adds	r3, #1
 800c748:	b2da      	uxtb	r2, r3
 800c74a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c74c:	711a      	strb	r2, [r3, #4]
 800c74e:	e00c      	b.n	800c76a <VL53LX_f_006+0x234>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800c750:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c756:	4413      	add	r3, r2
 800c758:	2200      	movs	r2, #0
 800c75a:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800c75c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c760:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c762:	4413      	add	r3, r2
 800c764:	2200      	movs	r2, #0
 800c766:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800c76a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c76e:	3301      	adds	r3, #1
 800c770:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c776:	7a9b      	ldrb	r3, [r3, #10]
 800c778:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d3c5      	bcc.n	800c70c <VL53LX_f_006+0x1d6>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800c780:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800c784:	4618      	mov	r0, r3
 800c786:	3730      	adds	r7, #48	; 0x30
 800c788:	46bd      	mov	sp, r7
 800c78a:	bdb0      	pop	{r4, r5, r7, pc}

0800c78c <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c794:	2300      	movs	r3, #0
 800c796:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800c798:	2300      	movs	r3, #0
 800c79a:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800c79c:	2300      	movs	r3, #0
 800c79e:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	73fb      	strb	r3, [r7, #15]
 800c7b0:	e02d      	b.n	800c80e <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800c7b2:	7bfb      	ldrb	r3, [r7, #15]
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	78d2      	ldrb	r2, [r2, #3]
 800c7ba:	fb93 f1f2 	sdiv	r1, r3, r2
 800c7be:	fb02 f201 	mul.w	r2, r2, r1
 800c7c2:	1a9b      	subs	r3, r3, r2
 800c7c4:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	789b      	ldrb	r3, [r3, #2]
 800c7ca:	7bfa      	ldrb	r2, [r7, #15]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d21b      	bcs.n	800c808 <VL53LX_f_007+0x7c>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	789b      	ldrb	r3, [r3, #2]
 800c7d4:	7b3a      	ldrb	r2, [r7, #12]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d216      	bcs.n	800c808 <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800c7da:	7bfb      	ldrb	r3, [r7, #15]
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	4413      	add	r3, r2
 800c7e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d10f      	bne.n	800c808 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800c7e8:	7b3b      	ldrb	r3, [r7, #12]
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d108      	bne.n	800c808 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800c7f6:	7bbb      	ldrb	r3, [r7, #14]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d105      	bne.n	800c808 <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	7bfa      	ldrb	r2, [r7, #15]
 800c800:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800c804:	2301      	movs	r3, #1
 800c806:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800c808:	7bfb      	ldrb	r3, [r7, #15]
 800c80a:	3301      	adds	r3, #1
 800c80c:	73fb      	strb	r3, [r7, #15]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	78db      	ldrb	r3, [r3, #3]
 800c812:	7bfa      	ldrb	r2, [r7, #15]
 800c814:	429a      	cmp	r2, r3
 800c816:	d3cc      	bcc.n	800c7b2 <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800c818:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3714      	adds	r7, #20
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c828:	b480      	push	{r7}
 800c82a:	b085      	sub	sp, #20
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c830:	2300      	movs	r3, #0
 800c832:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800c834:	2300      	movs	r3, #0
 800c836:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800c838:	2300      	movs	r3, #0
 800c83a:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800c83c:	2300      	movs	r3, #0
 800c83e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800c846:	73fb      	strb	r3, [r7, #15]
 800c848:	e05a      	b.n	800c900 <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	78da      	ldrb	r2, [r3, #3]
 800c84e:	7bfb      	ldrb	r3, [r7, #15]
 800c850:	fbb3 f1f2 	udiv	r1, r3, r2
 800c854:	fb02 f201 	mul.w	r2, r2, r1
 800c858:	1a9b      	subs	r3, r3, r2
 800c85a:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800c85c:	7bfb      	ldrb	r3, [r7, #15]
 800c85e:	3301      	adds	r3, #1
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	78d2      	ldrb	r2, [r2, #3]
 800c864:	fb93 f1f2 	sdiv	r1, r3, r2
 800c868:	fb02 f201 	mul.w	r2, r2, r1
 800c86c:	1a9b      	subs	r3, r3, r2
 800c86e:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	789b      	ldrb	r3, [r3, #2]
 800c874:	7b7a      	ldrb	r2, [r7, #13]
 800c876:	429a      	cmp	r2, r3
 800c878:	d23f      	bcs.n	800c8fa <VL53LX_f_008+0xd2>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	789b      	ldrb	r3, [r3, #2]
 800c87e:	7b3a      	ldrb	r2, [r7, #12]
 800c880:	429a      	cmp	r2, r3
 800c882:	d23a      	bcs.n	800c8fa <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800c884:	7b7b      	ldrb	r3, [r7, #13]
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	4413      	add	r3, r2
 800c88a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d10e      	bne.n	800c8b0 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800c892:	7b3b      	ldrb	r3, [r7, #12]
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	4413      	add	r3, r2
 800c898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d107      	bne.n	800c8b0 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	b2da      	uxtb	r2, r3
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d905      	bls.n	800c8cc <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800c8cc:	7b7b      	ldrb	r3, [r7, #13]
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d009      	beq.n	800c8ee <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800c8da:	7b7b      	ldrb	r3, [r7, #13]
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	460a      	mov	r2, r1
 800c8e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8ec:	e005      	b.n	800c8fa <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800c8ee:	7b7b      	ldrb	r3, [r7, #13]
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800c8fa:	7bfb      	ldrb	r3, [r7, #15]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800c900:	7bfa      	ldrb	r2, [r7, #15]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800c908:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800c90e:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800c910:	429a      	cmp	r2, r3
 800c912:	db9a      	blt.n	800c84a <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800c914:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800c918:	4618      	mov	r0, r3
 800c91a:	3714      	adds	r7, #20
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c924:	b480      	push	{r7}
 800c926:	b087      	sub	sp, #28
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c92c:	2300      	movs	r3, #0
 800c92e:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800c930:	2300      	movs	r3, #0
 800c932:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800c934:	2300      	movs	r3, #0
 800c936:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800c938:	2300      	movs	r3, #0
 800c93a:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800c93c:	2300      	movs	r3, #0
 800c93e:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800c940:	2300      	movs	r3, #0
 800c942:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	78db      	ldrb	r3, [r3, #3]
 800c948:	3b01      	subs	r3, #1
 800c94a:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800c94c:	7cbb      	ldrb	r3, [r7, #18]
 800c94e:	085b      	lsrs	r3, r3, #1
 800c950:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800c958:	75fb      	strb	r3, [r7, #23]
 800c95a:	e0a2      	b.n	800caa2 <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	78da      	ldrb	r2, [r3, #3]
 800c960:	7dfb      	ldrb	r3, [r7, #23]
 800c962:	fbb3 f1f2 	udiv	r1, r3, r2
 800c966:	fb02 f201 	mul.w	r2, r2, r1
 800c96a:	1a9b      	subs	r3, r3, r2
 800c96c:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800c96e:	7dfb      	ldrb	r3, [r7, #23]
 800c970:	3301      	adds	r3, #1
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	78d2      	ldrb	r2, [r2, #3]
 800c976:	fb93 f1f2 	sdiv	r1, r3, r2
 800c97a:	fb02 f201 	mul.w	r2, r2, r1
 800c97e:	1a9b      	subs	r3, r3, r2
 800c980:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	789b      	ldrb	r3, [r3, #2]
 800c986:	7d7a      	ldrb	r2, [r7, #21]
 800c988:	429a      	cmp	r2, r3
 800c98a:	f080 8087 	bcs.w	800ca9c <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800c992:	7d3a      	ldrb	r2, [r7, #20]
 800c994:	429a      	cmp	r2, r3
 800c996:	f080 8081 	bcs.w	800ca9c <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800c99a:	7d7b      	ldrb	r3, [r7, #21]
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	4413      	add	r3, r2
 800c9a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d12f      	bne.n	800ca08 <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800c9a8:	7d3b      	ldrb	r3, [r7, #20]
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d028      	beq.n	800ca08 <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800c9b6:	7d3b      	ldrb	r3, [r7, #20]
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c9c0:	3b01      	subs	r3, #1
 800c9c2:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800c9ca:	7cfa      	ldrb	r2, [r7, #19]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d21b      	bcs.n	800ca08 <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800c9d0:	7cfa      	ldrb	r2, [r7, #19]
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	00db      	lsls	r3, r3, #3
 800c9d6:	4413      	add	r3, r2
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	4413      	add	r3, r2
 800c9e2:	3304      	adds	r3, #4
 800c9e4:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	7dfa      	ldrb	r2, [r7, #23]
 800c9ea:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800c9ec:	7dfb      	ldrb	r3, [r7, #23]
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	b2da      	uxtb	r2, r3
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	22ff      	movs	r2, #255	; 0xff
 800c9fa:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2200      	movs	r2, #0
 800ca06:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800ca08:	7d7b      	ldrb	r3, [r7, #21]
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d042      	beq.n	800ca9c <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800ca16:	7d3b      	ldrb	r3, [r7, #20]
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d13b      	bne.n	800ca9c <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800ca24:	7d7b      	ldrb	r3, [r7, #21]
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	4413      	add	r3, r2
 800ca2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca2e:	3b01      	subs	r3, #1
 800ca30:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800ca38:	7cfa      	ldrb	r2, [r7, #19]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d22e      	bcs.n	800ca9c <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800ca3e:	7cfa      	ldrb	r2, [r7, #19]
 800ca40:	4613      	mov	r3, r2
 800ca42:	00db      	lsls	r3, r3, #3
 800ca44:	4413      	add	r3, r2
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	4413      	add	r3, r2
 800ca50:	3304      	adds	r3, #4
 800ca52:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	7dfa      	ldrb	r2, [r7, #23]
 800ca58:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800ca5a:	7dfb      	ldrb	r3, [r7, #23]
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	b2da      	uxtb	r2, r3
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800ca6c:	1ad3      	subs	r3, r2, r3
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	3301      	adds	r3, #1
 800ca72:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800ca80:	1ad3      	subs	r3, r2, r3
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	3301      	adds	r3, #1
 800ca86:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	799b      	ldrb	r3, [r3, #6]
 800ca90:	7cba      	ldrb	r2, [r7, #18]
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d202      	bcs.n	800ca9c <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	7cba      	ldrb	r2, [r7, #18]
 800ca9a:	719a      	strb	r2, [r3, #6]
		blb++) {
 800ca9c:	7dfb      	ldrb	r3, [r7, #23]
 800ca9e:	3301      	adds	r3, #1
 800caa0:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800caa2:	7dfa      	ldrb	r2, [r7, #23]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800caaa:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800cab0:	440b      	add	r3, r1
	for (blb = palgo->VL53LX_p_044;
 800cab2:	429a      	cmp	r2, r3
 800cab4:	f6ff af52 	blt.w	800c95c <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cab8:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800cabc:	4618      	mov	r0, r3
 800cabe:	371c      	adds	r7, #28
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b090      	sub	sp, #64	; 0x40
 800cacc:	af00      	add	r7, sp, #0
 800cace:	4603      	mov	r3, r0
 800cad0:	6039      	str	r1, [r7, #0]
 800cad2:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cad4:	2300      	movs	r3, #0
 800cad6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800cada:	f107 030c 	add.w	r3, r7, #12
 800cade:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800cae0:	2300      	movs	r3, #0
 800cae2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 800cae6:	2301      	movs	r3, #1
 800cae8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d965      	bls.n	800cbc2 <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800caf6:	e05f      	b.n	800cbb8 <VL53LX_f_016+0xf0>

		swapped = 0;
 800caf8:	2300      	movs	r3, #0
 800cafa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800cafe:	2301      	movs	r3, #1
 800cb00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cb04:	e051      	b.n	800cbaa <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800cb06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cb0a:	1e5a      	subs	r2, r3, #1
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	00db      	lsls	r3, r3, #3
 800cb10:	4413      	add	r3, r2
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cb18:	683a      	ldr	r2, [r7, #0]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	3304      	adds	r3, #4
 800cb1e:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800cb20:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800cb24:	4613      	mov	r3, r2
 800cb26:	00db      	lsls	r3, r3, #3
 800cb28:	4413      	add	r3, r2
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cb30:	683a      	ldr	r2, [r7, #0]
 800cb32:	4413      	add	r3, r2
 800cb34:	3304      	adds	r3, #4
 800cb36:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 800cb38:	79fb      	ldrb	r3, [r7, #7]
 800cb3a:	2b02      	cmp	r3, #2
 800cb3c:	d118      	bne.n	800cb70 <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800cb3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb40:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800cb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb44:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800cb46:	429a      	cmp	r2, r3
 800cb48:	da2a      	bge.n	800cba0 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800cb4a:	2224      	movs	r2, #36	; 0x24
 800cb4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb4e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb50:	f007 fac2 	bl	80140d8 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800cb54:	2224      	movs	r2, #36	; 0x24
 800cb56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cb58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb5a:	f007 fabd 	bl	80140d8 <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800cb5e:	2224      	movs	r2, #36	; 0x24
 800cb60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cb64:	f007 fab8 	bl	80140d8 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800cb6e:	e017      	b.n	800cba0 <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800cb70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb72:	699a      	ldr	r2, [r3, #24]
 800cb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb76:	699b      	ldr	r3, [r3, #24]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d911      	bls.n	800cba0 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800cb7c:	2224      	movs	r2, #36	; 0x24
 800cb7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb82:	f007 faa9 	bl	80140d8 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800cb86:	2224      	movs	r2, #36	; 0x24
 800cb88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cb8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb8c:	f007 faa4 	bl	80140d8 <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800cb90:	2224      	movs	r2, #36	; 0x24
 800cb92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cb96:	f007 fa9f 	bl	80140d8 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800cba0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cba4:	3301      	adds	r3, #1
 800cba6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800cbb0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d3a6      	bcc.n	800cb06 <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800cbb8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d19b      	bne.n	800caf8 <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800cbc0:	e000      	b.n	800cbc4 <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800cbc2:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800cbc4:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3740      	adds	r7, #64	; 0x40
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b087      	sub	sp, #28
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	60b9      	str	r1, [r7, #8]
 800cbda:	607a      	str	r2, [r7, #4]
 800cbdc:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cbea:	7bfa      	ldrb	r2, [r7, #15]
 800cbec:	4613      	mov	r3, r2
 800cbee:	00db      	lsls	r3, r3, #3
 800cbf0:	4413      	add	r3, r2
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	4413      	add	r3, r2
 800cbfc:	3304      	adds	r3, #4
 800cbfe:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	2200      	movs	r2, #0
 800cc04:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	75fb      	strb	r3, [r7, #23]
 800cc12:	e01c      	b.n	800cc4e <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	78da      	ldrb	r2, [r3, #3]
 800cc18:	7dfb      	ldrb	r3, [r7, #23]
 800cc1a:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc1e:	fb02 f201 	mul.w	r2, r2, r1
 800cc22:	1a9b      	subs	r3, r3, r2
 800cc24:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	68da      	ldr	r2, [r3, #12]
 800cc2a:	7d79      	ldrb	r1, [r7, #21]
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	3106      	adds	r1, #6
 800cc30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc34:	441a      	add	r2, r3
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	689a      	ldr	r2, [r3, #8]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	441a      	add	r2, r3
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800cc48:	7dfb      	ldrb	r3, [r7, #23]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	75fb      	strb	r3, [r7, #23]
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	791b      	ldrb	r3, [r3, #4]
 800cc52:	7dfa      	ldrb	r2, [r7, #23]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d9dd      	bls.n	800cc14 <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	68da      	ldr	r2, [r3, #12]
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	689b      	ldr	r3, [r3, #8]
 800cc60:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800cc66:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	371c      	adds	r7, #28
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr

0800cc76 <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cc76:	b590      	push	{r4, r7, lr}
 800cc78:	b08d      	sub	sp, #52	; 0x34
 800cc7a:	af02      	add	r7, sp, #8
 800cc7c:	60ba      	str	r2, [r7, #8]
 800cc7e:	607b      	str	r3, [r7, #4]
 800cc80:	4603      	mov	r3, r0
 800cc82:	73fb      	strb	r3, [r7, #15]
 800cc84:	460b      	mov	r3, r1
 800cc86:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53LX_p_012 = 0;
 800cc94:	2300      	movs	r3, #0
 800cc96:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 800cca0:	2300      	movs	r3, #0
 800cca2:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cca4:	7bfa      	ldrb	r2, [r7, #15]
 800cca6:	4613      	mov	r3, r2
 800cca8:	00db      	lsls	r3, r3, #3
 800ccaa:	4413      	add	r3, r2
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	4413      	add	r3, r2
 800ccb6:	3304      	adds	r3, #4
 800ccb8:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	789b      	ldrb	r3, [r3, #2]
 800ccbe:	2bff      	cmp	r3, #255	; 0xff
 800ccc0:	d102      	bne.n	800ccc8 <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	789b      	ldrb	r3, [r3, #2]
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	78d2      	ldrb	r2, [r2, #3]
 800ccd0:	fbb3 f1f2 	udiv	r1, r3, r2
 800ccd4:	fb02 f201 	mul.w	r2, r2, r1
 800ccd8:	1a9b      	subs	r3, r3, r2
 800ccda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53LX_p_012  = (int16_t)i;
 800ccde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cce2:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	b29a      	uxth	r2, r3
 800ccea:	8c3b      	ldrh	r3, [r7, #32]
 800ccec:	4413      	add	r3, r2
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800ccf2:	8c3a      	ldrh	r2, [r7, #32]
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	789b      	ldrb	r3, [r3, #2]
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	1ad3      	subs	r3, r2, r3
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800cd00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cd04:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	791b      	ldrb	r3, [r3, #4]
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	8bfb      	ldrh	r3, [r7, #30]
 800cd0e:	4413      	add	r3, r2
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800cd14:	8bfa      	ldrh	r2, [r7, #30]
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	789b      	ldrb	r3, [r3, #2]
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	1ad3      	subs	r3, r2, r3
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800cd22:	8bfa      	ldrh	r2, [r7, #30]
 800cd24:	8c3b      	ldrh	r3, [r7, #32]
 800cd26:	1ad3      	subs	r3, r2, r3
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 800cd2c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cd30:	2b03      	cmp	r3, #3
 800cd32:	dd01      	ble.n	800cd38 <VL53LX_f_015+0xc2>
		window_width = 3;
 800cd34:	2303      	movs	r3, #3
 800cd36:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800cd38:	8c3a      	ldrh	r2, [r7, #32]
 800cd3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd3c:	4413      	add	r3, r2
 800cd3e:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800cd40:	b219      	sxth	r1, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	78da      	ldrb	r2, [r3, #3]
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	3314      	adds	r3, #20
 800cd4a:	7bbc      	ldrb	r4, [r7, #14]
 800cd4c:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800cd50:	9301      	str	r3, [sp, #4]
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	4623      	mov	r3, r4
 800cd58:	f000 f846 	bl	800cde8 <VL53LX_f_020>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800cd62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d114      	bne.n	800cd94 <VL53LX_f_015+0x11e>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800cd6a:	8bfa      	ldrh	r2, [r7, #30]
 800cd6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800cd72:	b218      	sxth	r0, r3
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	78da      	ldrb	r2, [r3, #3]
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	331c      	adds	r3, #28
 800cd7c:	7bbc      	ldrb	r4, [r7, #14]
 800cd7e:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800cd82:	9301      	str	r3, [sp, #4]
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	9300      	str	r3, [sp, #0]
 800cd88:	4623      	mov	r3, r4
 800cd8a:	f000 f82d 	bl	800cde8 <VL53LX_f_020>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	695a      	ldr	r2, [r3, #20]
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	69db      	ldr	r3, [r3, #28]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d909      	bls.n	800cdb4 <VL53LX_f_015+0x13e>
		tmp_phase        = pdata->VL53LX_p_026;
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	695b      	ldr	r3, [r3, #20]
 800cda4:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	69da      	ldr	r2, [r3, #28]
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	69ba      	ldr	r2, [r7, #24]
 800cdb2:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	699a      	ldr	r2, [r3, #24]
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	695b      	ldr	r3, [r3, #20]
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d203      	bcs.n	800cdc8 <VL53LX_f_015+0x152>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	699a      	ldr	r2, [r3, #24]
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	699a      	ldr	r2, [r3, #24]
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	69db      	ldr	r3, [r3, #28]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d903      	bls.n	800cddc <VL53LX_f_015+0x166>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	699a      	ldr	r2, [r3, #24]
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800cddc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	372c      	adds	r7, #44	; 0x2c
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd90      	pop	{r4, r7, pc}

0800cde8 <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800cde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdec:	b093      	sub	sp, #76	; 0x4c
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	4616      	mov	r6, r2
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	83fb      	strh	r3, [r7, #30]
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	83bb      	strh	r3, [r7, #28]
 800cdfc:	4633      	mov	r3, r6
 800cdfe:	76fb      	strb	r3, [r7, #27]
 800ce00:	4613      	mov	r3, r2
 800ce02:	76bb      	strb	r3, [r7, #26]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ce04:	2300      	movs	r3, #0
 800ce06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	int16_t  i            = 0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  lb            = 0;
 800ce10:	2300      	movs	r3, #0
 800ce12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	int64_t VL53LX_p_018        = 0;
 800ce16:	f04f 0200 	mov.w	r2, #0
 800ce1a:	f04f 0300 	mov.w	r3, #0
 800ce1e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int64_t event_sum     = 0;
 800ce22:	f04f 0200 	mov.w	r2, #0
 800ce26:	f04f 0300 	mov.w	r3, #0
 800ce2a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int64_t weighted_sum  = 0;
 800ce2e:	f04f 0200 	mov.w	r2, #0
 800ce32:	f04f 0300 	mov.w	r3, #0
 800ce36:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800ce3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce40:	601a      	str	r2, [r3, #0]

	if (VL53LX_p_030 != 0)
 800ce42:	7efb      	ldrb	r3, [r7, #27]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f000 808b 	beq.w	800cf60 <VL53LX_f_020+0x178>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800ce4a:	8bfb      	ldrh	r3, [r7, #30]
 800ce4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ce50:	e07f      	b.n	800cf52 <VL53LX_f_020+0x16a>

		if (lb < 0)
 800ce52:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	da08      	bge.n	800ce6c <VL53LX_f_020+0x84>
			i = lb + (int16_t)VL53LX_p_030;
 800ce5a:	7efb      	ldrb	r3, [r7, #27]
 800ce5c:	b29a      	uxth	r2, r3
 800ce5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ce62:	4413      	add	r3, r2
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ce6a:	e009      	b.n	800ce80 <VL53LX_f_020+0x98>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800ce6c:	f9b7 1044 	ldrsh.w	r1, [r7, #68]	; 0x44
 800ce70:	7efa      	ldrb	r2, [r7, #27]
 800ce72:	fb91 f3f2 	sdiv	r3, r1, r2
 800ce76:	fb02 f303 	mul.w	r3, r2, r3
 800ce7a:	1acb      	subs	r3, r1, r3
 800ce7c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800ce80:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	db5d      	blt.n	800cf44 <VL53LX_f_020+0x15c>
 800ce88:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ce8c:	2b17      	cmp	r3, #23
 800ce8e:	dc59      	bgt.n	800cf44 <VL53LX_f_020+0x15c>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800ce90:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ce94:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ce96:	3306      	adds	r3, #6
 800ce98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	ea4f 71e0 	mov.w	r1, r0, asr #31
				(int64_t)pbins->VL53LX_p_028;
 800cea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cea4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cea8:	461a      	mov	r2, r3
 800ceaa:	ea4f 73e2 	mov.w	r3, r2, asr #31
			VL53LX_p_018 =
 800ceae:	1a86      	subs	r6, r0, r2
 800ceb0:	613e      	str	r6, [r7, #16]
 800ceb2:	eb61 0303 	sbc.w	r3, r1, r3
 800ceb6:	617b      	str	r3, [r7, #20]
 800ceb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cebc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800cec0:	7ebb      	ldrb	r3, [r7, #26]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00b      	beq.n	800cede <VL53LX_f_020+0xf6>
 800cec6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ceca:	2a00      	cmp	r2, #0
 800cecc:	f173 0300 	sbcs.w	r3, r3, #0
 800ced0:	da05      	bge.n	800cede <VL53LX_f_020+0xf6>
				VL53LX_p_018 = 0;
 800ced2:	f04f 0200 	mov.w	r2, #0
 800ced6:	f04f 0300 	mov.w	r3, #0
 800ceda:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			event_sum += VL53LX_p_018;
 800cede:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cee2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cee6:	1886      	adds	r6, r0, r2
 800cee8:	60be      	str	r6, [r7, #8]
 800ceea:	eb41 0303 	adc.w	r3, r1, r3
 800ceee:	60fb      	str	r3, [r7, #12]
 800cef0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cef4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800cef8:	f9b7 0044 	ldrsh.w	r0, [r7, #68]	; 0x44
 800cefc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800cf00:	f04f 0200 	mov.w	r2, #0
 800cf04:	f04f 0300 	mov.w	r3, #0
 800cf08:	02cb      	lsls	r3, r1, #11
 800cf0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800cf0e:	02c2      	lsls	r2, r0, #11
 800cf10:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 800cf14:	f143 0900 	adc.w	r9, r3, #0
 800cf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1a:	fb09 f203 	mul.w	r2, r9, r3
 800cf1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf20:	fb08 f303 	mul.w	r3, r8, r3
 800cf24:	441a      	add	r2, r3
 800cf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf28:	fba3 0108 	umull	r0, r1, r3, r8
 800cf2c:	1853      	adds	r3, r2, r1
 800cf2e:	4619      	mov	r1, r3
			weighted_sum +=
 800cf30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cf34:	1816      	adds	r6, r2, r0
 800cf36:	603e      	str	r6, [r7, #0]
 800cf38:	414b      	adcs	r3, r1
 800cf3a:	607b      	str	r3, [r7, #4]
 800cf3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf40:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800cf44:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800cf52:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800cf56:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	f77f af79 	ble.w	800ce52 <VL53LX_f_020+0x6a>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800cf60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cf64:	2a01      	cmp	r2, #1
 800cf66:	f173 0300 	sbcs.w	r3, r3, #0
 800cf6a:	db33      	blt.n	800cfd4 <VL53LX_f_020+0x1ec>
		weighted_sum += do_division_s(event_sum, 2);
 800cf6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cf70:	0fd9      	lsrs	r1, r3, #31
 800cf72:	4608      	mov	r0, r1
 800cf74:	f04f 0100 	mov.w	r1, #0
 800cf78:	1884      	adds	r4, r0, r2
 800cf7a:	eb41 0503 	adc.w	r5, r1, r3
 800cf7e:	f04f 0200 	mov.w	r2, #0
 800cf82:	f04f 0300 	mov.w	r3, #0
 800cf86:	0862      	lsrs	r2, r4, #1
 800cf88:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800cf8c:	106b      	asrs	r3, r5, #1
 800cf8e:	4610      	mov	r0, r2
 800cf90:	4619      	mov	r1, r3
 800cf92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cf96:	eb12 0a00 	adds.w	sl, r2, r0
 800cf9a:	eb43 0b01 	adc.w	fp, r3, r1
 800cf9e:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800cfa2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cfa6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800cfaa:	f7f3 f969 	bl	8000280 <__aeabi_ldivmod>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		if (weighted_sum < 0)
 800cfb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cfba:	2a00      	cmp	r2, #0
 800cfbc:	f173 0300 	sbcs.w	r3, r3, #0
 800cfc0:	da05      	bge.n	800cfce <VL53LX_f_020+0x1e6>
			weighted_sum = 0;
 800cfc2:	f04f 0200 	mov.w	r2, #0
 800cfc6:	f04f 0300 	mov.w	r3, #0
 800cfca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		*pphase = (uint32_t)weighted_sum;
 800cfce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfd2:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800cfd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	374c      	adds	r7, #76	; 0x4c
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cfe2 <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b086      	sub	sp, #24
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	607a      	str	r2, [r7, #4]
 800cfec:	603b      	str	r3, [r7, #0]
 800cfee:	4603      	mov	r3, r0
 800cff0:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cff2:	2300      	movs	r3, #0
 800cff4:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800cff6:	2300      	movs	r3, #0
 800cff8:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800cffa:	2300      	movs	r3, #0
 800cffc:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cffe:	7bfa      	ldrb	r2, [r7, #15]
 800d000:	4613      	mov	r3, r2
 800d002:	00db      	lsls	r3, r3, #3
 800d004:	4413      	add	r3, r2
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	4413      	add	r3, r2
 800d010:	3304      	adds	r3, #4
 800d012:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800d014:	22ac      	movs	r2, #172	; 0xac
 800d016:	68b9      	ldr	r1, [r7, #8]
 800d018:	6a38      	ldr	r0, [r7, #32]
 800d01a:	f007 f85d 	bl	80140d8 <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d024:	75fb      	strb	r3, [r7, #23]
 800d026:	e020      	b.n	800d06a <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	7dfa      	ldrb	r2, [r7, #23]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d304      	bcc.n	800d03c <VL53LX_f_011+0x5a>
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	791b      	ldrb	r3, [r3, #4]
 800d036:	7dfa      	ldrb	r2, [r7, #23]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d913      	bls.n	800d064 <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	78da      	ldrb	r2, [r3, #3]
 800d040:	7dfb      	ldrb	r3, [r7, #23]
 800d042:	fbb3 f1f2 	udiv	r1, r3, r2
 800d046:	fb02 f201 	mul.w	r2, r2, r1
 800d04a:	1a9b      	subs	r3, r3, r2
 800d04c:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800d04e:	6a3b      	ldr	r3, [r7, #32]
 800d050:	7a9b      	ldrb	r3, [r3, #10]
 800d052:	7d7a      	ldrb	r2, [r7, #21]
 800d054:	429a      	cmp	r2, r3
 800d056:	d205      	bcs.n	800d064 <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800d058:	7d7a      	ldrb	r2, [r7, #21]
 800d05a:	6a3b      	ldr	r3, [r7, #32]
 800d05c:	3206      	adds	r2, #6
 800d05e:	6839      	ldr	r1, [r7, #0]
 800d060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800d064:	7dfb      	ldrb	r3, [r7, #23]
 800d066:	3301      	adds	r3, #1
 800d068:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800d06a:	7dfa      	ldrb	r2, [r7, #23]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d072:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800d078:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800d07a:	429a      	cmp	r2, r3
 800d07c:	dbd4      	blt.n	800d028 <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d07e:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d082:	4618      	mov	r0, r3
 800d084:	3718      	adds	r7, #24
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800d08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d08e:	b096      	sub	sp, #88	; 0x58
 800d090:	af08      	add	r7, sp, #32
 800d092:	4604      	mov	r4, r0
 800d094:	4608      	mov	r0, r1
 800d096:	4611      	mov	r1, r2
 800d098:	461a      	mov	r2, r3
 800d09a:	4623      	mov	r3, r4
 800d09c:	73fb      	strb	r3, [r7, #15]
 800d09e:	4603      	mov	r3, r0
 800d0a0:	73bb      	strb	r3, [r7, #14]
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	737b      	strb	r3, [r7, #13]
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53LX_p_007    = 0;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53LX_p_032    = 0;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53LX_p_001    = 0;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800d0dc:	7b7b      	ldrb	r3, [r7, #13]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d106      	bne.n	800d0f0 <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800d0e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d0e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0e8:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800d0ea:	f06f 030e 	mvn.w	r3, #14
 800d0ee:	e06f      	b.n	800d1d0 <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800d0f0:	7bfb      	ldrb	r3, [r7, #15]
 800d0f2:	7b7a      	ldrb	r2, [r7, #13]
 800d0f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0f8:	fb02 f201 	mul.w	r2, r2, r1
 800d0fc:	1a9b      	subs	r3, r3, r2
 800d0fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53LX_f_022(
 800d102:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d106:	7b39      	ldrb	r1, [r7, #12]
 800d108:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d10c:	f107 0320 	add.w	r3, r7, #32
 800d110:	9301      	str	r3, [sp, #4]
 800d112:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	4613      	mov	r3, r2
 800d11a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d11c:	f000 fda8 	bl	800dc70 <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800d120:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d124:	7b39      	ldrb	r1, [r7, #12]
 800d126:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d12a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d12e:	9301      	str	r3, [sp, #4]
 800d130:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d134:	9300      	str	r3, [sp, #0]
 800d136:	4613      	mov	r3, r2
 800d138:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d13a:	f000 fd99 	bl	800dc70 <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800d13e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d142:	2b00      	cmp	r3, #0
 800d144:	d00e      	beq.n	800d164 <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800d146:	f107 021c 	add.w	r2, r7, #28
 800d14a:	7b39      	ldrb	r1, [r7, #12]
 800d14c:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d150:	f107 0314 	add.w	r3, r7, #20
 800d154:	9301      	str	r3, [sp, #4]
 800d156:	f107 0318 	add.w	r3, r7, #24
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	4613      	mov	r3, r2
 800d15e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d160:	f000 fd86 	bl	800dc70 <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800d164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d166:	469c      	mov	ip, r3
 800d168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16a:	469e      	mov	lr, r3
 800d16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16e:	4698      	mov	r8, r3
 800d170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d172:	4619      	mov	r1, r3
 800d174:	6a3b      	ldr	r3, [r7, #32]
 800d176:	461c      	mov	r4, r3
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	461d      	mov	r5, r3
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	461e      	mov	r6, r3
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800d184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d186:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53LX_f_023(
 800d18a:	607b      	str	r3, [r7, #4]
 800d18c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d18e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d192:	7bb8      	ldrb	r0, [r7, #14]
 800d194:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d196:	9207      	str	r2, [sp, #28]
 800d198:	9306      	str	r3, [sp, #24]
 800d19a:	687a      	ldr	r2, [r7, #4]
 800d19c:	9205      	str	r2, [sp, #20]
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	9304      	str	r3, [sp, #16]
 800d1a2:	9603      	str	r6, [sp, #12]
 800d1a4:	9502      	str	r5, [sp, #8]
 800d1a6:	9401      	str	r4, [sp, #4]
 800d1a8:	9100      	str	r1, [sp, #0]
 800d1aa:	4643      	mov	r3, r8
 800d1ac:	4672      	mov	r2, lr
 800d1ae:	4661      	mov	r1, ip
 800d1b0:	f002 fee6 	bl	800ff80 <VL53LX_f_023>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800d1ba:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800d1be:	f113 0f0f 	cmn.w	r3, #15
 800d1c2:	d103      	bne.n	800d1cc <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800d1c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1ca:	801a      	strh	r2, [r3, #0]


	return status;
 800d1cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3738      	adds	r7, #56	; 0x38
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d1da <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800d1da:	b490      	push	{r4, r7}
 800d1dc:	b084      	sub	sp, #16
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	4608      	mov	r0, r1
 800d1e4:	4611      	mov	r1, r2
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	4623      	mov	r3, r4
 800d1ea:	71fb      	strb	r3, [r7, #7]
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	71bb      	strb	r3, [r7, #6]
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	717b      	strb	r3, [r7, #5]
 800d1f4:	4613      	mov	r3, r2
 800d1f6:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800d200:	6a3b      	ldr	r3, [r7, #32]
 800d202:	79fa      	ldrb	r2, [r7, #7]
 800d204:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800d206:	6a3b      	ldr	r3, [r7, #32]
 800d208:	2200      	movs	r2, #0
 800d20a:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	781a      	ldrb	r2, [r3, #0]
 800d210:	6a3b      	ldr	r3, [r7, #32]
 800d212:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	785a      	ldrb	r2, [r3, #1]
 800d218:	6a3b      	ldr	r3, [r7, #32]
 800d21a:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800d21c:	69fb      	ldr	r3, [r7, #28]
 800d21e:	789a      	ldrb	r2, [r3, #2]
 800d220:	6a3b      	ldr	r3, [r7, #32]
 800d222:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	78da      	ldrb	r2, [r3, #3]
 800d228:	6a3b      	ldr	r3, [r7, #32]
 800d22a:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800d22c:	69fb      	ldr	r3, [r7, #28]
 800d22e:	791a      	ldrb	r2, [r3, #4]
 800d230:	6a3b      	ldr	r3, [r7, #32]
 800d232:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	795a      	ldrb	r2, [r3, #5]
 800d238:	6a3b      	ldr	r3, [r7, #32]
 800d23a:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	791a      	ldrb	r2, [r3, #4]
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	1ad3      	subs	r3, r2, r3
 800d246:	b2db      	uxtb	r3, r3
 800d248:	3301      	adds	r3, #1
 800d24a:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800d24c:	6a3b      	ldr	r3, [r7, #32]
 800d24e:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800d256:	6a3b      	ldr	r3, [r7, #32]
 800d258:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	8c1a      	ldrh	r2, [r3, #32]
 800d25e:	6a3b      	ldr	r3, [r7, #32]
 800d260:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	695b      	ldr	r3, [r3, #20]
 800d266:	b29a      	uxth	r2, r3
 800d268:	6a3b      	ldr	r3, [r7, #32]
 800d26a:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	699b      	ldr	r3, [r3, #24]
 800d270:	b29a      	uxth	r2, r3
 800d272:	6a3b      	ldr	r3, [r7, #32]
 800d274:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	69db      	ldr	r3, [r3, #28]
 800d27c:	b29a      	uxth	r2, r3
 800d27e:	6a3b      	ldr	r3, [r7, #32]
 800d280:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800d284:	69fb      	ldr	r3, [r7, #28]
 800d286:	68db      	ldr	r3, [r3, #12]
 800d288:	461a      	mov	r2, r3
 800d28a:	6a3b      	ldr	r3, [r7, #32]
 800d28c:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	691a      	ldr	r2, [r3, #16]
 800d292:	6a3b      	ldr	r3, [r7, #32]
 800d294:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800d296:	69fb      	ldr	r3, [r7, #28]
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	461a      	mov	r2, r3
 800d29c:	6a3b      	ldr	r3, [r7, #32]
 800d29e:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d2a6:	6a3b      	ldr	r3, [r7, #32]
 800d2a8:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800d2aa:	6a3b      	ldr	r3, [r7, #32]
 800d2ac:	2213      	movs	r2, #19
 800d2ae:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 800d2b2:	887b      	ldrh	r3, [r7, #2]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d00a      	beq.n	800d2ce <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	8c1b      	ldrh	r3, [r3, #32]
 800d2bc:	461a      	mov	r2, r3
 800d2be:	887b      	ldrh	r3, [r7, #2]
 800d2c0:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d903      	bls.n	800d2ce <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800d2c6:	6a3b      	ldr	r3, [r7, #32]
 800d2c8:	2206      	movs	r2, #6
 800d2ca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800d2ce:	79bb      	ldrb	r3, [r7, #6]
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	021b      	lsls	r3, r3, #8
 800d2d4:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800d2d6:	6a3b      	ldr	r3, [r7, #32]
 800d2d8:	8a9b      	ldrh	r3, [r3, #20]
 800d2da:	89fa      	ldrh	r2, [r7, #14]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d205      	bcs.n	800d2ec <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800d2e0:	6a3b      	ldr	r3, [r7, #32]
 800d2e2:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800d2e4:	89fb      	ldrh	r3, [r7, #14]
 800d2e6:	1ad3      	subs	r3, r2, r3
 800d2e8:	81fb      	strh	r3, [r7, #14]
 800d2ea:	e001      	b.n	800d2f0 <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800d2f0:	797b      	ldrb	r3, [r7, #5]
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	021b      	lsls	r3, r3, #8
 800d2f6:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800d2f8:	69bb      	ldr	r3, [r7, #24]
 800d2fa:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800d2fe:	89bb      	ldrh	r3, [r7, #12]
 800d300:	4413      	add	r3, r2
 800d302:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d304:	6a3b      	ldr	r3, [r7, #32]
 800d306:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d30a:	89fa      	ldrh	r2, [r7, #14]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d805      	bhi.n	800d31c <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800d310:	6a3b      	ldr	r3, [r7, #32]
 800d312:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d316:	89ba      	ldrh	r2, [r7, #12]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d203      	bcs.n	800d324 <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800d31c:	6a3b      	ldr	r3, [r7, #32]
 800d31e:	2205      	movs	r2, #5
 800d320:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 800d324:	bf00      	nop
 800d326:	3710      	adds	r7, #16
 800d328:	46bd      	mov	sp, r7
 800d32a:	bc90      	pop	{r4, r7}
 800d32c:	4770      	bx	lr

0800d32e <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800d32e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d330:	b08f      	sub	sp, #60	; 0x3c
 800d332:	af06      	add	r7, sp, #24
 800d334:	60f8      	str	r0, [r7, #12]
 800d336:	60b9      	str	r1, [r7, #8]
 800d338:	607a      	str	r2, [r7, #4]
 800d33a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d33c:	2300      	movs	r3, #0
 800d33e:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800d340:	2300      	movs	r3, #0
 800d342:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800d344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d346:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d34a:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800d34c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d34e:	f7ff f879 	bl	800c444 <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800d352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d354:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 800d358:	22ac      	movs	r2, #172	; 0xac
 800d35a:	6839      	ldr	r1, [r7, #0]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f006 febb 	bl	80140d8 <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	781a      	ldrb	r2, [r3, #0]
 800d366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d368:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	785a      	ldrb	r2, [r3, #1]
 800d36e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d370:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	789a      	ldrb	r2, [r3, #2]
 800d376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d378:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800d380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d382:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800d384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d386:	2200      	movs	r2, #0
 800d388:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800d38a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d38c:	2204      	movs	r2, #4
 800d38e:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800d390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d392:	2200      	movs	r2, #0
 800d394:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d396:	2300      	movs	r3, #0
 800d398:	77bb      	strb	r3, [r7, #30]
 800d39a:	e008      	b.n	800d3ae <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800d39c:	7fbb      	ldrb	r3, [r7, #30]
 800d39e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3a0:	005b      	lsls	r3, r3, #1
 800d3a2:	4413      	add	r3, r2
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d3a8:	7fbb      	ldrb	r3, [r7, #30]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	77bb      	strb	r3, [r7, #30]
 800d3ae:	7fbb      	ldrb	r3, [r7, #30]
 800d3b0:	2b04      	cmp	r3, #4
 800d3b2:	d9f3      	bls.n	800d39c <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800d3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3b6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7fe f8b9 	bl	800b532 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3c8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	4610      	mov	r0, r2
 800d3d0:	f7fe f8ef 	bl	800b5b2 <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800d3d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3d6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fe fcb9 	bl	800bd52 <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800d3e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3e2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7fe f95d 	bl	800b6a6 <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d009      	beq.n	800d40a <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800d3f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3f8:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3fe:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800d402:	461a      	mov	r2, r3
 800d404:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d406:	f000 fd7b 	bl	800df00 <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d412:	2300      	movs	r3, #0
 800d414:	77bb      	strb	r3, [r7, #30]
 800d416:	e01e      	b.n	800d456 <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800d418:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d117      	bne.n	800d450 <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800d420:	7fbb      	ldrb	r3, [r7, #30]
 800d422:	68ba      	ldr	r2, [r7, #8]
 800d424:	3304      	adds	r3, #4
 800d426:	005b      	lsls	r3, r3, #1
 800d428:	4413      	add	r3, r2
 800d42a:	8898      	ldrh	r0, [r3, #4]
 800d42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d42e:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800d432:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800d434:	005b      	lsls	r3, r3, #1
 800d436:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d438:	4413      	add	r3, r2
 800d43a:	3304      	adds	r3, #4
 800d43c:	9301      	str	r3, [sp, #4]
 800d43e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	460b      	mov	r3, r1
 800d444:	68ba      	ldr	r2, [r7, #8]
 800d446:	68f9      	ldr	r1, [r7, #12]
 800d448:	f7fe fcce 	bl	800bde8 <VL53LX_f_001>
 800d44c:	4603      	mov	r3, r0
 800d44e:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d450:	7fbb      	ldrb	r3, [r7, #30]
 800d452:	3301      	adds	r3, #1
 800d454:	77bb      	strb	r3, [r7, #30]
 800d456:	7fbb      	ldrb	r3, [r7, #30]
 800d458:	2b04      	cmp	r3, #4
 800d45a:	d9dd      	bls.n	800d418 <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800d45c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d11a      	bne.n	800d49a <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800d46c:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 800d478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d47a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d47e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d480:	f502 7252 	add.w	r2, r2, #840	; 0x348
 800d484:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d486:	9102      	str	r1, [sp, #8]
 800d488:	9201      	str	r2, [sp, #4]
 800d48a:	9300      	str	r3, [sp, #0]
 800d48c:	462b      	mov	r3, r5
 800d48e:	4622      	mov	r2, r4
 800d490:	4631      	mov	r1, r6
 800d492:	f7ff f850 	bl	800c536 <VL53LX_f_006>
 800d496:	4603      	mov	r3, r0
 800d498:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800d49a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d104      	bne.n	800d4ac <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800d4a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d4a4:	f7ff f972 	bl	800c78c <VL53LX_f_007>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d4ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d104      	bne.n	800d4be <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800d4b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d4b6:	f7ff f9b7 	bl	800c828 <VL53LX_f_008>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d4be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d104      	bne.n	800d4d0 <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800d4c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d4c8:	f7ff fa2c 	bl	800c924 <VL53LX_f_009>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	77bb      	strb	r3, [r7, #30]
 800d4d4:	e0a6      	b.n	800d624 <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800d4d6:	7fba      	ldrb	r2, [r7, #30]
 800d4d8:	4613      	mov	r3, r2
 800d4da:	00db      	lsls	r3, r3, #3
 800d4dc:	4413      	add	r3, r2
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d4e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4e6:	4413      	add	r3, r2
 800d4e8:	3304      	adds	r3, #4
 800d4ea:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800d4ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d109      	bne.n	800d508 <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800d4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4f6:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d4fa:	7fbb      	ldrb	r3, [r7, #30]
 800d4fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7ff fb66 	bl	800cbd0 <VL53LX_f_010>
 800d504:	4603      	mov	r3, r0
 800d506:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800d508:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d110      	bne.n	800d532 <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800d510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d512:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d516:	69bb      	ldr	r3, [r7, #24]
 800d518:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800d51c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d51e:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800d522:	7fb8      	ldrb	r0, [r7, #30]
 800d524:	9300      	str	r3, [sp, #0]
 800d526:	4613      	mov	r3, r2
 800d528:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d52a:	f7ff fd5a 	bl	800cfe2 <VL53LX_f_011>
 800d52e:	4603      	mov	r3, r0
 800d530:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800d532:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d10d      	bne.n	800d556 <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800d53a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d53c:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d542:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800d546:	7fb8      	ldrb	r0, [r7, #30]
 800d548:	9300      	str	r3, [sp, #0]
 800d54a:	2300      	movs	r3, #0
 800d54c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d54e:	f7ff fd48 	bl	800cfe2 <VL53LX_f_011>
 800d552:	4603      	mov	r3, r0
 800d554:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800d556:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d10d      	bne.n	800d57a <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800d55e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d560:	f503 7152 	add.w	r1, r3, #840	; 0x348
 800d564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d566:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800d56a:	7fb8      	ldrb	r0, [r7, #30]
 800d56c:	9300      	str	r3, [sp, #0]
 800d56e:	2300      	movs	r3, #0
 800d570:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d572:	f7ff fd36 	bl	800cfe2 <VL53LX_f_011>
 800d576:	4603      	mov	r3, r0
 800d578:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800d57a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d109      	bne.n	800d596 <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800d582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d584:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 800d588:	7fb8      	ldrb	r0, [r7, #30]
 800d58a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d58c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d58e:	f000 f8dd 	bl	800d74c <VL53LX_f_026>
 800d592:	4603      	mov	r3, r0
 800d594:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800d596:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d108      	bne.n	800d5b0 <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	8a19      	ldrh	r1, [r3, #16]
 800d5a2:	7fb8      	ldrb	r0, [r7, #30]
 800d5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d5a8:	f000 f95c 	bl	800d864 <VL53LX_f_027>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800d5b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d124      	bne.n	800d602 <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	789d      	ldrb	r5, [r3, #2]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	7e1e      	ldrb	r6, [r3, #24]
 800d5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5c2:	f893 c003 	ldrb.w	ip, [r3, #3]
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	f893 e006 	ldrb.w	lr, [r3, #6]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5d4:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 800d5d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d5da:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 800d5de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d5e0:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 800d5e4:	697c      	ldr	r4, [r7, #20]
 800d5e6:	3420      	adds	r4, #32
 800d5e8:	9404      	str	r4, [sp, #16]
 800d5ea:	9003      	str	r0, [sp, #12]
 800d5ec:	9102      	str	r1, [sp, #8]
 800d5ee:	9201      	str	r2, [sp, #4]
 800d5f0:	9300      	str	r3, [sp, #0]
 800d5f2:	4673      	mov	r3, lr
 800d5f4:	4662      	mov	r2, ip
 800d5f6:	4631      	mov	r1, r6
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	f7ff fd46 	bl	800d08a <VL53LX_f_014>
 800d5fe:	4603      	mov	r3, r0
 800d600:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800d602:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d109      	bne.n	800d61e <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800d60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d60c:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 800d610:	7fb8      	ldrb	r0, [r7, #30]
 800d612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d614:	2101      	movs	r1, #1
 800d616:	f7ff fb2e 	bl	800cc76 <VL53LX_f_015>
 800d61a:	4603      	mov	r3, r0
 800d61c:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d61e:	7fbb      	ldrb	r3, [r7, #30]
 800d620:	3301      	adds	r3, #1
 800d622:	77bb      	strb	r3, [r7, #30]
 800d624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d626:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d62a:	7fba      	ldrb	r2, [r7, #30]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	f4ff af52 	bcc.w	800d4d6 <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800d632:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d107      	bne.n	800d64a <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	785b      	ldrb	r3, [r3, #1]
 800d63e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d640:	4618      	mov	r0, r3
 800d642:	f7ff fa41 	bl	800cac8 <VL53LX_f_016>
 800d646:	4603      	mov	r3, r0
 800d648:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d64a:	2300      	movs	r3, #0
 800d64c:	77bb      	strb	r3, [r7, #30]
 800d64e:	e071      	b.n	800d734 <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800d650:	7fba      	ldrb	r2, [r7, #30]
 800d652:	4613      	mov	r3, r2
 800d654:	00db      	lsls	r3, r3, #3
 800d656:	4413      	add	r3, r2
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d65e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d660:	4413      	add	r3, r2
 800d662:	3304      	adds	r3, #4
 800d664:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800d666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d668:	7c9a      	ldrb	r2, [r3, #18]
 800d66a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d66c:	7c5b      	ldrb	r3, [r3, #17]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d25c      	bcs.n	800d72c <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800d67a:	429a      	cmp	r2, r3
 800d67c:	dd57      	ble.n	800d72e <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800d682:	2bff      	cmp	r3, #255	; 0xff
 800d684:	d053      	beq.n	800d72e <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800d686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d688:	7c9b      	ldrb	r3, [r3, #18]
 800d68a:	461a      	mov	r2, r3
			prange_data =
 800d68c:	234c      	movs	r3, #76	; 0x4c
 800d68e:	fb03 f302 	mul.w	r3, r3, r2
 800d692:	3310      	adds	r3, #16
 800d694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d696:	4413      	add	r3, r2
 800d698:	3304      	adds	r3, #4
 800d69a:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800d69c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d115      	bne.n	800d6d0 <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800d6a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6a6:	7c98      	ldrb	r0, [r3, #18]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f893 1020 	ldrb.w	r1, [r3, #32]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	8b5d      	ldrh	r5, [r3, #26]
 800d6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ba:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d6be:	693a      	ldr	r2, [r7, #16]
 800d6c0:	9202      	str	r2, [sp, #8]
 800d6c2:	697a      	ldr	r2, [r7, #20]
 800d6c4:	9201      	str	r2, [sp, #4]
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	462b      	mov	r3, r5
 800d6ca:	4622      	mov	r2, r4
 800d6cc:	f7ff fd85 	bl	800d1da <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800d6d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d115      	bne.n	800d704 <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800d6d8:	69bb      	ldr	r3, [r7, #24]
 800d6da:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 800d6e4:	69bb      	ldr	r3, [r7, #24]
 800d6e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 800d6f0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d6f4:	9301      	str	r3, [sp, #4]
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	9300      	str	r3, [sp, #0]
 800d6fa:	4623      	mov	r3, r4
 800d6fc:	f000 fb11 	bl	800dd22 <VL53LX_f_018>
 800d700:	4603      	mov	r3, r0
 800d702:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800d704:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d108      	bne.n	800d71e <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	8bd8      	ldrh	r0, [r3, #30]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800d716:	693a      	ldr	r2, [r7, #16]
 800d718:	4619      	mov	r1, r3
 800d71a:	f000 fba7 	bl	800de6c <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800d71e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d720:	7c9b      	ldrb	r3, [r3, #18]
 800d722:	3301      	adds	r3, #1
 800d724:	b2da      	uxtb	r2, r3
 800d726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d728:	749a      	strb	r2, [r3, #18]
 800d72a:	e000      	b.n	800d72e <VL53LX_f_025+0x400>
			continue;
 800d72c:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d72e:	7fbb      	ldrb	r3, [r7, #30]
 800d730:	3301      	adds	r3, #1
 800d732:	77bb      	strb	r3, [r7, #30]
 800d734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d736:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d73a:	7fba      	ldrb	r2, [r7, #30]
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d387      	bcc.n	800d650 <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800d740:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d744:	4618      	mov	r0, r3
 800d746:	3724      	adds	r7, #36	; 0x24
 800d748:	46bd      	mov	sp, r7
 800d74a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d74c <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b08c      	sub	sp, #48	; 0x30
 800d750:	af02      	add	r7, sp, #8
 800d752:	60b9      	str	r1, [r7, #8]
 800d754:	607a      	str	r2, [r7, #4]
 800d756:	603b      	str	r3, [r7, #0]
 800d758:	4603      	mov	r3, r0
 800d75a:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800d75c:	2300      	movs	r3, #0
 800d75e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800d762:	7bfa      	ldrb	r2, [r7, #15]
 800d764:	4613      	mov	r3, r2
 800d766:	00db      	lsls	r3, r3, #3
 800d768:	4413      	add	r3, r2
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	4413      	add	r3, r2
 800d774:	3304      	adds	r3, #4
 800d776:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800d778:	2300      	movs	r3, #0
 800d77a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 800d77e:	2300      	movs	r3, #0
 800d780:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800d782:	2300      	movs	r3, #0
 800d784:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800d786:	2300      	movs	r3, #0
 800d788:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800d78a:	2300      	movs	r3, #0
 800d78c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	785a      	ldrb	r2, [r3, #1]
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	781a      	ldrb	r2, [r3, #0]
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	789a      	ldrb	r2, [r3, #2]
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d7a6:	6a3b      	ldr	r3, [r7, #32]
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d7ae:	e04d      	b.n	800d84c <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	78da      	ldrb	r2, [r3, #3]
 800d7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7bc:	fb02 f201 	mul.w	r2, r2, r1
 800d7c0:	1a9b      	subs	r3, r3, r2
 800d7c2:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800d7c4:	6a3b      	ldr	r3, [r7, #32]
 800d7c6:	7999      	ldrb	r1, [r3, #6]
 800d7c8:	f107 0218 	add.w	r2, r7, #24
 800d7cc:	7ff8      	ldrb	r0, [r7, #31]
 800d7ce:	f107 0310 	add.w	r3, r7, #16
 800d7d2:	9301      	str	r3, [sp, #4]
 800d7d4:	f107 0314 	add.w	r3, r7, #20
 800d7d8:	9300      	str	r3, [sp, #0]
 800d7da:	4613      	mov	r3, r2
 800d7dc:	68ba      	ldr	r2, [r7, #8]
 800d7de:	f000 fa47 	bl	800dc70 <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800d7e2:	7ffb      	ldrb	r3, [r7, #31]
 800d7e4:	69ba      	ldr	r2, [r7, #24]
 800d7e6:	6839      	ldr	r1, [r7, #0]
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	440b      	add	r3, r1
 800d7ec:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800d7ee:	7ffb      	ldrb	r3, [r7, #31]
 800d7f0:	697a      	ldr	r2, [r7, #20]
 800d7f2:	6839      	ldr	r1, [r7, #0]
 800d7f4:	3318      	adds	r3, #24
 800d7f6:	009b      	lsls	r3, r3, #2
 800d7f8:	440b      	add	r3, r1
 800d7fa:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800d7fc:	7ffb      	ldrb	r3, [r7, #31]
 800d7fe:	693a      	ldr	r2, [r7, #16]
 800d800:	6839      	ldr	r1, [r7, #0]
 800d802:	3330      	adds	r3, #48	; 0x30
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	440b      	add	r3, r1
 800d808:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800d80a:	69ba      	ldr	r2, [r7, #24]
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	689a      	ldr	r2, [r3, #8]
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800d818:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800d81a:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800d81c:	6839      	ldr	r1, [r7, #0]
 800d81e:	3348      	adds	r3, #72	; 0x48
 800d820:	009b      	lsls	r3, r3, #2
 800d822:	440b      	add	r3, r1
 800d824:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800d826:	697a      	ldr	r2, [r7, #20]
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	689a      	ldr	r2, [r3, #8]
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800d834:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800d836:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800d838:	6839      	ldr	r1, [r7, #0]
 800d83a:	3360      	adds	r3, #96	; 0x60
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	440b      	add	r3, r1
 800d840:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d846:	3301      	adds	r3, #1
 800d848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d84c:	6a3b      	ldr	r3, [r7, #32]
 800d84e:	791b      	ldrb	r3, [r3, #4]
 800d850:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d854:	429a      	cmp	r2, r3
 800d856:	d9ab      	bls.n	800d7b0 <VL53LX_f_026+0x64>
	}

	return status;
 800d858:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3728      	adds	r7, #40	; 0x28
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}

0800d864 <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800d864:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d866:	b08f      	sub	sp, #60	; 0x3c
 800d868:	af06      	add	r7, sp, #24
 800d86a:	60ba      	str	r2, [r7, #8]
 800d86c:	607b      	str	r3, [r7, #4]
 800d86e:	4603      	mov	r3, r0
 800d870:	73fb      	strb	r3, [r7, #15]
 800d872:	460b      	mov	r3, r1
 800d874:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800d876:	2300      	movs	r3, #0
 800d878:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800d87a:	2300      	movs	r3, #0
 800d87c:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800d87e:	7bfa      	ldrb	r2, [r7, #15]
 800d880:	4613      	mov	r3, r2
 800d882:	00db      	lsls	r3, r3, #3
 800d884:	4413      	add	r3, r2
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	4413      	add	r3, r2
 800d890:	3304      	adds	r3, #4
 800d892:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800d894:	2300      	movs	r3, #0
 800d896:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800d898:	2300      	movs	r3, #0
 800d89a:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800d89c:	2300      	movs	r3, #0
 800d89e:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800d8a0:	69bb      	ldr	r3, [r7, #24]
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	77fb      	strb	r3, [r7, #31]
 800d8a6:	e0b9      	b.n	800da1c <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	78da      	ldrb	r2, [r3, #3]
 800d8ac:	7ffb      	ldrb	r3, [r7, #31]
 800d8ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8b2:	fb02 f201 	mul.w	r2, r2, r1
 800d8b6:	1a9b      	subs	r3, r3, r2
 800d8b8:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800d8ba:	7ffb      	ldrb	r3, [r7, #31]
 800d8bc:	3301      	adds	r3, #1
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	78d2      	ldrb	r2, [r2, #3]
 800d8c2:	fb93 f1f2 	sdiv	r1, r3, r2
 800d8c6:	fb02 f201 	mul.w	r2, r2, r1
 800d8ca:	1a9b      	subs	r3, r3, r2
 800d8cc:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	789b      	ldrb	r3, [r3, #2]
 800d8d2:	7dfa      	ldrb	r2, [r7, #23]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	f080 809e 	bcs.w	800da16 <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800d8de:	7dba      	ldrb	r2, [r7, #22]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	f080 8098 	bcs.w	800da16 <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800d8e6:	7dfb      	ldrb	r3, [r7, #23]
 800d8e8:	68ba      	ldr	r2, [r7, #8]
 800d8ea:	3348      	adds	r3, #72	; 0x48
 800d8ec:	009b      	lsls	r3, r3, #2
 800d8ee:	4413      	add	r3, r2
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d10e      	bne.n	800d914 <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800d8f6:	7dfb      	ldrb	r3, [r7, #23]
 800d8f8:	68ba      	ldr	r2, [r7, #8]
 800d8fa:	3360      	adds	r3, #96	; 0x60
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	4413      	add	r3, r2
 800d900:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800d902:	2b00      	cmp	r3, #0
 800d904:	d106      	bne.n	800d914 <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800d906:	7dfb      	ldrb	r3, [r7, #23]
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	4413      	add	r3, r2
 800d90c:	2200      	movs	r2, #0
 800d90e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800d912:	e043      	b.n	800d99c <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800d914:	7dfb      	ldrb	r3, [r7, #23]
 800d916:	68ba      	ldr	r2, [r7, #8]
 800d918:	3348      	adds	r3, #72	; 0x48
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	4413      	add	r3, r2
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	2b00      	cmp	r3, #0
 800d922:	db0e      	blt.n	800d942 <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800d924:	7dfb      	ldrb	r3, [r7, #23]
 800d926:	68ba      	ldr	r2, [r7, #8]
 800d928:	3360      	adds	r3, #96	; 0x60
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	4413      	add	r3, r2
 800d92e:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800d930:	2b00      	cmp	r3, #0
 800d932:	db06      	blt.n	800d942 <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800d934:	7dfb      	ldrb	r3, [r7, #23]
 800d936:	68ba      	ldr	r2, [r7, #8]
 800d938:	4413      	add	r3, r2
 800d93a:	2201      	movs	r2, #1
 800d93c:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800d940:	e02c      	b.n	800d99c <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800d942:	7dfb      	ldrb	r3, [r7, #23]
 800d944:	68ba      	ldr	r2, [r7, #8]
 800d946:	3348      	adds	r3, #72	; 0x48
 800d948:	009b      	lsls	r3, r3, #2
 800d94a:	4413      	add	r3, r2
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	da1e      	bge.n	800d990 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800d952:	7dfb      	ldrb	r3, [r7, #23]
 800d954:	68ba      	ldr	r2, [r7, #8]
 800d956:	3360      	adds	r3, #96	; 0x60
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	4413      	add	r3, r2
 800d95c:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800d95e:	2b00      	cmp	r3, #0
 800d960:	db16      	blt.n	800d990 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800d962:	7dbb      	ldrb	r3, [r7, #22]
 800d964:	68ba      	ldr	r2, [r7, #8]
 800d966:	3348      	adds	r3, #72	; 0x48
 800d968:	009b      	lsls	r3, r3, #2
 800d96a:	4413      	add	r3, r2
 800d96c:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800d96e:	2b00      	cmp	r3, #0
 800d970:	db0e      	blt.n	800d990 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800d972:	7dbb      	ldrb	r3, [r7, #22]
 800d974:	68ba      	ldr	r2, [r7, #8]
 800d976:	3360      	adds	r3, #96	; 0x60
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	4413      	add	r3, r2
 800d97c:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800d97e:	2b00      	cmp	r3, #0
 800d980:	da06      	bge.n	800d990 <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800d982:	7dfb      	ldrb	r3, [r7, #23]
 800d984:	68ba      	ldr	r2, [r7, #8]
 800d986:	4413      	add	r3, r2
 800d988:	2201      	movs	r2, #1
 800d98a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800d98e:	e005      	b.n	800d99c <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800d990:	7dfb      	ldrb	r3, [r7, #23]
 800d992:	68ba      	ldr	r2, [r7, #8]
 800d994:	4413      	add	r3, r2
 800d996:	2200      	movs	r2, #0
 800d998:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800d99c:	7dfb      	ldrb	r3, [r7, #23]
 800d99e:	68ba      	ldr	r2, [r7, #8]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d035      	beq.n	800da16 <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800d9aa:	69bb      	ldr	r3, [r7, #24]
 800d9ac:	7ffa      	ldrb	r2, [r7, #31]
 800d9ae:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800d9b0:	7dfb      	ldrb	r3, [r7, #23]
 800d9b2:	68ba      	ldr	r2, [r7, #8]
 800d9b4:	009b      	lsls	r3, r3, #2
 800d9b6:	4413      	add	r3, r2
 800d9b8:	685c      	ldr	r4, [r3, #4]
 800d9ba:	7dfb      	ldrb	r3, [r7, #23]
 800d9bc:	68ba      	ldr	r2, [r7, #8]
 800d9be:	3318      	adds	r3, #24
 800d9c0:	009b      	lsls	r3, r3, #2
 800d9c2:	4413      	add	r3, r2
 800d9c4:	685d      	ldr	r5, [r3, #4]
 800d9c6:	7dfb      	ldrb	r3, [r7, #23]
 800d9c8:	68ba      	ldr	r2, [r7, #8]
 800d9ca:	3330      	adds	r3, #48	; 0x30
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	4413      	add	r3, r2
 800d9d0:	685e      	ldr	r6, [r3, #4]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	78d2      	ldrb	r2, [r2, #3]
 800d9da:	69b9      	ldr	r1, [r7, #24]
 800d9dc:	3118      	adds	r1, #24
 800d9de:	7ff8      	ldrb	r0, [r7, #31]
 800d9e0:	9105      	str	r1, [sp, #20]
 800d9e2:	9204      	str	r2, [sp, #16]
 800d9e4:	9303      	str	r3, [sp, #12]
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	9302      	str	r3, [sp, #8]
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	9301      	str	r3, [sp, #4]
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	9300      	str	r3, [sp, #0]
 800d9f2:	4633      	mov	r3, r6
 800d9f4:	462a      	mov	r2, r5
 800d9f6:	4621      	mov	r1, r4
 800d9f8:	f000 f81c 	bl	800da34 <VL53LX_f_028>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800da00:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800da04:	f113 0f0f 	cmn.w	r3, #15
 800da08:	d105      	bne.n	800da16 <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800da0a:	7dfb      	ldrb	r3, [r7, #23]
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	4413      	add	r3, r2
 800da10:	2200      	movs	r2, #0
 800da12:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800da16:	7ffb      	ldrb	r3, [r7, #31]
 800da18:	3301      	adds	r3, #1
 800da1a:	77fb      	strb	r3, [r7, #31]
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	791b      	ldrb	r3, [r3, #4]
 800da20:	7ffa      	ldrb	r2, [r7, #31]
 800da22:	429a      	cmp	r2, r3
 800da24:	f4ff af40 	bcc.w	800d8a8 <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800da28:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3724      	adds	r7, #36	; 0x24
 800da30:	46bd      	mov	sp, r7
 800da32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da34 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800da34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da38:	b09e      	sub	sp, #120	; 0x78
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	64b9      	str	r1, [r7, #72]	; 0x48
 800da3e:	647a      	str	r2, [r7, #68]	; 0x44
 800da40:	643b      	str	r3, [r7, #64]	; 0x40
 800da42:	4603      	mov	r3, r0
 800da44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800da48:	23f1      	movs	r3, #241	; 0xf1
 800da4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800da4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da52:	f04f 0300 	mov.w	r3, #0
 800da56:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800da5a:	f04f 0200 	mov.w	r2, #0
 800da5e:	f04f 0300 	mov.w	r3, #0
 800da62:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  half_b_minus_amb = 0;
 800da66:	f04f 0200 	mov.w	r2, #0
 800da6a:	f04f 0300 	mov.w	r3, #0
 800da6e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800da72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da74:	4618      	mov	r0, r3
 800da76:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800da7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da7e:	461a      	mov	r2, r3
 800da80:	ea4f 73e2 	mov.w	r3, r2, asr #31
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800da84:	ebb0 0802 	subs.w	r8, r0, r2
 800da88:	eb61 0903 	sbc.w	r9, r1, r3
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800da8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da8e:	461a      	mov	r2, r3
 800da90:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800da94:	ebb8 0a02 	subs.w	sl, r8, r2
 800da98:	eb69 0b03 	sbc.w	fp, r9, r3
 800da9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800daa0:	461a      	mov	r2, r3
 800daa2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800daa6:	ebba 0402 	subs.w	r4, sl, r2
 800daaa:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800daae:	f04f 0200 	mov.w	r2, #0
 800dab2:	f04f 0300 	mov.w	r3, #0
 800dab6:	032b      	lsls	r3, r5, #12
 800dab8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800dabc:	0322      	lsls	r2, r4, #12
 800dabe:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800dac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dac4:	4618      	mov	r0, r3
 800dac6:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800daca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dace:	461a      	mov	r2, r3
 800dad0:	ea4f 73e2 	mov.w	r3, r2, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800dad4:	1a84      	subs	r4, r0, r2
 800dad6:	63bc      	str	r4, [r7, #56]	; 0x38
 800dad8:	eb61 0303 	sbc.w	r3, r1, r3
 800dadc:	63fb      	str	r3, [r7, #60]	; 0x3c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800dade:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dae2:	461a      	mov	r2, r3
 800dae4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800dae8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800daec:	4621      	mov	r1, r4
 800daee:	1a89      	subs	r1, r1, r2
 800daf0:	6339      	str	r1, [r7, #48]	; 0x30
 800daf2:	4629      	mov	r1, r5
 800daf4:	eb61 0303 	sbc.w	r3, r1, r3
 800daf8:	637b      	str	r3, [r7, #52]	; 0x34
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800dafa:	f04f 0200 	mov.w	r2, #0
 800dafe:	f04f 0300 	mov.w	r3, #0
 800db02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800db06:	4629      	mov	r1, r5
 800db08:	030b      	lsls	r3, r1, #12
 800db0a:	4621      	mov	r1, r4
 800db0c:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800db10:	4621      	mov	r1, r4
 800db12:	030a      	lsls	r2, r1, #12
 800db14:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	if (half_b_minus_amb != 0) {
 800db18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800db1c:	4313      	orrs	r3, r2
 800db1e:	f000 809c 	beq.w	800dc5a <VL53LX_f_028+0x226>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800db22:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800db26:	f04f 0000 	mov.w	r0, #0
 800db2a:	f04f 0100 	mov.w	r1, #0
 800db2e:	0319      	lsls	r1, r3, #12
 800db30:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800db34:	0310      	lsls	r0, r2, #12
 800db36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800db3a:	1814      	adds	r4, r2, r0
 800db3c:	623c      	str	r4, [r7, #32]
 800db3e:	414b      	adcs	r3, r1
 800db40:	627b      	str	r3, [r7, #36]	; 0x24
 800db42:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800db46:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800db4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800db4e:	1891      	adds	r1, r2, r2
 800db50:	61b9      	str	r1, [r7, #24]
 800db52:	415b      	adcs	r3, r3
 800db54:	61fb      	str	r3, [r7, #28]
 800db56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800db5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800db5e:	f7f2 fb8f 	bl	8000280 <__aeabi_ldivmod>
 800db62:	4602      	mov	r2, r0
 800db64:	460b      	mov	r3, r1
 800db66:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		mean_phase  +=  2048;
 800db6a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800db6e:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800db72:	6139      	str	r1, [r7, #16]
 800db74:	f143 0300 	adc.w	r3, r3, #0
 800db78:	617b      	str	r3, [r7, #20]
 800db7a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800db7e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase  += (4096 * (int64_t)bin);
 800db82:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 800db86:	f04f 0100 	mov.w	r1, #0
 800db8a:	f04f 0200 	mov.w	r2, #0
 800db8e:	f04f 0300 	mov.w	r3, #0
 800db92:	030b      	lsls	r3, r1, #12
 800db94:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800db98:	0302      	lsls	r2, r0, #12
 800db9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800db9e:	1884      	adds	r4, r0, r2
 800dba0:	60bc      	str	r4, [r7, #8]
 800dba2:	eb41 0303 	adc.w	r3, r1, r3
 800dba6:	60fb      	str	r3, [r7, #12]
 800dba8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800dbac:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800dbb0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800dbb4:	1c51      	adds	r1, r2, #1
 800dbb6:	62b9      	str	r1, [r7, #40]	; 0x28
 800dbb8:	f143 0300 	adc.w	r3, r3, #0
 800dbbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbbe:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800dbc2:	462b      	mov	r3, r5
 800dbc4:	0fdb      	lsrs	r3, r3, #31
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	f04f 0300 	mov.w	r3, #0
 800dbcc:	4621      	mov	r1, r4
 800dbce:	1851      	adds	r1, r2, r1
 800dbd0:	6039      	str	r1, [r7, #0]
 800dbd2:	4629      	mov	r1, r5
 800dbd4:	eb43 0101 	adc.w	r1, r3, r1
 800dbd8:	6079      	str	r1, [r7, #4]
 800dbda:	f04f 0200 	mov.w	r2, #0
 800dbde:	f04f 0300 	mov.w	r3, #0
 800dbe2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	084a      	lsrs	r2, r1, #1
 800dbea:	4629      	mov	r1, r5
 800dbec:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800dbf0:	4629      	mov	r1, r5
 800dbf2:	104b      	asrs	r3, r1, #1
 800dbf4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		if (mean_phase  < 0)
 800dbf8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800dbfc:	2a00      	cmp	r2, #0
 800dbfe:	f173 0300 	sbcs.w	r3, r3, #0
 800dc02:	da05      	bge.n	800dc10 <VL53LX_f_028+0x1dc>
			mean_phase = 0;
 800dc04:	f04f 0200 	mov.w	r2, #0
 800dc08:	f04f 0300 	mov.w	r3, #0
 800dc0c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800dc10:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800dc14:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800dc18:	f04f 0100 	mov.w	r1, #0
 800dc1c:	4290      	cmp	r0, r2
 800dc1e:	eb71 0303 	sbcs.w	r3, r1, r3
 800dc22:	da05      	bge.n	800dc30 <VL53LX_f_028+0x1fc>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800dc24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc28:	f04f 0300 	mov.w	r3, #0
 800dc2c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		mean_phase32 = (int32_t)mean_phase;
 800dc30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc32:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800dc34:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800dc38:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800dc3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc3c:	fb93 f1f2 	sdiv	r1, r3, r2
 800dc40:	fb02 f201 	mul.w	r2, r2, r1
 800dc44:	1a9b      	subs	r3, r3, r2
 800dc46:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase = mean_phase32;
 800dc48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800dc50:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		status = VL53LX_ERROR_NONE;
 800dc54:	2300      	movs	r3, #0
 800dc56:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	}

	*pmean_phase = (uint32_t)mean_phase;
 800dc5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dc5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc60:	601a      	str	r2, [r3, #0]

	return status;
 800dc62:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3778      	adds	r7, #120	; 0x78
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dc70 <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b087      	sub	sp, #28
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	60ba      	str	r2, [r7, #8]
 800dc78:	607b      	str	r3, [r7, #4]
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	73fb      	strb	r3, [r7, #15]
 800dc7e:	460b      	mov	r3, r1
 800dc80:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800dc82:	2300      	movs	r3, #0
 800dc84:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800dc86:	2300      	movs	r3, #0
 800dc88:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800dc90:	7bfa      	ldrb	r2, [r7, #15]
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	3206      	adds	r2, #6
 800dc96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dc9a:	6a3b      	ldr	r3, [r7, #32]
 800dc9c:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800dc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca0:	2200      	movs	r2, #0
 800dca2:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800dca4:	2300      	movs	r3, #0
 800dca6:	75fb      	strb	r3, [r7, #23]
 800dca8:	e02f      	b.n	800dd0a <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800dcaa:	7bfa      	ldrb	r2, [r7, #15]
 800dcac:	7dfb      	ldrb	r3, [r7, #23]
 800dcae:	4413      	add	r3, r2
 800dcb0:	68ba      	ldr	r2, [r7, #8]
 800dcb2:	7a92      	ldrb	r2, [r2, #10]
 800dcb4:	441a      	add	r2, r3
 800dcb6:	7bbb      	ldrb	r3, [r7, #14]
 800dcb8:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800dcba:	68ba      	ldr	r2, [r7, #8]
 800dcbc:	7a92      	ldrb	r2, [r2, #10]
 800dcbe:	fb93 f1f2 	sdiv	r1, r3, r2
 800dcc2:	fb02 f201 	mul.w	r2, r2, r1
 800dcc6:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800dcc8:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800dcca:	7dfa      	ldrb	r2, [r7, #23]
 800dccc:	7bbb      	ldrb	r3, [r7, #14]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d20a      	bcs.n	800dce8 <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	7db9      	ldrb	r1, [r7, #22]
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	3106      	adds	r1, #6
 800dcdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dce0:	441a      	add	r2, r3
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	601a      	str	r2, [r3, #0]
 800dce6:	e00d      	b.n	800dd04 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800dce8:	7dfa      	ldrb	r2, [r7, #23]
 800dcea:	7bbb      	ldrb	r3, [r7, #14]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d909      	bls.n	800dd04 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800dcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	7db9      	ldrb	r1, [r7, #22]
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	3106      	adds	r1, #6
 800dcfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dcfe:	441a      	add	r2, r3
 800dd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd02:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800dd04:	7dfb      	ldrb	r3, [r7, #23]
 800dd06:	3301      	adds	r3, #1
 800dd08:	75fb      	strb	r3, [r7, #23]
 800dd0a:	7bbb      	ldrb	r3, [r7, #14]
 800dd0c:	005a      	lsls	r2, r3, #1
 800dd0e:	7dfb      	ldrb	r3, [r7, #23]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	daca      	bge.n	800dcaa <VL53LX_f_022+0x3a>
	}
}
 800dd14:	bf00      	nop
 800dd16:	bf00      	nop
 800dd18:	371c      	adds	r7, #28
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr

0800dd22 <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b088      	sub	sp, #32
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	60ba      	str	r2, [r7, #8]
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	81fb      	strh	r3, [r7, #14]
 800dd30:	460b      	mov	r3, r1
 800dd32:	81bb      	strh	r3, [r7, #12]
 800dd34:	4613      	mov	r3, r2
 800dd36:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800dd44:	2300      	movs	r3, #0
 800dd46:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800dd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4a:	89fa      	ldrh	r2, [r7, #14]
 800dd4c:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800dd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd50:	89ba      	ldrh	r2, [r7, #12]
 800dd52:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800dd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd56:	68ba      	ldr	r2, [r7, #8]
 800dd58:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800dd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5c:	88fa      	ldrh	r2, [r7, #6]
 800dd5e:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800dd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd62:	8a5b      	ldrh	r3, [r3, #18]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d101      	bne.n	800dd6c <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800dd68:	23f1      	movs	r3, #241	; 0xf1
 800dd6a:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800dd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6e:	699b      	ldr	r3, [r3, #24]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d101      	bne.n	800dd78 <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800dd74:	23f1      	movs	r3, #241	; 0xf1
 800dd76:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800dd78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d16f      	bne.n	800de60 <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800dd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd82:	8a5b      	ldrh	r3, [r3, #18]
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7fd faa6 	bl	800b2d6 <VL53LX_calc_pll_period_us>
 800dd8a:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800dd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd8e:	699b      	ldr	r3, [r3, #24]
 800dd90:	3301      	adds	r3, #1
 800dd92:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800dd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd96:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800dd98:	4619      	mov	r1, r3
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dda0:	6978      	ldr	r0, [r7, #20]
 800dda2:	f7fd faaf 	bl	800b304 <VL53LX_duration_maths>
 800dda6:	4602      	mov	r2, r0
 800dda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddaa:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800ddac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddae:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800ddb0:	0119      	lsls	r1, r3, #4
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ddb8:	6978      	ldr	r0, [r7, #20]
 800ddba:	f7fd faa3 	bl	800b304 <VL53LX_duration_maths>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc2:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800ddc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800ddc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddca:	69db      	ldr	r3, [r3, #28]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	4610      	mov	r0, r2
 800ddd0:	f7fd fd01 	bl	800b7d6 <VL53LX_rate_maths>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddda:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800dddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800dde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde2:	6a1b      	ldr	r3, [r3, #32]
 800dde4:	4619      	mov	r1, r3
 800dde6:	4610      	mov	r0, r2
 800dde8:	f7fd fcf5 	bl	800b7d6 <VL53LX_rate_maths>
 800ddec:	4603      	mov	r3, r0
 800ddee:	461a      	mov	r2, r3
 800ddf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf2:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800ddf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfc:	6a1b      	ldr	r3, [r3, #32]
 800ddfe:	4619      	mov	r1, r3
 800de00:	4610      	mov	r0, r2
 800de02:	f7fd fce8 	bl	800b7d6 <VL53LX_rate_maths>
 800de06:	4603      	mov	r3, r0
 800de08:	461a      	mov	r2, r3
 800de0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0c:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800de0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de10:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800de12:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800de14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de16:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 800de18:	4413      	add	r3, r2
 800de1a:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800de1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800de20:	2b01      	cmp	r3, #1
 800de22:	d905      	bls.n	800de30 <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800de24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800de28:	69ba      	ldr	r2, [r7, #24]
 800de2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800de2e:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800de30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de32:	8ada      	ldrh	r2, [r3, #22]
 800de34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de38:	69b9      	ldr	r1, [r7, #24]
 800de3a:	2006      	movs	r0, #6
 800de3c:	f7fd fd10 	bl	800b860 <VL53LX_rate_per_spad_maths>
 800de40:	4603      	mov	r3, r0
 800de42:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800de44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de46:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800de48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800de4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4e:	8ad9      	ldrh	r1, [r3, #22]
 800de50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de52:	69db      	ldr	r3, [r3, #28]
 800de54:	461a      	mov	r2, r3
 800de56:	f7fd faaf 	bl	800b3b8 <VL53LX_events_per_spad_maths>
 800de5a:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800de5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5e:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800de60:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800de64:	4618      	mov	r0, r3
 800de66:	3720      	adds	r7, #32
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800de6c:	b590      	push	{r4, r7, lr}
 800de6e:	b085      	sub	sp, #20
 800de70:	af02      	add	r7, sp, #8
 800de72:	4603      	mov	r3, r0
 800de74:	603a      	str	r2, [r7, #0]
 800de76:	80fb      	strh	r3, [r7, #6]
 800de78:	460b      	mov	r3, r1
 800de7a:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	8a58      	ldrh	r0, [r3, #18]
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	8a9c      	ldrh	r4, [r3, #20]
 800de88:	88fb      	ldrh	r3, [r7, #6]
 800de8a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800de8e:	9201      	str	r2, [sp, #4]
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	2300      	movs	r3, #0
 800de94:	4622      	mov	r2, r4
 800de96:	f7fd fd17 	bl	800b8c8 <VL53LX_range_maths>
 800de9a:	4603      	mov	r3, r0
 800de9c:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	8a58      	ldrh	r0, [r3, #18]
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	8a9c      	ldrh	r4, [r3, #20]
 800deb2:	88fb      	ldrh	r3, [r7, #6]
 800deb4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800deb8:	9201      	str	r2, [sp, #4]
 800deba:	9300      	str	r3, [sp, #0]
 800debc:	2300      	movs	r3, #0
 800debe:	4622      	mov	r2, r4
 800dec0:	f7fd fd02 	bl	800b8c8 <VL53LX_range_maths>
 800dec4:	4603      	mov	r3, r0
 800dec6:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	8a58      	ldrh	r0, [r3, #18]
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	8a9c      	ldrh	r4, [r3, #20]
 800dedc:	88fb      	ldrh	r3, [r7, #6]
 800dede:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800dee2:	9201      	str	r2, [sp, #4]
 800dee4:	9300      	str	r3, [sp, #0]
 800dee6:	2300      	movs	r3, #0
 800dee8:	4622      	mov	r2, r4
 800deea:	f7fd fced 	bl	800b8c8 <VL53LX_range_maths>
 800deee:	4603      	mov	r3, r0
 800def0:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 800def8:	bf00      	nop
 800defa:	370c      	adds	r7, #12
 800defc:	46bd      	mov	sp, r7
 800defe:	bd90      	pop	{r4, r7, pc}

0800df00 <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b086      	sub	sp, #24
 800df04:	af00      	add	r7, sp, #0
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	60b9      	str	r1, [r7, #8]
 800df0a:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800df0c:	2300      	movs	r3, #0
 800df0e:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800df10:	2300      	movs	r3, #0
 800df12:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800df14:	2300      	movs	r3, #0
 800df16:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800df18:	2300      	movs	r3, #0
 800df1a:	757b      	strb	r3, [r7, #21]





	memcpy(
 800df1c:	22ac      	movs	r2, #172	; 0xac
 800df1e:	68b9      	ldr	r1, [r7, #8]
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f006 f8d9 	bl	80140d8 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800df26:	2300      	movs	r3, #0
 800df28:	75fb      	strb	r3, [r7, #23]
 800df2a:	e008      	b.n	800df3e <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800df2c:	7dfa      	ldrb	r2, [r7, #23]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	3206      	adds	r2, #6
 800df32:	2100      	movs	r1, #0
 800df34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800df38:	7dfb      	ldrb	r3, [r7, #23]
 800df3a:	3301      	adds	r3, #1
 800df3c:	75fb      	strb	r3, [r7, #23]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	7a5b      	ldrb	r3, [r3, #9]
 800df42:	7dfa      	ldrb	r2, [r7, #23]
 800df44:	429a      	cmp	r2, r3
 800df46:	d3f1      	bcc.n	800df2c <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800df48:	68f9      	ldr	r1, [r7, #12]
 800df4a:	68b8      	ldr	r0, [r7, #8]
 800df4c:	f000 f878 	bl	800e040 <VL53LX_f_030>
 800df50:	4603      	mov	r3, r0
 800df52:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	7a9a      	ldrb	r2, [r3, #10]
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	7a9b      	ldrb	r3, [r3, #10]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d203      	bcs.n	800df68 <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	7a9b      	ldrb	r3, [r3, #10]
 800df64:	75bb      	strb	r3, [r7, #22]
 800df66:	e002      	b.n	800df6e <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	7a9b      	ldrb	r3, [r3, #10]
 800df6c:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800df6e:	2300      	movs	r3, #0
 800df70:	75fb      	strb	r3, [r7, #23]
 800df72:	e05c      	b.n	800e02e <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800df74:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	db0f      	blt.n	800df9c <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800df7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800df80:	461a      	mov	r2, r3
 800df82:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800df86:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800df88:	68ba      	ldr	r2, [r7, #8]
 800df8a:	7a92      	ldrb	r2, [r2, #10]
 800df8c:	b252      	sxtb	r2, r2
 800df8e:	fb93 f1f2 	sdiv	r1, r3, r2
 800df92:	fb02 f201 	mul.w	r2, r2, r1
 800df96:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800df98:	757b      	strb	r3, [r7, #21]
 800df9a:	e013      	b.n	800dfc4 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	7a9b      	ldrb	r3, [r3, #10]
 800dfa0:	b25b      	sxtb	r3, r3
 800dfa2:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800dfa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dfa8:	4619      	mov	r1, r3
 800dfaa:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800dfae:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800dfb0:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800dfb2:	68ba      	ldr	r2, [r7, #8]
 800dfb4:	7a92      	ldrb	r2, [r2, #10]
 800dfb6:	b252      	sxtb	r2, r2
 800dfb8:	fb93 f1f2 	sdiv	r1, r3, r2
 800dfbc:	fb02 f201 	mul.w	r2, r2, r1
 800dfc0:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800dfc2:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800dfc4:	7d7b      	ldrb	r3, [r7, #21]
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	3206      	adds	r2, #6
 800dfcc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800dfd0:	7df9      	ldrb	r1, [r7, #23]
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	3106      	adds	r1, #6
 800dfd6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	dd12      	ble.n	800e004 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800dfde:	7d7b      	ldrb	r3, [r7, #21]
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	3206      	adds	r2, #6
 800dfe6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800dfea:	7df9      	ldrb	r1, [r7, #23]
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	3106      	adds	r1, #6
 800dff0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800dff4:	7d79      	ldrb	r1, [r7, #21]
 800dff6:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800dff8:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	1d82      	adds	r2, r0, #6
 800dffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e002:	e006      	b.n	800e012 <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800e004:	7d7b      	ldrb	r3, [r7, #21]
 800e006:	461a      	mov	r2, r3
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	3206      	adds	r2, #6
 800e00c:	2100      	movs	r1, #0
 800e00e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800e012:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e014:	7d7b      	ldrb	r3, [r7, #21]
 800e016:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	3206      	adds	r2, #6
 800e01c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	1d82      	adds	r2, r0, #6
 800e024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800e028:	7dfb      	ldrb	r3, [r7, #23]
 800e02a:	3301      	adds	r3, #1
 800e02c:	75fb      	strb	r3, [r7, #23]
 800e02e:	7dfa      	ldrb	r2, [r7, #23]
 800e030:	7dbb      	ldrb	r3, [r7, #22]
 800e032:	429a      	cmp	r2, r3
 800e034:	d39e      	bcc.n	800df74 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800e036:	bf00      	nop
 800e038:	bf00      	nop
 800e03a:	3718      	adds	r7, #24
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b086      	sub	sp, #24
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800e04a:	2300      	movs	r3, #0
 800e04c:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800e04e:	2300      	movs	r3, #0
 800e050:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800e052:	2300      	movs	r3, #0
 800e054:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800e056:	2300      	movs	r3, #0
 800e058:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e060:	4618      	mov	r0, r3
 800e062:	f7fd fd0b 	bl	800ba7c <VL53LX_decode_vcsel_period>
 800e066:	4603      	mov	r3, r0
	period = 2048 *
 800e068:	02db      	lsls	r3, r3, #11
 800e06a:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d00a      	beq.n	800e088 <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 800e078:	68ba      	ldr	r2, [r7, #8]
 800e07a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e07e:	68b9      	ldr	r1, [r7, #8]
 800e080:	fb01 f202 	mul.w	r2, r1, r2
 800e084:	1a9b      	subs	r3, r3, r2
 800e086:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800e08e:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800e090:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e092:	1ad3      	subs	r3, r2, r3
 800e094:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	dd09      	ble.n	800e0b0 <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	da01      	bge.n	800e0aa <VL53LX_f_030+0x6a>
 800e0a6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800e0aa:	12db      	asrs	r3, r3, #11
 800e0ac:	75fb      	strb	r3, [r7, #23]
 800e0ae:	e008      	b.n	800e0c2 <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	da01      	bge.n	800e0be <VL53LX_f_030+0x7e>
 800e0ba:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800e0be:	12db      	asrs	r3, r3, #11
 800e0c0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800e0c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3718      	adds	r7, #24
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b08e      	sub	sp, #56	; 0x38
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
 800e0d6:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800e100:	22ac      	movs	r2, #172	; 0xac
 800e102:	6879      	ldr	r1, [r7, #4]
 800e104:	6838      	ldr	r0, [r7, #0]
 800e106:	f005 ffe7 	bl	80140d8 <memcpy>


	podata->VL53LX_p_021 = 0;
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	2200      	movs	r2, #0
 800e10e:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e110:	2300      	movs	r3, #0
 800e112:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e116:	e00a      	b.n	800e12e <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800e118:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e11c:	683a      	ldr	r2, [r7, #0]
 800e11e:	4413      	add	r3, r2
 800e120:	2210      	movs	r2, #16
 800e122:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e124:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e128:	3301      	adds	r3, #1
 800e12a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e12e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e132:	2b05      	cmp	r3, #5
 800e134:	d9f0      	bls.n	800e118 <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e136:	2300      	movs	r3, #0
 800e138:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e13c:	e00b      	b.n	800e156 <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800e13e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	3206      	adds	r2, #6
 800e146:	2100      	movs	r1, #0
 800e148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e14c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e150:	3301      	adds	r3, #1
 800e152:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	7a5b      	ldrb	r3, [r3, #9]
 800e15a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e15e:	429a      	cmp	r2, r3
 800e160:	d3ed      	bcc.n	800e13e <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e162:	2300      	movs	r3, #0
 800e164:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e168:	e014      	b.n	800e194 <VL53LX_f_031+0xc6>
		bin_initial_index[lc] = 0x00;
 800e16a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e16e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e172:	4413      	add	r3, r2
 800e174:	2200      	movs	r2, #0
 800e176:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800e17a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e17e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e182:	4413      	add	r3, r2
 800e184:	2200      	movs	r2, #0
 800e186:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e18a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e18e:	3301      	adds	r3, #1
 800e190:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e194:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e198:	2b0f      	cmp	r3, #15
 800e19a:	d9e6      	bls.n	800e16a <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800e19c:	2300      	movs	r3, #0
 800e19e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e1a8:	e06c      	b.n	800e284 <VL53LX_f_031+0x1b6>

		bin_cfg = pidata->bin_seq[lc];
 800e1aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	7b1b      	ldrb	r3, [r3, #12]
 800e1b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800e1b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e1bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e1c0:	4413      	add	r3, r2
 800e1c2:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d116      	bne.n	800e1f8 <VL53LX_f_031+0x12a>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800e1ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e1ce:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e1d2:	0092      	lsls	r2, r2, #2
 800e1d4:	b2d2      	uxtb	r2, r2
 800e1d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e1da:	440b      	add	r3, r1
 800e1dc:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800e1e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1e4:	683a      	ldr	r2, [r7, #0]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e1ec:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800e1ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800e1f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e1fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e200:	441a      	add	r2, r3
 800e202:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800e206:	3201      	adds	r2, #1
 800e208:	b2d2      	uxtb	r2, r2
 800e20a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e20e:	440b      	add	r3, r1
 800e210:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800e214:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e218:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e21c:	4413      	add	r3, r2
 800e21e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 800e226:	2300      	movs	r3, #0
 800e228:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e22c:	e021      	b.n	800e272 <VL53LX_f_031+0x1a4>
			podata->bin_data[VL53LX_p_032+i] +=
 800e22e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e232:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e236:	441a      	add	r2, r3
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	3206      	adds	r2, #6
 800e23c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800e240:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e244:	009a      	lsls	r2, r3, #2
 800e246:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e24a:	441a      	add	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	3206      	adds	r2, #6
 800e250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800e254:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 800e258:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e25c:	4402      	add	r2, r0
 800e25e:	4419      	add	r1, r3
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	3206      	adds	r2, #6
 800e264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800e268:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e26c:	3301      	adds	r3, #1
 800e26e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e272:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e276:	2b03      	cmp	r3, #3
 800e278:	d9d9      	bls.n	800e22e <VL53LX_f_031+0x160>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e27a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e27e:	3301      	adds	r3, #1
 800e280:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e284:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e288:	2b05      	cmp	r3, #5
 800e28a:	d98e      	bls.n	800e1aa <VL53LX_f_031+0xdc>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e28c:	2300      	movs	r3, #0
 800e28e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e292:	e023      	b.n	800e2dc <VL53LX_f_031+0x20e>

		bin_cfg = podata->bin_seq[lc];
 800e294:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e298:	683a      	ldr	r2, [r7, #0]
 800e29a:	4413      	add	r3, r2
 800e29c:	7b1b      	ldrb	r3, [r3, #12]
 800e29e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800e2a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e2a6:	2b0f      	cmp	r3, #15
 800e2a8:	d80d      	bhi.n	800e2c6 <VL53LX_f_031+0x1f8>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800e2aa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 800e2ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 800e2b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e2b6:	440a      	add	r2, r1
 800e2b8:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800e2bc:	683a      	ldr	r2, [r7, #0]
 800e2be:	4413      	add	r3, r2
 800e2c0:	460a      	mov	r2, r1
 800e2c2:	749a      	strb	r2, [r3, #18]
 800e2c4:	e005      	b.n	800e2d2 <VL53LX_f_031+0x204>
		else
			podata->bin_rep[lc] = 0;
 800e2c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e2ca:	683a      	ldr	r2, [r7, #0]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e2d2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e2dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e2e0:	2b05      	cmp	r3, #5
 800e2e2:	d9d7      	bls.n	800e294 <VL53LX_f_031+0x1c6>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800e2e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	b2da      	uxtb	r2, r3
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e2f6:	e052      	b.n	800e39e <VL53LX_f_031+0x2d0>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800e2f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e2fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e300:	4413      	add	r3, r2
 800e302:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e306:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 800e308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	dd42      	ble.n	800e394 <VL53LX_f_031+0x2c6>

			VL53LX_p_032 = bin_initial_index[lc];
 800e30e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e312:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e316:	4413      	add	r3, r2
 800e318:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e31c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800e320:	2300      	movs	r3, #0
 800e322:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e326:	e031      	b.n	800e38c <VL53LX_f_031+0x2be>
				podata->bin_data[VL53LX_p_032+i] +=
 800e328:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e32c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e330:	441a      	add	r2, r3
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	3206      	adds	r2, #6
 800e336:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800e33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33c:	0fda      	lsrs	r2, r3, #31
 800e33e:	4413      	add	r3, r2
 800e340:	105b      	asrs	r3, r3, #1
 800e342:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800e344:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e348:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e34c:	441a      	add	r2, r3
 800e34e:	4401      	add	r1, r0
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	3206      	adds	r2, #6
 800e354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800e358:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e35c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e360:	441a      	add	r2, r3
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	3206      	adds	r2, #6
 800e366:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e36a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e36e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e372:	441a      	add	r2, r3
 800e374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e376:	fb91 f1f3 	sdiv	r1, r1, r3
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	3206      	adds	r2, #6
 800e37e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800e382:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e386:	3301      	adds	r3, #1
 800e388:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e38c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e390:	2b03      	cmp	r3, #3
 800e392:	d9c9      	bls.n	800e328 <VL53LX_f_031+0x25a>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e394:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e398:	3301      	adds	r3, #1
 800e39a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e39e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e3a2:	2b0f      	cmp	r3, #15
 800e3a4:	d9a8      	bls.n	800e2f8 <VL53LX_f_031+0x22a>
		}
	}



	podata->number_of_ambient_bins = 0;
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800e3ac:	7bfb      	ldrb	r3, [r7, #15]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d102      	bne.n	800e3b8 <VL53LX_f_031+0x2ea>
		(bin_repeat_count[15] > 0))
 800e3b2:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d002      	beq.n	800e3be <VL53LX_f_031+0x2f0>
		podata->number_of_ambient_bins = 4;
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	2204      	movs	r2, #4
 800e3bc:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800e3be:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3738      	adds	r7, #56	; 0x38
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800e3ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3cc:	b0cb      	sub	sp, #300	; 0x12c
 800e3ce:	af06      	add	r7, sp, #24
 800e3d0:	f107 040c 	add.w	r4, r7, #12
 800e3d4:	6020      	str	r0, [r4, #0]
 800e3d6:	f107 0008 	add.w	r0, r7, #8
 800e3da:	6001      	str	r1, [r0, #0]
 800e3dc:	1d39      	adds	r1, r7, #4
 800e3de:	600a      	str	r2, [r1, #0]
 800e3e0:	463a      	mov	r2, r7
 800e3e2:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800e3ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e3ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800e3f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e3f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800e3fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800e3fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800e402:	f107 0318 	add.w	r3, r7, #24
 800e406:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800e40a:	2300      	movs	r3, #0
 800e40c:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800e40e:	2300      	movs	r3, #0
 800e410:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 800e414:	2300      	movs	r3, #0
 800e416:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 800e41a:	2300      	movs	r3, #0
 800e41c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 800e420:	2300      	movs	r3, #0
 800e422:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800e426:	2300      	movs	r3, #0
 800e428:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 800e42c:	2300      	movs	r3, #0
 800e42e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800e432:	463b      	mov	r3, r7
 800e434:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800e438:	6818      	ldr	r0, [r3, #0]
 800e43a:	f7ff fe48 	bl	800e0ce <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800e43e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e442:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800e444:	b299      	uxth	r1, r3
 800e446:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e44a:	3348      	adds	r3, #72	; 0x48
 800e44c:	461a      	mov	r2, r3
 800e44e:	2000      	movs	r0, #0
 800e450:	f7fd fb65 	bl	800bb1e <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800e454:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e458:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e45c:	3348      	adds	r3, #72	; 0x48
 800e45e:	4619      	mov	r1, r3
 800e460:	4610      	mov	r0, r2
 800e462:	f7fd fb1e 	bl	800baa2 <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800e466:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d12d      	bne.n	800e4ca <VL53LX_hist_process_data+0x100>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800e46e:	1d3b      	adds	r3, r7, #4
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800e476:	2b00      	cmp	r3, #0
 800e478:	d027      	beq.n	800e4ca <VL53LX_hist_process_data+0x100>
		status =
		VL53LX_f_032(
 800e47a:	1d3b      	adds	r3, r7, #4
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e480:	1d3b      	adds	r3, r7, #4
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 800e488:	1d3b      	adds	r3, r7, #4
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 800e490:	463b      	mov	r3, r7
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800e498:	463a      	mov	r2, r7
 800e49a:	6812      	ldr	r2, [r2, #0]
 800e49c:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 800e4a0:	4639      	mov	r1, r7
 800e4a2:	6809      	ldr	r1, [r1, #0]
 800e4a4:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 800e4a8:	f107 0014 	add.w	r0, r7, #20
 800e4ac:	9004      	str	r0, [sp, #16]
 800e4ae:	9103      	str	r1, [sp, #12]
 800e4b0:	9202      	str	r2, [sp, #8]
 800e4b2:	9301      	str	r3, [sp, #4]
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	9300      	str	r3, [sp, #0]
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	4632      	mov	r2, r6
 800e4bc:	4629      	mov	r1, r5
 800e4be:	4620      	mov	r0, r4
 800e4c0:	f002 f8bf 	bl	8010642 <VL53LX_f_032>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800e4ca:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d112      	bne.n	800e4f8 <VL53LX_hist_process_data+0x12e>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800e4d2:	1d3b      	adds	r3, r7, #4
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d00c      	beq.n	800e4f8 <VL53LX_hist_process_data+0x12e>
		status =
			VL53LX_f_033(
 800e4de:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800e4e2:	697a      	ldr	r2, [r7, #20]
 800e4e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e4e8:	3348      	adds	r3, #72	; 0x48
 800e4ea:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800e4ee:	f002 faab 	bl	8010a48 <VL53LX_f_033>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800e4f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e4fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 800e500:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e504:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800e508:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e50c:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800e510:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e514:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800e518:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e51c:	2200      	movs	r2, #0
 800e51e:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800e522:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e526:	2200      	movs	r2, #0
 800e528:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 800e52c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e530:	2200      	movs	r2, #0
 800e532:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800e536:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e53a:	2200      	movs	r2, #0
 800e53c:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 800e540:	2300      	movs	r3, #0
 800e542:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800e546:	1d3b      	adds	r3, r7, #4
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d002      	beq.n	800e558 <VL53LX_hist_process_data+0x18e>
		xtalk_enable = 1;
 800e552:	2301      	movs	r3, #1
 800e554:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800e558:	2300      	movs	r3, #0
 800e55a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800e55e:	e0ef      	b.n	800e740 <VL53LX_hist_process_data+0x376>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800e560:	1d3b      	adds	r3, r7, #4
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800e568:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53LX_f_025(
 800e56c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e570:	3348      	adds	r3, #72	; 0x48
 800e572:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800e576:	7814      	ldrb	r4, [r2, #0]
 800e578:	1d3a      	adds	r2, r7, #4
 800e57a:	f107 0108 	add.w	r1, r7, #8
 800e57e:	f107 000c 	add.w	r0, r7, #12
 800e582:	9405      	str	r4, [sp, #20]
 800e584:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800e588:	9404      	str	r4, [sp, #16]
 800e58a:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 800e58e:	9403      	str	r4, [sp, #12]
 800e590:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800e594:	9402      	str	r4, [sp, #8]
 800e596:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800e59a:	9401      	str	r4, [sp, #4]
 800e59c:	9300      	str	r3, [sp, #0]
 800e59e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e5a2:	6812      	ldr	r2, [r2, #0]
 800e5a4:	6809      	ldr	r1, [r1, #0]
 800e5a6:	6800      	ldr	r0, [r0, #0]
 800e5a8:	f7fe fec1 	bl	800d32e <VL53LX_f_025>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800e5b2:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	f040 80bc 	bne.w	800e734 <VL53LX_hist_process_data+0x36a>
 800e5bc:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	f040 80b7 	bne.w	800e734 <VL53LX_hist_process_data+0x36a>
			continue;



		if (presults->active_results == 0) {
 800e5c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e5ca:	7c9b      	ldrb	r3, [r3, #18]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d110      	bne.n	800e5f2 <VL53LX_hist_process_data+0x228>
			pdata = &(presults->VL53LX_p_003[0]);
 800e5d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e5d4:	3314      	adds	r3, #20
 800e5d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800e5da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e5de:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800e5e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e5e4:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800e5e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e5ea:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800e5ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e5f0:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800e5f2:	1d3b      	adds	r3, r7, #4
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800e5f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800e5fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	461a      	mov	r2, r3
 800e604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e608:	fb02 f303 	mul.w	r3, r2, r3
 800e60c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800e610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e614:	011b      	lsls	r3, r3, #4
 800e616:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800e61a:	2300      	movs	r3, #0
 800e61c:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800e620:	e07f      	b.n	800e722 <VL53LX_hist_process_data+0x358>

			pdata = &(presults->VL53LX_p_003[t]);
 800e622:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800e626:	224c      	movs	r2, #76	; 0x4c
 800e628:	fb02 f303 	mul.w	r3, r2, r3
 800e62c:	3310      	adds	r3, #16
 800e62e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800e632:	4413      	add	r3, r2
 800e634:	3304      	adds	r3, #4
 800e636:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800e63a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e63e:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800e642:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e646:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800e64a:	429a      	cmp	r2, r3
 800e64c:	dd0e      	ble.n	800e66c <VL53LX_hist_process_data+0x2a2>
				delta_mm =
					pdata->max_range_mm -
 800e64e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e652:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800e656:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800e658:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e65c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800e660:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800e662:	1ad3      	subs	r3, r2, r3
 800e664:	b29b      	uxth	r3, r3
				delta_mm =
 800e666:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800e66a:	e00d      	b.n	800e688 <VL53LX_hist_process_data+0x2be>
			else
				delta_mm =
					pdata->min_range_mm -
 800e66c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e670:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800e674:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800e676:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e67a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800e67e:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800e680:	1ad3      	subs	r3, r2, r3
 800e682:	b29b      	uxth	r3, r3
				delta_mm =
 800e684:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800e688:	1d3b      	adds	r3, r7, #4
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 800e68e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800e692:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	461a      	mov	r2, r3
 800e69a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e69e:	fb02 f303 	mul.w	r3, r2, r3
 800e6a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 800e6a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e6aa:	015b      	lsls	r3, r3, #5
 800e6ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 800e6b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e6b4:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800e6b8:	1d3b      	adds	r3, r7, #4
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	dd29      	ble.n	800e718 <VL53LX_hist_process_data+0x34e>
			pdata->median_range_mm  <
 800e6c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e6c8:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800e6cc:	1d3b      	adds	r3, r7, #4
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	da1f      	bge.n	800e718 <VL53LX_hist_process_data+0x34e>
			pdata->VL53LX_p_009 <
 800e6d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800e6de:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d918      	bls.n	800e718 <VL53LX_hist_process_data+0x34e>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800e6e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e6ea:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e6ec:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800e6ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d910      	bls.n	800e718 <VL53LX_hist_process_data+0x34e>
			delta_mm <
 800e6f6:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800e6fa:	1d3a      	adds	r2, r7, #4
 800e6fc:	6812      	ldr	r2, [r2, #0]
 800e6fe:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800e700:	4293      	cmp	r3, r2
 800e702:	da09      	bge.n	800e718 <VL53LX_hist_process_data+0x34e>



				memcpy(
					&(presults->xmonitor),
 800e704:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e708:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 800e70c:	224c      	movs	r2, #76	; 0x4c
 800e70e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800e712:	4618      	mov	r0, r3
 800e714:	f005 fce0 	bl	80140d8 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800e718:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800e71c:	3301      	adds	r3, #1
 800e71e:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800e722:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e726:	7c9b      	ldrb	r3, [r3, #18]
 800e728:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 800e72c:	429a      	cmp	r2, r3
 800e72e:	f4ff af78 	bcc.w	800e622 <VL53LX_hist_process_data+0x258>
 800e732:	e000      	b.n	800e736 <VL53LX_hist_process_data+0x36c>
			continue;
 800e734:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800e736:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800e73a:	3301      	adds	r3, #1
 800e73c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800e740:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800e744:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800e748:	429a      	cmp	r2, r3
 800e74a:	f67f af09 	bls.w	800e560 <VL53LX_hist_process_data+0x196>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800e74e:	1d3b      	adds	r3, r7, #4
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800e756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 800e75a:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 800e75e:	4618      	mov	r0, r3
 800e760:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800e764:	46bd      	mov	sp, r7
 800e766:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e768 <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b086      	sub	sp, #24
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	460b      	mov	r3, r1
 800e772:	607a      	str	r2, [r7, #4]
 800e774:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e776:	2300      	movs	r3, #0
 800e778:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800e77a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d104      	bne.n	800e78c <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800e782:	68f8      	ldr	r0, [r7, #12]
 800e784:	f7f9 fe88 	bl	8008498 <VL53LX_disable_firmware>
 800e788:	4603      	mov	r3, r0
 800e78a:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800e78c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d104      	bne.n	800e79e <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800e794:	68f8      	ldr	r0, [r7, #12]
 800e796:	f7f9 feb0 	bl	80084fa <VL53LX_enable_powerforce>
 800e79a:	4603      	mov	r3, r0
 800e79c:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800e79e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d105      	bne.n	800e7b2 <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800e7a6:	21fa      	movs	r1, #250	; 0xfa
 800e7a8:	68f8      	ldr	r0, [r7, #12]
 800e7aa:	f002 fb9d 	bl	8010ee8 <VL53LX_WaitUs>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800e7b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d107      	bne.n	800e7ca <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	f240 7181 	movw	r1, #1921	; 0x781
 800e7c0:	68f8      	ldr	r0, [r7, #12]
 800e7c2:	f002 fa9d 	bl	8010d00 <VL53LX_WrByte>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800e7ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d107      	bne.n	800e7e2 <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800e7d2:	2205      	movs	r2, #5
 800e7d4:	f240 6183 	movw	r1, #1667	; 0x683
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	f002 fa91 	bl	8010d00 <VL53LX_WrByte>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800e7e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d105      	bne.n	800e7f6 <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800e7ea:	6879      	ldr	r1, [r7, #4]
 800e7ec:	68f8      	ldr	r0, [r7, #12]
 800e7ee:	f002 fb7b 	bl	8010ee8 <VL53LX_WaitUs>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800e7f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d107      	bne.n	800e80e <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800e7fe:	2201      	movs	r2, #1
 800e800:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800e804:	68f8      	ldr	r0, [r7, #12]
 800e806:	f002 fa7b 	bl	8010d00 <VL53LX_WrByte>
 800e80a:	4603      	mov	r3, r0
 800e80c:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800e80e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d108      	bne.n	800e828 <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800e816:	897b      	ldrh	r3, [r7, #10]
 800e818:	461a      	mov	r2, r3
 800e81a:	f240 7184 	movw	r1, #1924	; 0x784
 800e81e:	68f8      	ldr	r0, [r7, #12]
 800e820:	f002 fa98 	bl	8010d54 <VL53LX_WrWord>
 800e824:	4603      	mov	r3, r0
 800e826:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800e828:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3718      	adds	r7, #24
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b086      	sub	sp, #24
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	607b      	str	r3, [r7, #4]
 800e83e:	460b      	mov	r3, r1
 800e840:	72fb      	strb	r3, [r7, #11]
 800e842:	4613      	mov	r3, r2
 800e844:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800e846:	2300      	movs	r3, #0
 800e848:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800e84a:	2300      	movs	r3, #0
 800e84c:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800e84e:	7afb      	ldrb	r3, [r7, #11]
 800e850:	75bb      	strb	r3, [r7, #22]
 800e852:	e041      	b.n	800e8d8 <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800e854:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d108      	bne.n	800e86e <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800e85c:	7dbb      	ldrb	r3, [r7, #22]
 800e85e:	461a      	mov	r2, r3
 800e860:	f240 7194 	movw	r1, #1940	; 0x794
 800e864:	68f8      	ldr	r0, [r7, #12]
 800e866:	f002 fa4b 	bl	8010d00 <VL53LX_WrByte>
 800e86a:	4603      	mov	r3, r0
 800e86c:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800e86e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d107      	bne.n	800e886 <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800e876:	2200      	movs	r2, #0
 800e878:	f240 7183 	movw	r1, #1923	; 0x783
 800e87c:	68f8      	ldr	r0, [r7, #12]
 800e87e:	f002 fa3f 	bl	8010d00 <VL53LX_WrByte>
 800e882:	4603      	mov	r3, r0
 800e884:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800e886:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d105      	bne.n	800e89a <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800e88e:	2105      	movs	r1, #5
 800e890:	68f8      	ldr	r0, [r7, #12]
 800e892:	f002 fb29 	bl	8010ee8 <VL53LX_WaitUs>
 800e896:	4603      	mov	r3, r0
 800e898:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800e89a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d107      	bne.n	800e8b2 <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	f240 7183 	movw	r1, #1923	; 0x783
 800e8a8:	68f8      	ldr	r0, [r7, #12]
 800e8aa:	f002 fa29 	bl	8010d00 <VL53LX_WrByte>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800e8b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d108      	bne.n	800e8cc <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800e8ba:	2304      	movs	r3, #4
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 800e8c2:	68f8      	ldr	r0, [r7, #12]
 800e8c4:	f002 f9e6 	bl	8010c94 <VL53LX_ReadMulti>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	3304      	adds	r3, #4
 800e8d0:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800e8d2:	7dbb      	ldrb	r3, [r7, #22]
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	75bb      	strb	r3, [r7, #22]
 800e8d8:	7dba      	ldrb	r2, [r7, #22]
 800e8da:	7af9      	ldrb	r1, [r7, #11]
 800e8dc:	7abb      	ldrb	r3, [r7, #10]
 800e8de:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	dbb7      	blt.n	800e854 <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800e8e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3718      	adds	r7, #24
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}

0800e8f0 <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b084      	sub	sp, #16
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800e8fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d107      	bne.n	800e914 <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800e904:	2201      	movs	r2, #1
 800e906:	f240 7183 	movw	r1, #1923	; 0x783
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f002 f9f8 	bl	8010d00 <VL53LX_WrByte>
 800e910:	4603      	mov	r3, r0
 800e912:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800e914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d107      	bne.n	800e92c <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800e91c:	2200      	movs	r2, #0
 800e91e:	f240 7181 	movw	r1, #1921	; 0x781
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f002 f9ec 	bl	8010d00 <VL53LX_WrByte>
 800e928:	4603      	mov	r3, r0
 800e92a:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800e92c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d104      	bne.n	800e93e <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f7f9 fdf2 	bl	800851e <VL53LX_disable_powerforce>
 800e93a:	4603      	mov	r3, r0
 800e93c:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800e93e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d104      	bne.n	800e950 <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f7f9 fd94 	bl	8008474 <VL53LX_enable_firmware>
 800e94c:	4603      	mov	r3, r0
 800e94e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800e950:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800e954:	4618      	mov	r0, r3
 800e956:	3710      	adds	r7, #16
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}

0800e95c <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800e95c:	b480      	push	{r7}
 800e95e:	b087      	sub	sp, #28
 800e960:	af00      	add	r7, sp, #0
 800e962:	4603      	mov	r3, r0
 800e964:	60b9      	str	r1, [r7, #8]
 800e966:	607a      	str	r2, [r7, #4]
 800e968:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800e96a:	2300      	movs	r3, #0
 800e96c:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800e96e:	2300      	movs	r3, #0
 800e970:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800e972:	89fb      	ldrh	r3, [r7, #14]
 800e974:	2b03      	cmp	r3, #3
 800e976:	d802      	bhi.n	800e97e <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800e978:	f06f 0308 	mvn.w	r3, #8
 800e97c:	e018      	b.n	800e9b0 <VL53LX_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 800e97e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e982:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	3302      	adds	r3, #2
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	b29b      	uxth	r3, r3
 800e98c:	8afa      	ldrh	r2, [r7, #22]
 800e98e:	1ad3      	subs	r3, r2, r3
 800e990:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800e992:	8afb      	ldrh	r3, [r7, #22]
 800e994:	2bff      	cmp	r3, #255	; 0xff
 800e996:	d901      	bls.n	800e99c <VL53LX_nvm_decode_optical_centre+0x40>
		tmp = 0;
 800e998:	2300      	movs	r3, #0
 800e99a:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800e99c:	8afb      	ldrh	r3, [r7, #22]
 800e99e:	b2da      	uxtb	r2, r3
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	78da      	ldrb	r2, [r3, #3]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	705a      	strb	r2, [r3, #1]

	return status;
 800e9ac:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	371c      	adds	r7, #28
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr

0800e9bc <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800e9bc:	b590      	push	{r4, r7, lr}
 800e9be:	b087      	sub	sp, #28
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	60b9      	str	r1, [r7, #8]
 800e9c6:	607a      	str	r2, [r7, #4]
 800e9c8:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800e9d6:	89fb      	ldrh	r3, [r7, #14]
 800e9d8:	2b37      	cmp	r3, #55	; 0x37
 800e9da:	d802      	bhi.n	800e9e2 <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800e9dc:	f06f 0308 	mvn.w	r3, #8
 800e9e0:	e03e      	b.n	800ea60 <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800e9e2:	68b9      	ldr	r1, [r7, #8]
 800e9e4:	2002      	movs	r0, #2
 800e9e6:	f7f9 fc2b 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	3302      	adds	r3, #2
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	2002      	movs	r0, #2
 800e9fa:	f7f9 fc21 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800ea0a:	099b      	lsrs	r3, r3, #6
 800ea0c:	b29a      	uxth	r2, r3
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2219      	movs	r2, #25
 800ea16:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2205      	movs	r2, #5
 800ea1c:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2205      	movs	r2, #5
 800ea22:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	3304      	adds	r3, #4
 800ea28:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	74fb      	strb	r3, [r7, #19]
 800ea2e:	e012      	b.n	800ea56 <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800ea30:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800ea32:	6979      	ldr	r1, [r7, #20]
 800ea34:	2002      	movs	r0, #2
 800ea36:	f7f9 fc03 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	1d23      	adds	r3, r4, #4
 800ea42:	005b      	lsls	r3, r3, #1
 800ea44:	4413      	add	r3, r2
 800ea46:	460a      	mov	r2, r1
 800ea48:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	3302      	adds	r3, #2
 800ea4e:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800ea50:	7cfb      	ldrb	r3, [r7, #19]
 800ea52:	3301      	adds	r3, #1
 800ea54:	74fb      	strb	r3, [r7, #19]
 800ea56:	7cfb      	ldrb	r3, [r7, #19]
 800ea58:	2b18      	cmp	r3, #24
 800ea5a:	d9e9      	bls.n	800ea30 <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800ea5c:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	371c      	adds	r7, #28
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd90      	pop	{r4, r7, pc}

0800ea68 <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b086      	sub	sp, #24
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	4603      	mov	r3, r0
 800ea70:	60b9      	str	r1, [r7, #8]
 800ea72:	607a      	str	r2, [r7, #4]
 800ea74:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ea76:	2300      	movs	r3, #0
 800ea78:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800ea7a:	89fb      	ldrh	r3, [r7, #14]
 800ea7c:	2b07      	cmp	r3, #7
 800ea7e:	d802      	bhi.n	800ea86 <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ea80:	f06f 0308 	mvn.w	r3, #8
 800ea84:	e027      	b.n	800ead6 <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800ea86:	68b9      	ldr	r1, [r7, #8]
 800ea88:	2002      	movs	r0, #2
 800ea8a:	f7f9 fbd9 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	3302      	adds	r3, #2
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	2002      	movs	r0, #2
 800ea9e:	f7f9 fbcf 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	3304      	adds	r3, #4
 800eaae:	4619      	mov	r1, r3
 800eab0:	2002      	movs	r0, #2
 800eab2:	f7f9 fbc5 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800eab6:	4603      	mov	r3, r0
 800eab8:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	3306      	adds	r3, #6
 800eac2:	4619      	mov	r1, r3
 800eac4:	2002      	movs	r0, #2
 800eac6:	f7f9 fbbb 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800eaca:	4603      	mov	r3, r0
 800eacc:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	80da      	strh	r2, [r3, #6]

	return status;
 800ead2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3718      	adds	r7, #24
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}

0800eade <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800eade:	b580      	push	{r7, lr}
 800eae0:	b086      	sub	sp, #24
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	4603      	mov	r3, r0
 800eae6:	60b9      	str	r1, [r7, #8]
 800eae8:	607a      	str	r2, [r7, #4]
 800eaea:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800eaec:	2300      	movs	r3, #0
 800eaee:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800eaf0:	89fb      	ldrh	r3, [r7, #14]
 800eaf2:	2b0f      	cmp	r3, #15
 800eaf4:	d802      	bhi.n	800eafc <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800eaf6:	f06f 0308 	mvn.w	r3, #8
 800eafa:	e04d      	b.n	800eb98 <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800eafc:	68b9      	ldr	r1, [r7, #8]
 800eafe:	2002      	movs	r0, #2
 800eb00:	f7f9 fb9e 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800eb04:	4603      	mov	r3, r0
 800eb06:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	789a      	ldrb	r2, [r3, #2]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	78da      	ldrb	r2, [r3, #3]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	3304      	adds	r3, #4
 800eb20:	4619      	mov	r1, r3
 800eb22:	2002      	movs	r0, #2
 800eb24:	f7f9 fb8c 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	3306      	adds	r3, #6
 800eb34:	4619      	mov	r1, r3
 800eb36:	2002      	movs	r0, #2
 800eb38:	f7f9 fb82 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	3308      	adds	r3, #8
 800eb48:	4619      	mov	r1, r3
 800eb4a:	2002      	movs	r0, #2
 800eb4c:	f7f9 fb78 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800eb50:	4603      	mov	r3, r0
 800eb52:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	330a      	adds	r3, #10
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	2002      	movs	r0, #2
 800eb60:	f7f9 fb6e 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800eb64:	4603      	mov	r3, r0
 800eb66:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	330c      	adds	r3, #12
 800eb70:	4619      	mov	r1, r3
 800eb72:	2002      	movs	r0, #2
 800eb74:	f7f9 fb64 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	330e      	adds	r3, #14
 800eb84:	4619      	mov	r1, r3
 800eb86:	2002      	movs	r0, #2
 800eb88:	f7f9 fb5a 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	81da      	strh	r2, [r3, #14]

	return status;
 800eb94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3718      	adds	r7, #24
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b086      	sub	sp, #24
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	607b      	str	r3, [r7, #4]
 800ebaa:	460b      	mov	r3, r1
 800ebac:	72fb      	strb	r3, [r7, #11]
 800ebae:	4613      	mov	r3, r2
 800ebb0:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800ebb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d106      	bne.n	800ebcc <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 800ebbe:	2232      	movs	r2, #50	; 0x32
 800ebc0:	2104      	movs	r1, #4
 800ebc2:	68f8      	ldr	r0, [r7, #12]
 800ebc4:	f7ff fdd0 	bl	800e768 <VL53LX_nvm_enable>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 800ebcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d107      	bne.n	800ebe4 <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 800ebd4:	7aba      	ldrb	r2, [r7, #10]
 800ebd6:	7af9      	ldrb	r1, [r7, #11]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	68f8      	ldr	r0, [r7, #12]
 800ebdc:	f7ff fe2a 	bl	800e834 <VL53LX_nvm_read>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 800ebe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d104      	bne.n	800ebf6 <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 800ebec:	68f8      	ldr	r0, [r7, #12]
 800ebee:	f7ff fe7f 	bl	800e8f0 <VL53LX_nvm_disable>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 800ebf6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3718      	adds	r7, #24
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}

0800ec02 <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 800ec02:	b580      	push	{r7, lr}
 800ec04:	b084      	sub	sp, #16
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	6078      	str	r0, [r7, #4]
 800ec0a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800ec10:	f107 0308 	add.w	r3, r7, #8
 800ec14:	2201      	movs	r2, #1
 800ec16:	212e      	movs	r1, #46	; 0x2e
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f7ff ffc1 	bl	800eba0 <VL53LX_read_nvm_raw_data>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800ec22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d108      	bne.n	800ec3c <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 800ec2a:	f107 0308 	add.w	r3, r7, #8
 800ec2e:	683a      	ldr	r2, [r7, #0]
 800ec30:	4619      	mov	r1, r3
 800ec32:	2004      	movs	r0, #4
 800ec34:	f7ff fe92 	bl	800e95c <VL53LX_nvm_decode_optical_centre>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 800ec3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3710      	adds	r7, #16
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b092      	sub	sp, #72	; 0x48
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ec52:	2300      	movs	r3, #0
 800ec54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800ec58:	f107 030c 	add.w	r3, r7, #12
 800ec5c:	220e      	movs	r2, #14
 800ec5e:	2157      	movs	r1, #87	; 0x57
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7ff ff9d 	bl	800eba0 <VL53LX_read_nvm_raw_data>
 800ec66:	4603      	mov	r3, r0
 800ec68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800ec6c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d109      	bne.n	800ec88 <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 800ec74:	f107 030c 	add.w	r3, r7, #12
 800ec78:	683a      	ldr	r2, [r7, #0]
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	2038      	movs	r0, #56	; 0x38
 800ec7e:	f7ff fe9d 	bl	800e9bc <VL53LX_nvm_decode_cal_peak_rate_map>
 800ec82:	4603      	mov	r3, r0
 800ec84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800ec88:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3748      	adds	r7, #72	; 0x48
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b086      	sub	sp, #24
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800eca2:	f107 030c 	add.w	r3, r7, #12
 800eca6:	2202      	movs	r2, #2
 800eca8:	2165      	movs	r1, #101	; 0x65
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f7ff ff78 	bl	800eba0 <VL53LX_read_nvm_raw_data>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800ecb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d108      	bne.n	800ecce <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 800ecbc:	f107 030c 	add.w	r3, r7, #12
 800ecc0:	683a      	ldr	r2, [r7, #0]
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	2008      	movs	r0, #8
 800ecc6:	f7ff fecf 	bl	800ea68 <VL53LX_nvm_decode_additional_offset_cal_data>
 800ecca:	4603      	mov	r3, r0
 800eccc:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800ecce:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3718      	adds	r7, #24
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}

0800ecda <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 800ecda:	b580      	push	{r7, lr}
 800ecdc:	b08a      	sub	sp, #40	; 0x28
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	60f8      	str	r0, [r7, #12]
 800ece2:	460b      	mov	r3, r1
 800ece4:	607a      	str	r2, [r7, #4]
 800ece6:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ece8:	2300      	movs	r3, #0
 800ecea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 800ecee:	897b      	ldrh	r3, [r7, #10]
 800ecf0:	089b      	lsrs	r3, r3, #2
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	b2d9      	uxtb	r1, r3
 800ecf6:	f107 0314 	add.w	r3, r7, #20
 800ecfa:	2204      	movs	r2, #4
 800ecfc:	68f8      	ldr	r0, [r7, #12]
 800ecfe:	f7ff ff4f 	bl	800eba0 <VL53LX_read_nvm_raw_data>
 800ed02:	4603      	mov	r3, r0
 800ed04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800ed08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d109      	bne.n	800ed24 <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 800ed10:	f107 0314 	add.w	r3, r7, #20
 800ed14:	687a      	ldr	r2, [r7, #4]
 800ed16:	4619      	mov	r1, r3
 800ed18:	2010      	movs	r0, #16
 800ed1a:	f7ff fee0 	bl	800eade <VL53LX_nvm_decode_fmt_range_results_data>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 800ed24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3728      	adds	r7, #40	; 0x28
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b086      	sub	sp, #24
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	460b      	mov	r3, r1
 800ed3a:	607a      	str	r2, [r7, #4]
 800ed3c:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800ed42:	897b      	ldrh	r3, [r7, #10]
 800ed44:	2b0a      	cmp	r3, #10
 800ed46:	d802      	bhi.n	800ed4e <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ed48:	f06f 0309 	mvn.w	r3, #9
 800ed4c:	e047      	b.n	800edde <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed56:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800ed64:	f002 020f 	and.w	r2, r2, #15
 800ed68:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800ed6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800ed74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ed78:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ed7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800ed84:	f002 0203 	and.w	r2, r2, #3
 800ed88:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800ed8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800ed94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ed98:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800ed9a:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	88d8      	ldrh	r0, [r3, #6]
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	3305      	adds	r3, #5
 800eda4:	461a      	mov	r2, r3
 800eda6:	2102      	movs	r1, #2
 800eda8:	f7f9 fa1f 	bl	80081ea <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800edb0:	68fa      	ldr	r2, [r7, #12]
 800edb2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800edb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800edba:	68fa      	ldr	r2, [r7, #12]
 800edbc:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800edbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800edc8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800edcc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800edce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800edd4:	68fa      	ldr	r2, [r7, #12]
 800edd6:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800edd8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800edda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3718      	adds	r7, #24
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800ede6:	b580      	push	{r7, lr}
 800ede8:	b086      	sub	sp, #24
 800edea:	af00      	add	r7, sp, #0
 800edec:	4603      	mov	r3, r0
 800edee:	60b9      	str	r1, [r7, #8]
 800edf0:	607a      	str	r2, [r7, #4]
 800edf2:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800edf4:	2300      	movs	r3, #0
 800edf6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800edf8:	89fb      	ldrh	r3, [r7, #14]
 800edfa:	2b0a      	cmp	r3, #10
 800edfc:	d802      	bhi.n	800ee04 <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800edfe:	f06f 0309 	mvn.w	r3, #9
 800ee02:	e046      	b.n	800ee92 <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee0c:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	3301      	adds	r3, #1
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	f003 030f 	and.w	r3, r3, #15
 800ee1c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	3302      	adds	r3, #2
 800ee26:	781b      	ldrb	r3, [r3, #0]
 800ee28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee2c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	3303      	adds	r3, #3
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	f003 0303 	and.w	r3, r3, #3
 800ee3c:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	3304      	adds	r3, #4
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee4c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	3305      	adds	r3, #5
 800ee56:	4619      	mov	r1, r3
 800ee58:	2002      	movs	r0, #2
 800ee5a:	f7f9 f9f1 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	79da      	ldrb	r2, [r3, #7]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	7a1a      	ldrb	r2, [r3, #8]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	3309      	adds	r3, #9
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee80:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	7a9a      	ldrb	r2, [r3, #10]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800ee8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3718      	adds	r7, #24
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}

0800ee9a <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800ee9a:	b580      	push	{r7, lr}
 800ee9c:	b086      	sub	sp, #24
 800ee9e:	af00      	add	r7, sp, #0
 800eea0:	6078      	str	r0, [r7, #4]
 800eea2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800eea4:	2300      	movs	r3, #0
 800eea6:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800eea8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d108      	bne.n	800eec2 <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 800eeb0:	f107 020c 	add.w	r2, r7, #12
 800eeb4:	230b      	movs	r3, #11
 800eeb6:	2101      	movs	r1, #1
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f001 feeb 	bl	8010c94 <VL53LX_ReadMulti>
 800eebe:	4603      	mov	r3, r0
 800eec0:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800eec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d108      	bne.n	800eedc <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 800eeca:	f107 030c 	add.w	r3, r7, #12
 800eece:	683a      	ldr	r2, [r7, #0]
 800eed0:	4619      	mov	r1, r3
 800eed2:	200b      	movs	r0, #11
 800eed4:	f7ff ff87 	bl	800ede6 <VL53LX_i2c_decode_static_nvm_managed>
 800eed8:	4603      	mov	r3, r0
 800eeda:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800eedc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3718      	adds	r7, #24
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}

0800eee8 <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b086      	sub	sp, #24
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	460b      	mov	r3, r1
 800eef2:	607a      	str	r2, [r7, #4]
 800eef4:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800eef6:	2300      	movs	r3, #0
 800eef8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800eefa:	897b      	ldrh	r3, [r7, #10]
 800eefc:	2b16      	cmp	r3, #22
 800eefe:	d802      	bhi.n	800ef06 <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ef00:	f06f 0309 	mvn.w	r3, #9
 800ef04:	e076      	b.n	800eff4 <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800ef12:	68fa      	ldr	r2, [r7, #12]
 800ef14:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ef16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800ef1c:	68fa      	ldr	r2, [r7, #12]
 800ef1e:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800ef20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800ef26:	68fa      	ldr	r2, [r7, #12]
 800ef28:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800ef2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800ef30:	68fa      	ldr	r2, [r7, #12]
 800ef32:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800ef34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800ef3e:	f002 020f 	and.w	r2, r2, #15
 800ef42:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ef44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800ef4a:	68fa      	ldr	r2, [r7, #12]
 800ef4c:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800ef4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800ef58:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ef5c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800ef5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800ef68:	f002 0203 	and.w	r2, r2, #3
 800ef6c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800ef6e:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	8958      	ldrh	r0, [r3, #10]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	3309      	adds	r3, #9
 800ef78:	461a      	mov	r2, r3
 800ef7a:	2102      	movs	r1, #2
 800ef7c:	f7f9 f935 	bl	80081ea <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	330b      	adds	r3, #11
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	2102      	movs	r1, #2
 800ef8e:	f7f9 f977 	bl	8008280 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	330d      	adds	r3, #13
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	2102      	movs	r1, #2
 800efa0:	f7f9 f96e 	bl	8008280 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	8a18      	ldrh	r0, [r3, #16]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	330f      	adds	r3, #15
 800efac:	461a      	mov	r2, r3
 800efae:	2102      	movs	r1, #2
 800efb0:	f7f9 f91b 	bl	80081ea <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 800efba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800efbe:	b218      	sxth	r0, r3
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	3311      	adds	r3, #17
 800efc4:	461a      	mov	r2, r3
 800efc6:	2102      	movs	r1, #2
 800efc8:	f7f9 f95a 	bl	8008280 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	3313      	adds	r3, #19
 800efd6:	461a      	mov	r2, r3
 800efd8:	2102      	movs	r1, #2
 800efda:	f7f9 f951 	bl	8008280 <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	3315      	adds	r3, #21
 800efe8:	461a      	mov	r2, r3
 800efea:	2102      	movs	r1, #2
 800efec:	f7f9 f948 	bl	8008280 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800eff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3718      	adds	r7, #24
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}

0800effc <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b086      	sub	sp, #24
 800f000:	af00      	add	r7, sp, #0
 800f002:	4603      	mov	r3, r0
 800f004:	60b9      	str	r1, [r7, #8]
 800f006:	607a      	str	r2, [r7, #4]
 800f008:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f00a:	2300      	movs	r3, #0
 800f00c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f00e:	89fb      	ldrh	r3, [r7, #14]
 800f010:	2b16      	cmp	r3, #22
 800f012:	d802      	bhi.n	800f01a <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f014:	f06f 0309 	mvn.w	r3, #9
 800f018:	e079      	b.n	800f10e <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	785a      	ldrb	r2, [r3, #1]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	789a      	ldrb	r2, [r3, #2]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	78da      	ldrb	r2, [r3, #3]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	791a      	ldrb	r2, [r3, #4]
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	3305      	adds	r3, #5
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	f003 030f 	and.w	r3, r3, #15
 800f04c:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	799a      	ldrb	r2, [r3, #6]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	3307      	adds	r3, #7
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f064:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	3308      	adds	r3, #8
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	f003 0303 	and.w	r3, r3, #3
 800f074:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	3309      	adds	r3, #9
 800f07e:	4619      	mov	r1, r3
 800f080:	2002      	movs	r0, #2
 800f082:	f7f9 f8dd 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f086:	4603      	mov	r3, r0
 800f088:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	330b      	adds	r3, #11
 800f092:	4619      	mov	r1, r3
 800f094:	2002      	movs	r0, #2
 800f096:	f7f9 f91f 	bl	80082d8 <VL53LX_i2c_decode_int16_t>
 800f09a:	4603      	mov	r3, r0
 800f09c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	330d      	adds	r3, #13
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	2002      	movs	r0, #2
 800f0aa:	f7f9 f915 	bl	80082d8 <VL53LX_i2c_decode_int16_t>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	330f      	adds	r3, #15
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	2002      	movs	r0, #2
 800f0be:	f7f9 f8bf 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	3311      	adds	r3, #17
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	2002      	movs	r0, #2
 800f0d2:	f7f9 f901 	bl	80082d8 <VL53LX_i2c_decode_int16_t>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f0dc:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	3313      	adds	r3, #19
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	2002      	movs	r0, #2
 800f0ea:	f7f9 f8f5 	bl	80082d8 <VL53LX_i2c_decode_int16_t>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	3315      	adds	r3, #21
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	2002      	movs	r0, #2
 800f0fe:	f7f9 f8eb 	bl	80082d8 <VL53LX_i2c_decode_int16_t>
 800f102:	4603      	mov	r3, r0
 800f104:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800f10a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3718      	adds	r7, #24
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}

0800f116 <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f116:	b580      	push	{r7, lr}
 800f118:	b08a      	sub	sp, #40	; 0x28
 800f11a:	af00      	add	r7, sp, #0
 800f11c:	6078      	str	r0, [r7, #4]
 800f11e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f120:	2300      	movs	r3, #0
 800f122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f126:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d109      	bne.n	800f142 <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 800f12e:	f107 020c 	add.w	r2, r7, #12
 800f132:	2317      	movs	r3, #23
 800f134:	210d      	movs	r1, #13
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f001 fdac 	bl	8010c94 <VL53LX_ReadMulti>
 800f13c:	4603      	mov	r3, r0
 800f13e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f142:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f146:	2b00      	cmp	r3, #0
 800f148:	d109      	bne.n	800f15e <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 800f14a:	f107 030c 	add.w	r3, r7, #12
 800f14e:	683a      	ldr	r2, [r7, #0]
 800f150:	4619      	mov	r1, r3
 800f152:	2017      	movs	r0, #23
 800f154:	f7ff ff52 	bl	800effc <VL53LX_i2c_decode_customer_nvm_managed>
 800f158:	4603      	mov	r3, r0
 800f15a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 800f15e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f162:	2b00      	cmp	r3, #0
 800f164:	d11c      	bne.n	800f1a0 <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	8a5b      	ldrh	r3, [r3, #18]
 800f16a:	84bb      	strh	r3, [r7, #36]	; 0x24
		offset = offset / 4;
 800f16c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f170:	2b00      	cmp	r3, #0
 800f172:	da00      	bge.n	800f176 <VL53LX_get_customer_nvm_managed+0x60>
 800f174:	3303      	adds	r3, #3
 800f176:	109b      	asrs	r3, r3, #2
 800f178:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (offset >= 1024)
 800f17a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f17e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f182:	db04      	blt.n	800f18e <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 800f184:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f186:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	84bb      	strh	r3, [r7, #36]	; 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	2200      	movs	r2, #0
 800f192:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f198:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f19e:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f1a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3728      	adds	r7, #40	; 0x28
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b086      	sub	sp, #24
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	460b      	mov	r3, r1
 800f1b6:	607a      	str	r2, [r7, #4]
 800f1b8:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 800f1be:	897b      	ldrh	r3, [r7, #10]
 800f1c0:	2b1f      	cmp	r3, #31
 800f1c2:	d802      	bhi.n	800f1ca <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f1c4:	f06f 0309 	mvn.w	r3, #9
 800f1c8:	e0cf      	b.n	800f36a <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	881b      	ldrh	r3, [r3, #0]
 800f1ce:	687a      	ldr	r2, [r7, #4]
 800f1d0:	2102      	movs	r1, #2
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7f9 f809 	bl	80081ea <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800f1e0:	f002 0201 	and.w	r2, r2, #1
 800f1e4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f1e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800f1f0:	f002 020f 	and.w	r2, r2, #15
 800f1f4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f1f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800f200:	f002 020f 	and.w	r2, r2, #15
 800f204:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f206:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800f210:	f002 021f 	and.w	r2, r2, #31
 800f214:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f216:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f220:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f224:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f226:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800f230:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f234:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f236:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800f240:	f002 0201 	and.w	r2, r2, #1
 800f244:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f246:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800f24c:	68fa      	ldr	r2, [r7, #12]
 800f24e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800f250:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f25a:	f002 0201 	and.w	r2, r2, #1
 800f25e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f260:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f26a:	f002 0203 	and.w	r2, r2, #3
 800f26e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f270:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f27a:	f002 021f 	and.w	r2, r2, #31
 800f27e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f280:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800f28a:	f002 0203 	and.w	r2, r2, #3
 800f28e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f290:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800f29a:	f002 0203 	and.w	r2, r2, #3
 800f29e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800f2a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f2aa:	f002 0207 	and.w	r2, r2, #7
 800f2ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800f2b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f2ba:	f002 021f 	and.w	r2, r2, #31
 800f2be:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800f2c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f2ca:	f002 0201 	and.w	r2, r2, #1
 800f2ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f2d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800f2d6:	68fa      	ldr	r2, [r7, #12]
 800f2d8:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f2da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800f2e0:	68fa      	ldr	r2, [r7, #12]
 800f2e2:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f2e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800f2ea:	68fa      	ldr	r2, [r7, #12]
 800f2ec:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f2ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800f2f4:	68fa      	ldr	r2, [r7, #12]
 800f2f6:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f2f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800f2fe:	68fa      	ldr	r2, [r7, #12]
 800f300:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800f302:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800f308:	68fa      	ldr	r2, [r7, #12]
 800f30a:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800f30c:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	8b18      	ldrh	r0, [r3, #24]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	3318      	adds	r3, #24
 800f316:	461a      	mov	r2, r3
 800f318:	2102      	movs	r1, #2
 800f31a:	f7f8 ff66 	bl	80081ea <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800f322:	68fa      	ldr	r2, [r7, #12]
 800f324:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800f326:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800f32c:	68fa      	ldr	r2, [r7, #12]
 800f32e:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800f330:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800f33a:	f002 020f 	and.w	r2, r2, #15
 800f33e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800f340:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800f346:	68fa      	ldr	r2, [r7, #12]
 800f348:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800f34a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800f354:	f002 020f 	and.w	r2, r2, #15
 800f358:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800f35a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800f360:	68fa      	ldr	r2, [r7, #12]
 800f362:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800f364:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f366:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3718      	adds	r7, #24
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}

0800f372 <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f372:	b580      	push	{r7, lr}
 800f374:	b086      	sub	sp, #24
 800f376:	af00      	add	r7, sp, #0
 800f378:	60f8      	str	r0, [r7, #12]
 800f37a:	460b      	mov	r3, r1
 800f37c:	607a      	str	r2, [r7, #4]
 800f37e:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f380:	2300      	movs	r3, #0
 800f382:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 800f384:	897b      	ldrh	r3, [r7, #10]
 800f386:	2b15      	cmp	r3, #21
 800f388:	d802      	bhi.n	800f390 <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f38a:	f06f 0309 	mvn.w	r3, #9
 800f38e:	e070      	b.n	800f472 <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800f39c:	68fa      	ldr	r2, [r7, #12]
 800f39e:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f3a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800f3a6:	68fa      	ldr	r2, [r7, #12]
 800f3a8:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f3aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800f3b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f3b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f3ba:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 800f3c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f3c4:	b298      	uxth	r0, r3
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	3304      	adds	r3, #4
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	2102      	movs	r1, #2
 800f3ce:	f7f8 ff0c 	bl	80081ea <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800f3da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f3de:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f3e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800f3e6:	68fa      	ldr	r2, [r7, #12]
 800f3e8:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800f3ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800f3f0:	68fa      	ldr	r2, [r7, #12]
 800f3f2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f3f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800f3fe:	f002 0201 	and.w	r2, r2, #1
 800f402:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f404:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800f40e:	f002 0207 	and.w	r2, r2, #7
 800f412:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f414:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	8998      	ldrh	r0, [r3, #12]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	330c      	adds	r3, #12
 800f41e:	461a      	mov	r2, r3
 800f420:	2102      	movs	r1, #2
 800f422:	f7f8 fee2 	bl	80081ea <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	89d8      	ldrh	r0, [r3, #14]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	330e      	adds	r3, #14
 800f42e:	461a      	mov	r2, r3
 800f430:	2102      	movs	r1, #2
 800f432:	f7f8 feda 	bl	80081ea <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	8a18      	ldrh	r0, [r3, #16]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	3310      	adds	r3, #16
 800f43e:	461a      	mov	r2, r3
 800f440:	2102      	movs	r1, #2
 800f442:	f7f8 fed2 	bl	80081ea <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800f44a:	68fa      	ldr	r2, [r7, #12]
 800f44c:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f44e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800f454:	68fa      	ldr	r2, [r7, #12]
 800f456:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f458:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800f45e:	68fa      	ldr	r2, [r7, #12]
 800f460:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f462:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f46c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f46e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f472:	4618      	mov	r0, r3
 800f474:	3718      	adds	r7, #24
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}

0800f47a <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f47a:	b580      	push	{r7, lr}
 800f47c:	b086      	sub	sp, #24
 800f47e:	af00      	add	r7, sp, #0
 800f480:	60f8      	str	r0, [r7, #12]
 800f482:	460b      	mov	r3, r1
 800f484:	607a      	str	r2, [r7, #4]
 800f486:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f488:	2300      	movs	r3, #0
 800f48a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 800f48c:	897b      	ldrh	r3, [r7, #10]
 800f48e:	2b16      	cmp	r3, #22
 800f490:	d802      	bhi.n	800f498 <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f492:	f06f 0309 	mvn.w	r3, #9
 800f496:	e06e      	b.n	800f576 <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	f003 030f 	and.w	r3, r3, #15
 800f4a0:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800f4aa:	68fa      	ldr	r2, [r7, #12]
 800f4ac:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f4ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800f4b8:	f002 020f 	and.w	r2, r2, #15
 800f4bc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f4be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800f4c4:	68fa      	ldr	r2, [r7, #12]
 800f4c6:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f4c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800f4d2:	f002 020f 	and.w	r2, r2, #15
 800f4d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f4d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800f4de:	68fa      	ldr	r2, [r7, #12]
 800f4e0:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800f4e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800f4ec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f4f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f4f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800f4fc:	f002 020f 	and.w	r2, r2, #15
 800f500:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f502:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800f508:	68fa      	ldr	r2, [r7, #12]
 800f50a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f50c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800f516:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f51a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f51c:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	8958      	ldrh	r0, [r3, #10]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	330a      	adds	r3, #10
 800f526:	461a      	mov	r2, r3
 800f528:	2102      	movs	r1, #2
 800f52a:	f7f8 fe5e 	bl	80081ea <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	8998      	ldrh	r0, [r3, #12]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	330c      	adds	r3, #12
 800f536:	461a      	mov	r2, r3
 800f538:	2102      	movs	r1, #2
 800f53a:	f7f8 fe56 	bl	80081ea <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800f542:	68fa      	ldr	r2, [r7, #12]
 800f544:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800f546:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800f54c:	68fa      	ldr	r2, [r7, #12]
 800f54e:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800f550:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	6918      	ldr	r0, [r3, #16]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	3312      	adds	r3, #18
 800f55a:	461a      	mov	r2, r3
 800f55c:	2104      	movs	r1, #4
 800f55e:	f7f8 fee4 	bl	800832a <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800f56a:	f002 0201 	and.w	r2, r2, #1
 800f56e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800f570:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f572:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f576:	4618      	mov	r0, r3
 800f578:	3718      	adds	r7, #24
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}

0800f57e <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f57e:	b580      	push	{r7, lr}
 800f580:	b086      	sub	sp, #24
 800f582:	af00      	add	r7, sp, #0
 800f584:	60f8      	str	r0, [r7, #12]
 800f586:	460b      	mov	r3, r1
 800f588:	607a      	str	r2, [r7, #4]
 800f58a:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f58c:	2300      	movs	r3, #0
 800f58e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 800f590:	897b      	ldrh	r3, [r7, #10]
 800f592:	2b11      	cmp	r3, #17
 800f594:	d802      	bhi.n	800f59c <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f596:	f06f 0309 	mvn.w	r3, #9
 800f59a:	e071      	b.n	800f680 <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	f003 0303 	and.w	r3, r3, #3
 800f5a4:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	8858      	ldrh	r0, [r3, #2]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	2102      	movs	r1, #2
 800f5b6:	f7f8 fe18 	bl	80081ea <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	8898      	ldrh	r0, [r3, #4]
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	3303      	adds	r3, #3
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	2102      	movs	r1, #2
 800f5c6:	f7f8 fe10 	bl	80081ea <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f5d2:	f002 0201 	and.w	r2, r2, #1
 800f5d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f5d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800f5e2:	f002 0207 	and.w	r2, r2, #7
 800f5e6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f5e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800f5ee:	68fa      	ldr	r2, [r7, #12]
 800f5f0:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f5f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800f5f8:	68fa      	ldr	r2, [r7, #12]
 800f5fa:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f5fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f606:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f60a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f60c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f616:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f61a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f61c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f626:	f002 0203 	and.w	r2, r2, #3
 800f62a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f62c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800f636:	f002 0203 	and.w	r2, r2, #3
 800f63a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f63c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800f646:	f002 020f 	and.w	r2, r2, #15
 800f64a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f64c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800f652:	68fa      	ldr	r2, [r7, #12]
 800f654:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800f656:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800f65c:	68fa      	ldr	r2, [r7, #12]
 800f65e:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800f660:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800f666:	68fa      	ldr	r2, [r7, #12]
 800f668:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800f66a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800f674:	f002 0203 	and.w	r2, r2, #3
 800f678:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f67a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f67c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f680:	4618      	mov	r0, r3
 800f682:	3718      	adds	r7, #24
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f688:	b480      	push	{r7}
 800f68a:	b087      	sub	sp, #28
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	460b      	mov	r3, r1
 800f692:	607a      	str	r2, [r7, #4]
 800f694:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f696:	2300      	movs	r3, #0
 800f698:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 800f69a:	897b      	ldrh	r3, [r7, #10]
 800f69c:	2b04      	cmp	r3, #4
 800f69e:	d802      	bhi.n	800f6a6 <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f6a0:	f06f 0309 	mvn.w	r3, #9
 800f6a4:	e025      	b.n	800f6f2 <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	f003 0301 	and.w	r3, r3, #1
 800f6ae:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800f6bc:	f002 0201 	and.w	r2, r2, #1
 800f6c0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f6c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800f6cc:	f002 0201 	and.w	r2, r2, #1
 800f6d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f6d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800f6dc:	f002 0203 	and.w	r2, r2, #3
 800f6e0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f6e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800f6e8:	68fa      	ldr	r2, [r7, #12]
 800f6ea:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f6ec:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f6ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	371c      	adds	r7, #28
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fc:	4770      	bx	lr

0800f6fe <VL53LX_set_system_control>:


VL53LX_Error VL53LX_set_system_control(
	VL53LX_DEV                 Dev,
	VL53LX_system_control_t   *pdata)
{
 800f6fe:	b580      	push	{r7, lr}
 800f700:	b084      	sub	sp, #16
 800f702:	af00      	add	r7, sp, #0
 800f704:	6078      	str	r0, [r7, #4]
 800f706:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f708:	2300      	movs	r3, #0
 800f70a:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f70c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d108      	bne.n	800f726 <VL53LX_set_system_control+0x28>
		status = VL53LX_i2c_encode_system_control(
 800f714:	f107 0308 	add.w	r3, r7, #8
 800f718:	461a      	mov	r2, r3
 800f71a:	2105      	movs	r1, #5
 800f71c:	6838      	ldr	r0, [r7, #0]
 800f71e:	f7ff ffb3 	bl	800f688 <VL53LX_i2c_encode_system_control>
 800f722:	4603      	mov	r3, r0
 800f724:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 800f726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d108      	bne.n	800f740 <VL53LX_set_system_control+0x42>
		status = VL53LX_WriteMulti(
 800f72e:	f107 0208 	add.w	r2, r7, #8
 800f732:	2305      	movs	r3, #5
 800f734:	2183      	movs	r1, #131	; 0x83
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f001 fa76 	bl	8010c28 <VL53LX_WriteMulti>
 800f73c:	4603      	mov	r3, r0
 800f73e:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800f740:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f744:	4618      	mov	r0, r3
 800f746:	3710      	adds	r7, #16
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}

0800f74c <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b086      	sub	sp, #24
 800f750:	af00      	add	r7, sp, #0
 800f752:	4603      	mov	r3, r0
 800f754:	60b9      	str	r1, [r7, #8]
 800f756:	607a      	str	r2, [r7, #4]
 800f758:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f75a:	2300      	movs	r3, #0
 800f75c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 800f75e:	89fb      	ldrh	r3, [r7, #14]
 800f760:	2b2b      	cmp	r3, #43	; 0x2b
 800f762:	d802      	bhi.n	800f76a <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f764:	f06f 0309 	mvn.w	r3, #9
 800f768:	e0e2      	b.n	800f930 <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f772:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	785a      	ldrb	r2, [r3, #1]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	3302      	adds	r3, #2
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	f003 030f 	and.w	r3, r3, #15
 800f78a:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	78da      	ldrb	r2, [r3, #3]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	3304      	adds	r3, #4
 800f79c:	4619      	mov	r1, r3
 800f79e:	2002      	movs	r0, #2
 800f7a0:	f7f8 fd4e 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	3306      	adds	r3, #6
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	2002      	movs	r0, #2
 800f7b4:	f7f8 fd44 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	3308      	adds	r3, #8
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	2002      	movs	r0, #2
 800f7c8:	f7f8 fd3a 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	330a      	adds	r3, #10
 800f7d8:	4619      	mov	r1, r3
 800f7da:	2002      	movs	r0, #2
 800f7dc:	f7f8 fd30 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	330c      	adds	r3, #12
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	2002      	movs	r0, #2
 800f7f0:	f7f8 fd26 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	330e      	adds	r3, #14
 800f800:	4619      	mov	r1, r3
 800f802:	2002      	movs	r0, #2
 800f804:	f7f8 fd1c 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f808:	4603      	mov	r3, r0
 800f80a:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	3310      	adds	r3, #16
 800f814:	4619      	mov	r1, r3
 800f816:	2002      	movs	r0, #2
 800f818:	f7f8 fd12 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f81c:	4603      	mov	r3, r0
 800f81e:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	3312      	adds	r3, #18
 800f828:	4619      	mov	r1, r3
 800f82a:	2002      	movs	r0, #2
 800f82c:	f7f8 fd08 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f830:	4603      	mov	r3, r0
 800f832:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	3314      	adds	r3, #20
 800f83c:	4619      	mov	r1, r3
 800f83e:	2002      	movs	r0, #2
 800f840:	f7f8 fcfe 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f844:	4603      	mov	r3, r0
 800f846:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	3316      	adds	r3, #22
 800f850:	4619      	mov	r1, r3
 800f852:	2002      	movs	r0, #2
 800f854:	f7f8 fcf4 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f858:	4603      	mov	r3, r0
 800f85a:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	3318      	adds	r3, #24
 800f864:	4619      	mov	r1, r3
 800f866:	2002      	movs	r0, #2
 800f868:	f7f8 fcea 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f86c:	4603      	mov	r3, r0
 800f86e:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	331a      	adds	r3, #26
 800f878:	4619      	mov	r1, r3
 800f87a:	2002      	movs	r0, #2
 800f87c:	f7f8 fce0 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f880:	4603      	mov	r3, r0
 800f882:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	331c      	adds	r3, #28
 800f88c:	4619      	mov	r1, r3
 800f88e:	2002      	movs	r0, #2
 800f890:	f7f8 fcd6 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f894:	4603      	mov	r3, r0
 800f896:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	331e      	adds	r3, #30
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	2002      	movs	r0, #2
 800f8a4:	f7f8 fccc 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	3320      	adds	r3, #32
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	2002      	movs	r0, #2
 800f8b8:	f7f8 fcc2 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	3322      	adds	r3, #34	; 0x22
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	2002      	movs	r0, #2
 800f8cc:	f7f8 fcb8 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	3324      	adds	r3, #36	; 0x24
 800f8dc:	4619      	mov	r1, r3
 800f8de:	2002      	movs	r0, #2
 800f8e0:	f7f8 fcae 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	3326      	adds	r3, #38	; 0x26
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	2002      	movs	r0, #2
 800f8f4:	f7f8 fca4 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	3328      	adds	r3, #40	; 0x28
 800f904:	4619      	mov	r1, r3
 800f906:	2002      	movs	r0, #2
 800f908:	f7f8 fc9a 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800f90c:	4603      	mov	r3, r0
 800f90e:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800f92c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f930:	4618      	mov	r0, r3
 800f932:	3718      	adds	r7, #24
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b086      	sub	sp, #24
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	4603      	mov	r3, r0
 800f940:	60b9      	str	r1, [r7, #8]
 800f942:	607a      	str	r2, [r7, #4]
 800f944:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f946:	2300      	movs	r3, #0
 800f948:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 800f94a:	89fb      	ldrh	r3, [r7, #14]
 800f94c:	2b20      	cmp	r3, #32
 800f94e:	d802      	bhi.n	800f956 <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f950:	f06f 0309 	mvn.w	r3, #9
 800f954:	e04d      	b.n	800f9f2 <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 800f956:	68b9      	ldr	r1, [r7, #8]
 800f958:	2004      	movs	r0, #4
 800f95a:	f7f8 fd10 	bl	800837e <VL53LX_i2c_decode_uint32_t>
 800f95e:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	3304      	adds	r3, #4
 800f968:	4619      	mov	r1, r3
 800f96a:	2004      	movs	r0, #4
 800f96c:	f7f8 fd07 	bl	800837e <VL53LX_i2c_decode_uint32_t>
 800f970:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	3308      	adds	r3, #8
 800f97a:	4619      	mov	r1, r3
 800f97c:	2004      	movs	r0, #4
 800f97e:	f7f8 fd1b 	bl	80083b8 <VL53LX_i2c_decode_int32_t>
 800f982:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	330c      	adds	r3, #12
 800f98c:	4619      	mov	r1, r3
 800f98e:	2004      	movs	r0, #4
 800f990:	f7f8 fcf5 	bl	800837e <VL53LX_i2c_decode_uint32_t>
 800f994:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	3310      	adds	r3, #16
 800f99e:	4619      	mov	r1, r3
 800f9a0:	2004      	movs	r0, #4
 800f9a2:	f7f8 fcec 	bl	800837e <VL53LX_i2c_decode_uint32_t>
 800f9a6:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	3314      	adds	r3, #20
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	2004      	movs	r0, #4
 800f9b4:	f7f8 fce3 	bl	800837e <VL53LX_i2c_decode_uint32_t>
 800f9b8:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	3318      	adds	r3, #24
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	2004      	movs	r0, #4
 800f9c6:	f7f8 fcf7 	bl	80083b8 <VL53LX_i2c_decode_int32_t>
 800f9ca:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	331c      	adds	r3, #28
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	2004      	movs	r0, #4
 800f9d8:	f7f8 fcd1 	bl	800837e <VL53LX_i2c_decode_uint32_t>
 800f9dc:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800f9ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3718      	adds	r7, #24
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}

0800f9fa <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b086      	sub	sp, #24
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	4603      	mov	r3, r0
 800fa02:	60b9      	str	r1, [r7, #8]
 800fa04:	607a      	str	r2, [r7, #4]
 800fa06:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 800fa0c:	89fb      	ldrh	r3, [r7, #14]
 800fa0e:	2b37      	cmp	r3, #55	; 0x37
 800fa10:	d802      	bhi.n	800fa18 <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fa12:	f06f 0309 	mvn.w	r3, #9
 800fa16:	e15e      	b.n	800fcd6 <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 800fa18:	68b9      	ldr	r1, [r7, #8]
 800fa1a:	2002      	movs	r0, #2
 800fa1c:	f7f8 fc10 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800fa20:	4603      	mov	r3, r0
 800fa22:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	3302      	adds	r3, #2
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa32:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	3303      	adds	r3, #3
 800fa3c:	781b      	ldrb	r3, [r3, #0]
 800fa3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa42:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	3304      	adds	r3, #4
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	f003 0303 	and.w	r3, r3, #3
 800fa52:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	3305      	adds	r3, #5
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	f003 0301 	and.w	r3, r3, #1
 800fa62:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	3306      	adds	r3, #6
 800fa6c:	781b      	ldrb	r3, [r3, #0]
 800fa6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa72:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	3307      	adds	r3, #7
 800fa7c:	781b      	ldrb	r3, [r3, #0]
 800fa7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa82:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	3308      	adds	r3, #8
 800fa8c:	4619      	mov	r1, r3
 800fa8e:	2002      	movs	r0, #2
 800fa90:	f7f8 fbd6 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800fa94:	4603      	mov	r3, r0
 800fa96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fa9a:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	330a      	adds	r3, #10
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	f003 0303 	and.w	r3, r3, #3
 800faaa:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	330b      	adds	r3, #11
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	f003 0303 	and.w	r3, r3, #3
 800faba:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	330c      	adds	r3, #12
 800fac4:	781b      	ldrb	r3, [r3, #0]
 800fac6:	f003 030f 	and.w	r3, r3, #15
 800faca:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	330d      	adds	r3, #13
 800fad4:	781b      	ldrb	r3, [r3, #0]
 800fad6:	f003 0307 	and.w	r3, r3, #7
 800fada:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	330e      	adds	r3, #14
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	f003 0301 	and.w	r3, r3, #1
 800faea:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	330f      	adds	r3, #15
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	f003 0303 	and.w	r3, r3, #3
 800fafa:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	7c1a      	ldrb	r2, [r3, #16]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	7c5a      	ldrb	r2, [r3, #17]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	3312      	adds	r3, #18
 800fb14:	4619      	mov	r1, r3
 800fb16:	2002      	movs	r0, #2
 800fb18:	f7f8 fb92 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fb22:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	3316      	adds	r3, #22
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	2002      	movs	r0, #2
 800fb30:	f7f8 fb86 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800fb34:	4603      	mov	r3, r0
 800fb36:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	3318      	adds	r3, #24
 800fb40:	4619      	mov	r1, r3
 800fb42:	2002      	movs	r0, #2
 800fb44:	f7f8 fb7c 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	331a      	adds	r3, #26
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	f003 0301 	and.w	r3, r3, #1
 800fb5a:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	331b      	adds	r3, #27
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	f003 0307 	and.w	r3, r3, #7
 800fb6a:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	7f1a      	ldrb	r2, [r3, #28]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	7f5a      	ldrb	r2, [r3, #29]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	331e      	adds	r3, #30
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb8a:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	331f      	adds	r3, #31
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb9a:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	3320      	adds	r3, #32
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	f003 0303 	and.w	r3, r3, #3
 800fbaa:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	3321      	adds	r3, #33	; 0x21
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	f003 030f 	and.w	r3, r3, #15
 800fbba:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	3325      	adds	r3, #37	; 0x25
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	f003 0301 	and.w	r3, r3, #1
 800fbee:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	3326      	adds	r3, #38	; 0x26
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	f003 0303 	and.w	r3, r3, #3
 800fc00:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	3327      	adds	r3, #39	; 0x27
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	f003 031f 	and.w	r3, r3, #31
 800fc12:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	3328      	adds	r3, #40	; 0x28
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	f003 031f 	and.w	r3, r3, #31
 800fc24:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	3329      	adds	r3, #41	; 0x29
 800fc30:	781b      	ldrb	r3, [r3, #0]
 800fc32:	f003 031f 	and.w	r3, r3, #31
 800fc36:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	332a      	adds	r3, #42	; 0x2a
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	f003 0301 	and.w	r3, r3, #1
 800fc48:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	332b      	adds	r3, #43	; 0x2b
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	f003 0301 	and.w	r3, r3, #1
 800fc5a:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	332c      	adds	r3, #44	; 0x2c
 800fc66:	781b      	ldrb	r3, [r3, #0]
 800fc68:	f003 0303 	and.w	r3, r3, #3
 800fc6c:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800fc74:	68bb      	ldr	r3, [r7, #8]
 800fc76:	332d      	adds	r3, #45	; 0x2d
 800fc78:	781b      	ldrb	r3, [r3, #0]
 800fc7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fc7e:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	332e      	adds	r3, #46	; 0x2e
 800fc8a:	4619      	mov	r1, r3
 800fc8c:	2004      	movs	r0, #4
 800fc8e:	f7f8 fb76 	bl	800837e <VL53LX_i2c_decode_uint32_t>
 800fc92:	4603      	mov	r3, r0
 800fc94:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	3332      	adds	r3, #50	; 0x32
 800fca0:	4619      	mov	r1, r3
 800fca2:	2004      	movs	r0, #4
 800fca4:	f7f8 fb6b 	bl	800837e <VL53LX_i2c_decode_uint32_t>
 800fca8:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	3336      	adds	r3, #54	; 0x36
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	f003 0301 	and.w	r3, r3, #1
 800fcb8:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	3337      	adds	r3, #55	; 0x37
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	f003 0301 	and.w	r3, r3, #1
 800fcca:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800fcd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3718      	adds	r7, #24
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}

0800fcde <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 800fcde:	b580      	push	{r7, lr}
 800fce0:	b086      	sub	sp, #24
 800fce2:	af00      	add	r7, sp, #0
 800fce4:	4603      	mov	r3, r0
 800fce6:	60b9      	str	r1, [r7, #8]
 800fce8:	607a      	str	r2, [r7, #4]
 800fcea:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fcec:	2300      	movs	r3, #0
 800fcee:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 800fcf0:	89fb      	ldrh	r3, [r7, #14]
 800fcf2:	2b30      	cmp	r3, #48	; 0x30
 800fcf4:	d802      	bhi.n	800fcfc <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fcf6:	f06f 0309 	mvn.w	r3, #9
 800fcfa:	e112      	b.n	800ff22 <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	785a      	ldrb	r2, [r3, #1]
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	789a      	ldrb	r2, [r3, #2]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	3303      	adds	r3, #3
 800fd18:	4619      	mov	r1, r3
 800fd1a:	2002      	movs	r0, #2
 800fd1c:	f7f8 fa90 	bl	8008240 <VL53LX_i2c_decode_uint16_t>
 800fd20:	4603      	mov	r3, r0
 800fd22:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	3305      	adds	r3, #5
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd32:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	3306      	adds	r3, #6
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	f003 0307 	and.w	r3, r3, #7
 800fd42:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	3307      	adds	r3, #7
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	f003 0307 	and.w	r3, r3, #7
 800fd52:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	3308      	adds	r3, #8
 800fd5c:	781b      	ldrb	r3, [r3, #0]
 800fd5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd62:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	3309      	adds	r3, #9
 800fd6c:	781b      	ldrb	r3, [r3, #0]
 800fd6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd72:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	330a      	adds	r3, #10
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	f003 0301 	and.w	r3, r3, #1
 800fd82:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	330b      	adds	r3, #11
 800fd8c:	781b      	ldrb	r3, [r3, #0]
 800fd8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd92:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	330c      	adds	r3, #12
 800fd9c:	781b      	ldrb	r3, [r3, #0]
 800fd9e:	f003 0301 	and.w	r3, r3, #1
 800fda2:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	330d      	adds	r3, #13
 800fdac:	781b      	ldrb	r3, [r3, #0]
 800fdae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fdb2:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	330e      	adds	r3, #14
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fdc2:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	7bda      	ldrb	r2, [r3, #15]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	7c1a      	ldrb	r2, [r3, #16]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	7c5a      	ldrb	r2, [r3, #17]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	7c9a      	ldrb	r2, [r3, #18]
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	7cda      	ldrb	r2, [r3, #19]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	7d1a      	ldrb	r2, [r3, #20]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	7d5a      	ldrb	r2, [r3, #21]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	7d9a      	ldrb	r2, [r3, #22]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	7dda      	ldrb	r2, [r3, #23]
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	7e1a      	ldrb	r2, [r3, #24]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	7e5a      	ldrb	r2, [r3, #25]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	7e9a      	ldrb	r2, [r3, #26]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	7eda      	ldrb	r2, [r3, #27]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	7f1a      	ldrb	r2, [r3, #28]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	7f5a      	ldrb	r2, [r3, #29]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	7f9a      	ldrb	r2, [r3, #30]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	7fda      	ldrb	r2, [r3, #31]
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	f893 2020 	ldrb.w	r2, [r3, #32]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800ff1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3718      	adds	r7, #24
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}

0800ff2a <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 800ff2a:	b580      	push	{r7, lr}
 800ff2c:	b090      	sub	sp, #64	; 0x40
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	6078      	str	r0, [r7, #4]
 800ff32:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ff34:	2300      	movs	r3, #0
 800ff36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800ff3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d10a      	bne.n	800ff58 <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 800ff42:	f107 020c 	add.w	r2, r7, #12
 800ff46:	2331      	movs	r3, #49	; 0x31
 800ff48:	f240 110f 	movw	r1, #271	; 0x10f
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f000 fea1 	bl	8010c94 <VL53LX_ReadMulti>
 800ff52:	4603      	mov	r3, r0
 800ff54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800ff58:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d109      	bne.n	800ff74 <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 800ff60:	f107 030c 	add.w	r3, r7, #12
 800ff64:	683a      	ldr	r2, [r7, #0]
 800ff66:	4619      	mov	r1, r3
 800ff68:	2031      	movs	r0, #49	; 0x31
 800ff6a:	f7ff feb8 	bl	800fcde <VL53LX_i2c_decode_nvm_copy_data>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800ff74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3740      	adds	r7, #64	; 0x40
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}

0800ff80 <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 800ff80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff84:	b0a1      	sub	sp, #132	; 0x84
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	64b9      	str	r1, [r7, #72]	; 0x48
 800ff8a:	647a      	str	r2, [r7, #68]	; 0x44
 800ff8c:	643b      	str	r3, [r7, #64]	; 0x40
 800ff8e:	4603      	mov	r3, r0
 800ff90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800ff94:	23f1      	movs	r3, #241	; 0xf1
 800ff96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint32_t sigma_int  = VL53LX_D_002;
 800ff9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ff9e:	657b      	str	r3, [r7, #84]	; 0x54

	uint32_t pll_period_mm  = 0;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	653b      	str	r3, [r7, #80]	; 0x50

	uint64_t tmp0        = 0;
 800ffa4:	f04f 0200 	mov.w	r2, #0
 800ffa8:	f04f 0300 	mov.w	r3, #0
 800ffac:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	uint64_t tmp1        = 0;
 800ffb0:	f04f 0200 	mov.w	r2, #0
 800ffb4:	f04f 0300 	mov.w	r3, #0
 800ffb8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	uint64_t b_minus_amb = 0;
 800ffbc:	f04f 0200 	mov.w	r2, #0
 800ffc0:	f04f 0300 	mov.w	r3, #0
 800ffc4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t VL53LX_p_055   = 0;
 800ffc8:	f04f 0200 	mov.w	r2, #0
 800ffcc:	f04f 0300 	mov.w	r3, #0
 800ffd0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	*psigma_est  = VL53LX_D_002;
 800ffd4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ffd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ffdc:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 800ffde:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	f000 8259 	beq.w	801049a <VL53LX_f_023+0x51a>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 800ffe8:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7fb fbd3 	bl	800b798 <VL53LX_calc_pll_period_mm>
 800fff2:	6538      	str	r0, [r7, #80]	; 0x50



		if (VL53LX_p_028 > VL53LX_p_032)
 800fff4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800fff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fffa:	429a      	cmp	r2, r3
 800fffc:	d90f      	bls.n	801001e <VL53LX_f_023+0x9e>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 800fffe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010002:	4618      	mov	r0, r3
 8010004:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_032;
 8010008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801000a:	461a      	mov	r2, r3
 801000c:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 8010010:	ebb0 0a02 	subs.w	sl, r0, r2
 8010014:	eb61 0b03 	sbc.w	fp, r1, r3
 8010018:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 801001c:	e00e      	b.n	801003c <VL53LX_f_023+0xbc>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 801001e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010020:	4618      	mov	r0, r3
 8010022:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_028;
 8010026:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801002a:	461a      	mov	r2, r3
 801002c:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 8010030:	ebb0 0802 	subs.w	r8, r0, r2
 8010034:	eb61 0903 	sbc.w	r9, r1, r3
 8010038:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60



		if (VL53LX_p_007 > VL53LX_p_001)
 801003c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801003e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010040:	429a      	cmp	r2, r3
 8010042:	d911      	bls.n	8010068 <VL53LX_f_023+0xe8>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8010044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010046:	4618      	mov	r0, r3
 8010048:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_001;
 801004c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801004e:	461a      	mov	r2, r3
 8010050:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8010054:	1a86      	subs	r6, r0, r2
 8010056:	62be      	str	r6, [r7, #40]	; 0x28
 8010058:	eb61 0303 	sbc.w	r3, r1, r3
 801005c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801005e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010062:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8010066:	e010      	b.n	801008a <VL53LX_f_023+0x10a>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8010068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801006a:	4618      	mov	r0, r3
 801006c:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_007;
 8010070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010072:	461a      	mov	r2, r3
 8010074:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8010078:	1a86      	subs	r6, r0, r2
 801007a:	623e      	str	r6, [r7, #32]
 801007c:	eb61 0303 	sbc.w	r3, r1, r3
 8010080:	627b      	str	r3, [r7, #36]	; 0x24
 8010082:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010086:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58



		if (b_minus_amb != 0) {
 801008a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801008e:	4313      	orrs	r3, r2
 8010090:	f000 8203 	beq.w	801049a <VL53LX_f_023+0x51a>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8010094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010096:	4618      	mov	r0, r3
 8010098:	f04f 0100 	mov.w	r1, #0
 801009c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80100a0:	461a      	mov	r2, r3
 80100a2:	f04f 0300 	mov.w	r3, #0
 80100a6:	1884      	adds	r4, r0, r2
 80100a8:	eb41 0503 	adc.w	r5, r1, r3
					(uint64_t)VL53LX_p_028;
 80100ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80100b0:	461a      	mov	r2, r3
 80100b2:	f04f 0300 	mov.w	r3, #0
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 80100b6:	18a1      	adds	r1, r4, r2
 80100b8:	61b9      	str	r1, [r7, #24]
 80100ba:	eb45 0303 	adc.w	r3, r5, r3
 80100be:	61fb      	str	r3, [r7, #28]
 80100c0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80100c4:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > VL53LX_D_003)
 80100c8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80100cc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80100d0:	f04f 0100 	mov.w	r1, #0
 80100d4:	4299      	cmp	r1, r3
 80100d6:	bf08      	it	eq
 80100d8:	4290      	cmpeq	r0, r2
 80100da:	d205      	bcs.n	80100e8 <VL53LX_f_023+0x168>
				tmp0 = VL53LX_D_003;
 80100dc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80100e0:	f04f 0300 	mov.w	r3, #0
 80100e4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 80100e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80100ec:	fb02 f203 	mul.w	r2, r2, r3
 80100f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80100f4:	fb01 f303 	mul.w	r3, r1, r3
 80100f8:	18d1      	adds	r1, r2, r3
 80100fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100fc:	fba3 2303 	umull	r2, r3, r3, r3
 8010100:	4419      	add	r1, r3
 8010102:	460b      	mov	r3, r1
 8010104:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8010108:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 << 8;
 801010c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010110:	f04f 0200 	mov.w	r2, #0
 8010114:	f04f 0300 	mov.w	r3, #0
 8010118:	020b      	lsls	r3, r1, #8
 801011a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801011e:	0202      	lsls	r2, r0, #8
 8010120:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > VL53LX_D_004)
 8010124:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010128:	f04f 30ff 	mov.w	r0, #4294967295
 801012c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010130:	4299      	cmp	r1, r3
 8010132:	bf08      	it	eq
 8010134:	4290      	cmpeq	r0, r2
 8010136:	d205      	bcs.n	8010144 <VL53LX_f_023+0x1c4>
				tmp1 = VL53LX_D_004;
 8010138:	f04f 32ff 	mov.w	r2, #4294967295
 801013c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010140:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8010144:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010148:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801014c:	f7f0 f8e8 	bl	8000320 <__aeabi_uldivmod>
 8010150:	4602      	mov	r2, r0
 8010152:	460b      	mov	r3, r1
 8010154:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8010158:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801015c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010160:	f7f0 f8de 	bl	8000320 <__aeabi_uldivmod>
 8010164:	4602      	mov	r2, r0
 8010166:	460b      	mov	r3, r1
 8010168:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_005)
 801016c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010170:	2b80      	cmp	r3, #128	; 0x80
 8010172:	bf08      	it	eq
 8010174:	2a00      	cmpeq	r2, #0
 8010176:	d305      	bcc.n	8010184 <VL53LX_f_023+0x204>
				tmp1 = (uint64_t)VL53LX_D_005;
 8010178:	f04f 32ff 	mov.w	r2, #4294967295
 801017c:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8010180:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 * tmp0;
 8010184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010186:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010188:	fb02 f203 	mul.w	r2, r2, r3
 801018c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801018e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010190:	fb01 f303 	mul.w	r3, r1, r3
 8010194:	18d1      	adds	r1, r2, r3
 8010196:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010198:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801019a:	fba2 2303 	umull	r2, r3, r2, r3
 801019e:	4419      	add	r1, r3
 80101a0:	460b      	mov	r3, r1
 80101a2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80101a6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80101aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80101ae:	4618      	mov	r0, r3
 80101b0:	f04f 0100 	mov.w	r1, #0
 80101b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80101b8:	461a      	mov	r2, r3
 80101ba:	f04f 0300 	mov.w	r3, #0
 80101be:	1884      	adds	r4, r0, r2
 80101c0:	63bc      	str	r4, [r7, #56]	; 0x38
 80101c2:	eb41 0303 	adc.w	r3, r1, r3
 80101c6:	63fb      	str	r3, [r7, #60]	; 0x3c
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80101c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80101cc:	461a      	mov	r2, r3
 80101ce:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80101d2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80101d6:	4621      	mov	r1, r4
 80101d8:	1889      	adds	r1, r1, r2
 80101da:	6339      	str	r1, [r7, #48]	; 0x30
 80101dc:	4629      	mov	r1, r5
 80101de:	eb43 0101 	adc.w	r1, r3, r1
 80101e2:	6379      	str	r1, [r7, #52]	; 0x34
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80101e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80101e8:	461a      	mov	r2, r3
 80101ea:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80101ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80101f2:	4621      	mov	r1, r4
 80101f4:	1889      	adds	r1, r1, r2
 80101f6:	6139      	str	r1, [r7, #16]
 80101f8:	4629      	mov	r1, r5
 80101fa:	eb43 0101 	adc.w	r1, r3, r1
 80101fe:	6179      	str	r1, [r7, #20]
 8010200:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010204:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_003)
 8010208:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801020c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010210:	f04f 0100 	mov.w	r1, #0
 8010214:	4299      	cmp	r1, r3
 8010216:	bf08      	it	eq
 8010218:	4290      	cmpeq	r0, r2
 801021a:	d205      	bcs.n	8010228 <VL53LX_f_023+0x2a8>
				tmp1 = (uint64_t)VL53LX_D_003;
 801021c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8010220:	f04f 0300 	mov.w	r3, #0
 8010224:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			tmp1 = tmp1 << 8;
 8010228:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801022c:	f04f 0200 	mov.w	r2, #0
 8010230:	f04f 0300 	mov.w	r3, #0
 8010234:	020b      	lsls	r3, r1, #8
 8010236:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801023a:	0202      	lsls	r2, r0, #8
 801023c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 + tmp0;
 8010240:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010244:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010248:	1884      	adds	r4, r0, r2
 801024a:	60bc      	str	r4, [r7, #8]
 801024c:	eb41 0303 	adc.w	r3, r1, r3
 8010250:	60fb      	str	r3, [r7, #12]
 8010252:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010256:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > (uint64_t)VL53LX_D_006)
 801025a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801025e:	2a00      	cmp	r2, #0
 8010260:	f173 0300 	sbcs.w	r3, r3, #0
 8010264:	da05      	bge.n	8010272 <VL53LX_f_023+0x2f2>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010266:	f04f 32ff 	mov.w	r2, #4294967295
 801026a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801026e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8010272:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010276:	2b01      	cmp	r3, #1
 8010278:	bf08      	it	eq
 801027a:	2a00      	cmpeq	r2, #0
 801027c:	d31e      	bcc.n	80102bc <VL53LX_f_023+0x33c>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 801027e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010282:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010286:	f7f0 f84b 	bl	8000320 <__aeabi_uldivmod>
 801028a:	4602      	mov	r2, r0
 801028c:	460b      	mov	r3, r1
 801028e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 8010292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010294:	461a      	mov	r2, r3
 8010296:	f04f 0300 	mov.w	r3, #0
 801029a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801029c:	fb02 f001 	mul.w	r0, r2, r1
 80102a0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80102a2:	fb03 f101 	mul.w	r1, r3, r1
 80102a6:	4401      	add	r1, r0
 80102a8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80102aa:	fba0 2302 	umull	r2, r3, r0, r2
 80102ae:	4419      	add	r1, r3
 80102b0:	460b      	mov	r3, r1
 80102b2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80102b6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80102ba:	e01d      	b.n	80102f8 <VL53LX_f_023+0x378>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 80102bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102be:	461a      	mov	r2, r3
 80102c0:	f04f 0300 	mov.w	r3, #0
 80102c4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80102c6:	fb02 f001 	mul.w	r0, r2, r1
 80102ca:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80102cc:	fb03 f101 	mul.w	r1, r3, r1
 80102d0:	4401      	add	r1, r0
 80102d2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80102d4:	fba0 2302 	umull	r2, r3, r0, r2
 80102d8:	4419      	add	r1, r3
 80102da:	460b      	mov	r3, r1
 80102dc:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80102e0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80102e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80102e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80102ec:	f7f0 f818 	bl	8000320 <__aeabi_uldivmod>
 80102f0:	4602      	mov	r2, r0
 80102f2:	460b      	mov	r3, r1
 80102f4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 80102f8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80102fc:	2a00      	cmp	r2, #0
 80102fe:	f173 0300 	sbcs.w	r3, r3, #0
 8010302:	da05      	bge.n	8010310 <VL53LX_f_023+0x390>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010304:	f04f 32ff 	mov.w	r2, #4294967295
 8010308:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801030c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8010310:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010314:	2b01      	cmp	r3, #1
 8010316:	bf08      	it	eq
 8010318:	2a00      	cmpeq	r2, #0
 801031a:	d32a      	bcc.n	8010372 <VL53LX_f_023+0x3f2>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 801031c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010320:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010324:	f7ef fffc 	bl	8000320 <__aeabi_uldivmod>
 8010328:	4602      	mov	r2, r0
 801032a:	460b      	mov	r3, r1
 801032c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 8010330:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010334:	f04f 0200 	mov.w	r2, #0
 8010338:	f04f 0300 	mov.w	r3, #0
 801033c:	0882      	lsrs	r2, r0, #2
 801033e:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010342:	088b      	lsrs	r3, r1, #2
 8010344:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 8010348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801034a:	461a      	mov	r2, r3
 801034c:	f04f 0300 	mov.w	r3, #0
 8010350:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010352:	fb02 f001 	mul.w	r0, r2, r1
 8010356:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010358:	fb03 f101 	mul.w	r1, r3, r1
 801035c:	4401      	add	r1, r0
 801035e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010360:	fba0 2302 	umull	r2, r3, r0, r2
 8010364:	4419      	add	r1, r3
 8010366:	460b      	mov	r3, r1
 8010368:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 801036c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010370:	e029      	b.n	80103c6 <VL53LX_f_023+0x446>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010374:	461a      	mov	r2, r3
 8010376:	f04f 0300 	mov.w	r3, #0
 801037a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801037c:	fb02 f001 	mul.w	r0, r2, r1
 8010380:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010382:	fb03 f101 	mul.w	r1, r3, r1
 8010386:	4401      	add	r1, r0
 8010388:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801038a:	fba0 2302 	umull	r2, r3, r0, r2
 801038e:	4419      	add	r1, r3
 8010390:	460b      	mov	r3, r1
 8010392:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010396:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 801039a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801039e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80103a2:	f7ef ffbd 	bl	8000320 <__aeabi_uldivmod>
 80103a6:	4602      	mov	r2, r0
 80103a8:	460b      	mov	r3, r1
 80103aa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 80103ae:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80103b2:	f04f 0200 	mov.w	r2, #0
 80103b6:	f04f 0300 	mov.w	r3, #0
 80103ba:	0882      	lsrs	r2, r0, #2
 80103bc:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80103c0:	088b      	lsrs	r3, r1, #2
 80103c2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 80103c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80103ca:	2a00      	cmp	r2, #0
 80103cc:	f173 0300 	sbcs.w	r3, r3, #0
 80103d0:	da05      	bge.n	80103de <VL53LX_f_023+0x45e>
				tmp0 = (uint64_t)VL53LX_D_006;
 80103d2:	f04f 32ff 	mov.w	r2, #4294967295
 80103d6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80103da:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp0 = tmp0 >> 2;
 80103de:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80103e2:	f04f 0200 	mov.w	r2, #0
 80103e6:	f04f 0300 	mov.w	r3, #0
 80103ea:	0882      	lsrs	r2, r0, #2
 80103ec:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80103f0:	088b      	lsrs	r3, r1, #2
 80103f2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 80103f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80103fa:	2b01      	cmp	r3, #1
 80103fc:	bf08      	it	eq
 80103fe:	2a00      	cmpeq	r2, #0
 8010400:	d305      	bcc.n	801040e <VL53LX_f_023+0x48e>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010402:	f04f 32ff 	mov.w	r2, #4294967295
 8010406:	f04f 0300 	mov.w	r3, #0
 801040a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 801040e:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 8010412:	f04f 0100 	mov.w	r1, #0
 8010416:	f04f 0200 	mov.w	r2, #0
 801041a:	f04f 0300 	mov.w	r3, #0
 801041e:	01cb      	lsls	r3, r1, #7
 8010420:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8010424:	01c2      	lsls	r2, r0, #7
 8010426:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 * tmp1;
 801042a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801042c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801042e:	fb02 f203 	mul.w	r2, r2, r3
 8010432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010434:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010436:	fb01 f303 	mul.w	r3, r1, r3
 801043a:	18d1      	adds	r1, r2, r3
 801043c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801043e:	fba3 2303 	umull	r2, r3, r3, r3
 8010442:	4419      	add	r1, r3
 8010444:	460b      	mov	r3, r1
 8010446:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 801044a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp0 = tmp0 + tmp1;
 801044e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010452:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010456:	1884      	adds	r4, r0, r2
 8010458:	603c      	str	r4, [r7, #0]
 801045a:	eb41 0303 	adc.w	r3, r1, r3
 801045e:	607b      	str	r3, [r7, #4]
 8010460:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010464:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010468:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801046c:	2b01      	cmp	r3, #1
 801046e:	bf08      	it	eq
 8010470:	2a00      	cmpeq	r2, #0
 8010472:	d305      	bcc.n	8010480 <VL53LX_f_023+0x500>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010474:	f04f 32ff 	mov.w	r2, #4294967295
 8010478:	f04f 0300 	mov.w	r3, #0
 801047c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 8010480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010482:	4618      	mov	r0, r3
 8010484:	f7fb f821 	bl	800b4ca <VL53LX_isqrt>
 8010488:	6578      	str	r0, [r7, #84]	; 0x54

			*psigma_est = (uint16_t)sigma_int;
 801048a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801048c:	b29a      	uxth	r2, r3
 801048e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010492:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 8010494:	2300      	movs	r3, #0
 8010496:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}

	}

	return status;
 801049a:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3784      	adds	r7, #132	; 0x84
 80104a2:	46bd      	mov	sp, r7
 80104a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080104a8 <VL53LX_wait_for_test_completion>:
}


VL53LX_Error VL53LX_wait_for_test_completion(
	VL53LX_DEV     Dev)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b086      	sub	sp, #24
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 80104b0:	2300      	movs	r3, #0
 80104b2:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	3318      	adds	r3, #24
 80104b8:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 80104ba:	2300      	movs	r3, #0
 80104bc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53LX_WAIT_METHOD_BLOCKING) {
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	781b      	ldrb	r3, [r3, #0]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d107      	bne.n	80104d6 <VL53LX_wait_for_test_completion+0x2e>



		status =
			VL53LX_poll_for_range_completion(
 80104c6:	f64e 2160 	movw	r1, #60000	; 0xea60
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f000 f88b 	bl	80105e6 <VL53LX_poll_for_range_completion>
 80104d0:	4603      	mov	r3, r0
 80104d2:	75fb      	strb	r3, [r7, #23]
 80104d4:	e01b      	b.n	801050e <VL53LX_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 80104d6:	2300      	movs	r3, #0
 80104d8:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 80104da:	e011      	b.n	8010500 <VL53LX_wait_for_test_completion+0x58>
			status = VL53LX_is_new_data_ready(
 80104dc:	f107 030f 	add.w	r3, r7, #15
 80104e0:	4619      	mov	r1, r3
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f000 f819 	bl	801051a <VL53LX_is_new_data_ready>
 80104e8:	4603      	mov	r3, r0
 80104ea:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53LX_ERROR_NONE) {
 80104ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d105      	bne.n	8010500 <VL53LX_wait_for_test_completion+0x58>
				status = VL53LX_WaitMs(
 80104f4:	2101      	movs	r1, #1
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f000 fce6 	bl	8010ec8 <VL53LX_WaitMs>
 80104fc:	4603      	mov	r3, r0
 80104fe:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8010500:	7bfb      	ldrb	r3, [r7, #15]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d103      	bne.n	801050e <VL53LX_wait_for_test_completion+0x66>
 8010506:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d0e6      	beq.n	80104dc <VL53LX_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801050e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010512:	4618      	mov	r0, r3
 8010514:	3718      	adds	r7, #24
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}

0801051a <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 801051a:	b580      	push	{r7, lr}
 801051c:	b086      	sub	sp, #24
 801051e:	af00      	add	r7, sp, #0
 8010520:	6078      	str	r0, [r7, #4]
 8010522:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010524:	2300      	movs	r3, #0
 8010526:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	3318      	adds	r3, #24
 801052c:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 801052e:	2300      	movs	r3, #0
 8010530:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8010532:	2300      	movs	r3, #0
 8010534:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8010536:	2300      	movs	r3, #0
 8010538:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 8010540:	f003 0310 	and.w	r3, r3, #16
 8010544:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8010546:	7bfb      	ldrb	r3, [r7, #15]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d102      	bne.n	8010552 <VL53LX_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 801054c:	2301      	movs	r3, #1
 801054e:	75fb      	strb	r3, [r7, #23]
 8010550:	e001      	b.n	8010556 <VL53LX_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8010552:	2300      	movs	r3, #0
 8010554:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 8010556:	f107 030e 	add.w	r3, r7, #14
 801055a:	461a      	mov	r2, r3
 801055c:	2131      	movs	r1, #49	; 0x31
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f000 fc2a 	bl	8010db8 <VL53LX_RdByte>
 8010564:	4603      	mov	r3, r0
 8010566:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8010568:	7bbb      	ldrb	r3, [r7, #14]
 801056a:	f003 0201 	and.w	r2, r3, #1
 801056e:	7dfb      	ldrb	r3, [r7, #23]
 8010570:	429a      	cmp	r2, r3
 8010572:	d103      	bne.n	801057c <VL53LX_is_new_data_ready+0x62>
		*pready = 0x01;
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	2201      	movs	r2, #1
 8010578:	701a      	strb	r2, [r3, #0]
 801057a:	e002      	b.n	8010582 <VL53LX_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	2200      	movs	r2, #0
 8010580:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8010582:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010586:	4618      	mov	r0, r3
 8010588:	3718      	adds	r7, #24
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}

0801058e <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 801058e:	b580      	push	{r7, lr}
 8010590:	b086      	sub	sp, #24
 8010592:	af02      	add	r7, sp, #8
 8010594:	6078      	str	r0, [r7, #4]
 8010596:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8010598:	2300      	movs	r3, #0
 801059a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 801059c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 fca1 	bl	8010ee8 <VL53LX_WaitUs>
 80105a6:	4603      	mov	r3, r0
 80105a8:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 80105aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d10b      	bne.n	80105ca <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 80105b2:	2301      	movs	r3, #1
 80105b4:	9301      	str	r3, [sp, #4]
 80105b6:	2301      	movs	r3, #1
 80105b8:	9300      	str	r3, [sp, #0]
 80105ba:	2301      	movs	r3, #1
 80105bc:	22e5      	movs	r2, #229	; 0xe5
 80105be:	6839      	ldr	r1, [r7, #0]
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f000 fca9 	bl	8010f18 <VL53LX_WaitValueMaskEx>
 80105c6:	4603      	mov	r3, r0
 80105c8:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 80105ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d103      	bne.n	80105da <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 80105d2:	2103      	movs	r1, #3
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f7f7 f815 	bl	8007604 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 80105da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80105de:	4618      	mov	r0, r3
 80105e0:	3710      	adds	r7, #16
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}

080105e6 <VL53LX_poll_for_range_completion>:


VL53LX_Error VL53LX_poll_for_range_completion(
	VL53LX_DEV     Dev,
	uint32_t       timeout_ms)
{
 80105e6:	b580      	push	{r7, lr}
 80105e8:	b088      	sub	sp, #32
 80105ea:	af02      	add	r7, sp, #8
 80105ec:	6078      	str	r0, [r7, #4]
 80105ee:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80105f0:	2300      	movs	r3, #0
 80105f2:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	3318      	adds	r3, #24
 80105f8:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 80105fa:	2300      	movs	r3, #0
 80105fc:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 80105fe:	2300      	movs	r3, #0
 8010600:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 8010608:	f003 0310 	and.w	r3, r3, #16
 801060c:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 801060e:	7bfb      	ldrb	r3, [r7, #15]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d102      	bne.n	801061a <VL53LX_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8010614:	2301      	movs	r3, #1
 8010616:	75fb      	strb	r3, [r7, #23]
 8010618:	e001      	b.n	801061e <VL53LX_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 801061a:	2300      	movs	r3, #0
 801061c:	75fb      	strb	r3, [r7, #23]

	status =
		VL53LX_WaitValueMaskEx(
 801061e:	7dfb      	ldrb	r3, [r7, #23]
 8010620:	2201      	movs	r2, #1
 8010622:	9201      	str	r2, [sp, #4]
 8010624:	2201      	movs	r2, #1
 8010626:	9200      	str	r2, [sp, #0]
 8010628:	2231      	movs	r2, #49	; 0x31
 801062a:	6839      	ldr	r1, [r7, #0]
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f000 fc73 	bl	8010f18 <VL53LX_WaitValueMaskEx>
 8010632:	4603      	mov	r3, r0
 8010634:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53LX_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8010636:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 801063a:	4618      	mov	r0, r3
 801063c:	3718      	adds	r7, #24
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}

08010642 <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8010642:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010646:	b0a2      	sub	sp, #136	; 0x88
 8010648:	af00      	add	r7, sp, #0
 801064a:	65f8      	str	r0, [r7, #92]	; 0x5c
 801064c:	4618      	mov	r0, r3
 801064e:	460b      	mov	r3, r1
 8010650:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8010654:	4613      	mov	r3, r2
 8010656:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 801065a:	4603      	mov	r3, r0
 801065c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010660:	2300      	movs	r3, #0
 8010662:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	uint8_t row = 0;
 8010666:	2300      	movs	r3, #0
 8010668:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t col = 0;
 801066c:	2300      	movs	r3, #0
 801066e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65



	int16_t  bound_l_x = 0;
 8010672:	2300      	movs	r3, #0
 8010674:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	int16_t  bound_r_x = 0;
 8010678:	2300      	movs	r3, #0
 801067a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	int16_t  bound_u_y = 0;
 801067e:	2300      	movs	r3, #0
 8010680:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	int16_t  bound_d_y = 0;
 8010684:	2300      	movs	r3, #0
 8010686:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

	int64_t xtalk_rate_ll = 0;
 801068a:	f04f 0200 	mov.w	r2, #0
 801068e:	f04f 0300 	mov.w	r3, #0
 8010692:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t xtalk_rate_ur = 0;
 8010696:	f04f 0200 	mov.w	r2, #0
 801069a:	f04f 0300 	mov.w	r3, #0
 801069e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	int64_t xtalk_avg = 0;
 80106a2:	f04f 0200 	mov.w	r2, #0
 80106a6:	f04f 0300 	mov.w	r3, #0
 80106aa:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	if (status == VL53LX_ERROR_NONE) {
 80106ae:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d108      	bne.n	80106c8 <VL53LX_f_032+0x86>
		VL53LX_decode_row_col(
 80106b6:	f107 0265 	add.w	r2, r7, #101	; 0x65
 80106ba:	f107 0166 	add.w	r1, r7, #102	; 0x66
 80106be:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7fb fad4 	bl	800bc70 <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 80106c8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d165      	bne.n	801079c <VL53LX_f_032+0x15a>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 80106d0:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80106d4:	091b      	lsrs	r3, r3, #4
 80106d6:	b2db      	uxtb	r3, r3
 80106d8:	f003 0301 	and.w	r3, r3, #1
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d00e      	beq.n	80106fe <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 80106e0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80106e4:	b29a      	uxth	r2, r3
 80106e6:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80106ea:	095b      	lsrs	r3, r3, #5
 80106ec:	b2db      	uxtb	r3, r3
 80106ee:	b29b      	uxth	r3, r3
 80106f0:	1ad3      	subs	r3, r2, r3
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	3b01      	subs	r3, #1
 80106f6:	b29b      	uxth	r3, r3
 80106f8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 80106fc:	e00b      	b.n	8010716 <VL53LX_f_032+0xd4>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 80106fe:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8010702:	b29a      	uxth	r2, r3
 8010704:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010708:	095b      	lsrs	r3, r3, #5
 801070a:	b2db      	uxtb	r3, r3
 801070c:	b29b      	uxth	r3, r3
 801070e:	1ad3      	subs	r3, r2, r3
 8010710:	b29b      	uxth	r3, r3
 8010712:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8010716:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 801071a:	b29a      	uxth	r2, r3
 801071c:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010720:	095b      	lsrs	r3, r3, #5
 8010722:	b2db      	uxtb	r3, r3
 8010724:	b29b      	uxth	r3, r3
 8010726:	4413      	add	r3, r2
 8010728:	b29b      	uxth	r3, r3
 801072a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 801072e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010732:	f003 0301 	and.w	r3, r3, #1
 8010736:	2b00      	cmp	r3, #0
 8010738:	d011      	beq.n	801075e <VL53LX_f_032+0x11c>
			bound_d_y = (int16_t) row -
 801073a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801073e:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8010740:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010744:	f003 020f 	and.w	r2, r3, #15
 8010748:	0fd3      	lsrs	r3, r2, #31
 801074a:	4413      	add	r3, r2
 801074c:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 801074e:	b29b      	uxth	r3, r3
 8010750:	1acb      	subs	r3, r1, r3
 8010752:	b29b      	uxth	r3, r3
 8010754:	3b01      	subs	r3, #1
 8010756:	b29b      	uxth	r3, r3
 8010758:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 801075c:	e00f      	b.n	801077e <VL53LX_f_032+0x13c>
		else
			bound_d_y = (int16_t) row -
 801075e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8010762:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8010764:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010768:	f003 020f 	and.w	r2, r3, #15
 801076c:	0fd3      	lsrs	r3, r2, #31
 801076e:	4413      	add	r3, r2
 8010770:	105b      	asrs	r3, r3, #1
 8010772:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8010774:	b29b      	uxth	r3, r3
 8010776:	440b      	add	r3, r1
 8010778:	b29b      	uxth	r3, r3
 801077a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

		bound_u_y = (int16_t) row +
 801077e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8010782:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8010784:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010788:	f003 020f 	and.w	r2, r3, #15
 801078c:	0fd3      	lsrs	r3, r2, #31
 801078e:	4413      	add	r3, r2
 8010790:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8010792:	b29b      	uxth	r3, r3
 8010794:	440b      	add	r3, r1
 8010796:	b29b      	uxth	r3, r3
 8010798:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 801079c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d133      	bne.n	801080c <VL53LX_f_032+0x1ca>
		bound_l_x =  (2 * bound_l_x) - 15 +
 80107a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80107a8:	b29a      	uxth	r2, r3
 80107aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80107ae:	4413      	add	r3, r2
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	005b      	lsls	r3, r3, #1
 80107b4:	b29b      	uxth	r3, r3
 80107b6:	3b0f      	subs	r3, #15
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 80107be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80107c2:	b29a      	uxth	r2, r3
 80107c4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80107c8:	4413      	add	r3, r2
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	005b      	lsls	r3, r3, #1
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	3b0f      	subs	r3, #15
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 80107d8:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 80107dc:	b29a      	uxth	r2, r3
 80107de:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80107e2:	4413      	add	r3, r2
 80107e4:	b29b      	uxth	r3, r3
 80107e6:	005b      	lsls	r3, r3, #1
 80107e8:	b29b      	uxth	r3, r3
 80107ea:	3b0f      	subs	r3, #15
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 80107f2:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 80107f6:	b29a      	uxth	r2, r3
 80107f8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80107fc:	4413      	add	r3, r2
 80107fe:	b29b      	uxth	r3, r3
 8010800:	005b      	lsls	r3, r3, #1
 8010802:	b29b      	uxth	r3, r3
 8010804:	3b0f      	subs	r3, #15
 8010806:	b29b      	uxth	r3, r3
 8010808:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 801080c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010810:	2b00      	cmp	r3, #0
 8010812:	f040 80cb 	bne.w	80109ac <VL53LX_f_032+0x36a>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010816:	f9b7 0086 	ldrsh.w	r0, [r7, #134]	; 0x86
 801081a:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 801081e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8010822:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010826:	fb02 f501 	mul.w	r5, r2, r1
 801082a:	fb00 f403 	mul.w	r4, r0, r3
 801082e:	442c      	add	r4, r5
 8010830:	fba0 8902 	umull	r8, r9, r0, r2
 8010834:	eb04 0309 	add.w	r3, r4, r9
 8010838:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 801083a:	f9b7 0080 	ldrsh.w	r0, [r7, #128]	; 0x80
 801083e:	ea4f 71e0 	mov.w	r1, r0, asr #31
					((int64_t)ygradient));
 8010842:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8010846:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 801084a:	fb02 f501 	mul.w	r5, r2, r1
 801084e:	fb00 f403 	mul.w	r4, r0, r3
 8010852:	442c      	add	r4, r5
 8010854:	fba0 2302 	umull	r2, r3, r0, r2
 8010858:	18e1      	adds	r1, r4, r3
 801085a:	460b      	mov	r3, r1
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 801085c:	eb18 0102 	adds.w	r1, r8, r2
 8010860:	6339      	str	r1, [r7, #48]	; 0x30
 8010862:	eb49 0303 	adc.w	r3, r9, r3
 8010866:	637b      	str	r3, [r7, #52]	; 0x34
 8010868:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 801086c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8010870:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010874:	f112 0a01 	adds.w	sl, r2, #1
 8010878:	f143 0b00 	adc.w	fp, r3, #0
 801087c:	ea4f 73db 	mov.w	r3, fp, lsr #31
 8010880:	461a      	mov	r2, r3
 8010882:	f04f 0300 	mov.w	r3, #0
 8010886:	eb12 010a 	adds.w	r1, r2, sl
 801088a:	62b9      	str	r1, [r7, #40]	; 0x28
 801088c:	eb43 030b 	adc.w	r3, r3, fp
 8010890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010892:	f04f 0200 	mov.w	r2, #0
 8010896:	f04f 0300 	mov.w	r3, #0
 801089a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 801089e:	4621      	mov	r1, r4
 80108a0:	084a      	lsrs	r2, r1, #1
 80108a2:	4629      	mov	r1, r5
 80108a4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80108a8:	4629      	mov	r1, r5
 80108aa:	104b      	asrs	r3, r1, #1
 80108ac:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 80108b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108b2:	461a      	mov	r2, r3
 80108b4:	f04f 0300 	mov.w	r3, #0
 80108b8:	f04f 0000 	mov.w	r0, #0
 80108bc:	f04f 0100 	mov.w	r1, #0
 80108c0:	0099      	lsls	r1, r3, #2
 80108c2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80108c6:	0090      	lsls	r0, r2, #2
 80108c8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80108cc:	1814      	adds	r4, r2, r0
 80108ce:	623c      	str	r4, [r7, #32]
 80108d0:	414b      	adcs	r3, r1
 80108d2:	627b      	str	r3, [r7, #36]	; 0x24
 80108d4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80108d8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80108dc:	f9b7 0084 	ldrsh.w	r0, [r7, #132]	; 0x84
 80108e0:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80108e4:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80108e8:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80108ec:	fb02 f501 	mul.w	r5, r2, r1
 80108f0:	fb00 f403 	mul.w	r4, r0, r3
 80108f4:	442c      	add	r4, r5
 80108f6:	fba0 8902 	umull	r8, r9, r0, r2
 80108fa:	eb04 0309 	add.w	r3, r4, r9
 80108fe:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8010900:	f9b7 0082 	ldrsh.w	r0, [r7, #130]	; 0x82
 8010904:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)ygradient));
 8010908:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 801090c:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8010910:	fb02 f501 	mul.w	r5, r2, r1
 8010914:	fb00 f403 	mul.w	r4, r0, r3
 8010918:	442c      	add	r4, r5
 801091a:	fba0 2302 	umull	r2, r3, r0, r2
 801091e:	18e1      	adds	r1, r4, r3
 8010920:	460b      	mov	r3, r1
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8010922:	eb18 0102 	adds.w	r1, r8, r2
 8010926:	61b9      	str	r1, [r7, #24]
 8010928:	eb49 0303 	adc.w	r3, r9, r3
 801092c:	61fb      	str	r3, [r7, #28]
 801092e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010932:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8010936:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801093a:	1c51      	adds	r1, r2, #1
 801093c:	64b9      	str	r1, [r7, #72]	; 0x48
 801093e:	f143 0300 	adc.w	r3, r3, #0
 8010942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010944:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8010948:	462b      	mov	r3, r5
 801094a:	0fdb      	lsrs	r3, r3, #31
 801094c:	461a      	mov	r2, r3
 801094e:	f04f 0300 	mov.w	r3, #0
 8010952:	4621      	mov	r1, r4
 8010954:	1851      	adds	r1, r2, r1
 8010956:	6139      	str	r1, [r7, #16]
 8010958:	4629      	mov	r1, r5
 801095a:	eb43 0101 	adc.w	r1, r3, r1
 801095e:	6179      	str	r1, [r7, #20]
 8010960:	f04f 0200 	mov.w	r2, #0
 8010964:	f04f 0300 	mov.w	r3, #0
 8010968:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801096c:	4621      	mov	r1, r4
 801096e:	084a      	lsrs	r2, r1, #1
 8010970:	4629      	mov	r1, r5
 8010972:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010976:	4629      	mov	r1, r5
 8010978:	104b      	asrs	r3, r1, #1
 801097a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 801097e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010980:	4618      	mov	r0, r3
 8010982:	f04f 0100 	mov.w	r1, #0
 8010986:	f04f 0200 	mov.w	r2, #0
 801098a:	f04f 0300 	mov.w	r3, #0
 801098e:	008b      	lsls	r3, r1, #2
 8010990:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010994:	0082      	lsls	r2, r0, #2
 8010996:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801099a:	1884      	adds	r4, r0, r2
 801099c:	60bc      	str	r4, [r7, #8]
 801099e:	eb41 0303 	adc.w	r3, r1, r3
 80109a2:	60fb      	str	r3, [r7, #12]
 80109a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80109a8:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 80109ac:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d12e      	bne.n	8010a12 <VL53LX_f_032+0x3d0>
		xtalk_avg = do_division_s(
 80109b4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80109b8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80109bc:	1884      	adds	r4, r0, r2
 80109be:	643c      	str	r4, [r7, #64]	; 0x40
 80109c0:	eb41 0303 	adc.w	r3, r1, r3
 80109c4:	647b      	str	r3, [r7, #68]	; 0x44
 80109c6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80109ca:	460b      	mov	r3, r1
 80109cc:	3301      	adds	r3, #1
 80109ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80109d0:	4613      	mov	r3, r2
 80109d2:	f143 0300 	adc.w	r3, r3, #0
 80109d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80109d8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80109dc:	462b      	mov	r3, r5
 80109de:	0fdb      	lsrs	r3, r3, #31
 80109e0:	461a      	mov	r2, r3
 80109e2:	f04f 0300 	mov.w	r3, #0
 80109e6:	4621      	mov	r1, r4
 80109e8:	1851      	adds	r1, r2, r1
 80109ea:	6039      	str	r1, [r7, #0]
 80109ec:	4629      	mov	r1, r5
 80109ee:	eb43 0101 	adc.w	r1, r3, r1
 80109f2:	6079      	str	r1, [r7, #4]
 80109f4:	f04f 0200 	mov.w	r2, #0
 80109f8:	f04f 0300 	mov.w	r3, #0
 80109fc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010a00:	4621      	mov	r1, r4
 8010a02:	084a      	lsrs	r2, r1, #1
 8010a04:	4629      	mov	r1, r5
 8010a06:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010a0a:	4629      	mov	r1, r5
 8010a0c:	104b      	asrs	r3, r1, #1
 8010a0e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 8010a12:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d10b      	bne.n	8010a32 <VL53LX_f_032+0x3f0>
		if (xtalk_avg < 0)
 8010a1a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010a1e:	2a00      	cmp	r2, #0
 8010a20:	f173 0300 	sbcs.w	r3, r3, #0
 8010a24:	da05      	bge.n	8010a32 <VL53LX_f_032+0x3f0>
			xtalk_avg = 0;
 8010a26:	f04f 0200 	mov.w	r2, #0
 8010a2a:	f04f 0300 	mov.w	r3, #0
 8010a2e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8010a32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010a34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010a38:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8010a3a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3788      	adds	r7, #136	; 0x88
 8010a42:	46bd      	mov	sp, r7
 8010a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010a48 <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8010a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a4c:	b08d      	sub	sp, #52	; 0x34
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	60f8      	str	r0, [r7, #12]
 8010a52:	60b9      	str	r1, [r7, #8]
 8010a54:	607a      	str	r2, [r7, #4]
 8010a56:	603b      	str	r3, [r7, #0]


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	uint64_t xtalk_events_per_spad = 0;
 8010a5e:	f04f 0200 	mov.w	r2, #0
 8010a62:	f04f 0300 	mov.w	r3, #0
 8010a66:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint64_t xtalk_total_events = 0;
 8010a6a:	f04f 0200 	mov.w	r2, #0
 8010a6e:	f04f 0300 	mov.w	r3, #0
 8010a72:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t xtalk_temp_bin = 0;
 8010a76:	f04f 0200 	mov.w	r2, #0
 8010a7a:	f04f 0300 	mov.w	r3, #0
 8010a7e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t  i = 0;
 8010a82:	2300      	movs	r3, #0
 8010a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f04f 0100 	mov.w	r1, #0
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a96:	461a      	mov	r2, r3
 8010a98:	f04f 0300 	mov.w	r3, #0
 8010a9c:	fb02 fc01 	mul.w	ip, r2, r1
 8010aa0:	fb00 f603 	mul.w	r6, r0, r3
 8010aa4:	4466      	add	r6, ip
 8010aa6:	fba0 2302 	umull	r2, r3, r0, r2
 8010aaa:	18f1      	adds	r1, r6, r3
 8010aac:	460b      	mov	r3, r1
 8010aae:	f512 7afa 	adds.w	sl, r2, #500	; 0x1f4
 8010ab2:	f143 0b00 	adc.w	fp, r3, #0
 8010ab6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010aba:	f04f 0300 	mov.w	r3, #0
 8010abe:	4650      	mov	r0, sl
 8010ac0:	4659      	mov	r1, fp
 8010ac2:	f7ef fc2d 	bl	8000320 <__aeabi_uldivmod>
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	460b      	mov	r3, r1
 8010aca:	e9c7 2306 	strd	r2, r3, [r7, #24]




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	f04f 0300 	mov.w	r3, #0
	xtalk_total_events = xtalk_events_per_spad *
 8010ada:	69f9      	ldr	r1, [r7, #28]
 8010adc:	fb02 f001 	mul.w	r0, r2, r1
 8010ae0:	69b9      	ldr	r1, [r7, #24]
 8010ae2:	fb03 f101 	mul.w	r1, r3, r1
 8010ae6:	4401      	add	r1, r0
 8010ae8:	69b8      	ldr	r0, [r7, #24]
 8010aea:	fba0 2302 	umull	r2, r3, r0, r2
 8010aee:	4419      	add	r1, r3
 8010af0:	460b      	mov	r3, r1
 8010af2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8010af6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8010afa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8010afe:	f04f 0200 	mov.w	r2, #0
 8010b02:	f04f 0300 	mov.w	r3, #0
 8010b06:	0a02      	lsrs	r2, r0, #8
 8010b08:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010b0c:	0a0b      	lsrs	r3, r1, #8
 8010b0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8010b12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010b16:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 8010b1a:	f143 0900 	adc.w	r9, r3, #0
 8010b1e:	f04f 0200 	mov.w	r2, #0
 8010b22:	f04f 0300 	mov.w	r3, #0
 8010b26:	ea4f 22d8 	mov.w	r2, r8, lsr #11
 8010b2a:	ea42 5249 	orr.w	r2, r2, r9, lsl #21
 8010b2e:	ea4f 23d9 	mov.w	r3, r9, lsr #11
 8010b32:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (xtalk_total_events > 0xFFFFFFFF)
 8010b36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	bf08      	it	eq
 8010b3e:	2a00      	cmpeq	r2, #0
 8010b40:	d305      	bcc.n	8010b4e <VL53LX_f_033+0x106>
		xtalk_total_events = 0xFFFFFFFF;
 8010b42:	f04f 32ff 	mov.w	r2, #4294967295
 8010b46:	f04f 0300 	mov.w	r3, #0
 8010b4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8010b4e:	2300      	movs	r3, #0
 8010b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010b54:	e035      	b.n	8010bc2 <VL53LX_f_033+0x17a>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8010b56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b5a:	68ba      	ldr	r2, [r7, #8]
 8010b5c:	3302      	adds	r3, #2
 8010b5e:	009b      	lsls	r3, r3, #2
 8010b60:	4413      	add	r3, r2
 8010b62:	685b      	ldr	r3, [r3, #4]
 8010b64:	461a      	mov	r2, r3
 8010b66:	f04f 0300 	mov.w	r3, #0
 8010b6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b6c:	fb02 f001 	mul.w	r0, r2, r1
 8010b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010b72:	fb03 f101 	mul.w	r1, r3, r1
 8010b76:	4401      	add	r1, r0
 8010b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b7a:	fba0 2302 	umull	r2, r3, r0, r2
 8010b7e:	4419      	add	r1, r3
 8010b80:	460b      	mov	r3, r1
 8010b82:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8010b86:	e9c7 2304 	strd	r2, r3, [r7, #16]
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8010b8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010b8e:	f512 7400 	adds.w	r4, r2, #512	; 0x200
 8010b92:	f143 0500 	adc.w	r5, r3, #0
 8010b96:	f04f 0200 	mov.w	r2, #0
 8010b9a:	f04f 0300 	mov.w	r3, #0
 8010b9e:	0aa2      	lsrs	r2, r4, #10
 8010ba0:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
 8010ba4:	0aab      	lsrs	r3, r5, #10
 8010ba6:	e9c7 2304 	strd	r2, r3, [r7, #16]

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8010baa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010bae:	6939      	ldr	r1, [r7, #16]
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	3206      	adds	r2, #6
 8010bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8010bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bbc:	3301      	adds	r3, #1
 8010bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	7a9b      	ldrb	r3, [r3, #10]
 8010bc6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d3c3      	bcc.n	8010b56 <VL53LX_f_033+0x10e>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8010bce:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	3734      	adds	r7, #52	; 0x34
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010bdc <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b084      	sub	sp, #16
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	60f8      	str	r0, [r7, #12]
 8010be4:	60b9      	str	r1, [r7, #8]
 8010be6:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	68db      	ldr	r3, [r3, #12]
 8010bec:	68fa      	ldr	r2, [r7, #12]
 8010bee:	8910      	ldrh	r0, [r2, #8]
 8010bf0:	687a      	ldr	r2, [r7, #4]
 8010bf2:	b292      	uxth	r2, r2
 8010bf4:	68b9      	ldr	r1, [r7, #8]
 8010bf6:	4798      	blx	r3
 8010bf8:	4603      	mov	r3, r0
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	3710      	adds	r7, #16
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}

08010c02 <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8010c02:	b580      	push	{r7, lr}
 8010c04:	b084      	sub	sp, #16
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	60f8      	str	r0, [r7, #12]
 8010c0a:	60b9      	str	r1, [r7, #8]
 8010c0c:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	691b      	ldr	r3, [r3, #16]
 8010c12:	68fa      	ldr	r2, [r7, #12]
 8010c14:	8910      	ldrh	r0, [r2, #8]
 8010c16:	687a      	ldr	r2, [r7, #4]
 8010c18:	b292      	uxth	r2, r2
 8010c1a:	68b9      	ldr	r1, [r7, #8]
 8010c1c:	4798      	blx	r3
 8010c1e:	4603      	mov	r3, r0
}
 8010c20:	4618      	mov	r0, r3
 8010c22:	3710      	adds	r7, #16
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}

08010c28 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b086      	sub	sp, #24
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	60f8      	str	r0, [r7, #12]
 8010c30:	607a      	str	r2, [r7, #4]
 8010c32:	603b      	str	r3, [r7, #0]
 8010c34:	460b      	mov	r3, r1
 8010c36:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	2bff      	cmp	r3, #255	; 0xff
 8010c40:	d902      	bls.n	8010c48 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 8010c42:	f06f 0303 	mvn.w	r3, #3
 8010c46:	e01d      	b.n	8010c84 <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8010c48:	897b      	ldrh	r3, [r7, #10]
 8010c4a:	0a1b      	lsrs	r3, r3, #8
 8010c4c:	b29b      	uxth	r3, r3
 8010c4e:	b2da      	uxtb	r2, r3
 8010c50:	4b0e      	ldr	r3, [pc, #56]	; (8010c8c <VL53LX_WriteMulti+0x64>)
 8010c52:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010c54:	897b      	ldrh	r3, [r7, #10]
 8010c56:	b2da      	uxtb	r2, r3
 8010c58:	4b0c      	ldr	r3, [pc, #48]	; (8010c8c <VL53LX_WriteMulti+0x64>)
 8010c5a:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8010c5c:	683a      	ldr	r2, [r7, #0]
 8010c5e:	6879      	ldr	r1, [r7, #4]
 8010c60:	480b      	ldr	r0, [pc, #44]	; (8010c90 <VL53LX_WriteMulti+0x68>)
 8010c62:	f003 fa39 	bl	80140d8 <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	3302      	adds	r3, #2
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	4907      	ldr	r1, [pc, #28]	; (8010c8c <VL53LX_WriteMulti+0x64>)
 8010c6e:	68f8      	ldr	r0, [r7, #12]
 8010c70:	f7ff ffb4 	bl	8010bdc <_I2CWrite>
 8010c74:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d001      	beq.n	8010c80 <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010c7c:	23f3      	movs	r3, #243	; 0xf3
 8010c7e:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 8010c80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3718      	adds	r7, #24
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	200070f4 	.word	0x200070f4
 8010c90:	200070f6 	.word	0x200070f6

08010c94 <VL53LX_ReadMulti>:

VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b086      	sub	sp, #24
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	60f8      	str	r0, [r7, #12]
 8010c9c:	607a      	str	r2, [r7, #4]
 8010c9e:	603b      	str	r3, [r7, #0]
 8010ca0:	460b      	mov	r3, r1
 8010ca2:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010ca8:	897b      	ldrh	r3, [r7, #10]
 8010caa:	0a1b      	lsrs	r3, r3, #8
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	b2da      	uxtb	r2, r3
 8010cb0:	4b12      	ldr	r3, [pc, #72]	; (8010cfc <VL53LX_ReadMulti+0x68>)
 8010cb2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010cb4:	897b      	ldrh	r3, [r7, #10]
 8010cb6:	b2da      	uxtb	r2, r3
 8010cb8:	4b10      	ldr	r3, [pc, #64]	; (8010cfc <VL53LX_ReadMulti+0x68>)
 8010cba:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010cbc:	2202      	movs	r2, #2
 8010cbe:	490f      	ldr	r1, [pc, #60]	; (8010cfc <VL53LX_ReadMulti+0x68>)
 8010cc0:	68f8      	ldr	r0, [r7, #12]
 8010cc2:	f7ff ff8b 	bl	8010bdc <_I2CWrite>
 8010cc6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d002      	beq.n	8010cd4 <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010cce:	23f3      	movs	r3, #243	; 0xf3
 8010cd0:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010cd2:	e00c      	b.n	8010cee <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8010cd4:	683a      	ldr	r2, [r7, #0]
 8010cd6:	6879      	ldr	r1, [r7, #4]
 8010cd8:	68f8      	ldr	r0, [r7, #12]
 8010cda:	f7ff ff92 	bl	8010c02 <_I2CRead>
 8010cde:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d002      	beq.n	8010cec <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010ce6:	23f3      	movs	r3, #243	; 0xf3
 8010ce8:	75fb      	strb	r3, [r7, #23]
 8010cea:	e000      	b.n	8010cee <VL53LX_ReadMulti+0x5a>
    }
done:
 8010cec:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8010cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3718      	adds	r7, #24
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}
 8010cfa:	bf00      	nop
 8010cfc:	200070f4 	.word	0x200070f4

08010d00 <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b084      	sub	sp, #16
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	460b      	mov	r3, r1
 8010d0a:	807b      	strh	r3, [r7, #2]
 8010d0c:	4613      	mov	r3, r2
 8010d0e:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010d10:	2300      	movs	r3, #0
 8010d12:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010d14:	887b      	ldrh	r3, [r7, #2]
 8010d16:	0a1b      	lsrs	r3, r3, #8
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	b2da      	uxtb	r2, r3
 8010d1c:	4b0c      	ldr	r3, [pc, #48]	; (8010d50 <VL53LX_WrByte+0x50>)
 8010d1e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010d20:	887b      	ldrh	r3, [r7, #2]
 8010d22:	b2da      	uxtb	r2, r3
 8010d24:	4b0a      	ldr	r3, [pc, #40]	; (8010d50 <VL53LX_WrByte+0x50>)
 8010d26:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8010d28:	4a09      	ldr	r2, [pc, #36]	; (8010d50 <VL53LX_WrByte+0x50>)
 8010d2a:	787b      	ldrb	r3, [r7, #1]
 8010d2c:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8010d2e:	2203      	movs	r2, #3
 8010d30:	4907      	ldr	r1, [pc, #28]	; (8010d50 <VL53LX_WrByte+0x50>)
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f7ff ff52 	bl	8010bdc <_I2CWrite>
 8010d38:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d001      	beq.n	8010d44 <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010d40:	23f3      	movs	r3, #243	; 0xf3
 8010d42:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8010d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3710      	adds	r7, #16
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}
 8010d50:	200070f4 	.word	0x200070f4

08010d54 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b084      	sub	sp, #16
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
 8010d5c:	460b      	mov	r3, r1
 8010d5e:	807b      	strh	r3, [r7, #2]
 8010d60:	4613      	mov	r3, r2
 8010d62:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010d64:	2300      	movs	r3, #0
 8010d66:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010d68:	887b      	ldrh	r3, [r7, #2]
 8010d6a:	0a1b      	lsrs	r3, r3, #8
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	b2da      	uxtb	r2, r3
 8010d70:	4b10      	ldr	r3, [pc, #64]	; (8010db4 <VL53LX_WrWord+0x60>)
 8010d72:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010d74:	887b      	ldrh	r3, [r7, #2]
 8010d76:	b2da      	uxtb	r2, r3
 8010d78:	4b0e      	ldr	r3, [pc, #56]	; (8010db4 <VL53LX_WrWord+0x60>)
 8010d7a:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8010d7c:	883b      	ldrh	r3, [r7, #0]
 8010d7e:	0a1b      	lsrs	r3, r3, #8
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	b2da      	uxtb	r2, r3
 8010d84:	4b0b      	ldr	r3, [pc, #44]	; (8010db4 <VL53LX_WrWord+0x60>)
 8010d86:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8010d88:	883b      	ldrh	r3, [r7, #0]
 8010d8a:	b2da      	uxtb	r2, r3
 8010d8c:	4b09      	ldr	r3, [pc, #36]	; (8010db4 <VL53LX_WrWord+0x60>)
 8010d8e:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8010d90:	2204      	movs	r2, #4
 8010d92:	4908      	ldr	r1, [pc, #32]	; (8010db4 <VL53LX_WrWord+0x60>)
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f7ff ff21 	bl	8010bdc <_I2CWrite>
 8010d9a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d001      	beq.n	8010da6 <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010da2:	23f3      	movs	r3, #243	; 0xf3
 8010da4:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8010da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	3710      	adds	r7, #16
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}
 8010db2:	bf00      	nop
 8010db4:	200070f4 	.word	0x200070f4

08010db8 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b086      	sub	sp, #24
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	60f8      	str	r0, [r7, #12]
 8010dc0:	460b      	mov	r3, r1
 8010dc2:	607a      	str	r2, [r7, #4]
 8010dc4:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8010dca:	897b      	ldrh	r3, [r7, #10]
 8010dcc:	0a1b      	lsrs	r3, r3, #8
 8010dce:	b29b      	uxth	r3, r3
 8010dd0:	b2da      	uxtb	r2, r3
 8010dd2:	4b12      	ldr	r3, [pc, #72]	; (8010e1c <VL53LX_RdByte+0x64>)
 8010dd4:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8010dd6:	897b      	ldrh	r3, [r7, #10]
 8010dd8:	b2da      	uxtb	r2, r3
 8010dda:	4b10      	ldr	r3, [pc, #64]	; (8010e1c <VL53LX_RdByte+0x64>)
 8010ddc:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010dde:	2202      	movs	r2, #2
 8010de0:	490e      	ldr	r1, [pc, #56]	; (8010e1c <VL53LX_RdByte+0x64>)
 8010de2:	68f8      	ldr	r0, [r7, #12]
 8010de4:	f7ff fefa 	bl	8010bdc <_I2CWrite>
 8010de8:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d002      	beq.n	8010df6 <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010df0:	23f3      	movs	r3, #243	; 0xf3
 8010df2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010df4:	e00c      	b.n	8010e10 <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8010df6:	2201      	movs	r2, #1
 8010df8:	6879      	ldr	r1, [r7, #4]
 8010dfa:	68f8      	ldr	r0, [r7, #12]
 8010dfc:	f7ff ff01 	bl	8010c02 <_I2CRead>
 8010e00:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010e02:	693b      	ldr	r3, [r7, #16]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d002      	beq.n	8010e0e <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010e08:	23f3      	movs	r3, #243	; 0xf3
 8010e0a:	75fb      	strb	r3, [r7, #23]
 8010e0c:	e000      	b.n	8010e10 <VL53LX_RdByte+0x58>
    }
done:
 8010e0e:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8010e10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3718      	adds	r7, #24
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	200070f4 	.word	0x200070f4

08010e20 <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b086      	sub	sp, #24
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	60f8      	str	r0, [r7, #12]
 8010e28:	460b      	mov	r3, r1
 8010e2a:	607a      	str	r2, [r7, #4]
 8010e2c:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010e32:	897b      	ldrh	r3, [r7, #10]
 8010e34:	0a1b      	lsrs	r3, r3, #8
 8010e36:	b29b      	uxth	r3, r3
 8010e38:	b2da      	uxtb	r2, r3
 8010e3a:	4b18      	ldr	r3, [pc, #96]	; (8010e9c <VL53LX_RdWord+0x7c>)
 8010e3c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8010e3e:	897b      	ldrh	r3, [r7, #10]
 8010e40:	b2da      	uxtb	r2, r3
 8010e42:	4b16      	ldr	r3, [pc, #88]	; (8010e9c <VL53LX_RdWord+0x7c>)
 8010e44:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010e46:	2202      	movs	r2, #2
 8010e48:	4914      	ldr	r1, [pc, #80]	; (8010e9c <VL53LX_RdWord+0x7c>)
 8010e4a:	68f8      	ldr	r0, [r7, #12]
 8010e4c:	f7ff fec6 	bl	8010bdc <_I2CWrite>
 8010e50:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d002      	beq.n	8010e5e <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010e58:	23f3      	movs	r3, #243	; 0xf3
 8010e5a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010e5c:	e017      	b.n	8010e8e <VL53LX_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8010e5e:	2202      	movs	r2, #2
 8010e60:	490e      	ldr	r1, [pc, #56]	; (8010e9c <VL53LX_RdWord+0x7c>)
 8010e62:	68f8      	ldr	r0, [r7, #12]
 8010e64:	f7ff fecd 	bl	8010c02 <_I2CRead>
 8010e68:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d002      	beq.n	8010e76 <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010e70:	23f3      	movs	r3, #243	; 0xf3
 8010e72:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010e74:	e00b      	b.n	8010e8e <VL53LX_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8010e76:	4b09      	ldr	r3, [pc, #36]	; (8010e9c <VL53LX_RdWord+0x7c>)
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	b29b      	uxth	r3, r3
 8010e7c:	021b      	lsls	r3, r3, #8
 8010e7e:	b29a      	uxth	r2, r3
 8010e80:	4b06      	ldr	r3, [pc, #24]	; (8010e9c <VL53LX_RdWord+0x7c>)
 8010e82:	785b      	ldrb	r3, [r3, #1]
 8010e84:	b29b      	uxth	r3, r3
 8010e86:	4413      	add	r3, r2
 8010e88:	b29a      	uxth	r2, r3
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 8010e8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	3718      	adds	r7, #24
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}
 8010e9a:	bf00      	nop
 8010e9c:	200070f4 	.word	0x200070f4

08010ea0 <VL53LX_GetTickCount>:
    VL53LX_PutI2cBus();
    return Status;
}

VL53LX_Error VL53LX_GetTickCount(VL53LX_DEV Dev, uint32_t *ptick_count_ms)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b084      	sub	sp, #16
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
 8010ea8:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	695b      	ldr	r3, [r3, #20]
 8010eb2:	4798      	blx	r3
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8010ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3710      	adds	r7, #16
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}

08010ec8 <VL53LX_WaitMs>:
	
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitMs(VL53LX_DEV Dev, int32_t wait_ms){
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b082      	sub	sp, #8
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_ms);
 8010ed2:	683b      	ldr	r3, [r7, #0]
 8010ed4:	4619      	mov	r1, r3
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f000 f8b8 	bl	801104c <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8010edc:	2300      	movs	r3, #0
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3708      	adds	r7, #8
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
	...

08010ee8 <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_DEV Dev, int32_t wait_us){
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_us/1000);
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	4a07      	ldr	r2, [pc, #28]	; (8010f14 <VL53LX_WaitUs+0x2c>)
 8010ef6:	fb82 1203 	smull	r1, r2, r2, r3
 8010efa:	1192      	asrs	r2, r2, #6
 8010efc:	17db      	asrs	r3, r3, #31
 8010efe:	1ad3      	subs	r3, r2, r3
 8010f00:	4619      	mov	r1, r3
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f000 f8a2 	bl	801104c <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8010f08:	2300      	movs	r3, #0
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3708      	adds	r7, #8
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}
 8010f12:	bf00      	nop
 8010f14:	10624dd3 	.word	0x10624dd3

08010f18 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8010f18:	b590      	push	{r4, r7, lr}
 8010f1a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8010f1e:	af00      	add	r7, sp, #0
 8010f20:	f107 040c 	add.w	r4, r7, #12
 8010f24:	6020      	str	r0, [r4, #0]
 8010f26:	f107 0008 	add.w	r0, r7, #8
 8010f2a:	6001      	str	r1, [r0, #0]
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	1dbb      	adds	r3, r7, #6
 8010f30:	801a      	strh	r2, [r3, #0]
 8010f32:	1d7b      	adds	r3, r7, #5
 8010f34:	460a      	mov	r2, r1
 8010f36:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8010f44:	2300      	movs	r3, #0
 8010f46:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8010f50:	2300      	movs	r3, #0
 8010f52:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8010f56:	2300      	movs	r3, #0
 8010f58:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 8010f5c:	f107 0310 	add.w	r3, r7, #16
 8010f60:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010f64:	4938      	ldr	r1, [pc, #224]	; (8011048 <VL53LX_WaitValueMaskEx+0x130>)
 8010f66:	4618      	mov	r0, r3
 8010f68:	f003 f95a 	bl	8014220 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(Dev, &start_time_ms);
 8010f6c:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8010f70:	f107 030c 	add.w	r3, r7, #12
 8010f74:	4611      	mov	r1, r2
 8010f76:	6818      	ldr	r0, [r3, #0]
 8010f78:	f7ff ff92 	bl	8010ea0 <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 8010f7c:	e042      	b.n	8011004 <VL53LX_WaitValueMaskEx+0xec>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 8010f7e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d10b      	bne.n	8010f9e <VL53LX_WaitValueMaskEx+0x86>
			status = VL53LX_RdByte(
 8010f86:	f207 2213 	addw	r2, r7, #531	; 0x213
 8010f8a:	1dbb      	adds	r3, r7, #6
 8010f8c:	8819      	ldrh	r1, [r3, #0]
 8010f8e:	f107 030c 	add.w	r3, r7, #12
 8010f92:	6818      	ldr	r0, [r3, #0]
 8010f94:	f7ff ff10 	bl	8010db8 <VL53LX_RdByte>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8010f9e:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8010fa2:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8010fa6:	4013      	ands	r3, r2
 8010fa8:	b2db      	uxtb	r3, r3
 8010faa:	1d7a      	adds	r2, r7, #5
 8010fac:	7812      	ldrb	r2, [r2, #0]
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d102      	bne.n	8010fb8 <VL53LX_WaitValueMaskEx+0xa0>
			found = 1;
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 8010fb8:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d112      	bne.n	8010fe6 <VL53LX_WaitValueMaskEx+0xce>
 8010fc0:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d10e      	bne.n	8010fe6 <VL53LX_WaitValueMaskEx+0xce>
			found == 0 &&
 8010fc8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d00a      	beq.n	8010fe6 <VL53LX_WaitValueMaskEx+0xce>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 8010fd0:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8010fd4:	f107 030c 	add.w	r3, r7, #12
 8010fd8:	4611      	mov	r1, r2
 8010fda:	6818      	ldr	r0, [r3, #0]
 8010fdc:	f7ff ff74 	bl	8010ec8 <VL53LX_WaitMs>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(Dev, &current_time_ms);
 8010fe6:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8010fea:	f107 030c 	add.w	r3, r7, #12
 8010fee:	4611      	mov	r1, r2
 8010ff0:	6818      	ldr	r0, [r3, #0]
 8010ff2:	f7ff ff55 	bl	8010ea0 <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8010ff6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8010ffa:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8010ffe:	1ad3      	subs	r3, r2, r3
 8011000:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53LX_ERROR_NONE) &&
 8011004:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011008:	2b00      	cmp	r3, #0
 801100a:	d10a      	bne.n	8011022 <VL53LX_WaitValueMaskEx+0x10a>
 801100c:	f107 0308 	add.w	r3, r7, #8
 8011010:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	429a      	cmp	r2, r3
 8011018:	d203      	bcs.n	8011022 <VL53LX_WaitValueMaskEx+0x10a>
		   (polling_time_ms < timeout_ms) &&
 801101a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 801101e:	2b00      	cmp	r3, #0
 8011020:	d0ad      	beq.n	8010f7e <VL53LX_WaitValueMaskEx+0x66>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 8011022:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8011026:	2b00      	cmp	r3, #0
 8011028:	d106      	bne.n	8011038 <VL53LX_WaitValueMaskEx+0x120>
 801102a:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 801102e:	2b00      	cmp	r3, #0
 8011030:	d102      	bne.n	8011038 <VL53LX_WaitValueMaskEx+0x120>
		status = VL53LX_ERROR_TIME_OUT;
 8011032:	23f9      	movs	r3, #249	; 0xf9
 8011034:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8011038:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 801103c:	4618      	mov	r0, r3
 801103e:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8011042:	46bd      	mov	sp, r7
 8011044:	bd90      	pop	{r4, r7, pc}
 8011046:	bf00      	nop
 8011048:	080151f0 	.word	0x080151f0

0801104c <VL53LX_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53LX_Error
  */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b084      	sub	sp, #16
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
 8011054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	695b      	ldr	r3, [r3, #20]
 801105a:	4798      	blx	r3
 801105c:	4603      	mov	r3, r0
 801105e:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8011060:	bf00      	nop
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	695b      	ldr	r3, [r3, #20]
 8011066:	4798      	blx	r3
 8011068:	4603      	mov	r3, r0
 801106a:	461a      	mov	r2, r3
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	1ad3      	subs	r3, r2, r3
 8011070:	683a      	ldr	r2, [r7, #0]
 8011072:	429a      	cmp	r2, r3
 8011074:	d8f5      	bhi.n	8011062 <VL53LX_Delay+0x16>
  {
  }

  return VL53LX_ERROR_NONE;
 8011076:	2300      	movs	r3, #0
}
 8011078:	4618      	mov	r0, r3
 801107a:	3710      	adds	r7, #16
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b08c      	sub	sp, #48	; 0x30
 8011084:	af06      	add	r7, sp, #24
 8011086:	60f8      	str	r0, [r7, #12]
 8011088:	60b9      	str	r1, [r7, #8]
 801108a:	607a      	str	r2, [r7, #4]
 801108c:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 801108e:	2300      	movs	r3, #0
 8011090:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 8011092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011094:	9304      	str	r3, [sp, #16]
 8011096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011098:	9303      	str	r3, [sp, #12]
 801109a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801109c:	9302      	str	r3, [sp, #8]
 801109e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110a0:	9301      	str	r3, [sp, #4]
 80110a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a4:	9300      	str	r3, [sp, #0]
 80110a6:	6a3b      	ldr	r3, [r7, #32]
 80110a8:	683a      	ldr	r2, [r7, #0]
 80110aa:	6879      	ldr	r1, [r7, #4]
 80110ac:	68b8      	ldr	r0, [r7, #8]
 80110ae:	f7fd f98c 	bl	800e3ca <VL53LX_hist_process_data>
 80110b2:	4603      	mov	r3, r0
 80110b4:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 80110b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3718      	adds	r7, #24
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}

080110c2 <VL53L3CX_RegisterBusIO>:
  * @param pObj    vl53l3cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_RegisterBusIO(VL53L3CX_Object_t *pObj, VL53L3CX_IO_t *pIO)
{
 80110c2:	b580      	push	{r7, lr}
 80110c4:	b084      	sub	sp, #16
 80110c6:	af00      	add	r7, sp, #0
 80110c8:	6078      	str	r0, [r7, #4]
 80110ca:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d103      	bne.n	80110da <VL53L3CX_RegisterBusIO+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80110d2:	f06f 0301 	mvn.w	r3, #1
 80110d6:	60fb      	str	r3, [r7, #12]
 80110d8:	e023      	b.n	8011122 <VL53L3CX_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	681a      	ldr	r2, [r3, #0]
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	685a      	ldr	r2, [r3, #4]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	891a      	ldrh	r2, [r3, #8]
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	68da      	ldr	r2, [r3, #12]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	691a      	ldr	r2, [r3, #16]
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8011102:	683b      	ldr	r3, [r7, #0]
 8011104:	695a      	ldr	r2, [r3, #20]
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d004      	beq.n	801111c <VL53L3CX_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	4798      	blx	r3
 8011118:	60f8      	str	r0, [r7, #12]
 801111a:	e002      	b.n	8011122 <VL53L3CX_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L3CX_ERROR;
 801111c:	f04f 33ff 	mov.w	r3, #4294967295
 8011120:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011122:	68fb      	ldr	r3, [r7, #12]
}
 8011124:	4618      	mov	r0, r3
 8011126:	3710      	adds	r7, #16
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}

0801112c <VL53L3CX_Init>:
  * @brief Initializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Init(VL53L3CX_Object_t *pObj)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b084      	sub	sp, #16
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801113a:	3328      	adds	r3, #40	; 0x28
 801113c:	781b      	ldrb	r3, [r3, #0]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d003      	beq.n	801114a <VL53L3CX_Init+0x1e>
  {
    ret =  VL53L3CX_ERROR;
 8011142:	f04f 33ff 	mov.w	r3, #4294967295
 8011146:	60fb      	str	r3, [r7, #12]
 8011148:	e043      	b.n	80111d2 <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_WaitDeviceBooted(pObj) != VL53LX_ERROR_NONE)
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f7f0 fcb8 	bl	8001ac0 <VL53LX_WaitDeviceBooted>
 8011150:	4603      	mov	r3, r0
 8011152:	2b00      	cmp	r3, #0
 8011154:	d003      	beq.n	801115e <VL53L3CX_Init+0x32>
  {
    ret =  VL53L3CX_ERROR;
 8011156:	f04f 33ff 	mov.w	r3, #4294967295
 801115a:	60fb      	str	r3, [r7, #12]
 801115c:	e039      	b.n	80111d2 <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_DataInit(pObj) != VL53LX_ERROR_NONE)
 801115e:	6878      	ldr	r0, [r7, #4]
 8011160:	f7f0 fc53 	bl	8001a0a <VL53LX_DataInit>
 8011164:	4603      	mov	r3, r0
 8011166:	2b00      	cmp	r3, #0
 8011168:	d003      	beq.n	8011172 <VL53L3CX_Init+0x46>
  {
    ret = VL53L3CX_ERROR;
 801116a:	f04f 33ff 	mov.w	r3, #4294967295
 801116e:	60fb      	str	r3, [r7, #12]
 8011170:	e02f      	b.n	80111d2 <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_PerformRefSpadManagement(pObj) != VL53LX_ERROR_NONE)
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f7f1 fb46 	bl	8002804 <VL53LX_PerformRefSpadManagement>
 8011178:	4603      	mov	r3, r0
 801117a:	2b00      	cmp	r3, #0
 801117c:	d003      	beq.n	8011186 <VL53L3CX_Init+0x5a>
  {
    ret = VL53L3CX_ERROR;
 801117e:	f04f 33ff 	mov.w	r3, #4294967295
 8011182:	60fb      	str	r3, [r7, #12]
 8011184:	e025      	b.n	80111d2 <VL53L3CX_Init+0xa6>
  }
  else
  {
    pObj->IsRanging = 0;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801118c:	3329      	adds	r3, #41	; 0x29
 801118e:	2200      	movs	r2, #0
 8011190:	701a      	strb	r2, [r3, #0]
    pObj->IsBlocking = 0;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011198:	332a      	adds	r3, #42	; 0x2a
 801119a:	2200      	movs	r2, #0
 801119c:	701a      	strb	r2, [r3, #0]
    pObj->IsContinuous = 0;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80111a4:	332b      	adds	r3, #43	; 0x2b
 80111a6:	2200      	movs	r2, #0
 80111a8:	701a      	strb	r2, [r3, #0]
    pObj->IsAmbientEnabled = 0;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80111b0:	332c      	adds	r3, #44	; 0x2c
 80111b2:	2200      	movs	r2, #0
 80111b4:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = 0;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80111bc:	332d      	adds	r3, #45	; 0x2d
 80111be:	2200      	movs	r2, #0
 80111c0:	701a      	strb	r2, [r3, #0]
    pObj->IsInitialized = 1;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80111c8:	3328      	adds	r3, #40	; 0x28
 80111ca:	2201      	movs	r2, #1
 80111cc:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 80111ce:	2300      	movs	r3, #0
 80111d0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80111d2:	68fb      	ldr	r3, [r7, #12]
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3710      	adds	r7, #16
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}

080111dc <VL53L3CX_DeInit>:
  * @brief Deinitializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_DeInit(VL53L3CX_Object_t *pObj)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b084      	sub	sp, #16
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L3CX_ERROR;
 80111e4:	f04f 33ff 	mov.w	r3, #4294967295
 80111e8:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80111f0:	3328      	adds	r3, #40	; 0x28
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	2b01      	cmp	r3, #1
 80111f6:	d111      	bne.n	801121c <VL53L3CX_DeInit+0x40>
  {
    /* De-initialize the vl53l3cx interface */
    if (pObj->IO.DeInit() != 0)
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	685b      	ldr	r3, [r3, #4]
 80111fc:	4798      	blx	r3
 80111fe:	4603      	mov	r3, r0
 8011200:	2b00      	cmp	r3, #0
 8011202:	d003      	beq.n	801120c <VL53L3CX_DeInit+0x30>
    {
      ret = VL53L3CX_ERROR;
 8011204:	f04f 33ff 	mov.w	r3, #4294967295
 8011208:	60fb      	str	r3, [r7, #12]
 801120a:	e007      	b.n	801121c <VL53L3CX_DeInit+0x40>
    }
    else
    {
      ret = VL53L3CX_OK;
 801120c:	2300      	movs	r3, #0
 801120e:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011216:	3328      	adds	r3, #40	; 0x28
 8011218:	2200      	movs	r2, #0
 801121a:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801121c:	68fb      	ldr	r3, [r7, #12]
}
 801121e:	4618      	mov	r0, r3
 8011220:	3710      	adds	r7, #16
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <VL53L3CX_ReadID>:
  * @param pObj    vl53l3cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ReadID(VL53L3CX_Object_t *pObj, uint32_t *pId)
{
 8011226:	b580      	push	{r7, lr}
 8011228:	b084      	sub	sp, #16
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
 801122e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d002      	beq.n	801123c <VL53L3CX_ReadID+0x16>
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d103      	bne.n	8011244 <VL53L3CX_ReadID+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 801123c:	f06f 0301 	mvn.w	r3, #1
 8011240:	60fb      	str	r3, [r7, #12]
 8011242:	e00a      	b.n	801125a <VL53L3CX_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	2200      	movs	r2, #0
 8011248:	601a      	str	r2, [r3, #0]
    ret = VL53LX_RdWord(pObj, VL53L3CX_ID_REG, (uint16_t *) pId);
 801124a:	683a      	ldr	r2, [r7, #0]
 801124c:	f240 110f 	movw	r1, #271	; 0x10f
 8011250:	6878      	ldr	r0, [r7, #4]
 8011252:	f7ff fde5 	bl	8010e20 <VL53LX_RdWord>
 8011256:	4603      	mov	r3, r0
 8011258:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801125a:	68fb      	ldr	r3, [r7, #12]
}
 801125c:	4618      	mov	r0, r3
 801125e:	3710      	adds	r7, #16
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}

08011264 <VL53L3CX_GetCapabilities>:
  * @param pObj    vl53l3cx context object.
  * @param pCap    Pointer to the vl53l3cx capabilities.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetCapabilities(VL53L3CX_Object_t *pObj, VL53L3CX_Capabilities_t *pCap)
{
 8011264:	b480      	push	{r7}
 8011266:	b085      	sub	sp, #20
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d002      	beq.n	801127a <VL53L3CX_GetCapabilities+0x16>
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d103      	bne.n	8011282 <VL53L3CX_GetCapabilities+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 801127a:	f06f 0301 	mvn.w	r3, #1
 801127e:	60fb      	str	r3, [r7, #12]
 8011280:	e00d      	b.n	801129e <VL53L3CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	2201      	movs	r2, #1
 8011286:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L3CX_NB_TARGET_PER_ZONE;
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	2204      	movs	r2, #4
 801128c:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	2201      	movs	r2, #1
 8011292:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	2200      	movs	r2, #0
 8011298:	60da      	str	r2, [r3, #12]

    ret = VL53L3CX_OK;
 801129a:	2300      	movs	r3, #0
 801129c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801129e:	68fb      	ldr	r3, [r7, #12]
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	3714      	adds	r7, #20
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr

080112ac <VL53L3CX_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L3CX the profile corresponds to the distance modes.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigProfile(VL53L3CX_Object_t *pObj, VL53L3CX_ProfileConfig_t *pConfig)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b084      	sub	sp, #16
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d009      	beq.n	80112d0 <VL53L3CX_ConfigProfile+0x24>
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d006      	beq.n	80112d0 <VL53L3CX_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	781b      	ldrb	r3, [r3, #0]
 80112c6:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L3CX_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 80112c8:	7afb      	ldrb	r3, [r7, #11]
 80112ca:	2b01      	cmp	r3, #1
 80112cc:	d103      	bne.n	80112d6 <VL53L3CX_ConfigProfile+0x2a>
 80112ce:	e00c      	b.n	80112ea <VL53L3CX_ConfigProfile+0x3e>
    return VL53L3CX_INVALID_PARAM;
 80112d0:	f06f 0301 	mvn.w	r3, #1
 80112d4:	e043      	b.n	801135e <VL53L3CX_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 80112d6:	7afb      	ldrb	r3, [r7, #11]
 80112d8:	2b02      	cmp	r3, #2
 80112da:	d006      	beq.n	80112ea <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_MEDIUM) &&
 80112dc:	7afb      	ldrb	r3, [r7, #11]
 80112de:	2b03      	cmp	r3, #3
 80112e0:	d003      	beq.n	80112ea <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_LONG))
  {
    ret = VL53L3CX_INVALID_PARAM;
 80112e2:	f06f 0301 	mvn.w	r3, #1
 80112e6:	60fb      	str	r3, [r7, #12]
 80112e8:	e038      	b.n	801135c <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetDistanceMode(pObj, ranging_profile) != VL53LX_ERROR_NONE)
 80112ea:	7afb      	ldrb	r3, [r7, #11]
 80112ec:	4619      	mov	r1, r3
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f7f0 fcc9 	bl	8001c86 <VL53LX_SetDistanceMode>
 80112f4:	4603      	mov	r3, r0
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d003      	beq.n	8011302 <VL53L3CX_ConfigProfile+0x56>
  {
    ret = VL53L3CX_ERROR;
 80112fa:	f04f 33ff 	mov.w	r3, #4294967295
 80112fe:	60fb      	str	r3, [r7, #12]
 8011300:	e02c      	b.n	801135c <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53LX_ERROR_NONE)
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	685b      	ldr	r3, [r3, #4]
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
 8011306:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801130a:	fb02 f303 	mul.w	r3, r2, r3
 801130e:	4619      	mov	r1, r3
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f7f0 fd1f 	bl	8001d54 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8011316:	4603      	mov	r3, r0
 8011318:	2b00      	cmp	r3, #0
 801131a:	d003      	beq.n	8011324 <VL53L3CX_ConfigProfile+0x78>
  {
    ret = VL53L3CX_ERROR;
 801131c:	f04f 33ff 	mov.w	r3, #4294967295
 8011320:	60fb      	str	r3, [r7, #12]
 8011322:	e01b      	b.n	801135c <VL53L3CX_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	68db      	ldr	r3, [r3, #12]
 8011328:	2b00      	cmp	r3, #0
 801132a:	bf14      	ite	ne
 801132c:	2301      	movne	r3, #1
 801132e:	2300      	moveq	r3, #0
 8011330:	b2db      	uxtb	r3, r3
 8011332:	461a      	mov	r2, r3
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801133a:	332c      	adds	r3, #44	; 0x2c
 801133c:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	691b      	ldr	r3, [r3, #16]
 8011342:	2b00      	cmp	r3, #0
 8011344:	bf14      	ite	ne
 8011346:	2301      	movne	r3, #1
 8011348:	2300      	moveq	r3, #0
 801134a:	b2db      	uxtb	r3, r3
 801134c:	461a      	mov	r2, r3
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011354:	332d      	adds	r3, #45	; 0x2d
 8011356:	701a      	strb	r2, [r3, #0]

    ret = VL53L3CX_OK;
 8011358:	2300      	movs	r3, #0
 801135a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801135c:	68fb      	ldr	r3, [r7, #12]
}
 801135e:	4618      	mov	r0, r3
 8011360:	3710      	adds	r7, #16
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}

08011366 <VL53L3CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigROI(VL53L3CX_Object_t *pObj, VL53L3CX_ROIConfig_t *pROIConfig)
{
 8011366:	b580      	push	{r7, lr}
 8011368:	b084      	sub	sp, #16
 801136a:	af00      	add	r7, sp, #0
 801136c:	6078      	str	r0, [r7, #4]
 801136e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53LX_UserRoi_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d002      	beq.n	801137c <VL53L3CX_ConfigROI+0x16>
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d103      	bne.n	8011384 <VL53L3CX_ConfigROI+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 801137c:	f06f 0301 	mvn.w	r3, #1
 8011380:	60fb      	str	r3, [r7, #12]
 8011382:	e01a      	b.n	80113ba <VL53L3CX_ConfigROI+0x54>
  }
  else
  {
    roi_settings.BotRightX = pROIConfig->BotRightX;
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	789b      	ldrb	r3, [r3, #2]
 8011388:	72bb      	strb	r3, [r7, #10]
    roi_settings.BotRightY = pROIConfig->BotRightY;
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	78db      	ldrb	r3, [r3, #3]
 801138e:	72fb      	strb	r3, [r7, #11]
    roi_settings.TopLeftX = pROIConfig->TopLeftX;
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	781b      	ldrb	r3, [r3, #0]
 8011394:	723b      	strb	r3, [r7, #8]
    roi_settings.TopLeftY = pROIConfig->TopLeftY;
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	785b      	ldrb	r3, [r3, #1]
 801139a:	727b      	strb	r3, [r7, #9]

    if (VL53LX_SetUserROI(pObj, &roi_settings) != VL53LX_ERROR_NONE)
 801139c:	f107 0308 	add.w	r3, r7, #8
 80113a0:	4619      	mov	r1, r3
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	f7f0 fd4e 	bl	8001e44 <VL53LX_SetUserROI>
 80113a8:	4603      	mov	r3, r0
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d003      	beq.n	80113b6 <VL53L3CX_ConfigROI+0x50>
    {
      ret = VL53L3CX_ERROR;
 80113ae:	f04f 33ff 	mov.w	r3, #4294967295
 80113b2:	60fb      	str	r3, [r7, #12]
 80113b4:	e001      	b.n	80113ba <VL53L3CX_ConfigROI+0x54>
    }
    else
    {
      ret = VL53L3CX_OK;
 80113b6:	2300      	movs	r3, #0
 80113b8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80113ba:	68fb      	ldr	r3, [r7, #12]
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3710      	adds	r7, #16
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}

080113c4 <VL53L3CX_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigIT(VL53L3CX_Object_t *pObj, VL53L3CX_ITConfig_t *pITConfig)
{
 80113c4:	b480      	push	{r7}
 80113c6:	b083      	sub	sp, #12
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
 80113cc:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L3CX_NOT_IMPLEMENTED;
 80113ce:	f06f 0303 	mvn.w	r3, #3
}
 80113d2:	4618      	mov	r0, r3
 80113d4:	370c      	adds	r7, #12
 80113d6:	46bd      	mov	sp, r7
 80113d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113dc:	4770      	bx	lr

080113de <VL53L3CX_GetDistance>:
  * @param pObj    vl53l3cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetDistance(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 80113de:	b580      	push	{r7, lr}
 80113e0:	b084      	sub	sp, #16
 80113e2:	af00      	add	r7, sp, #0
 80113e4:	6078      	str	r0, [r7, #4]
 80113e6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d002      	beq.n	80113f4 <VL53L3CX_GetDistance+0x16>
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d103      	bne.n	80113fc <VL53L3CX_GetDistance+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80113f4:	f06f 0301 	mvn.w	r3, #1
 80113f8:	60fb      	str	r3, [r7, #12]
 80113fa:	e01d      	b.n	8011438 <VL53L3CX_GetDistance+0x5a>
  }
  else if (pObj->IsRanging == 0U)
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011402:	3329      	adds	r3, #41	; 0x29
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d103      	bne.n	8011412 <VL53L3CX_GetDistance+0x34>
  {
    ret = VL53L3CX_ERROR;
 801140a:	f04f 33ff 	mov.w	r3, #4294967295
 801140e:	60fb      	str	r3, [r7, #12]
 8011410:	e012      	b.n	8011438 <VL53L3CX_GetDistance+0x5a>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011418:	332a      	adds	r3, #42	; 0x2a
 801141a:	781b      	ldrb	r3, [r3, #0]
 801141c:	2b01      	cmp	r3, #1
 801141e:	d106      	bne.n	801142e <VL53L3CX_GetDistance+0x50>
    {
      ret = vl53l3cx_poll_for_measurement(pObj, V53L3CX_POLL_TIMEOUT);
 8011420:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f000 f92b 	bl	8011680 <vl53l3cx_poll_for_measurement>
 801142a:	60f8      	str	r0, [r7, #12]
 801142c:	e004      	b.n	8011438 <VL53L3CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l3cx_poll_for_measurement(pObj, 0U);
 801142e:	2100      	movs	r1, #0
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f000 f925 	bl	8011680 <vl53l3cx_poll_for_measurement>
 8011436:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L3CX_OK)
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d119      	bne.n	8011472 <VL53L3CX_GetDistance+0x94>
  {
    /* retrieve measurements and fill result structure */
    if (vl53l3cx_get_result(pObj, pResult) != VL53L3CX_OK)
 801143e:	6839      	ldr	r1, [r7, #0]
 8011440:	6878      	ldr	r0, [r7, #4]
 8011442:	f000 f94b 	bl	80116dc <vl53l3cx_get_result>
 8011446:	4603      	mov	r3, r0
 8011448:	2b00      	cmp	r3, #0
 801144a:	d003      	beq.n	8011454 <VL53L3CX_GetDistance+0x76>
    {
      ret = VL53L3CX_ERROR;
 801144c:	f04f 33ff 	mov.w	r3, #4294967295
 8011450:	60fb      	str	r3, [r7, #12]
 8011452:	e00e      	b.n	8011472 <VL53L3CX_GetDistance+0x94>
    }
    else if (pObj->IsContinuous == 1U)
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801145a:	332b      	adds	r3, #43	; 0x2b
 801145c:	781b      	ldrb	r3, [r3, #0]
 801145e:	2b01      	cmp	r3, #1
 8011460:	d105      	bne.n	801146e <VL53L3CX_GetDistance+0x90>
    {
      /* trigger new measurement if device configured in continuous mode */
      ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f7f0 fdbe 	bl	8001fe4 <VL53LX_ClearInterruptAndStartMeasurement>
 8011468:	4603      	mov	r3, r0
 801146a:	60fb      	str	r3, [r7, #12]
 801146c:	e001      	b.n	8011472 <VL53L3CX_GetDistance+0x94>
    }
    else
    {
      ret = VL53L3CX_OK;
 801146e:	2300      	movs	r3, #0
 8011470:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011472:	68fb      	ldr	r3, [r7, #12]
}
 8011474:	4618      	mov	r0, r3
 8011476:	3710      	adds	r7, #16
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}

0801147c <VL53L3CX_Start>:
  * @param pObj    vl53l3cx context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Start(VL53L3CX_Object_t *pObj, uint32_t Mode)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b084      	sub	sp, #16
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
 8011484:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d103      	bne.n	8011494 <VL53L3CX_Start+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 801148c:	f06f 0301 	mvn.w	r3, #1
 8011490:	60fb      	str	r3, [r7, #12]
 8011492:	e068      	b.n	8011566 <VL53L3CX_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801149a:	3329      	adds	r3, #41	; 0x29
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	2b01      	cmp	r3, #1
 80114a0:	d103      	bne.n	80114aa <VL53L3CX_Start+0x2e>
  {
    ret = VL53L3CX_ERROR;
 80114a2:	f04f 33ff 	mov.w	r3, #4294967295
 80114a6:	60fb      	str	r3, [r7, #12]
 80114a8:	e05d      	b.n	8011566 <VL53L3CX_Start+0xea>
  }
  else if (VL53LX_StartMeasurement(pObj) == VL53LX_ERROR_NONE)
 80114aa:	6878      	ldr	r0, [r7, #4]
 80114ac:	f7f0 fd38 	bl	8001f20 <VL53LX_StartMeasurement>
 80114b0:	4603      	mov	r3, r0
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d154      	bne.n	8011560 <VL53L3CX_Start+0xe4>
  {
    pObj->IsRanging = 1;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80114bc:	3329      	adds	r3, #41	; 0x29
 80114be:	2201      	movs	r2, #1
 80114c0:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 80114c2:	2300      	movs	r3, #0
 80114c4:	60fb      	str	r3, [r7, #12]
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	3b01      	subs	r3, #1
 80114ca:	2b03      	cmp	r3, #3
 80114cc:	d83e      	bhi.n	801154c <VL53L3CX_Start+0xd0>
 80114ce:	a201      	add	r2, pc, #4	; (adr r2, 80114d4 <VL53L3CX_Start+0x58>)
 80114d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114d4:	080114e5 	.word	0x080114e5
 80114d8:	080114ff 	.word	0x080114ff
 80114dc:	08011519 	.word	0x08011519
 80114e0:	08011533 	.word	0x08011533

    switch (Mode)
    {
    case VL53L3CX_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80114ea:	332b      	adds	r3, #43	; 0x2b
 80114ec:	2201      	movs	r2, #1
 80114ee:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80114f6:	332a      	adds	r3, #42	; 0x2a
 80114f8:	2201      	movs	r2, #1
 80114fa:	701a      	strb	r2, [r3, #0]
      break;
 80114fc:	e033      	b.n	8011566 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011504:	332b      	adds	r3, #43	; 0x2b
 8011506:	2200      	movs	r2, #0
 8011508:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011510:	332a      	adds	r3, #42	; 0x2a
 8011512:	2201      	movs	r2, #1
 8011514:	701a      	strb	r2, [r3, #0]
      break;
 8011516:	e026      	b.n	8011566 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801151e:	332b      	adds	r3, #43	; 0x2b
 8011520:	2201      	movs	r2, #1
 8011522:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801152a:	332a      	adds	r3, #42	; 0x2a
 801152c:	2200      	movs	r2, #0
 801152e:	701a      	strb	r2, [r3, #0]
      break;
 8011530:	e019      	b.n	8011566 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011538:	332b      	adds	r3, #43	; 0x2b
 801153a:	2200      	movs	r2, #0
 801153c:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011544:	332a      	adds	r3, #42	; 0x2a
 8011546:	2200      	movs	r2, #0
 8011548:	701a      	strb	r2, [r3, #0]
      break;
 801154a:	e00c      	b.n	8011566 <VL53L3CX_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011552:	3329      	adds	r3, #41	; 0x29
 8011554:	2200      	movs	r2, #0
 8011556:	701a      	strb	r2, [r3, #0]
      ret = VL53L3CX_INVALID_PARAM;
 8011558:	f06f 0301 	mvn.w	r3, #1
 801155c:	60fb      	str	r3, [r7, #12]
      break;
 801155e:	e002      	b.n	8011566 <VL53L3CX_Start+0xea>
    }
  }
  else
  {
    ret = VL53L3CX_ERROR;
 8011560:	f04f 33ff 	mov.w	r3, #4294967295
 8011564:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011566:	68fb      	ldr	r3, [r7, #12]
}
 8011568:	4618      	mov	r0, r3
 801156a:	3710      	adds	r7, #16
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <VL53L3CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Stop(VL53L3CX_Object_t *pObj)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b084      	sub	sp, #16
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d103      	bne.n	8011586 <VL53L3CX_Stop+0x16>
  {
    ret = VL53L3CX_INVALID_PARAM;
 801157e:	f06f 0301 	mvn.w	r3, #1
 8011582:	60fb      	str	r3, [r7, #12]
 8011584:	e01c      	b.n	80115c0 <VL53L3CX_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801158c:	3329      	adds	r3, #41	; 0x29
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d103      	bne.n	801159c <VL53L3CX_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L3CX_ERROR;
 8011594:	f04f 33ff 	mov.w	r3, #4294967295
 8011598:	60fb      	str	r3, [r7, #12]
 801159a:	e011      	b.n	80115c0 <VL53L3CX_Stop+0x50>
  }
  else if (VL53LX_StopMeasurement(pObj) == VL53LX_ERROR_NONE)
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	f7f0 fd0d 	bl	8001fbc <VL53LX_StopMeasurement>
 80115a2:	4603      	mov	r3, r0
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d108      	bne.n	80115ba <VL53L3CX_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80115ae:	3329      	adds	r3, #41	; 0x29
 80115b0:	2200      	movs	r2, #0
 80115b2:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 80115b4:	2300      	movs	r3, #0
 80115b6:	60fb      	str	r3, [r7, #12]
 80115b8:	e002      	b.n	80115c0 <VL53L3CX_Stop+0x50>
  }
  else
  {
    ret = VL53L3CX_ERROR;
 80115ba:	f04f 33ff 	mov.w	r3, #4294967295
 80115be:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80115c0:	68fb      	ldr	r3, [r7, #12]
}
 80115c2:	4618      	mov	r0, r3
 80115c4:	3710      	adds	r7, #16
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}

080115ca <VL53L3CX_SetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param Address     New I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetAddress(VL53L3CX_Object_t *pObj, uint32_t Address)
{
 80115ca:	b580      	push	{r7, lr}
 80115cc:	b084      	sub	sp, #16
 80115ce:	af00      	add	r7, sp, #0
 80115d0:	6078      	str	r0, [r7, #4]
 80115d2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d103      	bne.n	80115e2 <VL53L3CX_SetAddress+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80115da:	f06f 0301 	mvn.w	r3, #1
 80115de:	60fb      	str	r3, [r7, #12]
 80115e0:	e012      	b.n	8011608 <VL53L3CX_SetAddress+0x3e>
  }
  else if (VL53LX_SetDeviceAddress(pObj, (uint8_t)Address) != VL53LX_ERROR_NONE)
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	b2db      	uxtb	r3, r3
 80115e6:	4619      	mov	r1, r3
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f7f0 f9e7 	bl	80019bc <VL53LX_SetDeviceAddress>
 80115ee:	4603      	mov	r3, r0
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d003      	beq.n	80115fc <VL53L3CX_SetAddress+0x32>
  {
    ret = VL53L3CX_ERROR;
 80115f4:	f04f 33ff 	mov.w	r3, #4294967295
 80115f8:	60fb      	str	r3, [r7, #12]
 80115fa:	e005      	b.n	8011608 <VL53L3CX_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	b29a      	uxth	r2, r3
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	811a      	strh	r2, [r3, #8]
    ret = VL53L3CX_OK;
 8011604:	2300      	movs	r3, #0
 8011606:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011608:	68fb      	ldr	r3, [r7, #12]
}
 801160a:	4618      	mov	r0, r3
 801160c:	3710      	adds	r7, #16
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}

08011612 <VL53L3CX_GetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetAddress(VL53L3CX_Object_t *pObj, uint32_t *pAddress)
{
 8011612:	b480      	push	{r7}
 8011614:	b085      	sub	sp, #20
 8011616:	af00      	add	r7, sp, #0
 8011618:	6078      	str	r0, [r7, #4]
 801161a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d002      	beq.n	8011628 <VL53L3CX_GetAddress+0x16>
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d103      	bne.n	8011630 <VL53L3CX_GetAddress+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011628:	f06f 0301 	mvn.w	r3, #1
 801162c:	60fb      	str	r3, [r7, #12]
 801162e:	e006      	b.n	801163e <VL53L3CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	891b      	ldrh	r3, [r3, #8]
 8011634:	461a      	mov	r2, r3
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	601a      	str	r2, [r3, #0]
    ret = VL53L3CX_OK;
 801163a:	2300      	movs	r3, #0
 801163c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801163e:	68fb      	ldr	r3, [r7, #12]
}
 8011640:	4618      	mov	r0, r3
 8011642:	3714      	adds	r7, #20
 8011644:	46bd      	mov	sp, r7
 8011646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164a:	4770      	bx	lr

0801164c <VL53L3CX_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetPowerMode(VL53L3CX_Object_t *pObj, uint32_t PowerMode)
{
 801164c:	b480      	push	{r7}
 801164e:	b083      	sub	sp, #12
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
 8011654:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 8011656:	f06f 0303 	mvn.w	r3, #3
}
 801165a:	4618      	mov	r0, r3
 801165c:	370c      	adds	r7, #12
 801165e:	46bd      	mov	sp, r7
 8011660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011664:	4770      	bx	lr

08011666 <VL53L3CX_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetPowerMode(VL53L3CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8011666:	b480      	push	{r7}
 8011668:	b083      	sub	sp, #12
 801166a:	af00      	add	r7, sp, #0
 801166c:	6078      	str	r0, [r7, #4]
 801166e:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 8011670:	f06f 0303 	mvn.w	r3, #3
}
 8011674:	4618      	mov	r0, r3
 8011676:	370c      	adds	r7, #12
 8011678:	46bd      	mov	sp, r7
 801167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167e:	4770      	bx	lr

08011680 <vl53l3cx_poll_for_measurement>:
/** @defgroup VL53L3CX_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l3cx_poll_for_measurement(VL53L3CX_Object_t *pObj, uint32_t Timeout)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b084      	sub	sp, #16
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 801168a:	2300      	movs	r3, #0
 801168c:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d102      	bne.n	801169a <vl53l3cx_poll_for_measurement+0x1a>
  {
    return VL53L3CX_INVALID_PARAM;
 8011694:	f06f 0301 	mvn.w	r3, #1
 8011698:	e01b      	b.n	80116d2 <vl53l3cx_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	695b      	ldr	r3, [r3, #20]
 801169e:	4798      	blx	r3
 80116a0:	4603      	mov	r3, r0
 80116a2:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53LX_GetMeasurementDataReady(pObj, &NewDataReady);
 80116a4:	f107 030b 	add.w	r3, r7, #11
 80116a8:	4619      	mov	r1, r3
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f7f0 fcb0 	bl	8002010 <VL53LX_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 80116b0:	7afb      	ldrb	r3, [r7, #11]
 80116b2:	2b01      	cmp	r3, #1
 80116b4:	d101      	bne.n	80116ba <vl53l3cx_poll_for_measurement+0x3a>
    {
      return VL53L3CX_OK;
 80116b6:	2300      	movs	r3, #0
 80116b8:	e00b      	b.n	80116d2 <vl53l3cx_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	695b      	ldr	r3, [r3, #20]
 80116be:	4798      	blx	r3
 80116c0:	4603      	mov	r3, r0
 80116c2:	461a      	mov	r2, r3
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	1ad3      	subs	r3, r2, r3
 80116c8:	683a      	ldr	r2, [r7, #0]
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d8ea      	bhi.n	80116a4 <vl53l3cx_poll_for_measurement+0x24>

  return VL53L3CX_TIMEOUT;
 80116ce:	f06f 0302 	mvn.w	r3, #2
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3710      	adds	r7, #16
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}
	...

080116dc <vl53l3cx_get_result>:

static int32_t vl53l3cx_get_result(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 80116dc:	b590      	push	{r4, r7, lr}
 80116de:	b09f      	sub	sp, #124	; 0x7c
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
 80116e4:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53LX_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d002      	beq.n	80116f2 <vl53l3cx_get_result+0x16>
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d103      	bne.n	80116fa <vl53l3cx_get_result+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80116f2:	f06f 0301 	mvn.w	r3, #1
 80116f6:	677b      	str	r3, [r7, #116]	; 0x74
 80116f8:	e126      	b.n	8011948 <vl53l3cx_get_result+0x26c>
  }
  else if (VL53LX_GetMultiRangingData(pObj, &data) != VL53LX_ERROR_NONE)
 80116fa:	f107 0308 	add.w	r3, r7, #8
 80116fe:	4619      	mov	r1, r3
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f7f1 f858 	bl	80027b6 <VL53LX_GetMultiRangingData>
 8011706:	4603      	mov	r3, r0
 8011708:	2b00      	cmp	r3, #0
 801170a:	d003      	beq.n	8011714 <vl53l3cx_get_result+0x38>
  {
    ret = VL53L3CX_ERROR;
 801170c:	f04f 33ff 	mov.w	r3, #4294967295
 8011710:	677b      	str	r3, [r7, #116]	; 0x74
 8011712:	e119      	b.n	8011948 <vl53l3cx_get_result+0x26c>
  }
  else
  {
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 8011714:	2300      	movs	r3, #0
 8011716:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 801171a:	e10b      	b.n	8011934 <vl53l3cx_get_result+0x258>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 801171c:	7b7b      	ldrb	r3, [r7, #13]
 801171e:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011722:	4618      	mov	r0, r3
 8011724:	6839      	ldr	r1, [r7, #0]
 8011726:	4613      	mov	r3, r2
 8011728:	011b      	lsls	r3, r3, #4
 801172a:	4413      	add	r3, r2
 801172c:	009b      	lsls	r3, r3, #2
 801172e:	440b      	add	r3, r1
 8011730:	3304      	adds	r3, #4
 8011732:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8011734:	2300      	movs	r3, #0
 8011736:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 801173a:	e0f0      	b.n	801191e <vl53l3cx_get_result+0x242>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 801173c:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011740:	4613      	mov	r3, r2
 8011742:	009b      	lsls	r3, r3, #2
 8011744:	4413      	add	r3, r2
 8011746:	009b      	lsls	r3, r3, #2
 8011748:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801174c:	4413      	add	r3, r2
 801174e:	3b58      	subs	r3, #88	; 0x58
 8011750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011754:	2b00      	cmp	r3, #0
 8011756:	da0d      	bge.n	8011774 <vl53l3cx_get_result+0x98>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8011758:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 801175c:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011760:	6839      	ldr	r1, [r7, #0]
 8011762:	4613      	mov	r3, r2
 8011764:	011b      	lsls	r3, r3, #4
 8011766:	4413      	add	r3, r2
 8011768:	4403      	add	r3, r0
 801176a:	009b      	lsls	r3, r3, #2
 801176c:	440b      	add	r3, r1
 801176e:	2200      	movs	r2, #0
 8011770:	609a      	str	r2, [r3, #8]
 8011772:	e018      	b.n	80117a6 <vl53l3cx_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8011774:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011778:	4613      	mov	r3, r2
 801177a:	009b      	lsls	r3, r3, #2
 801177c:	4413      	add	r3, r2
 801177e:	009b      	lsls	r3, r3, #2
 8011780:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011784:	4413      	add	r3, r2
 8011786:	3b58      	subs	r3, #88	; 0x58
 8011788:	f9b3 3000 	ldrsh.w	r3, [r3]
 801178c:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011790:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011794:	461c      	mov	r4, r3
 8011796:	6839      	ldr	r1, [r7, #0]
 8011798:	4613      	mov	r3, r2
 801179a:	011b      	lsls	r3, r3, #4
 801179c:	4413      	add	r3, r2
 801179e:	4403      	add	r3, r0
 80117a0:	009b      	lsls	r3, r3, #2
 80117a2:	440b      	add	r3, r1
 80117a4:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117ac:	332c      	adds	r3, #44	; 0x2c
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	2b01      	cmp	r3, #1
 80117b2:	d137      	bne.n	8011824 <vl53l3cx_get_result+0x148>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 80117b4:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80117b8:	4613      	mov	r3, r2
 80117ba:	009b      	lsls	r3, r3, #2
 80117bc:	4413      	add	r3, r2
 80117be:	009b      	lsls	r3, r3, #2
 80117c0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80117c4:	4413      	add	r3, r2
 80117c6:	3b60      	subs	r3, #96	; 0x60
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	ee07 3a90 	vmov	s15, r3
 80117ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80117d2:	eddf 6a60 	vldr	s13, [pc, #384]	; 8011954 <vl53l3cx_get_result+0x278>
 80117d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80117da:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8011958 <vl53l3cx_get_result+0x27c>
 80117de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80117e2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80117e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80117ea:	0a1b      	lsrs	r3, r3, #8
 80117ec:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 80117f0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80117f4:	ee07 3a90 	vmov	s15, r3
 80117f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80117fc:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011800:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011804:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8011808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801180c:	6839      	ldr	r1, [r7, #0]
 801180e:	4613      	mov	r3, r2
 8011810:	011b      	lsls	r3, r3, #4
 8011812:	4413      	add	r3, r2
 8011814:	4403      	add	r3, r0
 8011816:	3308      	adds	r3, #8
 8011818:	009b      	lsls	r3, r3, #2
 801181a:	440b      	add	r3, r1
 801181c:	3308      	adds	r3, #8
 801181e:	edc3 7a00 	vstr	s15, [r3]
 8011822:	e00f      	b.n	8011844 <vl53l3cx_get_result+0x168>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8011824:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011828:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 801182c:	6839      	ldr	r1, [r7, #0]
 801182e:	4613      	mov	r3, r2
 8011830:	011b      	lsls	r3, r3, #4
 8011832:	4413      	add	r3, r2
 8011834:	4403      	add	r3, r0
 8011836:	3308      	adds	r3, #8
 8011838:	009b      	lsls	r3, r3, #2
 801183a:	440b      	add	r3, r1
 801183c:	3308      	adds	r3, #8
 801183e:	f04f 0200 	mov.w	r2, #0
 8011842:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801184a:	332d      	adds	r3, #45	; 0x2d
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	2b01      	cmp	r3, #1
 8011850:	d137      	bne.n	80118c2 <vl53l3cx_get_result+0x1e6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8011852:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011856:	4613      	mov	r3, r2
 8011858:	009b      	lsls	r3, r3, #2
 801185a:	4413      	add	r3, r2
 801185c:	009b      	lsls	r3, r3, #2
 801185e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011862:	4413      	add	r3, r2
 8011864:	3b64      	subs	r3, #100	; 0x64
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	ee07 3a90 	vmov	s15, r3
 801186c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011870:	eddf 6a38 	vldr	s13, [pc, #224]	; 8011954 <vl53l3cx_get_result+0x278>
 8011874:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011878:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8011958 <vl53l3cx_get_result+0x27c>
 801187c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011880:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8011884:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011888:	0a1b      	lsrs	r3, r3, #8
 801188a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 801188e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8011892:	ee07 3a90 	vmov	s15, r3
 8011896:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801189a:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 801189e:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 80118a2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80118a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80118aa:	6839      	ldr	r1, [r7, #0]
 80118ac:	4613      	mov	r3, r2
 80118ae:	011b      	lsls	r3, r3, #4
 80118b0:	4413      	add	r3, r2
 80118b2:	4403      	add	r3, r0
 80118b4:	330c      	adds	r3, #12
 80118b6:	009b      	lsls	r3, r3, #2
 80118b8:	440b      	add	r3, r1
 80118ba:	3308      	adds	r3, #8
 80118bc:	edc3 7a00 	vstr	s15, [r3]
 80118c0:	e00f      	b.n	80118e2 <vl53l3cx_get_result+0x206>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 80118c2:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80118c6:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 80118ca:	6839      	ldr	r1, [r7, #0]
 80118cc:	4613      	mov	r3, r2
 80118ce:	011b      	lsls	r3, r3, #4
 80118d0:	4413      	add	r3, r2
 80118d2:	4403      	add	r3, r0
 80118d4:	330c      	adds	r3, #12
 80118d6:	009b      	lsls	r3, r3, #2
 80118d8:	440b      	add	r3, r1
 80118da:	3308      	adds	r3, #8
 80118dc:	f04f 0200 	mov.w	r2, #0
 80118e0:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 80118e2:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80118e6:	4613      	mov	r3, r2
 80118e8:	009b      	lsls	r3, r3, #2
 80118ea:	4413      	add	r3, r2
 80118ec:	009b      	lsls	r3, r3, #2
 80118ee:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80118f2:	4413      	add	r3, r2
 80118f4:	3b56      	subs	r3, #86	; 0x56
 80118f6:	781b      	ldrb	r3, [r3, #0]
 80118f8:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80118fc:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011900:	461c      	mov	r4, r3
 8011902:	6839      	ldr	r1, [r7, #0]
 8011904:	4613      	mov	r3, r2
 8011906:	011b      	lsls	r3, r3, #4
 8011908:	4413      	add	r3, r2
 801190a:	4403      	add	r3, r0
 801190c:	3304      	adds	r3, #4
 801190e:	009b      	lsls	r3, r3, #2
 8011910:	440b      	add	r3, r1
 8011912:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8011914:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8011918:	3301      	adds	r3, #1
 801191a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 801191e:	7b7b      	ldrb	r3, [r7, #13]
 8011920:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011924:	429a      	cmp	r2, r3
 8011926:	f4ff af09 	bcc.w	801173c <vl53l3cx_get_result+0x60>
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 801192a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801192e:	3301      	adds	r3, #1
 8011930:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8011934:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8011938:	2b00      	cmp	r3, #0
 801193a:	f43f aeef 	beq.w	801171c <vl53l3cx_get_result+0x40>
      }
    }

    pResult->NumberOfZones = VL53L3CX_MAX_NB_ZONES;
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	2201      	movs	r2, #1
 8011942:	601a      	str	r2, [r3, #0]

    ret = VL53L3CX_OK;
 8011944:	2300      	movs	r3, #0
 8011946:	677b      	str	r3, [r7, #116]	; 0x74
  }

  return ret;
 8011948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 801194a:	4618      	mov	r0, r3
 801194c:	377c      	adds	r7, #124	; 0x7c
 801194e:	46bd      	mov	sp, r7
 8011950:	bd90      	pop	{r4, r7, pc}
 8011952:	bf00      	nop
 8011954:	47800000 	.word	0x47800000
 8011958:	447a0000 	.word	0x447a0000

0801195c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011960:	4b0e      	ldr	r3, [pc, #56]	; (801199c <HAL_Init+0x40>)
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	4a0d      	ldr	r2, [pc, #52]	; (801199c <HAL_Init+0x40>)
 8011966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801196a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801196c:	4b0b      	ldr	r3, [pc, #44]	; (801199c <HAL_Init+0x40>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	4a0a      	ldr	r2, [pc, #40]	; (801199c <HAL_Init+0x40>)
 8011972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011978:	4b08      	ldr	r3, [pc, #32]	; (801199c <HAL_Init+0x40>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	4a07      	ldr	r2, [pc, #28]	; (801199c <HAL_Init+0x40>)
 801197e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011984:	2003      	movs	r0, #3
 8011986:	f000 f931 	bl	8011bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801198a:	2000      	movs	r0, #0
 801198c:	f000 f808 	bl	80119a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8011990:	f7ef f8bc 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011994:	2300      	movs	r3, #0
}
 8011996:	4618      	mov	r0, r3
 8011998:	bd80      	pop	{r7, pc}
 801199a:	bf00      	nop
 801199c:	40023c00 	.word	0x40023c00

080119a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b082      	sub	sp, #8
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80119a8:	4b12      	ldr	r3, [pc, #72]	; (80119f4 <HAL_InitTick+0x54>)
 80119aa:	681a      	ldr	r2, [r3, #0]
 80119ac:	4b12      	ldr	r3, [pc, #72]	; (80119f8 <HAL_InitTick+0x58>)
 80119ae:	781b      	ldrb	r3, [r3, #0]
 80119b0:	4619      	mov	r1, r3
 80119b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80119b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80119ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80119be:	4618      	mov	r0, r3
 80119c0:	f000 f93b 	bl	8011c3a <HAL_SYSTICK_Config>
 80119c4:	4603      	mov	r3, r0
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d001      	beq.n	80119ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80119ca:	2301      	movs	r3, #1
 80119cc:	e00e      	b.n	80119ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2b0f      	cmp	r3, #15
 80119d2:	d80a      	bhi.n	80119ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80119d4:	2200      	movs	r2, #0
 80119d6:	6879      	ldr	r1, [r7, #4]
 80119d8:	f04f 30ff 	mov.w	r0, #4294967295
 80119dc:	f000 f911 	bl	8011c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80119e0:	4a06      	ldr	r2, [pc, #24]	; (80119fc <HAL_InitTick+0x5c>)
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80119e6:	2300      	movs	r3, #0
 80119e8:	e000      	b.n	80119ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80119ea:	2301      	movs	r3, #1
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3708      	adds	r7, #8
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}
 80119f4:	20000010 	.word	0x20000010
 80119f8:	2000007c 	.word	0x2000007c
 80119fc:	20000078 	.word	0x20000078

08011a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011a00:	b480      	push	{r7}
 8011a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011a04:	4b06      	ldr	r3, [pc, #24]	; (8011a20 <HAL_IncTick+0x20>)
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	461a      	mov	r2, r3
 8011a0a:	4b06      	ldr	r3, [pc, #24]	; (8011a24 <HAL_IncTick+0x24>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	4413      	add	r3, r2
 8011a10:	4a04      	ldr	r2, [pc, #16]	; (8011a24 <HAL_IncTick+0x24>)
 8011a12:	6013      	str	r3, [r2, #0]
}
 8011a14:	bf00      	nop
 8011a16:	46bd      	mov	sp, r7
 8011a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1c:	4770      	bx	lr
 8011a1e:	bf00      	nop
 8011a20:	2000007c 	.word	0x2000007c
 8011a24:	200072f4 	.word	0x200072f4

08011a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011a28:	b480      	push	{r7}
 8011a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8011a2c:	4b03      	ldr	r3, [pc, #12]	; (8011a3c <HAL_GetTick+0x14>)
 8011a2e:	681b      	ldr	r3, [r3, #0]
}
 8011a30:	4618      	mov	r0, r3
 8011a32:	46bd      	mov	sp, r7
 8011a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a38:	4770      	bx	lr
 8011a3a:	bf00      	nop
 8011a3c:	200072f4 	.word	0x200072f4

08011a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b084      	sub	sp, #16
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011a48:	f7ff ffee 	bl	8011a28 <HAL_GetTick>
 8011a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a58:	d005      	beq.n	8011a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011a5a:	4b0a      	ldr	r3, [pc, #40]	; (8011a84 <HAL_Delay+0x44>)
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	461a      	mov	r2, r3
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	4413      	add	r3, r2
 8011a64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8011a66:	bf00      	nop
 8011a68:	f7ff ffde 	bl	8011a28 <HAL_GetTick>
 8011a6c:	4602      	mov	r2, r0
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	1ad3      	subs	r3, r2, r3
 8011a72:	68fa      	ldr	r2, [r7, #12]
 8011a74:	429a      	cmp	r2, r3
 8011a76:	d8f7      	bhi.n	8011a68 <HAL_Delay+0x28>
  {
  }
}
 8011a78:	bf00      	nop
 8011a7a:	bf00      	nop
 8011a7c:	3710      	adds	r7, #16
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
 8011a82:	bf00      	nop
 8011a84:	2000007c 	.word	0x2000007c

08011a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b085      	sub	sp, #20
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f003 0307 	and.w	r3, r3, #7
 8011a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011a98:	4b0c      	ldr	r3, [pc, #48]	; (8011acc <__NVIC_SetPriorityGrouping+0x44>)
 8011a9a:	68db      	ldr	r3, [r3, #12]
 8011a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011a9e:	68ba      	ldr	r2, [r7, #8]
 8011aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011aa4:	4013      	ands	r3, r2
 8011aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011aba:	4a04      	ldr	r2, [pc, #16]	; (8011acc <__NVIC_SetPriorityGrouping+0x44>)
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	60d3      	str	r3, [r2, #12]
}
 8011ac0:	bf00      	nop
 8011ac2:	3714      	adds	r7, #20
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aca:	4770      	bx	lr
 8011acc:	e000ed00 	.word	0xe000ed00

08011ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011ad4:	4b04      	ldr	r3, [pc, #16]	; (8011ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8011ad6:	68db      	ldr	r3, [r3, #12]
 8011ad8:	0a1b      	lsrs	r3, r3, #8
 8011ada:	f003 0307 	and.w	r3, r3, #7
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae6:	4770      	bx	lr
 8011ae8:	e000ed00 	.word	0xe000ed00

08011aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011aec:	b480      	push	{r7}
 8011aee:	b083      	sub	sp, #12
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	4603      	mov	r3, r0
 8011af4:	6039      	str	r1, [r7, #0]
 8011af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	db0a      	blt.n	8011b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	b2da      	uxtb	r2, r3
 8011b04:	490c      	ldr	r1, [pc, #48]	; (8011b38 <__NVIC_SetPriority+0x4c>)
 8011b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b0a:	0112      	lsls	r2, r2, #4
 8011b0c:	b2d2      	uxtb	r2, r2
 8011b0e:	440b      	add	r3, r1
 8011b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011b14:	e00a      	b.n	8011b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	b2da      	uxtb	r2, r3
 8011b1a:	4908      	ldr	r1, [pc, #32]	; (8011b3c <__NVIC_SetPriority+0x50>)
 8011b1c:	79fb      	ldrb	r3, [r7, #7]
 8011b1e:	f003 030f 	and.w	r3, r3, #15
 8011b22:	3b04      	subs	r3, #4
 8011b24:	0112      	lsls	r2, r2, #4
 8011b26:	b2d2      	uxtb	r2, r2
 8011b28:	440b      	add	r3, r1
 8011b2a:	761a      	strb	r2, [r3, #24]
}
 8011b2c:	bf00      	nop
 8011b2e:	370c      	adds	r7, #12
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr
 8011b38:	e000e100 	.word	0xe000e100
 8011b3c:	e000ed00 	.word	0xe000ed00

08011b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011b40:	b480      	push	{r7}
 8011b42:	b089      	sub	sp, #36	; 0x24
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	60f8      	str	r0, [r7, #12]
 8011b48:	60b9      	str	r1, [r7, #8]
 8011b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	f003 0307 	and.w	r3, r3, #7
 8011b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011b54:	69fb      	ldr	r3, [r7, #28]
 8011b56:	f1c3 0307 	rsb	r3, r3, #7
 8011b5a:	2b04      	cmp	r3, #4
 8011b5c:	bf28      	it	cs
 8011b5e:	2304      	movcs	r3, #4
 8011b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011b62:	69fb      	ldr	r3, [r7, #28]
 8011b64:	3304      	adds	r3, #4
 8011b66:	2b06      	cmp	r3, #6
 8011b68:	d902      	bls.n	8011b70 <NVIC_EncodePriority+0x30>
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	3b03      	subs	r3, #3
 8011b6e:	e000      	b.n	8011b72 <NVIC_EncodePriority+0x32>
 8011b70:	2300      	movs	r3, #0
 8011b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011b74:	f04f 32ff 	mov.w	r2, #4294967295
 8011b78:	69bb      	ldr	r3, [r7, #24]
 8011b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8011b7e:	43da      	mvns	r2, r3
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	401a      	ands	r2, r3
 8011b84:	697b      	ldr	r3, [r7, #20]
 8011b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011b88:	f04f 31ff 	mov.w	r1, #4294967295
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8011b92:	43d9      	mvns	r1, r3
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011b98:	4313      	orrs	r3, r2
         );
}
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	3724      	adds	r7, #36	; 0x24
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba4:	4770      	bx	lr
	...

08011ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b082      	sub	sp, #8
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	3b01      	subs	r3, #1
 8011bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011bb8:	d301      	bcc.n	8011bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011bba:	2301      	movs	r3, #1
 8011bbc:	e00f      	b.n	8011bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011bbe:	4a0a      	ldr	r2, [pc, #40]	; (8011be8 <SysTick_Config+0x40>)
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	3b01      	subs	r3, #1
 8011bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011bc6:	210f      	movs	r1, #15
 8011bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8011bcc:	f7ff ff8e 	bl	8011aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011bd0:	4b05      	ldr	r3, [pc, #20]	; (8011be8 <SysTick_Config+0x40>)
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011bd6:	4b04      	ldr	r3, [pc, #16]	; (8011be8 <SysTick_Config+0x40>)
 8011bd8:	2207      	movs	r2, #7
 8011bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011bdc:	2300      	movs	r3, #0
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3708      	adds	r7, #8
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop
 8011be8:	e000e010 	.word	0xe000e010

08011bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f7ff ff47 	bl	8011a88 <__NVIC_SetPriorityGrouping>
}
 8011bfa:	bf00      	nop
 8011bfc:	3708      	adds	r7, #8
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}

08011c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011c02:	b580      	push	{r7, lr}
 8011c04:	b086      	sub	sp, #24
 8011c06:	af00      	add	r7, sp, #0
 8011c08:	4603      	mov	r3, r0
 8011c0a:	60b9      	str	r1, [r7, #8]
 8011c0c:	607a      	str	r2, [r7, #4]
 8011c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011c10:	2300      	movs	r3, #0
 8011c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011c14:	f7ff ff5c 	bl	8011ad0 <__NVIC_GetPriorityGrouping>
 8011c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011c1a:	687a      	ldr	r2, [r7, #4]
 8011c1c:	68b9      	ldr	r1, [r7, #8]
 8011c1e:	6978      	ldr	r0, [r7, #20]
 8011c20:	f7ff ff8e 	bl	8011b40 <NVIC_EncodePriority>
 8011c24:	4602      	mov	r2, r0
 8011c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c2a:	4611      	mov	r1, r2
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f7ff ff5d 	bl	8011aec <__NVIC_SetPriority>
}
 8011c32:	bf00      	nop
 8011c34:	3718      	adds	r7, #24
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}

08011c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011c3a:	b580      	push	{r7, lr}
 8011c3c:	b082      	sub	sp, #8
 8011c3e:	af00      	add	r7, sp, #0
 8011c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f7ff ffb0 	bl	8011ba8 <SysTick_Config>
 8011c48:	4603      	mov	r3, r0
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3708      	adds	r7, #8
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}
	...

08011c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011c54:	b480      	push	{r7}
 8011c56:	b089      	sub	sp, #36	; 0x24
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8011c62:	2300      	movs	r3, #0
 8011c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8011c66:	2300      	movs	r3, #0
 8011c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	61fb      	str	r3, [r7, #28]
 8011c6e:	e159      	b.n	8011f24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011c70:	2201      	movs	r2, #1
 8011c72:	69fb      	ldr	r3, [r7, #28]
 8011c74:	fa02 f303 	lsl.w	r3, r2, r3
 8011c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	697a      	ldr	r2, [r7, #20]
 8011c80:	4013      	ands	r3, r2
 8011c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011c84:	693a      	ldr	r2, [r7, #16]
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	f040 8148 	bne.w	8011f1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	685b      	ldr	r3, [r3, #4]
 8011c92:	f003 0303 	and.w	r3, r3, #3
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d005      	beq.n	8011ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	685b      	ldr	r3, [r3, #4]
 8011c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011ca2:	2b02      	cmp	r3, #2
 8011ca4:	d130      	bne.n	8011d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	689b      	ldr	r3, [r3, #8]
 8011caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011cac:	69fb      	ldr	r3, [r7, #28]
 8011cae:	005b      	lsls	r3, r3, #1
 8011cb0:	2203      	movs	r2, #3
 8011cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8011cb6:	43db      	mvns	r3, r3
 8011cb8:	69ba      	ldr	r2, [r7, #24]
 8011cba:	4013      	ands	r3, r2
 8011cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	68da      	ldr	r2, [r3, #12]
 8011cc2:	69fb      	ldr	r3, [r7, #28]
 8011cc4:	005b      	lsls	r3, r3, #1
 8011cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8011cca:	69ba      	ldr	r2, [r7, #24]
 8011ccc:	4313      	orrs	r3, r2
 8011cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	69ba      	ldr	r2, [r7, #24]
 8011cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	685b      	ldr	r3, [r3, #4]
 8011cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011cdc:	2201      	movs	r2, #1
 8011cde:	69fb      	ldr	r3, [r7, #28]
 8011ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8011ce4:	43db      	mvns	r3, r3
 8011ce6:	69ba      	ldr	r2, [r7, #24]
 8011ce8:	4013      	ands	r3, r2
 8011cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	091b      	lsrs	r3, r3, #4
 8011cf2:	f003 0201 	and.w	r2, r3, #1
 8011cf6:	69fb      	ldr	r3, [r7, #28]
 8011cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8011cfc:	69ba      	ldr	r2, [r7, #24]
 8011cfe:	4313      	orrs	r3, r2
 8011d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	69ba      	ldr	r2, [r7, #24]
 8011d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	685b      	ldr	r3, [r3, #4]
 8011d0c:	f003 0303 	and.w	r3, r3, #3
 8011d10:	2b03      	cmp	r3, #3
 8011d12:	d017      	beq.n	8011d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	68db      	ldr	r3, [r3, #12]
 8011d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011d1a:	69fb      	ldr	r3, [r7, #28]
 8011d1c:	005b      	lsls	r3, r3, #1
 8011d1e:	2203      	movs	r2, #3
 8011d20:	fa02 f303 	lsl.w	r3, r2, r3
 8011d24:	43db      	mvns	r3, r3
 8011d26:	69ba      	ldr	r2, [r7, #24]
 8011d28:	4013      	ands	r3, r2
 8011d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	689a      	ldr	r2, [r3, #8]
 8011d30:	69fb      	ldr	r3, [r7, #28]
 8011d32:	005b      	lsls	r3, r3, #1
 8011d34:	fa02 f303 	lsl.w	r3, r2, r3
 8011d38:	69ba      	ldr	r2, [r7, #24]
 8011d3a:	4313      	orrs	r3, r2
 8011d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	69ba      	ldr	r2, [r7, #24]
 8011d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	f003 0303 	and.w	r3, r3, #3
 8011d4c:	2b02      	cmp	r3, #2
 8011d4e:	d123      	bne.n	8011d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011d50:	69fb      	ldr	r3, [r7, #28]
 8011d52:	08da      	lsrs	r2, r3, #3
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	3208      	adds	r2, #8
 8011d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011d5e:	69fb      	ldr	r3, [r7, #28]
 8011d60:	f003 0307 	and.w	r3, r3, #7
 8011d64:	009b      	lsls	r3, r3, #2
 8011d66:	220f      	movs	r2, #15
 8011d68:	fa02 f303 	lsl.w	r3, r2, r3
 8011d6c:	43db      	mvns	r3, r3
 8011d6e:	69ba      	ldr	r2, [r7, #24]
 8011d70:	4013      	ands	r3, r2
 8011d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	691a      	ldr	r2, [r3, #16]
 8011d78:	69fb      	ldr	r3, [r7, #28]
 8011d7a:	f003 0307 	and.w	r3, r3, #7
 8011d7e:	009b      	lsls	r3, r3, #2
 8011d80:	fa02 f303 	lsl.w	r3, r2, r3
 8011d84:	69ba      	ldr	r2, [r7, #24]
 8011d86:	4313      	orrs	r3, r2
 8011d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011d8a:	69fb      	ldr	r3, [r7, #28]
 8011d8c:	08da      	lsrs	r2, r3, #3
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	3208      	adds	r2, #8
 8011d92:	69b9      	ldr	r1, [r7, #24]
 8011d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011d9e:	69fb      	ldr	r3, [r7, #28]
 8011da0:	005b      	lsls	r3, r3, #1
 8011da2:	2203      	movs	r2, #3
 8011da4:	fa02 f303 	lsl.w	r3, r2, r3
 8011da8:	43db      	mvns	r3, r3
 8011daa:	69ba      	ldr	r2, [r7, #24]
 8011dac:	4013      	ands	r3, r2
 8011dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	685b      	ldr	r3, [r3, #4]
 8011db4:	f003 0203 	and.w	r2, r3, #3
 8011db8:	69fb      	ldr	r3, [r7, #28]
 8011dba:	005b      	lsls	r3, r3, #1
 8011dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8011dc0:	69ba      	ldr	r2, [r7, #24]
 8011dc2:	4313      	orrs	r3, r2
 8011dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	69ba      	ldr	r2, [r7, #24]
 8011dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	685b      	ldr	r3, [r3, #4]
 8011dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	f000 80a2 	beq.w	8011f1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011dda:	2300      	movs	r3, #0
 8011ddc:	60fb      	str	r3, [r7, #12]
 8011dde:	4b57      	ldr	r3, [pc, #348]	; (8011f3c <HAL_GPIO_Init+0x2e8>)
 8011de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011de2:	4a56      	ldr	r2, [pc, #344]	; (8011f3c <HAL_GPIO_Init+0x2e8>)
 8011de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011de8:	6453      	str	r3, [r2, #68]	; 0x44
 8011dea:	4b54      	ldr	r3, [pc, #336]	; (8011f3c <HAL_GPIO_Init+0x2e8>)
 8011dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011df2:	60fb      	str	r3, [r7, #12]
 8011df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8011df6:	4a52      	ldr	r2, [pc, #328]	; (8011f40 <HAL_GPIO_Init+0x2ec>)
 8011df8:	69fb      	ldr	r3, [r7, #28]
 8011dfa:	089b      	lsrs	r3, r3, #2
 8011dfc:	3302      	adds	r3, #2
 8011dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8011e04:	69fb      	ldr	r3, [r7, #28]
 8011e06:	f003 0303 	and.w	r3, r3, #3
 8011e0a:	009b      	lsls	r3, r3, #2
 8011e0c:	220f      	movs	r2, #15
 8011e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8011e12:	43db      	mvns	r3, r3
 8011e14:	69ba      	ldr	r2, [r7, #24]
 8011e16:	4013      	ands	r3, r2
 8011e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	4a49      	ldr	r2, [pc, #292]	; (8011f44 <HAL_GPIO_Init+0x2f0>)
 8011e1e:	4293      	cmp	r3, r2
 8011e20:	d019      	beq.n	8011e56 <HAL_GPIO_Init+0x202>
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	4a48      	ldr	r2, [pc, #288]	; (8011f48 <HAL_GPIO_Init+0x2f4>)
 8011e26:	4293      	cmp	r3, r2
 8011e28:	d013      	beq.n	8011e52 <HAL_GPIO_Init+0x1fe>
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	4a47      	ldr	r2, [pc, #284]	; (8011f4c <HAL_GPIO_Init+0x2f8>)
 8011e2e:	4293      	cmp	r3, r2
 8011e30:	d00d      	beq.n	8011e4e <HAL_GPIO_Init+0x1fa>
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	4a46      	ldr	r2, [pc, #280]	; (8011f50 <HAL_GPIO_Init+0x2fc>)
 8011e36:	4293      	cmp	r3, r2
 8011e38:	d007      	beq.n	8011e4a <HAL_GPIO_Init+0x1f6>
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	4a45      	ldr	r2, [pc, #276]	; (8011f54 <HAL_GPIO_Init+0x300>)
 8011e3e:	4293      	cmp	r3, r2
 8011e40:	d101      	bne.n	8011e46 <HAL_GPIO_Init+0x1f2>
 8011e42:	2304      	movs	r3, #4
 8011e44:	e008      	b.n	8011e58 <HAL_GPIO_Init+0x204>
 8011e46:	2307      	movs	r3, #7
 8011e48:	e006      	b.n	8011e58 <HAL_GPIO_Init+0x204>
 8011e4a:	2303      	movs	r3, #3
 8011e4c:	e004      	b.n	8011e58 <HAL_GPIO_Init+0x204>
 8011e4e:	2302      	movs	r3, #2
 8011e50:	e002      	b.n	8011e58 <HAL_GPIO_Init+0x204>
 8011e52:	2301      	movs	r3, #1
 8011e54:	e000      	b.n	8011e58 <HAL_GPIO_Init+0x204>
 8011e56:	2300      	movs	r3, #0
 8011e58:	69fa      	ldr	r2, [r7, #28]
 8011e5a:	f002 0203 	and.w	r2, r2, #3
 8011e5e:	0092      	lsls	r2, r2, #2
 8011e60:	4093      	lsls	r3, r2
 8011e62:	69ba      	ldr	r2, [r7, #24]
 8011e64:	4313      	orrs	r3, r2
 8011e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011e68:	4935      	ldr	r1, [pc, #212]	; (8011f40 <HAL_GPIO_Init+0x2ec>)
 8011e6a:	69fb      	ldr	r3, [r7, #28]
 8011e6c:	089b      	lsrs	r3, r3, #2
 8011e6e:	3302      	adds	r3, #2
 8011e70:	69ba      	ldr	r2, [r7, #24]
 8011e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011e76:	4b38      	ldr	r3, [pc, #224]	; (8011f58 <HAL_GPIO_Init+0x304>)
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	43db      	mvns	r3, r3
 8011e80:	69ba      	ldr	r2, [r7, #24]
 8011e82:	4013      	ands	r3, r2
 8011e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011e86:	683b      	ldr	r3, [r7, #0]
 8011e88:	685b      	ldr	r3, [r3, #4]
 8011e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d003      	beq.n	8011e9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8011e92:	69ba      	ldr	r2, [r7, #24]
 8011e94:	693b      	ldr	r3, [r7, #16]
 8011e96:	4313      	orrs	r3, r2
 8011e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8011e9a:	4a2f      	ldr	r2, [pc, #188]	; (8011f58 <HAL_GPIO_Init+0x304>)
 8011e9c:	69bb      	ldr	r3, [r7, #24]
 8011e9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8011ea0:	4b2d      	ldr	r3, [pc, #180]	; (8011f58 <HAL_GPIO_Init+0x304>)
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011ea6:	693b      	ldr	r3, [r7, #16]
 8011ea8:	43db      	mvns	r3, r3
 8011eaa:	69ba      	ldr	r2, [r7, #24]
 8011eac:	4013      	ands	r3, r2
 8011eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	685b      	ldr	r3, [r3, #4]
 8011eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d003      	beq.n	8011ec4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8011ebc:	69ba      	ldr	r2, [r7, #24]
 8011ebe:	693b      	ldr	r3, [r7, #16]
 8011ec0:	4313      	orrs	r3, r2
 8011ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8011ec4:	4a24      	ldr	r2, [pc, #144]	; (8011f58 <HAL_GPIO_Init+0x304>)
 8011ec6:	69bb      	ldr	r3, [r7, #24]
 8011ec8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011eca:	4b23      	ldr	r3, [pc, #140]	; (8011f58 <HAL_GPIO_Init+0x304>)
 8011ecc:	689b      	ldr	r3, [r3, #8]
 8011ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	43db      	mvns	r3, r3
 8011ed4:	69ba      	ldr	r2, [r7, #24]
 8011ed6:	4013      	ands	r3, r2
 8011ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	685b      	ldr	r3, [r3, #4]
 8011ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d003      	beq.n	8011eee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8011ee6:	69ba      	ldr	r2, [r7, #24]
 8011ee8:	693b      	ldr	r3, [r7, #16]
 8011eea:	4313      	orrs	r3, r2
 8011eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8011eee:	4a1a      	ldr	r2, [pc, #104]	; (8011f58 <HAL_GPIO_Init+0x304>)
 8011ef0:	69bb      	ldr	r3, [r7, #24]
 8011ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011ef4:	4b18      	ldr	r3, [pc, #96]	; (8011f58 <HAL_GPIO_Init+0x304>)
 8011ef6:	68db      	ldr	r3, [r3, #12]
 8011ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011efa:	693b      	ldr	r3, [r7, #16]
 8011efc:	43db      	mvns	r3, r3
 8011efe:	69ba      	ldr	r2, [r7, #24]
 8011f00:	4013      	ands	r3, r2
 8011f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	685b      	ldr	r3, [r3, #4]
 8011f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d003      	beq.n	8011f18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8011f10:	69ba      	ldr	r2, [r7, #24]
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	4313      	orrs	r3, r2
 8011f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011f18:	4a0f      	ldr	r2, [pc, #60]	; (8011f58 <HAL_GPIO_Init+0x304>)
 8011f1a:	69bb      	ldr	r3, [r7, #24]
 8011f1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011f1e:	69fb      	ldr	r3, [r7, #28]
 8011f20:	3301      	adds	r3, #1
 8011f22:	61fb      	str	r3, [r7, #28]
 8011f24:	69fb      	ldr	r3, [r7, #28]
 8011f26:	2b0f      	cmp	r3, #15
 8011f28:	f67f aea2 	bls.w	8011c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011f2c:	bf00      	nop
 8011f2e:	bf00      	nop
 8011f30:	3724      	adds	r7, #36	; 0x24
 8011f32:	46bd      	mov	sp, r7
 8011f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f38:	4770      	bx	lr
 8011f3a:	bf00      	nop
 8011f3c:	40023800 	.word	0x40023800
 8011f40:	40013800 	.word	0x40013800
 8011f44:	40020000 	.word	0x40020000
 8011f48:	40020400 	.word	0x40020400
 8011f4c:	40020800 	.word	0x40020800
 8011f50:	40020c00 	.word	0x40020c00
 8011f54:	40021000 	.word	0x40021000
 8011f58:	40013c00 	.word	0x40013c00

08011f5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011f5c:	b480      	push	{r7}
 8011f5e:	b087      	sub	sp, #28
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
 8011f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011f66:	2300      	movs	r3, #0
 8011f68:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8011f6e:	2300      	movs	r3, #0
 8011f70:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011f72:	2300      	movs	r3, #0
 8011f74:	617b      	str	r3, [r7, #20]
 8011f76:	e0bb      	b.n	80120f0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011f78:	2201      	movs	r2, #1
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8011f80:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8011f82:	683a      	ldr	r2, [r7, #0]
 8011f84:	693b      	ldr	r3, [r7, #16]
 8011f86:	4013      	ands	r3, r2
 8011f88:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8011f8a:	68fa      	ldr	r2, [r7, #12]
 8011f8c:	693b      	ldr	r3, [r7, #16]
 8011f8e:	429a      	cmp	r2, r3
 8011f90:	f040 80ab 	bne.w	80120ea <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8011f94:	4a5c      	ldr	r2, [pc, #368]	; (8012108 <HAL_GPIO_DeInit+0x1ac>)
 8011f96:	697b      	ldr	r3, [r7, #20]
 8011f98:	089b      	lsrs	r3, r3, #2
 8011f9a:	3302      	adds	r3, #2
 8011f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011fa0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	f003 0303 	and.w	r3, r3, #3
 8011fa8:	009b      	lsls	r3, r3, #2
 8011faa:	220f      	movs	r2, #15
 8011fac:	fa02 f303 	lsl.w	r3, r2, r3
 8011fb0:	68ba      	ldr	r2, [r7, #8]
 8011fb2:	4013      	ands	r3, r2
 8011fb4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	4a54      	ldr	r2, [pc, #336]	; (801210c <HAL_GPIO_DeInit+0x1b0>)
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	d019      	beq.n	8011ff2 <HAL_GPIO_DeInit+0x96>
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	4a53      	ldr	r2, [pc, #332]	; (8012110 <HAL_GPIO_DeInit+0x1b4>)
 8011fc2:	4293      	cmp	r3, r2
 8011fc4:	d013      	beq.n	8011fee <HAL_GPIO_DeInit+0x92>
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	4a52      	ldr	r2, [pc, #328]	; (8012114 <HAL_GPIO_DeInit+0x1b8>)
 8011fca:	4293      	cmp	r3, r2
 8011fcc:	d00d      	beq.n	8011fea <HAL_GPIO_DeInit+0x8e>
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	4a51      	ldr	r2, [pc, #324]	; (8012118 <HAL_GPIO_DeInit+0x1bc>)
 8011fd2:	4293      	cmp	r3, r2
 8011fd4:	d007      	beq.n	8011fe6 <HAL_GPIO_DeInit+0x8a>
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	4a50      	ldr	r2, [pc, #320]	; (801211c <HAL_GPIO_DeInit+0x1c0>)
 8011fda:	4293      	cmp	r3, r2
 8011fdc:	d101      	bne.n	8011fe2 <HAL_GPIO_DeInit+0x86>
 8011fde:	2304      	movs	r3, #4
 8011fe0:	e008      	b.n	8011ff4 <HAL_GPIO_DeInit+0x98>
 8011fe2:	2307      	movs	r3, #7
 8011fe4:	e006      	b.n	8011ff4 <HAL_GPIO_DeInit+0x98>
 8011fe6:	2303      	movs	r3, #3
 8011fe8:	e004      	b.n	8011ff4 <HAL_GPIO_DeInit+0x98>
 8011fea:	2302      	movs	r3, #2
 8011fec:	e002      	b.n	8011ff4 <HAL_GPIO_DeInit+0x98>
 8011fee:	2301      	movs	r3, #1
 8011ff0:	e000      	b.n	8011ff4 <HAL_GPIO_DeInit+0x98>
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	697a      	ldr	r2, [r7, #20]
 8011ff6:	f002 0203 	and.w	r2, r2, #3
 8011ffa:	0092      	lsls	r2, r2, #2
 8011ffc:	4093      	lsls	r3, r2
 8011ffe:	68ba      	ldr	r2, [r7, #8]
 8012000:	429a      	cmp	r2, r3
 8012002:	d132      	bne.n	801206a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8012004:	4b46      	ldr	r3, [pc, #280]	; (8012120 <HAL_GPIO_DeInit+0x1c4>)
 8012006:	681a      	ldr	r2, [r3, #0]
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	43db      	mvns	r3, r3
 801200c:	4944      	ldr	r1, [pc, #272]	; (8012120 <HAL_GPIO_DeInit+0x1c4>)
 801200e:	4013      	ands	r3, r2
 8012010:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8012012:	4b43      	ldr	r3, [pc, #268]	; (8012120 <HAL_GPIO_DeInit+0x1c4>)
 8012014:	685a      	ldr	r2, [r3, #4]
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	43db      	mvns	r3, r3
 801201a:	4941      	ldr	r1, [pc, #260]	; (8012120 <HAL_GPIO_DeInit+0x1c4>)
 801201c:	4013      	ands	r3, r2
 801201e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8012020:	4b3f      	ldr	r3, [pc, #252]	; (8012120 <HAL_GPIO_DeInit+0x1c4>)
 8012022:	689a      	ldr	r2, [r3, #8]
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	43db      	mvns	r3, r3
 8012028:	493d      	ldr	r1, [pc, #244]	; (8012120 <HAL_GPIO_DeInit+0x1c4>)
 801202a:	4013      	ands	r3, r2
 801202c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801202e:	4b3c      	ldr	r3, [pc, #240]	; (8012120 <HAL_GPIO_DeInit+0x1c4>)
 8012030:	68da      	ldr	r2, [r3, #12]
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	43db      	mvns	r3, r3
 8012036:	493a      	ldr	r1, [pc, #232]	; (8012120 <HAL_GPIO_DeInit+0x1c4>)
 8012038:	4013      	ands	r3, r2
 801203a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801203c:	697b      	ldr	r3, [r7, #20]
 801203e:	f003 0303 	and.w	r3, r3, #3
 8012042:	009b      	lsls	r3, r3, #2
 8012044:	220f      	movs	r2, #15
 8012046:	fa02 f303 	lsl.w	r3, r2, r3
 801204a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801204c:	4a2e      	ldr	r2, [pc, #184]	; (8012108 <HAL_GPIO_DeInit+0x1ac>)
 801204e:	697b      	ldr	r3, [r7, #20]
 8012050:	089b      	lsrs	r3, r3, #2
 8012052:	3302      	adds	r3, #2
 8012054:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	43da      	mvns	r2, r3
 801205c:	482a      	ldr	r0, [pc, #168]	; (8012108 <HAL_GPIO_DeInit+0x1ac>)
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	089b      	lsrs	r3, r3, #2
 8012062:	400a      	ands	r2, r1
 8012064:	3302      	adds	r3, #2
 8012066:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681a      	ldr	r2, [r3, #0]
 801206e:	697b      	ldr	r3, [r7, #20]
 8012070:	005b      	lsls	r3, r3, #1
 8012072:	2103      	movs	r1, #3
 8012074:	fa01 f303 	lsl.w	r3, r1, r3
 8012078:	43db      	mvns	r3, r3
 801207a:	401a      	ands	r2, r3
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012080:	697b      	ldr	r3, [r7, #20]
 8012082:	08da      	lsrs	r2, r3, #3
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	3208      	adds	r2, #8
 8012088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801208c:	697b      	ldr	r3, [r7, #20]
 801208e:	f003 0307 	and.w	r3, r3, #7
 8012092:	009b      	lsls	r3, r3, #2
 8012094:	220f      	movs	r2, #15
 8012096:	fa02 f303 	lsl.w	r3, r2, r3
 801209a:	43db      	mvns	r3, r3
 801209c:	697a      	ldr	r2, [r7, #20]
 801209e:	08d2      	lsrs	r2, r2, #3
 80120a0:	4019      	ands	r1, r3
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	3208      	adds	r2, #8
 80120a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	68da      	ldr	r2, [r3, #12]
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	005b      	lsls	r3, r3, #1
 80120b2:	2103      	movs	r1, #3
 80120b4:	fa01 f303 	lsl.w	r3, r1, r3
 80120b8:	43db      	mvns	r3, r3
 80120ba:	401a      	ands	r2, r3
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	685a      	ldr	r2, [r3, #4]
 80120c4:	2101      	movs	r1, #1
 80120c6:	697b      	ldr	r3, [r7, #20]
 80120c8:	fa01 f303 	lsl.w	r3, r1, r3
 80120cc:	43db      	mvns	r3, r3
 80120ce:	401a      	ands	r2, r3
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	689a      	ldr	r2, [r3, #8]
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	005b      	lsls	r3, r3, #1
 80120dc:	2103      	movs	r1, #3
 80120de:	fa01 f303 	lsl.w	r3, r1, r3
 80120e2:	43db      	mvns	r3, r3
 80120e4:	401a      	ands	r2, r3
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	3301      	adds	r3, #1
 80120ee:	617b      	str	r3, [r7, #20]
 80120f0:	697b      	ldr	r3, [r7, #20]
 80120f2:	2b0f      	cmp	r3, #15
 80120f4:	f67f af40 	bls.w	8011f78 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80120f8:	bf00      	nop
 80120fa:	bf00      	nop
 80120fc:	371c      	adds	r7, #28
 80120fe:	46bd      	mov	sp, r7
 8012100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012104:	4770      	bx	lr
 8012106:	bf00      	nop
 8012108:	40013800 	.word	0x40013800
 801210c:	40020000 	.word	0x40020000
 8012110:	40020400 	.word	0x40020400
 8012114:	40020800 	.word	0x40020800
 8012118:	40020c00 	.word	0x40020c00
 801211c:	40021000 	.word	0x40021000
 8012120:	40013c00 	.word	0x40013c00

08012124 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012124:	b480      	push	{r7}
 8012126:	b085      	sub	sp, #20
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	460b      	mov	r3, r1
 801212e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	691a      	ldr	r2, [r3, #16]
 8012134:	887b      	ldrh	r3, [r7, #2]
 8012136:	4013      	ands	r3, r2
 8012138:	2b00      	cmp	r3, #0
 801213a:	d002      	beq.n	8012142 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801213c:	2301      	movs	r3, #1
 801213e:	73fb      	strb	r3, [r7, #15]
 8012140:	e001      	b.n	8012146 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8012142:	2300      	movs	r3, #0
 8012144:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012146:	7bfb      	ldrb	r3, [r7, #15]
}
 8012148:	4618      	mov	r0, r3
 801214a:	3714      	adds	r7, #20
 801214c:	46bd      	mov	sp, r7
 801214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012152:	4770      	bx	lr

08012154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012154:	b480      	push	{r7}
 8012156:	b083      	sub	sp, #12
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
 801215c:	460b      	mov	r3, r1
 801215e:	807b      	strh	r3, [r7, #2]
 8012160:	4613      	mov	r3, r2
 8012162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012164:	787b      	ldrb	r3, [r7, #1]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d003      	beq.n	8012172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801216a:	887a      	ldrh	r2, [r7, #2]
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012170:	e003      	b.n	801217a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012172:	887b      	ldrh	r3, [r7, #2]
 8012174:	041a      	lsls	r2, r3, #16
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	619a      	str	r2, [r3, #24]
}
 801217a:	bf00      	nop
 801217c:	370c      	adds	r7, #12
 801217e:	46bd      	mov	sp, r7
 8012180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012184:	4770      	bx	lr
	...

08012188 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b084      	sub	sp, #16
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d101      	bne.n	801219a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8012196:	2301      	movs	r3, #1
 8012198:	e12b      	b.n	80123f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80121a0:	b2db      	uxtb	r3, r3
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d106      	bne.n	80121b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2200      	movs	r2, #0
 80121aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f000 f95d 	bl	801246e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2224      	movs	r2, #36	; 0x24
 80121b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	681a      	ldr	r2, [r3, #0]
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f022 0201 	bic.w	r2, r2, #1
 80121ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	681a      	ldr	r2, [r3, #0]
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80121da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	681a      	ldr	r2, [r3, #0]
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80121ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80121ec:	f001 fc0c 	bl	8013a08 <HAL_RCC_GetPCLK1Freq>
 80121f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	685b      	ldr	r3, [r3, #4]
 80121f6:	4a81      	ldr	r2, [pc, #516]	; (80123fc <HAL_I2C_Init+0x274>)
 80121f8:	4293      	cmp	r3, r2
 80121fa:	d807      	bhi.n	801220c <HAL_I2C_Init+0x84>
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	4a80      	ldr	r2, [pc, #512]	; (8012400 <HAL_I2C_Init+0x278>)
 8012200:	4293      	cmp	r3, r2
 8012202:	bf94      	ite	ls
 8012204:	2301      	movls	r3, #1
 8012206:	2300      	movhi	r3, #0
 8012208:	b2db      	uxtb	r3, r3
 801220a:	e006      	b.n	801221a <HAL_I2C_Init+0x92>
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	4a7d      	ldr	r2, [pc, #500]	; (8012404 <HAL_I2C_Init+0x27c>)
 8012210:	4293      	cmp	r3, r2
 8012212:	bf94      	ite	ls
 8012214:	2301      	movls	r3, #1
 8012216:	2300      	movhi	r3, #0
 8012218:	b2db      	uxtb	r3, r3
 801221a:	2b00      	cmp	r3, #0
 801221c:	d001      	beq.n	8012222 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801221e:	2301      	movs	r3, #1
 8012220:	e0e7      	b.n	80123f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	4a78      	ldr	r2, [pc, #480]	; (8012408 <HAL_I2C_Init+0x280>)
 8012226:	fba2 2303 	umull	r2, r3, r2, r3
 801222a:	0c9b      	lsrs	r3, r3, #18
 801222c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	68ba      	ldr	r2, [r7, #8]
 801223e:	430a      	orrs	r2, r1
 8012240:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	6a1b      	ldr	r3, [r3, #32]
 8012248:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	685b      	ldr	r3, [r3, #4]
 8012250:	4a6a      	ldr	r2, [pc, #424]	; (80123fc <HAL_I2C_Init+0x274>)
 8012252:	4293      	cmp	r3, r2
 8012254:	d802      	bhi.n	801225c <HAL_I2C_Init+0xd4>
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	3301      	adds	r3, #1
 801225a:	e009      	b.n	8012270 <HAL_I2C_Init+0xe8>
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012262:	fb02 f303 	mul.w	r3, r2, r3
 8012266:	4a69      	ldr	r2, [pc, #420]	; (801240c <HAL_I2C_Init+0x284>)
 8012268:	fba2 2303 	umull	r2, r3, r2, r3
 801226c:	099b      	lsrs	r3, r3, #6
 801226e:	3301      	adds	r3, #1
 8012270:	687a      	ldr	r2, [r7, #4]
 8012272:	6812      	ldr	r2, [r2, #0]
 8012274:	430b      	orrs	r3, r1
 8012276:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	69db      	ldr	r3, [r3, #28]
 801227e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8012282:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	685b      	ldr	r3, [r3, #4]
 801228a:	495c      	ldr	r1, [pc, #368]	; (80123fc <HAL_I2C_Init+0x274>)
 801228c:	428b      	cmp	r3, r1
 801228e:	d819      	bhi.n	80122c4 <HAL_I2C_Init+0x13c>
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	1e59      	subs	r1, r3, #1
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	005b      	lsls	r3, r3, #1
 801229a:	fbb1 f3f3 	udiv	r3, r1, r3
 801229e:	1c59      	adds	r1, r3, #1
 80122a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80122a4:	400b      	ands	r3, r1
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d00a      	beq.n	80122c0 <HAL_I2C_Init+0x138>
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	1e59      	subs	r1, r3, #1
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	685b      	ldr	r3, [r3, #4]
 80122b2:	005b      	lsls	r3, r3, #1
 80122b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80122b8:	3301      	adds	r3, #1
 80122ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80122be:	e051      	b.n	8012364 <HAL_I2C_Init+0x1dc>
 80122c0:	2304      	movs	r3, #4
 80122c2:	e04f      	b.n	8012364 <HAL_I2C_Init+0x1dc>
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	689b      	ldr	r3, [r3, #8]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d111      	bne.n	80122f0 <HAL_I2C_Init+0x168>
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	1e58      	subs	r0, r3, #1
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	6859      	ldr	r1, [r3, #4]
 80122d4:	460b      	mov	r3, r1
 80122d6:	005b      	lsls	r3, r3, #1
 80122d8:	440b      	add	r3, r1
 80122da:	fbb0 f3f3 	udiv	r3, r0, r3
 80122de:	3301      	adds	r3, #1
 80122e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	bf0c      	ite	eq
 80122e8:	2301      	moveq	r3, #1
 80122ea:	2300      	movne	r3, #0
 80122ec:	b2db      	uxtb	r3, r3
 80122ee:	e012      	b.n	8012316 <HAL_I2C_Init+0x18e>
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	1e58      	subs	r0, r3, #1
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6859      	ldr	r1, [r3, #4]
 80122f8:	460b      	mov	r3, r1
 80122fa:	009b      	lsls	r3, r3, #2
 80122fc:	440b      	add	r3, r1
 80122fe:	0099      	lsls	r1, r3, #2
 8012300:	440b      	add	r3, r1
 8012302:	fbb0 f3f3 	udiv	r3, r0, r3
 8012306:	3301      	adds	r3, #1
 8012308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801230c:	2b00      	cmp	r3, #0
 801230e:	bf0c      	ite	eq
 8012310:	2301      	moveq	r3, #1
 8012312:	2300      	movne	r3, #0
 8012314:	b2db      	uxtb	r3, r3
 8012316:	2b00      	cmp	r3, #0
 8012318:	d001      	beq.n	801231e <HAL_I2C_Init+0x196>
 801231a:	2301      	movs	r3, #1
 801231c:	e022      	b.n	8012364 <HAL_I2C_Init+0x1dc>
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	689b      	ldr	r3, [r3, #8]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d10e      	bne.n	8012344 <HAL_I2C_Init+0x1bc>
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	1e58      	subs	r0, r3, #1
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	6859      	ldr	r1, [r3, #4]
 801232e:	460b      	mov	r3, r1
 8012330:	005b      	lsls	r3, r3, #1
 8012332:	440b      	add	r3, r1
 8012334:	fbb0 f3f3 	udiv	r3, r0, r3
 8012338:	3301      	adds	r3, #1
 801233a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801233e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012342:	e00f      	b.n	8012364 <HAL_I2C_Init+0x1dc>
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	1e58      	subs	r0, r3, #1
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	6859      	ldr	r1, [r3, #4]
 801234c:	460b      	mov	r3, r1
 801234e:	009b      	lsls	r3, r3, #2
 8012350:	440b      	add	r3, r1
 8012352:	0099      	lsls	r1, r3, #2
 8012354:	440b      	add	r3, r1
 8012356:	fbb0 f3f3 	udiv	r3, r0, r3
 801235a:	3301      	adds	r3, #1
 801235c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012360:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012364:	6879      	ldr	r1, [r7, #4]
 8012366:	6809      	ldr	r1, [r1, #0]
 8012368:	4313      	orrs	r3, r2
 801236a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	69da      	ldr	r2, [r3, #28]
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	6a1b      	ldr	r3, [r3, #32]
 801237e:	431a      	orrs	r2, r3
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	430a      	orrs	r2, r1
 8012386:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	689b      	ldr	r3, [r3, #8]
 801238e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8012392:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012396:	687a      	ldr	r2, [r7, #4]
 8012398:	6911      	ldr	r1, [r2, #16]
 801239a:	687a      	ldr	r2, [r7, #4]
 801239c:	68d2      	ldr	r2, [r2, #12]
 801239e:	4311      	orrs	r1, r2
 80123a0:	687a      	ldr	r2, [r7, #4]
 80123a2:	6812      	ldr	r2, [r2, #0]
 80123a4:	430b      	orrs	r3, r1
 80123a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	68db      	ldr	r3, [r3, #12]
 80123ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	695a      	ldr	r2, [r3, #20]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	699b      	ldr	r3, [r3, #24]
 80123ba:	431a      	orrs	r2, r3
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	430a      	orrs	r2, r1
 80123c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	681a      	ldr	r2, [r3, #0]
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	f042 0201 	orr.w	r2, r2, #1
 80123d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2200      	movs	r2, #0
 80123d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	2220      	movs	r2, #32
 80123de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2200      	movs	r2, #0
 80123e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2200      	movs	r2, #0
 80123ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80123f0:	2300      	movs	r3, #0
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	3710      	adds	r7, #16
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}
 80123fa:	bf00      	nop
 80123fc:	000186a0 	.word	0x000186a0
 8012400:	001e847f 	.word	0x001e847f
 8012404:	003d08ff 	.word	0x003d08ff
 8012408:	431bde83 	.word	0x431bde83
 801240c:	10624dd3 	.word	0x10624dd3

08012410 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b082      	sub	sp, #8
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d101      	bne.n	8012422 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 801241e:	2301      	movs	r3, #1
 8012420:	e021      	b.n	8012466 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2224      	movs	r2, #36	; 0x24
 8012426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	681a      	ldr	r2, [r3, #0]
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	f022 0201 	bic.w	r2, r2, #1
 8012438:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	f000 f821 	bl	8012482 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2200      	movs	r2, #0
 8012444:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	2200      	movs	r2, #0
 801244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2200      	movs	r2, #0
 8012452:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2200      	movs	r2, #0
 8012458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2200      	movs	r2, #0
 8012460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012464:	2300      	movs	r3, #0
}
 8012466:	4618      	mov	r0, r3
 8012468:	3708      	adds	r7, #8
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}

0801246e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 801246e:	b480      	push	{r7}
 8012470:	b083      	sub	sp, #12
 8012472:	af00      	add	r7, sp, #0
 8012474:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8012476:	bf00      	nop
 8012478:	370c      	adds	r7, #12
 801247a:	46bd      	mov	sp, r7
 801247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012480:	4770      	bx	lr

08012482 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8012482:	b480      	push	{r7}
 8012484:	b083      	sub	sp, #12
 8012486:	af00      	add	r7, sp, #0
 8012488:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 801248a:	bf00      	nop
 801248c:	370c      	adds	r7, #12
 801248e:	46bd      	mov	sp, r7
 8012490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012494:	4770      	bx	lr
	...

08012498 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b088      	sub	sp, #32
 801249c:	af02      	add	r7, sp, #8
 801249e:	60f8      	str	r0, [r7, #12]
 80124a0:	607a      	str	r2, [r7, #4]
 80124a2:	461a      	mov	r2, r3
 80124a4:	460b      	mov	r3, r1
 80124a6:	817b      	strh	r3, [r7, #10]
 80124a8:	4613      	mov	r3, r2
 80124aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80124ac:	f7ff fabc 	bl	8011a28 <HAL_GetTick>
 80124b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	2b20      	cmp	r3, #32
 80124bc:	f040 80e0 	bne.w	8012680 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80124c0:	697b      	ldr	r3, [r7, #20]
 80124c2:	9300      	str	r3, [sp, #0]
 80124c4:	2319      	movs	r3, #25
 80124c6:	2201      	movs	r2, #1
 80124c8:	4970      	ldr	r1, [pc, #448]	; (801268c <HAL_I2C_Master_Transmit+0x1f4>)
 80124ca:	68f8      	ldr	r0, [r7, #12]
 80124cc:	f000 fc72 	bl	8012db4 <I2C_WaitOnFlagUntilTimeout>
 80124d0:	4603      	mov	r3, r0
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d001      	beq.n	80124da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80124d6:	2302      	movs	r3, #2
 80124d8:	e0d3      	b.n	8012682 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80124e0:	2b01      	cmp	r3, #1
 80124e2:	d101      	bne.n	80124e8 <HAL_I2C_Master_Transmit+0x50>
 80124e4:	2302      	movs	r3, #2
 80124e6:	e0cc      	b.n	8012682 <HAL_I2C_Master_Transmit+0x1ea>
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	2201      	movs	r2, #1
 80124ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	f003 0301 	and.w	r3, r3, #1
 80124fa:	2b01      	cmp	r3, #1
 80124fc:	d007      	beq.n	801250e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	681a      	ldr	r2, [r3, #0]
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	f042 0201 	orr.w	r2, r2, #1
 801250c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	681a      	ldr	r2, [r3, #0]
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801251c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	2221      	movs	r2, #33	; 0x21
 8012522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	2210      	movs	r2, #16
 801252a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	2200      	movs	r2, #0
 8012532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	687a      	ldr	r2, [r7, #4]
 8012538:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	893a      	ldrh	r2, [r7, #8]
 801253e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012544:	b29a      	uxth	r2, r3
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	4a50      	ldr	r2, [pc, #320]	; (8012690 <HAL_I2C_Master_Transmit+0x1f8>)
 801254e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8012550:	8979      	ldrh	r1, [r7, #10]
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	6a3a      	ldr	r2, [r7, #32]
 8012556:	68f8      	ldr	r0, [r7, #12]
 8012558:	f000 fadc 	bl	8012b14 <I2C_MasterRequestWrite>
 801255c:	4603      	mov	r3, r0
 801255e:	2b00      	cmp	r3, #0
 8012560:	d001      	beq.n	8012566 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8012562:	2301      	movs	r3, #1
 8012564:	e08d      	b.n	8012682 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012566:	2300      	movs	r3, #0
 8012568:	613b      	str	r3, [r7, #16]
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	695b      	ldr	r3, [r3, #20]
 8012570:	613b      	str	r3, [r7, #16]
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	699b      	ldr	r3, [r3, #24]
 8012578:	613b      	str	r3, [r7, #16]
 801257a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 801257c:	e066      	b.n	801264c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801257e:	697a      	ldr	r2, [r7, #20]
 8012580:	6a39      	ldr	r1, [r7, #32]
 8012582:	68f8      	ldr	r0, [r7, #12]
 8012584:	f000 fcec 	bl	8012f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8012588:	4603      	mov	r3, r0
 801258a:	2b00      	cmp	r3, #0
 801258c:	d00d      	beq.n	80125aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012592:	2b04      	cmp	r3, #4
 8012594:	d107      	bne.n	80125a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	681a      	ldr	r2, [r3, #0]
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80125a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80125a6:	2301      	movs	r3, #1
 80125a8:	e06b      	b.n	8012682 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ae:	781a      	ldrb	r2, [r3, #0]
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ba:	1c5a      	adds	r2, r3, #1
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80125c4:	b29b      	uxth	r3, r3
 80125c6:	3b01      	subs	r3, #1
 80125c8:	b29a      	uxth	r2, r3
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80125d2:	3b01      	subs	r3, #1
 80125d4:	b29a      	uxth	r2, r3
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	695b      	ldr	r3, [r3, #20]
 80125e0:	f003 0304 	and.w	r3, r3, #4
 80125e4:	2b04      	cmp	r3, #4
 80125e6:	d11b      	bne.n	8012620 <HAL_I2C_Master_Transmit+0x188>
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d017      	beq.n	8012620 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125f4:	781a      	ldrb	r2, [r3, #0]
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012600:	1c5a      	adds	r2, r3, #1
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801260a:	b29b      	uxth	r3, r3
 801260c:	3b01      	subs	r3, #1
 801260e:	b29a      	uxth	r2, r3
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012618:	3b01      	subs	r3, #1
 801261a:	b29a      	uxth	r2, r3
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012620:	697a      	ldr	r2, [r7, #20]
 8012622:	6a39      	ldr	r1, [r7, #32]
 8012624:	68f8      	ldr	r0, [r7, #12]
 8012626:	f000 fcdc 	bl	8012fe2 <I2C_WaitOnBTFFlagUntilTimeout>
 801262a:	4603      	mov	r3, r0
 801262c:	2b00      	cmp	r3, #0
 801262e:	d00d      	beq.n	801264c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012634:	2b04      	cmp	r3, #4
 8012636:	d107      	bne.n	8012648 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	681a      	ldr	r2, [r3, #0]
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012646:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8012648:	2301      	movs	r3, #1
 801264a:	e01a      	b.n	8012682 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012650:	2b00      	cmp	r3, #0
 8012652:	d194      	bne.n	801257e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	681a      	ldr	r2, [r3, #0]
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012662:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	2220      	movs	r2, #32
 8012668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	2200      	movs	r2, #0
 8012670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	2200      	movs	r2, #0
 8012678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801267c:	2300      	movs	r3, #0
 801267e:	e000      	b.n	8012682 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8012680:	2302      	movs	r3, #2
  }
}
 8012682:	4618      	mov	r0, r3
 8012684:	3718      	adds	r7, #24
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
 801268a:	bf00      	nop
 801268c:	00100002 	.word	0x00100002
 8012690:	ffff0000 	.word	0xffff0000

08012694 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b08c      	sub	sp, #48	; 0x30
 8012698:	af02      	add	r7, sp, #8
 801269a:	60f8      	str	r0, [r7, #12]
 801269c:	607a      	str	r2, [r7, #4]
 801269e:	461a      	mov	r2, r3
 80126a0:	460b      	mov	r3, r1
 80126a2:	817b      	strh	r3, [r7, #10]
 80126a4:	4613      	mov	r3, r2
 80126a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80126a8:	f7ff f9be 	bl	8011a28 <HAL_GetTick>
 80126ac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80126b4:	b2db      	uxtb	r3, r3
 80126b6:	2b20      	cmp	r3, #32
 80126b8:	f040 820b 	bne.w	8012ad2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80126bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126be:	9300      	str	r3, [sp, #0]
 80126c0:	2319      	movs	r3, #25
 80126c2:	2201      	movs	r2, #1
 80126c4:	497c      	ldr	r1, [pc, #496]	; (80128b8 <HAL_I2C_Master_Receive+0x224>)
 80126c6:	68f8      	ldr	r0, [r7, #12]
 80126c8:	f000 fb74 	bl	8012db4 <I2C_WaitOnFlagUntilTimeout>
 80126cc:	4603      	mov	r3, r0
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d001      	beq.n	80126d6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80126d2:	2302      	movs	r3, #2
 80126d4:	e1fe      	b.n	8012ad4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80126dc:	2b01      	cmp	r3, #1
 80126de:	d101      	bne.n	80126e4 <HAL_I2C_Master_Receive+0x50>
 80126e0:	2302      	movs	r3, #2
 80126e2:	e1f7      	b.n	8012ad4 <HAL_I2C_Master_Receive+0x440>
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	2201      	movs	r2, #1
 80126e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	f003 0301 	and.w	r3, r3, #1
 80126f6:	2b01      	cmp	r3, #1
 80126f8:	d007      	beq.n	801270a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	681a      	ldr	r2, [r3, #0]
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	f042 0201 	orr.w	r2, r2, #1
 8012708:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	681a      	ldr	r2, [r3, #0]
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012718:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	2222      	movs	r2, #34	; 0x22
 801271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	2210      	movs	r2, #16
 8012726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	2200      	movs	r2, #0
 801272e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	687a      	ldr	r2, [r7, #4]
 8012734:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	893a      	ldrh	r2, [r7, #8]
 801273a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012740:	b29a      	uxth	r2, r3
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	4a5c      	ldr	r2, [pc, #368]	; (80128bc <HAL_I2C_Master_Receive+0x228>)
 801274a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 801274c:	8979      	ldrh	r1, [r7, #10]
 801274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012752:	68f8      	ldr	r0, [r7, #12]
 8012754:	f000 fa60 	bl	8012c18 <I2C_MasterRequestRead>
 8012758:	4603      	mov	r3, r0
 801275a:	2b00      	cmp	r3, #0
 801275c:	d001      	beq.n	8012762 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 801275e:	2301      	movs	r3, #1
 8012760:	e1b8      	b.n	8012ad4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012766:	2b00      	cmp	r3, #0
 8012768:	d113      	bne.n	8012792 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801276a:	2300      	movs	r3, #0
 801276c:	623b      	str	r3, [r7, #32]
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	695b      	ldr	r3, [r3, #20]
 8012774:	623b      	str	r3, [r7, #32]
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	699b      	ldr	r3, [r3, #24]
 801277c:	623b      	str	r3, [r7, #32]
 801277e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	681a      	ldr	r2, [r3, #0]
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801278e:	601a      	str	r2, [r3, #0]
 8012790:	e18c      	b.n	8012aac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012796:	2b01      	cmp	r3, #1
 8012798:	d11b      	bne.n	80127d2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	681a      	ldr	r2, [r3, #0]
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80127a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80127aa:	2300      	movs	r3, #0
 80127ac:	61fb      	str	r3, [r7, #28]
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	695b      	ldr	r3, [r3, #20]
 80127b4:	61fb      	str	r3, [r7, #28]
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	699b      	ldr	r3, [r3, #24]
 80127bc:	61fb      	str	r3, [r7, #28]
 80127be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	681a      	ldr	r2, [r3, #0]
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80127ce:	601a      	str	r2, [r3, #0]
 80127d0:	e16c      	b.n	8012aac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127d6:	2b02      	cmp	r3, #2
 80127d8:	d11b      	bne.n	8012812 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	681a      	ldr	r2, [r3, #0]
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80127e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	681a      	ldr	r2, [r3, #0]
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80127f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80127fa:	2300      	movs	r3, #0
 80127fc:	61bb      	str	r3, [r7, #24]
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	695b      	ldr	r3, [r3, #20]
 8012804:	61bb      	str	r3, [r7, #24]
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	699b      	ldr	r3, [r3, #24]
 801280c:	61bb      	str	r3, [r7, #24]
 801280e:	69bb      	ldr	r3, [r7, #24]
 8012810:	e14c      	b.n	8012aac <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	681a      	ldr	r2, [r3, #0]
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012820:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012822:	2300      	movs	r3, #0
 8012824:	617b      	str	r3, [r7, #20]
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	695b      	ldr	r3, [r3, #20]
 801282c:	617b      	str	r3, [r7, #20]
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	699b      	ldr	r3, [r3, #24]
 8012834:	617b      	str	r3, [r7, #20]
 8012836:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8012838:	e138      	b.n	8012aac <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801283e:	2b03      	cmp	r3, #3
 8012840:	f200 80f1 	bhi.w	8012a26 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012848:	2b01      	cmp	r3, #1
 801284a:	d123      	bne.n	8012894 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801284c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801284e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012850:	68f8      	ldr	r0, [r7, #12]
 8012852:	f000 fc07 	bl	8013064 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012856:	4603      	mov	r3, r0
 8012858:	2b00      	cmp	r3, #0
 801285a:	d001      	beq.n	8012860 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 801285c:	2301      	movs	r3, #1
 801285e:	e139      	b.n	8012ad4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	691a      	ldr	r2, [r3, #16]
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801286a:	b2d2      	uxtb	r2, r2
 801286c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012872:	1c5a      	adds	r2, r3, #1
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801287c:	3b01      	subs	r3, #1
 801287e:	b29a      	uxth	r2, r3
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012888:	b29b      	uxth	r3, r3
 801288a:	3b01      	subs	r3, #1
 801288c:	b29a      	uxth	r2, r3
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012892:	e10b      	b.n	8012aac <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012898:	2b02      	cmp	r3, #2
 801289a:	d14e      	bne.n	801293a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801289e:	9300      	str	r3, [sp, #0]
 80128a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128a2:	2200      	movs	r2, #0
 80128a4:	4906      	ldr	r1, [pc, #24]	; (80128c0 <HAL_I2C_Master_Receive+0x22c>)
 80128a6:	68f8      	ldr	r0, [r7, #12]
 80128a8:	f000 fa84 	bl	8012db4 <I2C_WaitOnFlagUntilTimeout>
 80128ac:	4603      	mov	r3, r0
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d008      	beq.n	80128c4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80128b2:	2301      	movs	r3, #1
 80128b4:	e10e      	b.n	8012ad4 <HAL_I2C_Master_Receive+0x440>
 80128b6:	bf00      	nop
 80128b8:	00100002 	.word	0x00100002
 80128bc:	ffff0000 	.word	0xffff0000
 80128c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	681a      	ldr	r2, [r3, #0]
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80128d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	691a      	ldr	r2, [r3, #16]
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128de:	b2d2      	uxtb	r2, r2
 80128e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128e6:	1c5a      	adds	r2, r3, #1
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80128f0:	3b01      	subs	r3, #1
 80128f2:	b29a      	uxth	r2, r3
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	3b01      	subs	r3, #1
 8012900:	b29a      	uxth	r2, r3
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	691a      	ldr	r2, [r3, #16]
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012910:	b2d2      	uxtb	r2, r2
 8012912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012918:	1c5a      	adds	r2, r3, #1
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012922:	3b01      	subs	r3, #1
 8012924:	b29a      	uxth	r2, r3
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801292e:	b29b      	uxth	r3, r3
 8012930:	3b01      	subs	r3, #1
 8012932:	b29a      	uxth	r2, r3
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012938:	e0b8      	b.n	8012aac <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293c:	9300      	str	r3, [sp, #0]
 801293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012940:	2200      	movs	r2, #0
 8012942:	4966      	ldr	r1, [pc, #408]	; (8012adc <HAL_I2C_Master_Receive+0x448>)
 8012944:	68f8      	ldr	r0, [r7, #12]
 8012946:	f000 fa35 	bl	8012db4 <I2C_WaitOnFlagUntilTimeout>
 801294a:	4603      	mov	r3, r0
 801294c:	2b00      	cmp	r3, #0
 801294e:	d001      	beq.n	8012954 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8012950:	2301      	movs	r3, #1
 8012952:	e0bf      	b.n	8012ad4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	681a      	ldr	r2, [r3, #0]
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	691a      	ldr	r2, [r3, #16]
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801296e:	b2d2      	uxtb	r2, r2
 8012970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012976:	1c5a      	adds	r2, r3, #1
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012980:	3b01      	subs	r3, #1
 8012982:	b29a      	uxth	r2, r3
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801298c:	b29b      	uxth	r3, r3
 801298e:	3b01      	subs	r3, #1
 8012990:	b29a      	uxth	r2, r3
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012998:	9300      	str	r3, [sp, #0]
 801299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801299c:	2200      	movs	r2, #0
 801299e:	494f      	ldr	r1, [pc, #316]	; (8012adc <HAL_I2C_Master_Receive+0x448>)
 80129a0:	68f8      	ldr	r0, [r7, #12]
 80129a2:	f000 fa07 	bl	8012db4 <I2C_WaitOnFlagUntilTimeout>
 80129a6:	4603      	mov	r3, r0
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d001      	beq.n	80129b0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80129ac:	2301      	movs	r3, #1
 80129ae:	e091      	b.n	8012ad4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	681a      	ldr	r2, [r3, #0]
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80129be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	691a      	ldr	r2, [r3, #16]
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129ca:	b2d2      	uxtb	r2, r2
 80129cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129d2:	1c5a      	adds	r2, r3, #1
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80129dc:	3b01      	subs	r3, #1
 80129de:	b29a      	uxth	r2, r3
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80129e8:	b29b      	uxth	r3, r3
 80129ea:	3b01      	subs	r3, #1
 80129ec:	b29a      	uxth	r2, r3
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	691a      	ldr	r2, [r3, #16]
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129fc:	b2d2      	uxtb	r2, r2
 80129fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a04:	1c5a      	adds	r2, r3, #1
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a0e:	3b01      	subs	r3, #1
 8012a10:	b29a      	uxth	r2, r3
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012a1a:	b29b      	uxth	r3, r3
 8012a1c:	3b01      	subs	r3, #1
 8012a1e:	b29a      	uxth	r2, r3
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012a24:	e042      	b.n	8012aac <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012a2a:	68f8      	ldr	r0, [r7, #12]
 8012a2c:	f000 fb1a 	bl	8013064 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012a30:	4603      	mov	r3, r0
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d001      	beq.n	8012a3a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8012a36:	2301      	movs	r3, #1
 8012a38:	e04c      	b.n	8012ad4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	691a      	ldr	r2, [r3, #16]
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a44:	b2d2      	uxtb	r2, r2
 8012a46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a4c:	1c5a      	adds	r2, r3, #1
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a56:	3b01      	subs	r3, #1
 8012a58:	b29a      	uxth	r2, r3
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012a62:	b29b      	uxth	r3, r3
 8012a64:	3b01      	subs	r3, #1
 8012a66:	b29a      	uxth	r2, r3
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	695b      	ldr	r3, [r3, #20]
 8012a72:	f003 0304 	and.w	r3, r3, #4
 8012a76:	2b04      	cmp	r3, #4
 8012a78:	d118      	bne.n	8012aac <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	691a      	ldr	r2, [r3, #16]
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a84:	b2d2      	uxtb	r2, r2
 8012a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a8c:	1c5a      	adds	r2, r3, #1
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a96:	3b01      	subs	r3, #1
 8012a98:	b29a      	uxth	r2, r3
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012aa2:	b29b      	uxth	r3, r3
 8012aa4:	3b01      	subs	r3, #1
 8012aa6:	b29a      	uxth	r2, r3
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	f47f aec2 	bne.w	801283a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	2220      	movs	r2, #32
 8012aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	2200      	movs	r2, #0
 8012aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	e000      	b.n	8012ad4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8012ad2:	2302      	movs	r3, #2
  }
}
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	3728      	adds	r7, #40	; 0x28
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}
 8012adc:	00010004 	.word	0x00010004

08012ae0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8012ae0:	b480      	push	{r7}
 8012ae2:	b083      	sub	sp, #12
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012aee:	b2db      	uxtb	r3, r3
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	370c      	adds	r7, #12
 8012af4:	46bd      	mov	sp, r7
 8012af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afa:	4770      	bx	lr

08012afc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8012afc:	b480      	push	{r7}
 8012afe:	b083      	sub	sp, #12
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8012b08:	4618      	mov	r0, r3
 8012b0a:	370c      	adds	r7, #12
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b12:	4770      	bx	lr

08012b14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b088      	sub	sp, #32
 8012b18:	af02      	add	r7, sp, #8
 8012b1a:	60f8      	str	r0, [r7, #12]
 8012b1c:	607a      	str	r2, [r7, #4]
 8012b1e:	603b      	str	r3, [r7, #0]
 8012b20:	460b      	mov	r3, r1
 8012b22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	2b08      	cmp	r3, #8
 8012b2e:	d006      	beq.n	8012b3e <I2C_MasterRequestWrite+0x2a>
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	2b01      	cmp	r3, #1
 8012b34:	d003      	beq.n	8012b3e <I2C_MasterRequestWrite+0x2a>
 8012b36:	697b      	ldr	r3, [r7, #20]
 8012b38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012b3c:	d108      	bne.n	8012b50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	681a      	ldr	r2, [r3, #0]
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012b4c:	601a      	str	r2, [r3, #0]
 8012b4e:	e00b      	b.n	8012b68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b54:	2b12      	cmp	r3, #18
 8012b56:	d107      	bne.n	8012b68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	681a      	ldr	r2, [r3, #0]
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012b66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012b68:	683b      	ldr	r3, [r7, #0]
 8012b6a:	9300      	str	r3, [sp, #0]
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2200      	movs	r2, #0
 8012b70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012b74:	68f8      	ldr	r0, [r7, #12]
 8012b76:	f000 f91d 	bl	8012db4 <I2C_WaitOnFlagUntilTimeout>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d00d      	beq.n	8012b9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b8e:	d103      	bne.n	8012b98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8012b98:	2303      	movs	r3, #3
 8012b9a:	e035      	b.n	8012c08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	691b      	ldr	r3, [r3, #16]
 8012ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012ba4:	d108      	bne.n	8012bb8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8012ba6:	897b      	ldrh	r3, [r7, #10]
 8012ba8:	b2db      	uxtb	r3, r3
 8012baa:	461a      	mov	r2, r3
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8012bb4:	611a      	str	r2, [r3, #16]
 8012bb6:	e01b      	b.n	8012bf0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8012bb8:	897b      	ldrh	r3, [r7, #10]
 8012bba:	11db      	asrs	r3, r3, #7
 8012bbc:	b2db      	uxtb	r3, r3
 8012bbe:	f003 0306 	and.w	r3, r3, #6
 8012bc2:	b2db      	uxtb	r3, r3
 8012bc4:	f063 030f 	orn	r3, r3, #15
 8012bc8:	b2da      	uxtb	r2, r3
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	687a      	ldr	r2, [r7, #4]
 8012bd4:	490e      	ldr	r1, [pc, #56]	; (8012c10 <I2C_MasterRequestWrite+0xfc>)
 8012bd6:	68f8      	ldr	r0, [r7, #12]
 8012bd8:	f000 f943 	bl	8012e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d001      	beq.n	8012be6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8012be2:	2301      	movs	r3, #1
 8012be4:	e010      	b.n	8012c08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8012be6:	897b      	ldrh	r3, [r7, #10]
 8012be8:	b2da      	uxtb	r2, r3
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	687a      	ldr	r2, [r7, #4]
 8012bf4:	4907      	ldr	r1, [pc, #28]	; (8012c14 <I2C_MasterRequestWrite+0x100>)
 8012bf6:	68f8      	ldr	r0, [r7, #12]
 8012bf8:	f000 f933 	bl	8012e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d001      	beq.n	8012c06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8012c02:	2301      	movs	r3, #1
 8012c04:	e000      	b.n	8012c08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8012c06:	2300      	movs	r3, #0
}
 8012c08:	4618      	mov	r0, r3
 8012c0a:	3718      	adds	r7, #24
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	bd80      	pop	{r7, pc}
 8012c10:	00010008 	.word	0x00010008
 8012c14:	00010002 	.word	0x00010002

08012c18 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b088      	sub	sp, #32
 8012c1c:	af02      	add	r7, sp, #8
 8012c1e:	60f8      	str	r0, [r7, #12]
 8012c20:	607a      	str	r2, [r7, #4]
 8012c22:	603b      	str	r3, [r7, #0]
 8012c24:	460b      	mov	r3, r1
 8012c26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c2c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	681a      	ldr	r2, [r3, #0]
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012c3c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8012c3e:	697b      	ldr	r3, [r7, #20]
 8012c40:	2b08      	cmp	r3, #8
 8012c42:	d006      	beq.n	8012c52 <I2C_MasterRequestRead+0x3a>
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	2b01      	cmp	r3, #1
 8012c48:	d003      	beq.n	8012c52 <I2C_MasterRequestRead+0x3a>
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012c50:	d108      	bne.n	8012c64 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	681a      	ldr	r2, [r3, #0]
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012c60:	601a      	str	r2, [r3, #0]
 8012c62:	e00b      	b.n	8012c7c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c68:	2b11      	cmp	r3, #17
 8012c6a:	d107      	bne.n	8012c7c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	681a      	ldr	r2, [r3, #0]
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012c7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	9300      	str	r3, [sp, #0]
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2200      	movs	r2, #0
 8012c84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012c88:	68f8      	ldr	r0, [r7, #12]
 8012c8a:	f000 f893 	bl	8012db4 <I2C_WaitOnFlagUntilTimeout>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d00d      	beq.n	8012cb0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ca2:	d103      	bne.n	8012cac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012caa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8012cac:	2303      	movs	r3, #3
 8012cae:	e079      	b.n	8012da4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	691b      	ldr	r3, [r3, #16]
 8012cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012cb8:	d108      	bne.n	8012ccc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8012cba:	897b      	ldrh	r3, [r7, #10]
 8012cbc:	b2db      	uxtb	r3, r3
 8012cbe:	f043 0301 	orr.w	r3, r3, #1
 8012cc2:	b2da      	uxtb	r2, r3
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	611a      	str	r2, [r3, #16]
 8012cca:	e05f      	b.n	8012d8c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8012ccc:	897b      	ldrh	r3, [r7, #10]
 8012cce:	11db      	asrs	r3, r3, #7
 8012cd0:	b2db      	uxtb	r3, r3
 8012cd2:	f003 0306 	and.w	r3, r3, #6
 8012cd6:	b2db      	uxtb	r3, r3
 8012cd8:	f063 030f 	orn	r3, r3, #15
 8012cdc:	b2da      	uxtb	r2, r3
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	687a      	ldr	r2, [r7, #4]
 8012ce8:	4930      	ldr	r1, [pc, #192]	; (8012dac <I2C_MasterRequestRead+0x194>)
 8012cea:	68f8      	ldr	r0, [r7, #12]
 8012cec:	f000 f8b9 	bl	8012e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d001      	beq.n	8012cfa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8012cf6:	2301      	movs	r3, #1
 8012cf8:	e054      	b.n	8012da4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8012cfa:	897b      	ldrh	r3, [r7, #10]
 8012cfc:	b2da      	uxtb	r2, r3
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012d04:	683b      	ldr	r3, [r7, #0]
 8012d06:	687a      	ldr	r2, [r7, #4]
 8012d08:	4929      	ldr	r1, [pc, #164]	; (8012db0 <I2C_MasterRequestRead+0x198>)
 8012d0a:	68f8      	ldr	r0, [r7, #12]
 8012d0c:	f000 f8a9 	bl	8012e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012d10:	4603      	mov	r3, r0
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d001      	beq.n	8012d1a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8012d16:	2301      	movs	r3, #1
 8012d18:	e044      	b.n	8012da4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	613b      	str	r3, [r7, #16]
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	695b      	ldr	r3, [r3, #20]
 8012d24:	613b      	str	r3, [r7, #16]
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	699b      	ldr	r3, [r3, #24]
 8012d2c:	613b      	str	r3, [r7, #16]
 8012d2e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	681a      	ldr	r2, [r3, #0]
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012d3e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	9300      	str	r3, [sp, #0]
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2200      	movs	r2, #0
 8012d48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012d4c:	68f8      	ldr	r0, [r7, #12]
 8012d4e:	f000 f831 	bl	8012db4 <I2C_WaitOnFlagUntilTimeout>
 8012d52:	4603      	mov	r3, r0
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d00d      	beq.n	8012d74 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d66:	d103      	bne.n	8012d70 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012d6e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8012d70:	2303      	movs	r3, #3
 8012d72:	e017      	b.n	8012da4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8012d74:	897b      	ldrh	r3, [r7, #10]
 8012d76:	11db      	asrs	r3, r3, #7
 8012d78:	b2db      	uxtb	r3, r3
 8012d7a:	f003 0306 	and.w	r3, r3, #6
 8012d7e:	b2db      	uxtb	r3, r3
 8012d80:	f063 030e 	orn	r3, r3, #14
 8012d84:	b2da      	uxtb	r2, r3
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	4907      	ldr	r1, [pc, #28]	; (8012db0 <I2C_MasterRequestRead+0x198>)
 8012d92:	68f8      	ldr	r0, [r7, #12]
 8012d94:	f000 f865 	bl	8012e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d001      	beq.n	8012da2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8012d9e:	2301      	movs	r3, #1
 8012da0:	e000      	b.n	8012da4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8012da2:	2300      	movs	r3, #0
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	3718      	adds	r7, #24
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}
 8012dac:	00010008 	.word	0x00010008
 8012db0:	00010002 	.word	0x00010002

08012db4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b084      	sub	sp, #16
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	60f8      	str	r0, [r7, #12]
 8012dbc:	60b9      	str	r1, [r7, #8]
 8012dbe:	603b      	str	r3, [r7, #0]
 8012dc0:	4613      	mov	r3, r2
 8012dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012dc4:	e025      	b.n	8012e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dcc:	d021      	beq.n	8012e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012dce:	f7fe fe2b 	bl	8011a28 <HAL_GetTick>
 8012dd2:	4602      	mov	r2, r0
 8012dd4:	69bb      	ldr	r3, [r7, #24]
 8012dd6:	1ad3      	subs	r3, r2, r3
 8012dd8:	683a      	ldr	r2, [r7, #0]
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	d302      	bcc.n	8012de4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d116      	bne.n	8012e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	2200      	movs	r2, #0
 8012de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	2220      	movs	r2, #32
 8012dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	2200      	movs	r2, #0
 8012df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dfe:	f043 0220 	orr.w	r2, r3, #32
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	2200      	movs	r2, #0
 8012e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8012e0e:	2301      	movs	r3, #1
 8012e10:	e023      	b.n	8012e5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	0c1b      	lsrs	r3, r3, #16
 8012e16:	b2db      	uxtb	r3, r3
 8012e18:	2b01      	cmp	r3, #1
 8012e1a:	d10d      	bne.n	8012e38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	695b      	ldr	r3, [r3, #20]
 8012e22:	43da      	mvns	r2, r3
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	4013      	ands	r3, r2
 8012e28:	b29b      	uxth	r3, r3
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	bf0c      	ite	eq
 8012e2e:	2301      	moveq	r3, #1
 8012e30:	2300      	movne	r3, #0
 8012e32:	b2db      	uxtb	r3, r3
 8012e34:	461a      	mov	r2, r3
 8012e36:	e00c      	b.n	8012e52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	699b      	ldr	r3, [r3, #24]
 8012e3e:	43da      	mvns	r2, r3
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	4013      	ands	r3, r2
 8012e44:	b29b      	uxth	r3, r3
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	bf0c      	ite	eq
 8012e4a:	2301      	moveq	r3, #1
 8012e4c:	2300      	movne	r3, #0
 8012e4e:	b2db      	uxtb	r3, r3
 8012e50:	461a      	mov	r2, r3
 8012e52:	79fb      	ldrb	r3, [r7, #7]
 8012e54:	429a      	cmp	r2, r3
 8012e56:	d0b6      	beq.n	8012dc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012e58:	2300      	movs	r3, #0
}
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	3710      	adds	r7, #16
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd80      	pop	{r7, pc}

08012e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8012e62:	b580      	push	{r7, lr}
 8012e64:	b084      	sub	sp, #16
 8012e66:	af00      	add	r7, sp, #0
 8012e68:	60f8      	str	r0, [r7, #12]
 8012e6a:	60b9      	str	r1, [r7, #8]
 8012e6c:	607a      	str	r2, [r7, #4]
 8012e6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8012e70:	e051      	b.n	8012f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	695b      	ldr	r3, [r3, #20]
 8012e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012e80:	d123      	bne.n	8012eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	681a      	ldr	r2, [r3, #0]
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012e90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8012e9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	2220      	movs	r2, #32
 8012ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	2200      	movs	r2, #0
 8012eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012eb6:	f043 0204 	orr.w	r2, r3, #4
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	e046      	b.n	8012f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ed0:	d021      	beq.n	8012f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012ed2:	f7fe fda9 	bl	8011a28 <HAL_GetTick>
 8012ed6:	4602      	mov	r2, r0
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	1ad3      	subs	r3, r2, r3
 8012edc:	687a      	ldr	r2, [r7, #4]
 8012ede:	429a      	cmp	r2, r3
 8012ee0:	d302      	bcc.n	8012ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d116      	bne.n	8012f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	2200      	movs	r2, #0
 8012eec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	2220      	movs	r2, #32
 8012ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	2200      	movs	r2, #0
 8012efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f02:	f043 0220 	orr.w	r2, r3, #32
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8012f12:	2301      	movs	r3, #1
 8012f14:	e020      	b.n	8012f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8012f16:	68bb      	ldr	r3, [r7, #8]
 8012f18:	0c1b      	lsrs	r3, r3, #16
 8012f1a:	b2db      	uxtb	r3, r3
 8012f1c:	2b01      	cmp	r3, #1
 8012f1e:	d10c      	bne.n	8012f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	695b      	ldr	r3, [r3, #20]
 8012f26:	43da      	mvns	r2, r3
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	4013      	ands	r3, r2
 8012f2c:	b29b      	uxth	r3, r3
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	bf14      	ite	ne
 8012f32:	2301      	movne	r3, #1
 8012f34:	2300      	moveq	r3, #0
 8012f36:	b2db      	uxtb	r3, r3
 8012f38:	e00b      	b.n	8012f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	699b      	ldr	r3, [r3, #24]
 8012f40:	43da      	mvns	r2, r3
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	4013      	ands	r3, r2
 8012f46:	b29b      	uxth	r3, r3
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	bf14      	ite	ne
 8012f4c:	2301      	movne	r3, #1
 8012f4e:	2300      	moveq	r3, #0
 8012f50:	b2db      	uxtb	r3, r3
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d18d      	bne.n	8012e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8012f56:	2300      	movs	r3, #0
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3710      	adds	r7, #16
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}

08012f60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b084      	sub	sp, #16
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	60f8      	str	r0, [r7, #12]
 8012f68:	60b9      	str	r1, [r7, #8]
 8012f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012f6c:	e02d      	b.n	8012fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8012f6e:	68f8      	ldr	r0, [r7, #12]
 8012f70:	f000 f8ce 	bl	8013110 <I2C_IsAcknowledgeFailed>
 8012f74:	4603      	mov	r3, r0
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d001      	beq.n	8012f7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	e02d      	b.n	8012fda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f84:	d021      	beq.n	8012fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012f86:	f7fe fd4f 	bl	8011a28 <HAL_GetTick>
 8012f8a:	4602      	mov	r2, r0
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	1ad3      	subs	r3, r2, r3
 8012f90:	68ba      	ldr	r2, [r7, #8]
 8012f92:	429a      	cmp	r2, r3
 8012f94:	d302      	bcc.n	8012f9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d116      	bne.n	8012fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	2220      	movs	r2, #32
 8012fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	2200      	movs	r2, #0
 8012fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fb6:	f043 0220 	orr.w	r2, r3, #32
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	e007      	b.n	8012fda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	695b      	ldr	r3, [r3, #20]
 8012fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012fd4:	2b80      	cmp	r3, #128	; 0x80
 8012fd6:	d1ca      	bne.n	8012f6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012fd8:	2300      	movs	r3, #0
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3710      	adds	r7, #16
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}

08012fe2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012fe2:	b580      	push	{r7, lr}
 8012fe4:	b084      	sub	sp, #16
 8012fe6:	af00      	add	r7, sp, #0
 8012fe8:	60f8      	str	r0, [r7, #12]
 8012fea:	60b9      	str	r1, [r7, #8]
 8012fec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8012fee:	e02d      	b.n	801304c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8012ff0:	68f8      	ldr	r0, [r7, #12]
 8012ff2:	f000 f88d 	bl	8013110 <I2C_IsAcknowledgeFailed>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d001      	beq.n	8013000 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	e02d      	b.n	801305c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013000:	68bb      	ldr	r3, [r7, #8]
 8013002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013006:	d021      	beq.n	801304c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013008:	f7fe fd0e 	bl	8011a28 <HAL_GetTick>
 801300c:	4602      	mov	r2, r0
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	1ad3      	subs	r3, r2, r3
 8013012:	68ba      	ldr	r2, [r7, #8]
 8013014:	429a      	cmp	r2, r3
 8013016:	d302      	bcc.n	801301e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8013018:	68bb      	ldr	r3, [r7, #8]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d116      	bne.n	801304c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	2200      	movs	r2, #0
 8013022:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	2220      	movs	r2, #32
 8013028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	2200      	movs	r2, #0
 8013030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013038:	f043 0220 	orr.w	r2, r3, #32
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	2200      	movs	r2, #0
 8013044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013048:	2301      	movs	r3, #1
 801304a:	e007      	b.n	801305c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	695b      	ldr	r3, [r3, #20]
 8013052:	f003 0304 	and.w	r3, r3, #4
 8013056:	2b04      	cmp	r3, #4
 8013058:	d1ca      	bne.n	8012ff0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801305a:	2300      	movs	r3, #0
}
 801305c:	4618      	mov	r0, r3
 801305e:	3710      	adds	r7, #16
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}

08013064 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b084      	sub	sp, #16
 8013068:	af00      	add	r7, sp, #0
 801306a:	60f8      	str	r0, [r7, #12]
 801306c:	60b9      	str	r1, [r7, #8]
 801306e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8013070:	e042      	b.n	80130f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	695b      	ldr	r3, [r3, #20]
 8013078:	f003 0310 	and.w	r3, r3, #16
 801307c:	2b10      	cmp	r3, #16
 801307e:	d119      	bne.n	80130b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	f06f 0210 	mvn.w	r2, #16
 8013088:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	2200      	movs	r2, #0
 801308e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	2220      	movs	r2, #32
 8013094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	2200      	movs	r2, #0
 801309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	2200      	movs	r2, #0
 80130ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80130b0:	2301      	movs	r3, #1
 80130b2:	e029      	b.n	8013108 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80130b4:	f7fe fcb8 	bl	8011a28 <HAL_GetTick>
 80130b8:	4602      	mov	r2, r0
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	1ad3      	subs	r3, r2, r3
 80130be:	68ba      	ldr	r2, [r7, #8]
 80130c0:	429a      	cmp	r2, r3
 80130c2:	d302      	bcc.n	80130ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d116      	bne.n	80130f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	2200      	movs	r2, #0
 80130ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	2220      	movs	r2, #32
 80130d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	2200      	movs	r2, #0
 80130dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130e4:	f043 0220 	orr.w	r2, r3, #32
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	2200      	movs	r2, #0
 80130f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80130f4:	2301      	movs	r3, #1
 80130f6:	e007      	b.n	8013108 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	695b      	ldr	r3, [r3, #20]
 80130fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013102:	2b40      	cmp	r3, #64	; 0x40
 8013104:	d1b5      	bne.n	8013072 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8013106:	2300      	movs	r3, #0
}
 8013108:	4618      	mov	r0, r3
 801310a:	3710      	adds	r7, #16
 801310c:	46bd      	mov	sp, r7
 801310e:	bd80      	pop	{r7, pc}

08013110 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8013110:	b480      	push	{r7}
 8013112:	b083      	sub	sp, #12
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	695b      	ldr	r3, [r3, #20]
 801311e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013126:	d11b      	bne.n	8013160 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013130:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2200      	movs	r2, #0
 8013136:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2220      	movs	r2, #32
 801313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2200      	movs	r2, #0
 8013144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801314c:	f043 0204 	orr.w	r2, r3, #4
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2200      	movs	r2, #0
 8013158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801315c:	2301      	movs	r3, #1
 801315e:	e000      	b.n	8013162 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8013160:	2300      	movs	r3, #0
}
 8013162:	4618      	mov	r0, r3
 8013164:	370c      	adds	r7, #12
 8013166:	46bd      	mov	sp, r7
 8013168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316c:	4770      	bx	lr
	...

08013170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b086      	sub	sp, #24
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d101      	bne.n	8013182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801317e:	2301      	movs	r3, #1
 8013180:	e264      	b.n	801364c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	f003 0301 	and.w	r3, r3, #1
 801318a:	2b00      	cmp	r3, #0
 801318c:	d075      	beq.n	801327a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801318e:	4ba3      	ldr	r3, [pc, #652]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 8013190:	689b      	ldr	r3, [r3, #8]
 8013192:	f003 030c 	and.w	r3, r3, #12
 8013196:	2b04      	cmp	r3, #4
 8013198:	d00c      	beq.n	80131b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801319a:	4ba0      	ldr	r3, [pc, #640]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 801319c:	689b      	ldr	r3, [r3, #8]
 801319e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80131a2:	2b08      	cmp	r3, #8
 80131a4:	d112      	bne.n	80131cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80131a6:	4b9d      	ldr	r3, [pc, #628]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 80131a8:	685b      	ldr	r3, [r3, #4]
 80131aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80131ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80131b2:	d10b      	bne.n	80131cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80131b4:	4b99      	ldr	r3, [pc, #612]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d05b      	beq.n	8013278 <HAL_RCC_OscConfig+0x108>
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	685b      	ldr	r3, [r3, #4]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d157      	bne.n	8013278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80131c8:	2301      	movs	r3, #1
 80131ca:	e23f      	b.n	801364c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	685b      	ldr	r3, [r3, #4]
 80131d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80131d4:	d106      	bne.n	80131e4 <HAL_RCC_OscConfig+0x74>
 80131d6:	4b91      	ldr	r3, [pc, #580]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	4a90      	ldr	r2, [pc, #576]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 80131dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80131e0:	6013      	str	r3, [r2, #0]
 80131e2:	e01d      	b.n	8013220 <HAL_RCC_OscConfig+0xb0>
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	685b      	ldr	r3, [r3, #4]
 80131e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80131ec:	d10c      	bne.n	8013208 <HAL_RCC_OscConfig+0x98>
 80131ee:	4b8b      	ldr	r3, [pc, #556]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	4a8a      	ldr	r2, [pc, #552]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 80131f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80131f8:	6013      	str	r3, [r2, #0]
 80131fa:	4b88      	ldr	r3, [pc, #544]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	4a87      	ldr	r2, [pc, #540]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 8013200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013204:	6013      	str	r3, [r2, #0]
 8013206:	e00b      	b.n	8013220 <HAL_RCC_OscConfig+0xb0>
 8013208:	4b84      	ldr	r3, [pc, #528]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	4a83      	ldr	r2, [pc, #524]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 801320e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013212:	6013      	str	r3, [r2, #0]
 8013214:	4b81      	ldr	r3, [pc, #516]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	4a80      	ldr	r2, [pc, #512]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 801321a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801321e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	685b      	ldr	r3, [r3, #4]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d013      	beq.n	8013250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013228:	f7fe fbfe 	bl	8011a28 <HAL_GetTick>
 801322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801322e:	e008      	b.n	8013242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013230:	f7fe fbfa 	bl	8011a28 <HAL_GetTick>
 8013234:	4602      	mov	r2, r0
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	1ad3      	subs	r3, r2, r3
 801323a:	2b64      	cmp	r3, #100	; 0x64
 801323c:	d901      	bls.n	8013242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801323e:	2303      	movs	r3, #3
 8013240:	e204      	b.n	801364c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013242:	4b76      	ldr	r3, [pc, #472]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801324a:	2b00      	cmp	r3, #0
 801324c:	d0f0      	beq.n	8013230 <HAL_RCC_OscConfig+0xc0>
 801324e:	e014      	b.n	801327a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013250:	f7fe fbea 	bl	8011a28 <HAL_GetTick>
 8013254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013256:	e008      	b.n	801326a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013258:	f7fe fbe6 	bl	8011a28 <HAL_GetTick>
 801325c:	4602      	mov	r2, r0
 801325e:	693b      	ldr	r3, [r7, #16]
 8013260:	1ad3      	subs	r3, r2, r3
 8013262:	2b64      	cmp	r3, #100	; 0x64
 8013264:	d901      	bls.n	801326a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013266:	2303      	movs	r3, #3
 8013268:	e1f0      	b.n	801364c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801326a:	4b6c      	ldr	r3, [pc, #432]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013272:	2b00      	cmp	r3, #0
 8013274:	d1f0      	bne.n	8013258 <HAL_RCC_OscConfig+0xe8>
 8013276:	e000      	b.n	801327a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	f003 0302 	and.w	r3, r3, #2
 8013282:	2b00      	cmp	r3, #0
 8013284:	d063      	beq.n	801334e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013286:	4b65      	ldr	r3, [pc, #404]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 8013288:	689b      	ldr	r3, [r3, #8]
 801328a:	f003 030c 	and.w	r3, r3, #12
 801328e:	2b00      	cmp	r3, #0
 8013290:	d00b      	beq.n	80132aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013292:	4b62      	ldr	r3, [pc, #392]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 8013294:	689b      	ldr	r3, [r3, #8]
 8013296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801329a:	2b08      	cmp	r3, #8
 801329c:	d11c      	bne.n	80132d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801329e:	4b5f      	ldr	r3, [pc, #380]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 80132a0:	685b      	ldr	r3, [r3, #4]
 80132a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d116      	bne.n	80132d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80132aa:	4b5c      	ldr	r3, [pc, #368]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	f003 0302 	and.w	r3, r3, #2
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d005      	beq.n	80132c2 <HAL_RCC_OscConfig+0x152>
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	68db      	ldr	r3, [r3, #12]
 80132ba:	2b01      	cmp	r3, #1
 80132bc:	d001      	beq.n	80132c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80132be:	2301      	movs	r3, #1
 80132c0:	e1c4      	b.n	801364c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80132c2:	4b56      	ldr	r3, [pc, #344]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	691b      	ldr	r3, [r3, #16]
 80132ce:	00db      	lsls	r3, r3, #3
 80132d0:	4952      	ldr	r1, [pc, #328]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 80132d2:	4313      	orrs	r3, r2
 80132d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80132d6:	e03a      	b.n	801334e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	68db      	ldr	r3, [r3, #12]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d020      	beq.n	8013322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80132e0:	4b4f      	ldr	r3, [pc, #316]	; (8013420 <HAL_RCC_OscConfig+0x2b0>)
 80132e2:	2201      	movs	r2, #1
 80132e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80132e6:	f7fe fb9f 	bl	8011a28 <HAL_GetTick>
 80132ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80132ec:	e008      	b.n	8013300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80132ee:	f7fe fb9b 	bl	8011a28 <HAL_GetTick>
 80132f2:	4602      	mov	r2, r0
 80132f4:	693b      	ldr	r3, [r7, #16]
 80132f6:	1ad3      	subs	r3, r2, r3
 80132f8:	2b02      	cmp	r3, #2
 80132fa:	d901      	bls.n	8013300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80132fc:	2303      	movs	r3, #3
 80132fe:	e1a5      	b.n	801364c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013300:	4b46      	ldr	r3, [pc, #280]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	f003 0302 	and.w	r3, r3, #2
 8013308:	2b00      	cmp	r3, #0
 801330a:	d0f0      	beq.n	80132ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801330c:	4b43      	ldr	r3, [pc, #268]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	691b      	ldr	r3, [r3, #16]
 8013318:	00db      	lsls	r3, r3, #3
 801331a:	4940      	ldr	r1, [pc, #256]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 801331c:	4313      	orrs	r3, r2
 801331e:	600b      	str	r3, [r1, #0]
 8013320:	e015      	b.n	801334e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013322:	4b3f      	ldr	r3, [pc, #252]	; (8013420 <HAL_RCC_OscConfig+0x2b0>)
 8013324:	2200      	movs	r2, #0
 8013326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013328:	f7fe fb7e 	bl	8011a28 <HAL_GetTick>
 801332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801332e:	e008      	b.n	8013342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013330:	f7fe fb7a 	bl	8011a28 <HAL_GetTick>
 8013334:	4602      	mov	r2, r0
 8013336:	693b      	ldr	r3, [r7, #16]
 8013338:	1ad3      	subs	r3, r2, r3
 801333a:	2b02      	cmp	r3, #2
 801333c:	d901      	bls.n	8013342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801333e:	2303      	movs	r3, #3
 8013340:	e184      	b.n	801364c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013342:	4b36      	ldr	r3, [pc, #216]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	f003 0302 	and.w	r3, r3, #2
 801334a:	2b00      	cmp	r3, #0
 801334c:	d1f0      	bne.n	8013330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	f003 0308 	and.w	r3, r3, #8
 8013356:	2b00      	cmp	r3, #0
 8013358:	d030      	beq.n	80133bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	695b      	ldr	r3, [r3, #20]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d016      	beq.n	8013390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013362:	4b30      	ldr	r3, [pc, #192]	; (8013424 <HAL_RCC_OscConfig+0x2b4>)
 8013364:	2201      	movs	r2, #1
 8013366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013368:	f7fe fb5e 	bl	8011a28 <HAL_GetTick>
 801336c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801336e:	e008      	b.n	8013382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013370:	f7fe fb5a 	bl	8011a28 <HAL_GetTick>
 8013374:	4602      	mov	r2, r0
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	1ad3      	subs	r3, r2, r3
 801337a:	2b02      	cmp	r3, #2
 801337c:	d901      	bls.n	8013382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801337e:	2303      	movs	r3, #3
 8013380:	e164      	b.n	801364c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013382:	4b26      	ldr	r3, [pc, #152]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 8013384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013386:	f003 0302 	and.w	r3, r3, #2
 801338a:	2b00      	cmp	r3, #0
 801338c:	d0f0      	beq.n	8013370 <HAL_RCC_OscConfig+0x200>
 801338e:	e015      	b.n	80133bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013390:	4b24      	ldr	r3, [pc, #144]	; (8013424 <HAL_RCC_OscConfig+0x2b4>)
 8013392:	2200      	movs	r2, #0
 8013394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013396:	f7fe fb47 	bl	8011a28 <HAL_GetTick>
 801339a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801339c:	e008      	b.n	80133b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801339e:	f7fe fb43 	bl	8011a28 <HAL_GetTick>
 80133a2:	4602      	mov	r2, r0
 80133a4:	693b      	ldr	r3, [r7, #16]
 80133a6:	1ad3      	subs	r3, r2, r3
 80133a8:	2b02      	cmp	r3, #2
 80133aa:	d901      	bls.n	80133b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80133ac:	2303      	movs	r3, #3
 80133ae:	e14d      	b.n	801364c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80133b0:	4b1a      	ldr	r3, [pc, #104]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 80133b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133b4:	f003 0302 	and.w	r3, r3, #2
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d1f0      	bne.n	801339e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	f003 0304 	and.w	r3, r3, #4
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	f000 80a0 	beq.w	801350a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80133ca:	2300      	movs	r3, #0
 80133cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80133ce:	4b13      	ldr	r3, [pc, #76]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 80133d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d10f      	bne.n	80133fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80133da:	2300      	movs	r3, #0
 80133dc:	60bb      	str	r3, [r7, #8]
 80133de:	4b0f      	ldr	r3, [pc, #60]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 80133e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133e2:	4a0e      	ldr	r2, [pc, #56]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 80133e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80133e8:	6413      	str	r3, [r2, #64]	; 0x40
 80133ea:	4b0c      	ldr	r3, [pc, #48]	; (801341c <HAL_RCC_OscConfig+0x2ac>)
 80133ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80133f2:	60bb      	str	r3, [r7, #8]
 80133f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80133f6:	2301      	movs	r3, #1
 80133f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80133fa:	4b0b      	ldr	r3, [pc, #44]	; (8013428 <HAL_RCC_OscConfig+0x2b8>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013402:	2b00      	cmp	r3, #0
 8013404:	d121      	bne.n	801344a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013406:	4b08      	ldr	r3, [pc, #32]	; (8013428 <HAL_RCC_OscConfig+0x2b8>)
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	4a07      	ldr	r2, [pc, #28]	; (8013428 <HAL_RCC_OscConfig+0x2b8>)
 801340c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013412:	f7fe fb09 	bl	8011a28 <HAL_GetTick>
 8013416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013418:	e011      	b.n	801343e <HAL_RCC_OscConfig+0x2ce>
 801341a:	bf00      	nop
 801341c:	40023800 	.word	0x40023800
 8013420:	42470000 	.word	0x42470000
 8013424:	42470e80 	.word	0x42470e80
 8013428:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801342c:	f7fe fafc 	bl	8011a28 <HAL_GetTick>
 8013430:	4602      	mov	r2, r0
 8013432:	693b      	ldr	r3, [r7, #16]
 8013434:	1ad3      	subs	r3, r2, r3
 8013436:	2b02      	cmp	r3, #2
 8013438:	d901      	bls.n	801343e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801343a:	2303      	movs	r3, #3
 801343c:	e106      	b.n	801364c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801343e:	4b85      	ldr	r3, [pc, #532]	; (8013654 <HAL_RCC_OscConfig+0x4e4>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013446:	2b00      	cmp	r3, #0
 8013448:	d0f0      	beq.n	801342c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	689b      	ldr	r3, [r3, #8]
 801344e:	2b01      	cmp	r3, #1
 8013450:	d106      	bne.n	8013460 <HAL_RCC_OscConfig+0x2f0>
 8013452:	4b81      	ldr	r3, [pc, #516]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 8013454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013456:	4a80      	ldr	r2, [pc, #512]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 8013458:	f043 0301 	orr.w	r3, r3, #1
 801345c:	6713      	str	r3, [r2, #112]	; 0x70
 801345e:	e01c      	b.n	801349a <HAL_RCC_OscConfig+0x32a>
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	689b      	ldr	r3, [r3, #8]
 8013464:	2b05      	cmp	r3, #5
 8013466:	d10c      	bne.n	8013482 <HAL_RCC_OscConfig+0x312>
 8013468:	4b7b      	ldr	r3, [pc, #492]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 801346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801346c:	4a7a      	ldr	r2, [pc, #488]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 801346e:	f043 0304 	orr.w	r3, r3, #4
 8013472:	6713      	str	r3, [r2, #112]	; 0x70
 8013474:	4b78      	ldr	r3, [pc, #480]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 8013476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013478:	4a77      	ldr	r2, [pc, #476]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 801347a:	f043 0301 	orr.w	r3, r3, #1
 801347e:	6713      	str	r3, [r2, #112]	; 0x70
 8013480:	e00b      	b.n	801349a <HAL_RCC_OscConfig+0x32a>
 8013482:	4b75      	ldr	r3, [pc, #468]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 8013484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013486:	4a74      	ldr	r2, [pc, #464]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 8013488:	f023 0301 	bic.w	r3, r3, #1
 801348c:	6713      	str	r3, [r2, #112]	; 0x70
 801348e:	4b72      	ldr	r3, [pc, #456]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 8013490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013492:	4a71      	ldr	r2, [pc, #452]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 8013494:	f023 0304 	bic.w	r3, r3, #4
 8013498:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	689b      	ldr	r3, [r3, #8]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d015      	beq.n	80134ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80134a2:	f7fe fac1 	bl	8011a28 <HAL_GetTick>
 80134a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80134a8:	e00a      	b.n	80134c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80134aa:	f7fe fabd 	bl	8011a28 <HAL_GetTick>
 80134ae:	4602      	mov	r2, r0
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	1ad3      	subs	r3, r2, r3
 80134b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80134b8:	4293      	cmp	r3, r2
 80134ba:	d901      	bls.n	80134c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80134bc:	2303      	movs	r3, #3
 80134be:	e0c5      	b.n	801364c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80134c0:	4b65      	ldr	r3, [pc, #404]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 80134c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134c4:	f003 0302 	and.w	r3, r3, #2
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d0ee      	beq.n	80134aa <HAL_RCC_OscConfig+0x33a>
 80134cc:	e014      	b.n	80134f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80134ce:	f7fe faab 	bl	8011a28 <HAL_GetTick>
 80134d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80134d4:	e00a      	b.n	80134ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80134d6:	f7fe faa7 	bl	8011a28 <HAL_GetTick>
 80134da:	4602      	mov	r2, r0
 80134dc:	693b      	ldr	r3, [r7, #16]
 80134de:	1ad3      	subs	r3, r2, r3
 80134e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80134e4:	4293      	cmp	r3, r2
 80134e6:	d901      	bls.n	80134ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80134e8:	2303      	movs	r3, #3
 80134ea:	e0af      	b.n	801364c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80134ec:	4b5a      	ldr	r3, [pc, #360]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 80134ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134f0:	f003 0302 	and.w	r3, r3, #2
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d1ee      	bne.n	80134d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80134f8:	7dfb      	ldrb	r3, [r7, #23]
 80134fa:	2b01      	cmp	r3, #1
 80134fc:	d105      	bne.n	801350a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80134fe:	4b56      	ldr	r3, [pc, #344]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 8013500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013502:	4a55      	ldr	r2, [pc, #340]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 8013504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013508:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	699b      	ldr	r3, [r3, #24]
 801350e:	2b00      	cmp	r3, #0
 8013510:	f000 809b 	beq.w	801364a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013514:	4b50      	ldr	r3, [pc, #320]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 8013516:	689b      	ldr	r3, [r3, #8]
 8013518:	f003 030c 	and.w	r3, r3, #12
 801351c:	2b08      	cmp	r3, #8
 801351e:	d05c      	beq.n	80135da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	699b      	ldr	r3, [r3, #24]
 8013524:	2b02      	cmp	r3, #2
 8013526:	d141      	bne.n	80135ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013528:	4b4c      	ldr	r3, [pc, #304]	; (801365c <HAL_RCC_OscConfig+0x4ec>)
 801352a:	2200      	movs	r2, #0
 801352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801352e:	f7fe fa7b 	bl	8011a28 <HAL_GetTick>
 8013532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013534:	e008      	b.n	8013548 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013536:	f7fe fa77 	bl	8011a28 <HAL_GetTick>
 801353a:	4602      	mov	r2, r0
 801353c:	693b      	ldr	r3, [r7, #16]
 801353e:	1ad3      	subs	r3, r2, r3
 8013540:	2b02      	cmp	r3, #2
 8013542:	d901      	bls.n	8013548 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8013544:	2303      	movs	r3, #3
 8013546:	e081      	b.n	801364c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013548:	4b43      	ldr	r3, [pc, #268]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013550:	2b00      	cmp	r3, #0
 8013552:	d1f0      	bne.n	8013536 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	69da      	ldr	r2, [r3, #28]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	6a1b      	ldr	r3, [r3, #32]
 801355c:	431a      	orrs	r2, r3
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013562:	019b      	lsls	r3, r3, #6
 8013564:	431a      	orrs	r2, r3
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801356a:	085b      	lsrs	r3, r3, #1
 801356c:	3b01      	subs	r3, #1
 801356e:	041b      	lsls	r3, r3, #16
 8013570:	431a      	orrs	r2, r3
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013576:	061b      	lsls	r3, r3, #24
 8013578:	4937      	ldr	r1, [pc, #220]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 801357a:	4313      	orrs	r3, r2
 801357c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801357e:	4b37      	ldr	r3, [pc, #220]	; (801365c <HAL_RCC_OscConfig+0x4ec>)
 8013580:	2201      	movs	r2, #1
 8013582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013584:	f7fe fa50 	bl	8011a28 <HAL_GetTick>
 8013588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801358a:	e008      	b.n	801359e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801358c:	f7fe fa4c 	bl	8011a28 <HAL_GetTick>
 8013590:	4602      	mov	r2, r0
 8013592:	693b      	ldr	r3, [r7, #16]
 8013594:	1ad3      	subs	r3, r2, r3
 8013596:	2b02      	cmp	r3, #2
 8013598:	d901      	bls.n	801359e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801359a:	2303      	movs	r3, #3
 801359c:	e056      	b.n	801364c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801359e:	4b2e      	ldr	r3, [pc, #184]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d0f0      	beq.n	801358c <HAL_RCC_OscConfig+0x41c>
 80135aa:	e04e      	b.n	801364a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80135ac:	4b2b      	ldr	r3, [pc, #172]	; (801365c <HAL_RCC_OscConfig+0x4ec>)
 80135ae:	2200      	movs	r2, #0
 80135b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80135b2:	f7fe fa39 	bl	8011a28 <HAL_GetTick>
 80135b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80135b8:	e008      	b.n	80135cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80135ba:	f7fe fa35 	bl	8011a28 <HAL_GetTick>
 80135be:	4602      	mov	r2, r0
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	1ad3      	subs	r3, r2, r3
 80135c4:	2b02      	cmp	r3, #2
 80135c6:	d901      	bls.n	80135cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80135c8:	2303      	movs	r3, #3
 80135ca:	e03f      	b.n	801364c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80135cc:	4b22      	ldr	r3, [pc, #136]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d1f0      	bne.n	80135ba <HAL_RCC_OscConfig+0x44a>
 80135d8:	e037      	b.n	801364a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	699b      	ldr	r3, [r3, #24]
 80135de:	2b01      	cmp	r3, #1
 80135e0:	d101      	bne.n	80135e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80135e2:	2301      	movs	r3, #1
 80135e4:	e032      	b.n	801364c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80135e6:	4b1c      	ldr	r3, [pc, #112]	; (8013658 <HAL_RCC_OscConfig+0x4e8>)
 80135e8:	685b      	ldr	r3, [r3, #4]
 80135ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	699b      	ldr	r3, [r3, #24]
 80135f0:	2b01      	cmp	r3, #1
 80135f2:	d028      	beq.n	8013646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80135fe:	429a      	cmp	r2, r3
 8013600:	d121      	bne.n	8013646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801360c:	429a      	cmp	r2, r3
 801360e:	d11a      	bne.n	8013646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013610:	68fa      	ldr	r2, [r7, #12]
 8013612:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013616:	4013      	ands	r3, r2
 8013618:	687a      	ldr	r2, [r7, #4]
 801361a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801361c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801361e:	4293      	cmp	r3, r2
 8013620:	d111      	bne.n	8013646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801362c:	085b      	lsrs	r3, r3, #1
 801362e:	3b01      	subs	r3, #1
 8013630:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013632:	429a      	cmp	r2, r3
 8013634:	d107      	bne.n	8013646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013640:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013642:	429a      	cmp	r2, r3
 8013644:	d001      	beq.n	801364a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8013646:	2301      	movs	r3, #1
 8013648:	e000      	b.n	801364c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 801364a:	2300      	movs	r3, #0
}
 801364c:	4618      	mov	r0, r3
 801364e:	3718      	adds	r7, #24
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}
 8013654:	40007000 	.word	0x40007000
 8013658:	40023800 	.word	0x40023800
 801365c:	42470060 	.word	0x42470060

08013660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b084      	sub	sp, #16
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
 8013668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d101      	bne.n	8013674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013670:	2301      	movs	r3, #1
 8013672:	e0cc      	b.n	801380e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013674:	4b68      	ldr	r3, [pc, #416]	; (8013818 <HAL_RCC_ClockConfig+0x1b8>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	f003 0307 	and.w	r3, r3, #7
 801367c:	683a      	ldr	r2, [r7, #0]
 801367e:	429a      	cmp	r2, r3
 8013680:	d90c      	bls.n	801369c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013682:	4b65      	ldr	r3, [pc, #404]	; (8013818 <HAL_RCC_ClockConfig+0x1b8>)
 8013684:	683a      	ldr	r2, [r7, #0]
 8013686:	b2d2      	uxtb	r2, r2
 8013688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801368a:	4b63      	ldr	r3, [pc, #396]	; (8013818 <HAL_RCC_ClockConfig+0x1b8>)
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	f003 0307 	and.w	r3, r3, #7
 8013692:	683a      	ldr	r2, [r7, #0]
 8013694:	429a      	cmp	r2, r3
 8013696:	d001      	beq.n	801369c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013698:	2301      	movs	r3, #1
 801369a:	e0b8      	b.n	801380e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	f003 0302 	and.w	r3, r3, #2
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d020      	beq.n	80136ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	f003 0304 	and.w	r3, r3, #4
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d005      	beq.n	80136c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80136b4:	4b59      	ldr	r3, [pc, #356]	; (801381c <HAL_RCC_ClockConfig+0x1bc>)
 80136b6:	689b      	ldr	r3, [r3, #8]
 80136b8:	4a58      	ldr	r2, [pc, #352]	; (801381c <HAL_RCC_ClockConfig+0x1bc>)
 80136ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80136be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	f003 0308 	and.w	r3, r3, #8
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d005      	beq.n	80136d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80136cc:	4b53      	ldr	r3, [pc, #332]	; (801381c <HAL_RCC_ClockConfig+0x1bc>)
 80136ce:	689b      	ldr	r3, [r3, #8]
 80136d0:	4a52      	ldr	r2, [pc, #328]	; (801381c <HAL_RCC_ClockConfig+0x1bc>)
 80136d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80136d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80136d8:	4b50      	ldr	r3, [pc, #320]	; (801381c <HAL_RCC_ClockConfig+0x1bc>)
 80136da:	689b      	ldr	r3, [r3, #8]
 80136dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	689b      	ldr	r3, [r3, #8]
 80136e4:	494d      	ldr	r1, [pc, #308]	; (801381c <HAL_RCC_ClockConfig+0x1bc>)
 80136e6:	4313      	orrs	r3, r2
 80136e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	f003 0301 	and.w	r3, r3, #1
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d044      	beq.n	8013780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	2b01      	cmp	r3, #1
 80136fc:	d107      	bne.n	801370e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80136fe:	4b47      	ldr	r3, [pc, #284]	; (801381c <HAL_RCC_ClockConfig+0x1bc>)
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013706:	2b00      	cmp	r3, #0
 8013708:	d119      	bne.n	801373e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801370a:	2301      	movs	r3, #1
 801370c:	e07f      	b.n	801380e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	685b      	ldr	r3, [r3, #4]
 8013712:	2b02      	cmp	r3, #2
 8013714:	d003      	beq.n	801371e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801371a:	2b03      	cmp	r3, #3
 801371c:	d107      	bne.n	801372e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801371e:	4b3f      	ldr	r3, [pc, #252]	; (801381c <HAL_RCC_ClockConfig+0x1bc>)
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013726:	2b00      	cmp	r3, #0
 8013728:	d109      	bne.n	801373e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801372a:	2301      	movs	r3, #1
 801372c:	e06f      	b.n	801380e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801372e:	4b3b      	ldr	r3, [pc, #236]	; (801381c <HAL_RCC_ClockConfig+0x1bc>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	f003 0302 	and.w	r3, r3, #2
 8013736:	2b00      	cmp	r3, #0
 8013738:	d101      	bne.n	801373e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801373a:	2301      	movs	r3, #1
 801373c:	e067      	b.n	801380e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801373e:	4b37      	ldr	r3, [pc, #220]	; (801381c <HAL_RCC_ClockConfig+0x1bc>)
 8013740:	689b      	ldr	r3, [r3, #8]
 8013742:	f023 0203 	bic.w	r2, r3, #3
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	685b      	ldr	r3, [r3, #4]
 801374a:	4934      	ldr	r1, [pc, #208]	; (801381c <HAL_RCC_ClockConfig+0x1bc>)
 801374c:	4313      	orrs	r3, r2
 801374e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013750:	f7fe f96a 	bl	8011a28 <HAL_GetTick>
 8013754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013756:	e00a      	b.n	801376e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013758:	f7fe f966 	bl	8011a28 <HAL_GetTick>
 801375c:	4602      	mov	r2, r0
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	1ad3      	subs	r3, r2, r3
 8013762:	f241 3288 	movw	r2, #5000	; 0x1388
 8013766:	4293      	cmp	r3, r2
 8013768:	d901      	bls.n	801376e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801376a:	2303      	movs	r3, #3
 801376c:	e04f      	b.n	801380e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801376e:	4b2b      	ldr	r3, [pc, #172]	; (801381c <HAL_RCC_ClockConfig+0x1bc>)
 8013770:	689b      	ldr	r3, [r3, #8]
 8013772:	f003 020c 	and.w	r2, r3, #12
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	009b      	lsls	r3, r3, #2
 801377c:	429a      	cmp	r2, r3
 801377e:	d1eb      	bne.n	8013758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013780:	4b25      	ldr	r3, [pc, #148]	; (8013818 <HAL_RCC_ClockConfig+0x1b8>)
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	f003 0307 	and.w	r3, r3, #7
 8013788:	683a      	ldr	r2, [r7, #0]
 801378a:	429a      	cmp	r2, r3
 801378c:	d20c      	bcs.n	80137a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801378e:	4b22      	ldr	r3, [pc, #136]	; (8013818 <HAL_RCC_ClockConfig+0x1b8>)
 8013790:	683a      	ldr	r2, [r7, #0]
 8013792:	b2d2      	uxtb	r2, r2
 8013794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013796:	4b20      	ldr	r3, [pc, #128]	; (8013818 <HAL_RCC_ClockConfig+0x1b8>)
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	f003 0307 	and.w	r3, r3, #7
 801379e:	683a      	ldr	r2, [r7, #0]
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d001      	beq.n	80137a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80137a4:	2301      	movs	r3, #1
 80137a6:	e032      	b.n	801380e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	f003 0304 	and.w	r3, r3, #4
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d008      	beq.n	80137c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80137b4:	4b19      	ldr	r3, [pc, #100]	; (801381c <HAL_RCC_ClockConfig+0x1bc>)
 80137b6:	689b      	ldr	r3, [r3, #8]
 80137b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	68db      	ldr	r3, [r3, #12]
 80137c0:	4916      	ldr	r1, [pc, #88]	; (801381c <HAL_RCC_ClockConfig+0x1bc>)
 80137c2:	4313      	orrs	r3, r2
 80137c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	f003 0308 	and.w	r3, r3, #8
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d009      	beq.n	80137e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80137d2:	4b12      	ldr	r3, [pc, #72]	; (801381c <HAL_RCC_ClockConfig+0x1bc>)
 80137d4:	689b      	ldr	r3, [r3, #8]
 80137d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	691b      	ldr	r3, [r3, #16]
 80137de:	00db      	lsls	r3, r3, #3
 80137e0:	490e      	ldr	r1, [pc, #56]	; (801381c <HAL_RCC_ClockConfig+0x1bc>)
 80137e2:	4313      	orrs	r3, r2
 80137e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80137e6:	f000 f821 	bl	801382c <HAL_RCC_GetSysClockFreq>
 80137ea:	4602      	mov	r2, r0
 80137ec:	4b0b      	ldr	r3, [pc, #44]	; (801381c <HAL_RCC_ClockConfig+0x1bc>)
 80137ee:	689b      	ldr	r3, [r3, #8]
 80137f0:	091b      	lsrs	r3, r3, #4
 80137f2:	f003 030f 	and.w	r3, r3, #15
 80137f6:	490a      	ldr	r1, [pc, #40]	; (8013820 <HAL_RCC_ClockConfig+0x1c0>)
 80137f8:	5ccb      	ldrb	r3, [r1, r3]
 80137fa:	fa22 f303 	lsr.w	r3, r2, r3
 80137fe:	4a09      	ldr	r2, [pc, #36]	; (8013824 <HAL_RCC_ClockConfig+0x1c4>)
 8013800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8013802:	4b09      	ldr	r3, [pc, #36]	; (8013828 <HAL_RCC_ClockConfig+0x1c8>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	4618      	mov	r0, r3
 8013808:	f7fe f8ca 	bl	80119a0 <HAL_InitTick>

  return HAL_OK;
 801380c:	2300      	movs	r3, #0
}
 801380e:	4618      	mov	r0, r3
 8013810:	3710      	adds	r7, #16
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}
 8013816:	bf00      	nop
 8013818:	40023c00 	.word	0x40023c00
 801381c:	40023800 	.word	0x40023800
 8013820:	080151f4 	.word	0x080151f4
 8013824:	20000010 	.word	0x20000010
 8013828:	20000078 	.word	0x20000078

0801382c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801382c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8013830:	b084      	sub	sp, #16
 8013832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013834:	2300      	movs	r3, #0
 8013836:	607b      	str	r3, [r7, #4]
 8013838:	2300      	movs	r3, #0
 801383a:	60fb      	str	r3, [r7, #12]
 801383c:	2300      	movs	r3, #0
 801383e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8013840:	2300      	movs	r3, #0
 8013842:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013844:	4b67      	ldr	r3, [pc, #412]	; (80139e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013846:	689b      	ldr	r3, [r3, #8]
 8013848:	f003 030c 	and.w	r3, r3, #12
 801384c:	2b08      	cmp	r3, #8
 801384e:	d00d      	beq.n	801386c <HAL_RCC_GetSysClockFreq+0x40>
 8013850:	2b08      	cmp	r3, #8
 8013852:	f200 80bd 	bhi.w	80139d0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8013856:	2b00      	cmp	r3, #0
 8013858:	d002      	beq.n	8013860 <HAL_RCC_GetSysClockFreq+0x34>
 801385a:	2b04      	cmp	r3, #4
 801385c:	d003      	beq.n	8013866 <HAL_RCC_GetSysClockFreq+0x3a>
 801385e:	e0b7      	b.n	80139d0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013860:	4b61      	ldr	r3, [pc, #388]	; (80139e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8013862:	60bb      	str	r3, [r7, #8]
       break;
 8013864:	e0b7      	b.n	80139d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013866:	4b61      	ldr	r3, [pc, #388]	; (80139ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8013868:	60bb      	str	r3, [r7, #8]
      break;
 801386a:	e0b4      	b.n	80139d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801386c:	4b5d      	ldr	r3, [pc, #372]	; (80139e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801386e:	685b      	ldr	r3, [r3, #4]
 8013870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013874:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013876:	4b5b      	ldr	r3, [pc, #364]	; (80139e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013878:	685b      	ldr	r3, [r3, #4]
 801387a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801387e:	2b00      	cmp	r3, #0
 8013880:	d04d      	beq.n	801391e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013882:	4b58      	ldr	r3, [pc, #352]	; (80139e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013884:	685b      	ldr	r3, [r3, #4]
 8013886:	099b      	lsrs	r3, r3, #6
 8013888:	461a      	mov	r2, r3
 801388a:	f04f 0300 	mov.w	r3, #0
 801388e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013892:	f04f 0100 	mov.w	r1, #0
 8013896:	ea02 0800 	and.w	r8, r2, r0
 801389a:	ea03 0901 	and.w	r9, r3, r1
 801389e:	4640      	mov	r0, r8
 80138a0:	4649      	mov	r1, r9
 80138a2:	f04f 0200 	mov.w	r2, #0
 80138a6:	f04f 0300 	mov.w	r3, #0
 80138aa:	014b      	lsls	r3, r1, #5
 80138ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80138b0:	0142      	lsls	r2, r0, #5
 80138b2:	4610      	mov	r0, r2
 80138b4:	4619      	mov	r1, r3
 80138b6:	ebb0 0008 	subs.w	r0, r0, r8
 80138ba:	eb61 0109 	sbc.w	r1, r1, r9
 80138be:	f04f 0200 	mov.w	r2, #0
 80138c2:	f04f 0300 	mov.w	r3, #0
 80138c6:	018b      	lsls	r3, r1, #6
 80138c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80138cc:	0182      	lsls	r2, r0, #6
 80138ce:	1a12      	subs	r2, r2, r0
 80138d0:	eb63 0301 	sbc.w	r3, r3, r1
 80138d4:	f04f 0000 	mov.w	r0, #0
 80138d8:	f04f 0100 	mov.w	r1, #0
 80138dc:	00d9      	lsls	r1, r3, #3
 80138de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80138e2:	00d0      	lsls	r0, r2, #3
 80138e4:	4602      	mov	r2, r0
 80138e6:	460b      	mov	r3, r1
 80138e8:	eb12 0208 	adds.w	r2, r2, r8
 80138ec:	eb43 0309 	adc.w	r3, r3, r9
 80138f0:	f04f 0000 	mov.w	r0, #0
 80138f4:	f04f 0100 	mov.w	r1, #0
 80138f8:	0259      	lsls	r1, r3, #9
 80138fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80138fe:	0250      	lsls	r0, r2, #9
 8013900:	4602      	mov	r2, r0
 8013902:	460b      	mov	r3, r1
 8013904:	4610      	mov	r0, r2
 8013906:	4619      	mov	r1, r3
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	461a      	mov	r2, r3
 801390c:	f04f 0300 	mov.w	r3, #0
 8013910:	f7ec fd06 	bl	8000320 <__aeabi_uldivmod>
 8013914:	4602      	mov	r2, r0
 8013916:	460b      	mov	r3, r1
 8013918:	4613      	mov	r3, r2
 801391a:	60fb      	str	r3, [r7, #12]
 801391c:	e04a      	b.n	80139b4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801391e:	4b31      	ldr	r3, [pc, #196]	; (80139e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013920:	685b      	ldr	r3, [r3, #4]
 8013922:	099b      	lsrs	r3, r3, #6
 8013924:	461a      	mov	r2, r3
 8013926:	f04f 0300 	mov.w	r3, #0
 801392a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801392e:	f04f 0100 	mov.w	r1, #0
 8013932:	ea02 0400 	and.w	r4, r2, r0
 8013936:	ea03 0501 	and.w	r5, r3, r1
 801393a:	4620      	mov	r0, r4
 801393c:	4629      	mov	r1, r5
 801393e:	f04f 0200 	mov.w	r2, #0
 8013942:	f04f 0300 	mov.w	r3, #0
 8013946:	014b      	lsls	r3, r1, #5
 8013948:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801394c:	0142      	lsls	r2, r0, #5
 801394e:	4610      	mov	r0, r2
 8013950:	4619      	mov	r1, r3
 8013952:	1b00      	subs	r0, r0, r4
 8013954:	eb61 0105 	sbc.w	r1, r1, r5
 8013958:	f04f 0200 	mov.w	r2, #0
 801395c:	f04f 0300 	mov.w	r3, #0
 8013960:	018b      	lsls	r3, r1, #6
 8013962:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8013966:	0182      	lsls	r2, r0, #6
 8013968:	1a12      	subs	r2, r2, r0
 801396a:	eb63 0301 	sbc.w	r3, r3, r1
 801396e:	f04f 0000 	mov.w	r0, #0
 8013972:	f04f 0100 	mov.w	r1, #0
 8013976:	00d9      	lsls	r1, r3, #3
 8013978:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801397c:	00d0      	lsls	r0, r2, #3
 801397e:	4602      	mov	r2, r0
 8013980:	460b      	mov	r3, r1
 8013982:	1912      	adds	r2, r2, r4
 8013984:	eb45 0303 	adc.w	r3, r5, r3
 8013988:	f04f 0000 	mov.w	r0, #0
 801398c:	f04f 0100 	mov.w	r1, #0
 8013990:	0299      	lsls	r1, r3, #10
 8013992:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8013996:	0290      	lsls	r0, r2, #10
 8013998:	4602      	mov	r2, r0
 801399a:	460b      	mov	r3, r1
 801399c:	4610      	mov	r0, r2
 801399e:	4619      	mov	r1, r3
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	461a      	mov	r2, r3
 80139a4:	f04f 0300 	mov.w	r3, #0
 80139a8:	f7ec fcba 	bl	8000320 <__aeabi_uldivmod>
 80139ac:	4602      	mov	r2, r0
 80139ae:	460b      	mov	r3, r1
 80139b0:	4613      	mov	r3, r2
 80139b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80139b4:	4b0b      	ldr	r3, [pc, #44]	; (80139e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80139b6:	685b      	ldr	r3, [r3, #4]
 80139b8:	0c1b      	lsrs	r3, r3, #16
 80139ba:	f003 0303 	and.w	r3, r3, #3
 80139be:	3301      	adds	r3, #1
 80139c0:	005b      	lsls	r3, r3, #1
 80139c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80139c4:	68fa      	ldr	r2, [r7, #12]
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80139cc:	60bb      	str	r3, [r7, #8]
      break;
 80139ce:	e002      	b.n	80139d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80139d0:	4b05      	ldr	r3, [pc, #20]	; (80139e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80139d2:	60bb      	str	r3, [r7, #8]
      break;
 80139d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80139d6:	68bb      	ldr	r3, [r7, #8]
}
 80139d8:	4618      	mov	r0, r3
 80139da:	3710      	adds	r7, #16
 80139dc:	46bd      	mov	sp, r7
 80139de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80139e2:	bf00      	nop
 80139e4:	40023800 	.word	0x40023800
 80139e8:	00f42400 	.word	0x00f42400
 80139ec:	007a1200 	.word	0x007a1200

080139f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80139f0:	b480      	push	{r7}
 80139f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80139f4:	4b03      	ldr	r3, [pc, #12]	; (8013a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80139f6:	681b      	ldr	r3, [r3, #0]
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	46bd      	mov	sp, r7
 80139fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a00:	4770      	bx	lr
 8013a02:	bf00      	nop
 8013a04:	20000010 	.word	0x20000010

08013a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013a0c:	f7ff fff0 	bl	80139f0 <HAL_RCC_GetHCLKFreq>
 8013a10:	4602      	mov	r2, r0
 8013a12:	4b05      	ldr	r3, [pc, #20]	; (8013a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013a14:	689b      	ldr	r3, [r3, #8]
 8013a16:	0a9b      	lsrs	r3, r3, #10
 8013a18:	f003 0307 	and.w	r3, r3, #7
 8013a1c:	4903      	ldr	r1, [pc, #12]	; (8013a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8013a1e:	5ccb      	ldrb	r3, [r1, r3]
 8013a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	bd80      	pop	{r7, pc}
 8013a28:	40023800 	.word	0x40023800
 8013a2c:	08015204 	.word	0x08015204

08013a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8013a34:	f7ff ffdc 	bl	80139f0 <HAL_RCC_GetHCLKFreq>
 8013a38:	4602      	mov	r2, r0
 8013a3a:	4b05      	ldr	r3, [pc, #20]	; (8013a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8013a3c:	689b      	ldr	r3, [r3, #8]
 8013a3e:	0b5b      	lsrs	r3, r3, #13
 8013a40:	f003 0307 	and.w	r3, r3, #7
 8013a44:	4903      	ldr	r1, [pc, #12]	; (8013a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013a46:	5ccb      	ldrb	r3, [r1, r3]
 8013a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	bd80      	pop	{r7, pc}
 8013a50:	40023800 	.word	0x40023800
 8013a54:	08015204 	.word	0x08015204

08013a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d101      	bne.n	8013a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013a66:	2301      	movs	r3, #1
 8013a68:	e03f      	b.n	8013aea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013a70:	b2db      	uxtb	r3, r3
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d106      	bne.n	8013a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013a7e:	6878      	ldr	r0, [r7, #4]
 8013a80:	f7ed f86c 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2224      	movs	r2, #36	; 0x24
 8013a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	68da      	ldr	r2, [r3, #12]
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013a9c:	6878      	ldr	r0, [r7, #4]
 8013a9e:	f000 f929 	bl	8013cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	691a      	ldr	r2, [r3, #16]
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	695a      	ldr	r2, [r3, #20]
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	68da      	ldr	r2, [r3, #12]
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	2220      	movs	r2, #32
 8013adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	2220      	movs	r2, #32
 8013ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8013ae8:	2300      	movs	r3, #0
}
 8013aea:	4618      	mov	r0, r3
 8013aec:	3708      	adds	r7, #8
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}

08013af2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013af2:	b580      	push	{r7, lr}
 8013af4:	b08a      	sub	sp, #40	; 0x28
 8013af6:	af02      	add	r7, sp, #8
 8013af8:	60f8      	str	r0, [r7, #12]
 8013afa:	60b9      	str	r1, [r7, #8]
 8013afc:	603b      	str	r3, [r7, #0]
 8013afe:	4613      	mov	r3, r2
 8013b00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8013b02:	2300      	movs	r3, #0
 8013b04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013b0c:	b2db      	uxtb	r3, r3
 8013b0e:	2b20      	cmp	r3, #32
 8013b10:	d17c      	bne.n	8013c0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8013b12:	68bb      	ldr	r3, [r7, #8]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d002      	beq.n	8013b1e <HAL_UART_Transmit+0x2c>
 8013b18:	88fb      	ldrh	r3, [r7, #6]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d101      	bne.n	8013b22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8013b1e:	2301      	movs	r3, #1
 8013b20:	e075      	b.n	8013c0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013b28:	2b01      	cmp	r3, #1
 8013b2a:	d101      	bne.n	8013b30 <HAL_UART_Transmit+0x3e>
 8013b2c:	2302      	movs	r3, #2
 8013b2e:	e06e      	b.n	8013c0e <HAL_UART_Transmit+0x11c>
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	2201      	movs	r2, #1
 8013b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	2221      	movs	r2, #33	; 0x21
 8013b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013b46:	f7fd ff6f 	bl	8011a28 <HAL_GetTick>
 8013b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	88fa      	ldrh	r2, [r7, #6]
 8013b50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	88fa      	ldrh	r2, [r7, #6]
 8013b56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	689b      	ldr	r3, [r3, #8]
 8013b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013b60:	d108      	bne.n	8013b74 <HAL_UART_Transmit+0x82>
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	691b      	ldr	r3, [r3, #16]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d104      	bne.n	8013b74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8013b6e:	68bb      	ldr	r3, [r7, #8]
 8013b70:	61bb      	str	r3, [r7, #24]
 8013b72:	e003      	b.n	8013b7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8013b74:	68bb      	ldr	r3, [r7, #8]
 8013b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013b78:	2300      	movs	r3, #0
 8013b7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	2200      	movs	r2, #0
 8013b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8013b84:	e02a      	b.n	8013bdc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	9300      	str	r3, [sp, #0]
 8013b8a:	697b      	ldr	r3, [r7, #20]
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	2180      	movs	r1, #128	; 0x80
 8013b90:	68f8      	ldr	r0, [r7, #12]
 8013b92:	f000 f840 	bl	8013c16 <UART_WaitOnFlagUntilTimeout>
 8013b96:	4603      	mov	r3, r0
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d001      	beq.n	8013ba0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8013b9c:	2303      	movs	r3, #3
 8013b9e:	e036      	b.n	8013c0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8013ba0:	69fb      	ldr	r3, [r7, #28]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d10b      	bne.n	8013bbe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013ba6:	69bb      	ldr	r3, [r7, #24]
 8013ba8:	881b      	ldrh	r3, [r3, #0]
 8013baa:	461a      	mov	r2, r3
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013bb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8013bb6:	69bb      	ldr	r3, [r7, #24]
 8013bb8:	3302      	adds	r3, #2
 8013bba:	61bb      	str	r3, [r7, #24]
 8013bbc:	e007      	b.n	8013bce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8013bbe:	69fb      	ldr	r3, [r7, #28]
 8013bc0:	781a      	ldrb	r2, [r3, #0]
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8013bc8:	69fb      	ldr	r3, [r7, #28]
 8013bca:	3301      	adds	r3, #1
 8013bcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013bd2:	b29b      	uxth	r3, r3
 8013bd4:	3b01      	subs	r3, #1
 8013bd6:	b29a      	uxth	r2, r3
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013be0:	b29b      	uxth	r3, r3
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d1cf      	bne.n	8013b86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	9300      	str	r3, [sp, #0]
 8013bea:	697b      	ldr	r3, [r7, #20]
 8013bec:	2200      	movs	r2, #0
 8013bee:	2140      	movs	r1, #64	; 0x40
 8013bf0:	68f8      	ldr	r0, [r7, #12]
 8013bf2:	f000 f810 	bl	8013c16 <UART_WaitOnFlagUntilTimeout>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d001      	beq.n	8013c00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8013bfc:	2303      	movs	r3, #3
 8013bfe:	e006      	b.n	8013c0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	2220      	movs	r2, #32
 8013c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8013c08:	2300      	movs	r3, #0
 8013c0a:	e000      	b.n	8013c0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8013c0c:	2302      	movs	r3, #2
  }
}
 8013c0e:	4618      	mov	r0, r3
 8013c10:	3720      	adds	r7, #32
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}

08013c16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8013c16:	b580      	push	{r7, lr}
 8013c18:	b090      	sub	sp, #64	; 0x40
 8013c1a:	af00      	add	r7, sp, #0
 8013c1c:	60f8      	str	r0, [r7, #12]
 8013c1e:	60b9      	str	r1, [r7, #8]
 8013c20:	603b      	str	r3, [r7, #0]
 8013c22:	4613      	mov	r3, r2
 8013c24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013c26:	e050      	b.n	8013cca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c2e:	d04c      	beq.n	8013cca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8013c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d007      	beq.n	8013c46 <UART_WaitOnFlagUntilTimeout+0x30>
 8013c36:	f7fd fef7 	bl	8011a28 <HAL_GetTick>
 8013c3a:	4602      	mov	r2, r0
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	1ad3      	subs	r3, r2, r3
 8013c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013c42:	429a      	cmp	r2, r3
 8013c44:	d241      	bcs.n	8013cca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	330c      	adds	r3, #12
 8013c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c50:	e853 3f00 	ldrex	r3, [r3]
 8013c54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	330c      	adds	r3, #12
 8013c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c66:	637a      	str	r2, [r7, #52]	; 0x34
 8013c68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013c6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c6e:	e841 2300 	strex	r3, r2, [r1]
 8013c72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d1e5      	bne.n	8013c46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	3314      	adds	r3, #20
 8013c80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c82:	697b      	ldr	r3, [r7, #20]
 8013c84:	e853 3f00 	ldrex	r3, [r3]
 8013c88:	613b      	str	r3, [r7, #16]
   return(result);
 8013c8a:	693b      	ldr	r3, [r7, #16]
 8013c8c:	f023 0301 	bic.w	r3, r3, #1
 8013c90:	63bb      	str	r3, [r7, #56]	; 0x38
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	3314      	adds	r3, #20
 8013c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013c9a:	623a      	str	r2, [r7, #32]
 8013c9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c9e:	69f9      	ldr	r1, [r7, #28]
 8013ca0:	6a3a      	ldr	r2, [r7, #32]
 8013ca2:	e841 2300 	strex	r3, r2, [r1]
 8013ca6:	61bb      	str	r3, [r7, #24]
   return(result);
 8013ca8:	69bb      	ldr	r3, [r7, #24]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d1e5      	bne.n	8013c7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	2220      	movs	r2, #32
 8013cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	2220      	movs	r2, #32
 8013cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8013cc6:	2303      	movs	r3, #3
 8013cc8:	e00f      	b.n	8013cea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	681a      	ldr	r2, [r3, #0]
 8013cd0:	68bb      	ldr	r3, [r7, #8]
 8013cd2:	4013      	ands	r3, r2
 8013cd4:	68ba      	ldr	r2, [r7, #8]
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	bf0c      	ite	eq
 8013cda:	2301      	moveq	r3, #1
 8013cdc:	2300      	movne	r3, #0
 8013cde:	b2db      	uxtb	r3, r3
 8013ce0:	461a      	mov	r2, r3
 8013ce2:	79fb      	ldrb	r3, [r7, #7]
 8013ce4:	429a      	cmp	r2, r3
 8013ce6:	d09f      	beq.n	8013c28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013ce8:	2300      	movs	r3, #0
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	3740      	adds	r7, #64	; 0x40
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}
	...

08013cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cf8:	b09f      	sub	sp, #124	; 0x7c
 8013cfa:	af00      	add	r7, sp, #0
 8013cfc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	691b      	ldr	r3, [r3, #16]
 8013d04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8013d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d0a:	68d9      	ldr	r1, [r3, #12]
 8013d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d0e:	681a      	ldr	r2, [r3, #0]
 8013d10:	ea40 0301 	orr.w	r3, r0, r1
 8013d14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8013d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d18:	689a      	ldr	r2, [r3, #8]
 8013d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d1c:	691b      	ldr	r3, [r3, #16]
 8013d1e:	431a      	orrs	r2, r3
 8013d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d22:	695b      	ldr	r3, [r3, #20]
 8013d24:	431a      	orrs	r2, r3
 8013d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d28:	69db      	ldr	r3, [r3, #28]
 8013d2a:	4313      	orrs	r3, r2
 8013d2c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8013d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	68db      	ldr	r3, [r3, #12]
 8013d34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8013d38:	f021 010c 	bic.w	r1, r1, #12
 8013d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d3e:	681a      	ldr	r2, [r3, #0]
 8013d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013d42:	430b      	orrs	r3, r1
 8013d44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8013d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	695b      	ldr	r3, [r3, #20]
 8013d4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8013d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d52:	6999      	ldr	r1, [r3, #24]
 8013d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d56:	681a      	ldr	r2, [r3, #0]
 8013d58:	ea40 0301 	orr.w	r3, r0, r1
 8013d5c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8013d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d60:	681a      	ldr	r2, [r3, #0]
 8013d62:	4bc5      	ldr	r3, [pc, #788]	; (8014078 <UART_SetConfig+0x384>)
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d004      	beq.n	8013d72 <UART_SetConfig+0x7e>
 8013d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d6a:	681a      	ldr	r2, [r3, #0]
 8013d6c:	4bc3      	ldr	r3, [pc, #780]	; (801407c <UART_SetConfig+0x388>)
 8013d6e:	429a      	cmp	r2, r3
 8013d70:	d103      	bne.n	8013d7a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8013d72:	f7ff fe5d 	bl	8013a30 <HAL_RCC_GetPCLK2Freq>
 8013d76:	6778      	str	r0, [r7, #116]	; 0x74
 8013d78:	e002      	b.n	8013d80 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8013d7a:	f7ff fe45 	bl	8013a08 <HAL_RCC_GetPCLK1Freq>
 8013d7e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d82:	69db      	ldr	r3, [r3, #28]
 8013d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013d88:	f040 80b6 	bne.w	8013ef8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013d8e:	461c      	mov	r4, r3
 8013d90:	f04f 0500 	mov.w	r5, #0
 8013d94:	4622      	mov	r2, r4
 8013d96:	462b      	mov	r3, r5
 8013d98:	1891      	adds	r1, r2, r2
 8013d9a:	6439      	str	r1, [r7, #64]	; 0x40
 8013d9c:	415b      	adcs	r3, r3
 8013d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8013da0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013da4:	1912      	adds	r2, r2, r4
 8013da6:	eb45 0303 	adc.w	r3, r5, r3
 8013daa:	f04f 0000 	mov.w	r0, #0
 8013dae:	f04f 0100 	mov.w	r1, #0
 8013db2:	00d9      	lsls	r1, r3, #3
 8013db4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013db8:	00d0      	lsls	r0, r2, #3
 8013dba:	4602      	mov	r2, r0
 8013dbc:	460b      	mov	r3, r1
 8013dbe:	1911      	adds	r1, r2, r4
 8013dc0:	6639      	str	r1, [r7, #96]	; 0x60
 8013dc2:	416b      	adcs	r3, r5
 8013dc4:	667b      	str	r3, [r7, #100]	; 0x64
 8013dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013dc8:	685b      	ldr	r3, [r3, #4]
 8013dca:	461a      	mov	r2, r3
 8013dcc:	f04f 0300 	mov.w	r3, #0
 8013dd0:	1891      	adds	r1, r2, r2
 8013dd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8013dd4:	415b      	adcs	r3, r3
 8013dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013dd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8013ddc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8013de0:	f7ec fa9e 	bl	8000320 <__aeabi_uldivmod>
 8013de4:	4602      	mov	r2, r0
 8013de6:	460b      	mov	r3, r1
 8013de8:	4ba5      	ldr	r3, [pc, #660]	; (8014080 <UART_SetConfig+0x38c>)
 8013dea:	fba3 2302 	umull	r2, r3, r3, r2
 8013dee:	095b      	lsrs	r3, r3, #5
 8013df0:	011e      	lsls	r6, r3, #4
 8013df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013df4:	461c      	mov	r4, r3
 8013df6:	f04f 0500 	mov.w	r5, #0
 8013dfa:	4622      	mov	r2, r4
 8013dfc:	462b      	mov	r3, r5
 8013dfe:	1891      	adds	r1, r2, r2
 8013e00:	6339      	str	r1, [r7, #48]	; 0x30
 8013e02:	415b      	adcs	r3, r3
 8013e04:	637b      	str	r3, [r7, #52]	; 0x34
 8013e06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8013e0a:	1912      	adds	r2, r2, r4
 8013e0c:	eb45 0303 	adc.w	r3, r5, r3
 8013e10:	f04f 0000 	mov.w	r0, #0
 8013e14:	f04f 0100 	mov.w	r1, #0
 8013e18:	00d9      	lsls	r1, r3, #3
 8013e1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013e1e:	00d0      	lsls	r0, r2, #3
 8013e20:	4602      	mov	r2, r0
 8013e22:	460b      	mov	r3, r1
 8013e24:	1911      	adds	r1, r2, r4
 8013e26:	65b9      	str	r1, [r7, #88]	; 0x58
 8013e28:	416b      	adcs	r3, r5
 8013e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e2e:	685b      	ldr	r3, [r3, #4]
 8013e30:	461a      	mov	r2, r3
 8013e32:	f04f 0300 	mov.w	r3, #0
 8013e36:	1891      	adds	r1, r2, r2
 8013e38:	62b9      	str	r1, [r7, #40]	; 0x28
 8013e3a:	415b      	adcs	r3, r3
 8013e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013e42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8013e46:	f7ec fa6b 	bl	8000320 <__aeabi_uldivmod>
 8013e4a:	4602      	mov	r2, r0
 8013e4c:	460b      	mov	r3, r1
 8013e4e:	4b8c      	ldr	r3, [pc, #560]	; (8014080 <UART_SetConfig+0x38c>)
 8013e50:	fba3 1302 	umull	r1, r3, r3, r2
 8013e54:	095b      	lsrs	r3, r3, #5
 8013e56:	2164      	movs	r1, #100	; 0x64
 8013e58:	fb01 f303 	mul.w	r3, r1, r3
 8013e5c:	1ad3      	subs	r3, r2, r3
 8013e5e:	00db      	lsls	r3, r3, #3
 8013e60:	3332      	adds	r3, #50	; 0x32
 8013e62:	4a87      	ldr	r2, [pc, #540]	; (8014080 <UART_SetConfig+0x38c>)
 8013e64:	fba2 2303 	umull	r2, r3, r2, r3
 8013e68:	095b      	lsrs	r3, r3, #5
 8013e6a:	005b      	lsls	r3, r3, #1
 8013e6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013e70:	441e      	add	r6, r3
 8013e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e74:	4618      	mov	r0, r3
 8013e76:	f04f 0100 	mov.w	r1, #0
 8013e7a:	4602      	mov	r2, r0
 8013e7c:	460b      	mov	r3, r1
 8013e7e:	1894      	adds	r4, r2, r2
 8013e80:	623c      	str	r4, [r7, #32]
 8013e82:	415b      	adcs	r3, r3
 8013e84:	627b      	str	r3, [r7, #36]	; 0x24
 8013e86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8013e8a:	1812      	adds	r2, r2, r0
 8013e8c:	eb41 0303 	adc.w	r3, r1, r3
 8013e90:	f04f 0400 	mov.w	r4, #0
 8013e94:	f04f 0500 	mov.w	r5, #0
 8013e98:	00dd      	lsls	r5, r3, #3
 8013e9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8013e9e:	00d4      	lsls	r4, r2, #3
 8013ea0:	4622      	mov	r2, r4
 8013ea2:	462b      	mov	r3, r5
 8013ea4:	1814      	adds	r4, r2, r0
 8013ea6:	653c      	str	r4, [r7, #80]	; 0x50
 8013ea8:	414b      	adcs	r3, r1
 8013eaa:	657b      	str	r3, [r7, #84]	; 0x54
 8013eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013eae:	685b      	ldr	r3, [r3, #4]
 8013eb0:	461a      	mov	r2, r3
 8013eb2:	f04f 0300 	mov.w	r3, #0
 8013eb6:	1891      	adds	r1, r2, r2
 8013eb8:	61b9      	str	r1, [r7, #24]
 8013eba:	415b      	adcs	r3, r3
 8013ebc:	61fb      	str	r3, [r7, #28]
 8013ebe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013ec2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8013ec6:	f7ec fa2b 	bl	8000320 <__aeabi_uldivmod>
 8013eca:	4602      	mov	r2, r0
 8013ecc:	460b      	mov	r3, r1
 8013ece:	4b6c      	ldr	r3, [pc, #432]	; (8014080 <UART_SetConfig+0x38c>)
 8013ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8013ed4:	095b      	lsrs	r3, r3, #5
 8013ed6:	2164      	movs	r1, #100	; 0x64
 8013ed8:	fb01 f303 	mul.w	r3, r1, r3
 8013edc:	1ad3      	subs	r3, r2, r3
 8013ede:	00db      	lsls	r3, r3, #3
 8013ee0:	3332      	adds	r3, #50	; 0x32
 8013ee2:	4a67      	ldr	r2, [pc, #412]	; (8014080 <UART_SetConfig+0x38c>)
 8013ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8013ee8:	095b      	lsrs	r3, r3, #5
 8013eea:	f003 0207 	and.w	r2, r3, #7
 8013eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	4432      	add	r2, r6
 8013ef4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8013ef6:	e0b9      	b.n	801406c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013efa:	461c      	mov	r4, r3
 8013efc:	f04f 0500 	mov.w	r5, #0
 8013f00:	4622      	mov	r2, r4
 8013f02:	462b      	mov	r3, r5
 8013f04:	1891      	adds	r1, r2, r2
 8013f06:	6139      	str	r1, [r7, #16]
 8013f08:	415b      	adcs	r3, r3
 8013f0a:	617b      	str	r3, [r7, #20]
 8013f0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013f10:	1912      	adds	r2, r2, r4
 8013f12:	eb45 0303 	adc.w	r3, r5, r3
 8013f16:	f04f 0000 	mov.w	r0, #0
 8013f1a:	f04f 0100 	mov.w	r1, #0
 8013f1e:	00d9      	lsls	r1, r3, #3
 8013f20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013f24:	00d0      	lsls	r0, r2, #3
 8013f26:	4602      	mov	r2, r0
 8013f28:	460b      	mov	r3, r1
 8013f2a:	eb12 0804 	adds.w	r8, r2, r4
 8013f2e:	eb43 0905 	adc.w	r9, r3, r5
 8013f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013f34:	685b      	ldr	r3, [r3, #4]
 8013f36:	4618      	mov	r0, r3
 8013f38:	f04f 0100 	mov.w	r1, #0
 8013f3c:	f04f 0200 	mov.w	r2, #0
 8013f40:	f04f 0300 	mov.w	r3, #0
 8013f44:	008b      	lsls	r3, r1, #2
 8013f46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8013f4a:	0082      	lsls	r2, r0, #2
 8013f4c:	4640      	mov	r0, r8
 8013f4e:	4649      	mov	r1, r9
 8013f50:	f7ec f9e6 	bl	8000320 <__aeabi_uldivmod>
 8013f54:	4602      	mov	r2, r0
 8013f56:	460b      	mov	r3, r1
 8013f58:	4b49      	ldr	r3, [pc, #292]	; (8014080 <UART_SetConfig+0x38c>)
 8013f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8013f5e:	095b      	lsrs	r3, r3, #5
 8013f60:	011e      	lsls	r6, r3, #4
 8013f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013f64:	4618      	mov	r0, r3
 8013f66:	f04f 0100 	mov.w	r1, #0
 8013f6a:	4602      	mov	r2, r0
 8013f6c:	460b      	mov	r3, r1
 8013f6e:	1894      	adds	r4, r2, r2
 8013f70:	60bc      	str	r4, [r7, #8]
 8013f72:	415b      	adcs	r3, r3
 8013f74:	60fb      	str	r3, [r7, #12]
 8013f76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013f7a:	1812      	adds	r2, r2, r0
 8013f7c:	eb41 0303 	adc.w	r3, r1, r3
 8013f80:	f04f 0400 	mov.w	r4, #0
 8013f84:	f04f 0500 	mov.w	r5, #0
 8013f88:	00dd      	lsls	r5, r3, #3
 8013f8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8013f8e:	00d4      	lsls	r4, r2, #3
 8013f90:	4622      	mov	r2, r4
 8013f92:	462b      	mov	r3, r5
 8013f94:	1814      	adds	r4, r2, r0
 8013f96:	64bc      	str	r4, [r7, #72]	; 0x48
 8013f98:	414b      	adcs	r3, r1
 8013f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013f9e:	685b      	ldr	r3, [r3, #4]
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f04f 0100 	mov.w	r1, #0
 8013fa6:	f04f 0200 	mov.w	r2, #0
 8013faa:	f04f 0300 	mov.w	r3, #0
 8013fae:	008b      	lsls	r3, r1, #2
 8013fb0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8013fb4:	0082      	lsls	r2, r0, #2
 8013fb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8013fba:	f7ec f9b1 	bl	8000320 <__aeabi_uldivmod>
 8013fbe:	4602      	mov	r2, r0
 8013fc0:	460b      	mov	r3, r1
 8013fc2:	4b2f      	ldr	r3, [pc, #188]	; (8014080 <UART_SetConfig+0x38c>)
 8013fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8013fc8:	095b      	lsrs	r3, r3, #5
 8013fca:	2164      	movs	r1, #100	; 0x64
 8013fcc:	fb01 f303 	mul.w	r3, r1, r3
 8013fd0:	1ad3      	subs	r3, r2, r3
 8013fd2:	011b      	lsls	r3, r3, #4
 8013fd4:	3332      	adds	r3, #50	; 0x32
 8013fd6:	4a2a      	ldr	r2, [pc, #168]	; (8014080 <UART_SetConfig+0x38c>)
 8013fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8013fdc:	095b      	lsrs	r3, r3, #5
 8013fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013fe2:	441e      	add	r6, r3
 8013fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f04f 0100 	mov.w	r1, #0
 8013fec:	4602      	mov	r2, r0
 8013fee:	460b      	mov	r3, r1
 8013ff0:	1894      	adds	r4, r2, r2
 8013ff2:	603c      	str	r4, [r7, #0]
 8013ff4:	415b      	adcs	r3, r3
 8013ff6:	607b      	str	r3, [r7, #4]
 8013ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013ffc:	1812      	adds	r2, r2, r0
 8013ffe:	eb41 0303 	adc.w	r3, r1, r3
 8014002:	f04f 0400 	mov.w	r4, #0
 8014006:	f04f 0500 	mov.w	r5, #0
 801400a:	00dd      	lsls	r5, r3, #3
 801400c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014010:	00d4      	lsls	r4, r2, #3
 8014012:	4622      	mov	r2, r4
 8014014:	462b      	mov	r3, r5
 8014016:	eb12 0a00 	adds.w	sl, r2, r0
 801401a:	eb43 0b01 	adc.w	fp, r3, r1
 801401e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014020:	685b      	ldr	r3, [r3, #4]
 8014022:	4618      	mov	r0, r3
 8014024:	f04f 0100 	mov.w	r1, #0
 8014028:	f04f 0200 	mov.w	r2, #0
 801402c:	f04f 0300 	mov.w	r3, #0
 8014030:	008b      	lsls	r3, r1, #2
 8014032:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014036:	0082      	lsls	r2, r0, #2
 8014038:	4650      	mov	r0, sl
 801403a:	4659      	mov	r1, fp
 801403c:	f7ec f970 	bl	8000320 <__aeabi_uldivmod>
 8014040:	4602      	mov	r2, r0
 8014042:	460b      	mov	r3, r1
 8014044:	4b0e      	ldr	r3, [pc, #56]	; (8014080 <UART_SetConfig+0x38c>)
 8014046:	fba3 1302 	umull	r1, r3, r3, r2
 801404a:	095b      	lsrs	r3, r3, #5
 801404c:	2164      	movs	r1, #100	; 0x64
 801404e:	fb01 f303 	mul.w	r3, r1, r3
 8014052:	1ad3      	subs	r3, r2, r3
 8014054:	011b      	lsls	r3, r3, #4
 8014056:	3332      	adds	r3, #50	; 0x32
 8014058:	4a09      	ldr	r2, [pc, #36]	; (8014080 <UART_SetConfig+0x38c>)
 801405a:	fba2 2303 	umull	r2, r3, r2, r3
 801405e:	095b      	lsrs	r3, r3, #5
 8014060:	f003 020f 	and.w	r2, r3, #15
 8014064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	4432      	add	r2, r6
 801406a:	609a      	str	r2, [r3, #8]
}
 801406c:	bf00      	nop
 801406e:	377c      	adds	r7, #124	; 0x7c
 8014070:	46bd      	mov	sp, r7
 8014072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014076:	bf00      	nop
 8014078:	40011000 	.word	0x40011000
 801407c:	40011400 	.word	0x40011400
 8014080:	51eb851f 	.word	0x51eb851f

08014084 <__errno>:
 8014084:	4b01      	ldr	r3, [pc, #4]	; (801408c <__errno+0x8>)
 8014086:	6818      	ldr	r0, [r3, #0]
 8014088:	4770      	bx	lr
 801408a:	bf00      	nop
 801408c:	20000080 	.word	0x20000080

08014090 <__libc_init_array>:
 8014090:	b570      	push	{r4, r5, r6, lr}
 8014092:	4d0d      	ldr	r5, [pc, #52]	; (80140c8 <__libc_init_array+0x38>)
 8014094:	4c0d      	ldr	r4, [pc, #52]	; (80140cc <__libc_init_array+0x3c>)
 8014096:	1b64      	subs	r4, r4, r5
 8014098:	10a4      	asrs	r4, r4, #2
 801409a:	2600      	movs	r6, #0
 801409c:	42a6      	cmp	r6, r4
 801409e:	d109      	bne.n	80140b4 <__libc_init_array+0x24>
 80140a0:	4d0b      	ldr	r5, [pc, #44]	; (80140d0 <__libc_init_array+0x40>)
 80140a2:	4c0c      	ldr	r4, [pc, #48]	; (80140d4 <__libc_init_array+0x44>)
 80140a4:	f001 f80e 	bl	80150c4 <_init>
 80140a8:	1b64      	subs	r4, r4, r5
 80140aa:	10a4      	asrs	r4, r4, #2
 80140ac:	2600      	movs	r6, #0
 80140ae:	42a6      	cmp	r6, r4
 80140b0:	d105      	bne.n	80140be <__libc_init_array+0x2e>
 80140b2:	bd70      	pop	{r4, r5, r6, pc}
 80140b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80140b8:	4798      	blx	r3
 80140ba:	3601      	adds	r6, #1
 80140bc:	e7ee      	b.n	801409c <__libc_init_array+0xc>
 80140be:	f855 3b04 	ldr.w	r3, [r5], #4
 80140c2:	4798      	blx	r3
 80140c4:	3601      	adds	r6, #1
 80140c6:	e7f2      	b.n	80140ae <__libc_init_array+0x1e>
 80140c8:	080152ac 	.word	0x080152ac
 80140cc:	080152ac 	.word	0x080152ac
 80140d0:	080152ac 	.word	0x080152ac
 80140d4:	080152b0 	.word	0x080152b0

080140d8 <memcpy>:
 80140d8:	440a      	add	r2, r1
 80140da:	4291      	cmp	r1, r2
 80140dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80140e0:	d100      	bne.n	80140e4 <memcpy+0xc>
 80140e2:	4770      	bx	lr
 80140e4:	b510      	push	{r4, lr}
 80140e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80140ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80140ee:	4291      	cmp	r1, r2
 80140f0:	d1f9      	bne.n	80140e6 <memcpy+0xe>
 80140f2:	bd10      	pop	{r4, pc}

080140f4 <memset>:
 80140f4:	4402      	add	r2, r0
 80140f6:	4603      	mov	r3, r0
 80140f8:	4293      	cmp	r3, r2
 80140fa:	d100      	bne.n	80140fe <memset+0xa>
 80140fc:	4770      	bx	lr
 80140fe:	f803 1b01 	strb.w	r1, [r3], #1
 8014102:	e7f9      	b.n	80140f8 <memset+0x4>

08014104 <iprintf>:
 8014104:	b40f      	push	{r0, r1, r2, r3}
 8014106:	4b0a      	ldr	r3, [pc, #40]	; (8014130 <iprintf+0x2c>)
 8014108:	b513      	push	{r0, r1, r4, lr}
 801410a:	681c      	ldr	r4, [r3, #0]
 801410c:	b124      	cbz	r4, 8014118 <iprintf+0x14>
 801410e:	69a3      	ldr	r3, [r4, #24]
 8014110:	b913      	cbnz	r3, 8014118 <iprintf+0x14>
 8014112:	4620      	mov	r0, r4
 8014114:	f000 fa72 	bl	80145fc <__sinit>
 8014118:	ab05      	add	r3, sp, #20
 801411a:	9a04      	ldr	r2, [sp, #16]
 801411c:	68a1      	ldr	r1, [r4, #8]
 801411e:	9301      	str	r3, [sp, #4]
 8014120:	4620      	mov	r0, r4
 8014122:	f000 fc43 	bl	80149ac <_vfiprintf_r>
 8014126:	b002      	add	sp, #8
 8014128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801412c:	b004      	add	sp, #16
 801412e:	4770      	bx	lr
 8014130:	20000080 	.word	0x20000080

08014134 <_puts_r>:
 8014134:	b570      	push	{r4, r5, r6, lr}
 8014136:	460e      	mov	r6, r1
 8014138:	4605      	mov	r5, r0
 801413a:	b118      	cbz	r0, 8014144 <_puts_r+0x10>
 801413c:	6983      	ldr	r3, [r0, #24]
 801413e:	b90b      	cbnz	r3, 8014144 <_puts_r+0x10>
 8014140:	f000 fa5c 	bl	80145fc <__sinit>
 8014144:	69ab      	ldr	r3, [r5, #24]
 8014146:	68ac      	ldr	r4, [r5, #8]
 8014148:	b913      	cbnz	r3, 8014150 <_puts_r+0x1c>
 801414a:	4628      	mov	r0, r5
 801414c:	f000 fa56 	bl	80145fc <__sinit>
 8014150:	4b2c      	ldr	r3, [pc, #176]	; (8014204 <_puts_r+0xd0>)
 8014152:	429c      	cmp	r4, r3
 8014154:	d120      	bne.n	8014198 <_puts_r+0x64>
 8014156:	686c      	ldr	r4, [r5, #4]
 8014158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801415a:	07db      	lsls	r3, r3, #31
 801415c:	d405      	bmi.n	801416a <_puts_r+0x36>
 801415e:	89a3      	ldrh	r3, [r4, #12]
 8014160:	0598      	lsls	r0, r3, #22
 8014162:	d402      	bmi.n	801416a <_puts_r+0x36>
 8014164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014166:	f000 fae7 	bl	8014738 <__retarget_lock_acquire_recursive>
 801416a:	89a3      	ldrh	r3, [r4, #12]
 801416c:	0719      	lsls	r1, r3, #28
 801416e:	d51d      	bpl.n	80141ac <_puts_r+0x78>
 8014170:	6923      	ldr	r3, [r4, #16]
 8014172:	b1db      	cbz	r3, 80141ac <_puts_r+0x78>
 8014174:	3e01      	subs	r6, #1
 8014176:	68a3      	ldr	r3, [r4, #8]
 8014178:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801417c:	3b01      	subs	r3, #1
 801417e:	60a3      	str	r3, [r4, #8]
 8014180:	bb39      	cbnz	r1, 80141d2 <_puts_r+0x9e>
 8014182:	2b00      	cmp	r3, #0
 8014184:	da38      	bge.n	80141f8 <_puts_r+0xc4>
 8014186:	4622      	mov	r2, r4
 8014188:	210a      	movs	r1, #10
 801418a:	4628      	mov	r0, r5
 801418c:	f000 f85c 	bl	8014248 <__swbuf_r>
 8014190:	3001      	adds	r0, #1
 8014192:	d011      	beq.n	80141b8 <_puts_r+0x84>
 8014194:	250a      	movs	r5, #10
 8014196:	e011      	b.n	80141bc <_puts_r+0x88>
 8014198:	4b1b      	ldr	r3, [pc, #108]	; (8014208 <_puts_r+0xd4>)
 801419a:	429c      	cmp	r4, r3
 801419c:	d101      	bne.n	80141a2 <_puts_r+0x6e>
 801419e:	68ac      	ldr	r4, [r5, #8]
 80141a0:	e7da      	b.n	8014158 <_puts_r+0x24>
 80141a2:	4b1a      	ldr	r3, [pc, #104]	; (801420c <_puts_r+0xd8>)
 80141a4:	429c      	cmp	r4, r3
 80141a6:	bf08      	it	eq
 80141a8:	68ec      	ldreq	r4, [r5, #12]
 80141aa:	e7d5      	b.n	8014158 <_puts_r+0x24>
 80141ac:	4621      	mov	r1, r4
 80141ae:	4628      	mov	r0, r5
 80141b0:	f000 f89c 	bl	80142ec <__swsetup_r>
 80141b4:	2800      	cmp	r0, #0
 80141b6:	d0dd      	beq.n	8014174 <_puts_r+0x40>
 80141b8:	f04f 35ff 	mov.w	r5, #4294967295
 80141bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80141be:	07da      	lsls	r2, r3, #31
 80141c0:	d405      	bmi.n	80141ce <_puts_r+0x9a>
 80141c2:	89a3      	ldrh	r3, [r4, #12]
 80141c4:	059b      	lsls	r3, r3, #22
 80141c6:	d402      	bmi.n	80141ce <_puts_r+0x9a>
 80141c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80141ca:	f000 fab6 	bl	801473a <__retarget_lock_release_recursive>
 80141ce:	4628      	mov	r0, r5
 80141d0:	bd70      	pop	{r4, r5, r6, pc}
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	da04      	bge.n	80141e0 <_puts_r+0xac>
 80141d6:	69a2      	ldr	r2, [r4, #24]
 80141d8:	429a      	cmp	r2, r3
 80141da:	dc06      	bgt.n	80141ea <_puts_r+0xb6>
 80141dc:	290a      	cmp	r1, #10
 80141de:	d004      	beq.n	80141ea <_puts_r+0xb6>
 80141e0:	6823      	ldr	r3, [r4, #0]
 80141e2:	1c5a      	adds	r2, r3, #1
 80141e4:	6022      	str	r2, [r4, #0]
 80141e6:	7019      	strb	r1, [r3, #0]
 80141e8:	e7c5      	b.n	8014176 <_puts_r+0x42>
 80141ea:	4622      	mov	r2, r4
 80141ec:	4628      	mov	r0, r5
 80141ee:	f000 f82b 	bl	8014248 <__swbuf_r>
 80141f2:	3001      	adds	r0, #1
 80141f4:	d1bf      	bne.n	8014176 <_puts_r+0x42>
 80141f6:	e7df      	b.n	80141b8 <_puts_r+0x84>
 80141f8:	6823      	ldr	r3, [r4, #0]
 80141fa:	250a      	movs	r5, #10
 80141fc:	1c5a      	adds	r2, r3, #1
 80141fe:	6022      	str	r2, [r4, #0]
 8014200:	701d      	strb	r5, [r3, #0]
 8014202:	e7db      	b.n	80141bc <_puts_r+0x88>
 8014204:	08015230 	.word	0x08015230
 8014208:	08015250 	.word	0x08015250
 801420c:	08015210 	.word	0x08015210

08014210 <puts>:
 8014210:	4b02      	ldr	r3, [pc, #8]	; (801421c <puts+0xc>)
 8014212:	4601      	mov	r1, r0
 8014214:	6818      	ldr	r0, [r3, #0]
 8014216:	f7ff bf8d 	b.w	8014134 <_puts_r>
 801421a:	bf00      	nop
 801421c:	20000080 	.word	0x20000080

08014220 <strncpy>:
 8014220:	b510      	push	{r4, lr}
 8014222:	3901      	subs	r1, #1
 8014224:	4603      	mov	r3, r0
 8014226:	b132      	cbz	r2, 8014236 <strncpy+0x16>
 8014228:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801422c:	f803 4b01 	strb.w	r4, [r3], #1
 8014230:	3a01      	subs	r2, #1
 8014232:	2c00      	cmp	r4, #0
 8014234:	d1f7      	bne.n	8014226 <strncpy+0x6>
 8014236:	441a      	add	r2, r3
 8014238:	2100      	movs	r1, #0
 801423a:	4293      	cmp	r3, r2
 801423c:	d100      	bne.n	8014240 <strncpy+0x20>
 801423e:	bd10      	pop	{r4, pc}
 8014240:	f803 1b01 	strb.w	r1, [r3], #1
 8014244:	e7f9      	b.n	801423a <strncpy+0x1a>
	...

08014248 <__swbuf_r>:
 8014248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801424a:	460e      	mov	r6, r1
 801424c:	4614      	mov	r4, r2
 801424e:	4605      	mov	r5, r0
 8014250:	b118      	cbz	r0, 801425a <__swbuf_r+0x12>
 8014252:	6983      	ldr	r3, [r0, #24]
 8014254:	b90b      	cbnz	r3, 801425a <__swbuf_r+0x12>
 8014256:	f000 f9d1 	bl	80145fc <__sinit>
 801425a:	4b21      	ldr	r3, [pc, #132]	; (80142e0 <__swbuf_r+0x98>)
 801425c:	429c      	cmp	r4, r3
 801425e:	d12b      	bne.n	80142b8 <__swbuf_r+0x70>
 8014260:	686c      	ldr	r4, [r5, #4]
 8014262:	69a3      	ldr	r3, [r4, #24]
 8014264:	60a3      	str	r3, [r4, #8]
 8014266:	89a3      	ldrh	r3, [r4, #12]
 8014268:	071a      	lsls	r2, r3, #28
 801426a:	d52f      	bpl.n	80142cc <__swbuf_r+0x84>
 801426c:	6923      	ldr	r3, [r4, #16]
 801426e:	b36b      	cbz	r3, 80142cc <__swbuf_r+0x84>
 8014270:	6923      	ldr	r3, [r4, #16]
 8014272:	6820      	ldr	r0, [r4, #0]
 8014274:	1ac0      	subs	r0, r0, r3
 8014276:	6963      	ldr	r3, [r4, #20]
 8014278:	b2f6      	uxtb	r6, r6
 801427a:	4283      	cmp	r3, r0
 801427c:	4637      	mov	r7, r6
 801427e:	dc04      	bgt.n	801428a <__swbuf_r+0x42>
 8014280:	4621      	mov	r1, r4
 8014282:	4628      	mov	r0, r5
 8014284:	f000 f926 	bl	80144d4 <_fflush_r>
 8014288:	bb30      	cbnz	r0, 80142d8 <__swbuf_r+0x90>
 801428a:	68a3      	ldr	r3, [r4, #8]
 801428c:	3b01      	subs	r3, #1
 801428e:	60a3      	str	r3, [r4, #8]
 8014290:	6823      	ldr	r3, [r4, #0]
 8014292:	1c5a      	adds	r2, r3, #1
 8014294:	6022      	str	r2, [r4, #0]
 8014296:	701e      	strb	r6, [r3, #0]
 8014298:	6963      	ldr	r3, [r4, #20]
 801429a:	3001      	adds	r0, #1
 801429c:	4283      	cmp	r3, r0
 801429e:	d004      	beq.n	80142aa <__swbuf_r+0x62>
 80142a0:	89a3      	ldrh	r3, [r4, #12]
 80142a2:	07db      	lsls	r3, r3, #31
 80142a4:	d506      	bpl.n	80142b4 <__swbuf_r+0x6c>
 80142a6:	2e0a      	cmp	r6, #10
 80142a8:	d104      	bne.n	80142b4 <__swbuf_r+0x6c>
 80142aa:	4621      	mov	r1, r4
 80142ac:	4628      	mov	r0, r5
 80142ae:	f000 f911 	bl	80144d4 <_fflush_r>
 80142b2:	b988      	cbnz	r0, 80142d8 <__swbuf_r+0x90>
 80142b4:	4638      	mov	r0, r7
 80142b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142b8:	4b0a      	ldr	r3, [pc, #40]	; (80142e4 <__swbuf_r+0x9c>)
 80142ba:	429c      	cmp	r4, r3
 80142bc:	d101      	bne.n	80142c2 <__swbuf_r+0x7a>
 80142be:	68ac      	ldr	r4, [r5, #8]
 80142c0:	e7cf      	b.n	8014262 <__swbuf_r+0x1a>
 80142c2:	4b09      	ldr	r3, [pc, #36]	; (80142e8 <__swbuf_r+0xa0>)
 80142c4:	429c      	cmp	r4, r3
 80142c6:	bf08      	it	eq
 80142c8:	68ec      	ldreq	r4, [r5, #12]
 80142ca:	e7ca      	b.n	8014262 <__swbuf_r+0x1a>
 80142cc:	4621      	mov	r1, r4
 80142ce:	4628      	mov	r0, r5
 80142d0:	f000 f80c 	bl	80142ec <__swsetup_r>
 80142d4:	2800      	cmp	r0, #0
 80142d6:	d0cb      	beq.n	8014270 <__swbuf_r+0x28>
 80142d8:	f04f 37ff 	mov.w	r7, #4294967295
 80142dc:	e7ea      	b.n	80142b4 <__swbuf_r+0x6c>
 80142de:	bf00      	nop
 80142e0:	08015230 	.word	0x08015230
 80142e4:	08015250 	.word	0x08015250
 80142e8:	08015210 	.word	0x08015210

080142ec <__swsetup_r>:
 80142ec:	4b32      	ldr	r3, [pc, #200]	; (80143b8 <__swsetup_r+0xcc>)
 80142ee:	b570      	push	{r4, r5, r6, lr}
 80142f0:	681d      	ldr	r5, [r3, #0]
 80142f2:	4606      	mov	r6, r0
 80142f4:	460c      	mov	r4, r1
 80142f6:	b125      	cbz	r5, 8014302 <__swsetup_r+0x16>
 80142f8:	69ab      	ldr	r3, [r5, #24]
 80142fa:	b913      	cbnz	r3, 8014302 <__swsetup_r+0x16>
 80142fc:	4628      	mov	r0, r5
 80142fe:	f000 f97d 	bl	80145fc <__sinit>
 8014302:	4b2e      	ldr	r3, [pc, #184]	; (80143bc <__swsetup_r+0xd0>)
 8014304:	429c      	cmp	r4, r3
 8014306:	d10f      	bne.n	8014328 <__swsetup_r+0x3c>
 8014308:	686c      	ldr	r4, [r5, #4]
 801430a:	89a3      	ldrh	r3, [r4, #12]
 801430c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014310:	0719      	lsls	r1, r3, #28
 8014312:	d42c      	bmi.n	801436e <__swsetup_r+0x82>
 8014314:	06dd      	lsls	r5, r3, #27
 8014316:	d411      	bmi.n	801433c <__swsetup_r+0x50>
 8014318:	2309      	movs	r3, #9
 801431a:	6033      	str	r3, [r6, #0]
 801431c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014320:	81a3      	strh	r3, [r4, #12]
 8014322:	f04f 30ff 	mov.w	r0, #4294967295
 8014326:	e03e      	b.n	80143a6 <__swsetup_r+0xba>
 8014328:	4b25      	ldr	r3, [pc, #148]	; (80143c0 <__swsetup_r+0xd4>)
 801432a:	429c      	cmp	r4, r3
 801432c:	d101      	bne.n	8014332 <__swsetup_r+0x46>
 801432e:	68ac      	ldr	r4, [r5, #8]
 8014330:	e7eb      	b.n	801430a <__swsetup_r+0x1e>
 8014332:	4b24      	ldr	r3, [pc, #144]	; (80143c4 <__swsetup_r+0xd8>)
 8014334:	429c      	cmp	r4, r3
 8014336:	bf08      	it	eq
 8014338:	68ec      	ldreq	r4, [r5, #12]
 801433a:	e7e6      	b.n	801430a <__swsetup_r+0x1e>
 801433c:	0758      	lsls	r0, r3, #29
 801433e:	d512      	bpl.n	8014366 <__swsetup_r+0x7a>
 8014340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014342:	b141      	cbz	r1, 8014356 <__swsetup_r+0x6a>
 8014344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014348:	4299      	cmp	r1, r3
 801434a:	d002      	beq.n	8014352 <__swsetup_r+0x66>
 801434c:	4630      	mov	r0, r6
 801434e:	f000 fa59 	bl	8014804 <_free_r>
 8014352:	2300      	movs	r3, #0
 8014354:	6363      	str	r3, [r4, #52]	; 0x34
 8014356:	89a3      	ldrh	r3, [r4, #12]
 8014358:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801435c:	81a3      	strh	r3, [r4, #12]
 801435e:	2300      	movs	r3, #0
 8014360:	6063      	str	r3, [r4, #4]
 8014362:	6923      	ldr	r3, [r4, #16]
 8014364:	6023      	str	r3, [r4, #0]
 8014366:	89a3      	ldrh	r3, [r4, #12]
 8014368:	f043 0308 	orr.w	r3, r3, #8
 801436c:	81a3      	strh	r3, [r4, #12]
 801436e:	6923      	ldr	r3, [r4, #16]
 8014370:	b94b      	cbnz	r3, 8014386 <__swsetup_r+0x9a>
 8014372:	89a3      	ldrh	r3, [r4, #12]
 8014374:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801437c:	d003      	beq.n	8014386 <__swsetup_r+0x9a>
 801437e:	4621      	mov	r1, r4
 8014380:	4630      	mov	r0, r6
 8014382:	f000 f9ff 	bl	8014784 <__smakebuf_r>
 8014386:	89a0      	ldrh	r0, [r4, #12]
 8014388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801438c:	f010 0301 	ands.w	r3, r0, #1
 8014390:	d00a      	beq.n	80143a8 <__swsetup_r+0xbc>
 8014392:	2300      	movs	r3, #0
 8014394:	60a3      	str	r3, [r4, #8]
 8014396:	6963      	ldr	r3, [r4, #20]
 8014398:	425b      	negs	r3, r3
 801439a:	61a3      	str	r3, [r4, #24]
 801439c:	6923      	ldr	r3, [r4, #16]
 801439e:	b943      	cbnz	r3, 80143b2 <__swsetup_r+0xc6>
 80143a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80143a4:	d1ba      	bne.n	801431c <__swsetup_r+0x30>
 80143a6:	bd70      	pop	{r4, r5, r6, pc}
 80143a8:	0781      	lsls	r1, r0, #30
 80143aa:	bf58      	it	pl
 80143ac:	6963      	ldrpl	r3, [r4, #20]
 80143ae:	60a3      	str	r3, [r4, #8]
 80143b0:	e7f4      	b.n	801439c <__swsetup_r+0xb0>
 80143b2:	2000      	movs	r0, #0
 80143b4:	e7f7      	b.n	80143a6 <__swsetup_r+0xba>
 80143b6:	bf00      	nop
 80143b8:	20000080 	.word	0x20000080
 80143bc:	08015230 	.word	0x08015230
 80143c0:	08015250 	.word	0x08015250
 80143c4:	08015210 	.word	0x08015210

080143c8 <__sflush_r>:
 80143c8:	898a      	ldrh	r2, [r1, #12]
 80143ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143ce:	4605      	mov	r5, r0
 80143d0:	0710      	lsls	r0, r2, #28
 80143d2:	460c      	mov	r4, r1
 80143d4:	d458      	bmi.n	8014488 <__sflush_r+0xc0>
 80143d6:	684b      	ldr	r3, [r1, #4]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	dc05      	bgt.n	80143e8 <__sflush_r+0x20>
 80143dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80143de:	2b00      	cmp	r3, #0
 80143e0:	dc02      	bgt.n	80143e8 <__sflush_r+0x20>
 80143e2:	2000      	movs	r0, #0
 80143e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80143ea:	2e00      	cmp	r6, #0
 80143ec:	d0f9      	beq.n	80143e2 <__sflush_r+0x1a>
 80143ee:	2300      	movs	r3, #0
 80143f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80143f4:	682f      	ldr	r7, [r5, #0]
 80143f6:	602b      	str	r3, [r5, #0]
 80143f8:	d032      	beq.n	8014460 <__sflush_r+0x98>
 80143fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80143fc:	89a3      	ldrh	r3, [r4, #12]
 80143fe:	075a      	lsls	r2, r3, #29
 8014400:	d505      	bpl.n	801440e <__sflush_r+0x46>
 8014402:	6863      	ldr	r3, [r4, #4]
 8014404:	1ac0      	subs	r0, r0, r3
 8014406:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014408:	b10b      	cbz	r3, 801440e <__sflush_r+0x46>
 801440a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801440c:	1ac0      	subs	r0, r0, r3
 801440e:	2300      	movs	r3, #0
 8014410:	4602      	mov	r2, r0
 8014412:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014414:	6a21      	ldr	r1, [r4, #32]
 8014416:	4628      	mov	r0, r5
 8014418:	47b0      	blx	r6
 801441a:	1c43      	adds	r3, r0, #1
 801441c:	89a3      	ldrh	r3, [r4, #12]
 801441e:	d106      	bne.n	801442e <__sflush_r+0x66>
 8014420:	6829      	ldr	r1, [r5, #0]
 8014422:	291d      	cmp	r1, #29
 8014424:	d82c      	bhi.n	8014480 <__sflush_r+0xb8>
 8014426:	4a2a      	ldr	r2, [pc, #168]	; (80144d0 <__sflush_r+0x108>)
 8014428:	40ca      	lsrs	r2, r1
 801442a:	07d6      	lsls	r6, r2, #31
 801442c:	d528      	bpl.n	8014480 <__sflush_r+0xb8>
 801442e:	2200      	movs	r2, #0
 8014430:	6062      	str	r2, [r4, #4]
 8014432:	04d9      	lsls	r1, r3, #19
 8014434:	6922      	ldr	r2, [r4, #16]
 8014436:	6022      	str	r2, [r4, #0]
 8014438:	d504      	bpl.n	8014444 <__sflush_r+0x7c>
 801443a:	1c42      	adds	r2, r0, #1
 801443c:	d101      	bne.n	8014442 <__sflush_r+0x7a>
 801443e:	682b      	ldr	r3, [r5, #0]
 8014440:	b903      	cbnz	r3, 8014444 <__sflush_r+0x7c>
 8014442:	6560      	str	r0, [r4, #84]	; 0x54
 8014444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014446:	602f      	str	r7, [r5, #0]
 8014448:	2900      	cmp	r1, #0
 801444a:	d0ca      	beq.n	80143e2 <__sflush_r+0x1a>
 801444c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014450:	4299      	cmp	r1, r3
 8014452:	d002      	beq.n	801445a <__sflush_r+0x92>
 8014454:	4628      	mov	r0, r5
 8014456:	f000 f9d5 	bl	8014804 <_free_r>
 801445a:	2000      	movs	r0, #0
 801445c:	6360      	str	r0, [r4, #52]	; 0x34
 801445e:	e7c1      	b.n	80143e4 <__sflush_r+0x1c>
 8014460:	6a21      	ldr	r1, [r4, #32]
 8014462:	2301      	movs	r3, #1
 8014464:	4628      	mov	r0, r5
 8014466:	47b0      	blx	r6
 8014468:	1c41      	adds	r1, r0, #1
 801446a:	d1c7      	bne.n	80143fc <__sflush_r+0x34>
 801446c:	682b      	ldr	r3, [r5, #0]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d0c4      	beq.n	80143fc <__sflush_r+0x34>
 8014472:	2b1d      	cmp	r3, #29
 8014474:	d001      	beq.n	801447a <__sflush_r+0xb2>
 8014476:	2b16      	cmp	r3, #22
 8014478:	d101      	bne.n	801447e <__sflush_r+0xb6>
 801447a:	602f      	str	r7, [r5, #0]
 801447c:	e7b1      	b.n	80143e2 <__sflush_r+0x1a>
 801447e:	89a3      	ldrh	r3, [r4, #12]
 8014480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014484:	81a3      	strh	r3, [r4, #12]
 8014486:	e7ad      	b.n	80143e4 <__sflush_r+0x1c>
 8014488:	690f      	ldr	r7, [r1, #16]
 801448a:	2f00      	cmp	r7, #0
 801448c:	d0a9      	beq.n	80143e2 <__sflush_r+0x1a>
 801448e:	0793      	lsls	r3, r2, #30
 8014490:	680e      	ldr	r6, [r1, #0]
 8014492:	bf08      	it	eq
 8014494:	694b      	ldreq	r3, [r1, #20]
 8014496:	600f      	str	r7, [r1, #0]
 8014498:	bf18      	it	ne
 801449a:	2300      	movne	r3, #0
 801449c:	eba6 0807 	sub.w	r8, r6, r7
 80144a0:	608b      	str	r3, [r1, #8]
 80144a2:	f1b8 0f00 	cmp.w	r8, #0
 80144a6:	dd9c      	ble.n	80143e2 <__sflush_r+0x1a>
 80144a8:	6a21      	ldr	r1, [r4, #32]
 80144aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80144ac:	4643      	mov	r3, r8
 80144ae:	463a      	mov	r2, r7
 80144b0:	4628      	mov	r0, r5
 80144b2:	47b0      	blx	r6
 80144b4:	2800      	cmp	r0, #0
 80144b6:	dc06      	bgt.n	80144c6 <__sflush_r+0xfe>
 80144b8:	89a3      	ldrh	r3, [r4, #12]
 80144ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144be:	81a3      	strh	r3, [r4, #12]
 80144c0:	f04f 30ff 	mov.w	r0, #4294967295
 80144c4:	e78e      	b.n	80143e4 <__sflush_r+0x1c>
 80144c6:	4407      	add	r7, r0
 80144c8:	eba8 0800 	sub.w	r8, r8, r0
 80144cc:	e7e9      	b.n	80144a2 <__sflush_r+0xda>
 80144ce:	bf00      	nop
 80144d0:	20400001 	.word	0x20400001

080144d4 <_fflush_r>:
 80144d4:	b538      	push	{r3, r4, r5, lr}
 80144d6:	690b      	ldr	r3, [r1, #16]
 80144d8:	4605      	mov	r5, r0
 80144da:	460c      	mov	r4, r1
 80144dc:	b913      	cbnz	r3, 80144e4 <_fflush_r+0x10>
 80144de:	2500      	movs	r5, #0
 80144e0:	4628      	mov	r0, r5
 80144e2:	bd38      	pop	{r3, r4, r5, pc}
 80144e4:	b118      	cbz	r0, 80144ee <_fflush_r+0x1a>
 80144e6:	6983      	ldr	r3, [r0, #24]
 80144e8:	b90b      	cbnz	r3, 80144ee <_fflush_r+0x1a>
 80144ea:	f000 f887 	bl	80145fc <__sinit>
 80144ee:	4b14      	ldr	r3, [pc, #80]	; (8014540 <_fflush_r+0x6c>)
 80144f0:	429c      	cmp	r4, r3
 80144f2:	d11b      	bne.n	801452c <_fflush_r+0x58>
 80144f4:	686c      	ldr	r4, [r5, #4]
 80144f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d0ef      	beq.n	80144de <_fflush_r+0xa>
 80144fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014500:	07d0      	lsls	r0, r2, #31
 8014502:	d404      	bmi.n	801450e <_fflush_r+0x3a>
 8014504:	0599      	lsls	r1, r3, #22
 8014506:	d402      	bmi.n	801450e <_fflush_r+0x3a>
 8014508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801450a:	f000 f915 	bl	8014738 <__retarget_lock_acquire_recursive>
 801450e:	4628      	mov	r0, r5
 8014510:	4621      	mov	r1, r4
 8014512:	f7ff ff59 	bl	80143c8 <__sflush_r>
 8014516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014518:	07da      	lsls	r2, r3, #31
 801451a:	4605      	mov	r5, r0
 801451c:	d4e0      	bmi.n	80144e0 <_fflush_r+0xc>
 801451e:	89a3      	ldrh	r3, [r4, #12]
 8014520:	059b      	lsls	r3, r3, #22
 8014522:	d4dd      	bmi.n	80144e0 <_fflush_r+0xc>
 8014524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014526:	f000 f908 	bl	801473a <__retarget_lock_release_recursive>
 801452a:	e7d9      	b.n	80144e0 <_fflush_r+0xc>
 801452c:	4b05      	ldr	r3, [pc, #20]	; (8014544 <_fflush_r+0x70>)
 801452e:	429c      	cmp	r4, r3
 8014530:	d101      	bne.n	8014536 <_fflush_r+0x62>
 8014532:	68ac      	ldr	r4, [r5, #8]
 8014534:	e7df      	b.n	80144f6 <_fflush_r+0x22>
 8014536:	4b04      	ldr	r3, [pc, #16]	; (8014548 <_fflush_r+0x74>)
 8014538:	429c      	cmp	r4, r3
 801453a:	bf08      	it	eq
 801453c:	68ec      	ldreq	r4, [r5, #12]
 801453e:	e7da      	b.n	80144f6 <_fflush_r+0x22>
 8014540:	08015230 	.word	0x08015230
 8014544:	08015250 	.word	0x08015250
 8014548:	08015210 	.word	0x08015210

0801454c <std>:
 801454c:	2300      	movs	r3, #0
 801454e:	b510      	push	{r4, lr}
 8014550:	4604      	mov	r4, r0
 8014552:	e9c0 3300 	strd	r3, r3, [r0]
 8014556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801455a:	6083      	str	r3, [r0, #8]
 801455c:	8181      	strh	r1, [r0, #12]
 801455e:	6643      	str	r3, [r0, #100]	; 0x64
 8014560:	81c2      	strh	r2, [r0, #14]
 8014562:	6183      	str	r3, [r0, #24]
 8014564:	4619      	mov	r1, r3
 8014566:	2208      	movs	r2, #8
 8014568:	305c      	adds	r0, #92	; 0x5c
 801456a:	f7ff fdc3 	bl	80140f4 <memset>
 801456e:	4b05      	ldr	r3, [pc, #20]	; (8014584 <std+0x38>)
 8014570:	6263      	str	r3, [r4, #36]	; 0x24
 8014572:	4b05      	ldr	r3, [pc, #20]	; (8014588 <std+0x3c>)
 8014574:	62a3      	str	r3, [r4, #40]	; 0x28
 8014576:	4b05      	ldr	r3, [pc, #20]	; (801458c <std+0x40>)
 8014578:	62e3      	str	r3, [r4, #44]	; 0x2c
 801457a:	4b05      	ldr	r3, [pc, #20]	; (8014590 <std+0x44>)
 801457c:	6224      	str	r4, [r4, #32]
 801457e:	6323      	str	r3, [r4, #48]	; 0x30
 8014580:	bd10      	pop	{r4, pc}
 8014582:	bf00      	nop
 8014584:	08014f55 	.word	0x08014f55
 8014588:	08014f77 	.word	0x08014f77
 801458c:	08014faf 	.word	0x08014faf
 8014590:	08014fd3 	.word	0x08014fd3

08014594 <_cleanup_r>:
 8014594:	4901      	ldr	r1, [pc, #4]	; (801459c <_cleanup_r+0x8>)
 8014596:	f000 b8af 	b.w	80146f8 <_fwalk_reent>
 801459a:	bf00      	nop
 801459c:	080144d5 	.word	0x080144d5

080145a0 <__sfmoreglue>:
 80145a0:	b570      	push	{r4, r5, r6, lr}
 80145a2:	1e4a      	subs	r2, r1, #1
 80145a4:	2568      	movs	r5, #104	; 0x68
 80145a6:	4355      	muls	r5, r2
 80145a8:	460e      	mov	r6, r1
 80145aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80145ae:	f000 f979 	bl	80148a4 <_malloc_r>
 80145b2:	4604      	mov	r4, r0
 80145b4:	b140      	cbz	r0, 80145c8 <__sfmoreglue+0x28>
 80145b6:	2100      	movs	r1, #0
 80145b8:	e9c0 1600 	strd	r1, r6, [r0]
 80145bc:	300c      	adds	r0, #12
 80145be:	60a0      	str	r0, [r4, #8]
 80145c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80145c4:	f7ff fd96 	bl	80140f4 <memset>
 80145c8:	4620      	mov	r0, r4
 80145ca:	bd70      	pop	{r4, r5, r6, pc}

080145cc <__sfp_lock_acquire>:
 80145cc:	4801      	ldr	r0, [pc, #4]	; (80145d4 <__sfp_lock_acquire+0x8>)
 80145ce:	f000 b8b3 	b.w	8014738 <__retarget_lock_acquire_recursive>
 80145d2:	bf00      	nop
 80145d4:	20007300 	.word	0x20007300

080145d8 <__sfp_lock_release>:
 80145d8:	4801      	ldr	r0, [pc, #4]	; (80145e0 <__sfp_lock_release+0x8>)
 80145da:	f000 b8ae 	b.w	801473a <__retarget_lock_release_recursive>
 80145de:	bf00      	nop
 80145e0:	20007300 	.word	0x20007300

080145e4 <__sinit_lock_acquire>:
 80145e4:	4801      	ldr	r0, [pc, #4]	; (80145ec <__sinit_lock_acquire+0x8>)
 80145e6:	f000 b8a7 	b.w	8014738 <__retarget_lock_acquire_recursive>
 80145ea:	bf00      	nop
 80145ec:	200072fb 	.word	0x200072fb

080145f0 <__sinit_lock_release>:
 80145f0:	4801      	ldr	r0, [pc, #4]	; (80145f8 <__sinit_lock_release+0x8>)
 80145f2:	f000 b8a2 	b.w	801473a <__retarget_lock_release_recursive>
 80145f6:	bf00      	nop
 80145f8:	200072fb 	.word	0x200072fb

080145fc <__sinit>:
 80145fc:	b510      	push	{r4, lr}
 80145fe:	4604      	mov	r4, r0
 8014600:	f7ff fff0 	bl	80145e4 <__sinit_lock_acquire>
 8014604:	69a3      	ldr	r3, [r4, #24]
 8014606:	b11b      	cbz	r3, 8014610 <__sinit+0x14>
 8014608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801460c:	f7ff bff0 	b.w	80145f0 <__sinit_lock_release>
 8014610:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014614:	6523      	str	r3, [r4, #80]	; 0x50
 8014616:	4b13      	ldr	r3, [pc, #76]	; (8014664 <__sinit+0x68>)
 8014618:	4a13      	ldr	r2, [pc, #76]	; (8014668 <__sinit+0x6c>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	62a2      	str	r2, [r4, #40]	; 0x28
 801461e:	42a3      	cmp	r3, r4
 8014620:	bf04      	itt	eq
 8014622:	2301      	moveq	r3, #1
 8014624:	61a3      	streq	r3, [r4, #24]
 8014626:	4620      	mov	r0, r4
 8014628:	f000 f820 	bl	801466c <__sfp>
 801462c:	6060      	str	r0, [r4, #4]
 801462e:	4620      	mov	r0, r4
 8014630:	f000 f81c 	bl	801466c <__sfp>
 8014634:	60a0      	str	r0, [r4, #8]
 8014636:	4620      	mov	r0, r4
 8014638:	f000 f818 	bl	801466c <__sfp>
 801463c:	2200      	movs	r2, #0
 801463e:	60e0      	str	r0, [r4, #12]
 8014640:	2104      	movs	r1, #4
 8014642:	6860      	ldr	r0, [r4, #4]
 8014644:	f7ff ff82 	bl	801454c <std>
 8014648:	68a0      	ldr	r0, [r4, #8]
 801464a:	2201      	movs	r2, #1
 801464c:	2109      	movs	r1, #9
 801464e:	f7ff ff7d 	bl	801454c <std>
 8014652:	68e0      	ldr	r0, [r4, #12]
 8014654:	2202      	movs	r2, #2
 8014656:	2112      	movs	r1, #18
 8014658:	f7ff ff78 	bl	801454c <std>
 801465c:	2301      	movs	r3, #1
 801465e:	61a3      	str	r3, [r4, #24]
 8014660:	e7d2      	b.n	8014608 <__sinit+0xc>
 8014662:	bf00      	nop
 8014664:	0801520c 	.word	0x0801520c
 8014668:	08014595 	.word	0x08014595

0801466c <__sfp>:
 801466c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801466e:	4607      	mov	r7, r0
 8014670:	f7ff ffac 	bl	80145cc <__sfp_lock_acquire>
 8014674:	4b1e      	ldr	r3, [pc, #120]	; (80146f0 <__sfp+0x84>)
 8014676:	681e      	ldr	r6, [r3, #0]
 8014678:	69b3      	ldr	r3, [r6, #24]
 801467a:	b913      	cbnz	r3, 8014682 <__sfp+0x16>
 801467c:	4630      	mov	r0, r6
 801467e:	f7ff ffbd 	bl	80145fc <__sinit>
 8014682:	3648      	adds	r6, #72	; 0x48
 8014684:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014688:	3b01      	subs	r3, #1
 801468a:	d503      	bpl.n	8014694 <__sfp+0x28>
 801468c:	6833      	ldr	r3, [r6, #0]
 801468e:	b30b      	cbz	r3, 80146d4 <__sfp+0x68>
 8014690:	6836      	ldr	r6, [r6, #0]
 8014692:	e7f7      	b.n	8014684 <__sfp+0x18>
 8014694:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014698:	b9d5      	cbnz	r5, 80146d0 <__sfp+0x64>
 801469a:	4b16      	ldr	r3, [pc, #88]	; (80146f4 <__sfp+0x88>)
 801469c:	60e3      	str	r3, [r4, #12]
 801469e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80146a2:	6665      	str	r5, [r4, #100]	; 0x64
 80146a4:	f000 f847 	bl	8014736 <__retarget_lock_init_recursive>
 80146a8:	f7ff ff96 	bl	80145d8 <__sfp_lock_release>
 80146ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80146b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80146b4:	6025      	str	r5, [r4, #0]
 80146b6:	61a5      	str	r5, [r4, #24]
 80146b8:	2208      	movs	r2, #8
 80146ba:	4629      	mov	r1, r5
 80146bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80146c0:	f7ff fd18 	bl	80140f4 <memset>
 80146c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80146c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80146cc:	4620      	mov	r0, r4
 80146ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146d0:	3468      	adds	r4, #104	; 0x68
 80146d2:	e7d9      	b.n	8014688 <__sfp+0x1c>
 80146d4:	2104      	movs	r1, #4
 80146d6:	4638      	mov	r0, r7
 80146d8:	f7ff ff62 	bl	80145a0 <__sfmoreglue>
 80146dc:	4604      	mov	r4, r0
 80146de:	6030      	str	r0, [r6, #0]
 80146e0:	2800      	cmp	r0, #0
 80146e2:	d1d5      	bne.n	8014690 <__sfp+0x24>
 80146e4:	f7ff ff78 	bl	80145d8 <__sfp_lock_release>
 80146e8:	230c      	movs	r3, #12
 80146ea:	603b      	str	r3, [r7, #0]
 80146ec:	e7ee      	b.n	80146cc <__sfp+0x60>
 80146ee:	bf00      	nop
 80146f0:	0801520c 	.word	0x0801520c
 80146f4:	ffff0001 	.word	0xffff0001

080146f8 <_fwalk_reent>:
 80146f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146fc:	4606      	mov	r6, r0
 80146fe:	4688      	mov	r8, r1
 8014700:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014704:	2700      	movs	r7, #0
 8014706:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801470a:	f1b9 0901 	subs.w	r9, r9, #1
 801470e:	d505      	bpl.n	801471c <_fwalk_reent+0x24>
 8014710:	6824      	ldr	r4, [r4, #0]
 8014712:	2c00      	cmp	r4, #0
 8014714:	d1f7      	bne.n	8014706 <_fwalk_reent+0xe>
 8014716:	4638      	mov	r0, r7
 8014718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801471c:	89ab      	ldrh	r3, [r5, #12]
 801471e:	2b01      	cmp	r3, #1
 8014720:	d907      	bls.n	8014732 <_fwalk_reent+0x3a>
 8014722:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014726:	3301      	adds	r3, #1
 8014728:	d003      	beq.n	8014732 <_fwalk_reent+0x3a>
 801472a:	4629      	mov	r1, r5
 801472c:	4630      	mov	r0, r6
 801472e:	47c0      	blx	r8
 8014730:	4307      	orrs	r7, r0
 8014732:	3568      	adds	r5, #104	; 0x68
 8014734:	e7e9      	b.n	801470a <_fwalk_reent+0x12>

08014736 <__retarget_lock_init_recursive>:
 8014736:	4770      	bx	lr

08014738 <__retarget_lock_acquire_recursive>:
 8014738:	4770      	bx	lr

0801473a <__retarget_lock_release_recursive>:
 801473a:	4770      	bx	lr

0801473c <__swhatbuf_r>:
 801473c:	b570      	push	{r4, r5, r6, lr}
 801473e:	460e      	mov	r6, r1
 8014740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014744:	2900      	cmp	r1, #0
 8014746:	b096      	sub	sp, #88	; 0x58
 8014748:	4614      	mov	r4, r2
 801474a:	461d      	mov	r5, r3
 801474c:	da07      	bge.n	801475e <__swhatbuf_r+0x22>
 801474e:	2300      	movs	r3, #0
 8014750:	602b      	str	r3, [r5, #0]
 8014752:	89b3      	ldrh	r3, [r6, #12]
 8014754:	061a      	lsls	r2, r3, #24
 8014756:	d410      	bmi.n	801477a <__swhatbuf_r+0x3e>
 8014758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801475c:	e00e      	b.n	801477c <__swhatbuf_r+0x40>
 801475e:	466a      	mov	r2, sp
 8014760:	f000 fc5e 	bl	8015020 <_fstat_r>
 8014764:	2800      	cmp	r0, #0
 8014766:	dbf2      	blt.n	801474e <__swhatbuf_r+0x12>
 8014768:	9a01      	ldr	r2, [sp, #4]
 801476a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801476e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014772:	425a      	negs	r2, r3
 8014774:	415a      	adcs	r2, r3
 8014776:	602a      	str	r2, [r5, #0]
 8014778:	e7ee      	b.n	8014758 <__swhatbuf_r+0x1c>
 801477a:	2340      	movs	r3, #64	; 0x40
 801477c:	2000      	movs	r0, #0
 801477e:	6023      	str	r3, [r4, #0]
 8014780:	b016      	add	sp, #88	; 0x58
 8014782:	bd70      	pop	{r4, r5, r6, pc}

08014784 <__smakebuf_r>:
 8014784:	898b      	ldrh	r3, [r1, #12]
 8014786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014788:	079d      	lsls	r5, r3, #30
 801478a:	4606      	mov	r6, r0
 801478c:	460c      	mov	r4, r1
 801478e:	d507      	bpl.n	80147a0 <__smakebuf_r+0x1c>
 8014790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014794:	6023      	str	r3, [r4, #0]
 8014796:	6123      	str	r3, [r4, #16]
 8014798:	2301      	movs	r3, #1
 801479a:	6163      	str	r3, [r4, #20]
 801479c:	b002      	add	sp, #8
 801479e:	bd70      	pop	{r4, r5, r6, pc}
 80147a0:	ab01      	add	r3, sp, #4
 80147a2:	466a      	mov	r2, sp
 80147a4:	f7ff ffca 	bl	801473c <__swhatbuf_r>
 80147a8:	9900      	ldr	r1, [sp, #0]
 80147aa:	4605      	mov	r5, r0
 80147ac:	4630      	mov	r0, r6
 80147ae:	f000 f879 	bl	80148a4 <_malloc_r>
 80147b2:	b948      	cbnz	r0, 80147c8 <__smakebuf_r+0x44>
 80147b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147b8:	059a      	lsls	r2, r3, #22
 80147ba:	d4ef      	bmi.n	801479c <__smakebuf_r+0x18>
 80147bc:	f023 0303 	bic.w	r3, r3, #3
 80147c0:	f043 0302 	orr.w	r3, r3, #2
 80147c4:	81a3      	strh	r3, [r4, #12]
 80147c6:	e7e3      	b.n	8014790 <__smakebuf_r+0xc>
 80147c8:	4b0d      	ldr	r3, [pc, #52]	; (8014800 <__smakebuf_r+0x7c>)
 80147ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80147cc:	89a3      	ldrh	r3, [r4, #12]
 80147ce:	6020      	str	r0, [r4, #0]
 80147d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80147d4:	81a3      	strh	r3, [r4, #12]
 80147d6:	9b00      	ldr	r3, [sp, #0]
 80147d8:	6163      	str	r3, [r4, #20]
 80147da:	9b01      	ldr	r3, [sp, #4]
 80147dc:	6120      	str	r0, [r4, #16]
 80147de:	b15b      	cbz	r3, 80147f8 <__smakebuf_r+0x74>
 80147e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80147e4:	4630      	mov	r0, r6
 80147e6:	f000 fc2d 	bl	8015044 <_isatty_r>
 80147ea:	b128      	cbz	r0, 80147f8 <__smakebuf_r+0x74>
 80147ec:	89a3      	ldrh	r3, [r4, #12]
 80147ee:	f023 0303 	bic.w	r3, r3, #3
 80147f2:	f043 0301 	orr.w	r3, r3, #1
 80147f6:	81a3      	strh	r3, [r4, #12]
 80147f8:	89a0      	ldrh	r0, [r4, #12]
 80147fa:	4305      	orrs	r5, r0
 80147fc:	81a5      	strh	r5, [r4, #12]
 80147fe:	e7cd      	b.n	801479c <__smakebuf_r+0x18>
 8014800:	08014595 	.word	0x08014595

08014804 <_free_r>:
 8014804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014806:	2900      	cmp	r1, #0
 8014808:	d048      	beq.n	801489c <_free_r+0x98>
 801480a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801480e:	9001      	str	r0, [sp, #4]
 8014810:	2b00      	cmp	r3, #0
 8014812:	f1a1 0404 	sub.w	r4, r1, #4
 8014816:	bfb8      	it	lt
 8014818:	18e4      	addlt	r4, r4, r3
 801481a:	f000 fc35 	bl	8015088 <__malloc_lock>
 801481e:	4a20      	ldr	r2, [pc, #128]	; (80148a0 <_free_r+0x9c>)
 8014820:	9801      	ldr	r0, [sp, #4]
 8014822:	6813      	ldr	r3, [r2, #0]
 8014824:	4615      	mov	r5, r2
 8014826:	b933      	cbnz	r3, 8014836 <_free_r+0x32>
 8014828:	6063      	str	r3, [r4, #4]
 801482a:	6014      	str	r4, [r2, #0]
 801482c:	b003      	add	sp, #12
 801482e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014832:	f000 bc2f 	b.w	8015094 <__malloc_unlock>
 8014836:	42a3      	cmp	r3, r4
 8014838:	d90b      	bls.n	8014852 <_free_r+0x4e>
 801483a:	6821      	ldr	r1, [r4, #0]
 801483c:	1862      	adds	r2, r4, r1
 801483e:	4293      	cmp	r3, r2
 8014840:	bf04      	itt	eq
 8014842:	681a      	ldreq	r2, [r3, #0]
 8014844:	685b      	ldreq	r3, [r3, #4]
 8014846:	6063      	str	r3, [r4, #4]
 8014848:	bf04      	itt	eq
 801484a:	1852      	addeq	r2, r2, r1
 801484c:	6022      	streq	r2, [r4, #0]
 801484e:	602c      	str	r4, [r5, #0]
 8014850:	e7ec      	b.n	801482c <_free_r+0x28>
 8014852:	461a      	mov	r2, r3
 8014854:	685b      	ldr	r3, [r3, #4]
 8014856:	b10b      	cbz	r3, 801485c <_free_r+0x58>
 8014858:	42a3      	cmp	r3, r4
 801485a:	d9fa      	bls.n	8014852 <_free_r+0x4e>
 801485c:	6811      	ldr	r1, [r2, #0]
 801485e:	1855      	adds	r5, r2, r1
 8014860:	42a5      	cmp	r5, r4
 8014862:	d10b      	bne.n	801487c <_free_r+0x78>
 8014864:	6824      	ldr	r4, [r4, #0]
 8014866:	4421      	add	r1, r4
 8014868:	1854      	adds	r4, r2, r1
 801486a:	42a3      	cmp	r3, r4
 801486c:	6011      	str	r1, [r2, #0]
 801486e:	d1dd      	bne.n	801482c <_free_r+0x28>
 8014870:	681c      	ldr	r4, [r3, #0]
 8014872:	685b      	ldr	r3, [r3, #4]
 8014874:	6053      	str	r3, [r2, #4]
 8014876:	4421      	add	r1, r4
 8014878:	6011      	str	r1, [r2, #0]
 801487a:	e7d7      	b.n	801482c <_free_r+0x28>
 801487c:	d902      	bls.n	8014884 <_free_r+0x80>
 801487e:	230c      	movs	r3, #12
 8014880:	6003      	str	r3, [r0, #0]
 8014882:	e7d3      	b.n	801482c <_free_r+0x28>
 8014884:	6825      	ldr	r5, [r4, #0]
 8014886:	1961      	adds	r1, r4, r5
 8014888:	428b      	cmp	r3, r1
 801488a:	bf04      	itt	eq
 801488c:	6819      	ldreq	r1, [r3, #0]
 801488e:	685b      	ldreq	r3, [r3, #4]
 8014890:	6063      	str	r3, [r4, #4]
 8014892:	bf04      	itt	eq
 8014894:	1949      	addeq	r1, r1, r5
 8014896:	6021      	streq	r1, [r4, #0]
 8014898:	6054      	str	r4, [r2, #4]
 801489a:	e7c7      	b.n	801482c <_free_r+0x28>
 801489c:	b003      	add	sp, #12
 801489e:	bd30      	pop	{r4, r5, pc}
 80148a0:	20007010 	.word	0x20007010

080148a4 <_malloc_r>:
 80148a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148a6:	1ccd      	adds	r5, r1, #3
 80148a8:	f025 0503 	bic.w	r5, r5, #3
 80148ac:	3508      	adds	r5, #8
 80148ae:	2d0c      	cmp	r5, #12
 80148b0:	bf38      	it	cc
 80148b2:	250c      	movcc	r5, #12
 80148b4:	2d00      	cmp	r5, #0
 80148b6:	4606      	mov	r6, r0
 80148b8:	db01      	blt.n	80148be <_malloc_r+0x1a>
 80148ba:	42a9      	cmp	r1, r5
 80148bc:	d903      	bls.n	80148c6 <_malloc_r+0x22>
 80148be:	230c      	movs	r3, #12
 80148c0:	6033      	str	r3, [r6, #0]
 80148c2:	2000      	movs	r0, #0
 80148c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148c6:	f000 fbdf 	bl	8015088 <__malloc_lock>
 80148ca:	4921      	ldr	r1, [pc, #132]	; (8014950 <_malloc_r+0xac>)
 80148cc:	680a      	ldr	r2, [r1, #0]
 80148ce:	4614      	mov	r4, r2
 80148d0:	b99c      	cbnz	r4, 80148fa <_malloc_r+0x56>
 80148d2:	4f20      	ldr	r7, [pc, #128]	; (8014954 <_malloc_r+0xb0>)
 80148d4:	683b      	ldr	r3, [r7, #0]
 80148d6:	b923      	cbnz	r3, 80148e2 <_malloc_r+0x3e>
 80148d8:	4621      	mov	r1, r4
 80148da:	4630      	mov	r0, r6
 80148dc:	f000 fb2a 	bl	8014f34 <_sbrk_r>
 80148e0:	6038      	str	r0, [r7, #0]
 80148e2:	4629      	mov	r1, r5
 80148e4:	4630      	mov	r0, r6
 80148e6:	f000 fb25 	bl	8014f34 <_sbrk_r>
 80148ea:	1c43      	adds	r3, r0, #1
 80148ec:	d123      	bne.n	8014936 <_malloc_r+0x92>
 80148ee:	230c      	movs	r3, #12
 80148f0:	6033      	str	r3, [r6, #0]
 80148f2:	4630      	mov	r0, r6
 80148f4:	f000 fbce 	bl	8015094 <__malloc_unlock>
 80148f8:	e7e3      	b.n	80148c2 <_malloc_r+0x1e>
 80148fa:	6823      	ldr	r3, [r4, #0]
 80148fc:	1b5b      	subs	r3, r3, r5
 80148fe:	d417      	bmi.n	8014930 <_malloc_r+0x8c>
 8014900:	2b0b      	cmp	r3, #11
 8014902:	d903      	bls.n	801490c <_malloc_r+0x68>
 8014904:	6023      	str	r3, [r4, #0]
 8014906:	441c      	add	r4, r3
 8014908:	6025      	str	r5, [r4, #0]
 801490a:	e004      	b.n	8014916 <_malloc_r+0x72>
 801490c:	6863      	ldr	r3, [r4, #4]
 801490e:	42a2      	cmp	r2, r4
 8014910:	bf0c      	ite	eq
 8014912:	600b      	streq	r3, [r1, #0]
 8014914:	6053      	strne	r3, [r2, #4]
 8014916:	4630      	mov	r0, r6
 8014918:	f000 fbbc 	bl	8015094 <__malloc_unlock>
 801491c:	f104 000b 	add.w	r0, r4, #11
 8014920:	1d23      	adds	r3, r4, #4
 8014922:	f020 0007 	bic.w	r0, r0, #7
 8014926:	1ac2      	subs	r2, r0, r3
 8014928:	d0cc      	beq.n	80148c4 <_malloc_r+0x20>
 801492a:	1a1b      	subs	r3, r3, r0
 801492c:	50a3      	str	r3, [r4, r2]
 801492e:	e7c9      	b.n	80148c4 <_malloc_r+0x20>
 8014930:	4622      	mov	r2, r4
 8014932:	6864      	ldr	r4, [r4, #4]
 8014934:	e7cc      	b.n	80148d0 <_malloc_r+0x2c>
 8014936:	1cc4      	adds	r4, r0, #3
 8014938:	f024 0403 	bic.w	r4, r4, #3
 801493c:	42a0      	cmp	r0, r4
 801493e:	d0e3      	beq.n	8014908 <_malloc_r+0x64>
 8014940:	1a21      	subs	r1, r4, r0
 8014942:	4630      	mov	r0, r6
 8014944:	f000 faf6 	bl	8014f34 <_sbrk_r>
 8014948:	3001      	adds	r0, #1
 801494a:	d1dd      	bne.n	8014908 <_malloc_r+0x64>
 801494c:	e7cf      	b.n	80148ee <_malloc_r+0x4a>
 801494e:	bf00      	nop
 8014950:	20007010 	.word	0x20007010
 8014954:	20007014 	.word	0x20007014

08014958 <__sfputc_r>:
 8014958:	6893      	ldr	r3, [r2, #8]
 801495a:	3b01      	subs	r3, #1
 801495c:	2b00      	cmp	r3, #0
 801495e:	b410      	push	{r4}
 8014960:	6093      	str	r3, [r2, #8]
 8014962:	da08      	bge.n	8014976 <__sfputc_r+0x1e>
 8014964:	6994      	ldr	r4, [r2, #24]
 8014966:	42a3      	cmp	r3, r4
 8014968:	db01      	blt.n	801496e <__sfputc_r+0x16>
 801496a:	290a      	cmp	r1, #10
 801496c:	d103      	bne.n	8014976 <__sfputc_r+0x1e>
 801496e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014972:	f7ff bc69 	b.w	8014248 <__swbuf_r>
 8014976:	6813      	ldr	r3, [r2, #0]
 8014978:	1c58      	adds	r0, r3, #1
 801497a:	6010      	str	r0, [r2, #0]
 801497c:	7019      	strb	r1, [r3, #0]
 801497e:	4608      	mov	r0, r1
 8014980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014984:	4770      	bx	lr

08014986 <__sfputs_r>:
 8014986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014988:	4606      	mov	r6, r0
 801498a:	460f      	mov	r7, r1
 801498c:	4614      	mov	r4, r2
 801498e:	18d5      	adds	r5, r2, r3
 8014990:	42ac      	cmp	r4, r5
 8014992:	d101      	bne.n	8014998 <__sfputs_r+0x12>
 8014994:	2000      	movs	r0, #0
 8014996:	e007      	b.n	80149a8 <__sfputs_r+0x22>
 8014998:	f814 1b01 	ldrb.w	r1, [r4], #1
 801499c:	463a      	mov	r2, r7
 801499e:	4630      	mov	r0, r6
 80149a0:	f7ff ffda 	bl	8014958 <__sfputc_r>
 80149a4:	1c43      	adds	r3, r0, #1
 80149a6:	d1f3      	bne.n	8014990 <__sfputs_r+0xa>
 80149a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080149ac <_vfiprintf_r>:
 80149ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149b0:	460d      	mov	r5, r1
 80149b2:	b09d      	sub	sp, #116	; 0x74
 80149b4:	4614      	mov	r4, r2
 80149b6:	4698      	mov	r8, r3
 80149b8:	4606      	mov	r6, r0
 80149ba:	b118      	cbz	r0, 80149c4 <_vfiprintf_r+0x18>
 80149bc:	6983      	ldr	r3, [r0, #24]
 80149be:	b90b      	cbnz	r3, 80149c4 <_vfiprintf_r+0x18>
 80149c0:	f7ff fe1c 	bl	80145fc <__sinit>
 80149c4:	4b89      	ldr	r3, [pc, #548]	; (8014bec <_vfiprintf_r+0x240>)
 80149c6:	429d      	cmp	r5, r3
 80149c8:	d11b      	bne.n	8014a02 <_vfiprintf_r+0x56>
 80149ca:	6875      	ldr	r5, [r6, #4]
 80149cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149ce:	07d9      	lsls	r1, r3, #31
 80149d0:	d405      	bmi.n	80149de <_vfiprintf_r+0x32>
 80149d2:	89ab      	ldrh	r3, [r5, #12]
 80149d4:	059a      	lsls	r2, r3, #22
 80149d6:	d402      	bmi.n	80149de <_vfiprintf_r+0x32>
 80149d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80149da:	f7ff fead 	bl	8014738 <__retarget_lock_acquire_recursive>
 80149de:	89ab      	ldrh	r3, [r5, #12]
 80149e0:	071b      	lsls	r3, r3, #28
 80149e2:	d501      	bpl.n	80149e8 <_vfiprintf_r+0x3c>
 80149e4:	692b      	ldr	r3, [r5, #16]
 80149e6:	b9eb      	cbnz	r3, 8014a24 <_vfiprintf_r+0x78>
 80149e8:	4629      	mov	r1, r5
 80149ea:	4630      	mov	r0, r6
 80149ec:	f7ff fc7e 	bl	80142ec <__swsetup_r>
 80149f0:	b1c0      	cbz	r0, 8014a24 <_vfiprintf_r+0x78>
 80149f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149f4:	07dc      	lsls	r4, r3, #31
 80149f6:	d50e      	bpl.n	8014a16 <_vfiprintf_r+0x6a>
 80149f8:	f04f 30ff 	mov.w	r0, #4294967295
 80149fc:	b01d      	add	sp, #116	; 0x74
 80149fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a02:	4b7b      	ldr	r3, [pc, #492]	; (8014bf0 <_vfiprintf_r+0x244>)
 8014a04:	429d      	cmp	r5, r3
 8014a06:	d101      	bne.n	8014a0c <_vfiprintf_r+0x60>
 8014a08:	68b5      	ldr	r5, [r6, #8]
 8014a0a:	e7df      	b.n	80149cc <_vfiprintf_r+0x20>
 8014a0c:	4b79      	ldr	r3, [pc, #484]	; (8014bf4 <_vfiprintf_r+0x248>)
 8014a0e:	429d      	cmp	r5, r3
 8014a10:	bf08      	it	eq
 8014a12:	68f5      	ldreq	r5, [r6, #12]
 8014a14:	e7da      	b.n	80149cc <_vfiprintf_r+0x20>
 8014a16:	89ab      	ldrh	r3, [r5, #12]
 8014a18:	0598      	lsls	r0, r3, #22
 8014a1a:	d4ed      	bmi.n	80149f8 <_vfiprintf_r+0x4c>
 8014a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a1e:	f7ff fe8c 	bl	801473a <__retarget_lock_release_recursive>
 8014a22:	e7e9      	b.n	80149f8 <_vfiprintf_r+0x4c>
 8014a24:	2300      	movs	r3, #0
 8014a26:	9309      	str	r3, [sp, #36]	; 0x24
 8014a28:	2320      	movs	r3, #32
 8014a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a32:	2330      	movs	r3, #48	; 0x30
 8014a34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014bf8 <_vfiprintf_r+0x24c>
 8014a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014a3c:	f04f 0901 	mov.w	r9, #1
 8014a40:	4623      	mov	r3, r4
 8014a42:	469a      	mov	sl, r3
 8014a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a48:	b10a      	cbz	r2, 8014a4e <_vfiprintf_r+0xa2>
 8014a4a:	2a25      	cmp	r2, #37	; 0x25
 8014a4c:	d1f9      	bne.n	8014a42 <_vfiprintf_r+0x96>
 8014a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8014a52:	d00b      	beq.n	8014a6c <_vfiprintf_r+0xc0>
 8014a54:	465b      	mov	r3, fp
 8014a56:	4622      	mov	r2, r4
 8014a58:	4629      	mov	r1, r5
 8014a5a:	4630      	mov	r0, r6
 8014a5c:	f7ff ff93 	bl	8014986 <__sfputs_r>
 8014a60:	3001      	adds	r0, #1
 8014a62:	f000 80aa 	beq.w	8014bba <_vfiprintf_r+0x20e>
 8014a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a68:	445a      	add	r2, fp
 8014a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8014a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	f000 80a2 	beq.w	8014bba <_vfiprintf_r+0x20e>
 8014a76:	2300      	movs	r3, #0
 8014a78:	f04f 32ff 	mov.w	r2, #4294967295
 8014a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a80:	f10a 0a01 	add.w	sl, sl, #1
 8014a84:	9304      	str	r3, [sp, #16]
 8014a86:	9307      	str	r3, [sp, #28]
 8014a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8014a8e:	4654      	mov	r4, sl
 8014a90:	2205      	movs	r2, #5
 8014a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a96:	4858      	ldr	r0, [pc, #352]	; (8014bf8 <_vfiprintf_r+0x24c>)
 8014a98:	f7eb fba2 	bl	80001e0 <memchr>
 8014a9c:	9a04      	ldr	r2, [sp, #16]
 8014a9e:	b9d8      	cbnz	r0, 8014ad8 <_vfiprintf_r+0x12c>
 8014aa0:	06d1      	lsls	r1, r2, #27
 8014aa2:	bf44      	itt	mi
 8014aa4:	2320      	movmi	r3, #32
 8014aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014aaa:	0713      	lsls	r3, r2, #28
 8014aac:	bf44      	itt	mi
 8014aae:	232b      	movmi	r3, #43	; 0x2b
 8014ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8014ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8014aba:	d015      	beq.n	8014ae8 <_vfiprintf_r+0x13c>
 8014abc:	9a07      	ldr	r2, [sp, #28]
 8014abe:	4654      	mov	r4, sl
 8014ac0:	2000      	movs	r0, #0
 8014ac2:	f04f 0c0a 	mov.w	ip, #10
 8014ac6:	4621      	mov	r1, r4
 8014ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014acc:	3b30      	subs	r3, #48	; 0x30
 8014ace:	2b09      	cmp	r3, #9
 8014ad0:	d94e      	bls.n	8014b70 <_vfiprintf_r+0x1c4>
 8014ad2:	b1b0      	cbz	r0, 8014b02 <_vfiprintf_r+0x156>
 8014ad4:	9207      	str	r2, [sp, #28]
 8014ad6:	e014      	b.n	8014b02 <_vfiprintf_r+0x156>
 8014ad8:	eba0 0308 	sub.w	r3, r0, r8
 8014adc:	fa09 f303 	lsl.w	r3, r9, r3
 8014ae0:	4313      	orrs	r3, r2
 8014ae2:	9304      	str	r3, [sp, #16]
 8014ae4:	46a2      	mov	sl, r4
 8014ae6:	e7d2      	b.n	8014a8e <_vfiprintf_r+0xe2>
 8014ae8:	9b03      	ldr	r3, [sp, #12]
 8014aea:	1d19      	adds	r1, r3, #4
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	9103      	str	r1, [sp, #12]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	bfbb      	ittet	lt
 8014af4:	425b      	neglt	r3, r3
 8014af6:	f042 0202 	orrlt.w	r2, r2, #2
 8014afa:	9307      	strge	r3, [sp, #28]
 8014afc:	9307      	strlt	r3, [sp, #28]
 8014afe:	bfb8      	it	lt
 8014b00:	9204      	strlt	r2, [sp, #16]
 8014b02:	7823      	ldrb	r3, [r4, #0]
 8014b04:	2b2e      	cmp	r3, #46	; 0x2e
 8014b06:	d10c      	bne.n	8014b22 <_vfiprintf_r+0x176>
 8014b08:	7863      	ldrb	r3, [r4, #1]
 8014b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8014b0c:	d135      	bne.n	8014b7a <_vfiprintf_r+0x1ce>
 8014b0e:	9b03      	ldr	r3, [sp, #12]
 8014b10:	1d1a      	adds	r2, r3, #4
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	9203      	str	r2, [sp, #12]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	bfb8      	it	lt
 8014b1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8014b1e:	3402      	adds	r4, #2
 8014b20:	9305      	str	r3, [sp, #20]
 8014b22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014c08 <_vfiprintf_r+0x25c>
 8014b26:	7821      	ldrb	r1, [r4, #0]
 8014b28:	2203      	movs	r2, #3
 8014b2a:	4650      	mov	r0, sl
 8014b2c:	f7eb fb58 	bl	80001e0 <memchr>
 8014b30:	b140      	cbz	r0, 8014b44 <_vfiprintf_r+0x198>
 8014b32:	2340      	movs	r3, #64	; 0x40
 8014b34:	eba0 000a 	sub.w	r0, r0, sl
 8014b38:	fa03 f000 	lsl.w	r0, r3, r0
 8014b3c:	9b04      	ldr	r3, [sp, #16]
 8014b3e:	4303      	orrs	r3, r0
 8014b40:	3401      	adds	r4, #1
 8014b42:	9304      	str	r3, [sp, #16]
 8014b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b48:	482c      	ldr	r0, [pc, #176]	; (8014bfc <_vfiprintf_r+0x250>)
 8014b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014b4e:	2206      	movs	r2, #6
 8014b50:	f7eb fb46 	bl	80001e0 <memchr>
 8014b54:	2800      	cmp	r0, #0
 8014b56:	d03f      	beq.n	8014bd8 <_vfiprintf_r+0x22c>
 8014b58:	4b29      	ldr	r3, [pc, #164]	; (8014c00 <_vfiprintf_r+0x254>)
 8014b5a:	bb1b      	cbnz	r3, 8014ba4 <_vfiprintf_r+0x1f8>
 8014b5c:	9b03      	ldr	r3, [sp, #12]
 8014b5e:	3307      	adds	r3, #7
 8014b60:	f023 0307 	bic.w	r3, r3, #7
 8014b64:	3308      	adds	r3, #8
 8014b66:	9303      	str	r3, [sp, #12]
 8014b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b6a:	443b      	add	r3, r7
 8014b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8014b6e:	e767      	b.n	8014a40 <_vfiprintf_r+0x94>
 8014b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b74:	460c      	mov	r4, r1
 8014b76:	2001      	movs	r0, #1
 8014b78:	e7a5      	b.n	8014ac6 <_vfiprintf_r+0x11a>
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	3401      	adds	r4, #1
 8014b7e:	9305      	str	r3, [sp, #20]
 8014b80:	4619      	mov	r1, r3
 8014b82:	f04f 0c0a 	mov.w	ip, #10
 8014b86:	4620      	mov	r0, r4
 8014b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b8c:	3a30      	subs	r2, #48	; 0x30
 8014b8e:	2a09      	cmp	r2, #9
 8014b90:	d903      	bls.n	8014b9a <_vfiprintf_r+0x1ee>
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d0c5      	beq.n	8014b22 <_vfiprintf_r+0x176>
 8014b96:	9105      	str	r1, [sp, #20]
 8014b98:	e7c3      	b.n	8014b22 <_vfiprintf_r+0x176>
 8014b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b9e:	4604      	mov	r4, r0
 8014ba0:	2301      	movs	r3, #1
 8014ba2:	e7f0      	b.n	8014b86 <_vfiprintf_r+0x1da>
 8014ba4:	ab03      	add	r3, sp, #12
 8014ba6:	9300      	str	r3, [sp, #0]
 8014ba8:	462a      	mov	r2, r5
 8014baa:	4b16      	ldr	r3, [pc, #88]	; (8014c04 <_vfiprintf_r+0x258>)
 8014bac:	a904      	add	r1, sp, #16
 8014bae:	4630      	mov	r0, r6
 8014bb0:	f3af 8000 	nop.w
 8014bb4:	4607      	mov	r7, r0
 8014bb6:	1c78      	adds	r0, r7, #1
 8014bb8:	d1d6      	bne.n	8014b68 <_vfiprintf_r+0x1bc>
 8014bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014bbc:	07d9      	lsls	r1, r3, #31
 8014bbe:	d405      	bmi.n	8014bcc <_vfiprintf_r+0x220>
 8014bc0:	89ab      	ldrh	r3, [r5, #12]
 8014bc2:	059a      	lsls	r2, r3, #22
 8014bc4:	d402      	bmi.n	8014bcc <_vfiprintf_r+0x220>
 8014bc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014bc8:	f7ff fdb7 	bl	801473a <__retarget_lock_release_recursive>
 8014bcc:	89ab      	ldrh	r3, [r5, #12]
 8014bce:	065b      	lsls	r3, r3, #25
 8014bd0:	f53f af12 	bmi.w	80149f8 <_vfiprintf_r+0x4c>
 8014bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014bd6:	e711      	b.n	80149fc <_vfiprintf_r+0x50>
 8014bd8:	ab03      	add	r3, sp, #12
 8014bda:	9300      	str	r3, [sp, #0]
 8014bdc:	462a      	mov	r2, r5
 8014bde:	4b09      	ldr	r3, [pc, #36]	; (8014c04 <_vfiprintf_r+0x258>)
 8014be0:	a904      	add	r1, sp, #16
 8014be2:	4630      	mov	r0, r6
 8014be4:	f000 f880 	bl	8014ce8 <_printf_i>
 8014be8:	e7e4      	b.n	8014bb4 <_vfiprintf_r+0x208>
 8014bea:	bf00      	nop
 8014bec:	08015230 	.word	0x08015230
 8014bf0:	08015250 	.word	0x08015250
 8014bf4:	08015210 	.word	0x08015210
 8014bf8:	08015270 	.word	0x08015270
 8014bfc:	0801527a 	.word	0x0801527a
 8014c00:	00000000 	.word	0x00000000
 8014c04:	08014987 	.word	0x08014987
 8014c08:	08015276 	.word	0x08015276

08014c0c <_printf_common>:
 8014c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c10:	4616      	mov	r6, r2
 8014c12:	4699      	mov	r9, r3
 8014c14:	688a      	ldr	r2, [r1, #8]
 8014c16:	690b      	ldr	r3, [r1, #16]
 8014c18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014c1c:	4293      	cmp	r3, r2
 8014c1e:	bfb8      	it	lt
 8014c20:	4613      	movlt	r3, r2
 8014c22:	6033      	str	r3, [r6, #0]
 8014c24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014c28:	4607      	mov	r7, r0
 8014c2a:	460c      	mov	r4, r1
 8014c2c:	b10a      	cbz	r2, 8014c32 <_printf_common+0x26>
 8014c2e:	3301      	adds	r3, #1
 8014c30:	6033      	str	r3, [r6, #0]
 8014c32:	6823      	ldr	r3, [r4, #0]
 8014c34:	0699      	lsls	r1, r3, #26
 8014c36:	bf42      	ittt	mi
 8014c38:	6833      	ldrmi	r3, [r6, #0]
 8014c3a:	3302      	addmi	r3, #2
 8014c3c:	6033      	strmi	r3, [r6, #0]
 8014c3e:	6825      	ldr	r5, [r4, #0]
 8014c40:	f015 0506 	ands.w	r5, r5, #6
 8014c44:	d106      	bne.n	8014c54 <_printf_common+0x48>
 8014c46:	f104 0a19 	add.w	sl, r4, #25
 8014c4a:	68e3      	ldr	r3, [r4, #12]
 8014c4c:	6832      	ldr	r2, [r6, #0]
 8014c4e:	1a9b      	subs	r3, r3, r2
 8014c50:	42ab      	cmp	r3, r5
 8014c52:	dc26      	bgt.n	8014ca2 <_printf_common+0x96>
 8014c54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014c58:	1e13      	subs	r3, r2, #0
 8014c5a:	6822      	ldr	r2, [r4, #0]
 8014c5c:	bf18      	it	ne
 8014c5e:	2301      	movne	r3, #1
 8014c60:	0692      	lsls	r2, r2, #26
 8014c62:	d42b      	bmi.n	8014cbc <_printf_common+0xb0>
 8014c64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014c68:	4649      	mov	r1, r9
 8014c6a:	4638      	mov	r0, r7
 8014c6c:	47c0      	blx	r8
 8014c6e:	3001      	adds	r0, #1
 8014c70:	d01e      	beq.n	8014cb0 <_printf_common+0xa4>
 8014c72:	6823      	ldr	r3, [r4, #0]
 8014c74:	68e5      	ldr	r5, [r4, #12]
 8014c76:	6832      	ldr	r2, [r6, #0]
 8014c78:	f003 0306 	and.w	r3, r3, #6
 8014c7c:	2b04      	cmp	r3, #4
 8014c7e:	bf08      	it	eq
 8014c80:	1aad      	subeq	r5, r5, r2
 8014c82:	68a3      	ldr	r3, [r4, #8]
 8014c84:	6922      	ldr	r2, [r4, #16]
 8014c86:	bf0c      	ite	eq
 8014c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014c8c:	2500      	movne	r5, #0
 8014c8e:	4293      	cmp	r3, r2
 8014c90:	bfc4      	itt	gt
 8014c92:	1a9b      	subgt	r3, r3, r2
 8014c94:	18ed      	addgt	r5, r5, r3
 8014c96:	2600      	movs	r6, #0
 8014c98:	341a      	adds	r4, #26
 8014c9a:	42b5      	cmp	r5, r6
 8014c9c:	d11a      	bne.n	8014cd4 <_printf_common+0xc8>
 8014c9e:	2000      	movs	r0, #0
 8014ca0:	e008      	b.n	8014cb4 <_printf_common+0xa8>
 8014ca2:	2301      	movs	r3, #1
 8014ca4:	4652      	mov	r2, sl
 8014ca6:	4649      	mov	r1, r9
 8014ca8:	4638      	mov	r0, r7
 8014caa:	47c0      	blx	r8
 8014cac:	3001      	adds	r0, #1
 8014cae:	d103      	bne.n	8014cb8 <_printf_common+0xac>
 8014cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8014cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cb8:	3501      	adds	r5, #1
 8014cba:	e7c6      	b.n	8014c4a <_printf_common+0x3e>
 8014cbc:	18e1      	adds	r1, r4, r3
 8014cbe:	1c5a      	adds	r2, r3, #1
 8014cc0:	2030      	movs	r0, #48	; 0x30
 8014cc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014cc6:	4422      	add	r2, r4
 8014cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014ccc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014cd0:	3302      	adds	r3, #2
 8014cd2:	e7c7      	b.n	8014c64 <_printf_common+0x58>
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	4622      	mov	r2, r4
 8014cd8:	4649      	mov	r1, r9
 8014cda:	4638      	mov	r0, r7
 8014cdc:	47c0      	blx	r8
 8014cde:	3001      	adds	r0, #1
 8014ce0:	d0e6      	beq.n	8014cb0 <_printf_common+0xa4>
 8014ce2:	3601      	adds	r6, #1
 8014ce4:	e7d9      	b.n	8014c9a <_printf_common+0x8e>
	...

08014ce8 <_printf_i>:
 8014ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014cec:	460c      	mov	r4, r1
 8014cee:	4691      	mov	r9, r2
 8014cf0:	7e27      	ldrb	r7, [r4, #24]
 8014cf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014cf4:	2f78      	cmp	r7, #120	; 0x78
 8014cf6:	4680      	mov	r8, r0
 8014cf8:	469a      	mov	sl, r3
 8014cfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014cfe:	d807      	bhi.n	8014d10 <_printf_i+0x28>
 8014d00:	2f62      	cmp	r7, #98	; 0x62
 8014d02:	d80a      	bhi.n	8014d1a <_printf_i+0x32>
 8014d04:	2f00      	cmp	r7, #0
 8014d06:	f000 80d8 	beq.w	8014eba <_printf_i+0x1d2>
 8014d0a:	2f58      	cmp	r7, #88	; 0x58
 8014d0c:	f000 80a3 	beq.w	8014e56 <_printf_i+0x16e>
 8014d10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014d14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014d18:	e03a      	b.n	8014d90 <_printf_i+0xa8>
 8014d1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014d1e:	2b15      	cmp	r3, #21
 8014d20:	d8f6      	bhi.n	8014d10 <_printf_i+0x28>
 8014d22:	a001      	add	r0, pc, #4	; (adr r0, 8014d28 <_printf_i+0x40>)
 8014d24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014d28:	08014d81 	.word	0x08014d81
 8014d2c:	08014d95 	.word	0x08014d95
 8014d30:	08014d11 	.word	0x08014d11
 8014d34:	08014d11 	.word	0x08014d11
 8014d38:	08014d11 	.word	0x08014d11
 8014d3c:	08014d11 	.word	0x08014d11
 8014d40:	08014d95 	.word	0x08014d95
 8014d44:	08014d11 	.word	0x08014d11
 8014d48:	08014d11 	.word	0x08014d11
 8014d4c:	08014d11 	.word	0x08014d11
 8014d50:	08014d11 	.word	0x08014d11
 8014d54:	08014ea1 	.word	0x08014ea1
 8014d58:	08014dc5 	.word	0x08014dc5
 8014d5c:	08014e83 	.word	0x08014e83
 8014d60:	08014d11 	.word	0x08014d11
 8014d64:	08014d11 	.word	0x08014d11
 8014d68:	08014ec3 	.word	0x08014ec3
 8014d6c:	08014d11 	.word	0x08014d11
 8014d70:	08014dc5 	.word	0x08014dc5
 8014d74:	08014d11 	.word	0x08014d11
 8014d78:	08014d11 	.word	0x08014d11
 8014d7c:	08014e8b 	.word	0x08014e8b
 8014d80:	680b      	ldr	r3, [r1, #0]
 8014d82:	1d1a      	adds	r2, r3, #4
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	600a      	str	r2, [r1, #0]
 8014d88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014d90:	2301      	movs	r3, #1
 8014d92:	e0a3      	b.n	8014edc <_printf_i+0x1f4>
 8014d94:	6825      	ldr	r5, [r4, #0]
 8014d96:	6808      	ldr	r0, [r1, #0]
 8014d98:	062e      	lsls	r6, r5, #24
 8014d9a:	f100 0304 	add.w	r3, r0, #4
 8014d9e:	d50a      	bpl.n	8014db6 <_printf_i+0xce>
 8014da0:	6805      	ldr	r5, [r0, #0]
 8014da2:	600b      	str	r3, [r1, #0]
 8014da4:	2d00      	cmp	r5, #0
 8014da6:	da03      	bge.n	8014db0 <_printf_i+0xc8>
 8014da8:	232d      	movs	r3, #45	; 0x2d
 8014daa:	426d      	negs	r5, r5
 8014dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014db0:	485e      	ldr	r0, [pc, #376]	; (8014f2c <_printf_i+0x244>)
 8014db2:	230a      	movs	r3, #10
 8014db4:	e019      	b.n	8014dea <_printf_i+0x102>
 8014db6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014dba:	6805      	ldr	r5, [r0, #0]
 8014dbc:	600b      	str	r3, [r1, #0]
 8014dbe:	bf18      	it	ne
 8014dc0:	b22d      	sxthne	r5, r5
 8014dc2:	e7ef      	b.n	8014da4 <_printf_i+0xbc>
 8014dc4:	680b      	ldr	r3, [r1, #0]
 8014dc6:	6825      	ldr	r5, [r4, #0]
 8014dc8:	1d18      	adds	r0, r3, #4
 8014dca:	6008      	str	r0, [r1, #0]
 8014dcc:	0628      	lsls	r0, r5, #24
 8014dce:	d501      	bpl.n	8014dd4 <_printf_i+0xec>
 8014dd0:	681d      	ldr	r5, [r3, #0]
 8014dd2:	e002      	b.n	8014dda <_printf_i+0xf2>
 8014dd4:	0669      	lsls	r1, r5, #25
 8014dd6:	d5fb      	bpl.n	8014dd0 <_printf_i+0xe8>
 8014dd8:	881d      	ldrh	r5, [r3, #0]
 8014dda:	4854      	ldr	r0, [pc, #336]	; (8014f2c <_printf_i+0x244>)
 8014ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8014dde:	bf0c      	ite	eq
 8014de0:	2308      	moveq	r3, #8
 8014de2:	230a      	movne	r3, #10
 8014de4:	2100      	movs	r1, #0
 8014de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014dea:	6866      	ldr	r6, [r4, #4]
 8014dec:	60a6      	str	r6, [r4, #8]
 8014dee:	2e00      	cmp	r6, #0
 8014df0:	bfa2      	ittt	ge
 8014df2:	6821      	ldrge	r1, [r4, #0]
 8014df4:	f021 0104 	bicge.w	r1, r1, #4
 8014df8:	6021      	strge	r1, [r4, #0]
 8014dfa:	b90d      	cbnz	r5, 8014e00 <_printf_i+0x118>
 8014dfc:	2e00      	cmp	r6, #0
 8014dfe:	d04d      	beq.n	8014e9c <_printf_i+0x1b4>
 8014e00:	4616      	mov	r6, r2
 8014e02:	fbb5 f1f3 	udiv	r1, r5, r3
 8014e06:	fb03 5711 	mls	r7, r3, r1, r5
 8014e0a:	5dc7      	ldrb	r7, [r0, r7]
 8014e0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014e10:	462f      	mov	r7, r5
 8014e12:	42bb      	cmp	r3, r7
 8014e14:	460d      	mov	r5, r1
 8014e16:	d9f4      	bls.n	8014e02 <_printf_i+0x11a>
 8014e18:	2b08      	cmp	r3, #8
 8014e1a:	d10b      	bne.n	8014e34 <_printf_i+0x14c>
 8014e1c:	6823      	ldr	r3, [r4, #0]
 8014e1e:	07df      	lsls	r7, r3, #31
 8014e20:	d508      	bpl.n	8014e34 <_printf_i+0x14c>
 8014e22:	6923      	ldr	r3, [r4, #16]
 8014e24:	6861      	ldr	r1, [r4, #4]
 8014e26:	4299      	cmp	r1, r3
 8014e28:	bfde      	ittt	le
 8014e2a:	2330      	movle	r3, #48	; 0x30
 8014e2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014e30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014e34:	1b92      	subs	r2, r2, r6
 8014e36:	6122      	str	r2, [r4, #16]
 8014e38:	f8cd a000 	str.w	sl, [sp]
 8014e3c:	464b      	mov	r3, r9
 8014e3e:	aa03      	add	r2, sp, #12
 8014e40:	4621      	mov	r1, r4
 8014e42:	4640      	mov	r0, r8
 8014e44:	f7ff fee2 	bl	8014c0c <_printf_common>
 8014e48:	3001      	adds	r0, #1
 8014e4a:	d14c      	bne.n	8014ee6 <_printf_i+0x1fe>
 8014e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8014e50:	b004      	add	sp, #16
 8014e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e56:	4835      	ldr	r0, [pc, #212]	; (8014f2c <_printf_i+0x244>)
 8014e58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014e5c:	6823      	ldr	r3, [r4, #0]
 8014e5e:	680e      	ldr	r6, [r1, #0]
 8014e60:	061f      	lsls	r7, r3, #24
 8014e62:	f856 5b04 	ldr.w	r5, [r6], #4
 8014e66:	600e      	str	r6, [r1, #0]
 8014e68:	d514      	bpl.n	8014e94 <_printf_i+0x1ac>
 8014e6a:	07d9      	lsls	r1, r3, #31
 8014e6c:	bf44      	itt	mi
 8014e6e:	f043 0320 	orrmi.w	r3, r3, #32
 8014e72:	6023      	strmi	r3, [r4, #0]
 8014e74:	b91d      	cbnz	r5, 8014e7e <_printf_i+0x196>
 8014e76:	6823      	ldr	r3, [r4, #0]
 8014e78:	f023 0320 	bic.w	r3, r3, #32
 8014e7c:	6023      	str	r3, [r4, #0]
 8014e7e:	2310      	movs	r3, #16
 8014e80:	e7b0      	b.n	8014de4 <_printf_i+0xfc>
 8014e82:	6823      	ldr	r3, [r4, #0]
 8014e84:	f043 0320 	orr.w	r3, r3, #32
 8014e88:	6023      	str	r3, [r4, #0]
 8014e8a:	2378      	movs	r3, #120	; 0x78
 8014e8c:	4828      	ldr	r0, [pc, #160]	; (8014f30 <_printf_i+0x248>)
 8014e8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014e92:	e7e3      	b.n	8014e5c <_printf_i+0x174>
 8014e94:	065e      	lsls	r6, r3, #25
 8014e96:	bf48      	it	mi
 8014e98:	b2ad      	uxthmi	r5, r5
 8014e9a:	e7e6      	b.n	8014e6a <_printf_i+0x182>
 8014e9c:	4616      	mov	r6, r2
 8014e9e:	e7bb      	b.n	8014e18 <_printf_i+0x130>
 8014ea0:	680b      	ldr	r3, [r1, #0]
 8014ea2:	6826      	ldr	r6, [r4, #0]
 8014ea4:	6960      	ldr	r0, [r4, #20]
 8014ea6:	1d1d      	adds	r5, r3, #4
 8014ea8:	600d      	str	r5, [r1, #0]
 8014eaa:	0635      	lsls	r5, r6, #24
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	d501      	bpl.n	8014eb4 <_printf_i+0x1cc>
 8014eb0:	6018      	str	r0, [r3, #0]
 8014eb2:	e002      	b.n	8014eba <_printf_i+0x1d2>
 8014eb4:	0671      	lsls	r1, r6, #25
 8014eb6:	d5fb      	bpl.n	8014eb0 <_printf_i+0x1c8>
 8014eb8:	8018      	strh	r0, [r3, #0]
 8014eba:	2300      	movs	r3, #0
 8014ebc:	6123      	str	r3, [r4, #16]
 8014ebe:	4616      	mov	r6, r2
 8014ec0:	e7ba      	b.n	8014e38 <_printf_i+0x150>
 8014ec2:	680b      	ldr	r3, [r1, #0]
 8014ec4:	1d1a      	adds	r2, r3, #4
 8014ec6:	600a      	str	r2, [r1, #0]
 8014ec8:	681e      	ldr	r6, [r3, #0]
 8014eca:	6862      	ldr	r2, [r4, #4]
 8014ecc:	2100      	movs	r1, #0
 8014ece:	4630      	mov	r0, r6
 8014ed0:	f7eb f986 	bl	80001e0 <memchr>
 8014ed4:	b108      	cbz	r0, 8014eda <_printf_i+0x1f2>
 8014ed6:	1b80      	subs	r0, r0, r6
 8014ed8:	6060      	str	r0, [r4, #4]
 8014eda:	6863      	ldr	r3, [r4, #4]
 8014edc:	6123      	str	r3, [r4, #16]
 8014ede:	2300      	movs	r3, #0
 8014ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ee4:	e7a8      	b.n	8014e38 <_printf_i+0x150>
 8014ee6:	6923      	ldr	r3, [r4, #16]
 8014ee8:	4632      	mov	r2, r6
 8014eea:	4649      	mov	r1, r9
 8014eec:	4640      	mov	r0, r8
 8014eee:	47d0      	blx	sl
 8014ef0:	3001      	adds	r0, #1
 8014ef2:	d0ab      	beq.n	8014e4c <_printf_i+0x164>
 8014ef4:	6823      	ldr	r3, [r4, #0]
 8014ef6:	079b      	lsls	r3, r3, #30
 8014ef8:	d413      	bmi.n	8014f22 <_printf_i+0x23a>
 8014efa:	68e0      	ldr	r0, [r4, #12]
 8014efc:	9b03      	ldr	r3, [sp, #12]
 8014efe:	4298      	cmp	r0, r3
 8014f00:	bfb8      	it	lt
 8014f02:	4618      	movlt	r0, r3
 8014f04:	e7a4      	b.n	8014e50 <_printf_i+0x168>
 8014f06:	2301      	movs	r3, #1
 8014f08:	4632      	mov	r2, r6
 8014f0a:	4649      	mov	r1, r9
 8014f0c:	4640      	mov	r0, r8
 8014f0e:	47d0      	blx	sl
 8014f10:	3001      	adds	r0, #1
 8014f12:	d09b      	beq.n	8014e4c <_printf_i+0x164>
 8014f14:	3501      	adds	r5, #1
 8014f16:	68e3      	ldr	r3, [r4, #12]
 8014f18:	9903      	ldr	r1, [sp, #12]
 8014f1a:	1a5b      	subs	r3, r3, r1
 8014f1c:	42ab      	cmp	r3, r5
 8014f1e:	dcf2      	bgt.n	8014f06 <_printf_i+0x21e>
 8014f20:	e7eb      	b.n	8014efa <_printf_i+0x212>
 8014f22:	2500      	movs	r5, #0
 8014f24:	f104 0619 	add.w	r6, r4, #25
 8014f28:	e7f5      	b.n	8014f16 <_printf_i+0x22e>
 8014f2a:	bf00      	nop
 8014f2c:	08015281 	.word	0x08015281
 8014f30:	08015292 	.word	0x08015292

08014f34 <_sbrk_r>:
 8014f34:	b538      	push	{r3, r4, r5, lr}
 8014f36:	4d06      	ldr	r5, [pc, #24]	; (8014f50 <_sbrk_r+0x1c>)
 8014f38:	2300      	movs	r3, #0
 8014f3a:	4604      	mov	r4, r0
 8014f3c:	4608      	mov	r0, r1
 8014f3e:	602b      	str	r3, [r5, #0]
 8014f40:	f7ec f90c 	bl	800115c <_sbrk>
 8014f44:	1c43      	adds	r3, r0, #1
 8014f46:	d102      	bne.n	8014f4e <_sbrk_r+0x1a>
 8014f48:	682b      	ldr	r3, [r5, #0]
 8014f4a:	b103      	cbz	r3, 8014f4e <_sbrk_r+0x1a>
 8014f4c:	6023      	str	r3, [r4, #0]
 8014f4e:	bd38      	pop	{r3, r4, r5, pc}
 8014f50:	20007304 	.word	0x20007304

08014f54 <__sread>:
 8014f54:	b510      	push	{r4, lr}
 8014f56:	460c      	mov	r4, r1
 8014f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f5c:	f000 f8a0 	bl	80150a0 <_read_r>
 8014f60:	2800      	cmp	r0, #0
 8014f62:	bfab      	itete	ge
 8014f64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014f66:	89a3      	ldrhlt	r3, [r4, #12]
 8014f68:	181b      	addge	r3, r3, r0
 8014f6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014f6e:	bfac      	ite	ge
 8014f70:	6563      	strge	r3, [r4, #84]	; 0x54
 8014f72:	81a3      	strhlt	r3, [r4, #12]
 8014f74:	bd10      	pop	{r4, pc}

08014f76 <__swrite>:
 8014f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f7a:	461f      	mov	r7, r3
 8014f7c:	898b      	ldrh	r3, [r1, #12]
 8014f7e:	05db      	lsls	r3, r3, #23
 8014f80:	4605      	mov	r5, r0
 8014f82:	460c      	mov	r4, r1
 8014f84:	4616      	mov	r6, r2
 8014f86:	d505      	bpl.n	8014f94 <__swrite+0x1e>
 8014f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f8c:	2302      	movs	r3, #2
 8014f8e:	2200      	movs	r2, #0
 8014f90:	f000 f868 	bl	8015064 <_lseek_r>
 8014f94:	89a3      	ldrh	r3, [r4, #12]
 8014f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014f9e:	81a3      	strh	r3, [r4, #12]
 8014fa0:	4632      	mov	r2, r6
 8014fa2:	463b      	mov	r3, r7
 8014fa4:	4628      	mov	r0, r5
 8014fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014faa:	f000 b817 	b.w	8014fdc <_write_r>

08014fae <__sseek>:
 8014fae:	b510      	push	{r4, lr}
 8014fb0:	460c      	mov	r4, r1
 8014fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fb6:	f000 f855 	bl	8015064 <_lseek_r>
 8014fba:	1c43      	adds	r3, r0, #1
 8014fbc:	89a3      	ldrh	r3, [r4, #12]
 8014fbe:	bf15      	itete	ne
 8014fc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8014fc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014fc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014fca:	81a3      	strheq	r3, [r4, #12]
 8014fcc:	bf18      	it	ne
 8014fce:	81a3      	strhne	r3, [r4, #12]
 8014fd0:	bd10      	pop	{r4, pc}

08014fd2 <__sclose>:
 8014fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fd6:	f000 b813 	b.w	8015000 <_close_r>
	...

08014fdc <_write_r>:
 8014fdc:	b538      	push	{r3, r4, r5, lr}
 8014fde:	4d07      	ldr	r5, [pc, #28]	; (8014ffc <_write_r+0x20>)
 8014fe0:	4604      	mov	r4, r0
 8014fe2:	4608      	mov	r0, r1
 8014fe4:	4611      	mov	r1, r2
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	602a      	str	r2, [r5, #0]
 8014fea:	461a      	mov	r2, r3
 8014fec:	f7ec f865 	bl	80010ba <_write>
 8014ff0:	1c43      	adds	r3, r0, #1
 8014ff2:	d102      	bne.n	8014ffa <_write_r+0x1e>
 8014ff4:	682b      	ldr	r3, [r5, #0]
 8014ff6:	b103      	cbz	r3, 8014ffa <_write_r+0x1e>
 8014ff8:	6023      	str	r3, [r4, #0]
 8014ffa:	bd38      	pop	{r3, r4, r5, pc}
 8014ffc:	20007304 	.word	0x20007304

08015000 <_close_r>:
 8015000:	b538      	push	{r3, r4, r5, lr}
 8015002:	4d06      	ldr	r5, [pc, #24]	; (801501c <_close_r+0x1c>)
 8015004:	2300      	movs	r3, #0
 8015006:	4604      	mov	r4, r0
 8015008:	4608      	mov	r0, r1
 801500a:	602b      	str	r3, [r5, #0]
 801500c:	f7ec f871 	bl	80010f2 <_close>
 8015010:	1c43      	adds	r3, r0, #1
 8015012:	d102      	bne.n	801501a <_close_r+0x1a>
 8015014:	682b      	ldr	r3, [r5, #0]
 8015016:	b103      	cbz	r3, 801501a <_close_r+0x1a>
 8015018:	6023      	str	r3, [r4, #0]
 801501a:	bd38      	pop	{r3, r4, r5, pc}
 801501c:	20007304 	.word	0x20007304

08015020 <_fstat_r>:
 8015020:	b538      	push	{r3, r4, r5, lr}
 8015022:	4d07      	ldr	r5, [pc, #28]	; (8015040 <_fstat_r+0x20>)
 8015024:	2300      	movs	r3, #0
 8015026:	4604      	mov	r4, r0
 8015028:	4608      	mov	r0, r1
 801502a:	4611      	mov	r1, r2
 801502c:	602b      	str	r3, [r5, #0]
 801502e:	f7ec f86c 	bl	800110a <_fstat>
 8015032:	1c43      	adds	r3, r0, #1
 8015034:	d102      	bne.n	801503c <_fstat_r+0x1c>
 8015036:	682b      	ldr	r3, [r5, #0]
 8015038:	b103      	cbz	r3, 801503c <_fstat_r+0x1c>
 801503a:	6023      	str	r3, [r4, #0]
 801503c:	bd38      	pop	{r3, r4, r5, pc}
 801503e:	bf00      	nop
 8015040:	20007304 	.word	0x20007304

08015044 <_isatty_r>:
 8015044:	b538      	push	{r3, r4, r5, lr}
 8015046:	4d06      	ldr	r5, [pc, #24]	; (8015060 <_isatty_r+0x1c>)
 8015048:	2300      	movs	r3, #0
 801504a:	4604      	mov	r4, r0
 801504c:	4608      	mov	r0, r1
 801504e:	602b      	str	r3, [r5, #0]
 8015050:	f7ec f86b 	bl	800112a <_isatty>
 8015054:	1c43      	adds	r3, r0, #1
 8015056:	d102      	bne.n	801505e <_isatty_r+0x1a>
 8015058:	682b      	ldr	r3, [r5, #0]
 801505a:	b103      	cbz	r3, 801505e <_isatty_r+0x1a>
 801505c:	6023      	str	r3, [r4, #0]
 801505e:	bd38      	pop	{r3, r4, r5, pc}
 8015060:	20007304 	.word	0x20007304

08015064 <_lseek_r>:
 8015064:	b538      	push	{r3, r4, r5, lr}
 8015066:	4d07      	ldr	r5, [pc, #28]	; (8015084 <_lseek_r+0x20>)
 8015068:	4604      	mov	r4, r0
 801506a:	4608      	mov	r0, r1
 801506c:	4611      	mov	r1, r2
 801506e:	2200      	movs	r2, #0
 8015070:	602a      	str	r2, [r5, #0]
 8015072:	461a      	mov	r2, r3
 8015074:	f7ec f864 	bl	8001140 <_lseek>
 8015078:	1c43      	adds	r3, r0, #1
 801507a:	d102      	bne.n	8015082 <_lseek_r+0x1e>
 801507c:	682b      	ldr	r3, [r5, #0]
 801507e:	b103      	cbz	r3, 8015082 <_lseek_r+0x1e>
 8015080:	6023      	str	r3, [r4, #0]
 8015082:	bd38      	pop	{r3, r4, r5, pc}
 8015084:	20007304 	.word	0x20007304

08015088 <__malloc_lock>:
 8015088:	4801      	ldr	r0, [pc, #4]	; (8015090 <__malloc_lock+0x8>)
 801508a:	f7ff bb55 	b.w	8014738 <__retarget_lock_acquire_recursive>
 801508e:	bf00      	nop
 8015090:	200072fc 	.word	0x200072fc

08015094 <__malloc_unlock>:
 8015094:	4801      	ldr	r0, [pc, #4]	; (801509c <__malloc_unlock+0x8>)
 8015096:	f7ff bb50 	b.w	801473a <__retarget_lock_release_recursive>
 801509a:	bf00      	nop
 801509c:	200072fc 	.word	0x200072fc

080150a0 <_read_r>:
 80150a0:	b538      	push	{r3, r4, r5, lr}
 80150a2:	4d07      	ldr	r5, [pc, #28]	; (80150c0 <_read_r+0x20>)
 80150a4:	4604      	mov	r4, r0
 80150a6:	4608      	mov	r0, r1
 80150a8:	4611      	mov	r1, r2
 80150aa:	2200      	movs	r2, #0
 80150ac:	602a      	str	r2, [r5, #0]
 80150ae:	461a      	mov	r2, r3
 80150b0:	f7eb ffe6 	bl	8001080 <_read>
 80150b4:	1c43      	adds	r3, r0, #1
 80150b6:	d102      	bne.n	80150be <_read_r+0x1e>
 80150b8:	682b      	ldr	r3, [r5, #0]
 80150ba:	b103      	cbz	r3, 80150be <_read_r+0x1e>
 80150bc:	6023      	str	r3, [r4, #0]
 80150be:	bd38      	pop	{r3, r4, r5, pc}
 80150c0:	20007304 	.word	0x20007304

080150c4 <_init>:
 80150c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150c6:	bf00      	nop
 80150c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150ca:	bc08      	pop	{r3}
 80150cc:	469e      	mov	lr, r3
 80150ce:	4770      	bx	lr

080150d0 <_fini>:
 80150d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150d2:	bf00      	nop
 80150d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150d6:	bc08      	pop	{r3}
 80150d8:	469e      	mov	lr, r3
 80150da:	4770      	bx	lr
