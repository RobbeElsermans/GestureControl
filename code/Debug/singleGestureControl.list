
singleGestureControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014e48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08014fe8  08014fe8  00024fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015160  08015160  000300d8  2**0
                  CONTENTS
  4 .ARM          00000008  08015160  08015160  00025160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015168  08015168  000300d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015168  08015168  00025168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801516c  0801516c  0002516c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08015170  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007220  200000d8  08015248  000300d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200072f8  08015248  000372f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000669c2  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005cd2  00000000  00000000  00096aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a30  00000000  00000000  0009c7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001840  00000000  00000000  0009e1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020944  00000000  00000000  0009fa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025fea  00000000  00000000  000c0354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7c48  00000000  00000000  000e633e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019df86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007638  00000000  00000000  0019dfdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014fd0 	.word	0x08014fd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	08014fd0 	.word	0x08014fd0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9b9 	b.w	8000614 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <MX_TOF_Init>:
static void MX_53L3A2_MultiSensorRanging_Init(void);
static void MX_53L3A2_MultiSensorRanging_Process(void);
static void print_result(RANGING_SENSOR_Result_t *Result);

void MX_TOF_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L3A2_MultiSensorRanging_Init();
 800061c:	f000 f890 	bl	8000740 <MX_53L3A2_MultiSensorRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b09e      	sub	sp, #120	; 0x78
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */
	RANGING_SENSOR_Result_t Result;

	  int preDis1 = 5000;
 800062a:	f241 3388 	movw	r3, #5000	; 0x1388
 800062e:	677b      	str	r3, [r7, #116]	; 0x74
	  int dis1 = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	66fb      	str	r3, [r7, #108]	; 0x6c
	  int treshhold = 1000;
 8000634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000638:	66bb      	str	r3, [r7, #104]	; 0x68
	  int minDistanceObject = 500;
 800063a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800063e:	667b      	str	r3, [r7, #100]	; 0x64
	  bool ObjectPresent = false;
 8000640:	2300      	movs	r3, #0
 8000642:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	  int timeOutmeasurment = 2000; //2 seconden
 8000646:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800064a:	663b      	str	r3, [r7, #96]	; 0x60

	  uint8_t i;

	  RANGING_SENSOR_ProfileConfig_t Profile;

	  Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 800064c:	2302      	movs	r3, #2
 800064e:	607b      	str	r3, [r7, #4]
	  Profile.TimingBudget = 30; /* 16 ms < TimingBudget < 500 ms */
 8000650:	231e      	movs	r3, #30
 8000652:	60bb      	str	r3, [r7, #8]
	  Profile.Frequency = 0; /* not necessary in simple ranging */
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
	  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
	  Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 800065c:	2301      	movs	r3, #1
 800065e:	617b      	str	r3, [r7, #20]

	  for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8000666:	e023      	b.n	80006b0 <MX_TOF_Process+0x8c>
	  {
	    /* skip this device if not detected */
	    if (ToF_Present[i] != 1) continue;
 8000668:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800066c:	4a30      	ldr	r2, [pc, #192]	; (8000730 <MX_TOF_Process+0x10c>)
 800066e:	5cd3      	ldrb	r3, [r2, r3]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d117      	bne.n	80006a4 <MX_TOF_Process+0x80>

	    VL53L3A2_RANGING_SENSOR_ConfigProfile(i, &Profile);
 8000674:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8000678:	1d3a      	adds	r2, r7, #4
 800067a:	4611      	mov	r1, r2
 800067c:	4618      	mov	r0, r3
 800067e:	f000 ffb7 	bl	80015f0 <VL53L3A2_RANGING_SENSOR_ConfigProfile>
	    status = VL53L3A2_RANGING_SENSOR_Start(i, RS_MODE_BLOCKING_CONTINUOUS);
 8000682:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8000686:	2101      	movs	r1, #1
 8000688:	4618      	mov	r0, r3
 800068a:	f001 f801 	bl	8001690 <VL53L3A2_RANGING_SENSOR_Start>
 800068e:	4603      	mov	r3, r0
 8000690:	4a28      	ldr	r2, [pc, #160]	; (8000734 <MX_TOF_Process+0x110>)
 8000692:	6013      	str	r3, [r2, #0]

	    if (status != BSP_ERROR_NONE)
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <MX_TOF_Process+0x110>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d004      	beq.n	80006a6 <MX_TOF_Process+0x82>
	    {
	      printf("VL53L3A2_RANGING_SENSOR_Start failed\r\n");
 800069c:	4826      	ldr	r0, [pc, #152]	; (8000738 <MX_TOF_Process+0x114>)
 800069e:	f013 fd3d 	bl	801411c <puts>
	      while(1);
 80006a2:	e7fe      	b.n	80006a2 <MX_TOF_Process+0x7e>
	    if (ToF_Present[i] != 1) continue;
 80006a4:	bf00      	nop
	  for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 80006a6:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80006aa:	3301      	adds	r3, #1
 80006ac:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 80006b0:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d9d7      	bls.n	8000668 <MX_TOF_Process+0x44>

  //MX_53L3A2_MultiSensorRanging_Process();

  /* USER CODE BEGIN TOF_Process_PostTreatment */
	  while(1){
  VL53L3A2_RANGING_SENSOR_GetDistance(1, &Result);
 80006b8:	f107 0318 	add.w	r3, r7, #24
 80006bc:	4619      	mov	r1, r3
 80006be:	2001      	movs	r0, #1
 80006c0:	f000 ffbe 	bl	8001640 <VL53L3A2_RANGING_SENSOR_GetDistance>
     dis1 = (long)Result.ZoneResult[0].Distance[0];
 80006c4:	6a3b      	ldr	r3, [r7, #32]
 80006c6:	66fb      	str	r3, [r7, #108]	; 0x6c

     if(preDis1 - dis1 > treshhold && (dis1 <= minDistanceObject) ){
 80006c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80006ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80006d0:	429a      	cmp	r2, r3
 80006d2:	da07      	bge.n	80006e4 <MX_TOF_Process+0xc0>
 80006d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80006d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006d8:	429a      	cmp	r2, r3
 80006da:	dc03      	bgt.n	80006e4 <MX_TOF_Process+0xc0>
     	//Persoon naderd en staat dicht genoeg
     	ObjectPresent = true;
 80006dc:	2301      	movs	r3, #1
 80006de:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80006e2:	e013      	b.n	800070c <MX_TOF_Process+0xe8>
     }
     else if (preDis1 - dis1 > treshhold){
 80006e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80006e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80006ec:	429a      	cmp	r2, r3
 80006ee:	da04      	bge.n	80006fa <MX_TOF_Process+0xd6>
     	//Wat dichter komen
     	//Zolang de distance niet voldoet aan minDistanceObject blijven meten.
     	//De meting stoppen na een bepaalde timeout
     	HAL_Delay(500);
 80006f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f4:	f011 f92a 	bl	801194c <HAL_Delay>
 80006f8:	e008      	b.n	800070c <MX_TOF_Process+0xe8>
     }
     else if( (preDis1 + dis1) > treshhold){
 80006fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80006fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006fe:	4413      	add	r3, r2
 8000700:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000702:	429a      	cmp	r2, r3
 8000704:	da02      	bge.n	800070c <MX_TOF_Process+0xe8>
     	ObjectPresent = false;
 8000706:	2300      	movs	r3, #0
 8000708:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

     //Ticks
     // long x = HAL_GetTick();
     //printf("Ticks: %ld ", x);

     HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, ObjectPresent);
 800070c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000710:	461a      	mov	r2, r3
 8000712:	2120      	movs	r1, #32
 8000714:	4809      	ldr	r0, [pc, #36]	; (800073c <MX_TOF_Process+0x118>)
 8000716:	f011 fca3 	bl	8012060 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(L_O_GPIO_Port, L_O_Pin, ObjectPresent);
 800071a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800071e:	461a      	mov	r2, r3
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <MX_TOF_Process+0x118>)
 8000724:	f011 fc9c 	bl	8012060 <HAL_GPIO_WritePin>


     preDis1 = dis1;
 8000728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800072a:	677b      	str	r3, [r7, #116]	; 0x74
  VL53L3A2_RANGING_SENSOR_GetDistance(1, &Result);
 800072c:	e7c4      	b.n	80006b8 <MX_TOF_Process+0x94>
 800072e:	bf00      	nop
 8000730:	200000f8 	.word	0x200000f8
 8000734:	200000f4 	.word	0x200000f4
 8000738:	08015000 	.word	0x08015000
 800073c:	40020000 	.word	0x40020000

08000740 <MX_53L3A2_MultiSensorRanging_Init>:
	  }
  /* USER CODE END TOF_Process_PostTreatment */
}

static void MX_53L3A2_MultiSensorRanging_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
  uint8_t device;
  uint16_t i2c_addr;
  uint32_t id;

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8000746:	2000      	movs	r0, #0
 8000748:	f000 fa26 	bl	8000b98 <BSP_COM_Init>

  printf("53L3A2 Multi Sensor Ranging demo application\r\n");
 800074c:	482a      	ldr	r0, [pc, #168]	; (80007f8 <MX_53L3A2_MultiSensorRanging_Init+0xb8>)
 800074e:	f013 fce5 	bl	801411c <puts>

  /* put all the devices in shutdown mode */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8000752:	2300      	movs	r3, #0
 8000754:	71fb      	strb	r3, [r7, #7]
 8000756:	e007      	b.n	8000768 <MX_53L3A2_MultiSensorRanging_Init+0x28>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_OFF);
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	2101      	movs	r1, #1
 800075c:	4618      	mov	r0, r3
 800075e:	f000 ffe7 	bl	8001730 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	3301      	adds	r3, #1
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	2b02      	cmp	r3, #2
 800076c:	d9f4      	bls.n	8000758 <MX_53L3A2_MultiSensorRanging_Init+0x18>

  /* power on the devices one at a time, initialize them and change their address.
   * once the address is updated, the communication with the devices is checked
   * reading its ID.
   */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 800076e:	2300      	movs	r3, #0
 8000770:	71fb      	strb	r3, [r7, #7]
 8000772:	e039      	b.n	80007e8 <MX_53L3A2_MultiSensorRanging_Init+0xa8>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_ON);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f000 ffd9 	bl	8001730 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    status = VL53L3A2_RANGING_SENSOR_Init(device);
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fee7 	bl	8001554 <VL53L3A2_RANGING_SENSOR_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 800078a:	6013      	str	r3, [r2, #0]

    /* 0: not detected, 1: detected */
    ToF_Present[device] = (status != BSP_ERROR_NONE) ? 0 : 1;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	bf0c      	ite	eq
 8000794:	2301      	moveq	r3, #1
 8000796:	2300      	movne	r3, #0
 8000798:	b2da      	uxtb	r2, r3
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	4611      	mov	r1, r2
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 80007a0:	54d1      	strb	r1, [r2, r3]

    /* skip this device if init not successful */
    if (ToF_Present[device] == 0) continue;
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4a16      	ldr	r2, [pc, #88]	; (8000800 <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 80007a6:	5cd3      	ldrb	r3, [r2, r3]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d019      	beq.n	80007e0 <MX_53L3A2_MultiSensorRanging_Init+0xa0>

    /* left: 0x54, center: 0x56, right: 0x58 */
    i2c_addr = (RANGING_SENSOR_VL53L3CX_ADDRESS + (device + 1) * 2);
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	3301      	adds	r3, #1
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	3329      	adds	r3, #41	; 0x29
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	80bb      	strh	r3, [r7, #4]
    VL53L3A2_RANGING_SENSOR_SetAddress(device, i2c_addr);
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	88ba      	ldrh	r2, [r7, #4]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 ff8d 	bl	80016e0 <VL53L3A2_RANGING_SENSOR_SetAddress>

    /* check the communication with the device reading the ID */
    VL53L3A2_RANGING_SENSOR_ReadID(device, &id);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	463a      	mov	r2, r7
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fee7 	bl	80015a0 <VL53L3A2_RANGING_SENSOR_ReadID>
    printf("ToF sensor %d - ID: %04lX\r\n", device, (unsigned long)id);
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	4619      	mov	r1, r3
 80007d8:	480a      	ldr	r0, [pc, #40]	; (8000804 <MX_53L3A2_MultiSensorRanging_Init+0xc4>)
 80007da:	f013 fc19 	bl	8014010 <iprintf>
 80007de:	e000      	b.n	80007e2 <MX_53L3A2_MultiSensorRanging_Init+0xa2>
    if (ToF_Present[device] == 0) continue;
 80007e0:	bf00      	nop
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	3301      	adds	r3, #1
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d9c2      	bls.n	8000774 <MX_53L3A2_MultiSensorRanging_Init+0x34>
  }
}
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	08015028 	.word	0x08015028
 80007fc:	200000f4 	.word	0x200000f4
 8000800:	200000f8 	.word	0x200000f8
 8000804:	08015058 	.word	0x08015058

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f011 f82c 	bl	8011868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f80a 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f000 f89e 	bl	8000954 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000818:	f000 f872 	bl	8000900 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  MX_TOF_Init();
 800081c:	f7ff fefc 	bl	8000618 <MX_TOF_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_TOF_Process();
 8000820:	f7ff ff00 	bl	8000624 <MX_TOF_Process>
 8000824:	e7fc      	b.n	8000820 <main+0x18>
	...

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	; 0x50
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0320 	add.w	r3, r7, #32
 8000832:	2230      	movs	r2, #48	; 0x30
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f013 fbe2 	bl	8014000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <SystemClock_Config+0xd0>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <SystemClock_Config+0xd0>)
 8000856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085a:	6413      	str	r3, [r2, #64]	; 0x40
 800085c:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <SystemClock_Config+0xd0>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	4b23      	ldr	r3, [pc, #140]	; (80008fc <SystemClock_Config+0xd4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000874:	4a21      	ldr	r2, [pc, #132]	; (80008fc <SystemClock_Config+0xd4>)
 8000876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <SystemClock_Config+0xd4>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000888:	2302      	movs	r3, #2
 800088a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088c:	2301      	movs	r3, #1
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000890:	2310      	movs	r3, #16
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000894:	2302      	movs	r3, #2
 8000896:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000898:	2300      	movs	r3, #0
 800089a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800089c:	2310      	movs	r3, #16
 800089e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008a6:	2304      	movs	r3, #4
 80008a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008aa:	2307      	movs	r3, #7
 80008ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ae:	f107 0320 	add.w	r3, r7, #32
 80008b2:	4618      	mov	r0, r3
 80008b4:	f012 fbe2 	bl	801307c <HAL_RCC_OscConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008be:	f000 f8cb 	bl	8000a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c2:	230f      	movs	r3, #15
 80008c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c6:	2302      	movs	r3, #2
 80008c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2102      	movs	r1, #2
 80008de:	4618      	mov	r0, r3
 80008e0:	f012 fe44 	bl	801356c <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008ea:	f000 f8b5 	bl	8000a58 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3750      	adds	r7, #80	; 0x50
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40007000 	.word	0x40007000

08000900 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_USART2_UART_Init+0x50>)
 8000908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000938:	f013 f814 	bl	8013964 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000942:	f000 f889 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200070a0 	.word	0x200070a0
 8000950:	40004400 	.word	0x40004400

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b37      	ldr	r3, [pc, #220]	; (8000a4c <MX_GPIO_Init+0xf8>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a36      	ldr	r2, [pc, #216]	; (8000a4c <MX_GPIO_Init+0xf8>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b34      	ldr	r3, [pc, #208]	; (8000a4c <MX_GPIO_Init+0xf8>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <MX_GPIO_Init+0xf8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a2f      	ldr	r2, [pc, #188]	; (8000a4c <MX_GPIO_Init+0xf8>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <MX_GPIO_Init+0xf8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <MX_GPIO_Init+0xf8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a28      	ldr	r2, [pc, #160]	; (8000a4c <MX_GPIO_Init+0xf8>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <MX_GPIO_Init+0xf8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <MX_GPIO_Init+0xf8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <MX_GPIO_Init+0xf8>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_GPIO_Init+0xf8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2120      	movs	r1, #32
 80009de:	481c      	ldr	r0, [pc, #112]	; (8000a50 <MX_GPIO_Init+0xfc>)
 80009e0:	f011 fb3e 	bl	8012060 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L_O_GPIO_Port, L_O_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	4819      	ldr	r0, [pc, #100]	; (8000a50 <MX_GPIO_Init+0xfc>)
 80009ea:	f011 fb39 	bl	8012060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4813      	ldr	r0, [pc, #76]	; (8000a54 <MX_GPIO_Init+0x100>)
 8000a06:	f011 f8ab 	bl	8011b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480b      	ldr	r0, [pc, #44]	; (8000a50 <MX_GPIO_Init+0xfc>)
 8000a22:	f011 f89d 	bl	8011b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_O_Pin */
   GPIO_InitStruct.Pin = L_O_Pin;
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(L_O_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_GPIO_Init+0xfc>)
 8000a3e:	f011 f88f 	bl	8011b60 <HAL_GPIO_Init>

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020800 	.word	0x40020800

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aa2:	2007      	movs	r0, #7
 8000aa4:	f011 f828 	bl	8011af8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <HAL_UART_MspInit+0x84>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d12b      	bne.n	8000b2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b0e:	230c      	movs	r3, #12
 8000b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b1e:	2307      	movs	r3, #7
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <HAL_UART_MspInit+0x8c>)
 8000b2a:	f011 f819 	bl	8011b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f010 febc 	bl	801190c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d903      	bls.n	8000bb4 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000bac:	f06f 0301 	mvn.w	r3, #1
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	e025      	b.n	8000c00 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	79fa      	ldrb	r2, [r7, #7]
 8000bb8:	4914      	ldr	r1, [pc, #80]	; (8000c0c <BSP_COM_Init+0x74>)
 8000bba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000bbe:	4814      	ldr	r0, [pc, #80]	; (8000c10 <BSP_COM_Init+0x78>)
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	011b      	lsls	r3, r3, #4
 8000bc4:	4413      	add	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4403      	add	r3, r0
 8000bca:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8000bcc:	79fa      	ldrb	r2, [r7, #7]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <BSP_COM_Init+0x78>)
 8000bd8:	4413      	add	r3, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f864 	bl	8000ca8 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8000be0:	79fa      	ldrb	r2, [r7, #7]
 8000be2:	4613      	mov	r3, r2
 8000be4:	011b      	lsls	r3, r3, #4
 8000be6:	4413      	add	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <BSP_COM_Init+0x78>)
 8000bec:	4413      	add	r3, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f810 	bl	8000c14 <MX_USART2_UART_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d002      	beq.n	8000c00 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000bfa:	f06f 0303 	mvn.w	r3, #3
 8000bfe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000c00:	68fb      	ldr	r3, [r7, #12]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	200070a0 	.word	0x200070a0

08000c14 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f012 fe86 	bl	8013964 <HAL_UART_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40004400 	.word	0x40004400

08000c70 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <__io_putchar+0x30>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4613      	mov	r3, r2
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	4413      	add	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <__io_putchar+0x34>)
 8000c88:	1898      	adds	r0, r3, r2
 8000c8a:	1d39      	adds	r1, r7, #4
 8000c8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c90:	2201      	movs	r2, #1
 8000c92:	f012 feb4 	bl	80139fe <HAL_UART_Transmit>
  return ch;
 8000c96:	687b      	ldr	r3, [r7, #4]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200000fb 	.word	0x200000fb
 8000ca4:	200070a0 	.word	0x200070a0

08000ca8 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <USART2_MspInit+0x88>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	4a1d      	ldr	r2, [pc, #116]	; (8000d30 <USART2_MspInit+0x88>)
 8000cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <USART2_MspInit+0x88>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <USART2_MspInit+0x88>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	4a16      	ldr	r2, [pc, #88]	; (8000d30 <USART2_MspInit+0x88>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6313      	str	r3, [r2, #48]	; 0x30
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <USART2_MspInit+0x88>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8000ce8:	2304      	movs	r3, #4
 8000cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <USART2_MspInit+0x8c>)
 8000d04:	f010 ff2c 	bl	8011b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8000d08:	2308      	movs	r3, #8
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8000d18:	2307      	movs	r3, #7
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4804      	ldr	r0, [pc, #16]	; (8000d34 <USART2_MspInit+0x8c>)
 8000d24:	f010 ff1c 	bl	8011b60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000

08000d38 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <BSP_I2C1_Init+0x58>)
 8000d44:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <BSP_I2C1_Init+0x5c>)
 8000d46:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <BSP_I2C1_Init+0x60>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	4912      	ldr	r1, [pc, #72]	; (8000d98 <BSP_I2C1_Init+0x60>)
 8000d50:	600a      	str	r2, [r1, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d117      	bne.n	8000d86 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000d56:	480e      	ldr	r0, [pc, #56]	; (8000d90 <BSP_I2C1_Init+0x58>)
 8000d58:	f011 fe48 	bl	80129ec <HAL_I2C_GetState>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d111      	bne.n	8000d86 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000d62:	480b      	ldr	r0, [pc, #44]	; (8000d90 <BSP_I2C1_Init+0x58>)
 8000d64:	f000 f8d2 	bl	8000f0c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10b      	bne.n	8000d86 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000d6e:	4808      	ldr	r0, [pc, #32]	; (8000d90 <BSP_I2C1_Init+0x58>)
 8000d70:	f000 f898 	bl	8000ea4 <MX_I2C1_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000d7a:	f06f 0307 	mvn.w	r3, #7
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	e001      	b.n	8000d86 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000d86:	687b      	ldr	r3, [r7, #4]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2000704c 	.word	0x2000704c
 8000d94:	40005400 	.word	0x40005400
 8000d98:	200000fc 	.word	0x200000fc

08000d9c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <BSP_I2C1_DeInit+0x48>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d014      	beq.n	8000dd8 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <BSP_I2C1_DeInit+0x48>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <BSP_I2C1_DeInit+0x48>)
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <BSP_I2C1_DeInit+0x48>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10b      	bne.n	8000dd8 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000dc0:	4809      	ldr	r0, [pc, #36]	; (8000de8 <BSP_I2C1_DeInit+0x4c>)
 8000dc2:	f000 f8ed 	bl	8000fa0 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000dc6:	4808      	ldr	r0, [pc, #32]	; (8000de8 <BSP_I2C1_DeInit+0x4c>)
 8000dc8:	f011 faa8 	bl	801231c <HAL_I2C_DeInit>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000dd2:	f06f 0307 	mvn.w	r3, #7
 8000dd6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000dd8:	687b      	ldr	r3, [r7, #4]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200000fc 	.word	0x200000fc
 8000de8:	2000704c 	.word	0x2000704c

08000dec <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	80fb      	strh	r3, [r7, #6]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000e00:	88bb      	ldrh	r3, [r7, #4]
 8000e02:	88f9      	ldrh	r1, [r7, #6]
 8000e04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e08:	9200      	str	r2, [sp, #0]
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <BSP_I2C1_Send+0x50>)
 8000e0e:	f011 fac9 	bl	80123a4 <HAL_I2C_Master_Transmit>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00c      	beq.n	8000e32 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000e18:	4808      	ldr	r0, [pc, #32]	; (8000e3c <BSP_I2C1_Send+0x50>)
 8000e1a:	f011 fdf5 	bl	8012a08 <HAL_I2C_GetError>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d003      	beq.n	8000e2c <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000e24:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	e002      	b.n	8000e32 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000e2c:	f06f 0303 	mvn.w	r3, #3
 8000e30:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2000704c 	.word	0x2000704c

08000e40 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af02      	add	r7, sp, #8
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	80fb      	strh	r3, [r7, #6]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000e54:	88bb      	ldrh	r3, [r7, #4]
 8000e56:	88f9      	ldrh	r1, [r7, #6]
 8000e58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e5c:	9200      	str	r2, [sp, #0]
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <BSP_I2C1_Recv+0x50>)
 8000e62:	f011 fb9d 	bl	80125a0 <HAL_I2C_Master_Receive>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d00c      	beq.n	8000e86 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000e6c:	4808      	ldr	r0, [pc, #32]	; (8000e90 <BSP_I2C1_Recv+0x50>)
 8000e6e:	f011 fdcb 	bl	8012a08 <HAL_I2C_GetError>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d003      	beq.n	8000e80 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000e78:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	e002      	b.n	8000e86 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000e80:	f06f 0303 	mvn.w	r3, #3
 8000e84:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000704c 	.word	0x2000704c

08000e94 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000e98:	f010 fd4c 	bl	8011934 <HAL_GetTick>
 8000e9c:	4603      	mov	r3, r0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <MX_I2C1_Init+0x60>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a13      	ldr	r2, [pc, #76]	; (8000f08 <MX_I2C1_Init+0x64>)
 8000eba:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ece:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f011 f8d3 	bl	8012094 <HAL_I2C_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40005400 	.word	0x40005400
 8000f08:	000186a0 	.word	0x000186a0

08000f0c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <I2C1_MspInit+0x8c>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	4a1e      	ldr	r2, [pc, #120]	; (8000f98 <I2C1_MspInit+0x8c>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	6313      	str	r3, [r2, #48]	; 0x30
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <I2C1_MspInit+0x8c>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f36:	2312      	movs	r3, #18
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000f42:	2304      	movs	r3, #4
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4813      	ldr	r0, [pc, #76]	; (8000f9c <I2C1_MspInit+0x90>)
 8000f4e:	f010 fe07 	bl	8011b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f58:	2312      	movs	r3, #18
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000f64:	2304      	movs	r3, #4
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480b      	ldr	r0, [pc, #44]	; (8000f9c <I2C1_MspInit+0x90>)
 8000f70:	f010 fdf6 	bl	8011b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <I2C1_MspInit+0x8c>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <I2C1_MspInit+0x8c>)
 8000f7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f82:	6413      	str	r3, [r2, #64]	; 0x40
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <I2C1_MspInit+0x8c>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020400 	.word	0x40020400

08000fa0 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <I2C1_MspDeInit+0x30>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <I2C1_MspDeInit+0x30>)
 8000fae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000fb2:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <I2C1_MspDeInit+0x34>)
 8000fba:	f010 ff55 	bl	8011e68 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000fbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc2:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <I2C1_MspDeInit+0x34>)
 8000fc4:	f010 ff50 	bl	8011e68 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020400 	.word	0x40020400

08000fd8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	e00a      	b.n	8001000 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fea:	f3af 8000 	nop.w
 8000fee:	4601      	mov	r1, r0
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	b2ca      	uxtb	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbf0      	blt.n	8000fea <_read+0x12>
	}

return len;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	e009      	b.n	8001038 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	60ba      	str	r2, [r7, #8]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fe1f 	bl	8000c70 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3301      	adds	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	dbf1      	blt.n	8001024 <_write+0x12>
	}
	return len;
 8001040:	687b      	ldr	r3, [r7, #4]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <_close>:

int _close(int file)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	return -1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001072:	605a      	str	r2, [r3, #4]
	return 0;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_isatty>:

int _isatty(int file)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
	return 1;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
	return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	; (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f012 ff54 	bl	8013f90 <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <_sbrk+0x64>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20018000 	.word	0x20018000
 8001114:	00000400 	.word	0x00000400
 8001118:	20000100 	.word	0x20000100
 800111c:	200072f8 	.word	0x200072f8

08001120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <SystemInit+0x20>)
 8001126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <SystemInit+0x20>)
 800112c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800117c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001148:	480d      	ldr	r0, [pc, #52]	; (8001180 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800114a:	490e      	ldr	r1, [pc, #56]	; (8001184 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800114c:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001150:	e002      	b.n	8001158 <LoopCopyDataInit>

08001152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001156:	3304      	adds	r3, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800115c:	d3f9      	bcc.n	8001152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115e:	4a0b      	ldr	r2, [pc, #44]	; (800118c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001160:	4c0b      	ldr	r4, [pc, #44]	; (8001190 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001164:	e001      	b.n	800116a <LoopFillZerobss>

08001166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001168:	3204      	adds	r2, #4

0800116a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800116c:	d3fb      	bcc.n	8001166 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800116e:	f7ff ffd7 	bl	8001120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001172:	f012 ff13 	bl	8013f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001176:	f7ff fb47 	bl	8000808 <main>
  bx  lr    
 800117a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800117c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001184:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001188:	08015170 	.word	0x08015170
  ldr r2, =_sbss
 800118c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001190:	200072f8 	.word	0x200072f8

08001194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC_IRQHandler>
	...

08001198 <VL53L3A2_Init>:
  * @brief Initialize X-NUCLEO-53L3A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L3A2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
  int32_t status = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 80011a2:	4b36      	ldr	r3, [pc, #216]	; (800127c <VL53L3A2_Init+0xe4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	4934      	ldr	r1, [pc, #208]	; (800127c <VL53L3A2_Init+0xe4>)
 80011aa:	600a      	str	r2, [r1, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d154      	bne.n	800125a <VL53L3A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 80011b0:	f000 f8d4 	bl	800135c <_I2cFailRecover>
 80011b4:	4602      	mov	r2, r0
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	607b      	str	r3, [r7, #4]
    status |= VL53L3A2_I2C_Init();
 80011bc:	f7ff fdbc 	bl	8000d38 <BSP_I2C1_Init>
 80011c0:	4602      	mov	r2, r0
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d147      	bne.n	800125e <VL53L3A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 80011ce:	463a      	mov	r2, r7
 80011d0:	2302      	movs	r3, #2
 80011d2:	2100      	movs	r1, #0
 80011d4:	2086      	movs	r0, #134	; 0x86
 80011d6:	f000 f963 	bl	80014a0 <_ExpanderRd>
 80011da:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d13f      	bne.n	8001262 <VL53L3A2_Init+0xca>
 80011e2:	783b      	ldrb	r3, [r7, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d13c      	bne.n	8001262 <VL53L3A2_Init+0xca>
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	2b16      	cmp	r3, #22
 80011ec:	d139      	bne.n	8001262 <VL53L3A2_Init+0xca>
	  {
      VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 80011ee:	463a      	mov	r2, r7
 80011f0:	2302      	movs	r3, #2
 80011f2:	2100      	movs	r1, #0
 80011f4:	2084      	movs	r0, #132	; 0x84
 80011f6:	f000 f953 	bl	80014a0 <_ExpanderRd>
 80011fa:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d131      	bne.n	8001266 <VL53L3A2_Init+0xce>
 8001202:	783b      	ldrb	r3, [r7, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d12e      	bne.n	8001266 <VL53L3A2_Init+0xce>
 8001208:	787b      	ldrb	r3, [r7, #1]
 800120a:	2b16      	cmp	r3, #22
 800120c:	d12b      	bne.n	8001266 <VL53L3A2_Init+0xce>
	  {
		  VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <VL53L3A2_Init+0xe8>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8001214:	23ff      	movs	r3, #255	; 0xff
 8001216:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 8001218:	23ff      	movs	r3, #255	; 0xff
 800121a:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 800121c:	463a      	mov	r2, r7
 800121e:	2302      	movs	r3, #2
 8001220:	2114      	movs	r1, #20
 8001222:	2086      	movs	r0, #134	; 0x86
 8001224:	f000 f96e 	bl	8001504 <_ExpanderWR>
 8001228:	6078      	str	r0, [r7, #4]

	  if (status)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d11c      	bne.n	800126a <VL53L3A2_Init+0xd2>
	  {
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 8001230:	23ff      	movs	r3, #255	; 0xff
 8001232:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 8001234:	23bf      	movs	r3, #191	; 0xbf
 8001236:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 8001238:	463a      	mov	r2, r7
 800123a:	2302      	movs	r3, #2
 800123c:	2114      	movs	r1, #20
 800123e:	2084      	movs	r0, #132	; 0x84
 8001240:	f000 f960 	bl	8001504 <_ExpanderWR>
 8001244:	6078      	str	r0, [r7, #4]

	  if (status)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d110      	bne.n	800126e <VL53L3A2_Init+0xd6>
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <VL53L3A2_Init+0xe8>)
 800124e:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8001252:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 8001254:	f000 f904 	bl	8001460 <_ExpandersSetAllIO>
 8001258:	6078      	str	r0, [r7, #4]
	  {
		VL53L3A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 800125a:	bf00      	nop
 800125c:	e008      	b.n	8001270 <VL53L3A2_Init+0xd8>
      goto done_err;
 800125e:	bf00      	nop
 8001260:	e006      	b.n	8001270 <VL53L3A2_Init+0xd8>
      goto done_err;
 8001262:	bf00      	nop
 8001264:	e004      	b.n	8001270 <VL53L3A2_Init+0xd8>
		  goto done_err;
 8001266:	bf00      	nop
 8001268:	e002      	b.n	8001270 <VL53L3A2_Init+0xd8>
		goto done_err;
 800126a:	bf00      	nop
 800126c:	e000      	b.n	8001270 <VL53L3A2_Init+0xd8>
		goto done_err;
 800126e:	bf00      	nop
  return status;
 8001270:	687b      	ldr	r3, [r7, #4]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000104 	.word	0x20000104
 8001280:	20000108 	.word	0x20000108

08001284 <VL53L3A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L3A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L3A2_ResetId(uint8_t DevNo, uint8_t state)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	460a      	mov	r2, r1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	4613      	mov	r3, r2
 8001292:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d037      	beq.n	800130a <VL53L3A2_ResetId+0x86>
 800129a:	2b02      	cmp	r3, #2
 800129c:	dc4e      	bgt.n	800133c <VL53L3A2_ResetId+0xb8>
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d01a      	beq.n	80012d8 <VL53L3A2_ResetId+0x54>
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d14a      	bne.n	800133c <VL53L3A2_ResetId+0xb8>
  {
    case VL53L3A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 80012a6:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <VL53L3A2_ResetId+0xcc>)
 80012a8:	78db      	ldrb	r3, [r3, #3]
 80012aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <VL53L3A2_ResetId+0xcc>)
 80012b2:	70da      	strb	r2, [r3, #3]

      if (state)
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d006      	beq.n	80012c8 <VL53L3A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 80012ba:	4b25      	ldr	r3, [pc, #148]	; (8001350 <VL53L3A2_ResetId+0xcc>)
 80012bc:	78db      	ldrb	r3, [r3, #3]
 80012be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b22      	ldr	r3, [pc, #136]	; (8001350 <VL53L3A2_ResetId+0xcc>)
 80012c6:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 80012c8:	2301      	movs	r3, #1
 80012ca:	4a22      	ldr	r2, [pc, #136]	; (8001354 <VL53L3A2_ResetId+0xd0>)
 80012cc:	2113      	movs	r1, #19
 80012ce:	2084      	movs	r0, #132	; 0x84
 80012d0:	f000 f918 	bl	8001504 <_ExpanderWR>
 80012d4:	60f8      	str	r0, [r7, #12]
      break;
 80012d6:	e035      	b.n	8001344 <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <VL53L3A2_ResetId+0xcc>)
 80012da:	785b      	ldrb	r3, [r3, #1]
 80012dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <VL53L3A2_ResetId+0xcc>)
 80012e4:	705a      	strb	r2, [r3, #1]

      if (state)
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <VL53L3A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <VL53L3A2_ResetId+0xcc>)
 80012ee:	785b      	ldrb	r3, [r3, #1]
 80012f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <VL53L3A2_ResetId+0xcc>)
 80012f8:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80012fa:	2301      	movs	r3, #1
 80012fc:	4a16      	ldr	r2, [pc, #88]	; (8001358 <VL53L3A2_ResetId+0xd4>)
 80012fe:	2113      	movs	r1, #19
 8001300:	2086      	movs	r0, #134	; 0x86
 8001302:	f000 f8ff 	bl	8001504 <_ExpanderWR>
 8001306:	60f8      	str	r0, [r7, #12]
      break;
 8001308:	e01c      	b.n	8001344 <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <VL53L3A2_ResetId+0xcc>)
 800130c:	785b      	ldrb	r3, [r3, #1]
 800130e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <VL53L3A2_ResetId+0xcc>)
 8001316:	705a      	strb	r2, [r3, #1]

      if (state)
 8001318:	79bb      	ldrb	r3, [r7, #6]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <VL53L3A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <VL53L3A2_ResetId+0xcc>)
 8001320:	785b      	ldrb	r3, [r3, #1]
 8001322:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <VL53L3A2_ResetId+0xcc>)
 800132a:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800132c:	2301      	movs	r3, #1
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <VL53L3A2_ResetId+0xd4>)
 8001330:	2113      	movs	r1, #19
 8001332:	2086      	movs	r0, #134	; 0x86
 8001334:	f000 f8e6 	bl	8001504 <_ExpanderWR>
 8001338:	60f8      	str	r0, [r7, #12]
      break;
 800133a:	e003      	b.n	8001344 <VL53L3A2_ResetId+0xc0>

    default:
      VL53L3A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
 8001340:	60fb      	str	r3, [r7, #12]
      goto done;
 8001342:	e000      	b.n	8001346 <VL53L3A2_ResetId+0xc2>
  if (status)
  {
    VL53L3A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 8001344:	bf00      	nop
  return status;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000108 	.word	0x20000108
 8001354:	2000010b 	.word	0x2000010b
 8001358:	20000109 	.word	0x20000109

0800135c <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	77bb      	strb	r3, [r7, #30]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 8001366:	4b3b      	ldr	r3, [pc, #236]	; (8001454 <_I2cFailRecover+0xf8>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d101      	bne.n	8001372 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 800136e:	2300      	movs	r3, #0
 8001370:	e06b      	b.n	800144a <_I2cFailRecover+0xee>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	4b38      	ldr	r3, [pc, #224]	; (8001458 <_I2cFailRecover+0xfc>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a37      	ldr	r2, [pc, #220]	; (8001458 <_I2cFailRecover+0xfc>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <_I2cFailRecover+0xfc>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SCL_GPIO_PIN;
 800138e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001392:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001394:	2311      	movs	r3, #17
 8001396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001398:	2301      	movs	r3, #1
 800139a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	4619      	mov	r1, r3
 80013a2:	482e      	ldr	r0, [pc, #184]	; (800145c <_I2cFailRecover+0x100>)
 80013a4:	f010 fbdc 	bl	8011b60 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SDA_GPIO_PIN;
 80013a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013ae:	2311      	movs	r3, #17
 80013b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	4619      	mov	r1, r3
 80013bc:	4827      	ldr	r0, [pc, #156]	; (800145c <_I2cFailRecover+0x100>)
 80013be:	f010 fbcf 	bl	8011b60 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c8:	4824      	ldr	r0, [pc, #144]	; (800145c <_I2cFailRecover+0x100>)
 80013ca:	f010 fe49 	bl	8012060 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d4:	4821      	ldr	r0, [pc, #132]	; (800145c <_I2cFailRecover+0x100>)
 80013d6:	f010 fe43 	bl	8012060 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 80013da:	2300      	movs	r3, #0
 80013dc:	77fb      	strb	r3, [r7, #31]
 80013de:	e014      	b.n	800140a <_I2cFailRecover+0xae>
    {
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e6:	481d      	ldr	r0, [pc, #116]	; (800145c <_I2cFailRecover+0x100>)
 80013e8:	f010 fe3a 	bl	8012060 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80013ec:	2001      	movs	r0, #1
 80013ee:	f010 faad 	bl	801194c <HAL_Delay>
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f8:	4818      	ldr	r0, [pc, #96]	; (800145c <_I2cFailRecover+0x100>)
 80013fa:	f010 fe31 	bl	8012060 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80013fe:	2001      	movs	r0, #1
 8001400:	f010 faa4 	bl	801194c <HAL_Delay>
    for (i = 0; i < 10U; i++)
 8001404:	7ffb      	ldrb	r3, [r7, #31]
 8001406:	3301      	adds	r3, #1
 8001408:	77fb      	strb	r3, [r7, #31]
 800140a:	7ffb      	ldrb	r3, [r7, #31]
 800140c:	2b09      	cmp	r3, #9
 800140e:	d9e7      	bls.n	80013e0 <_I2cFailRecover+0x84>
    }
    retry_cnt++;
 8001410:	7fbb      	ldrb	r3, [r7, #30]
 8001412:	3301      	adds	r3, #1
 8001414:	77bb      	strb	r3, [r7, #30]
  } while ((HAL_GPIO_ReadPin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 8001416:	f44f 7100 	mov.w	r1, #512	; 0x200
 800141a:	4810      	ldr	r0, [pc, #64]	; (800145c <_I2cFailRecover+0x100>)
 800141c:	f010 fe08 	bl	8012030 <HAL_GPIO_ReadPin>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <_I2cFailRecover+0xd0>
 8001426:	7fbb      	ldrb	r3, [r7, #30]
 8001428:	2b06      	cmp	r3, #6
 800142a:	d9d6      	bls.n	80013da <_I2cFailRecover+0x7e>

  if (HAL_GPIO_ReadPin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 800142c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001430:	480a      	ldr	r0, [pc, #40]	; (800145c <_I2cFailRecover+0x100>)
 8001432:	f010 fdfd 	bl	8012030 <HAL_GPIO_ReadPin>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <_I2cFailRecover+0xe6>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 800143c:	f06f 0304 	mvn.w	r3, #4
 8001440:	e003      	b.n	800144a <_I2cFailRecover+0xee>
  }

  is_already_init = 1U;
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <_I2cFailRecover+0xf8>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000010c 	.word	0x2000010c
 8001458:	40023800 	.word	0x40023800
 800145c:	40020400 	.word	0x40020400

08001460 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 8001466:	2302      	movs	r3, #2
 8001468:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <_ExpandersSetAllIO+0x38>)
 800146a:	2112      	movs	r1, #18
 800146c:	2086      	movs	r0, #134	; 0x86
 800146e:	f000 f849 	bl	8001504 <_ExpanderWR>
 8001472:	6078      	str	r0, [r7, #4]

  if (status)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d107      	bne.n	800148a <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 800147a:	2302      	movs	r3, #2
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <_ExpandersSetAllIO+0x3c>)
 800147e:	2112      	movs	r1, #18
 8001480:	2084      	movs	r0, #132	; 0x84
 8001482:	f000 f83f 	bl	8001504 <_ExpanderWR>
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	e000      	b.n	800148c <_ExpandersSetAllIO+0x2c>
    goto done_err;
 800148a:	bf00      	nop

done_err:
  return status;
 800148c:	687b      	ldr	r3, [r7, #4]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000108 	.word	0x20000108
 800149c:	2000010a 	.word	0x2000010a

080014a0 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	74fb      	strb	r3, [r7, #19]
  VL53L3A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	b299      	uxth	r1, r3
 80014b8:	f107 0213 	add.w	r2, r7, #19
 80014bc:	2364      	movs	r3, #100	; 0x64
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2301      	movs	r3, #1
 80014c2:	480f      	ldr	r0, [pc, #60]	; (8001500 <_ExpanderRd+0x60>)
 80014c4:	f010 ff6e 	bl	80123a4 <HAL_I2C_Master_Transmit>
 80014c8:	4603      	mov	r3, r0
 80014ca:	617b      	str	r3, [r7, #20]

    if (status)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d110      	bne.n	80014f4 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L3A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	b299      	uxth	r1, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b29a      	uxth	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2064      	movs	r0, #100	; 0x64
 80014de:	fb00 f303 	mul.w	r3, r0, r3
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	4613      	mov	r3, r2
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <_ExpanderRd+0x60>)
 80014ea:	f011 f859 	bl	80125a0 <HAL_I2C_Master_Receive>
 80014ee:	4603      	mov	r3, r0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	e000      	b.n	80014f6 <_ExpanderRd+0x56>
      break;
 80014f4:	bf00      	nop
  } while (0);

  VL53L3A2_PutI2cBus();

  return status;
 80014f6:	697b      	ldr	r3, [r7, #20]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000704c 	.word	0x2000704c

08001504 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	; 0x30
 8001508:	af02      	add	r7, sp, #8
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	3301      	adds	r3, #1
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	4618      	mov	r0, r3
 8001524:	f012 fd5e 	bl	8013fe4 <memcpy>

  VL53L3A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	b299      	uxth	r1, r3
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b29b      	uxth	r3, r3
 8001530:	3301      	adds	r3, #1
 8001532:	b29b      	uxth	r3, r3
 8001534:	f107 0214 	add.w	r2, r7, #20
 8001538:	2064      	movs	r0, #100	; 0x64
 800153a:	9000      	str	r0, [sp, #0]
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <_ExpanderWR+0x4c>)
 800153e:	f010 ff31 	bl	80123a4 <HAL_I2C_Master_Transmit>
 8001542:	4603      	mov	r3, r0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L3A2_PutI2cBus();

  return status;
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001548:	4618      	mov	r0, r3
 800154a:	3728      	adds	r7, #40	; 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000704c 	.word	0x2000704c

08001554 <VL53L3A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d903      	bls.n	800156a <VL53L3A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001562:	f06f 0301 	mvn.w	r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	e014      	b.n	8001594 <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L3A2_Init() != 0)
 800156a:	f7ff fe15 	bl	8001198 <VL53L3A2_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <VL53L3A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8001574:	f06f 0303 	mvn.w	r3, #3
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	e00b      	b.n	8001594 <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 800157c:	2101      	movs	r1, #1
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f8d6 	bl	8001730 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8001584:	2100      	movs	r1, #0
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f8d2 	bl	8001730 <VL53L3A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L3CX_Probe(Instance);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f90f 	bl	80017b0 <VL53L3CX_Probe>
 8001592:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001594:	68fb      	ldr	r3, [r7, #12]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <VL53L3A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d903      	bls.n	80015b8 <VL53L3A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015b0:	f06f 0301 	mvn.w	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e012      	b.n	80015de <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ReadID(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <VL53L3A2_RANGING_SENSOR_ReadID+0x48>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	490b      	ldr	r1, [pc, #44]	; (80015ec <VL53L3A2_RANGING_SENSOR_ReadID+0x4c>)
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80015c6:	6839      	ldr	r1, [r7, #0]
 80015c8:	4610      	mov	r0, r2
 80015ca:	4798      	blx	r3
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da03      	bge.n	80015da <VL53L3A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80015d2:	f06f 0304 	mvn.w	r3, #4
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	e001      	b.n	80015de <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000011c 	.word	0x2000011c
 80015ec:	20000110 	.word	0x20000110

080015f0 <VL53L3A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d903      	bls.n	8001608 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001600:	f06f 0301 	mvn.w	r3, #1
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	e012      	b.n	800162e <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x48>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	490b      	ldr	r1, [pc, #44]	; (800163c <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001616:	6839      	ldr	r1, [r7, #0]
 8001618:	4610      	mov	r0, r2
 800161a:	4798      	blx	r3
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	da03      	bge.n	800162a <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001622:	f06f 0304 	mvn.w	r3, #4
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	e001      	b.n	800162e <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000011c 	.word	0x2000011c
 800163c:	20000110 	.word	0x20000110

08001640 <VL53L3A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d903      	bls.n	8001658 <VL53L3A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001650:	f06f 0301 	mvn.w	r3, #1
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	e012      	b.n	800167e <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->GetDistance(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <VL53L3A2_RANGING_SENSOR_GetDistance+0x48>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	490b      	ldr	r1, [pc, #44]	; (800168c <VL53L3A2_RANGING_SENSOR_GetDistance+0x4c>)
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	4610      	mov	r0, r2
 800166a:	4798      	blx	r3
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	da03      	bge.n	800167a <VL53L3A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001672:	f06f 0304 	mvn.w	r3, #4
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	e001      	b.n	800167e <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	2000011c 	.word	0x2000011c
 800168c:	20000110 	.word	0x20000110

08001690 <VL53L3A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d903      	bls.n	80016a8 <VL53L3A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016a0:	f06f 0301 	mvn.w	r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	e012      	b.n	80016ce <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->Start(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <VL53L3A2_RANGING_SENSOR_Start+0x48>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	490b      	ldr	r1, [pc, #44]	; (80016dc <VL53L3A2_RANGING_SENSOR_Start+0x4c>)
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80016b6:	6839      	ldr	r1, [r7, #0]
 80016b8:	4610      	mov	r0, r2
 80016ba:	4798      	blx	r3
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	da03      	bge.n	80016ca <VL53L3A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80016c2:	f06f 0304 	mvn.w	r3, #4
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	e001      	b.n	80016ce <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	2000011c 	.word	0x2000011c
 80016dc:	20000110 	.word	0x20000110

080016e0 <VL53L3A2_RANGING_SENSOR_SetAddress>:
  * @param Instance    Ranging sensor instance.
  * @param Address     New I2C address.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetAddress(uint32_t Instance, uint32_t Address)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d903      	bls.n	80016f8 <VL53L3A2_RANGING_SENSOR_SetAddress+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016f0:	f06f 0301 	mvn.w	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	e012      	b.n	800171e <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->SetAddress(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Address) < 0)
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <VL53L3A2_RANGING_SENSOR_SetAddress+0x48>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	490b      	ldr	r1, [pc, #44]	; (800172c <VL53L3A2_RANGING_SENSOR_SetAddress+0x4c>)
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001706:	6839      	ldr	r1, [r7, #0]
 8001708:	4610      	mov	r0, r2
 800170a:	4798      	blx	r3
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	da03      	bge.n	800171a <VL53L3A2_RANGING_SENSOR_SetAddress+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001712:	f06f 0304 	mvn.w	r3, #4
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e001      	b.n	800171e <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	2000011c 	.word	0x2000011c
 800172c:	20000110 	.word	0x20000110

08001730 <VL53L3A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d903      	bls.n	8001748 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001740:	f06f 0301 	mvn.w	r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	e02e      	b.n	80017a6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d112      	bne.n	8001774 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 1) < 0)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2101      	movs	r1, #1
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fd95 	bl	8001284 <VL53L3A2_ResetId>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	da03      	bge.n	8001768 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001760:	f06f 0303 	mvn.w	r3, #3
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	e01e      	b.n	80017a6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001768:	2002      	movs	r0, #2
 800176a:	f010 f8ef 	bl	801194c <HAL_Delay>
      ret = BSP_ERROR_NONE;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e018      	b.n	80017a6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d112      	bne.n	80017a0 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 0) < 0)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fd7f 	bl	8001284 <VL53L3A2_ResetId>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	da03      	bge.n	8001794 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800178c:	f06f 0303 	mvn.w	r3, #3
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	e008      	b.n	80017a6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001794:	2002      	movs	r0, #2
 8001796:	f010 f8d9 	bl	801194c <HAL_Delay>
      ret = BSP_ERROR_NONE;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	e002      	b.n	80017a6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017a0:	f06f 0301 	mvn.w	r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <VL53L3CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L3CX_Probe(uint32_t Instance)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  VL53L3CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L3CX_Object_t   VL53L3CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L3CX_ADDRESS;
 80017b8:	2352      	movs	r3, #82	; 0x52
 80017ba:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L3A2_I2C_Init;
 80017bc:	4b38      	ldr	r3, [pc, #224]	; (80018a0 <VL53L3CX_Probe+0xf0>)
 80017be:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L3A2_I2C_DeInit;
 80017c0:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <VL53L3CX_Probe+0xf4>)
 80017c2:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L3A2_I2C_WriteReg;
 80017c4:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <VL53L3CX_Probe+0xf8>)
 80017c6:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L3A2_I2C_ReadReg;
 80017c8:	4b38      	ldr	r3, [pc, #224]	; (80018ac <VL53L3CX_Probe+0xfc>)
 80017ca:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L3A2_GetTick;
 80017cc:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <VL53L3CX_Probe+0x100>)
 80017ce:	623b      	str	r3, [r7, #32]

  if (VL53L3CX_RegisterBusIO(&(VL53L3CXObj[Instance]), &IOCtx) != VL53L3CX_OK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f242 42f0 	movw	r2, #9456	; 0x24f0
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	4a36      	ldr	r2, [pc, #216]	; (80018b4 <VL53L3CX_Probe+0x104>)
 80017dc:	4413      	add	r3, r2
 80017de:	f107 020c 	add.w	r2, r7, #12
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f00f fbf2 	bl	8010fce <VL53L3CX_RegisterBusIO>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <VL53L3CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80017f0:	f06f 0304 	mvn.w	r3, #4
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
 80017f6:	e04d      	b.n	8001894 <VL53L3CX_Probe+0xe4>
  }
  else if (VL53L3CX_ReadID(&(VL53L3CXObj[Instance]), &id) != VL53L3CX_OK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f242 42f0 	movw	r2, #9456	; 0x24f0
 80017fe:	fb02 f303 	mul.w	r3, r2, r3
 8001802:	4a2c      	ldr	r2, [pc, #176]	; (80018b4 <VL53L3CX_Probe+0x104>)
 8001804:	4413      	add	r3, r2
 8001806:	f107 0208 	add.w	r2, r7, #8
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f00f fc90 	bl	8011132 <VL53L3CX_ReadID>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <VL53L3CX_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001818:	f06f 0304 	mvn.w	r3, #4
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
 800181e:	e039      	b.n	8001894 <VL53L3CX_Probe+0xe4>
  }
  else
  {
    if (id != VL53L3CX_ID)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f64e 22aa 	movw	r2, #60074	; 0xeaaa
 8001826:	4293      	cmp	r3, r2
 8001828:	d003      	beq.n	8001832 <VL53L3CX_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800182a:	f06f 0306 	mvn.w	r3, #6
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
 8001830:	e030      	b.n	8001894 <VL53L3CX_Probe+0xe4>
    }
    else
    {
      VL53L3A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L3CX_RANGING_SENSOR_Driver;
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <VL53L3CX_Probe+0x108>)
 8001834:	4a21      	ldr	r2, [pc, #132]	; (80018bc <VL53L3CX_Probe+0x10c>)
 8001836:	601a      	str	r2, [r3, #0]
      VL53L3A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L3CXObj[Instance]);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f242 42f0 	movw	r2, #9456	; 0x24f0
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	4a1c      	ldr	r2, [pc, #112]	; (80018b4 <VL53L3CX_Probe+0x104>)
 8001844:	441a      	add	r2, r3
 8001846:	491e      	ldr	r1, [pc, #120]	; (80018c0 <VL53L3CX_Probe+0x110>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L3A2_RANGING_SENSOR_Drv->Init(VL53L3A2_RANGING_SENSOR_CompObj[Instance]) != VL53L3CX_OK)
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <VL53L3CX_Probe+0x108>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	491a      	ldr	r1, [pc, #104]	; (80018c0 <VL53L3CX_Probe+0x110>)
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800185c:	4610      	mov	r0, r2
 800185e:	4798      	blx	r3
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <VL53L3CX_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001866:	f06f 0304 	mvn.w	r3, #4
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
 800186c:	e012      	b.n	8001894 <VL53L3CX_Probe+0xe4>
      }
      else if (VL53L3A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L3A2_RANGING_SENSOR_CompObj[Instance], &VL53L3A2_RANGING_SENSOR_Cap) != VL53L3CX_OK)
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <VL53L3CX_Probe+0x108>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4912      	ldr	r1, [pc, #72]	; (80018c0 <VL53L3CX_Probe+0x110>)
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800187c:	4911      	ldr	r1, [pc, #68]	; (80018c4 <VL53L3CX_Probe+0x114>)
 800187e:	4610      	mov	r0, r2
 8001880:	4798      	blx	r3
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <VL53L3CX_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001888:	f06f 0304 	mvn.w	r3, #4
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
 800188e:	e001      	b.n	8001894 <VL53L3CX_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001896:	4618      	mov	r0, r3
 8001898:	3728      	adds	r7, #40	; 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	08000d39 	.word	0x08000d39
 80018a4:	08000d9d 	.word	0x08000d9d
 80018a8:	08000ded 	.word	0x08000ded
 80018ac:	08000e41 	.word	0x08000e41
 80018b0:	08000e95 	.word	0x08000e95
 80018b4:	20000130 	.word	0x20000130
 80018b8:	2000011c 	.word	0x2000011c
 80018bc:	20000034 	.word	0x20000034
 80018c0:	20000110 	.word	0x20000110
 80018c4:	20000120 	.word	0x20000120

080018c8 <VL53LX_SetDeviceAddress>:
}



VL53LX_Error VL53LX_SetDeviceAddress(VL53LX_DEV Dev, uint8_t DeviceAddress)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3318      	adds	r3, #24
 80018dc:	613b      	str	r3, [r7, #16]
	VL53LX_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80018e4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53LX_WrByte(Dev, VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	085b      	lsrs	r3, r3, #1
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	2101      	movs	r1, #1
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f00f f98b 	bl	8010c0c <VL53LX_WrByte>
 80018f6:	4603      	mov	r3, r0
 80018f8:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	085b      	lsrs	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001904:	b2da      	uxtb	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800190a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <VL53LX_DataInit>:


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800191e:	2300      	movs	r3, #0
 8001920:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 8001922:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d105      	bne.n	8001936 <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 800192a:	2101      	movs	r1, #1
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f001 fcba 	bl	80032a6 <VL53LX_data_init>
 8001932:	4603      	mov	r3, r0
 8001934:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 8001936:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d107      	bne.n	800194e <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 800193e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001942:	2102      	movs	r1, #2
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f887 	bl	8001a58 <SetPresetModeL3CX>
 800194a:	4603      	mov	r3, r0
 800194c:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 800194e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001956:	f248 2135 	movw	r1, #33333	; 0x8235
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f980 	bl	8001c60 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8001960:	4603      	mov	r3, r0
 8001962:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8001964:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10a      	bne.n	8001982 <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3318      	adds	r3, #24
 8001970:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8001978:	220c      	movs	r2, #12
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f012 fb3f 	bl	8014000 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001982:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d105      	bne.n	8001996 <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 800198a:	2102      	movs	r1, #2
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f003 fdb0 	bl	80054f2 <VL53LX_set_dmax_mode>
 8001992:	4603      	mov	r3, r0
 8001994:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 8001996:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d105      	bne.n	80019aa <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 800199e:	2100      	movs	r1, #0
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 ff41 	bl	8002828 <VL53LX_SmudgeCorrectionEnable>
 80019a6:	4603      	mov	r3, r0
 80019a8:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80019aa:	2320      	movs	r3, #32
 80019ac:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	76da      	strb	r2, [r3, #27]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80019ba:	3320      	adds	r3, #32
 80019bc:	2202      	movs	r2, #2
 80019be:	701a      	strb	r2, [r3, #0]
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 80019c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 80019d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f00e fd5c 	bl	801049a <VL53LX_poll_for_boot_completion>
 80019e2:	4603      	mov	r3, r0
 80019e4:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 80019e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 8001a04:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <ComputeDevicePresetMode+0x60>)
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	8019      	strh	r1, [r3, #0]
 8001a10:	3302      	adds	r3, #2
 8001a12:	0c12      	lsrs	r2, r2, #16
 8001a14:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d002      	beq.n	8001a22 <ComputeDevicePresetMode+0x2e>
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d003      	beq.n	8001a28 <ComputeDevicePresetMode+0x34>
 8001a20:	e005      	b.n	8001a2e <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
		break;
 8001a26:	e004      	b.n	8001a32 <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
		break;
 8001a2c:	e001      	b.n	8001a32 <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	f107 0210 	add.w	r2, r7, #16
 8001a38:	4413      	add	r3, r2
 8001a3a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	701a      	strb	r2, [r3, #0]

	return Status;
 8001a42:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	080150a4 	.word	0x080150a4

08001a58 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b08e      	sub	sp, #56	; 0x38
 8001a5c:	af04      	add	r7, sp, #16
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	460b      	mov	r3, r1
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 8001a82:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8001a86:	7afb      	ldrb	r3, [r7, #11]
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ffb2 	bl	80019f4 <ComputeDevicePresetMode>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 8001a96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d112      	bne.n	8001ac4 <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 8001a9e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001aa2:	f107 001c 	add.w	r0, r7, #28
 8001aa6:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	f107 0318 	add.w	r3, r7, #24
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f002 f859 	bl	8003b70 <VL53LX_get_preset_mode_timing_cfg>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 8001ac4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d112      	bne.n	8001af2 <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 8001acc:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001ad0:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8001ad2:	69fd      	ldr	r5, [r7, #28]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	9102      	str	r1, [sp, #8]
 8001adc:	9201      	str	r2, [sp, #4]
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	462b      	mov	r3, r5
 8001ae2:	4622      	mov	r2, r4
 8001ae4:	4601      	mov	r1, r0
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f002 f8a3 	bl	8003c32 <VL53LX_set_preset_mode>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001af2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001b00:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 8001b02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3728      	adds	r7, #40	; 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bdb0      	pop	{r4, r5, r7, pc}

08001b0e <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b085      	sub	sp, #20
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3318      	adds	r3, #24
 8001b1e:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	f893 3393 	ldrb.w	r3, [r3, #915]	; 0x393
 8001b26:	2baa      	cmp	r3, #170	; 0xaa
 8001b28:	d106      	bne.n	8001b38 <IsL4+0x2a>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f893 3392 	ldrb.w	r3, [r3, #914]	; 0x392
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001b30:	2beb      	cmp	r3, #235	; 0xeb
 8001b32:	d101      	bne.n	8001b38 <IsL4+0x2a>
		devL4 = 1;
 8001b34:	2301      	movs	r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
	return devL4;
 8001b38:	68fb      	ldr	r3, [r7, #12]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <CheckValidRectRoi>:

static VL53LX_Error CheckValidRectRoi(VL53LX_UserRoi_t ROI)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b085      	sub	sp, #20
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001b52:	793b      	ldrb	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d808      	bhi.n	8001b6a <CheckValidRectRoi+0x24>
 8001b58:	797b      	ldrb	r3, [r7, #5]
 8001b5a:	2b0f      	cmp	r3, #15
 8001b5c:	d805      	bhi.n	8001b6a <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001b5e:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001b60:	2b0f      	cmp	r3, #15
 8001b62:	d802      	bhi.n	8001b6a <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	2b0f      	cmp	r3, #15
 8001b68:	d901      	bls.n	8001b6e <CheckValidRectRoi+0x28>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001b6a:	23fc      	movs	r3, #252	; 0xfc
 8001b6c:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8001b6e:	793a      	ldrb	r2, [r7, #4]
 8001b70:	79bb      	ldrb	r3, [r7, #6]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d803      	bhi.n	8001b7e <CheckValidRectRoi+0x38>
 8001b76:	797a      	ldrb	r2, [r7, #5]
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d201      	bcs.n	8001b82 <CheckValidRectRoi+0x3c>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001b7e:	23fc      	movs	r3, #252	; 0xfc
 8001b80:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <VL53LX_SetDistanceMode>:


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b088      	sub	sp, #32
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d008      	beq.n	8001bc6 <VL53LX_SetDistanceMode+0x34>
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d005      	beq.n	8001bc6 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d002      	beq.n	8001bc6 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 8001bc0:	f06f 0303 	mvn.w	r3, #3
 8001bc4:	e048      	b.n	8001c58 <VL53LX_SetDistanceMode+0xc6>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffa1 	bl	8001b0e <IsL4>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <VL53LX_SetDistanceMode+0x4c>
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d102      	bne.n	8001bde <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 8001bd8:	f06f 0303 	mvn.w	r3, #3
 8001bdc:	e03c      	b.n	8001c58 <VL53LX_SetDistanceMode+0xc6>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be2:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001be4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10a      	bne.n	8001c02 <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	f107 0210 	add.w	r2, r7, #16
 8001bf4:	f107 010c 	add.w	r1, r7, #12
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f001 fe92 	bl	8003922 <VL53LX_get_timeouts_us>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 8001c02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d107      	bne.n	8001c1a <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff21 	bl	8001a58 <SetPresetModeL3CX>
 8001c16:	4603      	mov	r3, r0
 8001c18:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 8001c1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d105      	bne.n	8001c2e <VL53LX_SetDistanceMode+0x9c>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8001c28:	3320      	adds	r3, #32
 8001c2a:	78fa      	ldrb	r2, [r7, #3]
 8001c2c:	701a      	strb	r2, [r3, #0]
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001c2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10e      	bne.n	8001c54 <VL53LX_SetDistanceMode+0xc2>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8001c36:	68f9      	ldr	r1, [r7, #12]
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f001 fe37 	bl	80038b0 <VL53LX_set_timeouts_us>
 8001c42:	4603      	mov	r3, r0
 8001c44:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 8001c46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <VL53LX_SetDistanceMode+0xc2>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001c54:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3720      	adds	r7, #32
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001c7c:	4b31      	ldr	r3, [pc, #196]	; (8001d44 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 8001c7e:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	4a31      	ldr	r2, [pc, #196]	; (8001d48 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d902      	bls.n	8001c8e <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001c88:	23fc      	movs	r3, #252	; 0xfc
 8001c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53LX_ERROR_NONE)
 8001c8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10b      	bne.n	8001cae <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	f107 0210 	add.w	r2, r7, #16
 8001c9e:	f107 010c 	add.w	r1, r7, #12
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f001 fe3d 	bl	8003922 <VL53LX_get_timeouts_us>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 8001cae:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001cb2:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 8001cb4:	2306      	movs	r3, #6
 8001cb6:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff28 	bl	8001b0e <IsL4>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 8001cc4:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 8001cc6:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d803      	bhi.n	8001cd8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001cd0:	23fc      	movs	r3, #252	; 0xfc
 8001cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cd6:	e003      	b.n	8001ce0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8001cde:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001ce0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d11c      	bne.n	8001d22 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	6a3a      	ldr	r2, [r7, #32]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d203      	bcs.n	8001cf8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 8001cf0:	23fc      	movs	r3, #252	; 0xfc
 8001cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cf6:	e00d      	b.n	8001d14 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d00:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 8001d02:	68f9      	ldr	r1, [r7, #12]
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f001 fdd1 	bl	80038b0 <VL53LX_set_timeouts_us>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 8001d14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	629a      	str	r2, [r3, #40]	; 0x28
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001d22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d105      	bne.n	8001d36 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd6>
		VL53LXDevDataSet(Dev,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8001d30:	3324      	adds	r3, #36	; 0x24
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	601a      	str	r2, [r3, #0]
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001d36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3728      	adds	r7, #40	; 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	00086470 	.word	0x00086470
 8001d48:	00989680 	.word	0x00989680
 8001d4c:	00030d40 	.word	0x00030d40

08001d50 <VL53LX_SetUserROI>:



VL53LX_Error VL53LX_SetUserROI(VL53LX_DEV Dev,
		VL53LX_UserRoi_t *pRoi)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b092      	sub	sp, #72	; 0x48
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53LX_zone_config_t  zone_cfg;
	uint8_t x_centre, y_centre, width, height;

	Status = CheckValidRectRoi(*pRoi);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2300      	movs	r3, #0
 8001d66:	4613      	mov	r3, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff feec 	bl	8001b46 <CheckValidRectRoi>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (Status != VL53LX_ERROR_NONE)
 8001d74:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <VL53LX_SetUserROI+0x32>
		return VL53LX_ERROR_INVALID_PARAMS;
 8001d7c:	f06f 0303 	mvn.w	r3, #3
 8001d80:	e050      	b.n	8001e24 <VL53LX_SetUserROI+0xd4>

	x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	789b      	ldrb	r3, [r3, #2]
 8001d86:	461a      	mov	r2, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3301      	adds	r3, #1
 8001d90:	0fda      	lsrs	r2, r3, #31
 8001d92:	4413      	add	r3, r2
 8001d94:	105b      	asrs	r3, r3, #1
 8001d96:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	78db      	ldrb	r3, [r3, #3]
 8001da4:	4413      	add	r3, r2
 8001da6:	3301      	adds	r3, #1
 8001da8:	0fda      	lsrs	r2, r3, #31
 8001daa:	4413      	add	r3, r2
 8001dac:	105b      	asrs	r3, r3, #1
 8001dae:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	width =    (pRoi->BotRightX - pRoi->TopLeftX);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	789a      	ldrb	r2, [r3, #2]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	785a      	ldrb	r2, [r3, #1]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	78db      	ldrb	r3, [r3, #3]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	zone_cfg.max_zones = 1;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	733b      	strb	r3, [r7, #12]
	zone_cfg.active_zones = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	737b      	strb	r3, [r7, #13]
	zone_cfg.user_zones[0].x_centre = x_centre;
 8001dd6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001dda:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	zone_cfg.user_zones[0].y_centre = y_centre;
 8001dde:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001de2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	zone_cfg.user_zones[0].width = width;
 8001de6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001dea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	zone_cfg.user_zones[0].height = height;
 8001dee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if ((width < 3) || (height < 3))
 8001df6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d903      	bls.n	8001e06 <VL53LX_SetUserROI+0xb6>
 8001dfe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d803      	bhi.n	8001e0e <VL53LX_SetUserROI+0xbe>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001e06:	23fc      	movs	r3, #252	; 0xfc
 8001e08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001e0c:	e008      	b.n	8001e20 <VL53LX_SetUserROI+0xd0>
	else
		Status =  VL53LX_set_zone_config(Dev, &zone_cfg);
 8001e0e:	f107 030c 	add.w	r3, r7, #12
 8001e12:	4619      	mov	r1, r3
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f001 fe68 	bl	8003aea <VL53LX_set_zone_config>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	LOG_FUNCTION_END(Status);
	return Status;
 8001e20:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3748      	adds	r7, #72	; 0x48
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3318      	adds	r3, #24
 8001e3c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f001 f90c 	bl	800305c <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001e44:	2300      	movs	r3, #0
 8001e46:	75bb      	strb	r3, [r7, #22]
 8001e48:	e01a      	b.n	8001e80 <VL53LX_StartMeasurement+0x54>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8001e4a:	7dbb      	ldrb	r3, [r7, #22]
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001e52:	3308      	adds	r3, #8
 8001e54:	2100      	movs	r1, #0
 8001e56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8001e5a:	7dbb      	ldrb	r3, [r7, #22]
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001e64:	3318      	adds	r3, #24
 8001e66:	22ff      	movs	r2, #255	; 0xff
 8001e68:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8001e6a:	7dbb      	ldrb	r3, [r7, #22]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001e74:	331c      	adds	r3, #28
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001e7a:	7dbb      	ldrb	r3, [r7, #22]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	75bb      	strb	r3, [r7, #22]
 8001e80:	7dbb      	ldrb	r3, [r7, #22]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d9e1      	bls.n	8001e4a <VL53LX_StartMeasurement+0x1e>
	}
	pdev->PreviousStreamCount = 0;
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001e8c:	3321      	adds	r3, #33	; 0x21
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = 0;
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001e98:	3320      	adds	r3, #32
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7edb      	ldrb	r3, [r3, #27]
 8001ea2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 8001ea4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d107      	bne.n	8001ebc <VL53LX_StartMeasurement+0x90>
		Status = VL53LX_init_and_start_range(
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	2206      	movs	r2, #6
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f001 ff80 	bl	8003db8 <VL53LX_init_and_start_range>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 8001ebc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <VL53LX_StopMeasurement>:

VL53LX_Error VL53LX_StopMeasurement(VL53LX_DEV Dev)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_stop_range(Dev);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f002 f9f9 	bl	80042cc <VL53LX_stop_range>
 8001eda:	4603      	mov	r3, r0
 8001edc:	73fb      	strb	r3, [r7, #15]

	VL53LX_unload_patch(Dev);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f001 f9ac 	bl	800323c <VL53LX_unload_patch>

	LOG_FUNCTION_END(Status);
	return Status;
 8001ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <VL53LX_ClearInterruptAndStartMeasurement>:


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	7edb      	ldrb	r3, [r3, #27]
 8001f00:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 8001f02:	7bbb      	ldrb	r3, [r7, #14]
 8001f04:	4619      	mov	r1, r3
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f002 fedc 	bl	8004cc4 <VL53LX_clear_interrupt_and_enable_next_range>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8001f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 8001f2a:	6839      	ldr	r1, [r7, #0]
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f00e fa7a 	bl	8010426 <VL53LX_is_new_data_ready>
 8001f32:	4603      	mov	r3, r0
 8001f34:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <ConvertStatusHisto>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	3b05      	subs	r3, #5
 8001f52:	2b12      	cmp	r3, #18
 8001f54:	d840      	bhi.n	8001fd8 <ConvertStatusHisto+0x94>
 8001f56:	a201      	add	r2, pc, #4	; (adr r2, 8001f5c <ConvertStatusHisto+0x18>)
 8001f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5c:	08001fa9 	.word	0x08001fa9
 8001f60:	08001faf 	.word	0x08001faf
 8001f64:	08001fbb 	.word	0x08001fbb
 8001f68:	08001fd9 	.word	0x08001fd9
 8001f6c:	08001fd3 	.word	0x08001fd3
 8001f70:	08001fd9 	.word	0x08001fd9
 8001f74:	08001fd9 	.word	0x08001fd9
 8001f78:	08001fd9 	.word	0x08001fd9
 8001f7c:	08001fd9 	.word	0x08001fd9
 8001f80:	08001fd9 	.word	0x08001fd9
 8001f84:	08001fd9 	.word	0x08001fd9
 8001f88:	08001fd9 	.word	0x08001fd9
 8001f8c:	08001fd9 	.word	0x08001fd9
 8001f90:	08001fd9 	.word	0x08001fd9
 8001f94:	08001fb5 	.word	0x08001fb5
 8001f98:	08001fc7 	.word	0x08001fc7
 8001f9c:	08001fd9 	.word	0x08001fd9
 8001fa0:	08001fcd 	.word	0x08001fcd
 8001fa4:	08001fc1 	.word	0x08001fc1
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8001fa8:	2304      	movs	r3, #4
 8001faa:	73fb      	strb	r3, [r7, #15]
		break;
 8001fac:	e016      	b.n	8001fdc <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
		break;
 8001fb2:	e013      	b.n	8001fdc <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 8001fb4:	2306      	movs	r3, #6
 8001fb6:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 8001fb8:	e010      	b.n	8001fdc <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8001fba:	2307      	movs	r3, #7
 8001fbc:	73fb      	strb	r3, [r7, #15]
		break;
 8001fbe:	e00d      	b.n	8001fdc <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8001fc0:	230c      	movs	r3, #12
 8001fc2:	73fb      	strb	r3, [r7, #15]
		break;
 8001fc4:	e00a      	b.n	8001fdc <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	73fb      	strb	r3, [r7, #15]
		break;
 8001fca:	e007      	b.n	8001fdc <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8001fcc:	230b      	movs	r3, #11
 8001fce:	73fb      	strb	r3, [r7, #15]
		break;
 8001fd0:	e004      	b.n	8001fdc <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	73fb      	strb	r3, [r7, #15]
		break;
 8001fd6:	e001      	b.n	8001fdc <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 8001fd8:	23ff      	movs	r3, #255	; 0xff
 8001fda:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop

08001fec <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08e      	sub	sp, #56	; 0x38
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	4608      	mov	r0, r1
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	70fb      	strb	r3, [r7, #3]
 8001ffe:	460b      	mov	r3, r1
 8002000:	70bb      	strb	r3, [r7, #2]
 8002002:	4613      	mov	r3, r2
 8002004:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002006:	2300      	movs	r3, #0
 8002008:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	VL53LX_LLDriverData_t *pdev =
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3318      	adds	r3, #24
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 8002012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002014:	33f8      	adds	r3, #248	; 0xf8
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800201c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800201e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 800202a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800202e:	025b      	lsls	r3, r3, #9
 8002030:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8002032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002034:	6a3a      	ldr	r2, [r7, #32]
 8002036:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8002038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800203a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800203c:	025b      	lsls	r3, r3, #9
 800203e:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8002040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8002046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002048:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800204a:	025b      	lsls	r3, r3, #9
 800204c:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800204e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8002054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002056:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800205a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800205c:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 800205e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002060:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8002064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002066:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8002068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800206a:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 800206e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002070:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 8002072:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002076:	2b11      	cmp	r3, #17
 8002078:	d009      	beq.n	800208e <SetTargetData+0xa2>
 800207a:	2b11      	cmp	r3, #17
 800207c:	dc0f      	bgt.n	800209e <SetTargetData+0xb2>
 800207e:	2b03      	cmp	r3, #3
 8002080:	dc02      	bgt.n	8002088 <SetTargetData+0x9c>
 8002082:	2b00      	cmp	r3, #0
 8002084:	dc03      	bgt.n	800208e <SetTargetData+0xa2>
 8002086:	e00a      	b.n	800209e <SetTargetData+0xb2>
 8002088:	2b0d      	cmp	r3, #13
 800208a:	d004      	beq.n	8002096 <SetTargetData+0xaa>
 800208c:	e007      	b.n	800209e <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 800208e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002090:	2205      	movs	r2, #5
 8002092:	749a      	strb	r2, [r3, #18]
		break;
 8002094:	e006      	b.n	80020a4 <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 8002096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002098:	220d      	movs	r2, #13
 800209a:	749a      	strb	r2, [r3, #18]
		break;
 800209c:	e002      	b.n	80020a4 <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 800209e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a0:	2200      	movs	r2, #0
 80020a2:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 80020a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a6:	7c9b      	ldrb	r3, [r3, #18]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d117      	bne.n	80020dc <SetTargetData+0xf0>
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d114      	bne.n	80020dc <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 80020b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b4:	22ff      	movs	r2, #255	; 0xff
 80020b6:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 80020b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ba:	2200      	movs	r2, #0
 80020bc:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 80020be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 80020c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020c6:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80020ca:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 80020cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ce:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80020d2:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 80020d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020d6:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80020da:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 80020dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020de:	7c9b      	ldrb	r3, [r3, #18]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d108      	bne.n	80020f6 <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 80020e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff2b 	bl	8001f44 <ConvertStatusHisto>
 80020ee:	4603      	mov	r3, r0
 80020f0:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 80020f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f4:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	461a      	mov	r2, r3
 80020fc:	f248 0191 	movw	r1, #32913	; 0x8091
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f003 fa37 	bl	8005574 <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8002106:	78bb      	ldrb	r3, [r7, #2]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8002114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002116:	8a1b      	ldrh	r3, [r3, #16]
 8002118:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	86bb      	strh	r3, [r7, #52]	; 0x34

	pRangeData->ExtendedRange = 0;
 800211e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002120:	2200      	movs	r2, #0
 8002122:	74da      	strb	r2, [r3, #19]

	if ((active_results != 1) ||
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d106      	bne.n	8002138 <SetTargetData+0x14c>
		(pdev->PreviousRangeActiveResults != 1))
 800212a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002130:	3320      	adds	r3, #32
 8002132:	781b      	ldrb	r3, [r3, #0]
	if ((active_results != 1) ||
 8002134:	2b01      	cmp	r3, #1
 8002136:	d001      	beq.n	800213c <SetTargetData+0x150>
		ExtendedRangeEnabled = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 81dc 	beq.w	80024fc <SetTargetData+0x510>
		(pRangeData->RangeStatus ==
 8002144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002146:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 8002148:	2b07      	cmp	r3, #7
 800214a:	d004      	beq.n	8002156 <SetTargetData+0x16a>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 800214c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800214e:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002150:	2b04      	cmp	r3, #4
 8002152:	f040 81d3 	bne.w	80024fc <SetTargetData+0x510>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8002156:	787b      	ldrb	r3, [r7, #1]
 8002158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800215a:	4413      	add	r3, r2
 800215c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002160:	3318      	adds	r3, #24
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b07      	cmp	r3, #7
 8002166:	d01c      	beq.n	80021a2 <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8002168:	787b      	ldrb	r3, [r7, #1]
 800216a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800216c:	4413      	add	r3, r2
 800216e:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002172:	3318      	adds	r3, #24
 8002174:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002176:	2b04      	cmp	r3, #4
 8002178:	d013      	beq.n	80021a2 <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 800217a:	787b      	ldrb	r3, [r7, #1]
 800217c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800217e:	4413      	add	r3, r2
 8002180:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002184:	3318      	adds	r3, #24
 8002186:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8002188:	2b00      	cmp	r3, #0
 800218a:	f040 81b7 	bne.w	80024fc <SetTargetData+0x510>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 800218e:	787b      	ldrb	r3, [r7, #1]
 8002190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002192:	4413      	add	r3, r2
 8002194:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002198:	331c      	adds	r3, #28
 800219a:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 800219c:	2b01      	cmp	r3, #1
 800219e:	f040 81ad 	bne.w	80024fc <SetTargetData+0x510>
	{
		if (((pdev->PreviousStreamCount) ==
 80021a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80021a8:	3321      	adds	r3, #33	; 0x21
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 80021ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b0:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 80021b4:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d00c      	beq.n	80021d4 <SetTargetData+0x1e8>
		|| ((pdev->PreviousStreamCount) ==
 80021ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021bc:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80021c0:	3321      	adds	r3, #33	; 0x21
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 80021cc:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 80021ce:	429a      	cmp	r2, r3
 80021d0:	f040 816b 	bne.w	80024aa <SetTargetData+0x4be>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 80021d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80021da:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 80021dc:	787b      	ldrb	r3, [r7, #1]
 80021de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021e0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80021e4:	3308      	adds	r3, #8
 80021e6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80021ea:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 80021f2:	2301      	movs	r3, #1
 80021f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		switch (pdev->preset_mode) {
 80021f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fa:	785b      	ldrb	r3, [r3, #1]
 80021fc:	2b21      	cmp	r3, #33	; 0x21
 80021fe:	d008      	beq.n	8002212 <SetTargetData+0x226>
 8002200:	2b21      	cmp	r3, #33	; 0x21
 8002202:	f300 814e 	bgt.w	80024a2 <SetTargetData+0x4b6>
 8002206:	2b1b      	cmp	r3, #27
 8002208:	f000 80d7 	beq.w	80023ba <SetTargetData+0x3ce>
 800220c:	2b1e      	cmp	r3, #30
 800220e:	d004      	beq.n	800221a <SetTargetData+0x22e>
 8002210:	e147      	b.n	80024a2 <SetTargetData+0x4b6>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002218:	e148      	b.n	80024ac <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8002220:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002224:	429a      	cmp	r2, r3
 8002226:	dd0e      	ble.n	8002246 <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8002228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222a:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800222e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002232:	429a      	cmp	r2, r3
 8002234:	da07      	bge.n	8002246 <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8002236:	7dfb      	ldrb	r3, [r7, #23]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d104      	bne.n	8002246 <SetTargetData+0x25a>
					sequency == 1) {
					AddOffset =
 800223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002242:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002244:	e0b8      	b.n	80023b8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8002246:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8002250:	425b      	negs	r3, r3
 8002252:	429a      	cmp	r2, r3
 8002254:	da0f      	bge.n	8002276 <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8002256:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 8002260:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8002262:	429a      	cmp	r2, r3
 8002264:	dd07      	ble.n	8002276 <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8002266:	7dfb      	ldrb	r3, [r7, #23]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d104      	bne.n	8002276 <SetTargetData+0x28a>
					sequency == 0) {
					AddOffset =
 800226c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226e:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8002272:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002274:	e0a0      	b.n	80023b8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 800227c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002280:	429a      	cmp	r2, r3
 8002282:	dd0e      	ble.n	80022a2 <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8002284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002286:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 800228a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800228e:	429a      	cmp	r2, r3
 8002290:	da07      	bge.n	80022a2 <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d104      	bne.n	80022a2 <SetTargetData+0x2b6>
					sequency == 0) {
					AddOffset =
 8002298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800229e:	86bb      	strh	r3, [r7, #52]	; 0x34
 80022a0:	e08a      	b.n	80023b8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80022a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80022ac:	425b      	negs	r3, r3
 80022ae:	429a      	cmp	r2, r3
 80022b0:	da0f      	bge.n	80022d2 <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80022b2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b8:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 80022bc:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80022be:	429a      	cmp	r2, r3
 80022c0:	dd07      	ble.n	80022d2 <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80022c2:	7dfb      	ldrb	r3, [r7, #23]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d104      	bne.n	80022d2 <SetTargetData+0x2e6>
					sequency == 1) {
					AddOffset =
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ca:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80022ce:	86bb      	strh	r3, [r7, #52]	; 0x34
 80022d0:	e072      	b.n	80023b8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d4:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 80022d8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022dc:	429a      	cmp	r2, r3
 80022de:	dd0e      	ble.n	80022fe <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80022e6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	da07      	bge.n	80022fe <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d104      	bne.n	80022fe <SetTargetData+0x312>
					sequency == 1) {
					AddOffset =
 80022f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80022fa:	86bb      	strh	r3, [r7, #52]	; 0x34
 80022fc:	e05c      	b.n	80023b8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 80022fe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002304:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002308:	425b      	negs	r3, r3
 800230a:	429a      	cmp	r2, r3
 800230c:	da0f      	bge.n	800232e <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800230e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002314:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8002318:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 800231a:	429a      	cmp	r2, r3
 800231c:	dd07      	ble.n	800232e <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d104      	bne.n	800232e <SetTargetData+0x342>
					sequency == 0) {
					AddOffset =
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800232a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800232c:	e044      	b.n	80023b8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 800232e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002330:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002334:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002338:	429a      	cmp	r2, r3
 800233a:	dd0e      	ble.n	800235a <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 800233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233e:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002342:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002346:	429a      	cmp	r2, r3
 8002348:	da07      	bge.n	800235a <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 800234a:	7dfb      	ldrb	r3, [r7, #23]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d104      	bne.n	800235a <SetTargetData+0x36e>
					sequency == 0) {
					AddOffset =
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002352:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8002356:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002358:	e02e      	b.n	80023b8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800235a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002364:	425b      	negs	r3, r3
 8002366:	429a      	cmp	r2, r3
 8002368:	da0f      	bge.n	800238a <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800236a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002370:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8002374:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8002376:	429a      	cmp	r2, r3
 8002378:	dd07      	ble.n	800238a <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800237a:	7dfb      	ldrb	r3, [r7, #23]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d104      	bne.n	800238a <SetTargetData+0x39e>
					sequency == 1) {
					AddOffset =
 8002380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002382:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8002386:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002388:	e016      	b.n	80023b8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 800238a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238c:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8002390:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002394:	429a      	cmp	r2, r3
 8002396:	da0b      	bge.n	80023b0 <SetTargetData+0x3c4>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8002398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239a:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 800239e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	dd04      	ble.n	80023b0 <SetTargetData+0x3c4>
					AddOffset =
 80023a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a8:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 80023ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 80023ae:	e003      	b.n	80023b8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 80023b6:	e079      	b.n	80024ac <SetTargetData+0x4c0>
 80023b8:	e078      	b.n	80024ac <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80023ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023bc:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 80023c0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	dd0e      	ble.n	80023e6 <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80023c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ca:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80023ce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	da07      	bge.n	80023e6 <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d104      	bne.n	80023e6 <SetTargetData+0x3fa>
					sequency == 0) {
					AddOffset =
 80023dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023de:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 80023e2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80023e4:	e05c      	b.n	80024a0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80023e6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 80023f0:	425b      	negs	r3, r3
 80023f2:	429a      	cmp	r2, r3
 80023f4:	da0f      	bge.n	8002416 <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80023f6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8002400:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8002402:	429a      	cmp	r2, r3
 8002404:	dd07      	ble.n	8002416 <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d104      	bne.n	8002416 <SetTargetData+0x42a>
					sequency == 1) {
					AddOffset =
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002412:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002414:	e044      	b.n	80024a0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800241c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002420:	429a      	cmp	r2, r3
 8002422:	dd0e      	ble.n	8002442 <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 800242a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800242e:	429a      	cmp	r2, r3
 8002430:	da07      	bge.n	8002442 <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8002432:	7dfb      	ldrb	r3, [r7, #23]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d104      	bne.n	8002442 <SetTargetData+0x456>
					sequency == 1) {
					AddOffset =
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800243e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002440:	e02e      	b.n	80024a0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8002442:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800244c:	425b      	negs	r3, r3
 800244e:	429a      	cmp	r2, r3
 8002450:	da0f      	bge.n	8002472 <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8002452:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002458:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 800245c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800245e:	429a      	cmp	r2, r3
 8002460:	dd07      	ble.n	8002472 <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8002462:	7dfb      	ldrb	r3, [r7, #23]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d104      	bne.n	8002472 <SetTargetData+0x486>
					sequency == 0) {
					AddOffset =
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246a:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 800246e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002470:	e016      	b.n	80024a0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8002472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002474:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8002478:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800247c:	429a      	cmp	r2, r3
 800247e:	da0b      	bge.n	8002498 <SetTargetData+0x4ac>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8002486:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800248a:	429a      	cmp	r2, r3
 800248c:	dd04      	ble.n	8002498 <SetTargetData+0x4ac>
					AddOffset =
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002490:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8002494:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002496:	e003      	b.n	80024a0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 800249e:	e005      	b.n	80024ac <SetTargetData+0x4c0>
 80024a0:	e004      	b.n	80024ac <SetTargetData+0x4c0>

			default:
				uwr_status = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 80024a8:	e000      	b.n	80024ac <SetTargetData+0x4c0>
			}
		}
 80024aa:	bf00      	nop

		if (uwr_status) {
 80024ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d023      	beq.n	80024fc <SetTargetData+0x510>
			pRangeData->RangeMilliMeter += AddOffset;
 80024b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024b6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80024be:	4413      	add	r3, r2
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	b21a      	sxth	r2, r3
 80024c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c6:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 80024c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80024d2:	4413      	add	r3, r2
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	b21a      	sxth	r2, r3
 80024d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024da:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 80024dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80024e6:	4413      	add	r3, r2
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	b21a      	sxth	r2, r3
 80024ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ee:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 80024f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024f2:	2201      	movs	r2, #1
 80024f4:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 80024f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024f8:	2200      	movs	r2, #0
 80024fa:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 80024fc:	787b      	ldrb	r3, [r7, #1]
 80024fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002500:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8002504:	3308      	adds	r3, #8
 8002506:	8ab9      	ldrh	r1, [r7, #20]
 8002508:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 800250c:	787b      	ldrb	r3, [r7, #1]
 800250e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002510:	7c91      	ldrb	r1, [r2, #18]
 8002512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002514:	4413      	add	r3, r2
 8002516:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800251a:	3318      	adds	r3, #24
 800251c:	460a      	mov	r2, r1
 800251e:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8002520:	787b      	ldrb	r3, [r7, #1]
 8002522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002524:	7cd1      	ldrb	r1, [r2, #19]
 8002526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002528:	4413      	add	r3, r2
 800252a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800252e:	331c      	adds	r3, #28
 8002530:	460a      	mov	r2, r1
 8002532:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002536:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800253a:	3320      	adds	r3, #32
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	701a      	strb	r2, [r3, #0]

	Range = pRangeData->RangeMilliMeter;
 8002540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002542:	8a1b      	ldrh	r3, [r3, #16]
 8002544:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8002546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002548:	7c9b      	ldrb	r3, [r3, #18]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d110      	bne.n	8002570 <SetTargetData+0x584>
 800254e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	da0c      	bge.n	8002570 <SetTargetData+0x584>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 8002556:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <SetTargetData+0x590>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	429a      	cmp	r2, r3
 8002560:	da03      	bge.n	800256a <SetTargetData+0x57e>
			pRangeData->RangeStatus =
 8002562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002564:	220e      	movs	r2, #14
 8002566:	749a      	strb	r2, [r3, #18]
 8002568:	e002      	b.n	8002570 <SetTargetData+0x584>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800256a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800256c:	2200      	movs	r2, #0
 800256e:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 8002570:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
}
 8002574:	4618      	mov	r0, r3
 8002576:	3738      	adds	r7, #56	; 0x38
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000008 	.word	0x20000008

08002580 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b08f      	sub	sp, #60	; 0x3c
 8002584:	af04      	add	r7, sp, #16
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	3318      	adds	r3, #24
 8002590:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002592:	2300      	movs	r3, #0
 8002594:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	7c9a      	ldrb	r2, [r3, #18]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


	pMultiRangingData->TimeStamp = 0;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	78da      	ldrb	r2, [r3, #3]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	7c9b      	ldrb	r3, [r3, #18]
 80025be:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 80025c0:	7ffb      	ldrb	r3, [r7, #31]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <SetMeasurementData+0x4e>

		iteration = 1;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80025cc:	e002      	b.n	80025d4 <SetMeasurementData+0x54>
	else
		iteration = ActiveResults;
 80025ce:	7ffb      	ldrb	r3, [r7, #31]
 80025d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (i = 0; i < iteration; i++) {
 80025d4:	2300      	movs	r3, #0
 80025d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80025da:	e035      	b.n	8002648 <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 80025dc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	3308      	adds	r3, #8
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 80025f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025f4:	224c      	movs	r2, #76	; 0x4c
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	3310      	adds	r3, #16
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	4413      	add	r3, r2
 8002600:	3304      	adds	r3, #4
 8002602:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 8002604:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002608:	2b00      	cmp	r3, #0
 800260a:	d113      	bne.n	8002634 <SetMeasurementData+0xb4>
			Status = SetTargetData(Dev, ActiveResults,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7918      	ldrb	r0, [r3, #4]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	7c1b      	ldrb	r3, [r3, #16]
 8002614:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8002618:	7ff9      	ldrb	r1, [r7, #31]
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	9202      	str	r2, [sp, #8]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	9201      	str	r2, [sp, #4]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	4623      	mov	r3, r4
 8002626:	4602      	mov	r2, r0
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f7ff fcdf 	bl	8001fec <SetTargetData>
 800262e:	4603      	mov	r3, r0
 8002630:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	for (i = 0; i < iteration; i++) {
 800263e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002642:	3301      	adds	r3, #1
 8002644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002648:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800264c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002650:	429a      	cmp	r2, r3
 8002652:	d3c3      	bcc.n	80025dc <SetMeasurementData+0x5c>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	f893 243f 	ldrb.w	r2, [r3, #1087]	; 0x43f
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002660:	3321      	adds	r3, #33	; 0x21
 8002662:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002664:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800266c:	e01f      	b.n	80026ae <SetMeasurementData+0x12e>
		pdev->PreviousRangeMilliMeter[i] = 0;
 800266e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002672:	6a3a      	ldr	r2, [r7, #32]
 8002674:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8002678:	3308      	adds	r3, #8
 800267a:	2100      	movs	r1, #0
 800267c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002684:	6a3a      	ldr	r2, [r7, #32]
 8002686:	4413      	add	r3, r2
 8002688:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800268c:	3318      	adds	r3, #24
 800268e:	22ff      	movs	r2, #255	; 0xff
 8002690:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8002692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002696:	6a3a      	ldr	r2, [r7, #32]
 8002698:	4413      	add	r3, r2
 800269a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800269e:	331c      	adds	r3, #28
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80026a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026a8:	3301      	adds	r3, #1
 80026aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80026ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d9db      	bls.n	800266e <SetMeasurementData+0xee>
	}

	return Status;
 80026b6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	372c      	adds	r7, #44	; 0x2c
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd90      	pop	{r4, r7, pc}

080026c2 <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3318      	adds	r3, #24
 80026d4:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80026dc:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 80026de:	225c      	movs	r2, #92	; 0x5c
 80026e0:	21ff      	movs	r1, #255	; 0xff
 80026e2:	6838      	ldr	r0, [r7, #0]
 80026e4:	f011 fc8c 	bl	8014000 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	2102      	movs	r1, #2
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f001 fee7 	bl	80044c0 <VL53LX_get_device_results>
 80026f2:	4603      	mov	r3, r0
 80026f4:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	68f9      	ldr	r1, [r7, #12]
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ff40 	bl	8002580 <SetMeasurementData>
 8002700:	4603      	mov	r3, r0
 8002702:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 8002704:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <VL53LX_PerformRefSpadManagement>:
	return Status;
}


VL53LX_Error VL53LX_PerformRefSpadManagement(VL53LX_DEV Dev)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b090      	sub	sp, #64	; 0x40
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002718:	2300      	movs	r3, #0
 800271a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 800271e:	f240 3305 	movw	r3, #773	; 0x305
 8002722:	81bb      	strh	r3, [r7, #12]
	VL53LX_customer_nvm_managed_t *pc;
	VL53LX_DistanceModes DistanceMode;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3318      	adds	r3, #24
 8002728:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 800272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272c:	3348      	adds	r3, #72	; 0x48
 800272e:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53LX_ERROR_NONE) {
 8002730:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002734:	2b00      	cmp	r3, #0
 8002736:	d11c      	bne.n	8002772 <VL53LX_PerformRefSpadManagement+0x62>
		DistanceMode = VL53LXDevDataGet(Dev,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800273e:	3320      	adds	r3, #32
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.DistanceMode);
		Status = VL53LX_run_ref_spad_char(Dev, &RawStatus);
 8002746:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800274a:	4619      	mov	r1, r3
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f8e3 	bl	8002918 <VL53LX_run_ref_spad_char>
 8002752:	4603      	mov	r3, r0
 8002754:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53LX_ERROR_NONE)
 8002758:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800275c:	2b00      	cmp	r3, #0
 800275e:	d108      	bne.n	8002772 <VL53LX_PerformRefSpadManagement+0x62>
			Status = VL53LX_SetDistanceMode(Dev, DistanceMode);
 8002760:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002764:	4619      	mov	r1, r3
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff fa13 	bl	8001b92 <VL53LX_SetDistanceMode>
 800276c:	4603      	mov	r3, r0
 800276e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8002772:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002776:	f113 0f1d 	cmn.w	r3, #29
 800277a:	d14e      	bne.n	800281a <VL53LX_PerformRefSpadManagement+0x10a>

		Status = VL53LX_read_nvm_raw_data(Dev,
 800277c:	f107 0310 	add.w	r3, r7, #16
 8002780:	2206      	movs	r2, #6
 8002782:	2128      	movs	r1, #40	; 0x28
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f00c f991 	bl	800eaac <VL53LX_read_nvm_raw_data>
 800278a:	4603      	mov	r3, r0
 800278c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53LX_ERROR_NONE)
 8002790:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002794:	2b00      	cmp	r3, #0
 8002796:	d109      	bne.n	80027ac <VL53LX_PerformRefSpadManagement+0x9c>
			Status = VL53LX_WriteMulti(Dev,
 8002798:	f107 020c 	add.w	r2, r7, #12
 800279c:	2302      	movs	r3, #2
 800279e:	2114      	movs	r1, #20
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f00e f9c7 	bl	8010b34 <VL53LX_WriteMulti>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53LX_ERROR_NONE) {
 80027ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d105      	bne.n	80027c0 <VL53LX_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 80027b4:	7b3a      	ldrb	r2, [r7, #12]
 80027b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b8:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 80027ba:	7b7a      	ldrb	r2, [r7, #13]
 80027bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027be:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 80027c0:	f107 0310 	add.w	r3, r7, #16
 80027c4:	3310      	adds	r3, #16
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c



		if (Status == VL53LX_ERROR_NONE)
 80027c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d108      	bne.n	80027e2 <VL53LX_PerformRefSpadManagement+0xd2>
			Status = VL53LX_WriteMulti(Dev,
 80027d0:	2306      	movs	r3, #6
 80027d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d4:	210d      	movs	r1, #13
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f00e f9ac 	bl	8010b34 <VL53LX_WriteMulti>
 80027dc:	4603      	mov	r3, r0
 80027de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53LX_ERROR_NONE) {
 80027e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d117      	bne.n	800281a <VL53LX_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 80027ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ec:	781a      	ldrb	r2, [r3, #0]
 80027ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f0:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	785a      	ldrb	r2, [r3, #1]
 80027f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f8:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 80027fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fc:	789a      	ldrb	r2, [r3, #2]
 80027fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002800:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	78da      	ldrb	r2, [r3, #3]
 8002806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002808:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 800280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280c:	791a      	ldrb	r2, [r3, #4]
 800280e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002810:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8002812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002814:	795a      	ldrb	r2, [r3, #5]
 8002816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002818:	715a      	strb	r2, [r3, #5]
		}

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800281a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800281e:	4618      	mov	r0, r3
 8002820:	3740      	adds	r7, #64	; 0x40
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <VL53LX_SmudgeCorrectionEnable>:


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002834:	2300      	movs	r3, #0
 8002836:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 8002838:	2300      	movs	r3, #0
 800283a:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 800283c:	2300      	movs	r3, #0
 800283e:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 8002840:	2300      	movs	r3, #0
 8002842:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	2b03      	cmp	r3, #3
 8002848:	d84a      	bhi.n	80028e0 <VL53LX_SmudgeCorrectionEnable+0xb8>
 800284a:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <VL53LX_SmudgeCorrectionEnable+0x28>)
 800284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002850:	08002861 	.word	0x08002861
 8002854:	08002881 	.word	0x08002881
 8002858:	080028a1 	.word	0x080028a1
 800285c:	080028c1 	.word	0x080028c1
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f003 fd92 	bl	800638a <VL53LX_dynamic_xtalk_correction_disable>
 8002866:	4603      	mov	r3, r0
 8002868:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f003 fda4 	bl	80063b8 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8002870:	4603      	mov	r3, r0
 8002872:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f003 fdcd 	bl	8006414 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 800287a:	4603      	mov	r3, r0
 800287c:	733b      	strb	r3, [r7, #12]
		break;
 800287e:	e032      	b.n	80028e6 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f003 fd6b 	bl	800635c <VL53LX_dynamic_xtalk_correction_enable>
 8002886:	4603      	mov	r3, r0
 8002888:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f003 fdd9 	bl	8006442 <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002890:	4603      	mov	r3, r0
 8002892:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f003 fdbd 	bl	8006414 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 800289a:	4603      	mov	r3, r0
 800289c:	733b      	strb	r3, [r7, #12]
		break;
 800289e:	e022      	b.n	80028e6 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f003 fd5b 	bl	800635c <VL53LX_dynamic_xtalk_correction_enable>
 80028a6:	4603      	mov	r3, r0
 80028a8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f003 fdc9 	bl	8006442 <VL53LX_dynamic_xtalk_correction_apply_enable>
 80028b0:	4603      	mov	r3, r0
 80028b2:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f003 fd96 	bl	80063e6 <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 80028ba:	4603      	mov	r3, r0
 80028bc:	733b      	strb	r3, [r7, #12]
		break;
 80028be:	e012      	b.n	80028e6 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f003 fd4b 	bl	800635c <VL53LX_dynamic_xtalk_correction_enable>
 80028c6:	4603      	mov	r3, r0
 80028c8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f003 fd74 	bl	80063b8 <VL53LX_dynamic_xtalk_correction_apply_disable>
 80028d0:	4603      	mov	r3, r0
 80028d2:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f003 fd9d 	bl	8006414 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 80028da:	4603      	mov	r3, r0
 80028dc:	733b      	strb	r3, [r7, #12]
		break;
 80028de:	e002      	b.n	80028e6 <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80028e0:	23fc      	movs	r3, #252	; 0xfc
 80028e2:	73fb      	strb	r3, [r7, #15]
		break;
 80028e4:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 80028e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10d      	bne.n	800290a <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 80028ee:	7bbb      	ldrb	r3, [r7, #14]
 80028f0:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 80028f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 80028fa:	7b7b      	ldrb	r3, [r7, #13]
 80028fc:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 80028fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8002906:	7b3b      	ldrb	r3, [r7, #12]
 8002908:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800290a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop

08002918 <VL53LX_run_ref_spad_char>:


VL53LX_Error VL53LX_run_ref_spad_char(
	VL53LX_DEV        Dev,
	VL53LX_Error     *pcal_status)
{
 8002918:	b5b0      	push	{r4, r5, r7, lr}
 800291a:	b08c      	sub	sp, #48	; 0x30
 800291c:	af04      	add	r7, sp, #16
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002922:	2300      	movs	r3, #0
 8002924:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3318      	adds	r3, #24
 800292a:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53LX_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002932:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002934:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d104      	bne.n	8002946 <VL53LX_run_ref_spad_char+0x2e>
		status = VL53LX_enable_powerforce(Dev);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f005 fd62 	bl	8008406 <VL53LX_enable_powerforce>
 8002942:	4603      	mov	r3, r0
 8002944:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 8002946:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d117      	bne.n	800297e <VL53LX_run_ref_spad_char+0x66>
		status =
		VL53LX_set_ref_spad_char_config(
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	7858      	ldrb	r0, [r3, #1]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	685c      	ldr	r4, [r3, #4]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	891d      	ldrh	r5, [r3, #8]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	899b      	ldrh	r3, [r3, #12]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	8952      	ldrh	r2, [r2, #10]
 8002962:	69b9      	ldr	r1, [r7, #24]
 8002964:	f8b1 12de 	ldrh.w	r1, [r1, #734]	; 0x2de
 8002968:	9102      	str	r1, [sp, #8]
 800296a:	9201      	str	r2, [sp, #4]
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	462b      	mov	r3, r5
 8002970:	4622      	mov	r2, r4
 8002972:	4601      	mov	r1, r0
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f007 fb71 	bl	800a05c <VL53LX_set_ref_spad_char_config>
 800297a:	4603      	mov	r3, r0
 800297c:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53LX_ERROR_NONE)
 800297e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d107      	bne.n	8002996 <VL53LX_run_ref_spad_char+0x7e>
		status = VL53LX_run_device_test(
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	4619      	mov	r1, r3
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f890 	bl	8002ab2 <VL53LX_run_device_test>
 8002992:	4603      	mov	r3, r0
 8002994:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53LX_ERROR_NONE)
 8002996:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d108      	bne.n	80029b0 <VL53LX_run_ref_spad_char+0x98>
		status =
		VL53LX_ReadMulti(
 800299e:	f107 020c 	add.w	r2, r7, #12
 80029a2:	2302      	movs	r3, #2
 80029a4:	21d9      	movs	r1, #217	; 0xd9
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f00e f8fa 	bl	8010ba0 <VL53LX_ReadMulti>
 80029ac:	4603      	mov	r3, r0
 80029ae:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53LX_ERROR_NONE) {
 80029b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10a      	bne.n	80029ce <VL53LX_run_ref_spad_char+0xb6>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 80029b8:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 80029c0:	331f      	adds	r3, #31
 80029c2:	701a      	strb	r2, [r3, #0]
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 80029c4:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80029cc:	701a      	strb	r2, [r3, #0]
	}



	if (status == VL53LX_ERROR_NONE)
 80029ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d108      	bne.n	80029e8 <VL53LX_run_ref_spad_char+0xd0>
		status =
			VL53LX_WriteMulti(
 80029d6:	f107 020c 	add.w	r2, r7, #12
 80029da:	2302      	movs	r3, #2
 80029dc:	2114      	movs	r1, #20
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f00e f8a8 	bl	8010b34 <VL53LX_WriteMulti>
 80029e4:	4603      	mov	r3, r0
 80029e6:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 80029e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d107      	bne.n	8002a00 <VL53LX_run_ref_spad_char+0xe8>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 80029f0:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 80029f8:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53LX_ERROR_NONE)
 8002a00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d108      	bne.n	8002a1a <VL53LX_run_ref_spad_char+0x102>
		status =
			VL53LX_ReadMulti(
 8002a08:	f107 020c 	add.w	r2, r7, #12
 8002a0c:	2306      	movs	r3, #6
 8002a0e:	21ac      	movs	r1, #172	; 0xac
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f00e f8c5 	bl	8010ba0 <VL53LX_ReadMulti>
 8002a16:	4603      	mov	r3, r0
 8002a18:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53LX_ERROR_NONE)
 8002a1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d108      	bne.n	8002a34 <VL53LX_run_ref_spad_char+0x11c>
		status =
			VL53LX_WriteMulti(
 8002a22:	f107 020c 	add.w	r2, r7, #12
 8002a26:	2306      	movs	r3, #6
 8002a28:	210d      	movs	r1, #13
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f00e f882 	bl	8010b34 <VL53LX_WriteMulti>
 8002a30:	4603      	mov	r3, r0
 8002a32:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53LX_ERROR_NONE) {
 8002a34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d117      	bne.n	8002a6c <VL53LX_run_ref_spad_char+0x154>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8002a3c:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8002a44:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8002a4c:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8002a5c:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8002a64:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53LX_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53LX_ERROR_NONE) {
 8002a6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d114      	bne.n	8002a9e <VL53LX_run_ref_spad_char+0x186>

		switch (pdev->sys_results.result__range_status) {
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 8002a7a:	2b10      	cmp	r3, #16
 8002a7c:	d00c      	beq.n	8002a98 <VL53LX_run_ref_spad_char+0x180>
 8002a7e:	2b10      	cmp	r3, #16
 8002a80:	dc0e      	bgt.n	8002aa0 <VL53LX_run_ref_spad_char+0x188>
 8002a82:	2b0e      	cmp	r3, #14
 8002a84:	d002      	beq.n	8002a8c <VL53LX_run_ref_spad_char+0x174>
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	d003      	beq.n	8002a92 <VL53LX_run_ref_spad_char+0x17a>
 8002a8a:	e009      	b.n	8002aa0 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53LX_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8002a8c:	23e4      	movs	r3, #228	; 0xe4
 8002a8e:	77fb      	strb	r3, [r7, #31]
			break;
 8002a90:	e006      	b.n	8002aa0 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8002a92:	23e3      	movs	r3, #227	; 0xe3
 8002a94:	77fb      	strb	r3, [r7, #31]
			break;
 8002a96:	e003      	b.n	8002aa0 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8002a98:	23e2      	movs	r3, #226	; 0xe2
 8002a9a:	77fb      	strb	r3, [r7, #31]
			break;
 8002a9c:	e000      	b.n	8002aa0 <VL53LX_run_ref_spad_char+0x188>
		}
	}
 8002a9e:	bf00      	nop



	*pcal_status = status;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	7ffa      	ldrb	r2, [r7, #31]
 8002aa4:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8002aa6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bdb0      	pop	{r4, r5, r7, pc}

08002ab2 <VL53LX_run_device_test>:


VL53LX_Error VL53LX_run_device_test(
	VL53LX_DEV             Dev,
	VL53LX_DeviceTestMode  device_test_mode)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b086      	sub	sp, #24
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3318      	adds	r3, #24
 8002ac6:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002acc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d108      	bne.n	8002ae6 <VL53LX_run_device_test+0x34>
		status =
			VL53LX_RdByte(
 8002ad4:	f107 030b 	add.w	r3, r7, #11
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2130      	movs	r1, #48	; 0x30
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f00e f8f1 	bl	8010cc4 <VL53LX_RdByte>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53LX_ERROR_NONE)
 8002ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d103      	bne.n	8002af6 <VL53LX_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8002aee:	7afa      	ldrb	r2, [r7, #11]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a


	if (status == VL53LX_ERROR_NONE)
 8002af6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <VL53LX_run_device_test+0x5a>
		status = VL53LX_start_test(
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	4619      	mov	r1, r3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f005 fc03 	bl	800830e <VL53LX_start_test>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53LX_ERROR_NONE)
 8002b0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d104      	bne.n	8002b1e <VL53LX_run_device_test+0x6c>
		status = VL53LX_wait_for_test_completion(Dev);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f00d fc4d 	bl	80103b4 <VL53LX_wait_for_test_completion>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8002b1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d108      	bne.n	8002b38 <VL53LX_run_device_test+0x86>
		status =
			VL53LX_ReadMulti(
 8002b26:	f107 020c 	add.w	r2, r7, #12
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	2189      	movs	r1, #137	; 0x89
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f00e f836 	bl	8010ba0 <VL53LX_ReadMulti>
 8002b34:	4603      	mov	r3, r0
 8002b36:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8002b38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d107      	bne.n	8002b50 <VL53LX_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8002b40:	7b3a      	ldrb	r2, [r7, #12]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		pdev->sys_results.result__report_status = comms_buffer[1];
 8002b48:	7b7a      	ldrb	r2, [r7, #13]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
	}



	pdev->sys_results.result__range_status &=
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53LX_ERROR_NONE) {
 8002b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d108      	bne.n	8002b7c <VL53LX_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53LX_ERROR_NONE)
 8002b6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d104      	bne.n	8002b7c <VL53LX_run_device_test+0xca>
			status = VL53LX_clear_interrupt(Dev);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f005 fc6b 	bl	800844e <VL53LX_clear_interrupt>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53LX_ERROR_NONE)
 8002b7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <VL53LX_run_device_test+0xde>
		status =
			VL53LX_start_test(
 8002b84:	2100      	movs	r1, #0
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f005 fbc1 	bl	800830e <VL53LX_start_test>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8002b90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	785b      	ldrb	r3, [r3, #1]
 8002bae:	2b21      	cmp	r3, #33	; 0x21
 8002bb0:	d006      	beq.n	8002bc0 <select_offset_per_vcsel+0x24>
 8002bb2:	2b21      	cmp	r3, #33	; 0x21
 8002bb4:	dc2a      	bgt.n	8002c0c <select_offset_per_vcsel+0x70>
 8002bb6:	2b1b      	cmp	r3, #27
 8002bb8:	d01b      	beq.n	8002bf2 <select_offset_per_vcsel+0x56>
 8002bba:	2b1e      	cmp	r3, #30
 8002bbc:	d00c      	beq.n	8002bd8 <select_offset_per_vcsel+0x3c>
 8002bbe:	e025      	b.n	8002c0c <select_offset_per_vcsel+0x70>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	817b      	strh	r3, [r7, #10]
		break;
 8002bd6:	e02b      	b.n	8002c30 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002bde:	3304      	adds	r3, #4
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002bea:	3306      	adds	r3, #6
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	817b      	strh	r3, [r7, #10]
		break;
 8002bf0:	e01e      	b.n	8002c30 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002c04:	330a      	adds	r3, #10
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	817b      	strh	r3, [r7, #10]
		break;
 8002c0a:	e011      	b.n	8002c30 <select_offset_per_vcsel+0x94>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002c12:	3308      	adds	r3, #8
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002c1e:	330a      	adds	r3, #10
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8002c24:	23fc      	movs	r3, #252	; 0xfc
 8002c26:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	801a      	strh	r2, [r3, #0]
		break;
 8002c2e:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002c36:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 8002c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10b      	bne.n	8002c58 <select_offset_per_vcsel+0xbc>
		*poffset = (isc & 0x01) ? tA : tB;
 8002c40:	7a7b      	ldrb	r3, [r7, #9]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <select_offset_per_vcsel+0xb4>
 8002c4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c4e:	e001      	b.n	8002c54 <select_offset_per_vcsel+0xb8>
 8002c50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	8013      	strh	r3, [r2, #0]

	return status;
 8002c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8002c68:	b490      	push	{r4, r7}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	4611      	mov	r1, r2
 8002c74:	461a      	mov	r2, r3
 8002c76:	460b      	mov	r3, r1
 8002c78:	71fb      	strb	r3, [r7, #7]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c9a:	e021      	b.n	8002ce0 <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8002c9c:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	0052      	lsls	r2, r2, #1
 8002caa:	441a      	add	r2, r3
 8002cac:	00d3      	lsls	r3, r2, #3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	440b      	add	r3, r1
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	4413      	add	r3, r2
 8002cba:	4423      	add	r3, r4
 8002cbc:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8002cc0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8002cc4:	6a3a      	ldr	r2, [r7, #32]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8002cca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	3206      	adds	r2, #6
 8002cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8002cda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cdc:	3301      	adds	r3, #1
 8002cde:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002ce0:	79bb      	ldrb	r3, [r7, #6]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d3d8      	bcc.n	8002c9c <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d047      	beq.n	8002d80 <vl53lx_diff_histo_stddev+0x118>
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d044      	beq.n	8002d80 <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002cfe:	e03a      	b.n	8002d76 <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8002d00:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	0052      	lsls	r2, r2, #1
 8002d0e:	441a      	add	r2, r3
 8002d10:	00d3      	lsls	r3, r2, #3
 8002d12:	461a      	mov	r2, r3
 8002d14:	460b      	mov	r3, r1
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	440b      	add	r3, r1
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	4413      	add	r3, r2
 8002d1e:	4423      	add	r3, r4
 8002d20:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8002d24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002d28:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d30:	fb02 f203 	mul.w	r2, r2, r3
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d3a:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8002d3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	3206      	adds	r2, #6
 8002d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d4a:	fb02 f203 	mul.w	r2, r2, r3
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8002d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	69b9      	ldr	r1, [r7, #24]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8002d60:	69b8      	ldr	r0, [r7, #24]
 8002d62:	6979      	ldr	r1, [r7, #20]
 8002d64:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	441a      	add	r2, r3
 8002d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6e:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8002d70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d72:	3301      	adds	r3, #1
 8002d74:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002d76:	79bb      	ldrb	r3, [r7, #6]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d3bf      	bcc.n	8002d00 <vl53lx_diff_histo_stddev+0x98>
	}
}
 8002d80:	bf00      	nop
 8002d82:	3728      	adds	r7, #40	; 0x28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc90      	pop	{r4, r7}
 8002d88:	4770      	bx	lr

08002d8a <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 8002d8a:	b5b0      	push	{r4, r5, r7, lr}
 8002d8c:	b08c      	sub	sp, #48	; 0x30
 8002d8e:	af02      	add	r7, sp, #8
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3318      	adds	r3, #24
 8002d98:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8002dba:	2318      	movs	r3, #24
 8002dbc:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8002dbe:	f107 0314 	add.w	r3, r7, #20
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f248 018f 	movw	r1, #32911	; 0x808f
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f002 fbd3 	bl	8005574 <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8002dce:	f107 0310 	add.w	r3, r7, #16
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f248 018e 	movw	r1, #32910	; 0x808e
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f002 fbcb 	bl	8005574 <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002de4:	330d      	adds	r3, #13
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f040 811a 	bne.w	8003022 <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8002e08:	7efb      	ldrb	r3, [r7, #27]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	7eba      	ldrb	r2, [r7, #26]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <vl53lx_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002e28:	330c      	adds	r3, #12
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e32:	e004      	b.n	8002e3e <vl53lx_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8002e3e:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8002e42:	7efb      	ldrb	r3, [r7, #27]
 8002e44:	69f8      	ldr	r0, [r7, #28]
 8002e46:	461a      	mov	r2, r3
 8002e48:	0052      	lsls	r2, r2, #1
 8002e4a:	441a      	add	r2, r3
 8002e4c:	0153      	lsls	r3, r2, #5
 8002e4e:	461a      	mov	r2, r3
 8002e50:	460b      	mov	r3, r1
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	440b      	add	r3, r1
 8002e56:	019b      	lsls	r3, r3, #6
 8002e58:	4413      	add	r3, r2
 8002e5a:	4403      	add	r3, r0
 8002e5c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	dd0c      	ble.n	8002e80 <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 8002e66:	7e79      	ldrb	r1, [r7, #25]
 8002e68:	7efa      	ldrb	r2, [r7, #27]
 8002e6a:	f107 030c 	add.w	r3, r7, #12
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	460b      	mov	r3, r1
 8002e78:	6839      	ldr	r1, [r7, #0]
 8002e7a:	69f8      	ldr	r0, [r7, #28]
 8002e7c:	f7ff fef4 	bl	8002c68 <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	db23      	blt.n	8002ed0 <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002e8e:	3310      	adds	r3, #16
 8002e90:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8002e94:	2100      	movs	r1, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f011 f8b2 	bl	8014000 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002ea2:	330c      	adds	r3, #12
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]

			recom_been_reset = 1;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8002eae:	7efb      	ldrb	r3, [r7, #27]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d106      	bne.n	8002ec2 <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002eba:	330d      	adds	r3, #13
 8002ebc:	2206      	movs	r2, #6
 8002ebe:	701a      	strb	r2, [r3, #0]
 8002ec0:	e034      	b.n	8002f2c <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002ec8:	330d      	adds	r3, #13
 8002eca:	2207      	movs	r2, #7
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	e02d      	b.n	8002f2c <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002ed6:	330c      	adds	r3, #12
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002ee2:	e01e      	b.n	8002f22 <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8002ee4:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8002ee8:	7e39      	ldrb	r1, [r7, #24]
 8002eea:	7efb      	ldrb	r3, [r7, #27]
 8002eec:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	3006      	adds	r0, #6
 8002ef4:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8002ef8:	69f8      	ldr	r0, [r7, #28]
 8002efa:	461a      	mov	r2, r3
 8002efc:	0052      	lsls	r2, r2, #1
 8002efe:	441a      	add	r2, r3
 8002f00:	00d3      	lsls	r3, r2, #3
 8002f02:	461a      	mov	r2, r3
 8002f04:	460b      	mov	r3, r1
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	440b      	add	r3, r1
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	4413      	add	r3, r2
 8002f0e:	442b      	add	r3, r5
 8002f10:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8002f14:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8002f18:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002f22:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002f26:	7ebb      	ldrb	r3, [r7, #26]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d3db      	bcc.n	8002ee4 <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f32:	330c      	adds	r3, #12
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d109      	bne.n	8002f54 <vl53lx_histo_merge+0x1ca>
 8002f40:	7efb      	ldrb	r3, [r7, #27]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d106      	bne.n	8002f54 <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
 8002f52:	e00e      	b.n	8002f72 <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 8002f54:	7efb      	ldrb	r3, [r7, #27]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d10b      	bne.n	8002f72 <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f60:	330c      	adds	r3, #12
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f6e:	330c      	adds	r3, #12
 8002f70:	701a      	strb	r2, [r3, #0]

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8002f72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d102      	bne.n	8002f80 <vl53lx_histo_merge+0x1f6>
 8002f7a:	7efb      	ldrb	r3, [r7, #27]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d069      	beq.n	8003054 <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f86:	330d      	adds	r3, #13
 8002f88:	781b      	ldrb	r3, [r3, #0]
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d162      	bne.n	8003054 <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f92:	e008      	b.n	8002fa6 <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 8002f94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	3206      	adds	r2, #6
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8002fa0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002fa6:	7ebb      	ldrb	r3, [r7, #26]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d3f1      	bcc.n	8002f94 <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002fb4:	e02f      	b.n	8003016 <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002fbc:	e023      	b.n	8003006 <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 8002fbe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	3206      	adds	r2, #6
 8002fc4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 8002fc8:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002fcc:	7efb      	ldrb	r3, [r7, #27]
 8002fce:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8002fd0:	69fc      	ldr	r4, [r7, #28]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	0052      	lsls	r2, r2, #1
 8002fd6:	441a      	add	r2, r3
 8002fd8:	00d3      	lsls	r3, r2, #3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	460b      	mov	r3, r1
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	440b      	add	r3, r1
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	4413      	add	r3, r2
 8002fe6:	442b      	add	r3, r5
 8002fe8:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8002fec:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8002ff0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002ff2:	18c1      	adds	r1, r0, r3
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	3206      	adds	r2, #6
 8002ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8002ffc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003000:	3301      	adds	r3, #1
 8003002:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003006:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	429a      	cmp	r2, r3
 800300e:	dbd6      	blt.n	8002fbe <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 8003010:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003012:	3301      	adds	r3, #1
 8003014:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003016:	7ebb      	ldrb	r3, [r7, #26]
 8003018:	b29b      	uxth	r3, r3
 800301a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800301c:	429a      	cmp	r2, r3
 800301e:	d3ca      	bcc.n	8002fb6 <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8003020:	e018      	b.n	8003054 <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003028:	330d      	adds	r3, #13
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	3b01      	subs	r3, #1
 800302e:	b2da      	uxtb	r2, r3
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003036:	330d      	adds	r3, #13
 8003038:	701a      	strb	r2, [r3, #0]
		if (pdev->pos_before_next_recom == 255)
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003040:	330d      	adds	r3, #13
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2bff      	cmp	r3, #255	; 0xff
 8003046:	d105      	bne.n	8003054 <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800304e:	330d      	adds	r3, #13
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
}
 8003054:	bf00      	nop
 8003056:	3728      	adds	r7, #40	; 0x28
 8003058:	46bd      	mov	sp, r7
 800305a:	bdb0      	pop	{r4, r5, r7, pc}

0800305c <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b0c6      	sub	sp, #280	; 0x118
 8003060:	af00      	add	r7, sp, #0
 8003062:	1d3b      	adds	r3, r7, #4
 8003064:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003066:	2300      	movs	r3, #0
 8003068:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8003072:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003076:	2b00      	cmp	r3, #0
 8003078:	d108      	bne.n	800308c <VL53LX_load_patch+0x30>
		status = VL53LX_WrByte(Dev,
 800307a:	1d3b      	adds	r3, r7, #4
 800307c:	2200      	movs	r2, #0
 800307e:	2185      	movs	r1, #133	; 0x85
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	f00d fdc3 	bl	8010c0c <VL53LX_WrByte>
 8003086:	4603      	mov	r3, r0
 8003088:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 800308c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003090:	2b00      	cmp	r3, #0
 8003092:	d103      	bne.n	800309c <VL53LX_load_patch+0x40>
		VL53LX_enable_powerforce(Dev);
 8003094:	1d3b      	adds	r3, r7, #4
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	f005 f9b5 	bl	8008406 <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 800309c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	f248 018c 	movw	r1, #32908	; 0x808c
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	f002 fa64 	bl	8005574 <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 80030ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d81b      	bhi.n	80030ec <VL53LX_load_patch+0x90>
 80030b4:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <VL53LX_load_patch+0x60>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030cd 	.word	0x080030cd
 80030c0:	080030d5 	.word	0x080030d5
 80030c4:	080030dd 	.word	0x080030dd
 80030c8:	080030e5 	.word	0x080030e5
	case 0:
		patch_power = 0x00;
 80030cc:	2300      	movs	r3, #0
 80030ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80030d2:	e00e      	b.n	80030f2 <VL53LX_load_patch+0x96>
	case 1:
		patch_power = 0x10;
 80030d4:	2310      	movs	r3, #16
 80030d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80030da:	e00a      	b.n	80030f2 <VL53LX_load_patch+0x96>
	case 2:
		patch_power = 0x20;
 80030dc:	2320      	movs	r3, #32
 80030de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80030e2:	e006      	b.n	80030f2 <VL53LX_load_patch+0x96>
	case 3:
		patch_power = 0x40;
 80030e4:	2340      	movs	r3, #64	; 0x40
 80030e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80030ea:	e002      	b.n	80030f2 <VL53LX_load_patch+0x96>
	default:
		patch_power = 0x00;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 80030f2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d125      	bne.n	8003146 <VL53LX_load_patch+0xea>

		comms_buffer[0] = 0x29;
 80030fa:	f107 030c 	add.w	r3, r7, #12
 80030fe:	2229      	movs	r2, #41	; 0x29
 8003100:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8003102:	f107 030c 	add.w	r3, r7, #12
 8003106:	22c9      	movs	r2, #201	; 0xc9
 8003108:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800310a:	f107 030c 	add.w	r3, r7, #12
 800310e:	220e      	movs	r2, #14
 8003110:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8003112:	f107 030c 	add.w	r3, r7, #12
 8003116:	2240      	movs	r2, #64	; 0x40
 8003118:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800311a:	f107 030c 	add.w	r3, r7, #12
 800311e:	2228      	movs	r2, #40	; 0x28
 8003120:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8003122:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003126:	b2da      	uxtb	r2, r3
 8003128:	f107 030c 	add.w	r3, r7, #12
 800312c:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 800312e:	f107 020c 	add.w	r2, r7, #12
 8003132:	1d38      	adds	r0, r7, #4
 8003134:	2306      	movs	r3, #6
 8003136:	f240 4176 	movw	r1, #1142	; 0x476
 800313a:	6800      	ldr	r0, [r0, #0]
 800313c:	f00d fcfa 	bl	8010b34 <VL53LX_WriteMulti>
 8003140:	4603      	mov	r3, r0
 8003142:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8003146:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800314a:	2b00      	cmp	r3, #0
 800314c:	d123      	bne.n	8003196 <VL53LX_load_patch+0x13a>
		comms_buffer[0] = 0x03;
 800314e:	f107 030c 	add.w	r3, r7, #12
 8003152:	2203      	movs	r2, #3
 8003154:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8003156:	f107 030c 	add.w	r3, r7, #12
 800315a:	226d      	movs	r2, #109	; 0x6d
 800315c:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 800315e:	f107 030c 	add.w	r3, r7, #12
 8003162:	2203      	movs	r2, #3
 8003164:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8003166:	f107 030c 	add.w	r3, r7, #12
 800316a:	226f      	movs	r2, #111	; 0x6f
 800316c:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800316e:	f107 030c 	add.w	r3, r7, #12
 8003172:	2207      	movs	r2, #7
 8003174:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8003176:	f107 030c 	add.w	r3, r7, #12
 800317a:	2229      	movs	r2, #41	; 0x29
 800317c:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 800317e:	f107 020c 	add.w	r2, r7, #12
 8003182:	1d38      	adds	r0, r7, #4
 8003184:	2306      	movs	r3, #6
 8003186:	f240 4196 	movw	r1, #1174	; 0x496
 800318a:	6800      	ldr	r0, [r0, #0]
 800318c:	f00d fcd2 	bl	8010b34 <VL53LX_WriteMulti>
 8003190:	4603      	mov	r3, r0
 8003192:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8003196:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800319a:	2b00      	cmp	r3, #0
 800319c:	d113      	bne.n	80031c6 <VL53LX_load_patch+0x16a>
		comms_buffer[0] = 0x00;
 800319e:	f107 030c 	add.w	r3, r7, #12
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80031a6:	f107 030c 	add.w	r3, r7, #12
 80031aa:	2207      	movs	r2, #7
 80031ac:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 80031ae:	f107 020c 	add.w	r2, r7, #12
 80031b2:	1d38      	adds	r0, r7, #4
 80031b4:	2302      	movs	r3, #2
 80031b6:	f240 4172 	movw	r1, #1138	; 0x472
 80031ba:	6800      	ldr	r0, [r0, #0]
 80031bc:	f00d fcba 	bl	8010b34 <VL53LX_WriteMulti>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 80031c6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d113      	bne.n	80031f6 <VL53LX_load_patch+0x19a>
		comms_buffer[0] = 0x00;
 80031ce:	f107 030c 	add.w	r3, r7, #12
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80031d6:	f107 030c 	add.w	r3, r7, #12
 80031da:	2207      	movs	r2, #7
 80031dc:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 80031de:	f107 020c 	add.w	r2, r7, #12
 80031e2:	1d38      	adds	r0, r7, #4
 80031e4:	2302      	movs	r3, #2
 80031e6:	f240 4174 	movw	r1, #1140	; 0x474
 80031ea:	6800      	ldr	r0, [r0, #0]
 80031ec:	f00d fca2 	bl	8010b34 <VL53LX_WriteMulti>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 80031f6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <VL53LX_load_patch+0x1b6>
		status = VL53LX_WrByte(Dev,
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	2201      	movs	r2, #1
 8003202:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	f00d fd00 	bl	8010c0c <VL53LX_WrByte>
 800320c:	4603      	mov	r3, r0
 800320e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 8003212:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003216:	2b00      	cmp	r3, #0
 8003218:	d108      	bne.n	800322c <VL53LX_load_patch+0x1d0>
		status = VL53LX_WrByte(Dev,
 800321a:	1d3b      	adds	r3, r7, #4
 800321c:	2201      	movs	r2, #1
 800321e:	2185      	movs	r1, #133	; 0x85
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	f00d fcf3 	bl	8010c0c <VL53LX_WrByte>
 8003226:	4603      	mov	r3, r0
 8003228:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800322c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8003230:	4618      	mov	r0, r3
 8003232:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop

0800323c <VL53LX_unload_patch>:

VL53LX_Error VL53LX_unload_patch(VL53LX_DEV Dev)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE)
 8003248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d106      	bne.n	800325e <VL53LX_unload_patch+0x22>
		status = VL53LX_WrByte(Dev,
 8003250:	2200      	movs	r2, #0
 8003252:	2185      	movs	r1, #133	; 0x85
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f00d fcd9 	bl	8010c0c <VL53LX_WrByte>
 800325a:	4603      	mov	r3, r0
 800325c:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 800325e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <VL53LX_unload_patch+0x30>
		VL53LX_disable_powerforce(Dev);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f005 f8df 	bl	800842a <VL53LX_disable_powerforce>

	if (status == VL53LX_ERROR_NONE)
 800326c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <VL53LX_unload_patch+0x48>
		status = VL53LX_WrByte(Dev,
 8003274:	2200      	movs	r2, #0
 8003276:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f00d fcc6 	bl	8010c0c <VL53LX_WrByte>
 8003280:	4603      	mov	r3, r0
 8003282:	73fb      	strb	r3, [r7, #15]
		VL53LX_PATCH__CTRL, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d106      	bne.n	800329a <VL53LX_unload_patch+0x5e>
		status = VL53LX_WrByte(Dev,
 800328c:	2201      	movs	r2, #1
 800328e:	2185      	movs	r1, #133	; 0x85
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f00d fcbb 	bl	8010c0c <VL53LX_WrByte>
 8003296:	4603      	mov	r3, r0
 8003298:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800329a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 80032a6:	b5b0      	push	{r4, r5, r7, lr}
 80032a8:	b08a      	sub	sp, #40	; 0x28
 80032aa:	af04      	add	r7, sp, #16
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	460b      	mov	r3, r1
 80032b0:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3318      	adds	r3, #24
 80032ba:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80032c2:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 80032c8:	2162      	movs	r1, #98	; 0x62
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f004 f920 	bl	8007510 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2204      	movs	r2, #4
 80032d4:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2205      	movs	r2, #5
 80032e0:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	pres->zone_results.active_zones    = 0;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80032ec:	2300      	movs	r3, #0
 80032ee:	75bb      	strb	r3, [r7, #22]
 80032f0:	e01b      	b.n	800332a <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 80032f2:	7dba      	ldrb	r2, [r7, #22]
 80032f4:	4613      	mov	r3, r2
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4413      	add	r3, r2
 8003304:	3308      	adds	r3, #8
 8003306:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2200      	movs	r2, #0
 800330c:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2200      	movs	r2, #0
 8003312:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2200      	movs	r2, #0
 8003318:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003324:	7dbb      	ldrb	r3, [r7, #22]
 8003326:	3301      	adds	r3, #1
 8003328:	75bb      	strb	r3, [r7, #22]
 800332a:	7dbb      	ldrb	r3, [r7, #22]
 800332c:	2b04      	cmp	r3, #4
 800332e:	d9e0      	bls.n	80032f2 <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2205      	movs	r2, #5
 8003334:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
	pres->zone_hists.active_zones      = 0;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2205      	movs	r2, #5
 8003344:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
	pres->zone_cal.active_zones        = 0;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003350:	2300      	movs	r3, #0
 8003352:	75bb      	strb	r3, [r7, #22]
 8003354:	e039      	b.n	80033ca <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 8003356:	7dba      	ldrb	r2, [r7, #22]
 8003358:	68f9      	ldr	r1, [r7, #12]
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 800336c:	7dba      	ldrb	r2, [r7, #22]
 800336e:	68f9      	ldr	r1, [r7, #12]
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	f503 7366 	add.w	r3, r3, #920	; 0x398
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 8003382:	7dba      	ldrb	r2, [r7, #22]
 8003384:	68f9      	ldr	r1, [r7, #12]
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 8003398:	7dba      	ldrb	r2, [r7, #22]
 800339a:	68f9      	ldr	r1, [r7, #12]
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 80033ae:	7dba      	ldrb	r2, [r7, #22]
 80033b0:	68f9      	ldr	r1, [r7, #12]
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80033c4:	7dbb      	ldrb	r3, [r7, #22]
 80033c6:	3301      	adds	r3, #1
 80033c8:	75bb      	strb	r3, [r7, #22]
 80033ca:	7dbb      	ldrb	r3, [r7, #22]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d9c2      	bls.n	8003356 <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	2200      	movs	r2, #0
 80033d4:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	221e      	movs	r2, #30
 80033da:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	2200      	movs	r2, #0
 80033e0:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	2200      	movs	r2, #0
 80033e6:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	2201      	movs	r2, #1
 80033ec:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2201      	movs	r2, #1
 80033f2:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	2201      	movs	r2, #1
 80033f8:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003400:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003408:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8003410:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2264      	movs	r2, #100	; 0x64
 8003416:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800341e:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800342e:	3302      	adds	r3, #2
 8003430:	2203      	movs	r2, #3
 8003432:	701a      	strb	r2, [r3, #0]
	pdev->offset_results.active_results = 0;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800343a:	3303      	adds	r3, #3
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]



	pdev->gain_cal.standard_ranging_gain_factor =
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f240 72db 	movw	r2, #2011	; 0x7db
 8003446:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8003450:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f004 f83f 	bl	80074d8 <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003460:	3310      	adds	r3, #16
 8003462:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f010 fdc9 	bl	8014000 <memset>
	pdev->bin_rec_pos = 0;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003474:	330c      	adds	r3, #12
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
	pdev->pos_before_next_recom = 0;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003480:	330d      	adds	r3, #13
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <VL53LX_data_init+0x1f8>
 800348c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d104      	bne.n	800349e <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f8b7 	bl	8003608 <VL53LX_read_p2p_data>
 800349a:	4603      	mov	r3, r0
 800349c:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 800349e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d107      	bne.n	80034b6 <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034ac:	4618      	mov	r0, r3
 80034ae:	f002 ffdf 	bl	8006470 <VL53LX_init_refspadchar_config_struct>
 80034b2:	4603      	mov	r3, r0
 80034b4:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 80034b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d107      	bne.n	80034ce <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034c4:	4618      	mov	r0, r3
 80034c6:	f002 fff7 	bl	80064b8 <VL53LX_init_ssc_config_struct>
 80034ca:	4603      	mov	r3, r0
 80034cc:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 80034ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10b      	bne.n	80034ee <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80034e2:	4619      	mov	r1, r3
 80034e4:	4610      	mov	r0, r2
 80034e6:	f003 f808 	bl	80064fa <VL53LX_init_xtalk_config_struct>
 80034ea:	4603      	mov	r3, r0
 80034ec:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 80034ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d107      	bne.n	8003506 <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80034fc:	4618      	mov	r0, r3
 80034fe:	f003 f86f 	bl	80065e0 <VL53LX_init_xtalk_extract_config_struct>
 8003502:	4603      	mov	r3, r0
 8003504:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003506:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d107      	bne.n	800351e <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003514:	4618      	mov	r0, r3
 8003516:	f003 f892 	bl	800663e <VL53LX_init_offset_cal_config_struct>
 800351a:	4603      	mov	r3, r0
 800351c:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 800351e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d107      	bne.n	8003536 <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 800352c:	4618      	mov	r0, r3
 800352e:	f003 f8ad 	bl	800668c <VL53LX_init_zone_cal_config_struct>
 8003532:	4603      	mov	r3, r0
 8003534:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003536:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10b      	bne.n	8003556 <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800354a:	4619      	mov	r1, r3
 800354c:	4610      	mov	r0, r2
 800354e:	f003 f8c1 	bl	80066d4 <VL53LX_init_hist_post_process_config_struct>
 8003552:	4603      	mov	r3, r0
 8003554:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 8003556:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d107      	bne.n	800356e <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003564:	4618      	mov	r0, r3
 8003566:	f003 fac0 	bl	8006aea <VL53LX_init_hist_gen3_dmax_config_struct>
 800356a:	4603      	mov	r3, r0
 800356c:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 800356e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <VL53LX_data_init+0x2de>
		status = VL53LX_init_tuning_parm_storage_struct(
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	33f8      	adds	r3, #248	; 0xf8
 800357a:	4618      	mov	r0, r3
 800357c:	f003 f919 	bl	80067b2 <VL53LX_init_tuning_parm_storage_struct>
 8003580:	4603      	mov	r3, r0
 8003582:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 8003584:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d116      	bne.n	80035ba <VL53LX_data_init+0x314>
		status = VL53LX_set_preset_mode(
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	7858      	ldrb	r0, [r3, #1]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	8b1c      	ldrh	r4, [r3, #24]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	689d      	ldr	r5, [r3, #8]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	6912      	ldr	r2, [r2, #16]
 80035a0:	6939      	ldr	r1, [r7, #16]
 80035a2:	6949      	ldr	r1, [r1, #20]
 80035a4:	9102      	str	r1, [sp, #8]
 80035a6:	9201      	str	r2, [sp, #4]
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	462b      	mov	r3, r5
 80035ac:	4622      	mov	r2, r4
 80035ae:	4601      	mov	r1, r0
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fb3e 	bl	8003c32 <VL53LX_set_preset_mode>
 80035b6:	4603      	mov	r3, r0
 80035b8:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035c0:	461a      	mov	r2, r3
 80035c2:	2118      	movs	r1, #24
 80035c4:	2000      	movs	r0, #0
 80035c6:	f008 fa30 	bl	800ba2a <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80035d0:	461a      	mov	r2, r3
 80035d2:	2118      	movs	r1, #24
 80035d4:	2000      	movs	r0, #0
 80035d6:	f008 fa28 	bl	800ba2a <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80035e0:	461a      	mov	r2, r3
 80035e2:	210c      	movs	r1, #12
 80035e4:	2000      	movs	r0, #0
 80035e6:	f004 fd33 	bl	8008050 <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f007 fc24 	bl	800ae38 <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f007 fb3b 	bl	800ac6c <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f007 fc47 	bl	800ae8a <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 80035fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bdb0      	pop	{r4, r5, r7, pc}

08003608 <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b091      	sub	sp, #68	; 0x44
 800360c:	af04      	add	r7, sp, #16
 800360e:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8003610:	2300      	movs	r3, #0
 8003612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3318      	adds	r3, #24
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	3348      	adds	r3, #72	; 0x48
 8003628:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 800362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362c:	339c      	adds	r3, #156	; 0x9c
 800362e:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8003630:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003634:	2b00      	cmp	r3, #0
 8003636:	d109      	bne.n	800364c <VL53LX_read_p2p_data+0x44>
		status = VL53LX_get_static_nvm_managed(
 8003638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363a:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f00b fbb0 	bl	800eda6 <VL53LX_get_static_nvm_managed>
 8003646:	4603      	mov	r3, r0
 8003648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 800364c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003650:	2b00      	cmp	r3, #0
 8003652:	d108      	bne.n	8003666 <VL53LX_read_p2p_data+0x5e>
		status = VL53LX_get_customer_nvm_managed(
 8003654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003656:	3348      	adds	r3, #72	; 0x48
 8003658:	4619      	mov	r1, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f00b fce1 	bl	800f022 <VL53LX_get_customer_nvm_managed>
 8003660:	4603      	mov	r3, r0
 8003662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 8003666:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800366a:	2b00      	cmp	r3, #0
 800366c:	d117      	bne.n	800369e <VL53LX_read_p2p_data+0x96>

		status = VL53LX_get_nvm_copy_data(
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	f203 3392 	addw	r3, r3, #914	; 0x392
 8003674:	4619      	mov	r1, r3
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f00c fbdd 	bl	800fe36 <VL53LX_get_nvm_copy_data>
 800367c:	4603      	mov	r3, r0
 800367e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 8003682:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <VL53LX_read_p2p_data+0x96>
			VL53LX_copy_rtn_good_spads_to_buffer(
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368c:	f203 3292 	addw	r2, r3, #914	; 0x392
 8003690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003692:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003696:	4619      	mov	r1, r3
 8003698:	4610      	mov	r0, r2
 800369a:	f004 fa2f 	bl	8007afc <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 800369e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10e      	bne.n	80036c4 <VL53LX_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	895b      	ldrh	r3, [r3, #10]
 80036aa:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 80036c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d108      	bne.n	80036de <VL53LX_read_p2p_data+0xd6>
		status =
			VL53LX_read_nvm_optical_centre(
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	33c0      	adds	r3, #192	; 0xc0
 80036d0:	4619      	mov	r1, r3
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f00b fa1b 	bl	800eb0e <VL53LX_read_nvm_optical_centre>
 80036d8:	4603      	mov	r3, r0
 80036da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 80036de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d108      	bne.n	80036f8 <VL53LX_read_p2p_data+0xf0>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 80036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e8:	3360      	adds	r3, #96	; 0x60
 80036ea:	4619      	mov	r1, r3
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f00b fa31 	bl	800eb54 <VL53LX_read_nvm_cal_peak_rate_map>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 80036f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d12d      	bne.n	800375c <VL53LX_read_p2p_data+0x154>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	339c      	adds	r3, #156	; 0x9c
 8003704:	4619      	mov	r1, r3
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f00b fa4a 	bl	800eba0 <VL53LX_read_nvm_additional_offset_cal_data>
 800370c:	4603      	mov	r3, r0
 800370e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	889b      	ldrh	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d120      	bne.n	800375c <VL53LX_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 800371e:	2b00      	cmp	r3, #0
 8003720:	d11c      	bne.n	800375c <VL53LX_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	2280      	movs	r2, #128	; 0x80
 8003726:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800372e:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	f893 03c2 	ldrb.w	r0, [r3, #962]	; 0x3c2
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	f893 43c3 	ldrb.w	r4, [r3, #963]	; 0x3c3
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	69f9      	ldr	r1, [r7, #28]
 8003746:	3102      	adds	r1, #2
 8003748:	9103      	str	r1, [sp, #12]
 800374a:	9202      	str	r2, [sp, #8]
 800374c:	2238      	movs	r2, #56	; 0x38
 800374e:	9201      	str	r2, [sp, #4]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	23ff      	movs	r3, #255	; 0xff
 8003754:	22c7      	movs	r2, #199	; 0xc7
 8003756:	4621      	mov	r1, r4
 8003758:	f006 f97a 	bl	8009a50 <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 800375c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003760:	2b00      	cmp	r3, #0
 8003762:	d12f      	bne.n	80037c4 <VL53LX_read_p2p_data+0x1bc>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 8003764:	f107 030c 	add.w	r3, r7, #12
 8003768:	461a      	mov	r2, r3
 800376a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f00b fa39 	bl	800ebe6 <VL53LX_read_nvm_fmt_range_results_data>
 8003774:	4603      	mov	r3, r0
 8003776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 800377a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800377e:	2b00      	cmp	r3, #0
 8003780:	d120      	bne.n	80037c4 <VL53LX_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8003782:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 800378a:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 800378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378e:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8003792:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8003794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003796:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d006      	beq.n	80037b2 <VL53LX_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 80037b0:	e003      	b.n	80037ba <VL53LX_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	2214      	movs	r2, #20
 80037b6:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037c0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 80037c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <VL53LX_read_p2p_data+0x1dc>
		status =
			VL53LX_RdWord(
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80037d2:	3304      	adds	r3, #4
 80037d4:	461a      	mov	r2, r3
 80037d6:	21de      	movs	r1, #222	; 0xde
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f00d faa7 	bl	8010d2c <VL53LX_RdWord>
 80037de:	4603      	mov	r3, r0
 80037e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 80037e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e6:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 80037ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ee:	d204      	bcs.n	80037fa <VL53LX_read_p2p_data+0x1f2>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 80037f6:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
	}



	if (status == VL53LX_ERROR_NONE)
 80037fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d108      	bne.n	8003814 <VL53LX_read_p2p_data+0x20c>
		status =
			VL53LX_get_mode_mitigation_roi(
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	33bc      	adds	r3, #188	; 0xbc
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f91a 	bl	8003a42 <VL53LX_get_mode_mitigation_roi>
 800380e:	4603      	mov	r3, r0
 8003810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d114      	bne.n	8003848 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10f      	bne.n	8003848 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8003832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003834:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8003842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003844:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8003848:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800384c:	4618      	mov	r0, r3
 800384e:	3734      	adds	r7, #52	; 0x34
 8003850:	46bd      	mov	sp, r7
 8003852:	bd90      	pop	{r4, r7, pc}

08003854 <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800385e:	2300      	movs	r3, #0
 8003860:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3318      	adds	r3, #24
 8003866:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800386e:	3304      	adds	r3, #4
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <VL53LX_set_inter_measurement_period_ms+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003876:	23f1      	movs	r3, #241	; 0xf1
 8003878:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 800387a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10e      	bne.n	80038a0 <VL53LX_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800388e:	3304      	adds	r3, #4
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	}

	LOG_FUNCTION_END(status);

	return status;
 80038a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80038be:	2300      	movs	r3, #0
 80038c0:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3318      	adds	r3, #24
 80038c6:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <VL53LX_set_timeouts_us+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80038d2:	23f1      	movs	r3, #241	; 0xf1
 80038d4:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 80038d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d11b      	bne.n	8003916 <VL53LX_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f8b3 12de 	ldrh.w	r1, [r3, #734]	; 0x2de
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f203 331e 	addw	r3, r3, #798	; 0x31e
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	f502 724d 	add.w	r2, r2, #820	; 0x334
 8003902:	9201      	str	r2, [sp, #4]
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	460b      	mov	r3, r1
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	68b8      	ldr	r0, [r7, #8]
 800390e:	f004 ff42 	bl	8008796 <VL53LX_calc_timeout_register_values>
 8003912:	4603      	mov	r3, r0
 8003914:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8003916:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b088      	sub	sp, #32
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003930:	2300      	movs	r3, #0
 8003932:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3318      	adds	r3, #24
 8003938:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <VL53LX_get_timeouts_us+0x2e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800394c:	23f1      	movs	r3, #241	; 0xf1
 800394e:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 8003950:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d14a      	bne.n	80039ee <VL53LX_get_timeouts_us+0xcc>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	f8b3 22de 	ldrh.w	r2, [r3, #734]	; 0x2de
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 8003964:	4619      	mov	r1, r3
 8003966:	4610      	mov	r0, r2
 8003968:	f004 fd8e 	bl	8008488 <VL53LX_calc_macro_period_us>
 800396c:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
			VL53LX_calc_timeout_us(
 8003974:	6979      	ldr	r1, [r7, #20]
 8003976:	4618      	mov	r0, r3
 8003978:	f004 fe4d 	bl	8008616 <VL53LX_calc_timeout_us>
 800397c:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		timeout_encoded =
 8003988:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800398a:	8a7b      	ldrh	r3, [r7, #18]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8003996:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8003998:	4413      	add	r3, r2
 800399a:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 800399c:	8a7b      	ldrh	r3, [r7, #18]
 800399e:	6979      	ldr	r1, [r7, #20]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f004 fe9d 	bl	80086e0 <VL53LX_calc_decoded_timeout_us>
 80039a6:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
		timeout_encoded =
 80039b2:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80039b4:	8a7b      	ldrh	r3, [r7, #18]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80039c0:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 80039c2:	4413      	add	r3, r2
 80039c4:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 80039c6:	8a7b      	ldrh	r3, [r7, #18]
 80039c8:	6979      	ldr	r1, [r7, #20]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f004 fe88 	bl	80086e0 <VL53LX_calc_decoded_timeout_us>
 80039d0:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 80039ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3318      	adds	r3, #24
 8003a0c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	7858      	ldrb	r0, [r3, #1]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	7819      	ldrb	r1, [r3, #0]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f203 335b 	addw	r3, r3, #859	; 0x35b
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f005 fe94 	bl	800974a <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	7898      	ldrb	r0, [r3, #2]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	78d9      	ldrb	r1, [r3, #3]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8003a30:	461a      	mov	r2, r3
 8003a32:	f005 fec9 	bl	80097c8 <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8003a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b086      	sub	sp, #24
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3318      	adds	r3, #24
 8003a54:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f893 33c2 	ldrb.w	r3, [r3, #962]	; 0x3c2
 8003a68:	f107 020e 	add.w	r2, r7, #14
 8003a6c:	f107 010d 	add.w	r1, r7, #13
 8003a70:	4618      	mov	r0, r3
 8003a72:	f008 f883 	bl	800bb7c <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8003a76:	7bba      	ldrb	r2, [r7, #14]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8003a7c:	7b7a      	ldrb	r2, [r7, #13]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f893 33c3 	ldrb.w	r3, [r3, #963]	; 0x3c3
 8003a88:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8003aa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <VL53LX_init_zone_config_histogram_bins>:

VL53LX_Error VL53LX_init_zone_config_histogram_bins(
	VL53LX_zone_config_t   *pdata)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	73fb      	strb	r3, [r7, #15]
 8003abc:	e008      	b.n	8003ad0 <VL53LX_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for (i = 0; i < pdata->max_zones; i++)
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	3301      	adds	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	7bfa      	ldrb	r2, [r7, #15]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d3f1      	bcc.n	8003abe <VL53LX_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 8003ada:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <VL53LX_set_zone_config>:

VL53LX_Error VL53LX_set_zone_config(
	VL53LX_DEV                 Dev,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3318      	adds	r3, #24
 8003afc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	331c      	adds	r3, #28
 8003b08:	2214      	movs	r2, #20
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	f010 fa6a 	bl	8013fe4 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	781a      	ldrb	r2, [r3, #0]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	785a      	ldrb	r2, [r3, #1]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53LX_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	33c2      	adds	r3, #194	; 0xc2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ffbf 	bl	8003aac <VL53LX_init_zone_config_histogram_bins>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	785b      	ldrb	r3, [r3, #1]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d104      	bne.n	8003b44 <VL53LX_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8003b42:	e00f      	b.n	8003b64 <VL53LX_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53LX_MAX_USER_ZONES)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	785b      	ldrb	r3, [r3, #1]
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d807      	bhi.n	8003b5c <VL53LX_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	785b      	ldrb	r3, [r3, #1]
 8003b50:	3301      	adds	r3, #1
 8003b52:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8003b5a:	e003      	b.n	8003b64 <VL53LX_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2206      	movs	r2, #6
 8003b60:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
				VL53LX_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8003b64:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003b80:	2300      	movs	r3, #0
 8003b82:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3318      	adds	r3, #24
 8003b88:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8003b8a:	7afb      	ldrb	r3, [r7, #11]
 8003b8c:	2b21      	cmp	r3, #33	; 0x21
 8003b8e:	d030      	beq.n	8003bf2 <VL53LX_get_preset_mode_timing_cfg+0x82>
 8003b90:	2b21      	cmp	r3, #33	; 0x21
 8003b92:	dc43      	bgt.n	8003c1c <VL53LX_get_preset_mode_timing_cfg+0xac>
 8003b94:	2b1b      	cmp	r3, #27
 8003b96:	d002      	beq.n	8003b9e <VL53LX_get_preset_mode_timing_cfg+0x2e>
 8003b98:	2b1e      	cmp	r3, #30
 8003b9a:	d015      	beq.n	8003bc8 <VL53LX_get_preset_mode_timing_cfg+0x58>
 8003b9c:	e03e      	b.n	8003c1c <VL53LX_get_preset_mode_timing_cfg+0xac>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
		*pphasecal_config_timeout_us =
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	601a      	str	r2, [r3, #0]

	break;
 8003bc6:	e02c      	b.n	8003c22 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
		*pphasecal_config_timeout_us =
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	601a      	str	r2, [r3, #0]
	break;
 8003bf0:	e017      	b.n	8003c22 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
		*pphasecal_config_timeout_us =
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	601a      	str	r2, [r3, #0]
	break;
 8003c1a:	e002      	b.n	8003c22 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003c1c:	23fc      	movs	r3, #252	; 0xfc
 8003c1e:	75fb      	strb	r3, [r7, #23]
		break;
 8003c20:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8003c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b096      	sub	sp, #88	; 0x58
 8003c36:	af06      	add	r7, sp, #24
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	607b      	str	r3, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	72fb      	strb	r3, [r7, #11]
 8003c40:	4613      	mov	r3, r2
 8003c42:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_LLDriverData_t *pdev =
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3318      	adds	r3, #24
 8003c4e:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003c56:	637b      	str	r3, [r7, #52]	; 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 8003c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c5e:	633b      	str	r3, [r7, #48]	; 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c62:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8003c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6a:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c72:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8003c7e:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8003c86:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003c8e:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	33c2      	adds	r3, #194	; 0xc2
 8003c94:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	33f8      	adds	r3, #248	; 0xf8
 8003c9a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9e:	7afa      	ldrb	r2, [r7, #11]
 8003ca0:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ca6:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003caa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cac:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003cb2:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 8003cb4:	2103      	movs	r1, #3
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f003 fc2a 	bl	8007510 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8003cbc:	7afb      	ldrb	r3, [r7, #11]
 8003cbe:	2b21      	cmp	r3, #33	; 0x21
 8003cc0:	d02e      	beq.n	8003d20 <VL53LX_set_preset_mode+0xee>
 8003cc2:	2b21      	cmp	r3, #33	; 0x21
 8003cc4:	dc40      	bgt.n	8003d48 <VL53LX_set_preset_mode+0x116>
 8003cc6:	2b1b      	cmp	r3, #27
 8003cc8:	d002      	beq.n	8003cd0 <VL53LX_set_preset_mode+0x9e>
 8003cca:	2b1e      	cmp	r3, #30
 8003ccc:	d014      	beq.n	8003cf8 <VL53LX_set_preset_mode+0xc6>
 8003cce:	e03b      	b.n	8003d48 <VL53LX_set_preset_mode+0x116>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	9304      	str	r3, [sp, #16]
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	9303      	str	r3, [sp, #12]
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	9302      	str	r3, [sp, #8]
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ce8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cec:	f003 f941 	bl	8006f72 <VL53LX_preset_mode_histogram_long_range>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003cf6:	e02b      	b.n	8003d50 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	9304      	str	r3, [sp, #16]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	9303      	str	r3, [sp, #12]
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	9302      	str	r3, [sp, #8]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	9301      	str	r3, [sp, #4]
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d14:	f003 f9cb 	bl	80070ae <VL53LX_preset_mode_histogram_medium_range>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003d1e:	e017      	b.n	8003d50 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	9304      	str	r3, [sp, #16]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	9303      	str	r3, [sp, #12]
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	9302      	str	r3, [sp, #8]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d3c:	f003 fa55 	bl	80071ea <VL53LX_preset_mode_histogram_short_range>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003d46:	e003      	b.n	8003d50 <VL53LX_set_preset_mode+0x11e>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003d48:	23fc      	movs	r3, #252	; 0xfc
 8003d4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 8003d4e:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 8003d50:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d105      	bne.n	8003d64 <VL53LX_set_preset_mode+0x132>

		pstatic->dss_config__target_total_rate_mcps =
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	893a      	ldrh	r2, [r7, #8]
 8003d5c:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d60:	893a      	ldrh	r2, [r7, #8]
 8003d62:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 8003d64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d108      	bne.n	8003d7e <VL53LX_set_preset_mode+0x14c>
		status =
			VL53LX_set_timeouts_us(
 8003d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f7ff fd9c 	bl	80038b0 <VL53LX_set_timeouts_us>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 8003d7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <VL53LX_set_preset_mode+0x162>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8003d86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7ff fd63 	bl	8003854 <VL53LX_set_inter_measurement_period_ms>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8003d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d96:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da0:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8003da4:	4619      	mov	r1, r3
 8003da6:	4610      	mov	r0, r2
 8003da8:	f003 ffc8 	bl	8007d3c <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8003dac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3740      	adds	r7, #64	; 0x40
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b0d2      	sub	sp, #328	; 0x148
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	1d3b      	adds	r3, r7, #4
 8003dc0:	6018      	str	r0, [r3, #0]
 8003dc2:	4608      	mov	r0, r1
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	1cfb      	adds	r3, r7, #3
 8003dc8:	4602      	mov	r2, r0
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	1cbb      	adds	r3, r7, #2
 8003dce:	460a      	mov	r2, r1
 8003dd0:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003dd8:	1d3b      	adds	r3, r7, #4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3318      	adds	r3, #24
 8003dde:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53LX_LLDriverResults_t  *pres =
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003dea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8003dee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003df2:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8003df6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8003dfa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003dfe:	3348      	adds	r3, #72	; 0x48
 8003e00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003e04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e08:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003e0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003e10:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e14:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8003e18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003e1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e20:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8003e24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003e28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e2c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8003e30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8003e34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e38:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003e3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8003e40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e44:	332c      	adds	r3, #44	; 0x2c
 8003e46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8003e4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e4e:	3348      	adds	r3, #72	; 0x48
 8003e50:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8003e54:	f107 030c 	add.w	r3, r7, #12
 8003e58:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8003e74:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e78:	1cfa      	adds	r2, r7, #3
 8003e7a:	7812      	ldrb	r2, [r2, #0]
 8003e7c:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8003e7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e82:	791b      	ldrb	r3, [r3, #4]
 8003e84:	b25b      	sxtb	r3, r3
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8003e8c:	1cfb      	adds	r3, r7, #3
 8003e8e:	f993 3000 	ldrsb.w	r3, [r3]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	b25b      	sxtb	r3, r3
 8003e96:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8003e98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e9c:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8003e9e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ea2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53LX_set_user_zone(
 8003ea6:	3336      	adds	r3, #54	; 0x36
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8003eae:	4413      	add	r3, r2
 8003eb0:	1d9a      	adds	r2, r3, #6
 8003eb2:	1d3b      	adds	r3, r7, #4
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	6818      	ldr	r0, [r3, #0]
 8003eb8:	f7ff fd9f 	bl	80039fa <VL53LX_set_user_zone>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8003ec2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ec6:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d016      	beq.n	8003efc <VL53LX_init_and_start_range+0x144>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 8003ece:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ed2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003ed6:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8003ee4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003ee8:	4413      	add	r3, r2
 8003eea:	1c9a      	adds	r2, r3, #2
 8003eec:	1d3b      	adds	r3, r7, #4
 8003eee:	4611      	mov	r1, r2
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	f001 fad7 	bl	80054a4 <VL53LX_set_zone_dss_config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8003efc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f00:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10d      	bne.n	8003f28 <VL53LX_init_and_start_range+0x170>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8003f0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d107      	bne.n	8003f28 <VL53LX_init_and_start_range+0x170>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8003f18:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f1c:	f8b3 22a4 	ldrh.w	r2, [r3, #676]	; 0x2a4
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8003f20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f24:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8003f28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f2c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8003f30:	3312      	adds	r3, #18
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2bff      	cmp	r3, #255	; 0xff
 8003f36:	d106      	bne.n	8003f46 <VL53LX_init_and_start_range+0x18e>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8003f38:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f3c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8003f40:	3312      	adds	r3, #18
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003f46:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f4a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8003f4e:	3311      	adds	r3, #17
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d133      	bne.n	8003fbe <VL53LX_init_and_start_range+0x206>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8003f56:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f5a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8003f5e:	3312      	adds	r3, #18
 8003f60:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d12b      	bne.n	8003fbe <VL53LX_init_and_start_range+0x206>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8003f66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f6a:	f893 2320 	ldrb.w	r2, [r3, #800]	; 0x320
		pdev->low_power_auto_data.saved_interrupt_config =
 8003f6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f72:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8003f76:	3313      	adds	r3, #19
 8003f78:	701a      	strb	r2, [r3, #0]

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8003f7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		if ((pdev->dyn_cfg.system__sequence_config & (
 8003f84:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f88:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
 8003f8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d109      	bne.n	8003fa8 <VL53LX_init_and_start_range+0x1f0>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8003f94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f98:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003f9c:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8003f9e:	b21a      	sxth	r2, r3
 8003fa0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003fa4:	825a      	strh	r2, [r3, #18]
 8003fa6:	e003      	b.n	8003fb0 <VL53LX_init_and_start_range+0x1f8>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8003fa8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003fac:	2200      	movs	r2, #0
 8003fae:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8003fb0:	1cbb      	adds	r3, r7, #2
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d802      	bhi.n	8003fbe <VL53LX_init_and_start_range+0x206>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8003fb8:	1cbb      	adds	r3, r7, #2
 8003fba:	2205      	movs	r2, #5
 8003fbc:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003fbe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003fc2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8003fc6:	3311      	adds	r3, #17
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d114      	bne.n	8003ff8 <VL53LX_init_and_start_range+0x240>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8003fce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003fd2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8003fd6:	3312      	adds	r3, #18
 8003fd8:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d10c      	bne.n	8003ff8 <VL53LX_init_and_start_range+0x240>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8003fde:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003fe2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8003fe6:	3313      	adds	r3, #19
 8003fe8:	781a      	ldrb	r2, [r3, #0]
		pdev->gen_cfg.system__interrupt_config_gpio =
 8003fea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003fee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 8003ff2:	1cbb      	adds	r3, r7, #2
 8003ff4:	2206      	movs	r2, #6
 8003ff6:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 8003ff8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d106      	bne.n	800400e <VL53LX_init_and_start_range+0x256>
		status = VL53LX_save_cfg_data(Dev);
 8004000:	1d3b      	adds	r3, r7, #4
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	f005 fe8e 	bl	8009d24 <VL53LX_save_cfg_data>
 8004008:	4603      	mov	r3, r0
 800400a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 800400e:	1cbb      	adds	r3, r7, #2
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	3b01      	subs	r3, #1
 8004014:	2b05      	cmp	r3, #5
 8004016:	d827      	bhi.n	8004068 <VL53LX_init_and_start_range+0x2b0>
 8004018:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <VL53LX_init_and_start_range+0x268>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	08004061 	.word	0x08004061
 8004024:	08004059 	.word	0x08004059
 8004028:	08004051 	.word	0x08004051
 800402c:	08004049 	.word	0x08004049
 8004030:	08004041 	.word	0x08004041
 8004034:	08004039 	.word	0x08004039
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 8004038:	2301      	movs	r3, #1
 800403a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800403e:	e017      	b.n	8004070 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8004040:	230d      	movs	r3, #13
 8004042:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004046:	e013      	b.n	8004070 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 8004048:	2324      	movs	r3, #36	; 0x24
 800404a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800404e:	e00f      	b.n	8004070 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 8004050:	2344      	movs	r3, #68	; 0x44
 8004052:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004056:	e00b      	b.n	8004070 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 8004058:	235a      	movs	r3, #90	; 0x5a
 800405a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800405e:	e007      	b.n	8004070 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 8004060:	2371      	movs	r3, #113	; 0x71
 8004062:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004066:	e003      	b.n	8004070 <VL53LX_init_and_start_range+0x2b8>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 8004068:	2383      	movs	r3, #131	; 0x83
 800406a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800406e:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8004070:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004074:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8004078:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 800407c:	f107 030c 	add.w	r3, r7, #12
 8004080:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8004084:	2300      	movs	r3, #0
 8004086:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800408a:	e00b      	b.n	80040a4 <VL53LX_init_and_start_range+0x2ec>
		*pbuffer++ = 0;
 800408c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8004096:	2200      	movs	r2, #0
 8004098:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 800409a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800409e:	3301      	adds	r3, #1
 80040a0:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80040a4:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 80040a8:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d3ed      	bcc.n	800408c <VL53LX_init_and_start_range+0x2d4>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 80040b0:	1cbb      	adds	r3, r7, #2
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b05      	cmp	r3, #5
 80040b6:	d917      	bls.n	80040e8 <VL53LX_init_and_start_range+0x330>
 80040b8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d113      	bne.n	80040e8 <VL53LX_init_and_start_range+0x330>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80040c0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80040c4:	f1c3 0301 	rsb	r3, r3, #1
 80040c8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80040cc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 80040d0:	f107 020c 	add.w	r2, r7, #12
 80040d4:	4413      	add	r3, r2
 80040d6:	461a      	mov	r2, r3
 80040d8:	210b      	movs	r1, #11
 80040da:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80040de:	f00a fdad 	bl	800ec3c <VL53LX_i2c_encode_static_nvm_managed>
 80040e2:	4603      	mov	r3, r0
 80040e4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80040e8:	1cbb      	adds	r3, r7, #2
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d917      	bls.n	8004120 <VL53LX_init_and_start_range+0x368>
 80040f0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d113      	bne.n	8004120 <VL53LX_init_and_start_range+0x368>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80040f8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80040fc:	f1c3 030d 	rsb	r3, r3, #13
 8004100:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004104:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 8004108:	f107 020c 	add.w	r2, r7, #12
 800410c:	4413      	add	r3, r2
 800410e:	461a      	mov	r2, r3
 8004110:	2117      	movs	r1, #23
 8004112:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8004116:	f00a fe6d 	bl	800edf4 <VL53LX_i2c_encode_customer_nvm_managed>
 800411a:	4603      	mov	r3, r0
 800411c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8004120:	1cbb      	adds	r3, r7, #2
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b03      	cmp	r3, #3
 8004126:	d917      	bls.n	8004158 <VL53LX_init_and_start_range+0x3a0>
 8004128:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800412c:	2b00      	cmp	r3, #0
 800412e:	d113      	bne.n	8004158 <VL53LX_init_and_start_range+0x3a0>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004130:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004134:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8004138:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800413c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_config(
 8004140:	f107 020c 	add.w	r2, r7, #12
 8004144:	4413      	add	r3, r2
 8004146:	461a      	mov	r2, r3
 8004148:	2120      	movs	r1, #32
 800414a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800414e:	f00a ffb3 	bl	800f0b8 <VL53LX_i2c_encode_static_config>
 8004152:	4603      	mov	r3, r0
 8004154:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8004158:	1cbb      	adds	r3, r7, #2
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b02      	cmp	r3, #2
 800415e:	d917      	bls.n	8004190 <VL53LX_init_and_start_range+0x3d8>
 8004160:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004164:	2b00      	cmp	r3, #0
 8004166:	d113      	bne.n	8004190 <VL53LX_init_and_start_range+0x3d8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004168:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800416c:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8004170:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004174:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_general_config(
 8004178:	f107 020c 	add.w	r2, r7, #12
 800417c:	4413      	add	r3, r2
 800417e:	461a      	mov	r2, r3
 8004180:	2116      	movs	r1, #22
 8004182:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004186:	f00b f87a 	bl	800f27e <VL53LX_i2c_encode_general_config>
 800418a:	4603      	mov	r3, r0
 800418c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8004190:	1cbb      	adds	r3, r7, #2
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d917      	bls.n	80041c8 <VL53LX_init_and_start_range+0x410>
 8004198:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800419c:	2b00      	cmp	r3, #0
 800419e:	d113      	bne.n	80041c8 <VL53LX_init_and_start_range+0x410>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80041a0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80041a4:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80041a8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80041ac:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_timing_config(
 80041b0:	f107 020c 	add.w	r2, r7, #12
 80041b4:	4413      	add	r3, r2
 80041b6:	461a      	mov	r2, r3
 80041b8:	2117      	movs	r1, #23
 80041ba:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80041be:	f00b f8e2 	bl	800f386 <VL53LX_i2c_encode_timing_config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80041c8:	1cbb      	adds	r3, r7, #2
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d036      	beq.n	800423e <VL53LX_init_and_start_range+0x486>
 80041d0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d132      	bne.n	800423e <VL53LX_init_and_start_range+0x486>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80041d8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80041dc:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 80041e0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 80041e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80041e8:	791b      	ldrb	r3, [r3, #4]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d017      	beq.n	8004222 <VL53LX_init_and_start_range+0x46a>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 80041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f6:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 80041f8:	f043 0301 	orr.w	r3, r3, #1
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004202:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004208:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	b2da      	uxtb	r2, r3
 8004210:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004214:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8004216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421a:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 800421c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004220:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004222:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_dynamic_config(
 8004226:	f107 020c 	add.w	r2, r7, #12
 800422a:	4413      	add	r3, r2
 800422c:	461a      	mov	r2, r3
 800422e:	2112      	movs	r1, #18
 8004230:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8004234:	f00b f929 	bl	800f48a <VL53LX_i2c_encode_dynamic_config>
 8004238:	4603      	mov	r3, r0
 800423a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 800423e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004242:	2b00      	cmp	r3, #0
 8004244:	d113      	bne.n	800426e <VL53LX_init_and_start_range+0x4b6>

		i2c_buffer_offset_bytes =
 8004246:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800424a:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800424e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004252:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_system_control(
 8004256:	f107 020c 	add.w	r2, r7, #12
 800425a:	4413      	add	r3, r2
 800425c:	461a      	mov	r2, r3
 800425e:	2105      	movs	r1, #5
 8004260:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8004264:	f00b f996 	bl	800f594 <VL53LX_i2c_encode_system_control>
 8004268:	4603      	mov	r3, r0
 800426a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 800426e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10c      	bne.n	8004290 <VL53LX_init_and_start_range+0x4d8>
		status =
			VL53LX_WriteMulti(
 8004276:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800427a:	f107 020c 	add.w	r2, r7, #12
 800427e:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 8004282:	1d38      	adds	r0, r7, #4
 8004284:	6800      	ldr	r0, [r0, #0]
 8004286:	f00c fc55 	bl	8010b34 <VL53LX_WriteMulti>
 800428a:	4603      	mov	r3, r0
 800428c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 8004290:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004294:	2b00      	cmp	r3, #0
 8004296:	d106      	bne.n	80042a6 <VL53LX_init_and_start_range+0x4ee>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 8004298:	1d3b      	adds	r3, r7, #4
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	f003 f968 	bl	8007570 <VL53LX_update_ll_driver_rd_state>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53LX_ERROR_NONE)
 80042a6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <VL53LX_init_and_start_range+0x504>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 80042ae:	1d3b      	adds	r3, r7, #4
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	f003 fafd 	bl	80078b0 <VL53LX_update_ll_driver_cfg_state>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 80042bc:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop

080042cc <VL53LX_stop_range>:


VL53LX_Error VL53LX_stop_range(
	VL53LX_DEV     Dev)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80042d4:	2300      	movs	r3, #0
 80042d6:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev =
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3318      	adds	r3, #24
 80042dc:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80042e4:	60fb      	str	r3, [r7, #12]
			VL53LXDevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80042ec:	b25b      	sxtb	r3, r3
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	b25b      	sxtb	r3, r3
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80042f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042f8:	b25b      	sxtb	r3, r3
 80042fa:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
			 VL53LX_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53LX_set_system_control(
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004308:	4619      	mov	r1, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f00b f97d 	bl	800f60a <VL53LX_set_system_control>
 8004310:	4603      	mov	r3, r0
 8004312:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53LX_init_ll_driver_state(
 8004326:	2103      	movs	r1, #3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f003 f8f1 	bl	8007510 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8004334:	3301      	adds	r3, #1
 8004336:	b2da      	uxtb	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 800433e:	4619      	mov	r1, r3
 8004340:	4610      	mov	r0, r2
 8004342:	f003 fcfb 	bl	8007d3c <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f003 fd2d 	bl	8007da6 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004352:	3311      	adds	r3, #17
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d102      	bne.n	8004360 <VL53LX_stop_range+0x94>
		VL53LX_low_power_auto_data_stop_range(Dev);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f006 fddc 	bl	800af18 <VL53LX_low_power_auto_data_stop_range>

	return status;
 8004360:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b0c8      	sub	sp, #288	; 0x120
 8004370:	af00      	add	r7, sp, #0
 8004372:	1d3b      	adds	r3, r7, #4
 8004374:	6018      	str	r0, [r3, #0]
 8004376:	460a      	mov	r2, r1
 8004378:	1cfb      	adds	r3, r7, #3
 800437a:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800437c:	2300      	movs	r3, #0
 800437e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004382:	1d3b      	adds	r3, r7, #4
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3318      	adds	r3, #24
 8004388:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 800438c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004390:	f203 3366 	addw	r3, r3, #870	; 0x366
 8004394:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 8004398:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800439c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80043a0:	3318      	adds	r3, #24
 80043a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 80043a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80043aa:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 80043ae:	331c      	adds	r3, #28
 80043b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 80043b4:	2388      	movs	r3, #136	; 0x88
 80043b6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 80043c6:	1cfb      	adds	r3, r7, #3
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d008      	beq.n	80043e0 <VL53LX_get_measurement_results+0x74>
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d10d      	bne.n	80043ee <VL53LX_get_measurement_results+0x82>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 80043d2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80043d6:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 80043da:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80043de:	e00a      	b.n	80043f6 <VL53LX_get_measurement_results+0x8a>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 80043e0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80043e4:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 80043e8:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80043ec:	e003      	b.n	80043f6 <VL53LX_get_measurement_results+0x8a>
	default:
		i2c_buffer_size_bytes =
 80043ee:	232c      	movs	r3, #44	; 0x2c
 80043f0:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80043f4:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 80043f6:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10c      	bne.n	8004418 <VL53LX_get_measurement_results+0xac>
		status =
			VL53LX_ReadMulti(
 80043fe:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8004402:	f107 0208 	add.w	r2, r7, #8
 8004406:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800440a:	1d38      	adds	r0, r7, #4
 800440c:	6800      	ldr	r0, [r0, #0]
 800440e:	f00c fbc7 	bl	8010ba0 <VL53LX_ReadMulti>
 8004412:	4603      	mov	r3, r0
 8004414:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 8004418:	1cfb      	adds	r3, r7, #3
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d917      	bls.n	8004450 <VL53LX_get_measurement_results+0xe4>
 8004420:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8004424:	2b00      	cmp	r3, #0
 8004426:	d113      	bne.n	8004450 <VL53LX_get_measurement_results+0xe4>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004428:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800442c:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8004430:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004434:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_debug_results(
 8004438:	f107 0208 	add.w	r2, r7, #8
 800443c:	4413      	add	r3, r2
 800443e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004442:	4619      	mov	r1, r3
 8004444:	2038      	movs	r0, #56	; 0x38
 8004446:	f00b fa5e 	bl	800f906 <VL53LX_i2c_decode_debug_results>
 800444a:	4603      	mov	r3, r0
 800444c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 8004450:	1cfb      	adds	r3, r7, #3
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d017      	beq.n	8004488 <VL53LX_get_measurement_results+0x11c>
 8004458:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800445c:	2b00      	cmp	r3, #0
 800445e:	d113      	bne.n	8004488 <VL53LX_get_measurement_results+0x11c>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004460:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8004464:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8004468:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800446c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_core_results(
 8004470:	f107 0208 	add.w	r2, r7, #8
 8004474:	4413      	add	r3, r2
 8004476:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800447a:	4619      	mov	r1, r3
 800447c:	2021      	movs	r0, #33	; 0x21
 800447e:	f00b f9e1 	bl	800f844 <VL53LX_i2c_decode_core_results>
 8004482:	4603      	mov	r3, r0
 8004484:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 8004488:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800448c:	2b00      	cmp	r3, #0
 800448e:	d110      	bne.n	80044b2 <VL53LX_get_measurement_results+0x146>

		i2c_buffer_offset_bytes = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004496:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_system_results(
 800449a:	f107 0208 	add.w	r2, r7, #8
 800449e:	4413      	add	r3, r2
 80044a0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80044a4:	4619      	mov	r1, r3
 80044a6:	202c      	movs	r0, #44	; 0x2c
 80044a8:	f00b f8d6 	bl	800f658 <VL53LX_i2c_decode_system_results>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 80044b2:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 80044c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044c4:	b0a0      	sub	sp, #128	; 0x80
 80044c6:	af06      	add	r7, sp, #24
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	460b      	mov	r3, r1
 80044cc:	607a      	str	r2, [r7, #4]
 80044ce:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80044d0:	2300      	movs	r3, #0
 80044d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53LX_LLDriverData_t *pdev =
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3318      	adds	r3, #24
 80044da:	663b      	str	r3, [r7, #96]	; 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80044e2:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 80044e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e6:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 80044e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ea:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80044ee:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 80044f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044f2:	332c      	adds	r3, #44	; 0x2c
 80044f4:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 80044f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044f8:	33c2      	adds	r3, #194	; 0xc2
 80044fa:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 80044fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044fe:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8004502:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8004504:	f107 0314 	add.w	r3, r7, #20
 8004508:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800450a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800450c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004510:	643b      	str	r3, [r7, #64]	; 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8004512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004514:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004518:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 800451a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800451c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004520:	3310      	adds	r3, #16
 8004522:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8004524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004526:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 800452c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800452e:	3348      	adds	r3, #72	; 0x48
 8004530:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 8004532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004534:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 800453a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800453c:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8004540:	331c      	adds	r3, #28
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 8004544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004546:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 8290 	beq.w	8004a74 <VL53LX_get_device_results+0x5b4>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 8004554:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004556:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800455a:	4619      	mov	r1, r3
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 fbcb 	bl	8004cf8 <VL53LX_get_histogram_bin_data>
 8004562:	4603      	mov	r3, r0
 8004564:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 8004568:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800456c:	2b00      	cmp	r3, #0
 800456e:	d118      	bne.n	80045a2 <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 8004570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004572:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 8004574:	2b00      	cmp	r3, #0
 8004576:	d114      	bne.n	80045a2 <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 8004578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800457a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800457e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 8004582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800458a:	4413      	add	r3, r2
 800458c:	1d1a      	adds	r2, r3, #4
 800458e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004590:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f004 f976 	bl	8008888 <VL53LX_hist_copy_and_scale_ambient_info>
 800459c:	4603      	mov	r3, r0
 800459e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 80045a2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f040 8206 	bne.w	80049b8 <VL53LX_get_device_results+0x4f8>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80045ac:	f107 0313 	add.w	r3, r7, #19
 80045b0:	4619      	mov	r1, r3
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f006 fdd5 	bl	800b162 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 80045b8:	7cfb      	ldrb	r3, [r7, #19]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 80045be:	2301      	movs	r3, #1
 80045c0:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 80045c2:	7cfb      	ldrb	r3, [r7, #19]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 80045ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045cc:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d107      	bne.n	80045e4 <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 80045d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80045d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045da:	3202      	adds	r2, #2
 80045dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80045e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e2:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 80045e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045e6:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 80045ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ec:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 80045ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80045f8:	4619      	mov	r1, r3
 80045fa:	4610      	mov	r0, r2
 80045fc:	f004 f84a 	bl	8008694 <VL53LX_calc_crosstalk_plane_offset_with_margin>
 8004600:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004604:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8004606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004608:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800460c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800460e:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004612:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8004616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004618:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 800461a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800461c:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 800461e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004620:	f883 2255 	strb.w	r2, [r3, #597]	; 0x255
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8004624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004626:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8004628:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800462a:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 800462e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004630:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8004632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004634:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8004638:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800463a:	f8b3 22fe 	ldrh.w	r2, [r3, #766]	; 0x2fe
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 800463e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004640:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8004644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004646:	f893 2331 	ldrb.w	r2, [r3, #817]	; 0x331
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 800464a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800464c:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8004650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004652:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8004656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004658:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 800465a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800465c:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8004660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004662:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8004664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004666:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8004668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800466a:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 800466c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466e:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8004670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004672:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 8004674:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004676:	f203 3292 	addw	r2, r3, #914	; 0x392
 800467a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800467c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004680:	4619      	mov	r1, r3
 8004682:	4610      	mov	r0, r2
 8004684:	f003 fa3a 	bl	8007afc <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8004688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800468a:	795b      	ldrb	r3, [r3, #5]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d002      	beq.n	8004696 <VL53LX_get_device_results+0x1d6>
 8004690:	2b03      	cmp	r3, #3
 8004692:	d02e      	beq.n	80046f2 <VL53LX_get_device_results+0x232>
 8004694:	e03d      	b.n	8004712 <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8004696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004698:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800469c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 80046ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046ae:	f893 e3c2 	ldrb.w	lr, [r3, #962]	; 0x3c2
 80046b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046b4:	f893 83c3 	ldrb.w	r8, [r3, #963]	; 0x3c3
 80046b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ba:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80046be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046c0:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 80046c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80046c6:	319c      	adds	r1, #156	; 0x9c
 80046c8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80046ca:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 80046ce:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 80046d2:	b2a4      	uxth	r4, r4
 80046d4:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 80046d6:	351c      	adds	r5, #28
 80046d8:	9505      	str	r5, [sp, #20]
 80046da:	9404      	str	r4, [sp, #16]
 80046dc:	9003      	str	r0, [sp, #12]
 80046de:	9102      	str	r1, [sp, #8]
 80046e0:	9201      	str	r2, [sp, #4]
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	4643      	mov	r3, r8
 80046e6:	4672      	mov	r2, lr
 80046e8:	4661      	mov	r1, ip
 80046ea:	4630      	mov	r0, r6
 80046ec:	f004 ff7d 	bl	80095ea <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 80046f0:	e013      	b.n	800471a <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 80046f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f4:	331c      	adds	r3, #28
 80046f6:	4619      	mov	r1, r3
 80046f8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80046fa:	f7fe fa4f 	bl	8002b9c <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 80046fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004700:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004704:	b29b      	uxth	r3, r3
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	b29b      	uxth	r3, r3
 800470a:	b21a      	sxth	r2, r3
 800470c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470e:	839a      	strh	r2, [r3, #28]
		break;
 8004710:	e003      	b.n	800471a <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 8004712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004714:	2200      	movs	r2, #0
 8004716:	839a      	strh	r2, [r3, #28]
		break;
 8004718:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 800471a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800471e:	2b00      	cmp	r3, #0
 8004720:	f040 814c 	bne.w	80049bc <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 8004724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004726:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 800472a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472c:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 8004730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004732:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8004736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004738:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		VL53LX_calc_max_effective_spads(
 800473c:	b29c      	uxth	r4, r3
 800473e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004740:	f203 236a 	addw	r3, r3, #618	; 0x26a
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	4623      	mov	r3, r4
 8004748:	f005 f8f4 	bl	8009934 <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 800474c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800474e:	799b      	ldrb	r3, [r3, #6]
 8004750:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004752:	4619      	mov	r1, r3
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fee2 	bl	800551e <VL53LX_get_dmax_calibration_data>
 800475a:	4603      	mov	r3, r0
 800475c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 8004760:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004764:	2b00      	cmp	r3, #0
 8004766:	f040 812b 	bne.w	80049c0 <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 800476a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800476c:	f503 7515 	add.w	r5, r3, #596	; 0x254
 8004770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004772:	f503 7605 	add.w	r6, r3, #532	; 0x214
 8004776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004778:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800477c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800477e:	f202 521c 	addw	r2, r2, #1308	; 0x51c
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8004782:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004784:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
				pdev->wArea2,
 8004788:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800478a:	f500 50d0 	add.w	r0, r0, #6656	; 0x1a00
		status = VL53LX_ipp_hist_process_data(
 800478e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004790:	9405      	str	r4, [sp, #20]
 8004792:	f107 0413 	add.w	r4, r7, #19
 8004796:	9404      	str	r4, [sp, #16]
 8004798:	9003      	str	r0, [sp, #12]
 800479a:	9102      	str	r1, [sp, #8]
 800479c:	9201      	str	r2, [sp, #4]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	4633      	mov	r3, r6
 80047a2:	462a      	mov	r2, r5
 80047a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f00c fbf0 	bl	8010f8c <VL53LX_ipp_hist_process_data>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80047b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047b4:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d150      	bne.n	800485e <VL53LX_get_device_results+0x39e>
			(histo_merge_nb > 1))
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d94d      	bls.n	800485e <VL53LX_get_device_results+0x39e>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80047c2:	2300      	movs	r3, #0
 80047c4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80047c8:	e045      	b.n	8004856 <VL53LX_get_device_results+0x396>
			pdata = &(presults->VL53LX_p_003[i]);
 80047ca:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80047ce:	224c      	movs	r2, #76	; 0x4c
 80047d0:	fb02 f303 	mul.w	r3, r2, r3
 80047d4:	3310      	adds	r3, #16
 80047d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047d8:	4413      	add	r3, r2
 80047da:	3304      	adds	r3, #4
 80047dc:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	7cfa      	ldrb	r2, [r7, #19]
 80047e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	7cfa      	ldrb	r2, [r7, #19]
 80047f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	7cfa      	ldrb	r2, [r7, #19]
 8004800:	fb93 f2f2 	sdiv	r2, r3, r2
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800480c:	461a      	mov	r2, r3
 800480e:	7cfb      	ldrb	r3, [r7, #19]
 8004810:	fb92 f3f3 	sdiv	r3, r2, r3
 8004814:	b29a      	uxth	r2, r3
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800481e:	461a      	mov	r2, r3
 8004820:	7cfb      	ldrb	r3, [r7, #19]
 8004822:	fb92 f3f3 	sdiv	r3, r2, r3
 8004826:	b29a      	uxth	r2, r3
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004830:	461a      	mov	r2, r3
 8004832:	7cfb      	ldrb	r3, [r7, #19]
 8004834:	fb92 f3f3 	sdiv	r3, r2, r3
 8004838:	b29a      	uxth	r2, r3
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	7cfa      	ldrb	r2, [r7, #19]
 8004844:	fbb3 f2f2 	udiv	r2, r3, r2
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 800484c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004850:	3301      	adds	r3, #1
 8004852:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004856:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800485a:	2b03      	cmp	r3, #3
 800485c:	d9b5      	bls.n	80047ca <VL53LX_get_device_results+0x30a>
		}


		if (status != VL53LX_ERROR_NONE)
 800485e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004862:	2b00      	cmp	r3, #0
 8004864:	f040 80ae 	bne.w	80049c4 <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 8004868:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800486a:	f503 7005 	add.w	r0, r3, #532	; 0x214
 800486e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004870:	f503 7171 	add.w	r1, r3, #964	; 0x3c4
 8004874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004876:	330e      	adds	r3, #14
 8004878:	461a      	mov	r2, r3
 800487a:	f004 fe80 	bl	800957e <VL53LX_hist_wrap_dmax>
 800487e:	4603      	mov	r3, r0
 8004880:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 8004884:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004888:	2b00      	cmp	r3, #0
 800488a:	f040 809d 	bne.w	80049c8 <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 800488e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004890:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8004898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048a0:	4413      	add	r3, r2
 80048a2:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 80048a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 80048a8:	4613      	mov	r3, r2
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80048b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048b6:	4413      	add	r3, r2
 80048b8:	f103 0208 	add.w	r2, r3, #8
 80048bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f004 fa10 	bl	8008ce4 <VL53LX_hist_phase_consistency_check>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 80048ca:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d17c      	bne.n	80049cc <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80048d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 80048dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048e4:	4413      	add	r3, r2
 80048e6:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 80048e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 80048ec:	4613      	mov	r3, r2
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80048f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048fa:	4413      	add	r3, r2
 80048fc:	f103 0208 	add.w	r2, r3, #8
 8004900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004902:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f004 fde1 	bl	80094ce <VL53LX_hist_xmonitor_consistency_check>
 800490c:	4603      	mov	r3, r0
 800490e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 8004912:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004916:	2b00      	cmp	r3, #0
 8004918:	d15a      	bne.n	80049d0 <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 800491a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800491c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8004924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004926:	2205      	movs	r2, #5
 8004928:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 800492a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800492c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004930:	3301      	adds	r3, #1
 8004932:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8004934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004936:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8004938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800493e:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8004940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004942:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
		if (zid <
 8004946:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800494a:	429a      	cmp	r2, r3
 800494c:	d222      	bcs.n	8004994 <VL53LX_get_device_results+0x4d4>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 800494e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			phist_info =
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004956:	4413      	add	r3, r2
 8004958:	3304      	adds	r3, #4
 800495a:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 800495c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495e:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8004960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004962:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8004964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004966:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8004968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800496a:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 800496c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496e:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 8004972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004974:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 8004976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004978:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53LX_p_005 =
 800497c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497e:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8004980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004982:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 8004986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004988:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 800498a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 8004990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004992:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 8004994:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004998:	2b00      	cmp	r3, #0
 800499a:	d11b      	bne.n	80049d4 <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 800499c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800499e:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 80049a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049a4:	f203 3266 	addw	r2, r3, #870	; 0x366
 80049a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049aa:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80049ae:	3318      	adds	r3, #24
 80049b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049b2:	f005 f91c 	bl	8009bee <VL53LX_hist_copy_results_to_sys_and_core>
 80049b6:	e00e      	b.n	80049d6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80049b8:	bf00      	nop
 80049ba:	e00c      	b.n	80049d6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80049bc:	bf00      	nop
 80049be:	e00a      	b.n	80049d6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80049c0:	bf00      	nop
 80049c2:	e008      	b.n	80049d6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80049c4:	bf00      	nop
 80049c6:	e006      	b.n	80049d6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80049c8:	bf00      	nop
 80049ca:	e004      	b.n	80049d6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80049cc:	bf00      	nop
 80049ce:	e002      	b.n	80049d6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80049d0:	bf00      	nop
 80049d2:	e000      	b.n	80049d6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80049d4:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 80049d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d8:	785b      	ldrb	r3, [r3, #1]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d036      	beq.n	8004a4c <VL53LX_get_device_results+0x58c>
			if (pstate->rd_device_state !=
 80049de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e0:	79db      	ldrb	r3, [r3, #7]
 80049e2:	2b06      	cmp	r3, #6
 80049e4:	d00a      	beq.n	80049fc <VL53LX_get_device_results+0x53c>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 80049e6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <VL53LX_get_device_results+0x53c>
					status = VL53LX_dynamic_zone_update(
 80049ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f005 f9d0 	bl	8009d96 <VL53LX_dynamic_zone_update>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004a02:	e015      	b.n	8004a30 <VL53LX_get_device_results+0x570>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8004a04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a06:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 8004a0a:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <VL53LX_get_device_results+0x556>
 8004a12:	2103      	movs	r1, #3
 8004a14:	e000      	b.n	8004a18 <VL53LX_get_device_results+0x558>
 8004a16:	2101      	movs	r1, #1
 8004a18:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004a1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a1e:	4413      	add	r3, r2
 8004a20:	460a      	mov	r2, r1
 8004a22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004a26:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004a30:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d9e5      	bls.n	8004a04 <VL53LX_get_device_results+0x544>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 8004a38:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d105      	bne.n	8004a4c <VL53LX_get_device_results+0x58c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f005 fa22 	bl	8009e8a <VL53LX_multizone_hist_bins_update>
 8004a46:	4603      	mov	r3, r0
 8004a48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 8004a4c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d105      	bne.n	8004a60 <VL53LX_get_device_results+0x5a0>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f005 fe79 	bl	800a74c <VL53LX_dynamic_xtalk_correction_corrector>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (pdev->tuning_parms.tp_hist_merge == 1)
 8004a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a62:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d151      	bne.n	8004b0e <VL53LX_get_device_results+0x64e>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8004a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e04c      	b.n	8004b0e <VL53LX_get_device_results+0x64e>
	} else {

		if (status == VL53LX_ERROR_NONE)
 8004a74:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d107      	bne.n	8004a8c <VL53LX_get_device_results+0x5cc>
			status = VL53LX_get_measurement_results(
 8004a7c:	7afb      	ldrb	r3, [r7, #11]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f7ff fc73 	bl	800436c <VL53LX_get_measurement_results>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 8004a8c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10d      	bne.n	8004ab0 <VL53LX_get_device_results+0x5f0>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8004a94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a96:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a9e:	f203 3166 	addw	r1, r3, #870	; 0x366
 8004aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa4:	f503 5299 	add.w	r2, r3, #4896	; 0x1320
 8004aa8:	3218      	adds	r2, #24
 8004aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aac:	f000 fb86 	bl	80051bc <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab2:	785b      	ldrb	r3, [r3, #1]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d12a      	bne.n	8004b0e <VL53LX_get_device_results+0x64e>

			if ((status == VL53LX_ERROR_NONE) &&
 8004ab8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10d      	bne.n	8004adc <VL53LX_get_device_results+0x61c>
				(pL->low_power_auto_range_count == 0)) {
 8004ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac2:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d109      	bne.n	8004adc <VL53LX_get_device_results+0x61c>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f006 fa70 	bl	800afae <VL53LX_low_power_auto_setup_manual_calibration>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8004ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	709a      	strb	r2, [r3, #2]
 8004ada:	e00a      	b.n	8004af2 <VL53LX_get_device_results+0x632>
			} else if ((status == VL53LX_ERROR_NONE) &&
 8004adc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d106      	bne.n	8004af2 <VL53LX_get_device_results+0x632>
				(pL->low_power_auto_range_count == 1)) {
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae6:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d102      	bne.n	8004af2 <VL53LX_get_device_results+0x632>
				pL->low_power_auto_range_count = 2;
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	2202      	movs	r2, #2
 8004af0:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	789b      	ldrb	r3, [r3, #2]
 8004af6:	2bff      	cmp	r3, #255	; 0xff
 8004af8:	d009      	beq.n	8004b0e <VL53LX_get_device_results+0x64e>
 8004afa:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d105      	bne.n	8004b0e <VL53LX_get_device_results+0x64e>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f006 faa5 	bl	800b052 <VL53LX_low_power_auto_update_DSS>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8004b0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b10:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b16:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8004b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b1a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8004b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b20:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8004b22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b24:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8004b28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b2a:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 8004b2c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f040 80b0 	bne.w	8004c96 <VL53LX_get_device_results+0x7d6>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8004b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b38:	2205      	movs	r2, #5
 8004b3a:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8004b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b40:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004b44:	3301      	adds	r3, #1
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b4a:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
		zid = pdev->ll_state.rd_zone_id;
 8004b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (zid < pres->zone_results.max_zones) {
 8004b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b5a:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8004b5e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004b62:	429a      	cmp	r2, r3
 8004b64:	f080 8097 	bcs.w	8004c96 <VL53LX_get_device_results+0x7d6>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 8004b68:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
			pobjects =
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004b78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b7a:	4413      	add	r3, r2
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8004b80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b82:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8004b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b86:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8004b88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b8a:	785a      	ldrb	r2, [r3, #1]
 8004b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b8e:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8004b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b92:	789a      	ldrb	r2, [r3, #2]
 8004b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b96:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8004b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b9a:	78da      	ldrb	r2, [r3, #3]
 8004b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b9e:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 8004ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ba2:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 8004ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ba8:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 8004baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bac:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 8004bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bb2:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 8004bb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bb6:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 8004bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8004bc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bc2:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 8004bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 8004bcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bce:	7c5a      	ldrb	r2, [r3, #17]
 8004bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bd2:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8004bd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bd6:	7c9a      	ldrb	r2, [r3, #18]
 8004bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bda:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004be2:	e052      	b.n	8004c8a <VL53LX_get_device_results+0x7ca>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004be4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004be8:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004bec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bee:	204c      	movs	r0, #76	; 0x4c
 8004bf0:	fb00 f303 	mul.w	r3, r0, r3
 8004bf4:	440b      	add	r3, r1
 8004bf6:	3338      	adds	r3, #56	; 0x38
 8004bf8:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004bfa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4403      	add	r3, r0
 8004c06:	3308      	adds	r3, #8
 8004c08:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004c0a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004c0e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004c12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c14:	204c      	movs	r0, #76	; 0x4c
 8004c16:	fb00 f303 	mul.w	r3, r0, r3
 8004c1a:	440b      	add	r3, r1
 8004c1c:	333c      	adds	r3, #60	; 0x3c
 8004c1e:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004c20:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004c22:	4613      	mov	r3, r2
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4403      	add	r3, r0
 8004c2c:	330c      	adds	r3, #12
 8004c2e:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004c30:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004c34:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004c38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c3a:	204c      	movs	r0, #76	; 0x4c
 8004c3c:	fb00 f303 	mul.w	r3, r0, r3
 8004c40:	440b      	add	r3, r1
 8004c42:	3354      	adds	r3, #84	; 0x54
 8004c44:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004c46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c48:	4613      	mov	r3, r2
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	3310      	adds	r3, #16
 8004c54:	4602      	mov	r2, r0
 8004c56:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8004c58:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].range_status =
 8004c5c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].range_status;
 8004c60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c62:	204c      	movs	r0, #76	; 0x4c
 8004c64:	fb00 f303 	mul.w	r3, r0, r3
 8004c68:	440b      	add	r3, r1
 8004c6a:	335e      	adds	r3, #94	; 0x5e
 8004c6c:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 8004c6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c70:	4613      	mov	r3, r2
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	3312      	adds	r3, #18
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8004c80:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004c84:	3301      	adds	r3, #1
 8004c86:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c8c:	7c9b      	ldrb	r3, [r3, #18]
 8004c8e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d3a6      	bcc.n	8004be4 <VL53LX_get_device_results+0x724>
		}
	}



	memcpy(
 8004c96:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8004c9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f00f f9a1 	bl	8013fe4 <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 8004ca2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d105      	bne.n	8004cb6 <VL53LX_get_device_results+0x7f6>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f002 fd4e 	bl	800774c <VL53LX_check_ll_driver_rd_state>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8004cb6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3768      	adds	r7, #104	; 0x68
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004cc4 <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 8004cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d107      	bne.n	8004cec <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	2203      	movs	r2, #3
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff f868 	bl	8003db8 <VL53LX_init_and_start_range>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8004cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b0d2      	sub	sp, #328	; 0x148
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	1d3b      	adds	r3, r7, #4
 8004d00:	6018      	str	r0, [r3, #0]
 8004d02:	463b      	mov	r3, r7
 8004d04:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev =
 8004d0c:	1d3b      	adds	r3, r7, #4
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3318      	adds	r3, #24
 8004d12:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004d16:	1d3b      	adds	r3, r7, #4
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004d1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8004d22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d26:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8004d2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8004d2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d32:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8004d36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8004d3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d3e:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8004d42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8004d46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d4a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8004d4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 8004d52:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8004d5a:	f107 030c 	add.w	r3, r7, #12
 8004d5e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c

	uint32_t   pll_period_us            = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t    i                        = 0;
 8004d86:	2300      	movs	r3, #0
 8004d88:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b

	int32_t    hist_merge				= 0;
 8004d8c:	f107 0308 	add.w	r3, r7, #8
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8004d94:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10a      	bne.n	8004db2 <VL53LX_get_histogram_bin_data+0xba>
		status = VL53LX_ReadMulti(
 8004d9c:	1d38      	adds	r0, r7, #4
 8004d9e:	2353      	movs	r3, #83	; 0x53
 8004da0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8004da4:	2188      	movs	r1, #136	; 0x88
 8004da6:	6800      	ldr	r0, [r0, #0]
 8004da8:	f00b fefa 	bl	8010ba0 <VL53LX_ReadMulti>
 8004dac:	4603      	mov	r3, r0
 8004dae:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8004db2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004db6:	781a      	ldrb	r2, [r3, #0]
 8004db8:	463b      	mov	r3, r7
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8004dc0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004dc4:	785a      	ldrb	r2, [r3, #1]
 8004dc6:	463b      	mov	r3, r7
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8004dce:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004dd2:	789a      	ldrb	r2, [r3, #2]
 8004dd4:	463b      	mov	r3, r7
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8004ddc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004de0:	78da      	ldrb	r2, [r3, #3]
 8004de2:	463b      	mov	r3, r7
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 8004dea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004dee:	3304      	adds	r3, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	2002      	movs	r0, #2
 8004df4:	f003 f9aa 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8004e04:	234e      	movs	r3, #78	; 0x4e
 8004e06:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8004e0a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004e0e:	f107 020c 	add.w	r2, r7, #12
 8004e12:	4413      	add	r3, r2
 8004e14:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8004e18:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004e1c:	2002      	movs	r0, #2
 8004e1e:	f003 f995 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 8004e22:	4603      	mov	r3, r0
 8004e24:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8004e26:	463b      	mov	r3, r7
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8004e2e:	2350      	movs	r3, #80	; 0x50
 8004e30:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8004e34:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004e38:	f107 020c 	add.w	r2, r7, #12
 8004e3c:	5cd2      	ldrb	r2, [r2, r3]
 8004e3e:	463b      	mov	r3, r7
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8004e46:	463b      	mov	r3, r7
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8004e4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e52:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8004e56:	331c      	adds	r3, #28
 8004e58:	801a      	strh	r2, [r3, #0]
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8004e5a:	463b      	mov	r3, r7
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8004e62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e66:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8004e6a:	331e      	adds	r3, #30
 8004e6c:	701a      	strb	r2, [r3, #0]



	i2c_buffer_offset_bytes =
 8004e6e:	2351      	movs	r3, #81	; 0x51
 8004e70:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8004e74:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004e78:	f107 020c 	add.w	r2, r7, #12
 8004e7c:	5cd3      	ldrb	r3, [r2, r3]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8004e84:	2352      	movs	r3, #82	; 0x52
 8004e86:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8004e8a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004e8e:	f107 020c 	add.w	r2, r7, #12
 8004e92:	5cd2      	ldrb	r2, [r2, r3]
 8004e94:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8004e98:	4413      	add	r3, r2
 8004e9a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8004e9e:	234d      	movs	r3, #77	; 0x4d
 8004ea0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8004ea4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004ea8:	f107 020c 	add.w	r2, r7, #12
 8004eac:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8004eb0:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8004eb2:	2306      	movs	r3, #6
 8004eb4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8004eb8:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004ebc:	f107 020c 	add.w	r2, r7, #12
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8004ecc:	e017      	b.n	8004efe <VL53LX_get_histogram_bin_data+0x206>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8004ece:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004ed2:	2003      	movs	r0, #3
 8004ed4:	f003 f9d9 	bl	800828a <VL53LX_i2c_decode_uint32_t>
 8004ed8:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8004eda:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8004ede:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8004ee0:	463b      	mov	r3, r7
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3206      	adds	r2, #6
 8004ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8004eea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004eee:	3303      	adds	r3, #3
 8004ef0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8004ef4:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8004ef8:	3301      	adds	r3, #1
 8004efa:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8004efe:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8004f02:	2b17      	cmp	r3, #23
 8004f04:	d9e3      	bls.n	8004ece <VL53LX_get_histogram_bin_data+0x1d6>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 8004f06:	f107 0208 	add.w	r2, r7, #8
 8004f0a:	1d3b      	adds	r3, r7, #4
 8004f0c:	f248 018d 	movw	r1, #32909	; 0x808d
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	f000 fb2f 	bl	8005574 <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 8004f16:	463b      	mov	r3, r7
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d118      	bne.n	8004f54 <VL53LX_get_histogram_bin_data+0x25c>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8004f22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f26:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8004f2a:	3310      	adds	r3, #16
 8004f2c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8004f30:	2100      	movs	r1, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f00f f864 	bl	8014000 <memset>
		pdev->bin_rec_pos = 0;
 8004f38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f3c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8004f40:	330c      	adds	r3, #12
 8004f42:	2200      	movs	r2, #0
 8004f44:	701a      	strb	r2, [r3, #0]
		pdev->pos_before_next_recom = 0;
 8004f46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f4a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8004f4e:	330d      	adds	r3, #13
 8004f50:	2200      	movs	r2, #0
 8004f52:	701a      	strb	r2, [r3, #0]
	}

	if (hist_merge == 1)
 8004f54:	f107 0308 	add.w	r3, r7, #8
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d105      	bne.n	8004f6a <VL53LX_get_histogram_bin_data+0x272>
		vl53lx_histo_merge(Dev, pdata);
 8004f5e:	463a      	mov	r2, r7
 8004f60:	1d3b      	adds	r3, r7, #4
 8004f62:	6811      	ldr	r1, [r2, #0]
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	f7fd ff10 	bl	8002d8a <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8004f6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f6e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8004f72:	463b      	mov	r3, r7
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 8004f78:	463b      	mov	r3, r7
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8004f80:	463b      	mov	r3, r7
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2218      	movs	r2, #24
 8004f86:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8004f88:	463b      	mov	r3, r7
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2218      	movs	r2, #24
 8004f8e:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8004f90:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f94:	78da      	ldrb	r2, [r3, #3]
 8004f96:	463b      	mov	r3, r7
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8004f9e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004fa2:	799b      	ldrb	r3, [r3, #6]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8004faa:	463b      	mov	r3, r7
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 8004fb2:	463b      	mov	r3, r7
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8004fba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fbe:	7c1b      	ldrb	r3, [r3, #16]
 8004fc0:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8004fc2:	4413      	add	r3, r2
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	463b      	mov	r3, r7
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8004fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd2:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 8004fd4:	463b      	mov	r3, r7
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 8004fdc:	463a      	mov	r2, r7
 8004fde:	1d3b      	adds	r3, r7, #4
 8004fe0:	6811      	ldr	r1, [r2, #0]
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	f003 fd20 	bl	8008a28 <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8004fe8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004fec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d114      	bne.n	800501e <VL53LX_get_histogram_bin_data+0x326>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8004ff4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ff8:	791b      	ldrb	r3, [r3, #4]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8005000:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005004:	795b      	ldrb	r3, [r3, #5]
 8005006:	b29b      	uxth	r3, r3
		encoded_timeout =
 8005008:	4413      	add	r3, r2
 800500a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 800500e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005012:	799a      	ldrb	r2, [r3, #6]
 8005014:	463b      	mov	r3, r7
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800501c:	e013      	b.n	8005046 <VL53LX_get_histogram_bin_data+0x34e>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 800501e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005022:	79db      	ldrb	r3, [r3, #7]
 8005024:	b29b      	uxth	r3, r3
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 800502a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800502e:	7a1b      	ldrb	r3, [r3, #8]
 8005030:	b29b      	uxth	r3, r3
		encoded_timeout =
 8005032:	4413      	add	r3, r2
 8005034:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 8005038:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800503c:	7a5a      	ldrb	r2, [r3, #9]
 800503e:	463b      	mov	r3, r7
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8005046:	463b      	mov	r3, r7
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2200      	movs	r2, #0
 800504c:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 800504e:	2300      	movs	r3, #0
 8005050:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8005054:	e016      	b.n	8005084 <VL53LX_get_histogram_bin_data+0x38c>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8005056:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800505a:	463a      	mov	r2, r7
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	4413      	add	r3, r2
 8005060:	7b1b      	ldrb	r3, [r3, #12]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	2b07      	cmp	r3, #7
 8005068:	d107      	bne.n	800507a <VL53LX_get_histogram_bin_data+0x382>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 800506a:	463b      	mov	r3, r7
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	7adb      	ldrb	r3, [r3, #11]
 8005070:	3304      	adds	r3, #4
 8005072:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8005074:	463b      	mov	r3, r7
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 800507a:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800507e:	3301      	adds	r3, #1
 8005080:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8005084:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005088:	2b05      	cmp	r3, #5
 800508a:	d9e4      	bls.n	8005056 <VL53LX_get_histogram_bin_data+0x35e>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 800508c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005090:	4618      	mov	r0, r3
 8005092:	f003 fb6a 	bl	800876a <VL53LX_decode_timeout>
 8005096:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8005098:	463b      	mov	r3, r7
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 80050a0:	463b      	mov	r3, r7
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80050a8:	4618      	mov	r0, r3
 80050aa:	f006 f89a 	bl	800b1e2 <VL53LX_calc_pll_period_us>
 80050ae:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 80050b2:	463b      	mov	r3, r7
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ba:	3301      	adds	r3, #1
 80050bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 80050c0:	463b      	mov	r3, r7
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53LX_duration_maths(
 80050c8:	4619      	mov	r1, r3
 80050ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050d2:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80050d6:	f006 f89b 	bl	800b210 <VL53LX_duration_maths>
 80050da:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 80050dc:	463b      	mov	r3, r7
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 80050e4:	463b      	mov	r3, r7
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 80050ee:	463b      	mov	r3, r7
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	f006 f9a4 	bl	800b43e <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 80050f6:	463b      	mov	r3, r7
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	f006 fdb0 	bl	800bc5e <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 80050fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005102:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005106:	463b      	mov	r3, r7
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 800510c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005110:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8005114:	463b      	mov	r3, r7
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 800511a:	463b      	mov	r3, r7
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	789b      	ldrb	r3, [r3, #2]
 8005120:	461a      	mov	r2, r3
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800512e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005132:	4413      	add	r3, r2
 8005134:	3302      	adds	r3, #2
 8005136:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 800513a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800513e:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8005140:	463b      	mov	r3, r7
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8005148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800514c:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 800514e:	463b      	mov	r3, r7
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8005156:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800515a:	2200      	movs	r2, #0
 800515c:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 800515e:	463b      	mov	r3, r7
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005166:	f003 031f 	and.w	r3, r3, #31
 800516a:	2b11      	cmp	r3, #17
 800516c:	bf8c      	ite	hi
 800516e:	2201      	movhi	r2, #1
 8005170:	2200      	movls	r2, #0
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	2a00      	cmp	r2, #0
 8005176:	d118      	bne.n	80051aa <VL53LX_get_histogram_bin_data+0x4b2>
 8005178:	2201      	movs	r2, #1
 800517a:	409a      	lsls	r2, r3
 800517c:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <VL53LX_get_histogram_bin_data+0x4c0>)
 800517e:	4013      	ands	r3, r2
 8005180:	2b00      	cmp	r3, #0
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00d      	beq.n	80051aa <VL53LX_get_histogram_bin_data+0x4b2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 800518e:	463b      	mov	r3, r7
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005196:	f003 031f 	and.w	r3, r3, #31
 800519a:	b2da      	uxtb	r2, r3
 800519c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051a0:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 80051a2:	23fa      	movs	r3, #250	; 0xfa
 80051a4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 80051a8:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80051aa:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	0002200e 	.word	0x0002200e

080051bc <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 80051bc:	b480      	push	{r7}
 80051be:	b08b      	sub	sp, #44	; 0x2c
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2200      	movs	r2, #0
 80051dc:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	78da      	ldrb	r2, [r3, #3]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2200      	movs	r2, #0
 80051ea:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2204      	movs	r2, #4
 80051f0:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2201      	movs	r2, #1
 80051f6:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	8a1b      	ldrh	r3, [r3, #16]
 80051fc:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	8a9b      	ldrh	r3, [r3, #20]
 8005202:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	8a5b      	ldrh	r3, [r3, #18]
 8005208:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 800520a:	2300      	movs	r3, #0
 800520c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005210:	e00b      	b.n	800522a <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 8005212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	4413      	add	r3, r2
 800521c:	2200      	movs	r2, #0
 800521e:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8005220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005224:	3301      	adds	r3, #1
 8005226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800522a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800522e:	2b04      	cmp	r3, #4
 8005230:	d9ef      	bls.n	8005212 <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	3314      	adds	r3, #20
 8005236:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8005238:	2300      	movs	r3, #0
 800523a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800523e:	e0fe      	b.n	800543e <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005246:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	2200      	movs	r2, #0
 800524c:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	78db      	ldrb	r3, [r3, #3]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10a      	bne.n	800526c <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800525e:	2b09      	cmp	r3, #9
 8005260:	d104      	bne.n	800526c <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	2213      	movs	r2, #19
 8005266:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800526a:	e007      	b.n	800527c <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	785b      	ldrb	r3, [r3, #1]
 8005270:	f003 031f 	and.w	r3, r3, #31
 8005274:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	2200      	movs	r2, #0
 8005280:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	2200      	movs	r2, #0
 8005286:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	2200      	movs	r2, #0
 800528c:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	2200      	movs	r2, #0
 8005292:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	2200      	movs	r2, #0
 8005298:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	2200      	movs	r2, #0
 800529e:	735a      	strb	r2, [r3, #13]

		switch (i) {
 80052a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d05c      	beq.n	8005366 <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 80052ac:	e0a8      	b.n	8005400 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	789b      	ldrb	r3, [r3, #2]
 80052b2:	2b07      	cmp	r3, #7
 80052b4:	d103      	bne.n	80052be <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	8a7a      	ldrh	r2, [r7, #18]
 80052ba:	82da      	strh	r2, [r3, #22]
 80052bc:	e00b      	b.n	80052d6 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	789b      	ldrb	r3, [r3, #2]
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d103      	bne.n	80052ce <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	8aba      	ldrh	r2, [r7, #20]
 80052ca:	82da      	strh	r2, [r3, #22]
 80052cc:	e003      	b.n	80052d6 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	8afa      	ldrh	r2, [r7, #22]
 80052da:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	895b      	ldrh	r3, [r3, #10]
 80052f0:	015b      	lsls	r3, r3, #5
 80052f2:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fa:	d302      	bcc.n	8005302 <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 80052fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005300:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	b29a      	uxth	r2, r3
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8005318:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	fb02 f303 	mul.w	r3, r2, r3
 8005322:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800532a:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b00      	cmp	r3, #0
 8005330:	da01      	bge.n	8005336 <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 8005332:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005336:	12db      	asrs	r3, r3, #11
 8005338:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	b21a      	sxth	r2, r3
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8005364:	e04c      	b.n	8005400 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800537c:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	8bdb      	ldrh	r3, [r3, #30]
 800538a:	015b      	lsls	r3, r3, #5
 800538c:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005394:	d302      	bcc.n	800539c <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 8005396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800539a:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	b29a      	uxth	r2, r3
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 80053b2:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	fb02 f303 	mul.w	r3, r2, r3
 80053bc:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053c4:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	da01      	bge.n	80053d0 <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 80053cc:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80053d0:	12db      	asrs	r3, r3, #11
 80053d2:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	b21a      	sxth	r2, r3
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 80053fe:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	334c      	adds	r3, #76	; 0x4c
 8005432:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8005434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005438:	3301      	adds	r3, #1
 800543a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800543e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005442:	2b01      	cmp	r3, #1
 8005444:	f67f aefc 	bls.w	8005240 <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2200      	movs	r2, #0
 800544c:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	785b      	ldrb	r3, [r3, #1]
 8005452:	f003 031f 	and.w	r3, r3, #31
 8005456:	2b11      	cmp	r3, #17
 8005458:	bf8c      	ite	hi
 800545a:	2201      	movhi	r2, #1
 800545c:	2200      	movls	r2, #0
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	2a00      	cmp	r2, #0
 8005462:	d116      	bne.n	8005492 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
 8005464:	2201      	movs	r2, #1
 8005466:	409a      	lsls	r2, r3
 8005468:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	bf14      	ite	ne
 8005470:	2301      	movne	r3, #1
 8005472:	2300      	moveq	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00b      	beq.n	8005492 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	785b      	ldrb	r3, [r3, #1]
 800547e:	f003 031f 	and.w	r3, r3, #31
 8005482:	b2da      	uxtb	r2, r3
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 8005490:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8005492:	bf00      	nop
 8005494:	372c      	adds	r7, #44	; 0x2c
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	0002200e 	.word	0x0002200e

080054a4 <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80054ae:	2300      	movs	r3, #0
 80054b0:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3318      	adds	r3, #24
 80054b6:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	332c      	adds	r3, #44	; 0x2c
 80054bc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b05      	cmp	r3, #5
 80054c4:	d109      	bne.n	80054da <VL53LX_set_zone_dss_config+0x36>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	2202      	movs	r2, #2
 80054ca:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
 80054d8:	e003      	b.n	80054e2 <VL53LX_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 80054e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	460b      	mov	r3, r1
 80054fc:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80054fe:	2300      	movs	r3, #0
 8005500:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3318      	adds	r3, #24
 8005506:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	78fa      	ldrb	r2, [r7, #3]
 800550c:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 800550e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b086      	sub	sp, #24
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	460b      	mov	r3, r1
 8005528:	607a      	str	r2, [r7, #4]
 800552a:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800552c:	2300      	movs	r3, #0
 800552e:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3318      	adds	r3, #24
 8005534:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8005536:	7afb      	ldrb	r3, [r7, #11]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d009      	beq.n	8005550 <VL53LX_get_dmax_calibration_data+0x32>
 800553c:	2b02      	cmp	r3, #2
 800553e:	d10f      	bne.n	8005560 <VL53LX_get_dmax_calibration_data+0x42>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8005544:	220a      	movs	r2, #10
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f00e fd4b 	bl	8013fe4 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 800554e:	e00a      	b.n	8005566 <VL53LX_get_dmax_calibration_data+0x48>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8005554:	220a      	movs	r2, #10
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f00e fd43 	bl	8013fe4 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 800555e:	e002      	b.n	8005566 <VL53LX_get_dmax_calibration_data+0x48>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8005560:	23fc      	movs	r3, #252	; 0xfc
 8005562:	75fb      	strb	r3, [r7, #23]
	break;
 8005564:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005566:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8005574:	b480      	push	{r7}
 8005576:	b089      	sub	sp, #36	; 0x24
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	460b      	mov	r3, r1
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005582:	2300      	movs	r3, #0
 8005584:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3318      	adds	r3, #24
 800558a:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005592:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800559a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800559c:	897b      	ldrh	r3, [r7, #10]
 800559e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80055a2:	2bb9      	cmp	r3, #185	; 0xb9
 80055a4:	f200 86ca 	bhi.w	800633c <VL53LX_get_tuning_parm+0xdc8>
 80055a8:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <VL53LX_get_tuning_parm+0x3c>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	08005899 	.word	0x08005899
 80055b4:	080058a9 	.word	0x080058a9
 80055b8:	080058b9 	.word	0x080058b9
 80055bc:	080058c9 	.word	0x080058c9
 80055c0:	080058d7 	.word	0x080058d7
 80055c4:	080058e5 	.word	0x080058e5
 80055c8:	080058f3 	.word	0x080058f3
 80055cc:	08005901 	.word	0x08005901
 80055d0:	0800590f 	.word	0x0800590f
 80055d4:	0800591d 	.word	0x0800591d
 80055d8:	0800592b 	.word	0x0800592b
 80055dc:	08005937 	.word	0x08005937
 80055e0:	08005945 	.word	0x08005945
 80055e4:	08005953 	.word	0x08005953
 80055e8:	0800595f 	.word	0x0800595f
 80055ec:	0800596d 	.word	0x0800596d
 80055f0:	0800597b 	.word	0x0800597b
 80055f4:	0800598b 	.word	0x0800598b
 80055f8:	0800599b 	.word	0x0800599b
 80055fc:	080059a9 	.word	0x080059a9
 8005600:	080059b9 	.word	0x080059b9
 8005604:	080059c7 	.word	0x080059c7
 8005608:	080059d7 	.word	0x080059d7
 800560c:	080059e7 	.word	0x080059e7
 8005610:	080059f7 	.word	0x080059f7
 8005614:	08005a07 	.word	0x08005a07
 8005618:	08005a17 	.word	0x08005a17
 800561c:	08005a27 	.word	0x08005a27
 8005620:	08005a37 	.word	0x08005a37
 8005624:	08005a47 	.word	0x08005a47
 8005628:	08005a57 	.word	0x08005a57
 800562c:	08005a65 	.word	0x08005a65
 8005630:	08005a75 	.word	0x08005a75
 8005634:	08005a85 	.word	0x08005a85
 8005638:	08005a95 	.word	0x08005a95
 800563c:	08005aa5 	.word	0x08005aa5
 8005640:	08005ab5 	.word	0x08005ab5
 8005644:	08005ac5 	.word	0x08005ac5
 8005648:	08005ad5 	.word	0x08005ad5
 800564c:	08005ae5 	.word	0x08005ae5
 8005650:	08005af5 	.word	0x08005af5
 8005654:	08005b05 	.word	0x08005b05
 8005658:	08005b15 	.word	0x08005b15
 800565c:	08005b25 	.word	0x08005b25
 8005660:	08005b35 	.word	0x08005b35
 8005664:	08005b45 	.word	0x08005b45
 8005668:	08005b53 	.word	0x08005b53
 800566c:	08005b61 	.word	0x08005b61
 8005670:	08005b6f 	.word	0x08005b6f
 8005674:	08005b7d 	.word	0x08005b7d
 8005678:	08005b8b 	.word	0x08005b8b
 800567c:	08005b99 	.word	0x08005b99
 8005680:	08005ba7 	.word	0x08005ba7
 8005684:	08005bb5 	.word	0x08005bb5
 8005688:	08005bc3 	.word	0x08005bc3
 800568c:	08005bd1 	.word	0x08005bd1
 8005690:	08005bdf 	.word	0x08005bdf
 8005694:	08005bed 	.word	0x08005bed
 8005698:	08005bfb 	.word	0x08005bfb
 800569c:	08005c09 	.word	0x08005c09
 80056a0:	08005c17 	.word	0x08005c17
 80056a4:	08005c25 	.word	0x08005c25
 80056a8:	08005c33 	.word	0x08005c33
 80056ac:	08005c41 	.word	0x08005c41
 80056b0:	08005c4f 	.word	0x08005c4f
 80056b4:	08005c5d 	.word	0x08005c5d
 80056b8:	08005c6b 	.word	0x08005c6b
 80056bc:	08005c79 	.word	0x08005c79
 80056c0:	08005c87 	.word	0x08005c87
 80056c4:	08005c95 	.word	0x08005c95
 80056c8:	08005ca3 	.word	0x08005ca3
 80056cc:	08005cb1 	.word	0x08005cb1
 80056d0:	08005cbf 	.word	0x08005cbf
 80056d4:	08005ccd 	.word	0x08005ccd
 80056d8:	08005cd9 	.word	0x08005cd9
 80056dc:	08005ce7 	.word	0x08005ce7
 80056e0:	08005cf5 	.word	0x08005cf5
 80056e4:	08005d01 	.word	0x08005d01
 80056e8:	08005d0d 	.word	0x08005d0d
 80056ec:	08005d19 	.word	0x08005d19
 80056f0:	08005d25 	.word	0x08005d25
 80056f4:	08005d31 	.word	0x08005d31
 80056f8:	08005d3d 	.word	0x08005d3d
 80056fc:	08005d4b 	.word	0x08005d4b
 8005700:	08005d59 	.word	0x08005d59
 8005704:	08005d67 	.word	0x08005d67
 8005708:	08005d75 	.word	0x08005d75
 800570c:	08005d83 	.word	0x08005d83
 8005710:	08005d91 	.word	0x08005d91
 8005714:	08005d9f 	.word	0x08005d9f
 8005718:	08005dad 	.word	0x08005dad
 800571c:	08005dbb 	.word	0x08005dbb
 8005720:	08005dc9 	.word	0x08005dc9
 8005724:	08005dd7 	.word	0x08005dd7
 8005728:	08005de5 	.word	0x08005de5
 800572c:	08005df3 	.word	0x08005df3
 8005730:	08005e01 	.word	0x08005e01
 8005734:	08005e0f 	.word	0x08005e0f
 8005738:	08005e1d 	.word	0x08005e1d
 800573c:	08005e2b 	.word	0x08005e2b
 8005740:	08005e39 	.word	0x08005e39
 8005744:	08005e47 	.word	0x08005e47
 8005748:	08005e55 	.word	0x08005e55
 800574c:	08005e63 	.word	0x08005e63
 8005750:	08005e71 	.word	0x08005e71
 8005754:	08005e7f 	.word	0x08005e7f
 8005758:	08005e8d 	.word	0x08005e8d
 800575c:	08005e9b 	.word	0x08005e9b
 8005760:	08005ea9 	.word	0x08005ea9
 8005764:	08005eb7 	.word	0x08005eb7
 8005768:	08005ec5 	.word	0x08005ec5
 800576c:	08005ed3 	.word	0x08005ed3
 8005770:	08005ee1 	.word	0x08005ee1
 8005774:	08005eef 	.word	0x08005eef
 8005778:	08005efd 	.word	0x08005efd
 800577c:	08005f0b 	.word	0x08005f0b
 8005780:	08005f19 	.word	0x08005f19
 8005784:	08005f27 	.word	0x08005f27
 8005788:	08005f35 	.word	0x08005f35
 800578c:	08005f47 	.word	0x08005f47
 8005790:	08005f59 	.word	0x08005f59
 8005794:	08005f69 	.word	0x08005f69
 8005798:	08005f7b 	.word	0x08005f7b
 800579c:	08005f8d 	.word	0x08005f8d
 80057a0:	08005f9f 	.word	0x08005f9f
 80057a4:	08005fb1 	.word	0x08005fb1
 80057a8:	08005fc3 	.word	0x08005fc3
 80057ac:	08005fd5 	.word	0x08005fd5
 80057b0:	08005fe9 	.word	0x08005fe9
 80057b4:	08005ffb 	.word	0x08005ffb
 80057b8:	0800600d 	.word	0x0800600d
 80057bc:	0800601f 	.word	0x0800601f
 80057c0:	08006031 	.word	0x08006031
 80057c4:	08006043 	.word	0x08006043
 80057c8:	08006055 	.word	0x08006055
 80057cc:	08006067 	.word	0x08006067
 80057d0:	08006079 	.word	0x08006079
 80057d4:	0800608b 	.word	0x0800608b
 80057d8:	08006099 	.word	0x08006099
 80057dc:	080060a7 	.word	0x080060a7
 80057e0:	080060b5 	.word	0x080060b5
 80057e4:	080060c3 	.word	0x080060c3
 80057e8:	080060d1 	.word	0x080060d1
 80057ec:	080060df 	.word	0x080060df
 80057f0:	080060ed 	.word	0x080060ed
 80057f4:	080060ff 	.word	0x080060ff
 80057f8:	0800610d 	.word	0x0800610d
 80057fc:	0800611b 	.word	0x0800611b
 8005800:	08006129 	.word	0x08006129
 8005804:	08006137 	.word	0x08006137
 8005808:	08006145 	.word	0x08006145
 800580c:	08006153 	.word	0x08006153
 8005810:	08006161 	.word	0x08006161
 8005814:	0800616f 	.word	0x0800616f
 8005818:	0800617d 	.word	0x0800617d
 800581c:	0800618b 	.word	0x0800618b
 8005820:	08006199 	.word	0x08006199
 8005824:	080061a7 	.word	0x080061a7
 8005828:	080061b5 	.word	0x080061b5
 800582c:	080061c3 	.word	0x080061c3
 8005830:	080061d1 	.word	0x080061d1
 8005834:	080061df 	.word	0x080061df
 8005838:	080061ed 	.word	0x080061ed
 800583c:	080061fb 	.word	0x080061fb
 8005840:	08006209 	.word	0x08006209
 8005844:	08006217 	.word	0x08006217
 8005848:	08006225 	.word	0x08006225
 800584c:	08006233 	.word	0x08006233
 8005850:	08006241 	.word	0x08006241
 8005854:	0800624f 	.word	0x0800624f
 8005858:	0800625d 	.word	0x0800625d
 800585c:	0800626b 	.word	0x0800626b
 8005860:	08006279 	.word	0x08006279
 8005864:	08006287 	.word	0x08006287
 8005868:	08006295 	.word	0x08006295
 800586c:	080062a3 	.word	0x080062a3
 8005870:	080062b1 	.word	0x080062b1
 8005874:	080062bf 	.word	0x080062bf
 8005878:	080062cd 	.word	0x080062cd
 800587c:	080062db 	.word	0x080062db
 8005880:	080062e9 	.word	0x080062e9
 8005884:	080062f7 	.word	0x080062f7
 8005888:	08006305 	.word	0x08006305
 800588c:	08006313 	.word	0x08006313
 8005890:	08006321 	.word	0x08006321
 8005894:	0800632f 	.word	0x0800632f

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800589e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	601a      	str	r2, [r3, #0]
	break;
 80058a4:	f000 bd51 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 80058ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	601a      	str	r2, [r3, #0]
	break;
 80058b4:	f000 bd49 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 80058be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	601a      	str	r2, [r3, #0]
	break;
 80058c4:	f000 bd41 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	601a      	str	r2, [r3, #0]
	break;
 80058d2:	f000 bd3a 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	785b      	ldrb	r3, [r3, #1]
 80058da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	601a      	str	r2, [r3, #0]
	break;
 80058e0:	f000 bd33 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	789b      	ldrb	r3, [r3, #2]
 80058e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	601a      	str	r2, [r3, #0]
	break;
 80058ee:	f000 bd2c 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	78db      	ldrb	r3, [r3, #3]
 80058f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	601a      	str	r2, [r3, #0]
	break;
 80058fc:	f000 bd25 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	791b      	ldrb	r3, [r3, #4]
 8005904:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	601a      	str	r2, [r3, #0]
	break;
 800590a:	f000 bd1e 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	795b      	ldrb	r3, [r3, #5]
 8005912:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	601a      	str	r2, [r3, #0]
	break;
 8005918:	f000 bd17 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	799b      	ldrb	r3, [r3, #6]
 8005920:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	601a      	str	r2, [r3, #0]
	break;
 8005926:	f000 bd10 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	601a      	str	r2, [r3, #0]
	break;
 8005932:	f000 bd0a 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	891b      	ldrh	r3, [r3, #8]
 800593a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	601a      	str	r2, [r3, #0]
	break;
 8005940:	f000 bd03 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	8a1b      	ldrh	r3, [r3, #16]
 8005948:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	601a      	str	r2, [r3, #0]
	break;
 800594e:	f000 bcfc 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	601a      	str	r2, [r3, #0]
	break;
 800595a:	f000 bcf6 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	7e1b      	ldrb	r3, [r3, #24]
 8005962:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	601a      	str	r2, [r3, #0]
	break;
 8005968:	f000 bcef 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	8b5b      	ldrh	r3, [r3, #26]
 8005970:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	601a      	str	r2, [r3, #0]
	break;
 8005976:	f000 bce8 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8005980:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	601a      	str	r2, [r3, #0]
	break;
 8005986:	f000 bce0 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005990:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	601a      	str	r2, [r3, #0]
	break;
 8005996:	f000 bcd8 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800599e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	601a      	str	r2, [r3, #0]
	break;
 80059a4:	f000 bcd1 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80059ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	601a      	str	r2, [r3, #0]
	break;
 80059b4:	f000 bcc9 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80059bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	601a      	str	r2, [r3, #0]
	break;
 80059c2:	f000 bcc2 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80059cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	601a      	str	r2, [r3, #0]
	break;
 80059d2:	f000 bcba 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80059dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	601a      	str	r2, [r3, #0]
	break;
 80059e2:	f000 bcb2 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80059ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	601a      	str	r2, [r3, #0]
	break;
 80059f2:	f000 bcaa 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80059fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	601a      	str	r2, [r3, #0]
	break;
 8005a02:	f000 bca2 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8005a0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	601a      	str	r2, [r3, #0]
	break;
 8005a12:	f000 bc9a 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8005a1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	601a      	str	r2, [r3, #0]
	break;
 8005a22:	f000 bc92 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	f9b3 32a6 	ldrsh.w	r3, [r3, #678]	; 0x2a6
		*ptuning_parm_value = (int32_t)(
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	601a      	str	r2, [r3, #0]
	break;
 8005a32:	f000 bc8a 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	f9b3 32a8 	ldrsh.w	r3, [r3, #680]	; 0x2a8
		*ptuning_parm_value = (int32_t)(
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
	break;
 8005a42:	f000 bc82 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8005a4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	601a      	str	r2, [r3, #0]
	break;
 8005a52:	f000 bc7a 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	601a      	str	r2, [r3, #0]
	break;
 8005a60:	f000 bc73 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
		*ptuning_parm_value = (int32_t)(
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	601a      	str	r2, [r3, #0]
	break;
 8005a70:	f000 bc6b 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	601a      	str	r2, [r3, #0]
	break;
 8005a80:	f000 bc63 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	f9b3 329e 	ldrsh.w	r3, [r3, #670]	; 0x29e
 8005a8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	601a      	str	r2, [r3, #0]
	break;
 8005a90:	f000 bc5b 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8005a9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	601a      	str	r2, [r3, #0]
	break;
 8005aa0:	f000 bc53 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005aaa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	601a      	str	r2, [r3, #0]
	break;
 8005ab0:	f000 bc4b 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8005aba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	601a      	str	r2, [r3, #0]
	break;
 8005ac0:	f000 bc43 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8005aca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	601a      	str	r2, [r3, #0]
	break;
 8005ad0:	f000 bc3b 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8005ada:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	601a      	str	r2, [r3, #0]
	break;
 8005ae0:	f000 bc33 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 8005aea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	601a      	str	r2, [r3, #0]
	break;
 8005af0:	f000 bc2b 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8005afa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	601a      	str	r2, [r3, #0]
	break;
 8005b00:	f000 bc23 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8005b0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	601a      	str	r2, [r3, #0]
	break;
 8005b10:	f000 bc1b 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
		*ptuning_parm_value = (int32_t)(
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	601a      	str	r2, [r3, #0]
	break;
 8005b20:	f000 bc13 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8005b2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	601a      	str	r2, [r3, #0]
	break;
 8005b30:	f000 bc0b 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
		*ptuning_parm_value = (int32_t)(
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	601a      	str	r2, [r3, #0]
	break;
 8005b40:	f000 bc03 	b.w	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8005b4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	601a      	str	r2, [r3, #0]
	break;
 8005b50:	e3fb      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8005b58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	601a      	str	r2, [r3, #0]
	break;
 8005b5e:	e3f4      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8005b66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	601a      	str	r2, [r3, #0]
	break;
 8005b6c:	e3ed      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 8005b74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	601a      	str	r2, [r3, #0]
	break;
 8005b7a:	e3e6      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 8005b82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	601a      	str	r2, [r3, #0]
	break;
 8005b88:	e3df      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8005b90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	601a      	str	r2, [r3, #0]
	break;
 8005b96:	e3d8      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8005b9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	601a      	str	r2, [r3, #0]
	break;
 8005ba4:	e3d1      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	f9b3 32a0 	ldrsh.w	r3, [r3, #672]	; 0x2a0
 8005bac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	601a      	str	r2, [r3, #0]
	break;
 8005bb2:	e3ca      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8005bba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	601a      	str	r2, [r3, #0]
	break;
 8005bc0:	e3c3      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8005bc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	601a      	str	r2, [r3, #0]
	break;
 8005bce:	e3bc      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8005bd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	601a      	str	r2, [r3, #0]
	break;
 8005bdc:	e3b5      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005be4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	601a      	str	r2, [r3, #0]
	break;
 8005bea:	e3ae      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8005bf2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	601a      	str	r2, [r3, #0]
	break;
 8005bf8:	e3a7      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8005c00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	601a      	str	r2, [r3, #0]
	break;
 8005c06:	e3a0      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8005c0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	601a      	str	r2, [r3, #0]
	break;
 8005c14:	e399      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	f893 3254 	ldrb.w	r3, [r3, #596]	; 0x254
 8005c1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	601a      	str	r2, [r3, #0]
	break;
 8005c22:	e392      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	f8b3 3260 	ldrh.w	r3, [r3, #608]	; 0x260
 8005c2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	601a      	str	r2, [r3, #0]
	break;
 8005c30:	e38b      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	f8b3 3262 	ldrh.w	r3, [r3, #610]	; 0x262
 8005c38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	601a      	str	r2, [r3, #0]
	break;
 8005c3e:	e384      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005c46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	601a      	str	r2, [r3, #0]
	break;
 8005c4c:	e37d      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	f8b3 3266 	ldrh.w	r3, [r3, #614]	; 0x266
 8005c54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	601a      	str	r2, [r3, #0]
	break;
 8005c5a:	e376      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 8005c62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	601a      	str	r2, [r3, #0]
	break;
 8005c68:	e36f      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005c70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	601a      	str	r2, [r3, #0]
	break;
 8005c76:	e368      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8005c7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	601a      	str	r2, [r3, #0]
	break;
 8005c84:	e361      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8005c8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	601a      	str	r2, [r3, #0]
	break;
 8005c92:	e35a      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8005c9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	601a      	str	r2, [r3, #0]
	break;
 8005ca0:	e353      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8005ca8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	601a      	str	r2, [r3, #0]
	break;
 8005cae:	e34c      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8005cb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	601a      	str	r2, [r3, #0]
	break;
 8005cbc:	e345      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8005cc4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	601a      	str	r2, [r3, #0]
	break;
 8005cca:	e33e      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	7c1b      	ldrb	r3, [r3, #16]
 8005cd0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	601a      	str	r2, [r3, #0]
	break;
 8005cd6:	e338      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005cde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	601a      	str	r2, [r3, #0]
	break;
 8005ce4:	e331      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005cec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	601a      	str	r2, [r3, #0]
	break;
 8005cf2:	e32a      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	601a      	str	r2, [r3, #0]
	break;
 8005cfe:	e324      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	601a      	str	r2, [r3, #0]
	break;
 8005d0a:	e31e      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	8adb      	ldrh	r3, [r3, #22]
 8005d10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	601a      	str	r2, [r3, #0]
	break;
 8005d16:	e318      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	8b1b      	ldrh	r3, [r3, #24]
 8005d1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	601a      	str	r2, [r3, #0]
	break;
 8005d22:	e312      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	601a      	str	r2, [r3, #0]
	break;
 8005d2e:	e30c      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	601a      	str	r2, [r3, #0]
	break;
 8005d3a:	e306      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	601a      	str	r2, [r3, #0]
	break;
 8005d48:	e2ff      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	601a      	str	r2, [r3, #0]
	break;
 8005d56:	e2f8      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	601a      	str	r2, [r3, #0]
	break;
 8005d64:	e2f1      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	601a      	str	r2, [r3, #0]
	break;
 8005d72:	e2ea      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	f893 32c0 	ldrb.w	r3, [r3, #704]	; 0x2c0
 8005d7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	601a      	str	r2, [r3, #0]
	break;
 8005d80:	e2e3      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 8005d88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	601a      	str	r2, [r3, #0]
	break;
 8005d8e:	e2dc      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
 8005d96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	601a      	str	r2, [r3, #0]
	break;
 8005d9c:	e2d5      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	; 0x2c4
 8005da4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	601a      	str	r2, [r3, #0]
	break;
 8005daa:	e2ce      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005db2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	601a      	str	r2, [r3, #0]
	break;
 8005db8:	e2c7      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005dc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	601a      	str	r2, [r3, #0]
	break;
 8005dc6:	e2c0      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	; 0x2d4
 8005dce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	601a      	str	r2, [r3, #0]
	break;
 8005dd4:	e2b9      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8005ddc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	601a      	str	r2, [r3, #0]
	break;
 8005de2:	e2b2      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	; 0x2d6
 8005dea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	601a      	str	r2, [r3, #0]
	break;
 8005df0:	e2ab      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8005df8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
	break;
 8005dfe:	e2a4      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 8005e06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	601a      	str	r2, [r3, #0]
	break;
 8005e0c:	e29d      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8005e14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	601a      	str	r2, [r3, #0]
	break;
 8005e1a:	e296      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8005e22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	601a      	str	r2, [r3, #0]
	break;
 8005e28:	e28f      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 8005e30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	601a      	str	r2, [r3, #0]
	break;
 8005e36:	e288      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 8005e3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	601a      	str	r2, [r3, #0]
	break;
 8005e44:	e281      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8005e4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	601a      	str	r2, [r3, #0]
	break;
 8005e52:	e27a      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8005e5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	601a      	str	r2, [r3, #0]
	break;
 8005e60:	e273      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8005e68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	601a      	str	r2, [r3, #0]
	break;
 8005e6e:	e26c      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8005e76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	601a      	str	r2, [r3, #0]
	break;
 8005e7c:	e265      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8005e84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	601a      	str	r2, [r3, #0]
	break;
 8005e8a:	e25e      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005e92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	601a      	str	r2, [r3, #0]
	break;
 8005e98:	e257      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8005ea0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	601a      	str	r2, [r3, #0]
	break;
 8005ea6:	e250      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005eae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	601a      	str	r2, [r3, #0]
	break;
 8005eb4:	e249      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005ebc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	601a      	str	r2, [r3, #0]
	break;
 8005ec2:	e242      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8005eca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	601a      	str	r2, [r3, #0]
	break;
 8005ed0:	e23b      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005ed8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	601a      	str	r2, [r3, #0]
	break;
 8005ede:	e234      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8005ee6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	601a      	str	r2, [r3, #0]
	break;
 8005eec:	e22d      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8005ef4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	601a      	str	r2, [r3, #0]
	break;
 8005efa:	e226      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8005f02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	601a      	str	r2, [r3, #0]
	break;
 8005f08:	e21f      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8005f10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	601a      	str	r2, [r3, #0]
	break;
 8005f16:	e218      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8005f1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	601a      	str	r2, [r3, #0]
	break;
 8005f24:	e211      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8005f2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	601a      	str	r2, [r3, #0]
	break;
 8005f32:	e20a      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005f3a:	3318      	adds	r3, #24
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	601a      	str	r2, [r3, #0]
	break;
 8005f44:	e201      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005f4c:	331c      	adds	r3, #28
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	601a      	str	r2, [r3, #0]
	break;
 8005f56:	e1f8      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	601a      	str	r2, [r3, #0]
	break;
 8005f66:	e1f0      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005f6e:	3304      	adds	r3, #4
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	601a      	str	r2, [r3, #0]
	break;
 8005f78:	e1e7      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005f80:	3308      	adds	r3, #8
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	601a      	str	r2, [r3, #0]
	break;
 8005f8a:	e1de      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005f92:	330c      	adds	r3, #12
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	601a      	str	r2, [r3, #0]
	break;
 8005f9c:	e1d5      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005fa4:	3310      	adds	r3, #16
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	601a      	str	r2, [r3, #0]
	break;
 8005fae:	e1cc      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005fb6:	3314      	adds	r3, #20
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	601a      	str	r2, [r3, #0]
	break;
 8005fc0:	e1c3      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005fc8:	331c      	adds	r3, #28
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	601a      	str	r2, [r3, #0]
	break;
 8005fd2:	e1ba      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005fda:	331e      	adds	r3, #30
 8005fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fe0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	601a      	str	r2, [r3, #0]
	break;
 8005fe6:	e1b0      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8005fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ff2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	601a      	str	r2, [r3, #0]
	break;
 8005ff8:	e1a7      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006000:	3302      	adds	r3, #2
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	601a      	str	r2, [r3, #0]
	break;
 800600a:	e19e      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006012:	3316      	adds	r3, #22
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	601a      	str	r2, [r3, #0]
	break;
 800601c:	e195      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006024:	3318      	adds	r3, #24
 8006026:	681b      	ldr	r3, [r3, #0]
		*ptuning_parm_value = (int32_t)(
 8006028:	461a      	mov	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	601a      	str	r2, [r3, #0]
	break;
 800602e:	e18c      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006036:	3304      	adds	r3, #4
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	601a      	str	r2, [r3, #0]
	break;
 8006040:	e183      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006048:	3308      	adds	r3, #8
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	601a      	str	r2, [r3, #0]
	break;
 8006052:	e17a      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800605a:	330c      	adds	r3, #12
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	601a      	str	r2, [r3, #0]
	break;
 8006064:	e171      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800606c:	3310      	adds	r3, #16
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	601a      	str	r2, [r3, #0]
	break;
 8006076:	e168      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800607e:	3310      	adds	r3, #16
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	601a      	str	r2, [r3, #0]
	break;
 8006088:	e15f      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006090:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	601a      	str	r2, [r3, #0]
	break;
 8006096:	e158      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800609e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	601a      	str	r2, [r3, #0]
	break;
 80060a4:	e151      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 80060ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	601a      	str	r2, [r3, #0]
	break;
 80060b2:	e14a      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80060ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	601a      	str	r2, [r3, #0]
	break;
 80060c0:	e143      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80060c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	601a      	str	r2, [r3, #0]
	break;
 80060ce:	e13c      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80060d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	601a      	str	r2, [r3, #0]
	break;
 80060dc:	e135      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80060e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	601a      	str	r2, [r3, #0]
	break;
 80060ea:	e12e      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80060f2:	3314      	adds	r3, #20
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	601a      	str	r2, [r3, #0]
	break;
 80060fc:	e125      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 8006104:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	601a      	str	r2, [r3, #0]
	break;
 800610a:	e11e      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	; 0x186
 8006112:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	601a      	str	r2, [r3, #0]
	break;
 8006118:	e117      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	; 0x188
 8006120:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	601a      	str	r2, [r3, #0]
	break;
 8006126:	e110      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	; 0x18a
 800612e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	601a      	str	r2, [r3, #0]
	break;
 8006134:	e109      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	; 0x18c
 800613c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	601a      	str	r2, [r3, #0]
	break;
 8006142:	e102      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	; 0x18e
 800614a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	601a      	str	r2, [r3, #0]
	break;
 8006150:	e0fb      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	; 0x190
 8006158:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	601a      	str	r2, [r3, #0]
	break;
 800615e:	e0f4      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 8006166:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	601a      	str	r2, [r3, #0]
	break;
 800616c:	e0ed      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	; 0x194
 8006174:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	601a      	str	r2, [r3, #0]
	break;
 800617a:	e0e6      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	f9b3 3196 	ldrsh.w	r3, [r3, #406]	; 0x196
 8006182:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	601a      	str	r2, [r3, #0]
	break;
 8006188:	e0df      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	f9b3 3198 	ldrsh.w	r3, [r3, #408]	; 0x198
 8006190:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	601a      	str	r2, [r3, #0]
	break;
 8006196:	e0d8      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	; 0x19a
 800619e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	601a      	str	r2, [r3, #0]
	break;
 80061a4:	e0d1      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	; 0x19c
 80061ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	601a      	str	r2, [r3, #0]
	break;
 80061b2:	e0ca      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	; 0x19e
 80061ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	601a      	str	r2, [r3, #0]
	break;
 80061c0:	e0c3      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	; 0x1a0
 80061c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	601a      	str	r2, [r3, #0]
	break;
 80061ce:	e0bc      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	f9b3 31a2 	ldrsh.w	r3, [r3, #418]	; 0x1a2
 80061d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	601a      	str	r2, [r3, #0]
	break;
 80061dc:	e0b5      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	f9b3 31a4 	ldrsh.w	r3, [r3, #420]	; 0x1a4
 80061e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	601a      	str	r2, [r3, #0]
	break;
 80061ea:	e0ae      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	f9b3 31a6 	ldrsh.w	r3, [r3, #422]	; 0x1a6
 80061f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	601a      	str	r2, [r3, #0]
	break;
 80061f8:	e0a7      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	; 0x1a8
 8006200:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	601a      	str	r2, [r3, #0]
	break;
 8006206:	e0a0      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	f9b3 31aa 	ldrsh.w	r3, [r3, #426]	; 0x1aa
 800620e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	601a      	str	r2, [r3, #0]
	break;
 8006214:	e099      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	; 0x1ac
 800621c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	601a      	str	r2, [r3, #0]
	break;
 8006222:	e092      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	; 0x1ae
 800622a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	601a      	str	r2, [r3, #0]
	break;
 8006230:	e08b      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	f9b3 31b0 	ldrsh.w	r3, [r3, #432]	; 0x1b0
 8006238:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	601a      	str	r2, [r3, #0]
	break;
 800623e:	e084      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	; 0x1b2
 8006246:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	601a      	str	r2, [r3, #0]
	break;
 800624c:	e07d      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	f9b3 31b4 	ldrsh.w	r3, [r3, #436]	; 0x1b4
 8006254:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	601a      	str	r2, [r3, #0]
	break;
 800625a:	e076      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	f9b3 31b6 	ldrsh.w	r3, [r3, #438]	; 0x1b6
 8006262:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	601a      	str	r2, [r3, #0]
	break;
 8006268:	e06f      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	f9b3 31b8 	ldrsh.w	r3, [r3, #440]	; 0x1b8
 8006270:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	601a      	str	r2, [r3, #0]
	break;
 8006276:	e068      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	; 0x1ba
 800627e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	601a      	str	r2, [r3, #0]
	break;
 8006284:	e061      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	f9b3 31bc 	ldrsh.w	r3, [r3, #444]	; 0x1bc
 800628c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	601a      	str	r2, [r3, #0]
	break;
 8006292:	e05a      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 800629a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	601a      	str	r2, [r3, #0]
	break;
 80062a0:	e053      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 80062a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	601a      	str	r2, [r3, #0]
	break;
 80062ae:	e04c      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 80062b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	601a      	str	r2, [r3, #0]
	break;
 80062bc:	e045      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 80062c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	601a      	str	r2, [r3, #0]
	break;
 80062ca:	e03e      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 80062d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	601a      	str	r2, [r3, #0]
	break;
 80062d8:	e037      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 80062e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	601a      	str	r2, [r3, #0]
	break;
 80062e6:	e030      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 80062ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	601a      	str	r2, [r3, #0]
	break;
 80062f4:	e029      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 80062fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	601a      	str	r2, [r3, #0]
	break;
 8006302:	e022      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 800630a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	601a      	str	r2, [r3, #0]
	break;
 8006310:	e01b      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 8006318:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	601a      	str	r2, [r3, #0]
	break;
 800631e:	e014      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 8006326:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	601a      	str	r2, [r3, #0]
	break;
 800632c:	e00d      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 8006334:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	601a      	str	r2, [r3, #0]
	break;
 800633a:	e006      	b.n	800634a <VL53LX_get_tuning_parm+0xdd6>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006342:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8006344:	23fc      	movs	r3, #252	; 0xfc
 8006346:	77fb      	strb	r3, [r7, #31]
	break;
 8006348:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800634a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3724      	adds	r7, #36	; 0x24
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop

0800635c <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006364:	2300      	movs	r3, #0
 8006366:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3318      	adds	r3, #24
 800636c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006374:	3314      	adds	r3, #20
 8006376:	2201      	movs	r2, #1
 8006378:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800637a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 800638a:	b480      	push	{r7}
 800638c:	b085      	sub	sp, #20
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006392:	2300      	movs	r3, #0
 8006394:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	3318      	adds	r3, #24
 800639a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80063a2:	3314      	adds	r3, #20
 80063a4:	2200      	movs	r2, #0
 80063a6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80063a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80063c0:	2300      	movs	r3, #0
 80063c2:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3318      	adds	r3, #24
 80063c8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80063d0:	3315      	adds	r3, #21
 80063d2:	2200      	movs	r2, #0
 80063d4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80063d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	3318      	adds	r3, #24
 80063f6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80063fe:	3316      	adds	r3, #22
 8006400:	2201      	movs	r2, #1
 8006402:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006404:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800641c:	2300      	movs	r3, #0
 800641e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3318      	adds	r3, #24
 8006424:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800642c:	3316      	adds	r3, #22
 800642e:	2200      	movs	r2, #0
 8006430:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006432:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8006442:	b480      	push	{r7}
 8006444:	b085      	sub	sp, #20
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800644a:	2300      	movs	r3, #0
 800644c:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	3318      	adds	r3, #24
 8006452:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800645a:	3315      	adds	r3, #21
 800645c:	2201      	movs	r2, #1
 800645e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006460:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006478:	2300      	movs	r3, #0
 800647a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2208      	movs	r2, #8
 8006480:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	220b      	movs	r2, #11
 8006486:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800648e:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006496:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800649e:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80064a6:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80064a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2212      	movs	r2, #18
 80064ce:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	220f      	movs	r2, #15
 80064d4:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2202      	movs	r2, #2
 80064da:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80064e2:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	220c      	movs	r2, #12
 80064e8:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80064ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006504:	2300      	movs	r3, #0
 8006506:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	895b      	ldrh	r3, [r3, #10]
 800650c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	895b      	ldrh	r3, [r3, #10]
 800652a:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	2200      	movs	r2, #0
 8006548:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2200      	movs	r2, #0
 800654e:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2240      	movs	r2, #64	; 0x40
 8006554:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10d      	bne.n	800657a <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d108      	bne.n	800657a <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2200      	movs	r2, #0
 8006576:	741a      	strb	r2, [r3, #16]
 8006578:	e002      	b.n	8006580 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2201      	movs	r2, #1
 800657e:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 8006580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d114      	bne.n	80065b2 <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 800658c:	2b01      	cmp	r3, #1
 800658e:	d110      	bne.n	80065b2 <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	6818      	ldr	r0, [r3, #0]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	7d9b      	ldrb	r3, [r3, #22]
 80065a4:	f001 ffa0 	bl	80084e8 <VL53LX_calc_range_ignore_threshold>
 80065a8:	4603      	mov	r3, r0
 80065aa:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	831a      	strh	r2, [r3, #24]
 80065b0:	e002      	b.n	80065b8 <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2200      	movs	r2, #0
 80065b6:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	f64f 72ce 	movw	r2, #65486	; 0xffce
 80065be:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2232      	movs	r2, #50	; 0x32
 80065c4:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80065cc:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	228c      	movs	r2, #140	; 0x8c
 80065d2:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80065d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80065e8:	2300      	movs	r3, #0
 80065ea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80065f2:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80065fa:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2207      	movs	r2, #7
 8006600:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006608:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f242 7210 	movw	r2, #10000	; 0x2710
 8006610:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f64f 72ba 	movw	r2, #65466	; 0xffba
 8006618:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2246      	movs	r2, #70	; 0x46
 800661e:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006626:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	228c      	movs	r2, #140	; 0x8c
 800662c:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800662e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 800663e:	b480      	push	{r7}
 8006640:	b085      	sub	sp, #20
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006646:	2300      	movs	r3, #0
 8006648:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006650:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006658:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006660:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006668:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2208      	movs	r2, #8
 800666e:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2228      	movs	r2, #40	; 0x28
 8006674:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2209      	movs	r2, #9
 800667a:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800667c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006694:	2300      	movs	r3, #0
 8006696:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800669e:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f643 2298 	movw	r2, #15000	; 0x3a98
 80066a6:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066ae:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80066b6:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2210      	movs	r2, #16
 80066bc:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2208      	movs	r2, #8
 80066c2:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80066c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	4603      	mov	r3, r0
 80066dc:	6039      	str	r1, [r7, #0]
 80066de:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80066e0:	2300      	movs	r3, #0
 80066e2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2204      	movs	r2, #4
 80066e8:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2201      	movs	r2, #1
 80066ee:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2201      	movs	r2, #1
 80066f4:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2202      	movs	r2, #2
 80066fa:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2201      	movs	r2, #1
 8006700:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2250      	movs	r2, #80	; 0x50
 8006706:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	2264      	movs	r2, #100	; 0x64
 800670c:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	f241 023d 	movw	r2, #4157	; 0x103d
 8006714:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2210      	movs	r2, #16
 800671a:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2232      	movs	r2, #50	; 0x32
 8006720:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2264      	movs	r2, #100	; 0x64
 8006726:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2201      	movs	r2, #1
 800672c:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	22b4      	movs	r2, #180	; 0xb4
 8006732:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2200      	movs	r2, #0
 8006738:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8006740:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2208      	movs	r2, #8
 8006746:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2288      	movs	r2, #136	; 0x88
 800674e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2208      	movs	r2, #8
 8006756:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006768:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2200      	movs	r2, #0
 800676e:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	79fa      	ldrb	r2, [r7, #7]
 8006774:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	f64f 72ce 	movw	r2, #65486	; 0xffce
 800677e:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2232      	movs	r2, #50	; 0x32
 8006784:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800678c:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	228c      	movs	r2, #140	; 0x8c
 8006792:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2250      	movs	r2, #80	; 0x50
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2232      	movs	r2, #50	; 0x32
 80067a0:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 80067a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	221e      	movs	r2, #30
 80067c2:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	220e      	movs	r2, #14
 80067c8:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f642 7294 	movw	r2, #12180	; 0x2f94
 80067d0:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	220e      	movs	r2, #14
 80067d6:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	220a      	movs	r2, #10
 80067dc:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2206      	movs	r2, #6
 80067e2:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	220e      	movs	r2, #14
 80067e8:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	220a      	movs	r2, #10
 80067ee:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2206      	movs	r2, #6
 80067f4:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2209      	movs	r2, #9
 80067fa:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2205      	movs	r2, #5
 8006800:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2203      	movs	r2, #3
 8006806:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2206      	movs	r2, #6
 800680c:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2206      	movs	r2, #6
 8006812:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2206      	movs	r2, #6
 8006818:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2202      	movs	r2, #2
 800681e:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2221      	movs	r2, #33	; 0x21
 8006824:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	223c      	movs	r2, #60	; 0x3c
 8006836:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	223c      	movs	r2, #60	; 0x3c
 800683c:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	223c      	movs	r2, #60	; 0x3c
 8006842:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2280      	movs	r2, #128	; 0x80
 8006848:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2280      	movs	r2, #128	; 0x80
 800684e:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2280      	movs	r2, #128	; 0x80
 8006854:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2208      	movs	r2, #8
 800685a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2210      	movs	r2, #16
 8006862:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2202      	movs	r2, #2
 8006872:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2202      	movs	r2, #2
 8006882:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800689c:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f640 22be 	movw	r2, #2750	; 0xabe
 80068a6:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	22fa      	movs	r2, #250	; 0xfa
 80068ae:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068b8:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80068c2:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80068cc:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80068d6:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80068e0:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f64f 7238 	movw	r2, #65336	; 0xff38
 80068ea:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	22c8      	movs	r2, #200	; 0xc8
 80068f2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80068fc:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800690e:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f640 32ea 	movw	r2, #3050	; 0xbea
 8006918:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006922:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f640 32ea 	movw	r2, #3050	; 0xbea
 800692c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006936:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f641 0238 	movw	r2, #6200	; 0x1838
 8006940:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	22fa      	movs	r2, #250	; 0xfa
 8006958:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006962:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f640 42b2 	movw	r2, #3250	; 0xcb2
 800696c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f241 1294 	movw	r2, #4500	; 0x1194
 8006976:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f64f 7238 	movw	r2, #65336	; 0xff38
 8006980:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	22c8      	movs	r2, #200	; 0xc8
 8006988:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f640 720a 	movw	r2, #3850	; 0xf0a
 80069b2:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f241 12f8 	movw	r2, #4600	; 0x11f8
 80069bc:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f640 720a 	movw	r2, #3850	; 0xf0a
 80069c6:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006a08:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006a10:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006a18:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006a20:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a28:	639a      	str	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006a30:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f242 3228 	movw	r2, #9000	; 0x2328
 8006a38:	641a      	str	r2, [r3, #64]	; 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f241 7270 	movw	r2, #6000	; 0x1770
 8006a40:	645a      	str	r2, [r3, #68]	; 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006a48:	649a      	str	r2, [r3, #72]	; 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f242 3228 	movw	r2, #9000	; 0x2328
 8006a50:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f241 7270 	movw	r2, #6000	; 0x1770
 8006a58:	651a      	str	r2, [r3, #80]	; 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a60:	655a      	str	r2, [r3, #84]	; 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006a68:	659a      	str	r2, [r3, #88]	; 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006a70:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006a78:	661a      	str	r2, [r3, #96]	; 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006a80:	665a      	str	r2, [r3, #100]	; 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f24f 6218 	movw	r2, #63000	; 0xf618
 8006a88:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006a90:	671a      	str	r2, [r3, #112]	; 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006a98:	675a      	str	r2, [r3, #116]	; 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006aa0:	679a      	str	r2, [r3, #120]	; 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	669a      	str	r2, [r3, #104]	; 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006aae:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006ab6:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2206      	movs	r2, #6
 8006ad6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b085      	sub	sp, #20
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006af2:	2300      	movs	r3, #0
 8006af4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006afc:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2238      	movs	r2, #56	; 0x38
 8006b02:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2220      	movs	r2, #32
 8006b08:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2270      	movs	r2, #112	; 0x70
 8006b0e:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2210      	movs	r2, #16
 8006b14:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2264      	movs	r2, #100	; 0x64
 8006b1a:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b22:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	220f      	movs	r2, #15
 8006b28:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2234      	movs	r2, #52	; 0x34
 8006b2e:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	22c8      	movs	r2, #200	; 0xc8
 8006b34:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006b3c:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006b44:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b087      	sub	sp, #28
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	60f8      	str	r0, [r7, #12]
 8006b5e:	60b9      	str	r1, [r7, #8]
 8006b60:	607a      	str	r2, [r7, #4]
 8006b62:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006b64:	2300      	movs	r3, #0
 8006b66:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006b6e:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2211      	movs	r2, #17
 8006bb0:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2208      	movs	r2, #8
 8006bc8:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8006bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bdc:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	22ff      	movs	r2, #255	; 0xff
 8006c0a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c16:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	220b      	movs	r2, #11
 8006c44:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2202      	movs	r2, #2
 8006c52:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	220d      	movs	r2, #13
 8006c58:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8006c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5c:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8006c80:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2238      	movs	r2, #56	; 0x38
 8006c8c:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	22ff      	movs	r2, #255	; 0xff
 8006c92:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	221a      	movs	r2, #26
 8006ca4:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	22cc      	movs	r2, #204	; 0xcc
 8006cbc:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	220b      	movs	r2, #11
 8006cc2:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	22f5      	movs	r2, #245	; 0xf5
 8006cce:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2209      	movs	r2, #9
 8006cd4:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2208      	movs	r2, #8
 8006cea:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2278      	movs	r2, #120	; 0x78
 8006cf0:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2207      	movs	r2, #7
 8006d02:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2221      	movs	r2, #33	; 0x21
 8006d08:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2243      	movs	r2, #67	; 0x43
 8006d0e:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2210      	movs	r2, #16
 8006d14:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2232      	movs	r2, #50	; 0x32
 8006d1a:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2254      	movs	r2, #84	; 0x54
 8006d20:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2207      	movs	r2, #7
 8006d26:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2221      	movs	r2, #33	; 0x21
 8006d2c:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2243      	movs	r2, #67	; 0x43
 8006d32:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2210      	movs	r2, #16
 8006d38:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2243      	movs	r2, #67	; 0x43
 8006d44:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	2205      	movs	r2, #5
 8006d4a:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2207      	movs	r2, #7
 8006d56:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2221      	movs	r2, #33	; 0x21
 8006d5c:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2243      	movs	r2, #67	; 0x43
 8006d62:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2210      	movs	r2, #16
 8006d68:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2232      	movs	r2, #50	; 0x32
 8006d6e:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2254      	movs	r2, #84	; 0x54
 8006d74:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d7c:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d84:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8006d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8e:	2205      	movs	r2, #5
 8006d90:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	2200      	movs	r2, #0
 8006d96:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8006d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9a:	220f      	movs	r2, #15
 8006d9c:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	220f      	movs	r2, #15
 8006da2:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	2208      	movs	r2, #8
 8006da8:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8006daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dac:	2208      	movs	r2, #8
 8006dae:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	2201      	movs	r2, #1
 8006db4:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	2200      	movs	r2, #0
 8006dba:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	220b      	movs	r2, #11
 8006dd6:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	2209      	movs	r2, #9
 8006ddc:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8006de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de8:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	2201      	movs	r2, #1
 8006df2:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8006df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	22c7      	movs	r2, #199	; 0xc7
 8006e0c:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	22ff      	movs	r2, #255	; 0xff
 8006e12:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	22db      	movs	r2, #219	; 0xdb
 8006e18:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	2200      	movs	r2, #0
 8006e24:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	2201      	movs	r2, #1
 8006e2a:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	2201      	movs	r2, #1
 8006e30:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	2221      	movs	r2, #33	; 0x21
 8006e36:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8006e38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b090      	sub	sp, #64	; 0x40
 8006e4c:	af0a      	add	r7, sp, #40	; 0x28
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006e56:	2300      	movs	r3, #0
 8006e58:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	9303      	str	r3, [sp, #12]
 8006e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e60:	9302      	str	r3, [sp, #8]
 8006e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e64:	9301      	str	r3, [sp, #4]
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	68b8      	ldr	r0, [r7, #8]
 8006e72:	f7ff fe70 	bl	8006b56 <VL53LX_preset_mode_standard_ranging>
 8006e76:	4603      	mov	r3, r0
 8006e78:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8006e7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d171      	bne.n	8006f66 <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006e88:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	9308      	str	r3, [sp, #32]
 8006e8e:	2305      	movs	r3, #5
 8006e90:	9307      	str	r3, [sp, #28]
 8006e92:	2304      	movs	r3, #4
 8006e94:	9306      	str	r3, [sp, #24]
 8006e96:	2303      	movs	r3, #3
 8006e98:	9305      	str	r3, [sp, #20]
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	9304      	str	r3, [sp, #16]
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	9303      	str	r3, [sp, #12]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	9302      	str	r3, [sp, #8]
 8006ea6:	2304      	movs	r3, #4
 8006ea8:	9301      	str	r3, [sp, #4]
 8006eaa:	2303      	movs	r3, #3
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	2302      	movs	r3, #2
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	2007      	movs	r0, #7
 8006eb6:	f000 ffab 	bl	8007e10 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8006eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebc:	3302      	adds	r3, #2
 8006ebe:	9308      	str	r3, [sp, #32]
 8006ec0:	2305      	movs	r3, #5
 8006ec2:	9307      	str	r3, [sp, #28]
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	9306      	str	r3, [sp, #24]
 8006ec8:	2303      	movs	r3, #3
 8006eca:	9305      	str	r3, [sp, #20]
 8006ecc:	2302      	movs	r3, #2
 8006ece:	9304      	str	r3, [sp, #16]
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	9303      	str	r3, [sp, #12]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	9302      	str	r3, [sp, #8]
 8006ed8:	2304      	movs	r3, #4
 8006eda:	9301      	str	r3, [sp, #4]
 8006edc:	2303      	movs	r3, #3
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	2007      	movs	r0, #7
 8006ee8:	f001 f822 	bl	8007f30 <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	2209      	movs	r2, #9
 8006ef0:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	220b      	movs	r2, #11
 8006ef6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	2209      	movs	r2, #9
 8006efc:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	220b      	movs	r2, #11
 8006f02:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	2200      	movs	r2, #0
 8006f08:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	2200      	movs	r2, #0
 8006f14:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	221a      	movs	r2, #26
 8006f1a:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	2228      	movs	r2, #40	; 0x28
 8006f26:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	2221      	movs	r2, #33	; 0x21
 8006f32:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	22f5      	movs	r2, #245	; 0xf5
 8006f38:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2208      	movs	r2, #8
 8006f3e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2288      	movs	r2, #136	; 0x88
 8006f46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	68b9      	ldr	r1, [r7, #8]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f9e6 	bl	8007326 <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	229b      	movs	r2, #155	; 0x9b
 8006f5e:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	2226      	movs	r2, #38	; 0x26
 8006f64:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8006f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b090      	sub	sp, #64	; 0x40
 8006f76:	af0a      	add	r7, sp, #40	; 0x28
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006f80:	2300      	movs	r3, #0
 8006f82:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	9304      	str	r3, [sp, #16]
 8006f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8a:	9303      	str	r3, [sp, #12]
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	9302      	str	r3, [sp, #8]
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	9301      	str	r3, [sp, #4]
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	68b9      	ldr	r1, [r7, #8]
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f7ff ff52 	bl	8006e48 <VL53LX_preset_mode_histogram_ranging>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8006fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d178      	bne.n	80070a2 <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	9308      	str	r3, [sp, #32]
 8006fb4:	2305      	movs	r3, #5
 8006fb6:	9307      	str	r3, [sp, #28]
 8006fb8:	2304      	movs	r3, #4
 8006fba:	9306      	str	r3, [sp, #24]
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	9305      	str	r3, [sp, #20]
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	9304      	str	r3, [sp, #16]
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	9303      	str	r3, [sp, #12]
 8006fc8:	2300      	movs	r3, #0
 8006fca:	9302      	str	r3, [sp, #8]
 8006fcc:	2304      	movs	r3, #4
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	2100      	movs	r1, #0
 8006fda:	2007      	movs	r0, #7
 8006fdc:	f000 ff18 	bl	8007e10 <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	3302      	adds	r3, #2
 8006fe4:	9308      	str	r3, [sp, #32]
 8006fe6:	2305      	movs	r3, #5
 8006fe8:	9307      	str	r3, [sp, #28]
 8006fea:	2304      	movs	r3, #4
 8006fec:	9306      	str	r3, [sp, #24]
 8006fee:	2303      	movs	r3, #3
 8006ff0:	9305      	str	r3, [sp, #20]
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	9304      	str	r3, [sp, #16]
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	9303      	str	r3, [sp, #12]
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	9302      	str	r3, [sp, #8]
 8006ffe:	2304      	movs	r3, #4
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	2303      	movs	r3, #3
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	2302      	movs	r3, #2
 8007008:	2201      	movs	r2, #1
 800700a:	2100      	movs	r1, #0
 800700c:	2007      	movs	r0, #7
 800700e:	f000 ff8f 	bl	8007f30 <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	68b9      	ldr	r1, [r7, #8]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f982 	bl	8007326 <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	2209      	movs	r2, #9
 8007026:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	220b      	movs	r2, #11
 800702c:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	2200      	movs	r2, #0
 8007032:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	2221      	movs	r2, #33	; 0x21
 8007038:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	2200      	movs	r2, #0
 800703e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	221b      	movs	r2, #27
 8007044:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	2200      	movs	r2, #0
 800704a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	2229      	movs	r2, #41	; 0x29
 8007050:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	2200      	movs	r2, #0
 8007056:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	2222      	movs	r2, #34	; 0x22
 800705c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2209      	movs	r2, #9
 8007062:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	22f5      	movs	r2, #245	; 0xf5
 8007068:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	2209      	movs	r2, #9
 800706e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	220b      	movs	r2, #11
 8007074:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 8007076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007078:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 800707e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007080:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2208      	movs	r2, #8
 800708a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2288      	movs	r2, #136	; 0x88
 8007092:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	229b      	movs	r2, #155	; 0x9b
 800709a:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	2226      	movs	r2, #38	; 0x26
 80070a0:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80070a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3718      	adds	r7, #24
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b090      	sub	sp, #64	; 0x40
 80070b2:	af0a      	add	r7, sp, #40	; 0x28
 80070b4:	60f8      	str	r0, [r7, #12]
 80070b6:	60b9      	str	r1, [r7, #8]
 80070b8:	607a      	str	r2, [r7, #4]
 80070ba:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80070bc:	2300      	movs	r3, #0
 80070be:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	9304      	str	r3, [sp, #16]
 80070c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c6:	9303      	str	r3, [sp, #12]
 80070c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ca:	9302      	str	r3, [sp, #8]
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	9301      	str	r3, [sp, #4]
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	68b9      	ldr	r1, [r7, #8]
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f7ff feb4 	bl	8006e48 <VL53LX_preset_mode_histogram_ranging>
 80070e0:	4603      	mov	r3, r0
 80070e2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80070e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d178      	bne.n	80071de <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	9308      	str	r3, [sp, #32]
 80070f0:	2303      	movs	r3, #3
 80070f2:	9307      	str	r3, [sp, #28]
 80070f4:	2302      	movs	r3, #2
 80070f6:	9306      	str	r3, [sp, #24]
 80070f8:	2301      	movs	r3, #1
 80070fa:	9305      	str	r3, [sp, #20]
 80070fc:	2302      	movs	r3, #2
 80070fe:	9304      	str	r3, [sp, #16]
 8007100:	2301      	movs	r3, #1
 8007102:	9303      	str	r3, [sp, #12]
 8007104:	2300      	movs	r3, #0
 8007106:	9302      	str	r3, [sp, #8]
 8007108:	2302      	movs	r3, #2
 800710a:	9301      	str	r3, [sp, #4]
 800710c:	2302      	movs	r3, #2
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	2301      	movs	r3, #1
 8007112:	2201      	movs	r2, #1
 8007114:	2100      	movs	r1, #0
 8007116:	2007      	movs	r0, #7
 8007118:	f000 fe7a 	bl	8007e10 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	3302      	adds	r3, #2
 8007120:	9308      	str	r3, [sp, #32]
 8007122:	2303      	movs	r3, #3
 8007124:	9307      	str	r3, [sp, #28]
 8007126:	2302      	movs	r3, #2
 8007128:	9306      	str	r3, [sp, #24]
 800712a:	2301      	movs	r3, #1
 800712c:	9305      	str	r3, [sp, #20]
 800712e:	2302      	movs	r3, #2
 8007130:	9304      	str	r3, [sp, #16]
 8007132:	2301      	movs	r3, #1
 8007134:	9303      	str	r3, [sp, #12]
 8007136:	2300      	movs	r3, #0
 8007138:	9302      	str	r3, [sp, #8]
 800713a:	2302      	movs	r3, #2
 800713c:	9301      	str	r3, [sp, #4]
 800713e:	2302      	movs	r3, #2
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	2301      	movs	r3, #1
 8007144:	2201      	movs	r2, #1
 8007146:	2100      	movs	r1, #0
 8007148:	2007      	movs	r0, #7
 800714a:	f000 fef1 	bl	8007f30 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	68b9      	ldr	r1, [r7, #8]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f8e4 	bl	8007326 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	2205      	movs	r2, #5
 8007162:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	2207      	movs	r2, #7
 8007168:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	2236      	movs	r2, #54	; 0x36
 8007174:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	2200      	movs	r2, #0
 800717a:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	2228      	movs	r2, #40	; 0x28
 8007180:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	2200      	movs	r2, #0
 8007186:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	2244      	movs	r2, #68	; 0x44
 800718c:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	2200      	movs	r2, #0
 8007192:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	2233      	movs	r2, #51	; 0x33
 8007198:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2205      	movs	r2, #5
 800719e:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	22f5      	movs	r2, #245	; 0xf5
 80071a4:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	2205      	movs	r2, #5
 80071aa:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	2207      	movs	r2, #7
 80071b0:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b4:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 80071ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071bc:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2208      	movs	r2, #8
 80071c6:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2248      	movs	r2, #72	; 0x48
 80071ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	229b      	movs	r2, #155	; 0x9b
 80071d6:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80071d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071da:	2226      	movs	r2, #38	; 0x26
 80071dc:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80071de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b090      	sub	sp, #64	; 0x40
 80071ee:	af0a      	add	r7, sp, #40	; 0x28
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	607a      	str	r2, [r7, #4]
 80071f6:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80071f8:	2300      	movs	r3, #0
 80071fa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	9304      	str	r3, [sp, #16]
 8007200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007202:	9303      	str	r3, [sp, #12]
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	9302      	str	r3, [sp, #8]
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	9301      	str	r3, [sp, #4]
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	68b9      	ldr	r1, [r7, #8]
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7ff fe16 	bl	8006e48 <VL53LX_preset_mode_histogram_ranging>
 800721c:	4603      	mov	r3, r0
 800721e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007220:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d178      	bne.n	800731a <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	9308      	str	r3, [sp, #32]
 800722c:	2302      	movs	r3, #2
 800722e:	9307      	str	r3, [sp, #28]
 8007230:	2302      	movs	r3, #2
 8007232:	9306      	str	r3, [sp, #24]
 8007234:	2301      	movs	r3, #1
 8007236:	9305      	str	r3, [sp, #20]
 8007238:	2301      	movs	r3, #1
 800723a:	9304      	str	r3, [sp, #16]
 800723c:	2301      	movs	r3, #1
 800723e:	9303      	str	r3, [sp, #12]
 8007240:	2300      	movs	r3, #0
 8007242:	9302      	str	r3, [sp, #8]
 8007244:	2301      	movs	r3, #1
 8007246:	9301      	str	r3, [sp, #4]
 8007248:	2301      	movs	r3, #1
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	2301      	movs	r3, #1
 800724e:	2200      	movs	r2, #0
 8007250:	2107      	movs	r1, #7
 8007252:	2007      	movs	r0, #7
 8007254:	f000 fddc 	bl	8007e10 <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725a:	3302      	adds	r3, #2
 800725c:	9308      	str	r3, [sp, #32]
 800725e:	2302      	movs	r3, #2
 8007260:	9307      	str	r3, [sp, #28]
 8007262:	2302      	movs	r3, #2
 8007264:	9306      	str	r3, [sp, #24]
 8007266:	2301      	movs	r3, #1
 8007268:	9305      	str	r3, [sp, #20]
 800726a:	2301      	movs	r3, #1
 800726c:	9304      	str	r3, [sp, #16]
 800726e:	2301      	movs	r3, #1
 8007270:	9303      	str	r3, [sp, #12]
 8007272:	2300      	movs	r3, #0
 8007274:	9302      	str	r3, [sp, #8]
 8007276:	2301      	movs	r3, #1
 8007278:	9301      	str	r3, [sp, #4]
 800727a:	2301      	movs	r3, #1
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	2301      	movs	r3, #1
 8007280:	2200      	movs	r2, #0
 8007282:	2107      	movs	r1, #7
 8007284:	2007      	movs	r0, #7
 8007286:	f000 fe53 	bl	8007f30 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	68b9      	ldr	r1, [r7, #8]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f846 	bl	8007326 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	2203      	movs	r2, #3
 800729e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	2205      	movs	r2, #5
 80072a4:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	2200      	movs	r2, #0
 80072aa:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	2252      	movs	r2, #82	; 0x52
 80072b0:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	2200      	movs	r2, #0
 80072b6:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	2237      	movs	r2, #55	; 0x37
 80072bc:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	2200      	movs	r2, #0
 80072c2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	2266      	movs	r2, #102	; 0x66
 80072c8:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	2200      	movs	r2, #0
 80072ce:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	2244      	movs	r2, #68	; 0x44
 80072d4:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2203      	movs	r2, #3
 80072da:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	22f5      	movs	r2, #245	; 0xf5
 80072e0:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	2203      	movs	r2, #3
 80072e6:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	2205      	movs	r2, #5
 80072ec:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 80072ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f0:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 80072f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f4:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2208      	movs	r2, #8
 8007302:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2228      	movs	r2, #40	; 0x28
 800730a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	22bb      	movs	r2, #187	; 0xbb
 8007312:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007316:	2226      	movs	r2, #38	; 0x26
 8007318:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800731a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 8007326:	b480      	push	{r7}
 8007328:	b085      	sub	sp, #20
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]
 8007332:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	79db      	ldrb	r3, [r3, #7]
 8007368:	b29b      	uxth	r3, r3
				<< 8)
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	7a1b      	ldrb	r3, [r3, #8]
 8007372:	b29b      	uxth	r3, r3
 8007374:	4413      	add	r3, r2
 8007376:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	785b      	ldrb	r3, [r3, #1]
 80073b0:	b29b      	uxth	r3, r3
				<< 8)
 80073b2:	021b      	lsls	r3, r3, #8
 80073b4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	789b      	ldrb	r3, [r3, #2]
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	4413      	add	r3, r2
 80073be:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	78db      	ldrb	r3, [r3, #3]
 80073c8:	b29b      	uxth	r3, r3
				<< 8)
 80073ca:	021b      	lsls	r3, r3, #8
 80073cc:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	791b      	ldrb	r3, [r3, #4]
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	4413      	add	r3, r2
 80073d6:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 8007404:	bf00      	nop
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	79db      	ldrb	r3, [r3, #7]
 8007450:	b29b      	uxth	r3, r3
				<< 8)
 8007452:	021b      	lsls	r3, r3, #8
 8007454:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	7a1b      	ldrb	r3, [r3, #8]
 800745a:	b29b      	uxth	r3, r3
 800745c:	4413      	add	r3, r2
 800745e:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	b29b      	uxth	r3, r3
				<< 8)
 8007492:	021b      	lsls	r3, r3, #8
 8007494:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	789b      	ldrb	r3, [r3, #2]
 800749a:	b29b      	uxth	r3, r3
 800749c:	4413      	add	r3, r2
 800749e:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	78db      	ldrb	r3, [r3, #3]
 80074a8:	b29b      	uxth	r3, r3
				<< 8)
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	791b      	ldrb	r3, [r3, #4]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	4413      	add	r3, r2
 80074b6:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 80074cc:	bf00      	nop
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	3318      	adds	r3, #24
 80074e4:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007504:	bf00      	nop
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3318      	adds	r3, #24
 8007520:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	332c      	adds	r3, #44	; 0x2c
 8007526:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	78fa      	ldrb	r2, [r7, #3]
 800752c:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2200      	movs	r2, #0
 8007532:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2202      	movs	r2, #2
 8007538:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2200      	movs	r2, #0
 800753e:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2200      	movs	r2, #0
 8007544:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	78fa      	ldrb	r2, [r7, #3]
 800754a:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2200      	movs	r2, #0
 8007550:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2202      	movs	r2, #2
 8007556:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2200      	movs	r2, #0
 800755c:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2200      	movs	r2, #0
 8007562:	735a      	strb	r2, [r3, #13]

}
 8007564:	bf00      	nop
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 8007578:	2300      	movs	r3, #0
 800757a:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	3318      	adds	r3, #24
 8007580:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	332c      	adds	r3, #44	; 0x2c
 8007586:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 800758e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d115      	bne.n	80075c2 <VL53LX_update_ll_driver_rd_state+0x52>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2203      	movs	r2, #3
 800759a:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2202      	movs	r2, #2
 80075b2:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	735a      	strb	r2, [r3, #13]
 80075c0:	e0be      	b.n	8007740 <VL53LX_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	7a1b      	ldrb	r3, [r3, #8]
 80075c6:	2bff      	cmp	r3, #255	; 0xff
 80075c8:	d103      	bne.n	80075d2 <VL53LX_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2280      	movs	r2, #128	; 0x80
 80075ce:	721a      	strb	r2, [r3, #8]
 80075d0:	e005      	b.n	80075de <VL53LX_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	7a1b      	ldrb	r3, [r3, #8]
 80075d6:	3301      	adds	r3, #1
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	7a19      	ldrb	r1, [r3, #8]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f103 0209 	add.w	r2, r3, #9
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	330a      	adds	r3, #10
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f002 fcf6 	bl	8009fde <VL53LX_update_internal_stream_counters>
 80075f2:	4603      	mov	r3, r0
 80075f4:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	7adb      	ldrb	r3, [r3, #11]
 80075fa:	f083 0302 	eor.w	r3, r3, #2
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	79db      	ldrb	r3, [r3, #7]
 8007608:	3b03      	subs	r3, #3
 800760a:	2b05      	cmp	r3, #5
 800760c:	f200 8082 	bhi.w	8007714 <VL53LX_update_ll_driver_rd_state+0x1a4>
 8007610:	a201      	add	r2, pc, #4	; (adr r2, 8007618 <VL53LX_update_ll_driver_rd_state+0xa8>)
 8007612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007616:	bf00      	nop
 8007618:	08007631 	.word	0x08007631
 800761c:	08007715 	.word	0x08007715
 8007620:	08007715 	.word	0x08007715
 8007624:	08007683 	.word	0x08007683
 8007628:	080076b9 	.word	0x080076b9
 800762c:	080076e3 	.word	0x080076e3

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f893 335e 	ldrb.w	r3, [r3, #862]	; 0x35e
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	dd03      	ble.n	8007646 <VL53LX_update_ll_driver_rd_state+0xd6>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2206      	movs	r2, #6
 8007642:	71da      	strb	r2, [r3, #7]
 8007644:	e00d      	b.n	8007662 <VL53LX_update_ll_driver_rd_state+0xf2>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 8007650:	429a      	cmp	r2, r3
 8007652:	d303      	bcc.n	800765c <VL53LX_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2208      	movs	r2, #8
 8007658:	71da      	strb	r2, [r3, #7]
 800765a:	e002      	b.n	8007662 <VL53LX_update_ll_driver_rd_state+0xf2>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2207      	movs	r2, #7
 8007660:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	735a      	strb	r2, [r3, #13]

			break;
 8007680:	e05e      	b.n	8007740 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d303      	bcc.n	80076b0 <VL53LX_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2208      	movs	r2, #8
 80076ac:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 80076ae:	e047      	b.n	8007740 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2207      	movs	r2, #7
 80076b4:	71da      	strb	r2, [r3, #7]
			break;
 80076b6:	e043      	b.n	8007740 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	7b5b      	ldrb	r3, [r3, #13]
 80076bc:	3301      	adds	r3, #1
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d303      	bcc.n	80076da <VL53LX_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2208      	movs	r2, #8
 80076d6:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 80076d8:	e032      	b.n	8007740 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2207      	movs	r2, #7
 80076de:	71da      	strb	r2, [r3, #7]
			break;
 80076e0:	e02e      	b.n	8007740 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	7b1b      	ldrb	r3, [r3, #12]
 80076ec:	f083 0301 	eor.w	r3, r3, #1
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8007700:	429a      	cmp	r2, r3
 8007702:	d303      	bcc.n	800770c <VL53LX_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2208      	movs	r2, #8
 8007708:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800770a:	e019      	b.n	8007740 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2207      	movs	r2, #7
 8007710:	71da      	strb	r2, [r3, #7]
			break;
 8007712:	e015      	b.n	8007740 <VL53LX_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2203      	movs	r2, #3
 8007718:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2202      	movs	r2, #2
 8007730:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	735a      	strb	r2, [r3, #13]
			break;
 800773e:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 8007740:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 800774c:	b480      	push	{r7}
 800774e:	b08d      	sub	sp, #52	; 0x34
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8007754:	2300      	movs	r3, #0
 8007756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t  *pdev =
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	3318      	adds	r3, #24
 800775e:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8007768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776a:	332c      	adds	r3, #44	; 0x2c
 800776c:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 800776e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007770:	f203 3366 	addw	r3, r3, #870	; 0x366
 8007774:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 8007776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007778:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800777c:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8007784:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 8007786:	2300      	movs	r3, #0
 8007788:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800778e:	2300      	movs	r3, #0
 8007790:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 8007794:	2300      	movs	r3, #0
 8007796:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 8007798:	2300      	movs	r3, #0
 800779a:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800779c:	2300      	movs	r3, #0
 800779e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 80077a4:	f003 031f 	and.w	r3, r3, #31
 80077a8:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	78db      	ldrb	r3, [r3, #3]
 80077ae:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 80077b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b2:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80077b6:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	bf14      	ite	ne
 80077be:	2301      	movne	r3, #1
 80077c0:	2300      	moveq	r3, #0
 80077c2:	b2db      	uxtb	r3, r3
	histogram_mode =
 80077c4:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80077ca:	111b      	asrs	r3, r3, #4
 80077cc:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 80077d6:	7c7b      	ldrb	r3, [r7, #17]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d008      	beq.n	80077ee <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80077e2:	111b      	asrs	r3, r3, #4
 80077e4:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 80077e6:	f003 0302 	and.w	r3, r3, #2
 80077ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80077f4:	f003 0320 	and.w	r3, r3, #32
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d04e      	beq.n	800789a <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	79db      	ldrb	r3, [r3, #7]
 8007800:	2b06      	cmp	r3, #6
 8007802:	d109      	bne.n	8007818 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 8007804:	7c7b      	ldrb	r3, [r7, #17]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d14a      	bne.n	80078a0 <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 800780a:	7cfb      	ldrb	r3, [r7, #19]
 800780c:	2b12      	cmp	r3, #18
 800780e:	d047      	beq.n	80078a0 <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8007810:	23ef      	movs	r3, #239	; 0xef
 8007812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007816:	e043      	b.n	80078a0 <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	7a1b      	ldrb	r3, [r3, #8]
 800781c:	7cba      	ldrb	r2, [r7, #18]
 800781e:	429a      	cmp	r2, r3
 8007820:	d002      	beq.n	8007828 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 8007822:	23ee      	movs	r3, #238	; 0xee
 8007824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	7adb      	ldrb	r3, [r3, #11]
 800782c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007830:	429a      	cmp	r2, r3
 8007832:	d002      	beq.n	800783a <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8007834:	23ed      	movs	r3, #237	; 0xed
 8007836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	7b5b      	ldrb	r3, [r3, #13]
 800783e:	4619      	mov	r1, r3
		expected_stream_count =
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	460b      	mov	r3, r1
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	440b      	add	r3, r1
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	4413      	add	r3, r2
 800784c:	3302      	adds	r3, #2
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	7b5b      	ldrb	r3, [r3, #13]
 8007856:	4619      	mov	r1, r3
		expected_gph_id =
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	460b      	mov	r3, r1
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	005b      	lsls	r3, r3, #1
 8007862:	4413      	add	r3, r2
 8007864:	3303      	adds	r3, #3
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800786a:	7c3a      	ldrb	r2, [r7, #16]
 800786c:	7cbb      	ldrb	r3, [r7, #18]
 800786e:	429a      	cmp	r2, r3
 8007870:	d00a      	beq.n	8007888 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 8007872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007874:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007878:	2b00      	cmp	r3, #0
 800787a:	d102      	bne.n	8007882 <VL53LX_check_ll_driver_rd_state+0x136>
 800787c:	7cbb      	ldrb	r3, [r7, #18]
 800787e:	2bff      	cmp	r3, #255	; 0xff
 8007880:	d002      	beq.n	8007888 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 8007882:	23ec      	movs	r3, #236	; 0xec
 8007884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 8007888:	7bfa      	ldrb	r2, [r7, #15]
 800788a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800788e:	429a      	cmp	r2, r3
 8007890:	d005      	beq.n	800789e <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 8007892:	23eb      	movs	r3, #235	; 0xeb
 8007894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007898:	e002      	b.n	80078a0 <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 800789a:	bf00      	nop
 800789c:	e000      	b.n	80078a0 <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 800789e:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 80078a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3734      	adds	r7, #52	; 0x34
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 80078b8:	2300      	movs	r3, #0
 80078ba:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	3318      	adds	r3, #24
 80078c0:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80078c8:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	332c      	adds	r3, #44	; 0x2c
 80078ce:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80078d6:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80078de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d11b      	bne.n	800791e <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	2203      	movs	r2, #3
 80078ea:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	2200      	movs	r2, #0
 80078f0:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	2200      	movs	r2, #0
 80078f6:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	2200      	movs	r2, #0
 80078fc:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	2202      	movs	r2, #2
 8007902:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2200      	movs	r2, #0
 8007908:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	2200      	movs	r2, #0
 800790e:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8007910:	2300      	movs	r3, #0
 8007912:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8007918:	2300      	movs	r3, #0
 800791a:	773b      	strb	r3, [r7, #28]
 800791c:	e0b1      	b.n	8007a82 <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	791b      	ldrb	r3, [r3, #4]
 8007922:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	799b      	ldrb	r3, [r3, #6]
 8007928:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	785b      	ldrb	r3, [r3, #1]
 8007934:	2bff      	cmp	r3, #255	; 0xff
 8007936:	d103      	bne.n	8007940 <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	2280      	movs	r2, #128	; 0x80
 800793c:	705a      	strb	r2, [r3, #1]
 800793e:	e005      	b.n	800794c <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	785b      	ldrb	r3, [r3, #1]
 8007944:	3301      	adds	r3, #1
 8007946:	b2da      	uxtb	r2, r3
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	7859      	ldrb	r1, [r3, #1]
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	1c9a      	adds	r2, r3, #2
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	3303      	adds	r3, #3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f002 fb40 	bl	8009fde <VL53LX_update_internal_stream_counters>
 800795e:	4603      	mov	r3, r0
 8007960:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	791b      	ldrb	r3, [r3, #4]
 8007966:	f083 0302 	eor.w	r3, r3, #2
 800796a:	b2da      	uxtb	r2, r3
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b05      	cmp	r3, #5
 8007976:	d053      	beq.n	8007a20 <VL53LX_update_ll_driver_cfg_state+0x170>
 8007978:	2b05      	cmp	r3, #5
 800797a:	dc69      	bgt.n	8007a50 <VL53LX_update_ll_driver_cfg_state+0x1a0>
 800797c:	2b03      	cmp	r3, #3
 800797e:	d002      	beq.n	8007986 <VL53LX_update_ll_driver_cfg_state+0xd6>
 8007980:	2b04      	cmp	r3, #4
 8007982:	d02d      	beq.n	80079e0 <VL53LX_update_ll_driver_cfg_state+0x130>
 8007984:	e064      	b.n	8007a50 <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	2201      	movs	r2, #1
 800798a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8007996:	429a      	cmp	r2, r3
 8007998:	d909      	bls.n	80079ae <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	2200      	movs	r2, #0
 800799e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	795b      	ldrb	r3, [r3, #5]
 80079a4:	f083 0301 	eor.w	r3, r3, #1
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	2201      	movs	r2, #1
 80079b2:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d106      	bne.n	80079cc <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	2201      	movs	r2, #1
 80079c2:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	2200      	movs	r2, #0
 80079c8:	70da      	strb	r2, [r3, #3]
 80079ca:	e005      	b.n	80079d8 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	2200      	movs	r2, #0
 80079d0:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	2201      	movs	r2, #1
 80079d6:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	2204      	movs	r2, #4
 80079dc:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 80079de:	e050      	b.n	8007a82 <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	799b      	ldrb	r3, [r3, #6]
 80079e4:	3301      	adds	r3, #1
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d940      	bls.n	8007a7c <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	2200      	movs	r2, #0
 80079fe:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	795b      	ldrb	r3, [r3, #5]
 8007a04:	f083 0301 	eor.w	r3, r3, #1
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d031      	beq.n	8007a7c <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	2205      	movs	r2, #5
 8007a1c:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 8007a1e:	e02d      	b.n	8007a7c <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	799b      	ldrb	r3, [r3, #6]
 8007a24:	3301      	adds	r3, #1
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d922      	bls.n	8007a80 <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	795b      	ldrb	r3, [r3, #5]
 8007a44:	f083 0301 	eor.w	r3, r3, #1
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	715a      	strb	r2, [r3, #5]
			}
			break;
 8007a4e:	e017      	b.n	8007a80 <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	2203      	movs	r2, #3
 8007a54:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	2200      	movs	r2, #0
 8007a66:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2200      	movs	r2, #0
 8007a72:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	2200      	movs	r2, #0
 8007a78:	719a      	strb	r2, [r3, #6]
			break;
 8007a7a:	e002      	b.n	8007a82 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007a7c:	bf00      	nop
 8007a7e:	e000      	b.n	8007a82 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007a80:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d11d      	bne.n	8007ac8 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007a8c:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 8007a8e:	7f3b      	ldrb	r3, [r7, #28]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	b2d8      	uxtb	r0, r3
 8007a94:	68f9      	ldr	r1, [r7, #12]
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	440b      	add	r3, r1
 8007aa0:	3302      	adds	r3, #2
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	7b5b      	ldrb	r3, [r3, #13]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	7f7b      	ldrb	r3, [r7, #29]
 8007aae:	f083 0302 	eor.w	r3, r3, #2
 8007ab2:	b2d8      	uxtb	r0, r3
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	440b      	add	r3, r1
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	4413      	add	r3, r2
 8007ac0:	3303      	adds	r3, #3
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	701a      	strb	r2, [r3, #0]
 8007ac6:	e013      	b.n	8007af0 <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007ac8:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 8007aca:	68f9      	ldr	r1, [r7, #12]
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	005b      	lsls	r3, r3, #1
 8007ad4:	440b      	add	r3, r1
 8007ad6:	3302      	adds	r3, #2
 8007ad8:	7f3a      	ldrb	r2, [r7, #28]
 8007ada:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 8007adc:	7fba      	ldrb	r2, [r7, #30]
 8007ade:	68f9      	ldr	r1, [r7, #12]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	440b      	add	r3, r1
 8007aea:	3303      	adds	r3, #3
 8007aec:	7f7a      	ldrb	r2, [r7, #29]
 8007aee:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 8007af0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3720      	adds	r7, #32
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	7c1a      	ldrb	r2, [r3, #16]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	3301      	adds	r3, #1
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	7c52      	ldrb	r2, [r2, #17]
 8007b16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	3302      	adds	r3, #2
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	7c92      	ldrb	r2, [r2, #18]
 8007b20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	3303      	adds	r3, #3
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	7cd2      	ldrb	r2, [r2, #19]
 8007b2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	3304      	adds	r3, #4
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	7d12      	ldrb	r2, [r2, #20]
 8007b34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	3305      	adds	r3, #5
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	7d52      	ldrb	r2, [r2, #21]
 8007b3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	3306      	adds	r3, #6
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	7d92      	ldrb	r2, [r2, #22]
 8007b48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	3307      	adds	r3, #7
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	7dd2      	ldrb	r2, [r2, #23]
 8007b52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	3308      	adds	r3, #8
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	7e12      	ldrb	r2, [r2, #24]
 8007b5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	3309      	adds	r3, #9
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	7e52      	ldrb	r2, [r2, #25]
 8007b66:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	330a      	adds	r3, #10
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	7e92      	ldrb	r2, [r2, #26]
 8007b70:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	330b      	adds	r3, #11
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	7ed2      	ldrb	r2, [r2, #27]
 8007b7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	330c      	adds	r3, #12
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	7f12      	ldrb	r2, [r2, #28]
 8007b84:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	330d      	adds	r3, #13
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	7f52      	ldrb	r2, [r2, #29]
 8007b8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	330e      	adds	r3, #14
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	7f92      	ldrb	r2, [r2, #30]
 8007b98:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	330f      	adds	r3, #15
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	7fd2      	ldrb	r2, [r2, #31]
 8007ba2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	3310      	adds	r3, #16
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007bae:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	3311      	adds	r3, #17
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007bba:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	3312      	adds	r3, #18
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8007bc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	3313      	adds	r3, #19
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8007bd2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	3314      	adds	r3, #20
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007bde:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	3315      	adds	r3, #21
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007bea:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	3316      	adds	r3, #22
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8007bf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	3317      	adds	r3, #23
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8007c02:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	3318      	adds	r3, #24
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8007c0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	3319      	adds	r3, #25
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8007c1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	331a      	adds	r3, #26
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8007c26:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	331b      	adds	r3, #27
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8007c32:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	331c      	adds	r3, #28
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007c3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	331d      	adds	r3, #29
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007c4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	331e      	adds	r3, #30
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007c56:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	331f      	adds	r3, #31
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8007c62:	701a      	strb	r2, [r3, #0]
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	22ff      	movs	r2, #255	; 0xff
 8007c7c:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	22ff      	movs	r2, #255	; 0xff
 8007c82:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	22ff      	movs	r2, #255	; 0xff
 8007c88:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	22ff      	movs	r2, #255	; 0xff
 8007c8e:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c96:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c9e:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ca6:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cae:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cb6:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cbe:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cc6:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cce:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cd6:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cde:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ce6:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cee:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cf6:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cfe:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d06:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d0e:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d16:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d1e:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d26:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	22ff      	movs	r2, #255	; 0xff
 8007d2c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	4603      	mov	r3, r0
 8007d44:	6039      	str	r1, [r7, #0]
 8007d46:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2205      	movs	r2, #5
 8007d50:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	79fa      	ldrb	r2, [r7, #7]
 8007d56:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8007d58:	2300      	movs	r3, #0
 8007d5a:	73fb      	strb	r3, [r7, #15]
 8007d5c:	e017      	b.n	8007d8e <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 8007d5e:	7bfa      	ldrb	r2, [r7, #15]
 8007d60:	4613      	mov	r3, r2
 8007d62:	011b      	lsls	r3, r3, #4
 8007d64:	4413      	add	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2203      	movs	r2, #3
 8007d74:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2203      	movs	r2, #3
 8007d7a:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2204      	movs	r2, #4
 8007d80:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2200      	movs	r2, #0
 8007d86:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	73fb      	strb	r3, [r7, #15]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	7bfa      	ldrb	r2, [r7, #15]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d3e2      	bcc.n	8007d5e <V53L1_init_zone_results_structure+0x22>
	}
}
 8007d98:	bf00      	nop
 8007d9a:	bf00      	nop
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53LX_DEV              Dev)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b087      	sub	sp, #28
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverResults_t  *pres =
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007db4:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53LX_MAX_USER_ZONES;
 8007dba:	2305      	movs	r3, #5
 8007dbc:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8007dc4:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	75fb      	strb	r3, [r7, #23]
 8007dca:	e016      	b.n	8007dfa <V53L1_init_zone_dss_configs+0x54>
		pdata->VL53LX_p_003[z].dss_mode =
 8007dcc:	7dfa      	ldrb	r2, [r7, #23]
 8007dce:	68b9      	ldr	r1, [r7, #8]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	440b      	add	r3, r1
 8007dda:	3304      	adds	r3, #4
 8007ddc:	2201      	movs	r2, #1
 8007dde:	701a      	strb	r2, [r3, #0]
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53LX_p_003[z].dss_requested_effective_spad_count = 0;
 8007de0:	7dfa      	ldrb	r2, [r7, #23]
 8007de2:	68b9      	ldr	r1, [r7, #8]
 8007de4:	4613      	mov	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	440b      	add	r3, r1
 8007dee:	3306      	adds	r3, #6
 8007df0:	2200      	movs	r2, #0
 8007df2:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
 8007df6:	3301      	adds	r3, #1
 8007df8:	75fb      	strb	r3, [r7, #23]
 8007dfa:	7dfa      	ldrb	r2, [r7, #23]
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d3e4      	bcc.n	8007dcc <V53L1_init_zone_dss_configs+0x26>
	}
}
 8007e02:	bf00      	nop
 8007e04:	bf00      	nop
 8007e06:	371c      	adds	r7, #28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8007e10:	b490      	push	{r4, r7}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4604      	mov	r4, r0
 8007e18:	4608      	mov	r0, r1
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	4623      	mov	r3, r4
 8007e20:	71fb      	strb	r3, [r7, #7]
 8007e22:	4603      	mov	r3, r0
 8007e24:	71bb      	strb	r3, [r7, #6]
 8007e26:	460b      	mov	r3, r1
 8007e28:	717b      	strb	r3, [r7, #5]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8007e2e:	79bb      	ldrb	r3, [r7, #6]
 8007e30:	011b      	lsls	r3, r3, #4
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	4413      	add	r3, r2
 8007e38:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3c:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8007e3e:	793b      	ldrb	r3, [r7, #4]
 8007e40:	011b      	lsls	r3, r3, #4
 8007e42:	b2da      	uxtb	r2, r3
 8007e44:	797b      	ldrb	r3, [r7, #5]
 8007e46:	4413      	add	r3, r2
 8007e48:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8007e4e:	7d3b      	ldrb	r3, [r7, #20]
 8007e50:	011b      	lsls	r3, r3, #4
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	7c3b      	ldrb	r3, [r7, #16]
 8007e56:	4413      	add	r3, r2
 8007e58:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8007e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5c:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 8007e5e:	7f3b      	ldrb	r3, [r7, #28]
 8007e60:	011b      	lsls	r3, r3, #4
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	7e3b      	ldrb	r3, [r7, #24]
 8007e66:	4413      	add	r3, r2
 8007e68:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6c:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 8007e6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e72:	011b      	lsls	r3, r3, #4
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e80:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 8007e82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007e86:	011b      	lsls	r3, r3, #4
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e8e:	4413      	add	r3, r2
 8007e90:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea4:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eac:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007ebc:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8007ebe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ec2:	011b      	lsls	r3, r3, #4
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007eca:	4413      	add	r3, r2
 8007ecc:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8007ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed0:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007ed8:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8007eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007edc:	2200      	movs	r2, #0
 8007ede:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee6:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eea:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8007eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eee:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef2:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef6:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 8007efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efe:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 8007f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f02:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 8007f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0a:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0e:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8007f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f16:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8007f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f1e:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	2200      	movs	r2, #0
 8007f24:	701a      	strb	r2, [r3, #0]

}
 8007f26:	bf00      	nop
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bc90      	pop	{r4, r7}
 8007f2e:	4770      	bx	lr

08007f30 <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8007f30:	b490      	push	{r4, r7}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	4604      	mov	r4, r0
 8007f38:	4608      	mov	r0, r1
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	4623      	mov	r3, r4
 8007f40:	71fb      	strb	r3, [r7, #7]
 8007f42:	4603      	mov	r3, r0
 8007f44:	71bb      	strb	r3, [r7, #6]
 8007f46:	460b      	mov	r3, r1
 8007f48:	717b      	strb	r3, [r7, #5]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8007f4e:	79bb      	ldrb	r3, [r7, #6]
 8007f50:	011b      	lsls	r3, r3, #4
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	4413      	add	r3, r2
 8007f58:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5c:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8007f5e:	793b      	ldrb	r3, [r7, #4]
 8007f60:	011b      	lsls	r3, r3, #4
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	797b      	ldrb	r3, [r7, #5]
 8007f66:	4413      	add	r3, r2
 8007f68:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6c:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8007f6e:	7d3b      	ldrb	r3, [r7, #20]
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	7c3b      	ldrb	r3, [r7, #16]
 8007f76:	4413      	add	r3, r2
 8007f78:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	789a      	ldrb	r2, [r3, #2]
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	78da      	ldrb	r2, [r3, #3]
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 8007f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f98:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	789a      	ldrb	r2, [r3, #2]
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa8:	78da      	ldrb	r2, [r3, #3]
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	791a      	ldrb	r2, [r3, #4]
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007fbc:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8007fbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007fc2:	011b      	lsls	r3, r3, #4
 8007fc4:	b2da      	uxtb	r2, r3
 8007fc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007fca:	4413      	add	r3, r2
 8007fcc:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007fd8:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	2200      	movs	r2, #0
 8007fde:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 8007fe0:	7f3b      	ldrb	r3, [r7, #28]
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	7e3b      	ldrb	r3, [r7, #24]
 8007fe8:	4413      	add	r3, r2
 8007fea:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8007fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fee:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 8007ff0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ff4:	011b      	lsls	r3, r3, #4
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 8008004:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008008:	011b      	lsls	r3, r3, #4
 800800a:	b2da      	uxtb	r2, r3
 800800c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008010:	4413      	add	r3, r2
 8008012:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	7bda      	ldrb	r2, [r3, #15]
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 8008020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008022:	7c1a      	ldrb	r2, [r3, #16]
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 8008028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802a:	7c5a      	ldrb	r2, [r3, #17]
 800802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802e:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008036:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800803e:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	2200      	movs	r2, #0
 8008044:	701a      	strb	r2, [r3, #0]
}
 8008046:	bf00      	nop
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bc90      	pop	{r4, r7}
 800804e:	4770      	bx	lr

08008050 <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	460b      	mov	r3, r1
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	220c      	movs	r2, #12
 8008078:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800807a:	897b      	ldrh	r3, [r7, #10]
 800807c:	b2da      	uxtb	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_015                = 0;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 80080b0:	2300      	movs	r3, #0
 80080b2:	82fb      	strh	r3, [r7, #22]
 80080b4:	e015      	b.n	80080e2 <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 80080b6:	8afa      	ldrh	r2, [r7, #22]
 80080b8:	897b      	ldrh	r3, [r7, #10]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d207      	bcs.n	80080ce <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 80080be:	8afb      	ldrh	r3, [r7, #22]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	3302      	adds	r3, #2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	605a      	str	r2, [r3, #4]
 80080cc:	e006      	b.n	80080dc <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 80080ce:	8afb      	ldrh	r3, [r7, #22]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	3302      	adds	r3, #2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	4413      	add	r3, r2
 80080d8:	2200      	movs	r2, #0
 80080da:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 80080dc:	8afb      	ldrh	r3, [r7, #22]
 80080de:	3301      	adds	r3, #1
 80080e0:	82fb      	strh	r3, [r7, #22]
 80080e2:	8afb      	ldrh	r3, [r7, #22]
 80080e4:	2b0b      	cmp	r3, #11
 80080e6:	d9e6      	bls.n	80080b6 <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 80080e8:	bf00      	nop
 80080ea:	bf00      	nop
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b085      	sub	sp, #20
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	4603      	mov	r3, r0
 80080fe:	603a      	str	r2, [r7, #0]
 8008100:	80fb      	strh	r3, [r7, #6]
 8008102:	460b      	mov	r3, r1
 8008104:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 800810a:	2300      	movs	r3, #0
 800810c:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 800810e:	88fb      	ldrh	r3, [r7, #6]
 8008110:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8008112:	2300      	movs	r3, #0
 8008114:	81fb      	strh	r3, [r7, #14]
 8008116:	e00e      	b.n	8008136 <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008118:	88ba      	ldrh	r2, [r7, #4]
 800811a:	89fb      	ldrh	r3, [r7, #14]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	3b01      	subs	r3, #1
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	4413      	add	r3, r2
 8008124:	89ba      	ldrh	r2, [r7, #12]
 8008126:	b2d2      	uxtb	r2, r2
 8008128:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 800812a:	89bb      	ldrh	r3, [r7, #12]
 800812c:	0a1b      	lsrs	r3, r3, #8
 800812e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8008130:	89fb      	ldrh	r3, [r7, #14]
 8008132:	3301      	adds	r3, #1
 8008134:	81fb      	strh	r3, [r7, #14]
 8008136:	89fa      	ldrh	r2, [r7, #14]
 8008138:	88bb      	ldrh	r3, [r7, #4]
 800813a:	429a      	cmp	r2, r3
 800813c:	d3ec      	bcc.n	8008118 <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 800813e:	bf00      	nop
 8008140:	bf00      	nop
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	4603      	mov	r3, r0
 8008154:	6039      	str	r1, [r7, #0]
 8008156:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 8008158:	2300      	movs	r3, #0
 800815a:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800815c:	e00a      	b.n	8008174 <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800815e:	89fb      	ldrh	r3, [r7, #14]
 8008160:	021b      	lsls	r3, r3, #8
 8008162:	b21a      	sxth	r2, r3
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	1c59      	adds	r1, r3, #1
 8008168:	6039      	str	r1, [r7, #0]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	b21b      	sxth	r3, r3
 800816e:	4313      	orrs	r3, r2
 8008170:	b21b      	sxth	r3, r3
 8008172:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 8008174:	88fb      	ldrh	r3, [r7, #6]
 8008176:	1e5a      	subs	r2, r3, #1
 8008178:	80fa      	strh	r2, [r7, #6]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1ef      	bne.n	800815e <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 800817e:	89fb      	ldrh	r3, [r7, #14]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	603a      	str	r2, [r7, #0]
 8008196:	80fb      	strh	r3, [r7, #6]
 8008198:	460b      	mov	r3, r1
 800819a:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 80081a4:	88fb      	ldrh	r3, [r7, #6]
 80081a6:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 80081a8:	2300      	movs	r3, #0
 80081aa:	81fb      	strh	r3, [r7, #14]
 80081ac:	e00f      	b.n	80081ce <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80081ae:	88ba      	ldrh	r2, [r7, #4]
 80081b0:	89fb      	ldrh	r3, [r7, #14]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	3b01      	subs	r3, #1
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	4413      	add	r3, r2
 80081ba:	89ba      	ldrh	r2, [r7, #12]
 80081bc:	b2d2      	uxtb	r2, r2
 80081be:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80081c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80081c4:	121b      	asrs	r3, r3, #8
 80081c6:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 80081c8:	89fb      	ldrh	r3, [r7, #14]
 80081ca:	3301      	adds	r3, #1
 80081cc:	81fb      	strh	r3, [r7, #14]
 80081ce:	89fa      	ldrh	r2, [r7, #14]
 80081d0:	88bb      	ldrh	r3, [r7, #4]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d3eb      	bcc.n	80081ae <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 80081d6:	bf00      	nop
 80081d8:	bf00      	nop
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	4603      	mov	r3, r0
 80081ec:	6039      	str	r1, [r7, #0]
 80081ee:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 80081f0:	2300      	movs	r3, #0
 80081f2:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	b25b      	sxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	da0e      	bge.n	800821c <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 80081fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008202:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8008204:	e00a      	b.n	800821c <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8008206:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	b21a      	sxth	r2, r3
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	1c59      	adds	r1, r3, #1
 8008212:	6039      	str	r1, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	b21b      	sxth	r3, r3
 8008218:	4313      	orrs	r3, r2
 800821a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800821c:	88fb      	ldrh	r3, [r7, #6]
 800821e:	1e5a      	subs	r2, r3, #1
 8008220:	80fa      	strh	r2, [r7, #6]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1ef      	bne.n	8008206 <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 8008226:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008236:	b480      	push	{r7}
 8008238:	b087      	sub	sp, #28
 800823a:	af00      	add	r7, sp, #0
 800823c:	60f8      	str	r0, [r7, #12]
 800823e:	460b      	mov	r3, r1
 8008240:	607a      	str	r2, [r7, #4]
 8008242:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 8008248:	2300      	movs	r3, #0
 800824a:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 8008250:	2300      	movs	r3, #0
 8008252:	82fb      	strh	r3, [r7, #22]
 8008254:	e00e      	b.n	8008274 <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008256:	897a      	ldrh	r2, [r7, #10]
 8008258:	8afb      	ldrh	r3, [r7, #22]
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	3b01      	subs	r3, #1
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	4413      	add	r3, r2
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	b2d2      	uxtb	r2, r2
 8008266:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	0a1b      	lsrs	r3, r3, #8
 800826c:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800826e:	8afb      	ldrh	r3, [r7, #22]
 8008270:	3301      	adds	r3, #1
 8008272:	82fb      	strh	r3, [r7, #22]
 8008274:	8afa      	ldrh	r2, [r7, #22]
 8008276:	897b      	ldrh	r3, [r7, #10]
 8008278:	429a      	cmp	r2, r3
 800827a:	d3ec      	bcc.n	8008256 <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	371c      	adds	r7, #28
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800828a:	b480      	push	{r7}
 800828c:	b085      	sub	sp, #20
 800828e:	af00      	add	r7, sp, #0
 8008290:	4603      	mov	r3, r0
 8008292:	6039      	str	r1, [r7, #0]
 8008294:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 8008296:	2300      	movs	r3, #0
 8008298:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800829a:	e007      	b.n	80082ac <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	021a      	lsls	r2, r3, #8
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	1c59      	adds	r1, r3, #1
 80082a4:	6039      	str	r1, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 80082ac:	88fb      	ldrh	r3, [r7, #6]
 80082ae:	1e5a      	subs	r2, r3, #1
 80082b0:	80fa      	strh	r2, [r7, #6]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1f2      	bne.n	800829c <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 80082b6:	68fb      	ldr	r3, [r7, #12]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	4603      	mov	r3, r0
 80082cc:	6039      	str	r1, [r7, #0]
 80082ce:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	b25b      	sxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	da0b      	bge.n	80082f6 <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 80082de:	f04f 33ff 	mov.w	r3, #4294967295
 80082e2:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 80082e4:	e007      	b.n	80082f6 <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	021a      	lsls	r2, r3, #8
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	1c59      	adds	r1, r3, #1
 80082ee:	6039      	str	r1, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 80082f6:	88fb      	ldrh	r3, [r7, #6]
 80082f8:	1e5a      	subs	r2, r3, #1
 80082fa:	80fa      	strh	r2, [r7, #6]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1f2      	bne.n	80082e6 <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 8008300:	68fb      	ldr	r3, [r7, #12]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <VL53LX_start_test>:


VL53LX_Error VL53LX_start_test(
	VL53LX_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b084      	sub	sp, #16
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	460b      	mov	r3, r1
 8008318:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800831a:	2300      	movs	r3, #0
 800831c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE) {
 800831e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d107      	bne.n	8008336 <VL53LX_start_test+0x28>
		status = VL53LX_WrByte(
 8008326:	78fb      	ldrb	r3, [r7, #3]
 8008328:	461a      	mov	r2, r3
 800832a:	2127      	movs	r1, #39	; 0x27
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f008 fc6d 	bl	8010c0c <VL53LX_WrByte>
 8008332:	4603      	mov	r3, r0
 8008334:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b084      	sub	sp, #16
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	460b      	mov	r3, r1
 800834c:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	3318      	adds	r3, #24
 8008356:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	78fa      	ldrb	r2, [r7, #3]
 800835c:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362

	status = VL53LX_WrByte(
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f893 3362 	ldrb.w	r3, [r3, #866]	; 0x362
 8008366:	461a      	mov	r2, r3
 8008368:	2185      	movs	r1, #133	; 0x85
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f008 fc4e 	bl	8010c0c <VL53LX_WrByte>
 8008370:	4603      	mov	r3, r0
 8008372:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 8008374:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008388:	2300      	movs	r3, #0
 800838a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 800838c:	2101      	movs	r1, #1
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7ff ffd7 	bl	8008342 <VL53LX_set_firmware_enable_register>
 8008394:	4603      	mov	r3, r0
 8008396:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008398:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 80083b0:	2100      	movs	r1, #0
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7ff ffc5 	bl	8008342 <VL53LX_set_firmware_enable_register>
 80083b8:	4603      	mov	r3, r0
 80083ba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80083bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3318      	adds	r3, #24
 80083dc:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	78fa      	ldrb	r2, [r7, #3]
 80083e2:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360

	status = VL53LX_WrByte(
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f893 3360 	ldrb.w	r3, [r3, #864]	; 0x360
 80083ec:	461a      	mov	r2, r3
 80083ee:	2183      	movs	r1, #131	; 0x83
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f008 fc0b 	bl	8010c0c <VL53LX_WrByte>
 80083f6:	4603      	mov	r3, r0
 80083f8:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 80083fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800840e:	2300      	movs	r3, #0
 8008410:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 8008412:	2101      	movs	r1, #1
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7ff ffd7 	bl	80083c8 <VL53LX_set_powerforce_register>
 800841a:	4603      	mov	r3, r0
 800841c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800841e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008432:	2300      	movs	r3, #0
 8008434:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 8008436:	2100      	movs	r1, #0
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7ff ffc5 	bl	80083c8 <VL53LX_set_powerforce_register>
 800843e:	4603      	mov	r3, r0
 8008440:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008442:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <VL53LX_clear_interrupt>:


VL53LX_Error VL53LX_clear_interrupt(
	VL53LX_DEV    Dev)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	3318      	adds	r3, #24
 800845e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53LX_CLEAR_RANGE_INT;
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363

	status = VL53LX_WrByte(
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800846e:	461a      	mov	r2, r3
 8008470:	2186      	movs	r1, #134	; 0x86
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f008 fbca 	bl	8010c0c <VL53LX_WrByte>
 8008478:	4603      	mov	r3, r0
 800847a:	73fb      	strb	r3, [r7, #15]
				VL53LX_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800847c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	460a      	mov	r2, r1
 8008492:	80fb      	strh	r3, [r7, #6]
 8008494:	4613      	mov	r3, r2
 8008496:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 8008498:	2300      	movs	r3, #0
 800849a:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 800849c:	2300      	movs	r3, #0
 800849e:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 80084a0:	2300      	movs	r3, #0
 80084a2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 80084a4:	88fb      	ldrh	r3, [r7, #6]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f002 fe9b 	bl	800b1e2 <VL53LX_calc_pll_period_us>
 80084ac:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 80084ae:	797b      	ldrb	r3, [r7, #5]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f003 fa69 	bl	800b988 <VL53LX_decode_vcsel_period>
 80084b6:	4603      	mov	r3, r0
 80084b8:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	4613      	mov	r3, r2
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	4413      	add	r3, r2
 80084c2:	021b      	lsls	r3, r3, #8
 80084c4:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	099b      	lsrs	r3, r3, #6
 80084ca:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 80084cc:	7cfa      	ldrb	r2, [r7, #19]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	fb02 f303 	mul.w	r3, r2, r3
 80084d4:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	099b      	lsrs	r3, r3, #6
 80084da:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 80084dc:	68fb      	ldr	r3, [r7, #12]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b089      	sub	sp, #36	; 0x24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	4608      	mov	r0, r1
 80084f2:	4611      	mov	r1, r2
 80084f4:	461a      	mov	r2, r3
 80084f6:	4603      	mov	r3, r0
 80084f8:	817b      	strh	r3, [r7, #10]
 80084fa:	460b      	mov	r3, r1
 80084fc:	813b      	strh	r3, [r7, #8]
 80084fe:	4613      	mov	r3, r2
 8008500:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8008506:	2300      	movs	r3, #0
 8008508:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800850a:	2300      	movs	r3, #0
 800850c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800850e:	2300      	movs	r3, #0
 8008510:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	011b      	lsls	r3, r3, #4
 800851a:	4a23      	ldr	r2, [pc, #140]	; (80085a8 <VL53LX_calc_range_ignore_threshold+0xc0>)
 800851c:	fb82 1203 	smull	r1, r2, r2, r3
 8008520:	1192      	asrs	r2, r2, #6
 8008522:	17db      	asrs	r3, r3, #31
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 8008528:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800852c:	2b00      	cmp	r3, #0
 800852e:	da03      	bge.n	8008538 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8008530:	897b      	ldrh	r3, [r7, #10]
 8008532:	425b      	negs	r3, r3
 8008534:	b29b      	uxth	r3, r3
 8008536:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 8008538:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	da03      	bge.n	8008548 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8008540:	893b      	ldrh	r3, [r7, #8]
 8008542:	425b      	negs	r3, r3
 8008544:	b29b      	uxth	r3, r3
 8008546:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 8008548:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800854c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008550:	4413      	add	r3, r2
 8008552:	015b      	lsls	r3, r3, #5
 8008554:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	4a13      	ldr	r2, [pc, #76]	; (80085a8 <VL53LX_calc_range_ignore_threshold+0xc0>)
 800855a:	fb82 1203 	smull	r1, r2, r2, r3
 800855e:	1192      	asrs	r2, r2, #6
 8008560:	17db      	asrs	r3, r3, #31
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	4413      	add	r3, r2
 800856c:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800856e:	79fa      	ldrb	r2, [r7, #7]
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	fb02 f303 	mul.w	r3, r2, r3
 8008576:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	3310      	adds	r3, #16
 800857c:	2b00      	cmp	r3, #0
 800857e:	da00      	bge.n	8008582 <VL53LX_calc_range_ignore_threshold+0x9a>
 8008580:	331f      	adds	r3, #31
 8008582:	115b      	asrs	r3, r3, #5
 8008584:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800858c:	db03      	blt.n	8008596 <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800858e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008592:	83fb      	strh	r3, [r7, #30]
 8008594:	e001      	b.n	800859a <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800859a:	8bfb      	ldrh	r3, [r7, #30]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3724      	adds	r7, #36	; 0x24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	10624dd3 	.word	0x10624dd3

080085ac <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 80085b6:	2300      	movs	r3, #0
 80085b8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d102      	bne.n	80085c6 <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	e008      	b.n	80085d8 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	031a      	lsls	r2, r3, #12
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	085b      	lsrs	r3, r3, #1
 80085ce:	441a      	add	r2, r3
		timeout_mclks   =
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d6:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 80085d8:	68fb      	ldr	r3, [r7, #12]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3714      	adds	r7, #20
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 80085f4:	2300      	movs	r3, #0
 80085f6:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f7ff ffd6 	bl	80085ac <VL53LX_calc_timeout_mclks>
 8008600:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 f885 	bl	8008712 <VL53LX_encode_timeout>
 8008608:	4603      	mov	r3, r0
 800860a:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800860c:	897b      	ldrh	r3, [r7, #10]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8008616:	b4f0      	push	{r4, r5, r6, r7}
 8008618:	b086      	sub	sp, #24
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 8008620:	2300      	movs	r3, #0
 8008622:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4618      	mov	r0, r3
 8008634:	f04f 0100 	mov.w	r1, #0
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	461a      	mov	r2, r3
 800863c:	f04f 0300 	mov.w	r3, #0
 8008640:	fb02 fc01 	mul.w	ip, r2, r1
 8008644:	fb00 f603 	mul.w	r6, r0, r3
 8008648:	4466      	add	r6, ip
 800864a:	fba0 2302 	umull	r2, r3, r0, r2
 800864e:	18f1      	adds	r1, r6, r3
 8008650:	460b      	mov	r3, r1
 8008652:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008656:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800865a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800865e:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 8008662:	f143 0500 	adc.w	r5, r3, #0
 8008666:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 800866a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800866e:	f04f 0200 	mov.w	r2, #0
 8008672:	f04f 0300 	mov.w	r3, #0
 8008676:	0b02      	lsrs	r2, r0, #12
 8008678:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800867c:	0b0b      	lsrs	r3, r1, #12
 800867e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 8008686:	697b      	ldr	r3, [r7, #20]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3718      	adds	r7, #24
 800868c:	46bd      	mov	sp, r7
 800868e:	bcf0      	pop	{r4, r5, r6, r7}
 8008690:	4770      	bx	lr
	...

08008694 <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	460b      	mov	r3, r1
 800869e:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 80086a0:	2300      	movs	r3, #0
 80086a2:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 80086a4:	2300      	movs	r3, #0
 80086a6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 80086a8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 80086ac:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 80086ae:	4413      	add	r3, r2
 80086b0:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	da02      	bge.n	80086be <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 80086b8:	2300      	movs	r3, #0
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	e005      	b.n	80086ca <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086c4:	db01      	blt.n	80086ca <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 80086c6:	4b05      	ldr	r3, [pc, #20]	; (80086dc <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 80086c8:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 80086ce:	68bb      	ldr	r3, [r7, #8]

}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	0003ffff 	.word	0x0003ffff

080086e0 <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	4603      	mov	r3, r0
 80086e8:	6039      	str	r1, [r7, #0]
 80086ea:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 80086f4:	88fb      	ldrh	r3, [r7, #6]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 f837 	bl	800876a <VL53LX_decode_timeout>
 80086fc:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f7ff ff88 	bl	8008616 <VL53LX_calc_timeout_us>
 8008706:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8008708:	68bb      	ldr	r3, [r7, #8]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 8008712:	b480      	push	{r7}
 8008714:	b087      	sub	sp, #28
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800871a:	2300      	movs	r3, #0
 800871c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008722:	2300      	movs	r3, #0
 8008724:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d017      	beq.n	800875c <VL53LX_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3b01      	subs	r3, #1
 8008730:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008732:	e005      	b.n	8008740 <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	085b      	lsrs	r3, r3, #1
 8008738:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800873a:	89fb      	ldrh	r3, [r7, #14]
 800873c:	3301      	adds	r3, #1
 800873e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1f4      	bne.n	8008734 <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800874a:	89fb      	ldrh	r3, [r7, #14]
 800874c:	021b      	lsls	r3, r3, #8
 800874e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	b29b      	uxth	r3, r3
 8008754:	b2db      	uxtb	r3, r3
 8008756:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008758:	4413      	add	r3, r2
 800875a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800875c:	8afb      	ldrh	r3, [r7, #22]
}
 800875e:	4618      	mov	r0, r3
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	4603      	mov	r3, r0
 8008772:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 8008774:	2300      	movs	r3, #0
 8008776:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008778:	88fb      	ldrh	r3, [r7, #6]
 800877a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800877c:	88fa      	ldrh	r2, [r7, #6]
 800877e:	0a12      	lsrs	r2, r2, #8
 8008780:	b292      	uxth	r2, r2
 8008782:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008784:	3301      	adds	r3, #1
 8008786:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008788:	68fb      	ldr	r3, [r7, #12]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b088      	sub	sp, #32
 800879a:	af00      	add	r7, sp, #0
 800879c:	60f8      	str	r0, [r7, #12]
 800879e:	60b9      	str	r1, [r7, #8]
 80087a0:	607a      	str	r2, [r7, #4]
 80087a2:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 80087ac:	2300      	movs	r3, #0
 80087ae:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 80087b0:	2300      	movs	r3, #0
 80087b2:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 80087b4:	887b      	ldrh	r3, [r7, #2]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d102      	bne.n	80087c0 <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80087ba:	23f1      	movs	r3, #241	; 0xf1
 80087bc:	77fb      	strb	r3, [r7, #31]
 80087be:	e05d      	b.n	800887c <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 80087c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c2:	799a      	ldrb	r2, [r3, #6]
 80087c4:	887b      	ldrh	r3, [r7, #2]
 80087c6:	4611      	mov	r1, r2
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7ff fe5d 	bl	8008488 <VL53LX_calc_macro_period_us>
 80087ce:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 80087d0:	6979      	ldr	r1, [r7, #20]
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f7ff feea 	bl	80085ac <VL53LX_calc_timeout_mclks>
 80087d8:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	2bff      	cmp	r3, #255	; 0xff
 80087de:	d901      	bls.n	80087e4 <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 80087e0:	23ff      	movs	r3, #255	; 0xff
 80087e2:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 80087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ea:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 80087ec:	6979      	ldr	r1, [r7, #20]
 80087ee:	68b8      	ldr	r0, [r7, #8]
 80087f0:	f7ff fef9 	bl	80085e6 <VL53LX_calc_encoded_timeout>
 80087f4:	4603      	mov	r3, r0
 80087f6:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80087f8:	8a7b      	ldrh	r3, [r7, #18]
 80087fa:	0a1b      	lsrs	r3, r3, #8
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8008800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008802:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008804:	8a7b      	ldrh	r3, [r7, #18]
 8008806:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8008808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880a:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 800880c:	6979      	ldr	r1, [r7, #20]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7ff fee9 	bl	80085e6 <VL53LX_calc_encoded_timeout>
 8008814:	4603      	mov	r3, r0
 8008816:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008818:	8a7b      	ldrh	r3, [r7, #18]
 800881a:	0a1b      	lsrs	r3, r3, #8
 800881c:	b29b      	uxth	r3, r3
 800881e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8008820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008822:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008824:	8a7b      	ldrh	r3, [r7, #18]
 8008826:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8008828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882a:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 800882c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882e:	7a5a      	ldrb	r2, [r3, #9]
 8008830:	887b      	ldrh	r3, [r7, #2]
 8008832:	4611      	mov	r1, r2
 8008834:	4618      	mov	r0, r3
 8008836:	f7ff fe27 	bl	8008488 <VL53LX_calc_macro_period_us>
 800883a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 800883c:	6979      	ldr	r1, [r7, #20]
 800883e:	68b8      	ldr	r0, [r7, #8]
 8008840:	f7ff fed1 	bl	80085e6 <VL53LX_calc_encoded_timeout>
 8008844:	4603      	mov	r3, r0
 8008846:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008848:	8a7b      	ldrh	r3, [r7, #18]
 800884a:	0a1b      	lsrs	r3, r3, #8
 800884c:	b29b      	uxth	r3, r3
 800884e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8008850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008852:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008854:	8a7b      	ldrh	r3, [r7, #18]
 8008856:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8008858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885a:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 800885c:	6979      	ldr	r1, [r7, #20]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff fec1 	bl	80085e6 <VL53LX_calc_encoded_timeout>
 8008864:	4603      	mov	r3, r0
 8008866:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008868:	8a7b      	ldrh	r3, [r7, #18]
 800886a:	0a1b      	lsrs	r3, r3, #8
 800886c:	b29b      	uxth	r3, r3
 800886e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8008870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008872:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008874:	8a7b      	ldrh	r3, [r7, #18]
 8008876:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800887c:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008880:	4618      	mov	r0, r3
 8008882:	3720      	adds	r7, #32
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 8008888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888c:	b08b      	sub	sp, #44	; 0x2c
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008894:	2100      	movs	r1, #0
 8008896:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27

	int64_t  evts              = 0;
 800889a:	f04f 0000 	mov.w	r0, #0
 800889e:	f04f 0100 	mov.w	r1, #0
 80088a2:	e9c7 0106 	strd	r0, r1, [r7, #24]
	int64_t  tmpi              = 0;
 80088a6:	f04f 0000 	mov.w	r0, #0
 80088aa:	f04f 0100 	mov.w	r1, #0
 80088ae:	e9c7 0104 	strd	r0, r1, [r7, #16]
	int64_t  tmpo              = 0;
 80088b2:	f04f 0000 	mov.w	r0, #0
 80088b6:	f04f 0100 	mov.w	r1, #0
 80088ba:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	8849      	ldrh	r1, [r1, #2]
 80088c2:	2900      	cmp	r1, #0
 80088c4:	d103      	bne.n	80088ce <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80088c6:	23f1      	movs	r3, #241	; 0xf1
 80088c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088cc:	e0a5      	b.n	8008a1a <VL53LX_hist_copy_and_scale_ambient_info+0x192>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 80088ce:	6879      	ldr	r1, [r7, #4]
 80088d0:	7849      	ldrb	r1, [r1, #1]
 80088d2:	2900      	cmp	r1, #0
 80088d4:	f000 80a1 	beq.w	8008a1a <VL53LX_hist_copy_and_scale_ambient_info+0x192>
			podata->number_of_ambient_bins == 0) {
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	7ac9      	ldrb	r1, [r1, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 80088dc:	2900      	cmp	r1, #0
 80088de:	f040 809c 	bne.w	8008a1a <VL53LX_hist_copy_and_scale_ambient_info+0x192>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	f8d1 1088 	ldr.w	r1, [r1, #136]	; 0x88
 80088e8:	4608      	mov	r0, r1
 80088ea:	f04f 0100 	mov.w	r1, #0
 80088ee:	f110 0a01 	adds.w	sl, r0, #1
 80088f2:	f141 0b00 	adc.w	fp, r1, #0
 80088f6:	e9c7 ab02 	strd	sl, fp, [r7, #8]
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
 8008900:	b288      	uxth	r0, r1
 8008902:	f04f 0100 	mov.w	r1, #0
			tmpo   *=
 8008906:	68fe      	ldr	r6, [r7, #12]
 8008908:	fb00 fc06 	mul.w	ip, r0, r6
 800890c:	68be      	ldr	r6, [r7, #8]
 800890e:	fb01 f606 	mul.w	r6, r1, r6
 8008912:	44b4      	add	ip, r6
 8008914:	68be      	ldr	r6, [r7, #8]
 8008916:	fba6 0100 	umull	r0, r1, r6, r0
 800891a:	eb0c 0601 	add.w	r6, ip, r1
 800891e:	4631      	mov	r1, r6
 8008920:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8008924:	e9c7 0102 	strd	r0, r1, [r7, #8]

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8008928:	6879      	ldr	r1, [r7, #4]
 800892a:	6889      	ldr	r1, [r1, #8]
 800892c:	4608      	mov	r0, r1
 800892e:	f04f 0100 	mov.w	r1, #0
 8008932:	1c44      	adds	r4, r0, #1
 8008934:	f141 0500 	adc.w	r5, r1, #0
 8008938:	e9c7 4504 	strd	r4, r5, [r7, #16]
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800893c:	6879      	ldr	r1, [r7, #4]
 800893e:	8849      	ldrh	r1, [r1, #2]
 8008940:	b288      	uxth	r0, r1
 8008942:	f04f 0100 	mov.w	r1, #0
			tmpi   *=
 8008946:	697c      	ldr	r4, [r7, #20]
 8008948:	fb00 f504 	mul.w	r5, r0, r4
 800894c:	693c      	ldr	r4, [r7, #16]
 800894e:	fb01 f404 	mul.w	r4, r1, r4
 8008952:	442c      	add	r4, r5
 8008954:	693d      	ldr	r5, [r7, #16]
 8008956:	fba5 0100 	umull	r0, r1, r5, r0
 800895a:	440c      	add	r4, r1
 800895c:	4621      	mov	r1, r4
 800895e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8008962:	e9c7 0104 	strd	r0, r1, [r7, #16]

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8008966:	6879      	ldr	r1, [r7, #4]
 8008968:	68c9      	ldr	r1, [r1, #12]
 800896a:	4608      	mov	r0, r1
 800896c:	ea4f 71e0 	mov.w	r1, r0, asr #31
			evts  = tmpo *
 8008970:	68fc      	ldr	r4, [r7, #12]
 8008972:	fb00 f504 	mul.w	r5, r0, r4
 8008976:	68bc      	ldr	r4, [r7, #8]
 8008978:	fb01 f404 	mul.w	r4, r1, r4
 800897c:	442c      	add	r4, r5
 800897e:	68bd      	ldr	r5, [r7, #8]
 8008980:	fba5 0100 	umull	r0, r1, r5, r0
 8008984:	440c      	add	r4, r1
 8008986:	4621      	mov	r1, r4
 8008988:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800898c:	e9c7 0106 	strd	r0, r1, [r7, #24]
			evts += (tmpi/2);
 8008990:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008994:	0fcc      	lsrs	r4, r1, #31
 8008996:	f04f 0500 	mov.w	r5, #0
 800899a:	1822      	adds	r2, r4, r0
 800899c:	eb45 0301 	adc.w	r3, r5, r1
 80089a0:	f04f 0000 	mov.w	r0, #0
 80089a4:	f04f 0100 	mov.w	r1, #0
 80089a8:	0850      	lsrs	r0, r2, #1
 80089aa:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 80089ae:	1059      	asrs	r1, r3, #1
 80089b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089b4:	eb12 0800 	adds.w	r8, r2, r0
 80089b8:	eb43 0901 	adc.w	r9, r3, r1
 80089bc:	e9c7 8906 	strd	r8, r9, [r7, #24]


			if (tmpi != 0)
 80089c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	d009      	beq.n	80089dc <VL53LX_hist_copy_and_scale_ambient_info+0x154>
				evts = do_division_s(evts, tmpi);
 80089c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80089cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80089d0:	f7f7 fc56 	bl	8000280 <__aeabi_ldivmod>
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	e9c7 2306 	strd	r2, r3, [r7, #24]

			podata->ambient_events_sum = (int32_t)evts;
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53LX_p_028 =
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 +=
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	7852      	ldrb	r2, [r2, #1]
 80089fa:	0852      	lsrs	r2, r2, #1
 80089fc:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 80089fe:	441a      	add	r2, r3
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 /=
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 8008a10:	fb93 f2f2 	sdiv	r2, r3, r2
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 8008a1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	372c      	adds	r7, #44	; 0x2c
 8008a22:	46bd      	mov	sp, r7
 8008a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a28 <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b087      	sub	sp, #28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	3318      	adds	r3, #24
 8008a36:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	; 0x2fa
	amb_thresh_low  = 1024 *
 8008a4a:	029b      	lsls	r3, r3, #10
 8008a4c:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
	amb_thresh_high = 1024 *
 8008a54:	029b      	lsls	r3, r3, #10
 8008a56:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f040 8095 	bne.w	8008b92 <VL53LX_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
		pdata->bin_seq[5] =
 8008a6e:	091b      	lsrs	r3, r3, #4
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
 8008a7c:	f003 030f 	and.w	r3, r3, #15
 8008a80:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
		pdata->bin_seq[3] =
 8008a8c:	091b      	lsrs	r3, r3, #4
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
 8008a9a:	f003 030f 	and.w	r3, r3, #15
 8008a9e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
		pdata->bin_seq[1] =
 8008aaa:	091b      	lsrs	r3, r3, #4
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
 8008ab8:	f003 030f 	and.w	r3, r3, #15
 8008abc:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	da2c      	bge.n	8008b28 <VL53LX_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			pdata->bin_seq[5] =
 8008ad4:	091b      	lsrs	r3, r3, #4
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			& 0x0F;
 8008ae2:	f003 030f 	and.w	r3, r3, #15
 8008ae6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			pdata->bin_seq[3] =
 8008af2:	091b      	lsrs	r3, r3, #4
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			& 0x0F;
 8008b00:	f003 030f 	and.w	r3, r3, #15
 8008b04:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			pdata->bin_seq[1] =
 8008b10:	091b      	lsrs	r3, r3, #4
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			& 0x0F;
 8008b1e:	f003 030f 	and.w	r3, r3, #15
 8008b22:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	f340 80c2 	ble.w	8008cba <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			pdata->bin_seq[5] =
 8008b3c:	091b      	lsrs	r3, r3, #4
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			& 0x0F;
 8008b4a:	f003 030f 	and.w	r3, r3, #15
 8008b4e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			pdata->bin_seq[3] =
 8008b5a:	091b      	lsrs	r3, r3, #4
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			& 0x0F;
 8008b68:	f003 030f 	and.w	r3, r3, #15
 8008b6c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			pdata->bin_seq[1] =
 8008b78:	091b      	lsrs	r3, r3, #4
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			& 0x0F;
 8008b86:	f003 030f 	and.w	r3, r3, #15
 8008b8a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	731a      	strb	r2, [r3, #12]
 8008b90:	e093      	b.n	8008cba <VL53LX_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	f893 32f1 	ldrb.w	r3, [r3, #753]	; 0x2f1
			& 0x0F;
 8008b98:	f003 030f 	and.w	r3, r3, #15
 8008b9c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
			& 0x0F;
 8008ba8:	f003 030f 	and.w	r3, r3, #15
 8008bac:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
		pdata->bin_seq[3] =
 8008bb8:	091b      	lsrs	r3, r3, #4
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	f893 32ef 	ldrb.w	r3, [r3, #751]	; 0x2ef
 8008bc6:	f003 030f 	and.w	r3, r3, #15
 8008bca:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
		pdata->bin_seq[1] =
 8008bd6:	091b      	lsrs	r3, r3, #4
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
			& 0x0F;
 8008be4:	f003 030f 	and.w	r3, r3, #15
 8008be8:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	da2c      	bge.n	8008c54 <VL53LX_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			pdata->bin_seq[5] =
 8008c00:	091b      	lsrs	r3, r3, #4
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			& 0x0F;
 8008c0e:	f003 030f 	and.w	r3, r3, #15
 8008c12:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			pdata->bin_seq[3] =
 8008c1e:	091b      	lsrs	r3, r3, #4
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			& 0x0F;
 8008c2c:	f003 030f 	and.w	r3, r3, #15
 8008c30:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			pdata->bin_seq[1] =
 8008c3c:	091b      	lsrs	r3, r3, #4
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			& 0x0F;
 8008c4a:	f003 030f 	and.w	r3, r3, #15
 8008c4e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	dd2c      	ble.n	8008cba <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			pdata->bin_seq[5] =
 8008c66:	091b      	lsrs	r3, r3, #4
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			& 0x0F;
 8008c74:	f003 030f 	and.w	r3, r3, #15
 8008c78:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			pdata->bin_seq[3] =
 8008c84:	091b      	lsrs	r3, r3, #4
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			& 0x0F;
 8008c92:	f003 030f 	and.w	r3, r3, #15
 8008c96:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			pdata->bin_seq[1] =
 8008ca2:	091b      	lsrs	r3, r3, #4
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			& 0x0F;
 8008cb0:	f003 030f 	and.w	r3, r3, #15
 8008cb4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8008cba:	2300      	movs	r3, #0
 8008cbc:	75fb      	strb	r3, [r7, #23]
 8008cbe:	e007      	b.n	8008cd0 <VL53LX_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 8008cc0:	7dfb      	ldrb	r3, [r7, #23]
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	75fb      	strb	r3, [r7, #23]
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
 8008cd2:	2b05      	cmp	r3, #5
 8008cd4:	d9f4      	bls.n	8008cc0 <VL53LX_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 8008cd6:	bf00      	nop
 8008cd8:	bf00      	nop
 8008cda:	371c      	adds	r7, #28
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 8008ce4:	b590      	push	{r4, r7, lr}
 8008ce6:	b093      	sub	sp, #76	; 0x4c
 8008ce8:	af04      	add	r7, sp, #16
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_LLDriverData_t *pdev =
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	3318      	adds	r3, #24
 8008cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 8008d12:	2300      	movs	r3, #0
 8008d14:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 8008d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d20:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8008d24:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 8008d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2a:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 8008d2e:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 8008d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d32:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 8008d36:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 8008d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3a:	f893 3236 	ldrb.w	r3, [r3, #566]	; 0x236
 8008d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 8008d42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d46:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 8008d48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008d4a:	021b      	lsls	r3, r3, #8
 8008d4c:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	785b      	ldrb	r3, [r3, #1]
 8008d52:	2b07      	cmp	r3, #7
 8008d54:	d006      	beq.n	8008d64 <VL53LX_hist_phase_consistency_check+0x80>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 8008d5a:	2b08      	cmp	r3, #8
 8008d5c:	d002      	beq.n	8008d64 <VL53LX_hist_phase_consistency_check+0x80>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 8008d5e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008d62:	e0ec      	b.n	8008f3e <VL53LX_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 8008d64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d102      	bne.n	8008d70 <VL53LX_hist_phase_consistency_check+0x8c>
		return status;
 8008d6a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008d6e:	e0e6      	b.n	8008f3e <VL53LX_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8008d70:	2300      	movs	r3, #0
 8008d72:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8008d76:	e0d9      	b.n	8008f2c <VL53LX_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8008d78:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	214c      	movs	r1, #76	; 0x4c
 8008d80:	fb01 f303 	mul.w	r3, r1, r3
 8008d84:	4413      	add	r3, r2
 8008d86:	335e      	adds	r3, #94	; 0x5e
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b09      	cmp	r3, #9
 8008d8c:	d00b      	beq.n	8008da6 <VL53LX_hist_phase_consistency_check+0xc2>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 8008d8e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	214c      	movs	r1, #76	; 0x4c
 8008d96:	fb01 f303 	mul.w	r3, r1, r3
 8008d9a:	4413      	add	r3, r2
 8008d9c:	335e      	adds	r3, #94	; 0x5e
 8008d9e:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8008da0:	2b13      	cmp	r3, #19
 8008da2:	f040 80bd 	bne.w	8008f20 <VL53LX_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	795b      	ldrb	r3, [r3, #5]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10a      	bne.n	8008dc4 <VL53LX_hist_phase_consistency_check+0xe0>
			prange_curr->VL53LX_p_003[lc].range_status =
 8008dae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	214c      	movs	r1, #76	; 0x4c
 8008db6:	fb01 f303 	mul.w	r3, r1, r3
 8008dba:	4413      	add	r3, r2
 8008dbc:	335e      	adds	r3, #94	; 0x5e
 8008dbe:	2217      	movs	r2, #23
 8008dc0:	701a      	strb	r2, [r3, #0]
 8008dc2:	e009      	b.n	8008dd8 <VL53LX_hist_phase_consistency_check+0xf4>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 8008dc4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	214c      	movs	r1, #76	; 0x4c
 8008dcc:	fb01 f303 	mul.w	r3, r1, r3
 8008dd0:	4413      	add	r3, r2
 8008dd2:	335e      	adds	r3, #94	; 0x5e
 8008dd4:	2207      	movs	r2, #7
 8008dd6:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8008dde:	e097      	b.n	8008f10 <VL53LX_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8008de0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	214c      	movs	r1, #76	; 0x4c
 8008de8:	fb01 f303 	mul.w	r3, r1, r3
 8008dec:	4413      	add	r3, r2
 8008dee:	3354      	adds	r3, #84	; 0x54
 8008df0:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8008df2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	005b      	lsls	r3, r3, #1
 8008dfc:	4413      	add	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4403      	add	r3, r0
 8008e02:	3310      	adds	r3, #16
 8008e04:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8008e06:	4299      	cmp	r1, r3
 8008e08:	d915      	bls.n	8008e36 <VL53LX_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 8008e0a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	214c      	movs	r1, #76	; 0x4c
 8008e12:	fb01 f303 	mul.w	r3, r1, r3
 8008e16:	4413      	add	r3, r2
 8008e18:	3354      	adds	r3, #84	; 0x54
 8008e1a:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 8008e1c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	4613      	mov	r3, r2
 8008e24:	005b      	lsls	r3, r3, #1
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4403      	add	r3, r0
 8008e2c:	3310      	adds	r3, #16
 8008e2e:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8008e30:	1acb      	subs	r3, r1, r3
 8008e32:	867b      	strh	r3, [r7, #50]	; 0x32
 8008e34:	e014      	b.n	8008e60 <VL53LX_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 8008e36:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	005b      	lsls	r3, r3, #1
 8008e40:	4413      	add	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	440b      	add	r3, r1
 8008e46:	3310      	adds	r3, #16
 8008e48:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 8008e4a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	204c      	movs	r0, #76	; 0x4c
 8008e52:	fb00 f303 	mul.w	r3, r0, r3
 8008e56:	440b      	add	r3, r1
 8008e58:	3354      	adds	r3, #84	; 0x54
 8008e5a:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 8008e60:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008e62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d24e      	bcs.n	8008f06 <VL53LX_hist_phase_consistency_check+0x222>





				if (status == VL53LX_ERROR_NONE)
 8008e68:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d125      	bne.n	8008ebc <VL53LX_hist_phase_consistency_check+0x1d8>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 8008e70:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53LX_hist_events_consistency_check(
 8008e74:	4613      	mov	r3, r2
 8008e76:	005b      	lsls	r3, r3, #1
 8008e78:	4413      	add	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	3308      	adds	r3, #8
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 8008e82:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_events_consistency_check(
 8008e86:	224c      	movs	r2, #76	; 0x4c
 8008e88:	fb02 f303 	mul.w	r3, r2, r3
 8008e8c:	3310      	adds	r3, #16
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	4413      	add	r3, r2
 8008e92:	3304      	adds	r3, #4
 8008e94:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8008e96:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 8008e9a:	f107 0217 	add.w	r2, r7, #23
 8008e9e:	9203      	str	r2, [sp, #12]
 8008ea0:	f107 021c 	add.w	r2, r7, #28
 8008ea4:	9202      	str	r2, [sp, #8]
 8008ea6:	f107 0218 	add.w	r2, r7, #24
 8008eaa:	9201      	str	r2, [sp, #4]
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	4623      	mov	r3, r4
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	f000 f848 	bl	8008f46 <VL53LX_hist_events_consistency_check>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 8008ebc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d115      	bne.n	8008ef0 <VL53LX_hist_phase_consistency_check+0x20c>
					range_status ==
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 8008ec6:	2b09      	cmp	r3, #9
 8008ec8:	d112      	bne.n	8008ef0 <VL53LX_hist_phase_consistency_check+0x20c>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 8008eca:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 8008ece:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_merged_pulse_check(
 8008ed2:	224c      	movs	r2, #76	; 0x4c
 8008ed4:	fb02 f303 	mul.w	r3, r2, r3
 8008ed8:	3310      	adds	r3, #16
 8008eda:	683a      	ldr	r2, [r7, #0]
 8008edc:	4413      	add	r3, r2
 8008ede:	3304      	adds	r3, #4
 8008ee0:	f107 0217 	add.w	r2, r7, #23
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	f000 faaf 	bl	8009448 <VL53LX_hist_merged_pulse_check>
 8008eea:	4603      	mov	r3, r0
 8008eec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 8008ef0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008ef4:	7df8      	ldrb	r0, [r7, #23]
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	214c      	movs	r1, #76	; 0x4c
 8008efa:	fb01 f303 	mul.w	r3, r1, r3
 8008efe:	4413      	add	r3, r2
 8008f00:	335e      	adds	r3, #94	; 0x5e
 8008f02:	4602      	mov	r2, r0
 8008f04:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 8008f06:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	795b      	ldrb	r3, [r3, #5]
 8008f14:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	f4ff af61 	bcc.w	8008de0 <VL53LX_hist_phase_consistency_check+0xfc>
 8008f1e:	e000      	b.n	8008f22 <VL53LX_hist_phase_consistency_check+0x23e>
			continue;
 8008f20:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8008f22:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008f26:	3301      	adds	r3, #1
 8008f28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	7c9b      	ldrb	r3, [r3, #18]
 8008f30:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8008f34:	429a      	cmp	r2, r3
 8008f36:	f4ff af1f 	bcc.w	8008d78 <VL53LX_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 8008f3a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	373c      	adds	r7, #60	; 0x3c
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd90      	pop	{r4, r7, pc}

08008f46 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 8008f46:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f4a:	b0a8      	sub	sp, #160	; 0xa0
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f50:	647b      	str	r3, [r7, #68]	; 0x44
 8008f52:	4603      	mov	r3, r0
 8008f54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008f58:	460b      	mov	r3, r1
 8008f5a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	int64_t   tmpp                   = 0;
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	f04f 0300 	mov.w	r3, #0
 8008f6c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	int64_t   tmpc                   = 0;
 8008f70:	f04f 0200 	mov.w	r2, #0
 8008f74:	f04f 0300 	mov.w	r3, #0
 8008f78:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	int64_t   events_scaler          = 0;
 8008f7c:	f04f 0200 	mov.w	r2, #0
 8008f80:	f04f 0300 	mov.w	r3, #0
 8008f84:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	int64_t   events_scaler_sq       = 0;
 8008f88:	f04f 0200 	mov.w	r2, #0
 8008f8c:	f04f 0300 	mov.w	r3, #0
 8008f90:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t   c_signal_events        = 0;
 8008f94:	f04f 0200 	mov.w	r2, #0
 8008f98:	f04f 0300 	mov.w	r3, #0
 8008f9c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	int64_t   c_sig_noise_sq         = 0;
 8008fa0:	f04f 0200 	mov.w	r2, #0
 8008fa4:	f04f 0300 	mov.w	r3, #0
 8008fa8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t   c_amb_noise_sq         = 0;
 8008fac:	f04f 0200 	mov.w	r2, #0
 8008fb0:	f04f 0300 	mov.w	r3, #0
 8008fb4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t   p_amb_noise_sq         = 0;
 8008fb8:	f04f 0200 	mov.w	r2, #0
 8008fbc:	f04f 0300 	mov.w	r3, #0
 8008fc0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	int32_t   p_signal_events        = 0;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t  noise_sq_sum           = 0;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	653b      	str	r3, [r7, #80]	; 0x50



	if (event_sigma == 0) {
 8008fcc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d106      	bne.n	8008fe2 <VL53LX_hist_events_consistency_check+0x9c>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8008fd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fd8:	2209      	movs	r2, #9
 8008fda:	701a      	strb	r2, [r3, #0]
		return status;
 8008fdc:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8008fe0:	e22d      	b.n	800943e <VL53LX_hist_events_consistency_check+0x4f8>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 8008fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	f04f 0300 	mov.w	r3, #0
 8008fec:	f112 0801 	adds.w	r8, r2, #1
 8008ff0:	f143 0900 	adc.w	r9, r3, #0
 8008ff4:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 8008ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ffa:	885b      	ldrh	r3, [r3, #2]
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	f04f 0300 	mov.w	r3, #0
 8009002:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8009006:	fb02 f001 	mul.w	r0, r2, r1
 800900a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800900e:	fb03 f101 	mul.w	r1, r3, r1
 8009012:	4408      	add	r0, r1
 8009014:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8009018:	fba1 2302 	umull	r2, r3, r1, r2
 800901c:	18c1      	adds	r1, r0, r3
 800901e:	460b      	mov	r3, r1
 8009020:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8009024:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 8009028:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	461a      	mov	r2, r3
 8009030:	f04f 0300 	mov.w	r3, #0
 8009034:	f112 0a01 	adds.w	sl, r2, #1
 8009038:	f143 0b00 	adc.w	fp, r3, #0
 800903c:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 8009040:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009044:	8adb      	ldrh	r3, [r3, #22]
 8009046:	b29a      	uxth	r2, r3
 8009048:	f04f 0300 	mov.w	r3, #0
 800904c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009050:	fb02 f001 	mul.w	r0, r2, r1
 8009054:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009058:	fb03 f101 	mul.w	r1, r3, r1
 800905c:	4408      	add	r0, r1
 800905e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009062:	fba1 2302 	umull	r2, r3, r1, r2
 8009066:	18c1      	adds	r1, r0, r3
 8009068:	460b      	mov	r3, r1
 800906a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 800906e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80



	events_scaler  = tmpp * 4096;
 8009072:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009076:	f04f 0000 	mov.w	r0, #0
 800907a:	f04f 0100 	mov.w	r1, #0
 800907e:	0319      	lsls	r1, r3, #12
 8009080:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8009084:	0310      	lsls	r0, r2, #12
 8009086:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
	if (tmpc != 0) {
 800908a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800908e:	4313      	orrs	r3, r2
 8009090:	d026      	beq.n	80090e0 <VL53LX_hist_events_consistency_check+0x19a>
		events_scaler += (tmpc/2);
 8009092:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009096:	0fcb      	lsrs	r3, r1, #31
 8009098:	461a      	mov	r2, r3
 800909a:	f04f 0300 	mov.w	r3, #0
 800909e:	1814      	adds	r4, r2, r0
 80090a0:	eb43 0501 	adc.w	r5, r3, r1
 80090a4:	f04f 0200 	mov.w	r2, #0
 80090a8:	f04f 0300 	mov.w	r3, #0
 80090ac:	0862      	lsrs	r2, r4, #1
 80090ae:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 80090b2:	106b      	asrs	r3, r5, #1
 80090b4:	4610      	mov	r0, r2
 80090b6:	4619      	mov	r1, r3
 80090b8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80090bc:	1814      	adds	r4, r2, r0
 80090be:	63bc      	str	r4, [r7, #56]	; 0x38
 80090c0:	414b      	adcs	r3, r1
 80090c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090c4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80090c8:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		events_scaler  = do_division_s(events_scaler, tmpc);
 80090cc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80090d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80090d4:	f7f7 f8d4 	bl	8000280 <__aeabi_ldivmod>
 80090d8:	4602      	mov	r2, r0
 80090da:	460b      	mov	r3, r1
 80090dc:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	}

	events_scaler_sq  = events_scaler * events_scaler;
 80090e0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80090e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090e8:	fb03 f102 	mul.w	r1, r3, r2
 80090ec:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80090f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090f4:	fb03 f302 	mul.w	r3, r3, r2
 80090f8:	4419      	add	r1, r3
 80090fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090fe:	fba3 2303 	umull	r2, r3, r3, r3
 8009102:	4419      	add	r1, r3
 8009104:	460b      	mov	r3, r1
 8009106:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 800910a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	events_scaler_sq += 2048;
 800910e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009112:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009116:	6339      	str	r1, [r7, #48]	; 0x30
 8009118:	f143 0300 	adc.w	r3, r3, #0
 800911c:	637b      	str	r3, [r7, #52]	; 0x34
 800911e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8009122:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	events_scaler_sq /= 4096;
 8009126:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800912a:	4610      	mov	r0, r2
 800912c:	4619      	mov	r1, r3
 800912e:	2800      	cmp	r0, #0
 8009130:	f171 0300 	sbcs.w	r3, r1, #0
 8009134:	da06      	bge.n	8009144 <VL53LX_hist_events_consistency_check+0x1fe>
 8009136:	f640 72ff 	movw	r2, #4095	; 0xfff
 800913a:	f04f 0300 	mov.w	r3, #0
 800913e:	1880      	adds	r0, r0, r2
 8009140:	eb43 0101 	adc.w	r1, r3, r1
 8009144:	f04f 0200 	mov.w	r2, #0
 8009148:	f04f 0300 	mov.w	r3, #0
 800914c:	0b02      	lsrs	r2, r0, #12
 800914e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8009152:	130b      	asrs	r3, r1, #12
 8009154:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 8009158:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800915c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915e:	461a      	mov	r2, r3
 8009160:	f04f 0300 	mov.w	r3, #0
 8009164:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 8009168:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800916c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916e:	4618      	mov	r0, r3
 8009170:	f04f 0100 	mov.w	r1, #0
 8009174:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009178:	1a14      	subs	r4, r2, r0
 800917a:	62bc      	str	r4, [r7, #40]	; 0x28
 800917c:	eb63 0301 	sbc.w	r3, r3, r1
 8009180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009182:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8009186:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events *= (int64_t)events_scaler;
 800918a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800918c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009190:	fb02 f203 	mul.w	r2, r2, r3
 8009194:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009198:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800919a:	fb01 f303 	mul.w	r3, r1, r3
 800919e:	18d1      	adds	r1, r2, r3
 80091a0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80091a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091a6:	fba2 2303 	umull	r2, r3, r2, r3
 80091aa:	4419      	add	r1, r3
 80091ac:	460b      	mov	r3, r1
 80091ae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80091b2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events += 2048;
 80091b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80091ba:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 80091be:	6239      	str	r1, [r7, #32]
 80091c0:	f143 0300 	adc.w	r3, r3, #0
 80091c4:	627b      	str	r3, [r7, #36]	; 0x24
 80091c6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80091ca:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events /= 4096;
 80091ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80091d2:	2a00      	cmp	r2, #0
 80091d4:	f173 0100 	sbcs.w	r1, r3, #0
 80091d8:	da06      	bge.n	80091e8 <VL53LX_hist_events_consistency_check+0x2a2>
 80091da:	f640 70ff 	movw	r0, #4095	; 0xfff
 80091de:	f04f 0100 	mov.w	r1, #0
 80091e2:	1812      	adds	r2, r2, r0
 80091e4:	eb41 0303 	adc.w	r3, r1, r3
 80091e8:	f04f 0000 	mov.w	r0, #0
 80091ec:	f04f 0100 	mov.w	r1, #0
 80091f0:	0b10      	lsrs	r0, r2, #12
 80091f2:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80091f6:	1319      	asrs	r1, r3, #12
 80091f8:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 80091fc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009200:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 8009204:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920a:	461a      	mov	r2, r3
 800920c:	f04f 0300 	mov.w	r3, #0
 8009210:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009212:	fb02 f001 	mul.w	r0, r2, r1
 8009216:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009218:	fb03 f101 	mul.w	r1, r3, r1
 800921c:	4401      	add	r1, r0
 800921e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009220:	fba0 2302 	umull	r2, r3, r0, r2
 8009224:	4419      	add	r1, r3
 8009226:	460b      	mov	r3, r1
 8009228:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 800922c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq += 2048;
 8009230:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009234:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009238:	61b9      	str	r1, [r7, #24]
 800923a:	f143 0300 	adc.w	r3, r3, #0
 800923e:	61fb      	str	r3, [r7, #28]
 8009240:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009244:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	c_sig_noise_sq /= 4096;
 8009248:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800924c:	2a00      	cmp	r2, #0
 800924e:	f173 0100 	sbcs.w	r1, r3, #0
 8009252:	da06      	bge.n	8009262 <VL53LX_hist_events_consistency_check+0x31c>
 8009254:	f640 70ff 	movw	r0, #4095	; 0xfff
 8009258:	f04f 0100 	mov.w	r1, #0
 800925c:	1812      	adds	r2, r2, r0
 800925e:	eb41 0303 	adc.w	r3, r1, r3
 8009262:	f04f 0000 	mov.w	r0, #0
 8009266:	f04f 0100 	mov.w	r1, #0
 800926a:	0b10      	lsrs	r0, r2, #12
 800926c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009270:	1319      	asrs	r1, r3, #12
 8009272:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 8009276:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800927a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 800927e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009284:	461a      	mov	r2, r3
 8009286:	f04f 0300 	mov.w	r3, #0
 800928a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800928c:	fb02 f001 	mul.w	r0, r2, r1
 8009290:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009292:	fb03 f101 	mul.w	r1, r3, r1
 8009296:	4401      	add	r1, r0
 8009298:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800929a:	fba0 2302 	umull	r2, r3, r0, r2
 800929e:	4419      	add	r1, r3
 80092a0:	460b      	mov	r3, r1
 80092a2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80092a6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq += 2048;
 80092aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80092ae:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 80092b2:	6139      	str	r1, [r7, #16]
 80092b4:	f143 0300 	adc.w	r3, r3, #0
 80092b8:	617b      	str	r3, [r7, #20]
 80092ba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80092be:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4096;
 80092c2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80092c6:	2a00      	cmp	r2, #0
 80092c8:	f173 0100 	sbcs.w	r1, r3, #0
 80092cc:	da06      	bge.n	80092dc <VL53LX_hist_events_consistency_check+0x396>
 80092ce:	f640 70ff 	movw	r0, #4095	; 0xfff
 80092d2:	f04f 0100 	mov.w	r1, #0
 80092d6:	1812      	adds	r2, r2, r0
 80092d8:	eb41 0303 	adc.w	r3, r1, r3
 80092dc:	f04f 0000 	mov.w	r0, #0
 80092e0:	f04f 0100 	mov.w	r1, #0
 80092e4:	0b10      	lsrs	r0, r2, #12
 80092e6:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80092ea:	1319      	asrs	r1, r3, #12
 80092ec:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60


	c_amb_noise_sq += 2;
 80092f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80092f4:	1c91      	adds	r1, r2, #2
 80092f6:	60b9      	str	r1, [r7, #8]
 80092f8:	f143 0300 	adc.w	r3, r3, #0
 80092fc:	60fb      	str	r3, [r7, #12]
 80092fe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009302:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4;
 8009306:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800930a:	2a00      	cmp	r2, #0
 800930c:	f173 0100 	sbcs.w	r1, r3, #0
 8009310:	da02      	bge.n	8009318 <VL53LX_hist_events_consistency_check+0x3d2>
 8009312:	3203      	adds	r2, #3
 8009314:	f143 0300 	adc.w	r3, r3, #0
 8009318:	f04f 0000 	mov.w	r0, #0
 800931c:	f04f 0100 	mov.w	r1, #0
 8009320:	0890      	lsrs	r0, r2, #2
 8009322:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8009326:	1099      	asrs	r1, r3, #2
 8009328:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 800932c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800932e:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 8009330:	461a      	mov	r2, r3
 8009332:	f04f 0300 	mov.w	r3, #0
 8009336:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	p_amb_noise_sq += 2;
 800933a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800933e:	1c91      	adds	r1, r2, #2
 8009340:	6039      	str	r1, [r7, #0]
 8009342:	f143 0300 	adc.w	r3, r3, #0
 8009346:	607b      	str	r3, [r7, #4]
 8009348:	e9d7 3400 	ldrd	r3, r4, [r7]
 800934c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	p_amb_noise_sq /= 4;
 8009350:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009354:	2a00      	cmp	r2, #0
 8009356:	f173 0100 	sbcs.w	r1, r3, #0
 800935a:	da02      	bge.n	8009362 <VL53LX_hist_events_consistency_check+0x41c>
 800935c:	3203      	adds	r2, #3
 800935e:	f143 0300 	adc.w	r3, r3, #0
 8009362:	f04f 0000 	mov.w	r0, #0
 8009366:	f04f 0100 	mov.w	r1, #0
 800936a:	0890      	lsrs	r0, r2, #2
 800936c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8009370:	1099      	asrs	r1, r3, #2
 8009372:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 8009376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009378:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800937a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
		(uint32_t)prange_prev->VL53LX_p_017 +
 800937c:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800937e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		(uint32_t)c_sig_noise_sq +
 8009380:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 8009382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	noise_sq_sum =
 8009384:	4413      	add	r3, r2
 8009386:	653b      	str	r3, [r7, #80]	; 0x50

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 8009388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800938a:	011b      	lsls	r3, r3, #4
 800938c:	4618      	mov	r0, r3
 800938e:	f002 f822 	bl	800b3d6 <VL53LX_isqrt>
 8009392:	4603      	mov	r3, r0
 8009394:	461a      	mov	r2, r3
	*pevents_tolerance =
 8009396:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800939a:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800939c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80093a6:	fb02 f203 	mul.w	r2, r2, r3
 80093aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093ae:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 80093b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f103 0220 	add.w	r2, r3, #32
 80093ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093be:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 80093c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	da00      	bge.n	80093cc <VL53LX_hist_events_consistency_check+0x486>
 80093ca:	333f      	adds	r3, #63	; 0x3f
 80093cc:	119b      	asrs	r3, r3, #6
 80093ce:	461a      	mov	r2, r3
 80093d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093d4:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 80093d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	657b      	str	r3, [r7, #84]	; 0x54
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 80093dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	461a      	mov	r2, r3
 80093e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093e4:	1a9b      	subs	r3, r3, r2
 80093e6:	657b      	str	r3, [r7, #84]	; 0x54

	if ((int32_t)c_signal_events > p_signal_events)
 80093e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80093ec:	429a      	cmp	r2, r3
 80093ee:	da06      	bge.n	80093fe <VL53LX_hist_events_consistency_check+0x4b8>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 80093f0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80093f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093f4:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 80093f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	e005      	b.n	800940a <VL53LX_hist_events_consistency_check+0x4c4>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 80093fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009400:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009402:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 8009404:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009408:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800940a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	429a      	cmp	r2, r3
 8009418:	dd0b      	ble.n	8009432 <VL53LX_hist_events_consistency_check+0x4ec>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 800941a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800941e:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 8009420:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009424:	429a      	cmp	r2, r3
 8009426:	d204      	bcs.n	8009432 <VL53LX_hist_events_consistency_check+0x4ec>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 8009428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800942c:	2214      	movs	r2, #20
 800942e:	701a      	strb	r2, [r3, #0]
 8009430:	e003      	b.n	800943a <VL53LX_hist_events_consistency_check+0x4f4>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8009432:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009436:	2209      	movs	r2, #9
 8009438:	701a      	strb	r2, [r3, #0]





	return status;
 800943a:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800943e:	4618      	mov	r0, r3
 8009440:	37a0      	adds	r7, #160	; 0xa0
 8009442:	46bd      	mov	sp, r7
 8009444:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009448 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 8009448:	b480      	push	{r7}
 800944a:	b087      	sub	sp, #28
 800944c:	af00      	add	r7, sp, #0
 800944e:	4603      	mov	r3, r0
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
 8009454:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 8009456:	2300      	movs	r3, #0
 8009458:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800945a:	2300      	movs	r3, #0
 800945c:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800946a:	429a      	cmp	r2, r3
 800946c:	dd0b      	ble.n	8009486 <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8009474:	b29a      	uxth	r2, r3
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800947c:	b29b      	uxth	r3, r3
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	b29b      	uxth	r3, r3
		delta_mm =
 8009482:	82fb      	strh	r3, [r7, #22]
 8009484:	e00a      	b.n	800949c <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800948c:	b29a      	uxth	r2, r3
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8009494:	b29b      	uxth	r3, r3
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	b29b      	uxth	r3, r3
		delta_mm =
 800949a:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800949c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	dd09      	ble.n	80094b8 <VL53LX_hist_merged_pulse_check+0x70>
 80094a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80094a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	dd03      	ble.n	80094b8 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2216      	movs	r2, #22
 80094b4:	701a      	strb	r2, [r3, #0]
 80094b6:	e002      	b.n	80094be <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2209      	movs	r2, #9
 80094bc:	701a      	strb	r2, [r3, #0]

	return status;
 80094be:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	371c      	adds	r7, #28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b08e      	sub	sp, #56	; 0x38
 80094d2:	af04      	add	r7, sp, #16
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	607a      	str	r2, [r7, #4]
 80094da:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80094dc:	2300      	movs	r3, #0
 80094de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev =
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	3318      	adds	r3, #24
 80094e6:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 80094e8:	2300      	movs	r3, #0
 80094ea:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 80094f0:	6a3b      	ldr	r3, [r7, #32]
 80094f2:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 80094f6:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 80094fe:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8009506:	2b09      	cmp	r3, #9
 8009508:	d009      	beq.n	800951e <VL53LX_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009510:	2b13      	cmp	r3, #19
 8009512:	d004      	beq.n	800951e <VL53LX_hist_xmonitor_consistency_check+0x50>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800951a:	2b14      	cmp	r3, #20
 800951c:	d129      	bne.n	8009572 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009524:	2b09      	cmp	r3, #9
 8009526:	d009      	beq.n	800953c <VL53LX_hist_xmonitor_consistency_check+0x6e>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800952e:	2b13      	cmp	r3, #19
 8009530:	d004      	beq.n	800953c <VL53LX_hist_xmonitor_consistency_check+0x6e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 8009538:	2b14      	cmp	r3, #20
 800953a:	d11a      	bne.n	8009572 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	2209      	movs	r2, #9
 8009540:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	334a      	adds	r3, #74	; 0x4a
				VL53LX_hist_events_consistency_check(
 800954e:	8bb9      	ldrh	r1, [r7, #28]
 8009550:	7ff8      	ldrb	r0, [r7, #31]
 8009552:	9303      	str	r3, [sp, #12]
 8009554:	f107 0318 	add.w	r3, r7, #24
 8009558:	9302      	str	r3, [sp, #8]
 800955a:	f107 0314 	add.w	r3, r7, #20
 800955e:	9301      	str	r3, [sp, #4]
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	4613      	mov	r3, r2
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	f7ff fced 	bl	8008f46 <VL53LX_hist_events_consistency_check>
 800956c:	4603      	mov	r3, r0
 800956e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 8009572:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009576:	4618      	mov	r0, r3
 8009578:	3728      	adds	r7, #40	; 0x28
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b088      	sub	sp, #32
 8009582:	af00      	add	r7, sp, #0
 8009584:	60f8      	str	r0, [r7, #12]
 8009586:	60b9      	str	r1, [r7, #8]
 8009588:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800958a:	2300      	movs	r3, #0
 800958c:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800958e:	2300      	movs	r3, #0
 8009590:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 8009596:	2300      	movs	r3, #0
 8009598:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d019      	beq.n	80095de <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80095b0:	4618      	mov	r0, r3
 80095b2:	f002 f877 	bl	800b6a4 <VL53LX_calc_pll_period_mm>
 80095b6:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 80095be:	021b      	lsls	r3, r3, #8
 80095c0:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	69ba      	ldr	r2, [r7, #24]
 80095c6:	fb02 f303 	mul.w	r3, r2, r3
 80095ca:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80095d2:	0bdb      	lsrs	r3, r3, #15
 80095d4:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	b21a      	sxth	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 80095de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3720      	adds	r7, #32
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 80095ea:	b590      	push	{r4, r7, lr}
 80095ec:	b08d      	sub	sp, #52	; 0x34
 80095ee:	af04      	add	r7, sp, #16
 80095f0:	4604      	mov	r4, r0
 80095f2:	4608      	mov	r0, r1
 80095f4:	4611      	mov	r1, r2
 80095f6:	461a      	mov	r2, r3
 80095f8:	4623      	mov	r3, r4
 80095fa:	80fb      	strh	r3, [r7, #6]
 80095fc:	4603      	mov	r3, r0
 80095fe:	80bb      	strh	r3, [r7, #4]
 8009600:	460b      	mov	r3, r1
 8009602:	70fb      	strb	r3, [r7, #3]
 8009604:	4613      	mov	r3, r2
 8009606:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 8009608:	2300      	movs	r3, #0
 800960a:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 8009614:	2300      	movs	r3, #0
 8009616:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 8009618:	2300      	movs	r3, #0
 800961a:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 8009620:	2300      	movs	r3, #0
 8009622:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 8009624:	2300      	movs	r3, #0
 8009626:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 8009628:	78b9      	ldrb	r1, [r7, #2]
 800962a:	78f8      	ldrb	r0, [r7, #3]
 800962c:	f107 030c 	add.w	r3, r7, #12
 8009630:	9303      	str	r3, [sp, #12]
 8009632:	f107 030e 	add.w	r3, r7, #14
 8009636:	9302      	str	r3, [sp, #8]
 8009638:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800963c:	9301      	str	r3, [sp, #4]
 800963e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	23ff      	movs	r3, #255	; 0xff
 8009644:	22c7      	movs	r2, #199	; 0xc7
 8009646:	f000 fa03 	bl	8009a50 <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800964a:	89fb      	ldrh	r3, [r7, #14]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d050      	beq.n	80096f2 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 8009650:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 8009652:	2b00      	cmp	r3, #0
 8009654:	d04d      	beq.n	80096f2 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 8009656:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800965a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800965e:	78b9      	ldrb	r1, [r7, #2]
 8009660:	78f8      	ldrb	r0, [r7, #3]
 8009662:	f107 0308 	add.w	r3, r7, #8
 8009666:	9303      	str	r3, [sp, #12]
 8009668:	f107 030a 	add.w	r3, r7, #10
 800966c:	9302      	str	r3, [sp, #8]
 800966e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009672:	9301      	str	r3, [sp, #4]
 8009674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	4623      	mov	r3, r4
 800967a:	f000 f9e9 	bl	8009a50 <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800967e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009680:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 8009682:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 8009684:	897b      	ldrh	r3, [r7, #10]
 8009686:	461a      	mov	r2, r3
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	fb02 f303 	mul.w	r3, r2, r3
 800968e:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 8009690:	89fb      	ldrh	r3, [r7, #14]
 8009692:	461a      	mov	r2, r3
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	fbb3 f3f2 	udiv	r3, r3, r2
 800969a:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800969c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969e:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 80096a0:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 80096a2:	893b      	ldrh	r3, [r7, #8]
 80096a4:	461a      	mov	r2, r3
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	fb02 f303 	mul.w	r3, r2, r3
 80096ac:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 80096ae:	89bb      	ldrh	r3, [r7, #12]
 80096b0:	461a      	mov	r2, r3
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80096b8:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 80096ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096be:	69ba      	ldr	r2, [r7, #24]
 80096c0:	fb02 f303 	mul.w	r3, r2, r3
 80096c4:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 80096c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	fb02 f303 	mul.w	r3, r2, r3
 80096d0:	69fa      	ldr	r2, [r7, #28]
 80096d2:	4413      	add	r3, r2
 80096d4:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 80096d6:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 80096d8:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 80096da:	4413      	add	r3, r2
 80096dc:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d008      	beq.n	80096f6 <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	009a      	lsls	r2, r3, #2
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80096ee:	61fb      	str	r3, [r7, #28]
 80096f0:	e002      	b.n	80096f8 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 80096f2:	bf00      	nop
 80096f4:	e000      	b.n	80096f8 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 80096f6:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	b21a      	sxth	r2, r3
 80096fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096fe:	801a      	strh	r2, [r3, #0]

}
 8009700:	bf00      	nop
 8009702:	3724      	adds	r7, #36	; 0x24
 8009704:	46bd      	mov	sp, r7
 8009706:	bd90      	pop	{r4, r7, pc}

08009708 <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	60b9      	str	r1, [r7, #8]
 8009710:	607a      	str	r2, [r7, #4]
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	4603      	mov	r3, r0
 8009716:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 8009718:	7bfb      	ldrb	r3, [r7, #15]
 800971a:	08db      	lsrs	r3, r3, #3
 800971c:	b2da      	uxtb	r2, r3
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 8009722:	7bfb      	ldrb	r3, [r7, #15]
 8009724:	f003 0307 	and.w	r3, r3, #7
 8009728:	b2da      	uxtb	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	461a      	mov	r2, r3
 8009734:	2301      	movs	r3, #1
 8009736:	4093      	lsls	r3, r2
 8009738:	b2da      	uxtb	r2, r3
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	701a      	strb	r2, [r3, #0]

}
 800973e:	bf00      	nop
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800974a:	b480      	push	{r7}
 800974c:	b083      	sub	sp, #12
 800974e:	af00      	add	r7, sp, #0
 8009750:	4603      	mov	r3, r0
 8009752:	603a      	str	r2, [r7, #0]
 8009754:	71fb      	strb	r3, [r7, #7]
 8009756:	460b      	mov	r3, r1
 8009758:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800975a:	79fb      	ldrb	r3, [r7, #7]
 800975c:	2b07      	cmp	r3, #7
 800975e:	d90a      	bls.n	8009776 <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8009760:	79bb      	ldrb	r3, [r7, #6]
 8009762:	00db      	lsls	r3, r3, #3
 8009764:	b2da      	uxtb	r2, r3
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	b2db      	uxtb	r3, r3
 800976c:	3b71      	subs	r3, #113	; 0x71
 800976e:	b2da      	uxtb	r2, r3
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 8009774:	e00a      	b.n	800978c <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8009776:	79bb      	ldrb	r3, [r7, #6]
 8009778:	f1c3 030f 	rsb	r3, r3, #15
 800977c:	b2db      	uxtb	r3, r3
 800977e:	00db      	lsls	r3, r3, #3
 8009780:	b2da      	uxtb	r2, r3
 8009782:	79fb      	ldrb	r3, [r7, #7]
 8009784:	4413      	add	r3, r2
 8009786:	b2da      	uxtb	r2, r3
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	701a      	strb	r2, [r3, #0]
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	4603      	mov	r3, r0
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
 80097a4:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
 80097a8:	091b      	lsrs	r3, r3, #4
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	f003 030f 	and.w	r3, r3, #15
 80097b6:	b2da      	uxtb	r2, r3
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	701a      	strb	r2, [r3, #0]

}
 80097bc:	bf00      	nop
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	4603      	mov	r3, r0
 80097d0:	603a      	str	r2, [r7, #0]
 80097d2:	71fb      	strb	r3, [r7, #7]
 80097d4:	460b      	mov	r3, r1
 80097d6:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 80097d8:	79bb      	ldrb	r3, [r7, #6]
 80097da:	011b      	lsls	r3, r3, #4
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	79fb      	ldrb	r3, [r7, #7]
 80097e0:	4413      	add	r3, r2
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	701a      	strb	r2, [r3, #0]

}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60ba      	str	r2, [r7, #8]
 80097fc:	607b      	str	r3, [r7, #4]
 80097fe:	4603      	mov	r3, r0
 8009800:	73fb      	strb	r3, [r7, #15]
 8009802:	460b      	mov	r3, r1
 8009804:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800980a:	2300      	movs	r3, #0
 800980c:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 8009812:	2300      	movs	r3, #0
 8009814:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 8009816:	f107 0217 	add.w	r2, r7, #23
 800981a:	f107 0116 	add.w	r1, r7, #22
 800981e:	7bfb      	ldrb	r3, [r7, #15]
 8009820:	4618      	mov	r0, r3
 8009822:	f002 f9ab 	bl	800bb7c <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 8009826:	f107 0214 	add.w	r2, r7, #20
 800982a:	f107 0115 	add.w	r1, r7, #21
 800982e:	7bbb      	ldrb	r3, [r7, #14]
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff ffb1 	bl	8009798 <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 8009836:	7dfb      	ldrb	r3, [r7, #23]
 8009838:	b29a      	uxth	r2, r3
 800983a:	7d7b      	ldrb	r3, [r7, #21]
 800983c:	3301      	adds	r3, #1
 800983e:	0fd9      	lsrs	r1, r3, #31
 8009840:	440b      	add	r3, r1
 8009842:	105b      	asrs	r3, r3, #1
 8009844:	425b      	negs	r3, r3
 8009846:	b29b      	uxth	r3, r3
 8009848:	4413      	add	r3, r2
 800984a:	b29b      	uxth	r3, r3
 800984c:	b21a      	sxth	r2, r3
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009858:	2b00      	cmp	r3, #0
 800985a:	da02      	bge.n	8009862 <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2200      	movs	r2, #0
 8009860:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009868:	b29a      	uxth	r2, r3
 800986a:	7d7b      	ldrb	r3, [r7, #21]
 800986c:	b29b      	uxth	r3, r3
 800986e:	4413      	add	r3, r2
 8009870:	b29b      	uxth	r3, r3
 8009872:	b21a      	sxth	r2, r3
 8009874:	6a3b      	ldr	r3, [r7, #32]
 8009876:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800987e:	2b0f      	cmp	r3, #15
 8009880:	dd02      	ble.n	8009888 <VL53LX_decode_zone_limits+0x94>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 8009882:	6a3b      	ldr	r3, [r7, #32]
 8009884:	220f      	movs	r2, #15
 8009886:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 8009888:	7dbb      	ldrb	r3, [r7, #22]
 800988a:	b29a      	uxth	r2, r3
 800988c:	7d3b      	ldrb	r3, [r7, #20]
 800988e:	3301      	adds	r3, #1
 8009890:	0fd9      	lsrs	r1, r3, #31
 8009892:	440b      	add	r3, r1
 8009894:	105b      	asrs	r3, r3, #1
 8009896:	425b      	negs	r3, r3
 8009898:	b29b      	uxth	r3, r3
 800989a:	4413      	add	r3, r2
 800989c:	b29b      	uxth	r3, r3
 800989e:	b21a      	sxth	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	da02      	bge.n	80098b4 <VL53LX_decode_zone_limits+0xc0>
		*py_ll = 0;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	7d3b      	ldrb	r3, [r7, #20]
 80098be:	b29b      	uxth	r3, r3
 80098c0:	4413      	add	r3, r2
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	b21a      	sxth	r2, r3
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098d0:	2b0f      	cmp	r3, #15
 80098d2:	dd02      	ble.n	80098da <VL53LX_decode_zone_limits+0xe6>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	220f      	movs	r2, #15
 80098d8:	801a      	strh	r2, [r3, #0]
}
 80098da:	bf00      	nop
 80098dc:	3718      	adds	r7, #24
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b085      	sub	sp, #20
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	4603      	mov	r3, r0
 80098ea:	460a      	mov	r2, r1
 80098ec:	71fb      	strb	r3, [r7, #7]
 80098ee:	4613      	mov	r3, r2
 80098f0:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 80098f6:	79fb      	ldrb	r3, [r7, #7]
 80098f8:	f003 0303 	and.w	r3, r3, #3
 80098fc:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 80098fe:	79bb      	ldrb	r3, [r7, #6]
 8009900:	f003 0303 	and.w	r3, r3, #3
 8009904:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 8009906:	7bbb      	ldrb	r3, [r7, #14]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d104      	bne.n	8009916 <VL53LX_is_aperture_location+0x34>
 800990c:	7b7b      	ldrb	r3, [r7, #13]
 800990e:	2b02      	cmp	r3, #2
 8009910:	d101      	bne.n	8009916 <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 8009912:	2301      	movs	r3, #1
 8009914:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 8009916:	7bbb      	ldrb	r3, [r7, #14]
 8009918:	2b02      	cmp	r3, #2
 800991a:	d104      	bne.n	8009926 <VL53LX_is_aperture_location+0x44>
 800991c:	7b7b      	ldrb	r3, [r7, #13]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 8009922:	2301      	movs	r3, #1
 8009924:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 8009926:	7bfb      	ldrb	r3, [r7, #15]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 8009934:	b590      	push	{r4, r7, lr}
 8009936:	b08b      	sub	sp, #44	; 0x2c
 8009938:	af02      	add	r7, sp, #8
 800993a:	603a      	str	r2, [r7, #0]
 800993c:	461a      	mov	r2, r3
 800993e:	4603      	mov	r3, r0
 8009940:	71fb      	strb	r3, [r7, #7]
 8009942:	460b      	mov	r3, r1
 8009944:	71bb      	strb	r3, [r7, #6]
 8009946:	4613      	mov	r3, r2
 8009948:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 8009952:	2300      	movs	r3, #0
 8009954:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800995e:	2300      	movs	r3, #0
 8009960:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 8009962:	2300      	movs	r3, #0
 8009964:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 8009966:	2300      	movs	r3, #0
 8009968:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800996a:	2300      	movs	r3, #0
 800996c:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 8009972:	2300      	movs	r3, #0
 8009974:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 8009976:	f107 0416 	add.w	r4, r7, #22
 800997a:	f107 0218 	add.w	r2, r7, #24
 800997e:	79b9      	ldrb	r1, [r7, #6]
 8009980:	79f8      	ldrb	r0, [r7, #7]
 8009982:	f107 0312 	add.w	r3, r7, #18
 8009986:	9301      	str	r3, [sp, #4]
 8009988:	f107 0314 	add.w	r3, r7, #20
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	4623      	mov	r3, r4
 8009990:	f7ff ff30 	bl	80097f4 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 8009994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009996:	2200      	movs	r2, #0
 8009998:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800999a:	8afb      	ldrh	r3, [r7, #22]
 800999c:	83bb      	strh	r3, [r7, #28]
 800999e:	e04c      	b.n	8009a3a <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 80099a0:	8b3b      	ldrh	r3, [r7, #24]
 80099a2:	83fb      	strh	r3, [r7, #30]
 80099a4:	e03d      	b.n	8009a22 <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 80099a6:	8bbb      	ldrh	r3, [r7, #28]
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	8bfa      	ldrh	r2, [r7, #30]
 80099ac:	b2d1      	uxtb	r1, r2
 80099ae:	f107 0211 	add.w	r2, r7, #17
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7ff fec9 	bl	800974a <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 80099b8:	7c78      	ldrb	r0, [r7, #17]
 80099ba:	f107 030e 	add.w	r3, r7, #14
 80099be:	f107 020f 	add.w	r2, r7, #15
 80099c2:	f107 0110 	add.w	r1, r7, #16
 80099c6:	f7ff fe9f 	bl	8009708 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 80099ca:	7c3b      	ldrb	r3, [r7, #16]
 80099cc:	461a      	mov	r2, r3
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	4413      	add	r3, r2
 80099d2:	781a      	ldrb	r2, [r3, #0]
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
 80099d6:	4013      	ands	r3, r2
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d01b      	beq.n	8009a16 <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 80099de:	8bbb      	ldrh	r3, [r7, #28]
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	8bfa      	ldrh	r2, [r7, #30]
 80099e4:	b2d2      	uxtb	r2, r2
 80099e6:	4611      	mov	r1, r2
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7ff ff7a 	bl	80098e2 <VL53LX_is_aperture_location>
 80099ee:	4603      	mov	r3, r0
 80099f0:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 80099f2:	7efb      	ldrb	r3, [r7, #27]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d007      	beq.n	8009a08 <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 80099f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fa:	881a      	ldrh	r2, [r3, #0]
 80099fc:	88bb      	ldrh	r3, [r7, #4]
 80099fe:	4413      	add	r3, r2
 8009a00:	b29a      	uxth	r2, r3
 8009a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a04:	801a      	strh	r2, [r3, #0]
 8009a06:	e006      	b.n	8009a16 <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 8009a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0a:	881b      	ldrh	r3, [r3, #0]
 8009a0c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a14:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009a16:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	83fb      	strh	r3, [r7, #30]
 8009a22:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009a26:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	ddbb      	ble.n	80099a6 <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009a2e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	3301      	adds	r3, #1
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	83bb      	strh	r3, [r7, #28]
 8009a3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009a3e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	ddac      	ble.n	80099a0 <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 8009a46:	bf00      	nop
 8009a48:	bf00      	nop
 8009a4a:	3724      	adds	r7, #36	; 0x24
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd90      	pop	{r4, r7, pc}

08009a50 <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 8009a50:	b590      	push	{r4, r7, lr}
 8009a52:	b08d      	sub	sp, #52	; 0x34
 8009a54:	af02      	add	r7, sp, #8
 8009a56:	4604      	mov	r4, r0
 8009a58:	4608      	mov	r0, r1
 8009a5a:	4611      	mov	r1, r2
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	4623      	mov	r3, r4
 8009a60:	71fb      	strb	r3, [r7, #7]
 8009a62:	4603      	mov	r3, r0
 8009a64:	71bb      	strb	r3, [r7, #6]
 8009a66:	460b      	mov	r3, r1
 8009a68:	717b      	strb	r3, [r7, #5]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 8009a72:	2300      	movs	r3, #0
 8009a74:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 8009a76:	2300      	movs	r3, #0
 8009a78:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 8009a86:	2300      	movs	r3, #0
 8009a88:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 8009a92:	2300      	movs	r3, #0
 8009a94:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53LX_decode_zone_limits(
 8009ab0:	f107 041c 	add.w	r4, r7, #28
 8009ab4:	f107 021e 	add.w	r2, r7, #30
 8009ab8:	79b9      	ldrb	r1, [r7, #6]
 8009aba:	79f8      	ldrb	r0, [r7, #7]
 8009abc:	f107 0318 	add.w	r3, r7, #24
 8009ac0:	9301      	str	r3, [sp, #4]
 8009ac2:	f107 031a 	add.w	r3, r7, #26
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	4623      	mov	r3, r4
 8009aca:	f7ff fe93 	bl	80097f4 <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 8009ace:	f107 0414 	add.w	r4, r7, #20
 8009ad2:	f107 0216 	add.w	r2, r7, #22
 8009ad6:	7939      	ldrb	r1, [r7, #4]
 8009ad8:	7978      	ldrb	r0, [r7, #5]
 8009ada:	f107 0310 	add.w	r3, r7, #16
 8009ade:	9301      	str	r3, [sp, #4]
 8009ae0:	f107 0312 	add.w	r3, r7, #18
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	4623      	mov	r3, r4
 8009ae8:	f7ff fe84 	bl	80097f4 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 8009aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aee:	2200      	movs	r2, #0
 8009af0:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 8009af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009af4:	2200      	movs	r2, #0
 8009af6:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009af8:	8abb      	ldrh	r3, [r7, #20]
 8009afa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009afc:	e06c      	b.n	8009bd8 <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009afe:	8afb      	ldrh	r3, [r7, #22]
 8009b00:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009b02:	e05d      	b.n	8009bc0 <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 8009b04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009b0a:	b2d1      	uxtb	r1, r2
 8009b0c:	f107 020f 	add.w	r2, r7, #15
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7ff fe1a 	bl	800974a <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009b16:	7bf8      	ldrb	r0, [r7, #15]
 8009b18:	f107 030c 	add.w	r3, r7, #12
 8009b1c:	f107 020d 	add.w	r2, r7, #13
 8009b20:	f107 010e 	add.w	r1, r7, #14
 8009b24:	f7ff fdf0 	bl	8009708 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2e:	4413      	add	r3, r2
 8009b30:	781a      	ldrb	r2, [r3, #0]
 8009b32:	7b3b      	ldrb	r3, [r7, #12]
 8009b34:	4013      	ands	r3, r2
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d03b      	beq.n	8009bb4 <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 8009b3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009b42:	b2d2      	uxtb	r2, r2
 8009b44:	4611      	mov	r1, r2
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff fecb 	bl	80098e2 <VL53LX_is_aperture_location>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009b52:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d002      	beq.n	8009b60 <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 8009b5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009b5c:	847b      	strh	r3, [r7, #34]	; 0x22
 8009b5e:	e002      	b.n	8009b66 <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 8009b60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b64:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009b66:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009b6a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	db19      	blt.n	8009ba6 <VL53LX_calc_mm_effective_spads+0x156>
 8009b72:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009b76:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	dc13      	bgt.n	8009ba6 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009b7e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009b82:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009b86:	429a      	cmp	r2, r3
 8009b88:	db0d      	blt.n	8009ba6 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009b8a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009b8e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009b92:	429a      	cmp	r2, r3
 8009b94:	dc07      	bgt.n	8009ba6 <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 8009b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b98:	881a      	ldrh	r2, [r3, #0]
 8009b9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b9c:	4413      	add	r3, r2
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ba2:	801a      	strh	r2, [r3, #0]
 8009ba4:	e006      	b.n	8009bb4 <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 8009ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ba8:	881a      	ldrh	r2, [r3, #0]
 8009baa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009bac:	4413      	add	r3, r2
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb2:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009bb4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	3301      	adds	r3, #1
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009bc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009bc4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	dd9b      	ble.n	8009b04 <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009bcc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009bd8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009bdc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009be0:	429a      	cmp	r2, r3
 8009be2:	dd8c      	ble.n	8009afe <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 8009be4:	bf00      	nop
 8009be6:	bf00      	nop
 8009be8:	372c      	adds	r7, #44	; 0x2c
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd90      	pop	{r4, r7, pc}

08009bee <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b086      	sub	sp, #24
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	60f8      	str	r0, [r7, #12]
 8009bf6:	60b9      	str	r1, [r7, #8]
 8009bf8:	607a      	str	r2, [r7, #4]
 8009bfa:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f7fe f835 	bl	8007c70 <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	7c9a      	ldrb	r2, [r3, #18]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	3314      	adds	r3, #20
 8009c30:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 8009c32:	2300      	movs	r3, #0
 8009c34:	75fb      	strb	r3, [r7, #23]
 8009c36:	e06b      	b.n	8009d10 <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 8009c38:	7dfb      	ldrb	r3, [r7, #23]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d002      	beq.n	8009c44 <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d034      	beq.n	8009cac <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 8009c42:	e05f      	b.n	8009d04 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8009c7c:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	8a9a      	ldrh	r2, [r3, #20]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	601a      	str	r2, [r3, #0]

			break;
 8009caa:	e02b      	b.n	8009d04 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8009cdc:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	611a      	str	r2, [r3, #16]
			break;
 8009d02:	bf00      	nop
		}

		pdata++;
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	334c      	adds	r3, #76	; 0x4c
 8009d08:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 8009d0a:	7dfb      	ldrb	r3, [r7, #23]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	75fb      	strb	r3, [r7, #23]
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	7c9b      	ldrb	r3, [r3, #18]
 8009d14:	7dfa      	ldrb	r2, [r7, #23]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d38e      	bcc.n	8009c38 <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 8009d1a:	bf00      	nop
 8009d1c:	bf00      	nop
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b089      	sub	sp, #36	; 0x24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	3318      	adds	r3, #24
 8009d34:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8009d3c:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8009d44:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009d4c:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 8009d4e:	4613      	mov	r3, r2
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	4413      	add	r3, r2
 8009d54:	005b      	lsls	r3, r3, #1
 8009d56:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	3302      	adds	r3, #2
 8009d60:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 8009d86:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3724      	adds	r7, #36	; 0x24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b08b      	sub	sp, #44	; 0x2c
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009da0:	2300      	movs	r3, #0
 8009da2:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	3318      	adds	r3, #24
 8009da8:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8009db0:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009db8:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009dc0:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8009dc8:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 8009dca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009dce:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 8009dd0:	7bfa      	ldrb	r2, [r7, #15]
 8009dd2:	6939      	ldr	r1, [r7, #16]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4413      	add	r3, r2
 8009dda:	005b      	lsls	r3, r3, #1
 8009ddc:	440b      	add	r3, r1
 8009dde:	3306      	adds	r3, #6
 8009de0:	2200      	movs	r2, #0
 8009de2:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009dea:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 8009dec:	2301      	movs	r3, #1
 8009dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009df2:	e01a      	b.n	8009e2a <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 8009df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009df8:	683a      	ldr	r2, [r7, #0]
 8009dfa:	214c      	movs	r1, #76	; 0x4c
 8009dfc:	fb01 f303 	mul.w	r3, r1, r3
 8009e00:	4413      	add	r3, r2
 8009e02:	334a      	adds	r3, #74	; 0x4a
 8009e04:	881b      	ldrh	r3, [r3, #0]
 8009e06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d209      	bcs.n	8009e20 <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 8009e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	214c      	movs	r1, #76	; 0x4c
 8009e14:	fb01 f303 	mul.w	r3, r1, r3
 8009e18:	4413      	add	r3, r2
 8009e1a:	334a      	adds	r3, #74	; 0x4a
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 8009e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e24:	3301      	adds	r3, #1
 8009e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	7c9b      	ldrb	r3, [r3, #18]
 8009e2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d3de      	bcc.n	8009df4 <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 8009e36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d103      	bne.n	8009e44 <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 8009e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e40:	623b      	str	r3, [r7, #32]
 8009e42:	e00e      	b.n	8009e62 <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 8009e44:	89bb      	ldrh	r3, [r7, #12]
 8009e46:	039b      	lsls	r3, r3, #14
 8009e48:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 8009e4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e4c:	6a3a      	ldr	r2, [r7, #32]
 8009e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e52:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e5a:	d302      	bcc.n	8009e62 <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 8009e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e60:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 8009e62:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 8009e68:	6939      	ldr	r1, [r7, #16]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	4413      	add	r3, r2
 8009e70:	005b      	lsls	r3, r3, #1
 8009e72:	440b      	add	r3, r1
 8009e74:	3306      	adds	r3, #6
 8009e76:	4602      	mov	r2, r0
 8009e78:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 8009e7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	372c      	adds	r7, #44	; 0x2c
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b08a      	sub	sp, #40	; 0x28
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009e92:	2300      	movs	r3, #0
 8009e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	3318      	adds	r3, #24
 8009e9c:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8009e9e:	6a3b      	ldr	r3, [r7, #32]
 8009ea0:	332c      	adds	r3, #44	; 0x2c
 8009ea2:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	33c2      	adds	r3, #194	; 0xc2
 8009ea8:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 8009eaa:	6a3b      	ldr	r3, [r7, #32]
 8009eac:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8009eb0:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	3302      	adds	r3, #2
 8009eb6:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	785b      	ldrb	r3, [r3, #1]
 8009ebc:	f003 0301 	and.w	r3, r3, #1
 8009ec0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009ec8:	461a      	mov	r2, r3
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d11e      	bne.n	8009f14 <VL53LX_multizone_hist_bins_update+0x8a>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 8009ed6:	7bfb      	ldrb	r3, [r7, #15]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10b      	bne.n	8009ef4 <VL53LX_multizone_hist_bins_update+0x6a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d05d      	beq.n	8009fb6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	719a      	strb	r2, [r3, #6]
 8009f12:	e050      	b.n	8009fb6 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d11e      	bne.n	8009f66 <VL53LX_multizone_hist_bins_update+0xdc>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 8009f28:	7bfb      	ldrb	r3, [r7, #15]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10b      	bne.n	8009f46 <VL53LX_multizone_hist_bins_update+0xbc>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d034      	beq.n	8009fb6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	719a      	strb	r2, [r3, #6]
 8009f64:	e027      	b.n	8009fb6 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 8009f66:	6a3b      	ldr	r3, [r7, #32]
 8009f68:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	4413      	add	r3, r2
 8009f72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f76:	2b03      	cmp	r3, #3
 8009f78:	d11d      	bne.n	8009fb6 <VL53LX_multizone_hist_bins_update+0x12c>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10b      	bne.n	8009f98 <VL53LX_multizone_hist_bins_update+0x10e>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00b      	beq.n	8009fb6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 8009fb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d109      	bne.n	8009fd2 <VL53LX_multizone_hist_bins_update+0x148>
		VL53LX_copy_hist_bins_to_static_cfg(
 8009fbe:	6a3b      	ldr	r3, [r7, #32]
 8009fc0:	f203 21fe 	addw	r1, r3, #766	; 0x2fe
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8009fca:	461a      	mov	r2, r3
 8009fcc:	6978      	ldr	r0, [r7, #20]
 8009fce:	f7fd fa1f 	bl	8007410 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8009fd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3728      	adds	r7, #40	; 0x28
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b089      	sub	sp, #36	; 0x24
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	60f8      	str	r0, [r7, #12]
 8009fe6:	607a      	str	r2, [r7, #4]
 8009fe8:	603b      	str	r3, [r7, #0]
 8009fea:	460b      	mov	r3, r1
 8009fec:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	3318      	adds	r3, #24
 8009ff6:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009ffe:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800a000:	7dfb      	ldrb	r3, [r7, #23]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d103      	bne.n	800a00e <VL53LX_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	7afa      	ldrb	r2, [r7, #11]
 800a00a:	701a      	strb	r2, [r3, #0]
 800a00c:	e01e      	b.n	800a04c <VL53LX_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	461a      	mov	r2, r3
 800a014:	7dfb      	ldrb	r3, [r7, #23]
 800a016:	3b01      	subs	r3, #1
 800a018:	429a      	cmp	r2, r3
 800a01a:	d111      	bne.n	800a040 <VL53LX_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	2bff      	cmp	r3, #255	; 0xff
 800a022:	d103      	bne.n	800a02c <VL53LX_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2280      	movs	r2, #128	; 0x80
 800a028:	701a      	strb	r2, [r3, #0]
 800a02a:	e005      	b.n	800a038 <VL53LX_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	3301      	adds	r3, #1
 800a032:	b2da      	uxtb	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	2200      	movs	r2, #0
 800a03c:	701a      	strb	r2, [r3, #0]
 800a03e:	e005      	b.n	800a04c <VL53LX_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	3301      	adds	r3, #1
 800a046:	b2da      	uxtb	r2, r3
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800a04c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3724      	adds	r7, #36	; 0x24
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <VL53LX_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b08a      	sub	sp, #40	; 0x28
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	607a      	str	r2, [r7, #4]
 800a066:	461a      	mov	r2, r3
 800a068:	460b      	mov	r3, r1
 800a06a:	72fb      	strb	r3, [r7, #11]
 800a06c:	4613      	mov	r3, r2
 800a06e:	813b      	strh	r3, [r7, #8]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a070:	2300      	movs	r3, #0
 800a072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3318      	adds	r3, #24
 800a07a:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800a07c:	2300      	movs	r3, #0
 800a07e:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800a080:	2300      	movs	r3, #0
 800a082:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53LX_calc_macro_period_us(
 800a084:	7afa      	ldrb	r2, [r7, #11]
 800a086:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a088:	4611      	mov	r1, r2
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fe f9fc 	bl	8008488 <VL53LX_calc_macro_period_us>
 800a090:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d101      	bne.n	800a09c <VL53LX_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800a098:	2301      	movs	r3, #1
 800a09a:	623b      	str	r3, [r7, #32]


	timeout_mclks = phasecal_timeout_us << 12;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	031b      	lsls	r3, r3, #12
 800a0a0:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	085b      	lsrs	r3, r3, #1
 800a0a6:	69ba      	ldr	r2, [r7, #24]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800a0ac:	69ba      	ldr	r2, [r7, #24]
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0b4:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	2bff      	cmp	r3, #255	; 0xff
 800a0ba:	d904      	bls.n	800a0c6 <VL53LX_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	22ff      	movs	r2, #255	; 0xff
 800a0c0:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
 800a0c4:	e004      	b.n	800a0d0 <VL53LX_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	7afa      	ldrb	r2, [r7, #11]
 800a0d4:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a



	if (status == VL53LX_ERROR_NONE)
 800a0d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10a      	bne.n	800a0f6 <VL53LX_set_ref_spad_char_config+0x9a>
		status =
			VL53LX_WrByte(
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	214b      	movs	r1, #75	; 0x4b
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f006 fd8e 	bl	8010c0c <VL53LX_WrByte>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53LX_ERROR_NONE)
 800a0f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10a      	bne.n	800a114 <VL53LX_set_ref_spad_char_config+0xb8>
		status =
			VL53LX_WrByte(
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a104:	461a      	mov	r2, r3
 800a106:	2160      	movs	r1, #96	; 0x60
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f006 fd7f 	bl	8010c0c <VL53LX_WrByte>
 800a10e:	4603      	mov	r3, r0
 800a110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a11a:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a122:	757b      	strb	r3, [r7, #21]

	if (status == VL53LX_ERROR_NONE)
 800a124:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d109      	bne.n	800a140 <VL53LX_set_ref_spad_char_config+0xe4>
		status =
			VL53LX_WriteMulti(
 800a12c:	f107 0214 	add.w	r2, r7, #20
 800a130:	2302      	movs	r3, #2
 800a132:	2178      	movs	r1, #120	; 0x78
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f006 fcfd 	bl	8010b34 <VL53LX_WriteMulti>
 800a13a:	4603      	mov	r3, r0
 800a13c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	893a      	ldrh	r2, [r7, #8]
 800a144:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53LX_ERROR_NONE)
 800a148:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d108      	bne.n	800a162 <VL53LX_set_ref_spad_char_config+0x106>
		status =
			VL53LX_WrWord(
 800a150:	893b      	ldrh	r3, [r7, #8]
 800a152:	461a      	mov	r2, r3
 800a154:	211c      	movs	r1, #28
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f006 fd82 	bl	8010c60 <VL53LX_WrWord>
 800a15c:	4603      	mov	r3, r0
 800a15e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a162:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a166:	2b00      	cmp	r3, #0
 800a168:	d108      	bne.n	800a17c <VL53LX_set_ref_spad_char_config+0x120>
		status =
			VL53LX_WrWord(
 800a16a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a16c:	461a      	mov	r2, r3
 800a16e:	2164      	movs	r1, #100	; 0x64
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f006 fd75 	bl	8010c60 <VL53LX_WrWord>
 800a176:	4603      	mov	r3, r0
 800a178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a17c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a180:	2b00      	cmp	r3, #0
 800a182:	d108      	bne.n	800a196 <VL53LX_set_ref_spad_char_config+0x13a>
		status =
			VL53LX_WrWord(
 800a184:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a186:	461a      	mov	r2, r3
 800a188:	2166      	movs	r1, #102	; 0x66
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f006 fd68 	bl	8010c60 <VL53LX_WrWord>
 800a190:	4603      	mov	r3, r0
 800a192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800a196:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3728      	adds	r7, #40	; 0x28
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800a1a2:	b5b0      	push	{r4, r5, r7, lr}
 800a1a4:	b090      	sub	sp, #64	; 0x40
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	3318      	adds	r3, #24
 800a1b4:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a1bc:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_smudge_corrector_config_t *pconfig =
 800a1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a1c4:	3314      	adds	r3, #20
 800a1c6:	623b      	str	r3, [r7, #32]
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ca:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a1ce:	3318      	adds	r3, #24
 800a1d0:	61fb      	str	r3, [r7, #28]
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d4:	61bb      	str	r3, [r7, #24]
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a1dc:	617b      	str	r3, [r7, #20]

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53LX_p_016;
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800a1ec:	4413      	add	r3, r2
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	f04f 0300 	mov.w	r3, #0
 800a1f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (peak_duration_us == 0)
 800a1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d102      	bne.n	800a204 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x62>
		peak_duration_us = 1000;
 800a1fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a202:	63fb      	str	r3, [r7, #60]	; 0x3c
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a204:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	f04f 0400 	mov.w	r4, #0
 800a210:	f04f 0500 	mov.w	r5, #0
 800a214:	015d      	lsls	r5, r3, #5
 800a216:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a21a:	0154      	lsls	r4, r2, #5
 800a21c:	4622      	mov	r2, r4
 800a21e:	462b      	mov	r3, r5
 800a220:	1a12      	subs	r2, r2, r0
 800a222:	eb63 0301 	sbc.w	r3, r3, r1
 800a226:	f04f 0400 	mov.w	r4, #0
 800a22a:	f04f 0500 	mov.w	r5, #0
 800a22e:	009d      	lsls	r5, r3, #2
 800a230:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a234:	0094      	lsls	r4, r2, #2
 800a236:	4622      	mov	r2, r4
 800a238:	462b      	mov	r3, r5
 800a23a:	1812      	adds	r2, r2, r0
 800a23c:	eb41 0303 	adc.w	r3, r1, r3
 800a240:	f04f 0000 	mov.w	r0, #0
 800a244:	f04f 0100 	mov.w	r1, #0
 800a248:	00d9      	lsls	r1, r3, #3
 800a24a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a24e:	00d0      	lsls	r0, r2, #3
 800a250:	4602      	mov	r2, r0
 800a252:	460b      	mov	r3, r1
 800a254:	4610      	mov	r0, r2
 800a256:	4619      	mov	r1, r3
 800a258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a25a:	461a      	mov	r2, r3
 800a25c:	f04f 0300 	mov.w	r3, #0
 800a260:	f7f6 f85e 	bl	8000320 <__aeabi_uldivmod>
 800a264:	4602      	mov	r2, r0
 800a266:	460b      	mov	r3, r1
 800a268:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a26c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	f04f 0400 	mov.w	r4, #0
 800a278:	f04f 0500 	mov.w	r5, #0
 800a27c:	015d      	lsls	r5, r3, #5
 800a27e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a282:	0154      	lsls	r4, r2, #5
 800a284:	4622      	mov	r2, r4
 800a286:	462b      	mov	r3, r5
 800a288:	1a12      	subs	r2, r2, r0
 800a28a:	eb63 0301 	sbc.w	r3, r3, r1
 800a28e:	f04f 0400 	mov.w	r4, #0
 800a292:	f04f 0500 	mov.w	r5, #0
 800a296:	009d      	lsls	r5, r3, #2
 800a298:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a29c:	0094      	lsls	r4, r2, #2
 800a29e:	4622      	mov	r2, r4
 800a2a0:	462b      	mov	r3, r5
 800a2a2:	1812      	adds	r2, r2, r0
 800a2a4:	eb41 0303 	adc.w	r3, r1, r3
 800a2a8:	f04f 0000 	mov.w	r0, #0
 800a2ac:	f04f 0100 	mov.w	r1, #0
 800a2b0:	00d9      	lsls	r1, r3, #3
 800a2b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a2b6:	00d0      	lsls	r0, r2, #3
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	4610      	mov	r0, r2
 800a2be:	4619      	mov	r1, r3
 800a2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	f04f 0300 	mov.w	r3, #0
 800a2c8:	f7f6 f82a 	bl	8000320 <__aeabi_uldivmod>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800a2d4:	6a3b      	ldr	r3, [r7, #32]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	8ad2      	ldrh	r2, [r2, #22]
 800a2dc:	fb02 f303 	mul.w	r3, r2, r3
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	f04f 0300 	mov.w	r3, #0
 800a2e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (temp64z == 0)
 800a2ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	d105      	bne.n	800a2fe <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x15c>
		temp64z = 1;
 800a2f2:	f04f 0201 	mov.w	r2, #1
 800a2f6:	f04f 0300 	mov.w	r3, #0
 800a2fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	temp64a = temp64a * 1000 * 256;
 800a2fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	f04f 0400 	mov.w	r4, #0
 800a30a:	f04f 0500 	mov.w	r5, #0
 800a30e:	015d      	lsls	r5, r3, #5
 800a310:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a314:	0154      	lsls	r4, r2, #5
 800a316:	4622      	mov	r2, r4
 800a318:	462b      	mov	r3, r5
 800a31a:	1a12      	subs	r2, r2, r0
 800a31c:	eb63 0301 	sbc.w	r3, r3, r1
 800a320:	f04f 0400 	mov.w	r4, #0
 800a324:	f04f 0500 	mov.w	r5, #0
 800a328:	009d      	lsls	r5, r3, #2
 800a32a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a32e:	0094      	lsls	r4, r2, #2
 800a330:	4622      	mov	r2, r4
 800a332:	462b      	mov	r3, r5
 800a334:	1812      	adds	r2, r2, r0
 800a336:	eb41 0303 	adc.w	r3, r1, r3
 800a33a:	f04f 0000 	mov.w	r0, #0
 800a33e:	f04f 0100 	mov.w	r1, #0
 800a342:	02d9      	lsls	r1, r3, #11
 800a344:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800a348:	02d0      	lsls	r0, r2, #11
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
 800a34e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800a352:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a356:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a35a:	f7f5 ffe1 	bl	8000320 <__aeabi_uldivmod>
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
 800a362:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = temp64a * 1000 * 256;
 800a366:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	f04f 0400 	mov.w	r4, #0
 800a372:	f04f 0500 	mov.w	r5, #0
 800a376:	015d      	lsls	r5, r3, #5
 800a378:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a37c:	0154      	lsls	r4, r2, #5
 800a37e:	4622      	mov	r2, r4
 800a380:	462b      	mov	r3, r5
 800a382:	1a12      	subs	r2, r2, r0
 800a384:	eb63 0301 	sbc.w	r3, r3, r1
 800a388:	f04f 0400 	mov.w	r4, #0
 800a38c:	f04f 0500 	mov.w	r5, #0
 800a390:	009d      	lsls	r5, r3, #2
 800a392:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a396:	0094      	lsls	r4, r2, #2
 800a398:	4622      	mov	r2, r4
 800a39a:	462b      	mov	r3, r5
 800a39c:	1812      	adds	r2, r2, r0
 800a39e:	eb41 0303 	adc.w	r3, r1, r3
 800a3a2:	f04f 0000 	mov.w	r0, #0
 800a3a6:	f04f 0100 	mov.w	r1, #0
 800a3aa:	02d9      	lsls	r1, r3, #11
 800a3ac:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800a3b0:	02d0      	lsls	r0, r2, #11
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800a3ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a3be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a3c2:	f7f5 ffad 	bl	8000320 <__aeabi_uldivmod>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pint->required_samples = (uint32_t)temp64a;
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d802      	bhi.n	800a3e2 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x240>
		pint->required_samples = 2;
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	2202      	movs	r2, #2
 800a3e0:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800a3e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3740      	adds	r7, #64	; 0x40
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a3f0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b096      	sub	sp, #88	; 0x58
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]
 800a3fc:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a3fe:	2300      	movs	r3, #0
 800a400:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	3318      	adds	r3, #24
 800a408:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800a40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a40c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a410:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800a412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a414:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800a418:	331c      	adds	r3, #28
 800a41a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800a41c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800a420:	2b01      	cmp	r3, #1
 800a422:	d107      	bne.n	800a434 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	889b      	ldrh	r3, [r3, #4]
 800a428:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	609a      	str	r2, [r3, #8]
 800a432:	e002      	b.n	800a43a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800a43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800a440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a442:	899b      	ldrh	r3, [r3, #12]
 800a444:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800a448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44a:	89db      	ldrh	r3, [r3, #14]
 800a44c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a456:	2b00      	cmp	r3, #0
 800a458:	d004      	beq.n	800a464 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x74>
		(pconfig->scaler_calc_method == 1)) &&
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800a460:	2b01      	cmp	r3, #1
 800a462:	d126      	bne.n	800a4b2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800a464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a466:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d022      	beq.n	800a4b2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a46c:	f107 0317 	add.w	r3, r7, #23
 800a470:	4619      	mov	r1, r3
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f000 fe75 	bl	800b162 <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800a478:	7dfb      	ldrb	r3, [r7, #23]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
			histo_merge_nb = 1;
 800a47e:	2301      	movs	r3, #1
 800a480:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800a482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a484:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d003      	beq.n	800a494 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa4>
			orig_xtalk_offset =
 800a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	653b      	str	r3, [r7, #80]	; 0x50
 800a492:	e006      	b.n	800a4a2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800a494:	7dfb      	ldrb	r3, [r7, #23]
 800a496:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800a498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49a:	3202      	adds	r2, #2
 800a49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a0:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800a4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a4:	889b      	ldrh	r3, [r3, #4]
 800a4a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800a4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ac:	88db      	ldrh	r3, [r3, #6]
 800a4ae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10a      	bne.n	800a4d2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
 800a4bc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d106      	bne.n	800a4d2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
		pout->gradient_zero_flag |= 0x01;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	795b      	ldrb	r3, [r3, #5]
 800a4c8:	f043 0301 	orr.w	r3, r3, #1
 800a4cc:	b2da      	uxtb	r2, r3
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10a      	bne.n	800a4f2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
 800a4dc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d106      	bne.n	800a4f2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		pout->gradient_zero_flag |= 0x02;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	795b      	ldrb	r3, [r3, #5]
 800a4e8:	f043 0302 	orr.w	r3, r3, #2
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800a4f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
		orig_xtalk_offset = 1;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a502:	2b01      	cmp	r3, #1
 800a504:	d108      	bne.n	800a518 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x128>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a50a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a512:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800a516:	e019      	b.n	800a54c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x15c>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800a518:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a51c:	019b      	lsls	r3, r3, #6
 800a51e:	461a      	mov	r2, r3
 800a520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a522:	fbb2 f3f3 	udiv	r3, r2, r3
 800a526:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800a530:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800a532:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800a536:	019b      	lsls	r3, r3, #6
 800a538:	461a      	mov	r2, r3
 800a53a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a53c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a540:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a54a:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a552:	2b00      	cmp	r3, #0
 800a554:	d12a      	bne.n	800a5ac <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1bc>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800a55e:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a562:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a566:	119b      	asrs	r3, r3, #6
 800a568:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a56a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a56c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a570:	db02      	blt.n	800a578 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x188>
			itemp32 = 0xFFFF;
 800a572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a576:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a57a:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800a588:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a58c:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a58e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a590:	119b      	asrs	r3, r3, #6
 800a592:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a59a:	db02      	blt.n	800a5a2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b2>
			itemp32 = 0xFFFF;
 800a59c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5a0:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a5a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5a4:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	81da      	strh	r2, [r3, #14]
 800a5aa:	e042      	b.n	800a632 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>
	} else if (pconfig->scaler_calc_method == 1) {
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d13d      	bne.n	800a632 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a5ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5bc:	1ad3      	subs	r3, r2, r3
 800a5be:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800a5c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	da00      	bge.n	800a5c8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d8>
 800a5c6:	330f      	adds	r3, #15
 800a5c8:	111b      	asrs	r3, r3, #4
 800a5ca:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800a5cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800a5d2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a5d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5d8:	4413      	add	r3, r2
 800a5da:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a5dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5e2:	db02      	blt.n	800a5ea <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1fa>
			itemp32 = 0xFFFF;
 800a5e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5e8:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a5ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5ec:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a5f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5f8:	1ad3      	subs	r3, r2, r3
 800a5fa:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800a5fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5fe:	4a52      	ldr	r2, [pc, #328]	; (800a748 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x358>)
 800a600:	fb82 1203 	smull	r1, r2, r2, r3
 800a604:	1152      	asrs	r2, r2, #5
 800a606:	17db      	asrs	r3, r3, #31
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800a60c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800a612:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800a616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a618:	4413      	add	r3, r2
 800a61a:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a61c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a61e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a622:	db02      	blt.n	800a62a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23a>
			itemp32 = 0xFFFF;
 800a624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a628:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a62a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a62c:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	785b      	ldrb	r3, [r3, #1]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d178      	bne.n	800a72c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
 800a63a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d074      	beq.n	800a72c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	2201      	movs	r2, #1
 800a646:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	62bb      	str	r3, [r7, #40]	; 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a64e:	f107 0317 	add.w	r3, r7, #23
 800a652:	4619      	mov	r1, r3
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f000 fd84 	bl	800b162 <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800a65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a65c:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800a660:	627b      	str	r3, [r7, #36]	; 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800a662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a664:	3308      	adds	r3, #8
 800a666:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) &&
 800a668:	7dfb      	ldrb	r3, [r7, #23]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d042      	beq.n	800a6f4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800a66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a670:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		if ((histo_merge_nb > 0) &&
 800a674:	2b01      	cmp	r3, #1
 800a676:	d13d      	bne.n	800a6f4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800a678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d03a      	beq.n	800a6f4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(nXtalk != 0)) {
			cXtalk =
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800a684:	6a3b      	ldr	r3, [r7, #32]
 800a686:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a68a:	fb02 f203 	mul.w	r2, r2, r3
 800a68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a690:	fbb2 f3f3 	udiv	r3, r2, r3
 800a694:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d004      	beq.n	800a6a6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b6>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800a6a0:	69fa      	ldr	r2, [r7, #28]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d303      	bcc.n	800a6ae <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2be>
				pout->new_xtalk_applied_flag = 0;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	719a      	strb	r2, [r3, #6]
 800a6ac:	e022      	b.n	800a6f4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			else {
				incXtalk = nXtalk / max;
 800a6ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6b6:	61bb      	str	r3, [r7, #24]
				cval = 0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800a6bc:	2300      	movs	r3, #0
 800a6be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800a6c2:	e00e      	b.n	800a6e2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2f2>
					cval += incXtalk;
 800a6c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800a6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a6d0:	601a      	str	r2, [r3, #0]
					pcpo++;
 800a6d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6d4:	3304      	adds	r3, #4
 800a6d6:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800a6d8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800a6dc:	3301      	adds	r3, #1
 800a6de:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800a6e2:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d3ea      	bcc.n	800a6c4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d4>
				}
				*pcpo = nXtalk;
 800a6ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6f2:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	799b      	ldrb	r3, [r3, #6]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d017      	beq.n	800a72c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800a700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a702:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a716:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	789b      	ldrb	r3, [r3, #2]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d105      	bne.n	800a72c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

			pconfig->smudge_corr_apply_enabled = 0;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800a72c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800a730:	2b01      	cmp	r3, #1
 800a732:	d002      	beq.n	800a73a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x34a>
		pout->smudge_corr_valid = 1;
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	2201      	movs	r2, #1
 800a738:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a73a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3758      	adds	r7, #88	; 0x58
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	66666667 	.word	0x66666667

0800a74c <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800a74c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a750:	b09a      	sub	sp, #104	; 0x68
 800a752:	af02      	add	r7, sp, #8
 800a754:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a756:	2300      	movs	r3, #0
 800a758:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	3318      	adds	r3, #24
 800a760:	64bb      	str	r3, [r7, #72]	; 0x48
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a768:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_smudge_corrector_config_t *pconfig =
 800a76a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a76c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a770:	3314      	adds	r3, #20
 800a772:	643b      	str	r3, [r7, #64]	; 0x40
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800a774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a776:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a77a:	3318      	adds	r3, #24
 800a77c:	63fb      	str	r3, [r7, #60]	; 0x3c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800a77e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a780:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a784:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800a786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a788:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800a78a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a78c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a790:	633b      	str	r3, [r7, #48]	; 0x30

	uint8_t	run_smudge_detection = 0;
 800a792:	2300      	movs	r3, #0
 800a794:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t merging_complete = 0;
 800a798:	2300      	movs	r3, #0
 800a79a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t	run_nodetect = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t ambient_check = 0;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	int32_t itemp32 = 0;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	65bb      	str	r3, [r7, #88]	; 0x58
	uint64_t utemp64 = 0;
 800a7ae:	f04f 0200 	mov.w	r2, #0
 800a7b2:	f04f 0300 	mov.w	r3, #0
 800a7b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t continue_processing = CONT_CONTINUE;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t xtalk_offset_out = 0;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t xtalk_offset_in = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	61fb      	str	r3, [r7, #28]
	uint32_t current_xtalk = 0;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	61bb      	str	r3, [r7, #24]
	uint32_t smudge_margin_adjusted = 0;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	617b      	str	r3, [r7, #20]
	uint8_t i = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t nodetect_index = 0;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a7dc:	f107 030b 	add.w	r3, r7, #11
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fcbd 	bl	800b162 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800a7e8:	7afb      	ldrb	r3, [r7, #11]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d004      	beq.n	800a7f8 <VL53LX_dynamic_xtalk_correction_corrector+0xac>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800a7ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7f0:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	if ((histo_merge_nb == 0) ||
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d001      	beq.n	800a7fc <VL53LX_dynamic_xtalk_correction_corrector+0xb0>
		histo_merge_nb = 1;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	72fb      	strb	r3, [r7, #11]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800a7fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a7fe:	f000 faeb 	bl	800add8 <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800a802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a806:	2b00      	cmp	r3, #0
 800a808:	d009      	beq.n	800a81e <VL53LX_dynamic_xtalk_correction_corrector+0xd2>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800a80a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80e:	7afa      	ldrb	r2, [r7, #11]
 800a810:	fb02 f303 	mul.w	r3, r2, r3
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800a814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a816:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d901      	bls.n	800a822 <VL53LX_dynamic_xtalk_correction_corrector+0xd6>
 800a81e:	2301      	movs	r3, #1
 800a820:	e000      	b.n	800a824 <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
 800a822:	2300      	movs	r3, #0
 800a824:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800a828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a82a:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d105      	bne.n	800a83e <VL53LX_dynamic_xtalk_correction_corrector+0xf2>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800a832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a834:	f893 2184 	ldrb.w	r2, [r3, #388]	; 0x184
 800a838:	7afb      	ldrb	r3, [r7, #11]
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d101      	bne.n	800a842 <VL53LX_dynamic_xtalk_correction_corrector+0xf6>
 800a83e:	2301      	movs	r3, #1
 800a840:	e000      	b.n	800a844 <VL53LX_dynamic_xtalk_correction_corrector+0xf8>
 800a842:	2300      	movs	r3, #0
	merging_complete =
 800a844:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800a848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a84a:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d10e      	bne.n	800a86e <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pconfig->smudge_corr_enabled == 1) &&
 800a850:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00a      	beq.n	800a86e <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pR->xmonitor.range_status
 800a858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a85a:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800a85e:	2b09      	cmp	r3, #9
 800a860:	d105      	bne.n	800a86e <VL53LX_dynamic_xtalk_correction_corrector+0x122>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800a862:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <VL53LX_dynamic_xtalk_correction_corrector+0x122>
 800a86a:	2301      	movs	r3, #1
 800a86c:	e000      	b.n	800a870 <VL53LX_dynamic_xtalk_correction_corrector+0x124>
 800a86e:	2300      	movs	r3, #0
	run_smudge_detection =
 800a870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		merging_complete;


	if ((pR->xmonitor.range_status
 800a874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a876:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800a87a:	2b09      	cmp	r3, #9
 800a87c:	f000 809e 	beq.w	800a9bc <VL53LX_dynamic_xtalk_correction_corrector+0x270>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800a880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a882:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800a884:	2b01      	cmp	r3, #1
 800a886:	f040 8099 	bne.w	800a9bc <VL53LX_dynamic_xtalk_correction_corrector+0x270>

		run_nodetect = 2;
 800a88a:	2302      	movs	r3, #2
 800a88c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		for (i = 0; i < pR->active_results; i++) {
 800a890:	2300      	movs	r3, #0
 800a892:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a896:	e02d      	b.n	800a8f4 <VL53LX_dynamic_xtalk_correction_corrector+0x1a8>
			if (pR->VL53LX_p_003[i].range_status ==
 800a898:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a89c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a89e:	214c      	movs	r1, #76	; 0x4c
 800a8a0:	fb01 f303 	mul.w	r3, r1, r3
 800a8a4:	4413      	add	r3, r2
 800a8a6:	335e      	adds	r3, #94	; 0x5e
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	2b09      	cmp	r3, #9
 800a8ac:	d11d      	bne.n	800a8ea <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800a8ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a8b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8b4:	214c      	movs	r1, #76	; 0x4c
 800a8b6:	fb01 f303 	mul.w	r3, r1, r3
 800a8ba:	4413      	add	r3, r2
 800a8bc:	335a      	adds	r3, #90	; 0x5a
 800a8be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8c2:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800a8c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8c6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	dc03      	bgt.n	800a8d4 <VL53LX_dynamic_xtalk_correction_corrector+0x188>
					run_nodetect = 0;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a8d2:	e00a      	b.n	800a8ea <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				} else {
					if (run_nodetect == 2) {
 800a8d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d106      	bne.n	800a8ea <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
						run_nodetect = 1;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						nodetect_index = i;
 800a8e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a8e6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		for (i = 0; i < pR->active_results; i++) {
 800a8ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f6:	7c9b      	ldrb	r3, [r3, #18]
 800a8f8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d3cb      	bcc.n	800a898 <VL53LX_dynamic_xtalk_correction_corrector+0x14c>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800a900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a904:	2b02      	cmp	r3, #2
 800a906:	d102      	bne.n	800a90e <VL53LX_dynamic_xtalk_correction_corrector+0x1c2>

			run_nodetect = 0;
 800a908:	2300      	movs	r3, #0
 800a90a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800a90e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
		amr =
 800a912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a914:	214c      	movs	r1, #76	; 0x4c
 800a916:	fb01 f303 	mul.w	r3, r1, r3
 800a91a:	4413      	add	r3, r2
 800a91c:	3348      	adds	r3, #72	; 0x48
 800a91e:	881b      	ldrh	r3, [r3, #0]
 800a920:	827b      	strh	r3, [r7, #18]

		if (run_nodetect == 1) {
 800a922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a926:	2b01      	cmp	r3, #1
 800a928:	d148      	bne.n	800a9bc <VL53LX_dynamic_xtalk_correction_corrector+0x270>




			utemp64 = 1000 * ((uint64_t)amr);
 800a92a:	8a78      	ldrh	r0, [r7, #18]
 800a92c:	f04f 0100 	mov.w	r1, #0
 800a930:	4602      	mov	r2, r0
 800a932:	460b      	mov	r3, r1
 800a934:	f04f 0400 	mov.w	r4, #0
 800a938:	f04f 0500 	mov.w	r5, #0
 800a93c:	015d      	lsls	r5, r3, #5
 800a93e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a942:	0154      	lsls	r4, r2, #5
 800a944:	4622      	mov	r2, r4
 800a946:	462b      	mov	r3, r5
 800a948:	1a12      	subs	r2, r2, r0
 800a94a:	eb63 0301 	sbc.w	r3, r3, r1
 800a94e:	f04f 0400 	mov.w	r4, #0
 800a952:	f04f 0500 	mov.w	r5, #0
 800a956:	009d      	lsls	r5, r3, #2
 800a958:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a95c:	0094      	lsls	r4, r2, #2
 800a95e:	4622      	mov	r2, r4
 800a960:	462b      	mov	r3, r5
 800a962:	1812      	adds	r2, r2, r0
 800a964:	eb41 0303 	adc.w	r3, r1, r3
 800a968:	f04f 0000 	mov.w	r0, #0
 800a96c:	f04f 0100 	mov.w	r1, #0
 800a970:	00d9      	lsls	r1, r3, #3
 800a972:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a976:	00d0      	lsls	r0, r2, #3
 800a978:	4602      	mov	r2, r0
 800a97a:	460b      	mov	r3, r1
 800a97c:	e9c7 2308 	strd	r2, r3, [r7, #32]


			utemp64 = utemp64 << 9;
 800a980:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a984:	f04f 0200 	mov.w	r2, #0
 800a988:	f04f 0300 	mov.w	r3, #0
 800a98c:	024b      	lsls	r3, r1, #9
 800a98e:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800a992:	0242      	lsls	r2, r0, #9
 800a994:	e9c7 2308 	strd	r2, r3, [r7, #32]


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800a998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a99a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a99c:	461a      	mov	r2, r3
 800a99e:	f04f 0300 	mov.w	r3, #0
 800a9a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a9a6:	4299      	cmp	r1, r3
 800a9a8:	bf08      	it	eq
 800a9aa:	4290      	cmpeq	r0, r2
 800a9ac:	d203      	bcs.n	800a9b6 <VL53LX_dynamic_xtalk_correction_corrector+0x26a>
				run_nodetect = 1;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a9b4:	e002      	b.n	800a9bc <VL53LX_dynamic_xtalk_correction_corrector+0x270>
			else
				run_nodetect = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		}
	}


	if (run_smudge_detection) {
 800a9bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f000 8101 	beq.w	800abc8 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>

		pint->nodetect_counter = 0;
 800a9c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f7ff fbe8 	bl	800a1a2 <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800a9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800a9d8:	61fb      	str	r3, [r7, #28]
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	60fb      	str	r3, [r7, #12]
		current_xtalk = ((uint32_t)cco) << 2;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	61bb      	str	r3, [r7, #24]


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800a9e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9e8:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	617b      	str	r3, [r7, #20]


		itemp32 = xtalk_offset_in - current_xtalk +
 800a9ee:	69fa      	ldr	r2, [r7, #28]
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	1ad2      	subs	r2, r2, r3
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800a9fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	da02      	bge.n	800aa06 <VL53LX_dynamic_xtalk_correction_corrector+0x2ba>
			itemp32 = itemp32 * (-1);
 800aa00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa02:	425b      	negs	r3, r3
 800aa04:	65bb      	str	r3, [r7, #88]	; 0x58


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800aa06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa08:	699b      	ldr	r3, [r3, #24]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	dd0c      	ble.n	800aa2c <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800aa12:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted)) {
 800aa14:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800aa16:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	da03      	bge.n	800aa26 <VL53LX_dynamic_xtalk_correction_corrector+0x2da>
				pout->single_xtalk_delta_flag = 1;
 800aa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa20:	2201      	movs	r2, #1
 800aa22:	709a      	strb	r2, [r3, #2]
 800aa24:	e002      	b.n	800aa2c <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800aa26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa28:	2202      	movs	r2, #2
 800aa2a:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800aa2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	1c5a      	adds	r2, r3, #1
 800aa32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa34:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800aa36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa3c:	695b      	ldr	r3, [r3, #20]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d906      	bls.n	800aa50 <VL53LX_dynamic_xtalk_correction_corrector+0x304>
			pout->sample_limit_exceeded_flag = 1;
 800aa42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa44:	2201      	movs	r2, #1
 800aa46:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800aa48:	2302      	movs	r3, #2
 800aa4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800aa4e:	e00d      	b.n	800aa6c <VL53LX_dynamic_xtalk_correction_corrector+0x320>
		} else {
			pint->accumulator = pint->accumulator +
 800aa50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa52:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	461a      	mov	r2, r3
 800aa5a:	f04f 0300 	mov.w	r3, #0
 800aa5e:	eb10 0802 	adds.w	r8, r0, r2
 800aa62:	eb41 0903 	adc.w	r9, r1, r3
 800aa66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa68:	e9c3 8902 	strd	r8, r9, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800aa6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d202      	bcs.n	800aa7e <VL53LX_dynamic_xtalk_correction_corrector+0x332>
			continue_processing = CONT_NEXT_LOOP;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800aa7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa80:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800aa84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	461a      	mov	r2, r3
 800aa8a:	f04f 0300 	mov.w	r3, #0
 800aa8e:	f7f5 fc47 	bl	8000320 <__aeabi_uldivmod>
 800aa92:	4602      	mov	r2, r0
 800aa94:	460b      	mov	r3, r1
		xtalk_offset_out =
 800aa96:	4613      	mov	r3, r2
 800aa98:	653b      	str	r3, [r7, #80]	; 0x50
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800aa9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	1ad2      	subs	r2, r2, r3
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800aaa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	da02      	bge.n	800aab2 <VL53LX_dynamic_xtalk_correction_corrector+0x366>
			itemp32 = itemp32 * (-1);
 800aaac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aaae:	425b      	negs	r3, r3
 800aab0:	65bb      	str	r3, [r7, #88]	; 0x58

		if (continue_processing == CONT_CONTINUE &&
 800aab2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d112      	bne.n	800aae0 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800aaba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aabc:	69db      	ldr	r3, [r3, #28]
 800aabe:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800aac0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aac2:	4293      	cmp	r3, r2
 800aac4:	db0c      	blt.n	800aae0 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800aac6:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted))
 800aac8:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800aaca:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800aacc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aace:	429a      	cmp	r2, r3
 800aad0:	da03      	bge.n	800aada <VL53LX_dynamic_xtalk_correction_corrector+0x38e>
				pout->averaged_xtalk_delta_flag = 1;
 800aad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad4:	2201      	movs	r2, #1
 800aad6:	70da      	strb	r2, [r3, #3]
 800aad8:	e002      	b.n	800aae0 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800aada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aadc:	2202      	movs	r2, #2
 800aade:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800aae0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d108      	bne.n	800aafa <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800aae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaea:	69db      	ldr	r3, [r3, #28]
 800aaec:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800aaee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	da02      	bge.n	800aafa <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			)

			continue_processing = CONT_RESET;
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



		pout->smudge_corr_clipped = 0;
 800aafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafc:	2200      	movs	r2, #0
 800aafe:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800ab00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d111      	bne.n	800ab2c <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800ab08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab0a:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00d      	beq.n	800ab2c <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800ab10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab12:	6a1b      	ldr	r3, [r3, #32]
 800ab14:	7afa      	ldrb	r2, [r7, #11]
 800ab16:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800ab1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d905      	bls.n	800ab2c <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
				pout->smudge_corr_clipped = 1;
 800ab20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab22:	2201      	movs	r2, #1
 800ab24:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800ab26:	2302      	movs	r3, #2
 800ab28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800ab2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab2e:	7c1b      	ldrb	r3, [r3, #16]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d007      	beq.n	800ab44 <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800ab34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab36:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800ab38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d902      	bls.n	800ab44 <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			xtalk_offset_out =
 800ab3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800ab44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab46:	7c1b      	ldrb	r3, [r3, #16]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d107      	bne.n	800ab5c <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800ab4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab4e:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800ab50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d202      	bcs.n	800ab5c <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			xtalk_offset_out =
 800ab56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800ab5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab5e:	089b      	lsrs	r3, r3, #2
 800ab60:	653b      	str	r3, [r7, #80]	; 0x50
		if (xtalk_offset_out > 0x3FFFF)
 800ab62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ab68:	d301      	bcc.n	800ab6e <VL53LX_dynamic_xtalk_correction_corrector+0x422>
			xtalk_offset_out = 0x3FFFF;
 800ab6a:	4b3f      	ldr	r3, [pc, #252]	; (800ac68 <VL53LX_dynamic_xtalk_correction_corrector+0x51c>)
 800ab6c:	653b      	str	r3, [r7, #80]	; 0x50


		if (continue_processing == CONT_CONTINUE) {
 800ab6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d10d      	bne.n	800ab92 <VL53LX_dynamic_xtalk_correction_corrector+0x446>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800ab76:	2300      	movs	r3, #0
 800ab78:	9301      	str	r3, [sp, #4]
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f7ff fc33 	bl	800a3f0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800ab8a:	2302      	movs	r3, #2
 800ab8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800ab90:	e009      	b.n	800aba6 <VL53LX_dynamic_xtalk_correction_corrector+0x45a>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800ab92:	2301      	movs	r3, #1
 800ab94:	9301      	str	r3, [sp, #4]
 800ab96:	2301      	movs	r3, #1
 800ab98:	9300      	str	r3, [sp, #0]
 800ab9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7ff fc25 	bl	800a3f0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800aba6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d10c      	bne.n	800abc8 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>
			pint->accumulator = 0;
 800abae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800abb0:	f04f 0200 	mov.w	r2, #0
 800abb4:	f04f 0300 	mov.w	r3, #0
 800abb8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800abbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abbe:	2200      	movs	r2, #0
 800abc0:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800abc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abc4:	2200      	movs	r2, #0
 800abc6:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800abc8:	2300      	movs	r3, #0
 800abca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (run_nodetect == 1) {
 800abce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d140      	bne.n	800ac58 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>

		pint->nodetect_counter += 1;
 800abd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	1c5a      	adds	r2, r3, #1
 800abdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abde:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800abe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abe2:	691a      	ldr	r2, [r3, #16]
 800abe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe8:	429a      	cmp	r2, r3
 800abea:	d202      	bcs.n	800abf2 <VL53LX_dynamic_xtalk_correction_corrector+0x4a6>
			continue_processing = CONT_NEXT_LOOP;
 800abec:	2301      	movs	r3, #1
 800abee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800abf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf6:	653b      	str	r3, [r7, #80]	; 0x50

		if (continue_processing == CONT_CONTINUE) {
 800abf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d110      	bne.n	800ac22 <VL53LX_dynamic_xtalk_correction_corrector+0x4d6>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800ac00:	2300      	movs	r3, #0
 800ac02:	9301      	str	r3, [sp, #4]
 800ac04:	2300      	movs	r3, #0
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7ff fbee 	bl	800a3f0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800ac14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac16:	2202      	movs	r2, #2
 800ac18:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800ac20:	e009      	b.n	800ac36 <VL53LX_dynamic_xtalk_correction_corrector+0x4ea>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800ac22:	2301      	movs	r3, #1
 800ac24:	9301      	str	r3, [sp, #4]
 800ac26:	2300      	movs	r3, #0
 800ac28:	9300      	str	r3, [sp, #0]
 800ac2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f7ff fbdd 	bl	800a3f0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800ac36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d10c      	bne.n	800ac58 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>
			pint->accumulator = 0;
 800ac3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac40:	f04f 0200 	mov.w	r2, #0
 800ac44:	f04f 0300 	mov.w	r3, #0
 800ac48:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800ac4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac4e:	2200      	movs	r2, #0
 800ac50:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800ac52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac54:	2200      	movs	r2, #0
 800ac56:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800ac58:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3760      	adds	r7, #96	; 0x60
 800ac60:	46bd      	mov	sp, r7
 800ac62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ac66:	bf00      	nop
 800ac68:	0003ffff 	.word	0x0003ffff

0800ac6c <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ac74:	2300      	movs	r3, #0
 800ac76:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3318      	adds	r3, #24
 800ac7c:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800ac84:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ac8c:	3314      	adds	r3, #20
 800ac8e:	2201      	movs	r2, #1
 800ac90:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ac98:	3315      	adds	r3, #21
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800aca4:	3316      	adds	r3, #22
 800aca6:	2200      	movs	r2, #0
 800aca8:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800acb0:	3318      	adds	r3, #24
 800acb2:	2200      	movs	r2, #0
 800acb4:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800acbc:	331c      	adds	r3, #28
 800acbe:	2264      	movs	r2, #100	; 0x64
 800acc0:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800acc8:	2200      	movs	r2, #0
 800acca:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800acd2:	3304      	adds	r3, #4
 800acd4:	2200      	movs	r2, #0
 800acd6:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800acde:	3308      	adds	r3, #8
 800ace0:	22c8      	movs	r2, #200	; 0xc8
 800ace2:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800acea:	330c      	adds	r3, #12
 800acec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800acf0:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800acf8:	3310      	adds	r3, #16
 800acfa:	f44f 729a 	mov.w	r2, #308	; 0x134
 800acfe:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800ad06:	3314      	adds	r3, #20
 800ad08:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ad0c:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800ad14:	3318      	adds	r3, #24
 800ad16:	2280      	movs	r2, #128	; 0x80
 800ad18:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800ad20:	331c      	adds	r3, #28
 800ad22:	2200      	movs	r2, #0
 800ad24:	701a      	strb	r2, [r3, #0]
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800ad2c:	331e      	adds	r3, #30
 800ad2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad32:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ad3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad3e:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ad46:	3302      	adds	r3, #2
 800ad48:	2200      	movs	r2, #0
 800ad4a:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ad52:	3304      	adds	r3, #4
 800ad54:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
 800ad58:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ad60:	3308      	adds	r3, #8
 800ad62:	2228      	movs	r2, #40	; 0x28
 800ad64:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ad6c:	330c      	adds	r3, #12
 800ad6e:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800ad72:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ad7a:	3310      	adds	r3, #16
 800ad7c:	f44f 7261 	mov.w	r2, #900	; 0x384
 800ad80:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ad88:	3314      	adds	r3, #20
 800ad8a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ad8e:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ad96:	3318      	adds	r3, #24
 800ad98:	2200      	movs	r2, #0
 800ad9a:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.required_samples = 0;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ada2:	331c      	adds	r3, #28
 800ada4:	2200      	movs	r2, #0
 800ada6:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.accumulator = 0;
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	f503 519f 	add.w	r1, r3, #5088	; 0x13e0
 800adae:	f04f 0200 	mov.w	r2, #0
 800adb2:	f04f 0300 	mov.w	r3, #0
 800adb6:	e9c1 2300 	strd	r2, r3, [r1]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800adc0:	3308      	adds	r3, #8
 800adc2:	2200      	movs	r2, #0
 800adc4:	601a      	str	r2, [r3, #0]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f000 f806 	bl	800add8 <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800adcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800add0:	4618      	mov	r0, r3
 800add2:	3718      	adds	r7, #24
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ade0:	2300      	movs	r3, #0
 800ade2:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800adea:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	2200      	movs	r2, #0
 800adf0:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	2200      	movs	r2, #0
 800adf6:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	2200      	movs	r2, #0
 800adfc:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	2200      	movs	r2, #0
 800ae02:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	2200      	movs	r2, #0
 800ae08:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	2200      	movs	r2, #0
 800ae14:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	2200      	movs	r2, #0
 800ae26:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800ae28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3714      	adds	r7, #20
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ae40:	2300      	movs	r3, #0
 800ae42:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	3318      	adds	r3, #24
 800ae48:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800ae50:	331c      	adds	r3, #28
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	801a      	strh	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800ae66:	3302      	adds	r3, #2
 800ae68:	2200      	movs	r2, #0
 800ae6a:	801a      	strh	r2, [r3, #0]
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800ae72:	3304      	adds	r3, #4
 800ae74:	2218      	movs	r2, #24
 800ae76:	2100      	movs	r1, #0
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f009 f8c1 	bl	8014000 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800ae7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b085      	sub	sp, #20
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ae92:	2300      	movs	r3, #0
 800ae94:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	3318      	adds	r3, #24
 800ae9a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800aea2:	3310      	adds	r3, #16
 800aea4:	2203      	movs	r2, #3
 800aea6:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800aeae:	3311      	adds	r3, #17
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800aeba:	3312      	adds	r3, #18
 800aebc:	2200      	movs	r2, #0
 800aebe:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800aec6:	3313      	adds	r3, #19
 800aec8:	2200      	movs	r2, #0
 800aeca:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800aed2:	3314      	adds	r3, #20
 800aed4:	2200      	movs	r2, #0
 800aed6:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800aede:	3315      	adds	r3, #21
 800aee0:	2200      	movs	r2, #0
 800aee2:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800aeea:	3316      	adds	r3, #22
 800aeec:	2200      	movs	r2, #0
 800aeee:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800aef6:	3318      	adds	r3, #24
 800aef8:	2200      	movs	r2, #0
 800aefa:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800af02:	331c      	adds	r3, #28
 800af04:	2200      	movs	r2, #0
 800af06:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800af08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3714      	adds	r7, #20
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <VL53LX_low_power_auto_data_stop_range>:

VL53LX_Error VL53LX_low_power_auto_data_stop_range(
	VL53LX_DEV                          Dev
	)
{
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800af20:	2300      	movs	r3, #0
 800af22:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	3318      	adds	r3, #24
 800af28:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800af30:	3312      	adds	r3, #18
 800af32:	22ff      	movs	r2, #255	; 0xff
 800af34:	701a      	strb	r2, [r3, #0]

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800af3c:	3316      	adds	r3, #22
 800af3e:	2200      	movs	r2, #0
 800af40:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800af48:	3318      	adds	r3, #24
 800af4a:	2200      	movs	r2, #0
 800af4c:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800af54:	331c      	adds	r3, #28
 800af56:	2200      	movs	r2, #0
 800af58:	801a      	strh	r2, [r3, #0]


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800af60:	3314      	adds	r3, #20
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d007      	beq.n	800af78 <VL53LX_low_power_auto_data_stop_range+0x60>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800af6e:	3314      	adds	r3, #20
 800af70:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__init =
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800af7e:	3315      	adds	r3, #21
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d007      	beq.n	800af96 <VL53LX_low_power_auto_data_stop_range+0x7e>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800af8c:	3315      	adds	r3, #21
 800af8e:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	LOG_FUNCTION_END(status);

	return status;
 800af9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3714      	adds	r7, #20
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr

0800afae <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800afae:	b480      	push	{r7}
 800afb0:	b085      	sub	sp, #20
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	3318      	adds	r3, #24
 800afba:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800afbc:	2300      	movs	r3, #0
 800afbe:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f893 22e3 	ldrb.w	r2, [r3, #739]	; 0x2e3
	pdev->low_power_auto_data.saved_vhv_init =
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800afcc:	3314      	adds	r3, #20
 800afce:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
	pdev->low_power_auto_data.saved_vhv_timeout =
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800afdc:	3315      	adds	r3, #21
 800afde:	701a      	strb	r2, [r3, #0]


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f893 32e3 	ldrb.w	r3, [r3, #739]	; 0x2e3
 800afe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afea:	b2da      	uxtb	r2, r3
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800aff8:	f003 0303 	and.w	r3, r3, #3
 800affc:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b004:	3310      	adds	r3, #16
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b00c:	4413      	add	r3, r2
 800b00e:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2201      	movs	r2, #1
 800b01a:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 800b024:	331e      	adds	r3, #30
 800b026:	781a      	ldrb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result =
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b02e:	3316      	adds	r3, #22
 800b030:	701a      	strb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b038:	3316      	adds	r3, #22
 800b03a:	781a      	ldrb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

	LOG_FUNCTION_END(status);

	return status;
 800b042:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3714      	adds	r7, #20
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr

0800b052 <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800b052:	b480      	push	{r7}
 800b054:	b087      	sub	sp, #28
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	3318      	adds	r3, #24
 800b05e:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f203 3366 	addw	r3, r3, #870	; 0x366
 800b066:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b068:	2300      	movs	r3, #0
 800b06a:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	8a1b      	ldrh	r3, [r3, #16]
 800b070:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	891b      	ldrh	r3, [r3, #8]
 800b076:	4413      	add	r3, r2
	utemp32a =
 800b078:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b080:	d302      	bcc.n	800b088 <VL53LX_low_power_auto_update_DSS+0x36>
		utemp32a = 0xFFFF;
 800b082:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b086:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	041b      	lsls	r3, r3, #16
 800b08c:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800b094:	2b00      	cmp	r3, #0
 800b096:	d102      	bne.n	800b09e <VL53LX_low_power_auto_update_DSS+0x4c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b098:	23f1      	movs	r3, #241	; 0xf1
 800b09a:	75fb      	strb	r3, [r7, #23]
 800b09c:	e03f      	b.n	800b11e <VL53LX_low_power_auto_update_DSS+0xcc>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800b0a4:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0ac:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b0b4:	3318      	adds	r3, #24
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	601a      	str	r2, [r3, #0]
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800b0c0:	041b      	lsls	r3, r3, #16
 800b0c2:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b0ca:	3318      	adds	r3, #24
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d102      	bne.n	800b0d8 <VL53LX_low_power_auto_update_DSS+0x86>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b0d2:	23f1      	movs	r3, #241	; 0xf1
 800b0d4:	75fb      	strb	r3, [r7, #23]
 800b0d6:	e022      	b.n	800b11e <VL53LX_low_power_auto_update_DSS+0xcc>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b0de:	3318      	adds	r3, #24
 800b0e0:	681b      	ldr	r3, [r3, #0]
			utemp32a = utemp32a /
 800b0e2:	693a      	ldr	r2, [r7, #16]
 800b0e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0e8:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0f0:	d302      	bcc.n	800b0f8 <VL53LX_low_power_auto_update_DSS+0xa6>
				utemp32a = 0xFFFF;
 800b0f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b0f6:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b102:	331c      	adds	r3, #28
 800b104:	801a      	strh	r2, [r3, #0]


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b10c:	331c      	adds	r3, #28
 800b10e:	881a      	ldrh	r2, [r3, #0]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
			pdev->gen_cfg.dss_config__roi_mode_control =
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2202      	movs	r2, #2
 800b11a:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800b11e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b122:	f113 0f0f 	cmn.w	r3, #15
 800b126:	d114      	bne.n	800b152 <VL53LX_low_power_auto_update_DSS+0x100>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b12e:	331c      	adds	r3, #28
 800b130:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b134:	801a      	strh	r2, [r3, #0]


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b13c:	331c      	adds	r3, #28
 800b13e:	881a      	ldrh	r2, [r3, #0]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2202      	movs	r2, #2
 800b14a:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800b14e:	2300      	movs	r3, #0
 800b150:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b152:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b156:	4618      	mov	r0, r3
 800b158:	371c      	adds	r7, #28
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800b162:	b480      	push	{r7}
 800b164:	b087      	sub	sp, #28
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	3318      	adds	r3, #24
 800b170:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b172:	2300      	movs	r3, #0
 800b174:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800b176:	2300      	movs	r3, #0
 800b178:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800b180:	2b07      	cmp	r3, #7
 800b182:	bf0c      	ite	eq
 800b184:	2301      	moveq	r3, #1
 800b186:	2300      	movne	r3, #0
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b18c:	2300      	movs	r3, #0
 800b18e:	75fb      	strb	r3, [r7, #23]
 800b190:	e019      	b.n	800b1c6 <VL53LX_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800b192:	7df9      	ldrb	r1, [r7, #23]
 800b194:	7bbb      	ldrb	r3, [r7, #14]
 800b196:	6938      	ldr	r0, [r7, #16]
 800b198:	461a      	mov	r2, r3
 800b19a:	0052      	lsls	r2, r2, #1
 800b19c:	441a      	add	r2, r3
 800b19e:	0153      	lsls	r3, r2, #5
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	005b      	lsls	r3, r3, #1
 800b1a6:	440b      	add	r3, r1
 800b1a8:	019b      	lsls	r3, r3, #6
 800b1aa:	4413      	add	r3, r2
 800b1ac:	4403      	add	r3, r0
 800b1ae:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800b1b2:	330c      	adds	r3, #12
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	dd02      	ble.n	800b1c0 <VL53LX_compute_histo_merge_nb+0x5e>
			sum++;
 800b1ba:	7dbb      	ldrb	r3, [r7, #22]
 800b1bc:	3301      	adds	r3, #1
 800b1be:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b1c0:	7dfb      	ldrb	r3, [r7, #23]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	75fb      	strb	r3, [r7, #23]
 800b1c6:	7dfb      	ldrb	r3, [r7, #23]
 800b1c8:	2b05      	cmp	r3, #5
 800b1ca:	d9e2      	bls.n	800b192 <VL53LX_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	7dba      	ldrb	r2, [r7, #22]
 800b1d0:	701a      	strb	r2, [r3, #0]

	return status;
 800b1d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	371c      	adds	r7, #28
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b085      	sub	sp, #20
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800b1f0:	88fb      	ldrh	r3, [r7, #6]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d005      	beq.n	800b202 <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800b1f6:	88fb      	ldrh	r3, [r7, #6]
 800b1f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b1fc:	fb92 f3f3 	sdiv	r3, r2, r3
 800b200:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800b202:	68fb      	ldr	r3, [r7, #12]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3714      	adds	r7, #20
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800b210:	b480      	push	{r7}
 800b212:	b089      	sub	sp, #36	; 0x24
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	607a      	str	r2, [r7, #4]
 800b21c:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800b21e:	f04f 0200 	mov.w	r2, #0
 800b222:	f04f 0300 	mov.w	r3, #0
 800b226:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	fb02 f303 	mul.w	r3, r2, r3
 800b236:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	0b1b      	lsrs	r3, r3, #12
 800b23c:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	461a      	mov	r2, r3
 800b242:	f04f 0300 	mov.w	r3, #0
 800b246:	e9c7 2306 	strd	r2, r3, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	68ba      	ldr	r2, [r7, #8]
 800b24e:	fb02 f303 	mul.w	r3, r2, r3
 800b252:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	091b      	lsrs	r3, r3, #4
 800b258:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	461a      	mov	r2, r3
 800b25e:	f04f 0300 	mov.w	r3, #0
 800b262:	69f9      	ldr	r1, [r7, #28]
 800b264:	fb02 f001 	mul.w	r0, r2, r1
 800b268:	69b9      	ldr	r1, [r7, #24]
 800b26a:	fb03 f101 	mul.w	r1, r3, r1
 800b26e:	4401      	add	r1, r0
 800b270:	69b8      	ldr	r0, [r7, #24]
 800b272:	fba0 2302 	umull	r2, r3, r0, r2
 800b276:	4419      	add	r1, r3
 800b278:	460b      	mov	r3, r1
 800b27a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800b27e:	e9c7 2306 	strd	r2, r3, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800b282:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b286:	f04f 0200 	mov.w	r2, #0
 800b28a:	f04f 0300 	mov.w	r3, #0
 800b28e:	0b02      	lsrs	r2, r0, #12
 800b290:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b294:	0b0b      	lsrs	r3, r1, #12
 800b296:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800b29a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	bf08      	it	eq
 800b2a2:	2a00      	cmpeq	r2, #0
 800b2a4:	d305      	bcc.n	800b2b2 <VL53LX_duration_maths+0xa2>
		tmp_long_int = 0xFFFFFFFF;
 800b2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2aa:	f04f 0300 	mov.w	r3, #0
 800b2ae:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	617b      	str	r3, [r7, #20]

	return duration_us;
 800b2b6:	697b      	ldr	r3, [r7, #20]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3724      	adds	r7, #36	; 0x24
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800b2c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b2c8:	b08e      	sub	sp, #56	; 0x38
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	60f8      	str	r0, [r7, #12]
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	607a      	str	r2, [r7, #4]
 800b2d2:	817b      	strh	r3, [r7, #10]
	uint64_t total_hist_counts  = 0;
 800b2d4:	f04f 0200 	mov.w	r2, #0
 800b2d8:	f04f 0300 	mov.w	r3, #0
 800b2dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint64_t xtalk_per_spad     = 0;
 800b2e0:	f04f 0200 	mov.w	r2, #0
 800b2e4:	f04f 0300 	mov.w	r3, #0
 800b2e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint32_t rate_per_spad_kcps = 0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	627b      	str	r3, [r7, #36]	; 0x24





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	f04f 0400 	mov.w	r4, #0
 800b300:	f04f 0500 	mov.w	r5, #0
 800b304:	015d      	lsls	r5, r3, #5
 800b306:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800b30a:	0154      	lsls	r4, r2, #5
 800b30c:	4622      	mov	r2, r4
 800b30e:	462b      	mov	r3, r5
 800b310:	1a12      	subs	r2, r2, r0
 800b312:	eb63 0301 	sbc.w	r3, r3, r1
 800b316:	f04f 0400 	mov.w	r4, #0
 800b31a:	f04f 0500 	mov.w	r5, #0
 800b31e:	009d      	lsls	r5, r3, #2
 800b320:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800b324:	0094      	lsls	r4, r2, #2
 800b326:	4622      	mov	r2, r4
 800b328:	462b      	mov	r3, r5
 800b32a:	1812      	adds	r2, r2, r0
 800b32c:	eb41 0303 	adc.w	r3, r1, r3
 800b330:	f04f 0000 	mov.w	r0, #0
 800b334:	f04f 0100 	mov.w	r1, #0
 800b338:	02d9      	lsls	r1, r3, #11
 800b33a:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800b33e:	02d0      	lsls	r0, r2, #11
 800b340:	4602      	mov	r2, r0
 800b342:	460b      	mov	r3, r1
 800b344:	e9c7 2306 	strd	r2, r3, [r7, #24]
			* 1000 * 256);

	if (num_spads != 0)
 800b348:	897b      	ldrh	r3, [r7, #10]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00a      	beq.n	800b364 <VL53LX_events_per_spad_maths+0xa0>
		total_hist_counts = do_division_u(
 800b34e:	897a      	ldrh	r2, [r7, #10]
 800b350:	f04f 0300 	mov.w	r3, #0
 800b354:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b358:	f7f4 ffe2 	bl	8000320 <__aeabi_uldivmod>
 800b35c:	4602      	mov	r2, r0
 800b35e:	460b      	mov	r3, r1
 800b360:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d021      	beq.n	800b3ae <VL53LX_events_per_spad_maths+0xea>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b36a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800b36e:	f04f 0200 	mov.w	r2, #0
 800b372:	f04f 0300 	mov.w	r3, #0
 800b376:	02cb      	lsls	r3, r1, #11
 800b378:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b37c:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800b37e:	6879      	ldr	r1, [r7, #4]
 800b380:	0849      	lsrs	r1, r1, #1
 800b382:	4608      	mov	r0, r1
 800b384:	f04f 0100 	mov.w	r1, #0
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b388:	eb12 0800 	adds.w	r8, r2, r0
 800b38c:	eb43 0901 	adc.w	r9, r3, r1
 800b390:	e9c7 8904 	strd	r8, r9, [r7, #16]

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	461a      	mov	r2, r3
 800b398:	f04f 0300 	mov.w	r3, #0
 800b39c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b3a0:	f7f4 ffbe 	bl	8000320 <__aeabi_uldivmod>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800b3ac:	e00b      	b.n	800b3c6 <VL53LX_events_per_spad_maths+0x102>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800b3ae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800b3b2:	f04f 0200 	mov.w	r2, #0
 800b3b6:	f04f 0300 	mov.w	r3, #0
 800b3ba:	02cb      	lsls	r3, r1, #11
 800b3bc:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b3c0:	02c2      	lsls	r2, r0, #11
 800b3c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800b3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c8:	627b      	str	r3, [r7, #36]	; 0x24

	return rate_per_spad_kcps;
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3738      	adds	r7, #56	; 0x38
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b3d6 <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800b3d6:	b480      	push	{r7}
 800b3d8:	b085      	sub	sp, #20
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b3e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b3e6:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800b3e8:	e002      	b.n	800b3f0 <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	089b      	lsrs	r3, r3, #2
 800b3ee:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b3f0:	68ba      	ldr	r2, [r7, #8]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d8f8      	bhi.n	800b3ea <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800b3f8:	e017      	b.n	800b42a <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	4413      	add	r3, r2
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	429a      	cmp	r2, r3
 800b404:	d30b      	bcc.n	800b41e <VL53LX_isqrt+0x48>
			num -= res + bit;
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	4413      	add	r3, r2
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	1ad3      	subs	r3, r2, r3
 800b410:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	085b      	lsrs	r3, r3, #1
 800b416:	68ba      	ldr	r2, [r7, #8]
 800b418:	4413      	add	r3, r2
 800b41a:	60fb      	str	r3, [r7, #12]
 800b41c:	e002      	b.n	800b424 <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	085b      	lsrs	r3, r3, #1
 800b422:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	089b      	lsrs	r3, r3, #2
 800b428:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d1e4      	bne.n	800b3fa <VL53LX_isqrt+0x24>
	}

	return res;
 800b430:	68fb      	ldr	r3, [r7, #12]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3714      	adds	r7, #20
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr

0800b43e <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b084      	sub	sp, #16
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800b446:	2300      	movs	r3, #0
 800b448:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b454:	4618      	mov	r0, r3
 800b456:	f000 fa97 	bl	800b988 <VL53LX_decode_vcsel_period>
 800b45a:	4603      	mov	r3, r0
	period = 2048 *
 800b45c:	02db      	lsls	r3, r3, #11
 800b45e:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800b46a:	461a      	mov	r2, r3
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	4413      	add	r3, r2
 800b470:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b478:	02db      	lsls	r3, r3, #11
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	4413      	add	r3, r2
 800b47e:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b486:	02db      	lsls	r3, r3, #11
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	1ad3      	subs	r3, r2, r3
 800b48c:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d009      	beq.n	800b4a8 <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	68ba      	ldr	r2, [r7, #8]
 800b498:	fbb3 f2f2 	udiv	r2, r3, r2
 800b49c:	68b9      	ldr	r1, [r7, #8]
 800b49e:	fb01 f202 	mul.w	r2, r1, r2
 800b4a2:	1a9b      	subs	r3, r3, r2
 800b4a4:	60fb      	str	r3, [r7, #12]
 800b4a6:	e001      	b.n	800b4ac <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800b4b6:	bf00      	nop
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b084      	sub	sp, #16
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
 800b4c6:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800b4d0:	6838      	ldr	r0, [r7, #0]
 800b4d2:	f000 fb82 	bl	800bbda <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7ff ff7a 	bl	800b3d6 <VL53LX_isqrt>
 800b4e2:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800b4e4:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	fb02 f303 	mul.w	r3, r2, r3
 800b4ee:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	3307      	adds	r3, #7
 800b4f4:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	111b      	asrs	r3, r3, #4
 800b4fa:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b502:	68ba      	ldr	r2, [r7, #8]
 800b504:	4413      	add	r3, r2
 800b506:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	2200      	movs	r2, #0
 800b514:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b518:	2300      	movs	r3, #0
 800b51a:	73fb      	strb	r3, [r7, #15]
 800b51c:	e01e      	b.n	800b55c <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800b51e:	7bfa      	ldrb	r2, [r7, #15]
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	3206      	adds	r2, #6
 800b524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b528:	68ba      	ldr	r2, [r7, #8]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	dd13      	ble.n	800b556 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800b534:	7bf9      	ldrb	r1, [r7, #15]
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	3106      	adds	r1, #6
 800b53a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b53e:	441a      	add	r2, r3
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800b54c:	3301      	adds	r3, #1
 800b54e:	b2da      	uxtb	r2, r3
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b556:	7bfb      	ldrb	r3, [r7, #15]
 800b558:	3301      	adds	r3, #1
 800b55a:	73fb      	strb	r3, [r7, #15]
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	7a9b      	ldrb	r3, [r3, #10]
 800b560:	7bfa      	ldrb	r2, [r7, #15]
 800b562:	429a      	cmp	r2, r3
 800b564:	d3db      	bcc.n	800b51e <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d01c      	beq.n	800b5aa <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53LX_p_028 =
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800b588:	0852      	lsrs	r2, r2, #1
 800b58a:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800b58c:	441a      	add	r2, r3
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800b59a:	683a      	ldr	r2, [r7, #0]
 800b59c:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53LX_p_028 /=
 800b5a0:	fb93 f2f2 	sdiv	r2, r3, r2
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800b5aa:	bf00      	nop
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b5b2:	b480      	push	{r7}
 800b5b4:	b085      	sub	sp, #20
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	7b1b      	ldrb	r3, [r3, #12]
 800b5ca:	f003 0307 	and.w	r3, r3, #7
 800b5ce:	2b07      	cmp	r3, #7
 800b5d0:	d13a      	bne.n	800b648 <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	73bb      	strb	r3, [r7, #14]
 800b5da:	e01f      	b.n	800b61c <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800b5dc:	7bbb      	ldrb	r3, [r7, #14]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	7b1b      	ldrb	r3, [r3, #12]
 800b5e4:	f003 0307 	and.w	r3, r3, #7
 800b5e8:	2b07      	cmp	r3, #7
 800b5ea:	d014      	beq.n	800b616 <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800b5ec:	7bba      	ldrb	r2, [r7, #14]
 800b5ee:	7b7b      	ldrb	r3, [r7, #13]
 800b5f0:	6879      	ldr	r1, [r7, #4]
 800b5f2:	440a      	add	r2, r1
 800b5f4:	7b11      	ldrb	r1, [r2, #12]
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	460a      	mov	r2, r1
 800b5fc:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800b5fe:	7bba      	ldrb	r2, [r7, #14]
 800b600:	7b7b      	ldrb	r3, [r7, #13]
 800b602:	6879      	ldr	r1, [r7, #4]
 800b604:	440a      	add	r2, r1
 800b606:	7c91      	ldrb	r1, [r2, #18]
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	4413      	add	r3, r2
 800b60c:	460a      	mov	r2, r1
 800b60e:	749a      	strb	r2, [r3, #18]
				i++;
 800b610:	7b7b      	ldrb	r3, [r7, #13]
 800b612:	3301      	adds	r3, #1
 800b614:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b616:	7bbb      	ldrb	r3, [r7, #14]
 800b618:	3301      	adds	r3, #1
 800b61a:	73bb      	strb	r3, [r7, #14]
 800b61c:	7bbb      	ldrb	r3, [r7, #14]
 800b61e:	2b05      	cmp	r3, #5
 800b620:	d9dc      	bls.n	800b5dc <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b622:	7b7b      	ldrb	r3, [r7, #13]
 800b624:	73bb      	strb	r3, [r7, #14]
 800b626:	e00c      	b.n	800b642 <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800b628:	7bbb      	ldrb	r3, [r7, #14]
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	4413      	add	r3, r2
 800b62e:	2210      	movs	r2, #16
 800b630:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800b632:	7bbb      	ldrb	r3, [r7, #14]
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	4413      	add	r3, r2
 800b638:	2200      	movs	r2, #0
 800b63a:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b63c:	7bbb      	ldrb	r3, [r7, #14]
 800b63e:	3301      	adds	r3, #1
 800b640:	73bb      	strb	r3, [r7, #14]
 800b642:	7bbb      	ldrb	r3, [r7, #14]
 800b644:	2b05      	cmp	r3, #5
 800b646:	d9ef      	bls.n	800b628 <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	7adb      	ldrb	r3, [r3, #11]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d023      	beq.n	800b698 <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	7adb      	ldrb	r3, [r3, #11]
 800b654:	73fb      	strb	r3, [r7, #15]
 800b656:	e00f      	b.n	800b678 <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800b658:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800b65a:	7bfb      	ldrb	r3, [r7, #15]
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	7ad2      	ldrb	r2, [r2, #11]
 800b660:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	3106      	adds	r1, #6
 800b666:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	3206      	adds	r2, #6
 800b66e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800b672:	7bfb      	ldrb	r3, [r7, #15]
 800b674:	3301      	adds	r3, #1
 800b676:	73fb      	strb	r3, [r7, #15]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800b67c:	7bfa      	ldrb	r2, [r7, #15]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d3ea      	bcc.n	800b658 <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	72da      	strb	r2, [r3, #11]
	}
}
 800b698:	bf00      	nop
 800b69a:	3714      	adds	r7, #20
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800b6b6:	88fb      	ldrh	r3, [r7, #6]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7ff fd92 	bl	800b1e2 <VL53LX_calc_pll_period_us>
 800b6be:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800b6c4:	f249 2257 	movw	r2, #37463	; 0x9257
 800b6c8:	fb02 f303 	mul.w	r3, r2, r3
 800b6cc:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b6d4:	0c1b      	lsrs	r3, r3, #16
 800b6d6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800b6d8:	68bb      	ldr	r3, [r7, #8]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b087      	sub	sp, #28
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800b6f0:	2307      	movs	r3, #7
 800b6f2:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6fe:	db03      	blt.n	800b708 <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800b700:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b704:	617b      	str	r3, [r7, #20]
 800b706:	e004      	b.n	800b712 <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	dd01      	ble.n	800b712 <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b718:	dd02      	ble.n	800b720 <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800b71a:	2303      	movs	r3, #3
 800b71c:	613b      	str	r3, [r7, #16]
 800b71e:	e001      	b.n	800b724 <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800b720:	2307      	movs	r3, #7
 800b722:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d009      	beq.n	800b73e <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800b72a:	697a      	ldr	r2, [r7, #20]
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	409a      	lsls	r2, r3
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	085b      	lsrs	r3, r3, #1
 800b734:	441a      	add	r2, r3
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	fbb2 f3f3 	udiv	r3, r2, r3
 800b73c:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b744:	dd02      	ble.n	800b74c <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	011b      	lsls	r3, r3, #4
 800b74a:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b752:	d302      	bcc.n	800b75a <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800b754:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b758:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800b75e:	89fb      	ldrh	r3, [r7, #14]
}
 800b760:	4618      	mov	r0, r3
 800b762:	371c      	adds	r7, #28
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b087      	sub	sp, #28
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	603b      	str	r3, [r7, #0]
 800b778:	4613      	mov	r3, r2
 800b77a:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800b77c:	2300      	movs	r3, #0
 800b77e:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800b780:	2300      	movs	r3, #0
 800b782:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800b784:	88fb      	ldrh	r3, [r7, #6]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d010      	beq.n	800b7ac <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	021a      	lsls	r2, r3, #8
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	fa02 f303 	lsl.w	r3, r2, r3
 800b794:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800b796:	88fb      	ldrh	r3, [r7, #6]
 800b798:	085b      	lsrs	r3, r3, #1
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800b7a2:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800b7a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7a8:	617b      	str	r3, [r7, #20]
 800b7aa:	e004      	b.n	800b7b6 <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800b7ac:	68ba      	ldr	r2, [r7, #8]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b4:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800b7b6:	697a      	ldr	r2, [r7, #20]
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d901      	bls.n	800b7c2 <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800b7c6:	8a7b      	ldrh	r3, [r7, #18]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	371c      	adds	r7, #28
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800b7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7d6:	b089      	sub	sp, #36	; 0x24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	4606      	mov	r6, r0
 800b7dc:	4608      	mov	r0, r1
 800b7de:	4611      	mov	r1, r2
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	4633      	mov	r3, r6
 800b7e4:	80fb      	strh	r3, [r7, #6]
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	80bb      	strh	r3, [r7, #4]
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	807b      	strh	r3, [r7, #2]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	707b      	strb	r3, [r7, #1]


	uint32_t    pll_period_us = 0;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	61bb      	str	r3, [r7, #24]
	int64_t     tmp_long_int  = 0;
 800b7f6:	f04f 0200 	mov.w	r2, #0
 800b7fa:	f04f 0300 	mov.w	r3, #0
 800b7fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int32_t     range_mm      = 0;
 800b802:	2300      	movs	r3, #0
 800b804:	61fb      	str	r3, [r7, #28]
	int32_t     range_mm_10   = 0;
 800b806:	2300      	movs	r3, #0
 800b808:	60fb      	str	r3, [r7, #12]



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800b80a:	88fb      	ldrh	r3, [r7, #6]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7ff fce8 	bl	800b1e2 <VL53LX_calc_pll_period_us>
 800b812:	61b8      	str	r0, [r7, #24]



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800b814:	88b8      	ldrh	r0, [r7, #4]
 800b816:	f04f 0100 	mov.w	r1, #0
 800b81a:	887a      	ldrh	r2, [r7, #2]
 800b81c:	f04f 0300 	mov.w	r3, #0
 800b820:	1a84      	subs	r4, r0, r2
 800b822:	eb61 0503 	sbc.w	r5, r1, r3
 800b826:	e9c7 4504 	strd	r4, r5, [r7, #16]



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	461a      	mov	r2, r3
 800b82e:	f04f 0300 	mov.w	r3, #0
 800b832:	6979      	ldr	r1, [r7, #20]
 800b834:	fb02 f001 	mul.w	r0, r2, r1
 800b838:	6939      	ldr	r1, [r7, #16]
 800b83a:	fb03 f101 	mul.w	r1, r3, r1
 800b83e:	4401      	add	r1, r0
 800b840:	6938      	ldr	r0, [r7, #16]
 800b842:	fba0 2302 	umull	r2, r3, r0, r2
 800b846:	4419      	add	r1, r3
 800b848:	460b      	mov	r3, r1
 800b84a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800b84e:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800b852:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b856:	2a00      	cmp	r2, #0
 800b858:	f173 0100 	sbcs.w	r1, r3, #0
 800b85c:	da06      	bge.n	800b86c <VL53LX_range_maths+0x98>
 800b85e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b862:	f04f 0100 	mov.w	r1, #0
 800b866:	1812      	adds	r2, r2, r0
 800b868:	eb41 0303 	adc.w	r3, r1, r3
 800b86c:	f04f 0000 	mov.w	r0, #0
 800b870:	f04f 0100 	mov.w	r1, #0
 800b874:	0a50      	lsrs	r0, r2, #9
 800b876:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800b87a:	1259      	asrs	r1, r3, #9
 800b87c:	e9c7 0104 	strd	r0, r1, [r7, #16]



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	f249 2257 	movw	r2, #37463	; 0x9257
 800b886:	fb02 f203 	mul.w	r2, r2, r3
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	2100      	movs	r1, #0
 800b88e:	fb01 f303 	mul.w	r3, r1, r3
 800b892:	18d1      	adds	r1, r2, r3
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	f249 2257 	movw	r2, #37463	; 0x9257
 800b89a:	fba3 2302 	umull	r2, r3, r3, r2
 800b89e:	4419      	add	r1, r3
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800b8a6:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800b8aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b8ae:	2a00      	cmp	r2, #0
 800b8b0:	f173 0100 	sbcs.w	r1, r3, #0
 800b8b4:	da05      	bge.n	800b8c2 <VL53LX_range_maths+0xee>
 800b8b6:	4832      	ldr	r0, [pc, #200]	; (800b980 <VL53LX_range_maths+0x1ac>)
 800b8b8:	f04f 0100 	mov.w	r1, #0
 800b8bc:	1812      	adds	r2, r2, r0
 800b8be:	eb41 0303 	adc.w	r3, r1, r3
 800b8c2:	f04f 0000 	mov.w	r0, #0
 800b8c6:	f04f 0100 	mov.w	r1, #0
 800b8ca:	0d90      	lsrs	r0, r2, #22
 800b8cc:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800b8d0:	1599      	asrs	r1, r3, #22
 800b8d2:	e9c7 0104 	strd	r0, r1, [r7, #16]


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b8da:	4413      	add	r3, r2
 800b8dc:	61fb      	str	r3, [r7, #28]


	range_mm *= gain_factor;
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8e2:	fb02 f303 	mul.w	r3, r2, r3
 800b8e6:	61fb      	str	r3, [r7, #28]
	range_mm += 0x0400;
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8ee:	61fb      	str	r3, [r7, #28]
	range_mm /= 0x0800;
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	da01      	bge.n	800b8fa <VL53LX_range_maths+0x126>
 800b8f6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800b8fa:	12db      	asrs	r3, r3, #11
 800b8fc:	61fb      	str	r3, [r7, #28]


	if (fractional_bits == 0) {
 800b8fe:	787b      	ldrb	r3, [r7, #1]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d130      	bne.n	800b966 <VL53LX_range_maths+0x192>
		range_mm_10 = range_mm * 10;
 800b904:	69fa      	ldr	r2, [r7, #28]
 800b906:	4613      	mov	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4413      	add	r3, r2
 800b90c:	005b      	lsls	r3, r3, #1
 800b90e:	60fb      	str	r3, [r7, #12]
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	da00      	bge.n	800b918 <VL53LX_range_maths+0x144>
 800b916:	3303      	adds	r3, #3
 800b918:	109b      	asrs	r3, r3, #2
 800b91a:	60fb      	str	r3, [r7, #12]
		if ((range_mm_10 % 10) < 5)
 800b91c:	68f9      	ldr	r1, [r7, #12]
 800b91e:	4b19      	ldr	r3, [pc, #100]	; (800b984 <VL53LX_range_maths+0x1b0>)
 800b920:	fb83 2301 	smull	r2, r3, r3, r1
 800b924:	109a      	asrs	r2, r3, #2
 800b926:	17cb      	asrs	r3, r1, #31
 800b928:	1ad2      	subs	r2, r2, r3
 800b92a:	4613      	mov	r3, r2
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	4413      	add	r3, r2
 800b930:	005b      	lsls	r3, r3, #1
 800b932:	1aca      	subs	r2, r1, r3
 800b934:	2a04      	cmp	r2, #4
 800b936:	dc09      	bgt.n	800b94c <VL53LX_range_maths+0x178>
			range_mm = (int16_t)(range_mm_10 / 10);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	4a12      	ldr	r2, [pc, #72]	; (800b984 <VL53LX_range_maths+0x1b0>)
 800b93c:	fb82 1203 	smull	r1, r2, r2, r3
 800b940:	1092      	asrs	r2, r2, #2
 800b942:	17db      	asrs	r3, r3, #31
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	b21b      	sxth	r3, r3
 800b948:	61fb      	str	r3, [r7, #28]
 800b94a:	e014      	b.n	800b976 <VL53LX_range_maths+0x1a2>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	4a0d      	ldr	r2, [pc, #52]	; (800b984 <VL53LX_range_maths+0x1b0>)
 800b950:	fb82 1203 	smull	r1, r2, r2, r3
 800b954:	1092      	asrs	r2, r2, #2
 800b956:	17db      	asrs	r3, r3, #31
 800b958:	1ad3      	subs	r3, r2, r3
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	3301      	adds	r3, #1
 800b95e:	b29b      	uxth	r3, r3
 800b960:	b21b      	sxth	r3, r3
 800b962:	61fb      	str	r3, [r7, #28]
 800b964:	e007      	b.n	800b976 <VL53LX_range_maths+0x1a2>
	} else if (fractional_bits == 1)
 800b966:	787b      	ldrb	r3, [r7, #1]
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d104      	bne.n	800b976 <VL53LX_range_maths+0x1a2>
		range_mm = range_mm / (0x01 << 1);
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	0fda      	lsrs	r2, r3, #31
 800b970:	4413      	add	r3, r2
 800b972:	105b      	asrs	r3, r3, #1
 800b974:	61fb      	str	r3, [r7, #28]

	return range_mm;
 800b976:	69fb      	ldr	r3, [r7, #28]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3724      	adds	r7, #36	; 0x24
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b980:	003fffff 	.word	0x003fffff
 800b984:	66666667 	.word	0x66666667

0800b988 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	4603      	mov	r3, r0
 800b990:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800b996:	79fb      	ldrb	r3, [r7, #7]
 800b998:	3301      	adds	r3, #1
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	005b      	lsls	r3, r3, #1
 800b99e:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800b9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3714      	adds	r7, #20
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800b9ae:	b480      	push	{r7}
 800b9b0:	b083      	sub	sp, #12
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53LX_p_015 =
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	781a      	ldrb	r2, [r3, #0]
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	7a5a      	ldrb	r2, [r3, #9]
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	685a      	ldr	r2, [r3, #4]
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	605a      	str	r2, [r3, #4]
}
 800ba1e:	bf00      	nop
 800ba20:	370c      	adds	r7, #12
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr

0800ba2a <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800ba2a:	b480      	push	{r7}
 800ba2c:	b087      	sub	sp, #28
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	60f8      	str	r0, [r7, #12]
 800ba32:	460b      	mov	r3, r1
 800ba34:	607a      	str	r2, [r7, #4]
 800ba36:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2203      	movs	r2, #3
 800ba40:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2203      	movs	r2, #3
 800ba46:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2218      	movs	r2, #24
 800ba5e:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800ba60:	897b      	ldrh	r3, [r7, #10]
 800ba62:	b2da      	uxtb	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2200      	movs	r2, #0
 800ba92:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2200      	movs	r2, #0
 800bab2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53LX_p_005                       = 0;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53LX_p_015                = 0;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53LX_p_028             = 0;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bafe:	2300      	movs	r3, #0
 800bb00:	82fb      	strh	r3, [r7, #22]
 800bb02:	e009      	b.n	800bb18 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800bb04:	8afb      	ldrh	r3, [r7, #22]
 800bb06:	8afa      	ldrh	r2, [r7, #22]
 800bb08:	b2d1      	uxtb	r1, r2
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	460a      	mov	r2, r1
 800bb10:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bb12:	8afb      	ldrh	r3, [r7, #22]
 800bb14:	3301      	adds	r3, #1
 800bb16:	82fb      	strh	r3, [r7, #22]
 800bb18:	8afb      	ldrh	r3, [r7, #22]
 800bb1a:	2b05      	cmp	r3, #5
 800bb1c:	d9f2      	bls.n	800bb04 <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bb1e:	2300      	movs	r3, #0
 800bb20:	82fb      	strh	r3, [r7, #22]
 800bb22:	e007      	b.n	800bb34 <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800bb24:	8afb      	ldrh	r3, [r7, #22]
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	4413      	add	r3, r2
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bb2e:	8afb      	ldrh	r3, [r7, #22]
 800bb30:	3301      	adds	r3, #1
 800bb32:	82fb      	strh	r3, [r7, #22]
 800bb34:	8afb      	ldrh	r3, [r7, #22]
 800bb36:	2b05      	cmp	r3, #5
 800bb38:	d9f4      	bls.n	800bb24 <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	82fb      	strh	r3, [r7, #22]
 800bb3e:	e013      	b.n	800bb68 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800bb40:	8afa      	ldrh	r2, [r7, #22]
 800bb42:	897b      	ldrh	r3, [r7, #10]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d206      	bcs.n	800bb56 <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800bb48:	8afa      	ldrh	r2, [r7, #22]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	3206      	adds	r2, #6
 800bb4e:	68f9      	ldr	r1, [r7, #12]
 800bb50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bb54:	e005      	b.n	800bb62 <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800bb56:	8afa      	ldrh	r2, [r7, #22]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	3206      	adds	r2, #6
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800bb62:	8afb      	ldrh	r3, [r7, #22]
 800bb64:	3301      	adds	r3, #1
 800bb66:	82fb      	strh	r3, [r7, #22]
 800bb68:	8afb      	ldrh	r3, [r7, #22]
 800bb6a:	2b17      	cmp	r3, #23
 800bb6c:	d9e8      	bls.n	800bb40 <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800bb6e:	bf00      	nop
 800bb70:	bf00      	nop
 800bb72:	371c      	adds	r7, #28
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	4603      	mov	r3, r0
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	607a      	str	r2, [r7, #4]
 800bb88:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800bb8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	da10      	bge.n	800bbb4 <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800bb92:	7bfb      	ldrb	r3, [r7, #15]
 800bb94:	43db      	mvns	r3, r3
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	f003 0307 	and.w	r3, r3, #7
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	3308      	adds	r3, #8
 800bba0:	b2da      	uxtb	r2, r3
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800bba6:	7bfb      	ldrb	r3, [r7, #15]
 800bba8:	3b80      	subs	r3, #128	; 0x80
 800bbaa:	10db      	asrs	r3, r3, #3
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800bbb2:	e00c      	b.n	800bbce <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
 800bbb6:	f003 0307 	and.w	r3, r3, #7
 800bbba:	b2da      	uxtb	r2, r3
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800bbc0:	7bfb      	ldrb	r3, [r7, #15]
 800bbc2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800bbc6:	10db      	asrs	r3, r3, #3
 800bbc8:	b2da      	uxtb	r2, r3
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	701a      	strb	r2, [r3, #0]
}
 800bbce:	bf00      	nop
 800bbd0:	3714      	adds	r7, #20
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bbda:	b480      	push	{r7}
 800bbdc:	b085      	sub	sp, #20
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	73fb      	strb	r3, [r7, #15]
 800bbea:	e02c      	b.n	800bc46 <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800bbec:	7bfb      	ldrb	r3, [r7, #15]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d009      	beq.n	800bc06 <VL53LX_hist_find_min_max_bin_values+0x2c>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800bbf8:	7bf9      	ldrb	r1, [r7, #15]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	3106      	adds	r1, #6
 800bbfe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	db07      	blt.n	800bc16 <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800bc06:	7bfa      	ldrb	r2, [r7, #15]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	3206      	adds	r2, #6
 800bc0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800bc16:	7bfb      	ldrb	r3, [r7, #15]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d009      	beq.n	800bc30 <VL53LX_hist_find_min_max_bin_values+0x56>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800bc22:	7bf9      	ldrb	r1, [r7, #15]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	3106      	adds	r1, #6
 800bc28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	dc07      	bgt.n	800bc40 <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800bc30:	7bfa      	ldrb	r2, [r7, #15]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	3206      	adds	r2, #6
 800bc36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800bc40:	7bfb      	ldrb	r3, [r7, #15]
 800bc42:	3301      	adds	r3, #1
 800bc44:	73fb      	strb	r3, [r7, #15]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	7a9b      	ldrb	r3, [r3, #10]
 800bc4a:	7bfa      	ldrb	r2, [r7, #15]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d3cd      	bcc.n	800bbec <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800bc50:	bf00      	nop
 800bc52:	bf00      	nop
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr

0800bc5e <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bc5e:	b480      	push	{r7}
 800bc60:	b085      	sub	sp, #20
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800bc66:	2300      	movs	r3, #0
 800bc68:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	7adb      	ldrb	r3, [r3, #11]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d03a      	beq.n	800bce8 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800bc84:	2300      	movs	r3, #0
 800bc86:	73fb      	strb	r3, [r7, #15]
 800bc88:	e00e      	b.n	800bca8 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bc90:	7bf9      	ldrb	r1, [r7, #15]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	3106      	adds	r1, #6
 800bc96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc9a:	441a      	add	r2, r3
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800bca2:	7bfb      	ldrb	r3, [r7, #15]
 800bca4:	3301      	adds	r3, #1
 800bca6:	73fb      	strb	r3, [r7, #15]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	7adb      	ldrb	r3, [r3, #11]
 800bcac:	7bfa      	ldrb	r2, [r7, #15]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d3eb      	bcc.n	800bc8a <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	7ad2      	ldrb	r2, [r2, #11]
 800bcc8:	0852      	lsrs	r2, r2, #1
 800bcca:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800bccc:	441a      	add	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800bcde:	fb93 f2f2 	sdiv	r2, r3, r2
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800bce8:	bf00      	nop
 800bcea:	3714      	adds	r7, #20
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800bcf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bcf8:	b096      	sub	sp, #88	; 0x58
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6339      	str	r1, [r7, #48]	; 0x30
 800bcfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd00:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd02:	4603      	mov	r3, r0
 800bd04:	86fb      	strh	r3, [r7, #54]	; 0x36



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800bd06:	2300      	movs	r3, #0
 800bd08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	uint32_t    pll_period_us       = 0;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t    periods_elapsed     = 0;
 800bd10:	2300      	movs	r3, #0
 800bd12:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint32_t    tmp32               = 0;
 800bd14:	2300      	movs	r3, #0
 800bd16:	657b      	str	r3, [r7, #84]	; 0x54
	uint64_t    tmp64               = 0;
 800bd18:	f04f 0200 	mov.w	r2, #0
 800bd1c:	f04f 0300 	mov.w	r3, #0
 800bd20:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint32_t    amb_thres_delta     = 0;
 800bd24:	2300      	movs	r3, #0
 800bd26:	63bb      	str	r3, [r7, #56]	; 0x38

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800bd28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800bd2e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd30:	2300      	movs	r3, #0
 800bd32:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800bd34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd36:	2300      	movs	r3, #0
 800bd38:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800bd3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800bd40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd42:	2300      	movs	r3, #0
 800bd44:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800bd46:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd48:	2300      	movs	r3, #0
 800bd4a:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800bd4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd4e:	2300      	movs	r3, #0
 800bd50:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53LX_p_022            = 0;
 800bd52:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd54:	2300      	movs	r3, #0
 800bd56:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800bd58:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800bd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd60:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f000 80ab 	beq.w	800bec0 <VL53LX_f_001+0x1cc>
		(pbins->total_periods_elapsed      != 0)) {
 800bd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 80a5 	beq.w	800bec0 <VL53LX_f_001+0x1cc>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7ff fa30 	bl	800b1e2 <VL53LX_calc_pll_period_us>
 800bd82:	6438      	str	r0, [r7, #64]	; 0x40



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800bd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	63fb      	str	r3, [r7, #60]	; 0x3c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800bd8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd94:	2110      	movs	r1, #16
 800bd96:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bd98:	f7ff fa3a 	bl	800b210 <VL53LX_duration_maths>
 800bd9c:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800bd9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bda0:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800bda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800bda8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4619      	mov	r1, r3
 800bdae:	4610      	mov	r0, r2
 800bdb0:	f7ff fc97 	bl	800b6e2 <VL53LX_rate_maths>
 800bdb4:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800bdb6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bdb8:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800bdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbc:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800bdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc2:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800bdc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	f7ff fa7a 	bl	800b2c4 <VL53LX_events_per_spad_maths>
 800bdd0:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800bdd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bdd4:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800bdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd8:	8adb      	ldrh	r3, [r3, #22]
 800bdda:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bddc:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800bdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde0:	8adb      	ldrh	r3, [r3, #22]
 800bde2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bde4:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800bde6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bde8:	695b      	ldr	r3, [r3, #20]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d068      	beq.n	800bec0 <VL53LX_f_001+0x1cc>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800bdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf0:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800bdf2:	b29a      	uxth	r2, r3
 800bdf4:	f04f 0300 	mov.w	r3, #0
 800bdf8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64  *= 1000;
 800bdfc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800be00:	4622      	mov	r2, r4
 800be02:	462b      	mov	r3, r5
 800be04:	f04f 0000 	mov.w	r0, #0
 800be08:	f04f 0100 	mov.w	r1, #0
 800be0c:	0159      	lsls	r1, r3, #5
 800be0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800be12:	0150      	lsls	r0, r2, #5
 800be14:	4602      	mov	r2, r0
 800be16:	460b      	mov	r3, r1
 800be18:	1b12      	subs	r2, r2, r4
 800be1a:	eb63 0305 	sbc.w	r3, r3, r5
 800be1e:	f04f 0000 	mov.w	r0, #0
 800be22:	f04f 0100 	mov.w	r1, #0
 800be26:	0099      	lsls	r1, r3, #2
 800be28:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800be2c:	0090      	lsls	r0, r2, #2
 800be2e:	4602      	mov	r2, r0
 800be30:	460b      	mov	r3, r1
 800be32:	1912      	adds	r2, r2, r4
 800be34:	eb45 0303 	adc.w	r3, r5, r3
 800be38:	f04f 0000 	mov.w	r0, #0
 800be3c:	f04f 0100 	mov.w	r1, #0
 800be40:	00d9      	lsls	r1, r3, #3
 800be42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800be46:	00d0      	lsls	r0, r2, #3
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64 <<= (11+1);
 800be50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800be54:	f04f 0000 	mov.w	r0, #0
 800be58:	f04f 0100 	mov.w	r1, #0
 800be5c:	0319      	lsls	r1, r3, #12
 800be5e:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800be62:	0310      	lsls	r0, r2, #12
 800be64:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
			tmp32 = pdata->VL53LX_p_033/2;
 800be68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be6a:	695b      	ldr	r3, [r3, #20]
 800be6c:	085b      	lsrs	r3, r3, #1
 800be6e:	657b      	str	r3, [r7, #84]	; 0x54
			tmp64 += (uint64_t)tmp32;
 800be70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be72:	4618      	mov	r0, r3
 800be74:	f04f 0100 	mov.w	r1, #0
 800be78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800be7c:	eb12 0800 	adds.w	r8, r2, r0
 800be80:	eb43 0901 	adc.w	r9, r3, r1
 800be84:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
			tmp64 = do_division_u(tmp64,
 800be88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be8a:	695b      	ldr	r3, [r3, #20]
 800be8c:	461a      	mov	r2, r3
 800be8e:	f04f 0300 	mov.w	r3, #0
 800be92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800be96:	f7f4 fa43 	bl	8000320 <__aeabi_uldivmod>
 800be9a:	4602      	mov	r2, r0
 800be9c:	460b      	mov	r3, r1
 800be9e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800bea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea4:	8adb      	ldrh	r3, [r3, #22]
 800bea6:	b298      	uxth	r0, r3
 800bea8:	f04f 0100 	mov.w	r1, #0
 800beac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800beb0:	428b      	cmp	r3, r1
 800beb2:	bf08      	it	eq
 800beb4:	4282      	cmpeq	r2, r0
 800beb6:	d203      	bcs.n	800bec0 <VL53LX_f_001+0x1cc>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800beb8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bebc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bebe:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800bec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec2:	881b      	ldrh	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f000 8203 	beq.w	800c2d0 <VL53LX_f_001+0x5dc>
		(pbins->VL53LX_p_015        != 0) &&
 800beca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800becc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f000 81fd 	beq.w	800c2d0 <VL53LX_f_001+0x5dc>
		(pcal->ref_reflectance_pc          != 0) &&
 800bed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed8:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f000 81f8 	beq.w	800c2d0 <VL53LX_f_001+0x5dc>
		(pbins->total_periods_elapsed      != 0)) {
 800bee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f000 81f2 	beq.w	800c2d0 <VL53LX_f_001+0x5dc>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800beec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beee:	885b      	ldrh	r3, [r3, #2]
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	f04f 0300 	mov.w	r3, #0
 800bef6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64 *= (1000 * 256);
 800befa:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800befe:	4622      	mov	r2, r4
 800bf00:	462b      	mov	r3, r5
 800bf02:	f04f 0000 	mov.w	r0, #0
 800bf06:	f04f 0100 	mov.w	r1, #0
 800bf0a:	0159      	lsls	r1, r3, #5
 800bf0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bf10:	0150      	lsls	r0, r2, #5
 800bf12:	4602      	mov	r2, r0
 800bf14:	460b      	mov	r3, r1
 800bf16:	1b12      	subs	r2, r2, r4
 800bf18:	eb63 0305 	sbc.w	r3, r3, r5
 800bf1c:	f04f 0000 	mov.w	r0, #0
 800bf20:	f04f 0100 	mov.w	r1, #0
 800bf24:	0099      	lsls	r1, r3, #2
 800bf26:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800bf2a:	0090      	lsls	r0, r2, #2
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	1912      	adds	r2, r2, r4
 800bf32:	eb45 0303 	adc.w	r3, r5, r3
 800bf36:	f04f 0000 	mov.w	r0, #0
 800bf3a:	f04f 0100 	mov.w	r1, #0
 800bf3e:	02d9      	lsls	r1, r3, #11
 800bf40:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800bf44:	02d0      	lsls	r0, r2, #11
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp32  = pcal->ref__actual_effective_spads/2;
 800bf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf50:	881b      	ldrh	r3, [r3, #0]
 800bf52:	085b      	lsrs	r3, r3, #1
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	657b      	str	r3, [r7, #84]	; 0x54
		tmp64 += (uint64_t)tmp32;
 800bf58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f04f 0100 	mov.w	r1, #0
 800bf60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bf64:	eb12 0a00 	adds.w	sl, r2, r0
 800bf68:	eb43 0b01 	adc.w	fp, r3, r1
 800bf6c:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800bf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf72:	881b      	ldrh	r3, [r3, #0]
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	f04f 0300 	mov.w	r3, #0
 800bf7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bf7e:	f7f4 f9cf 	bl	8000320 <__aeabi_uldivmod>
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800bf8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf8e:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800bf90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf92:	691b      	ldr	r3, [r3, #16]
 800bf94:	011a      	lsls	r2, r3, #4
 800bf96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf98:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800bf9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	f04f 0300 	mov.w	r3, #0
 800bfa4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800bfa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfaa:	695b      	ldr	r3, [r3, #20]
 800bfac:	461a      	mov	r2, r3
 800bfae:	f04f 0300 	mov.w	r3, #0
 800bfb2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bfb4:	fb02 f001 	mul.w	r0, r2, r1
 800bfb8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bfba:	fb03 f101 	mul.w	r1, r3, r1
 800bfbe:	4401      	add	r1, r0
 800bfc0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800bfc2:	fba0 2302 	umull	r2, r3, r0, r2
 800bfc6:	4419      	add	r1, r3
 800bfc8:	460b      	mov	r3, r1
 800bfca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800bfce:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800bfd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfd4:	8b5b      	ldrh	r3, [r3, #26]
 800bfd6:	b29a      	uxth	r2, r3
 800bfd8:	f04f 0300 	mov.w	r3, #0
 800bfdc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bfde:	fb02 f001 	mul.w	r0, r2, r1
 800bfe2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bfe4:	fb03 f101 	mul.w	r1, r3, r1
 800bfe8:	4401      	add	r1, r0
 800bfea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800bfec:	fba0 2302 	umull	r2, r3, r0, r2
 800bff0:	4419      	add	r1, r3
 800bff2:	460b      	mov	r3, r1
 800bff4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800bff8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800bffc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c000:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800c004:	6239      	str	r1, [r7, #32]
 800c006:	f143 0300 	adc.w	r3, r3, #0
 800c00a:	627b      	str	r3, [r7, #36]	; 0x24
 800c00c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c010:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800c014:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c018:	f04f 0200 	mov.w	r2, #0
 800c01c:	f04f 0300 	mov.w	r3, #0
 800c020:	0cc2      	lsrs	r2, r0, #19
 800c022:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800c026:	0ccb      	lsrs	r3, r1, #19
 800c028:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  +=  500;
 800c02c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c030:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800c034:	61b9      	str	r1, [r7, #24]
 800c036:	f143 0300 	adc.w	r3, r3, #0
 800c03a:	61fb      	str	r3, [r7, #28]
 800c03c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c040:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64   = do_division_u(tmp64, 1000);
 800c044:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c048:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c04c:	f04f 0300 	mov.w	r3, #0
 800c050:	f7f4 f966 	bl	8000320 <__aeabi_uldivmod>
 800c054:	4602      	mov	r2, r0
 800c056:	460b      	mov	r3, r1
 800c058:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800c05c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c060:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c064:	f04f 0100 	mov.w	r1, #0
 800c068:	4299      	cmp	r1, r3
 800c06a:	bf08      	it	eq
 800c06c:	4290      	cmpeq	r0, r2
 800c06e:	d205      	bcs.n	800c07c <VL53LX_f_001+0x388>
			tmp64 = 0x00FFFFFF;
 800c070:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c074:	f04f 0300 	mov.w	r3, #0
 800c078:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800c07c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c07e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c080:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	461a      	mov	r2, r3
 800c088:	f04f 0300 	mov.w	r3, #0
 800c08c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800c090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c092:	691b      	ldr	r3, [r3, #16]
 800c094:	461a      	mov	r2, r3
 800c096:	f04f 0300 	mov.w	r3, #0
 800c09a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c09c:	fb02 f001 	mul.w	r0, r2, r1
 800c0a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c0a2:	fb03 f101 	mul.w	r1, r3, r1
 800c0a6:	4401      	add	r1, r0
 800c0a8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c0aa:	fba0 2302 	umull	r2, r3, r0, r2
 800c0ae:	4419      	add	r1, r3
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c0b6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c0ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0bc:	8b5b      	ldrh	r3, [r3, #26]
 800c0be:	b29a      	uxth	r2, r3
 800c0c0:	f04f 0300 	mov.w	r3, #0
 800c0c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c0c6:	fb02 f001 	mul.w	r0, r2, r1
 800c0ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c0cc:	fb03 f101 	mul.w	r1, r3, r1
 800c0d0:	4401      	add	r1, r0
 800c0d2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c0d4:	fba0 2302 	umull	r2, r3, r0, r2
 800c0d8:	4419      	add	r1, r3
 800c0da:	460b      	mov	r3, r1
 800c0dc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c0e0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800c0e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c0e8:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800c0ec:	6139      	str	r1, [r7, #16]
 800c0ee:	f143 0300 	adc.w	r3, r3, #0
 800c0f2:	617b      	str	r3, [r7, #20]
 800c0f4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c0f8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800c0fc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c100:	f04f 0200 	mov.w	r2, #0
 800c104:	f04f 0300 	mov.w	r3, #0
 800c108:	0cc2      	lsrs	r2, r0, #19
 800c10a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800c10e:	0ccb      	lsrs	r3, r1, #19
 800c110:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48



		tmp64  *= ((uint64_t)target_reflectance *
 800c114:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 800c116:	f04f 0100 	mov.w	r1, #0
				   (uint64_t)pcal->coverglass_transmission);
 800c11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11c:	891b      	ldrh	r3, [r3, #8]
 800c11e:	b29a      	uxth	r2, r3
 800c120:	f04f 0300 	mov.w	r3, #0
		tmp64  *= ((uint64_t)target_reflectance *
 800c124:	fb02 f501 	mul.w	r5, r2, r1
 800c128:	fb00 f403 	mul.w	r4, r0, r3
 800c12c:	442c      	add	r4, r5
 800c12e:	fba0 2302 	umull	r2, r3, r0, r2
 800c132:	18e1      	adds	r1, r4, r3
 800c134:	460b      	mov	r3, r1
 800c136:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c138:	fb02 f001 	mul.w	r0, r2, r1
 800c13c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c13e:	fb03 f101 	mul.w	r1, r3, r1
 800c142:	4401      	add	r1, r0
 800c144:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c146:	fba0 2302 	umull	r2, r3, r0, r2
 800c14a:	4419      	add	r1, r3
 800c14c:	460b      	mov	r3, r1
 800c14e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c152:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	88db      	ldrh	r3, [r3, #6]
 800c15a:	b298      	uxth	r0, r3
 800c15c:	f04f 0100 	mov.w	r1, #0
 800c160:	f04f 0200 	mov.w	r2, #0
 800c164:	f04f 0300 	mov.w	r3, #0
 800c168:	01cb      	lsls	r3, r1, #7
 800c16a:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 800c16e:	01c2      	lsls	r2, r0, #7
 800c170:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c174:	1884      	adds	r4, r0, r2
 800c176:	60bc      	str	r4, [r7, #8]
 800c178:	eb41 0303 	adc.w	r3, r1, r3
 800c17c:	60fb      	str	r3, [r7, #12]
 800c17e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c182:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800c186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c188:	88db      	ldrh	r3, [r3, #6]
 800c18a:	b298      	uxth	r0, r3
 800c18c:	f04f 0100 	mov.w	r1, #0
 800c190:	f04f 0200 	mov.w	r2, #0
 800c194:	f04f 0300 	mov.w	r3, #0
 800c198:	020b      	lsls	r3, r1, #8
 800c19a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c19e:	0202      	lsls	r2, r0, #8
 800c1a0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c1a4:	f7f4 f8bc 	bl	8000320 <__aeabi_uldivmod>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800c1b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c1b4:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800c1b8:	6039      	str	r1, [r7, #0]
 800c1ba:	f143 0300 	adc.w	r3, r3, #0
 800c1be:	607b      	str	r3, [r7, #4]
 800c1c0:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c1c4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64, 1000);
 800c1c8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c1cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c1d0:	f04f 0300 	mov.w	r3, #0
 800c1d4:	f7f4 f8a4 	bl	8000320 <__aeabi_uldivmod>
 800c1d8:	4602      	mov	r2, r0
 800c1da:	460b      	mov	r3, r1
 800c1dc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800c1e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c1e4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c1e8:	f04f 0100 	mov.w	r1, #0
 800c1ec:	4299      	cmp	r1, r3
 800c1ee:	bf08      	it	eq
 800c1f0:	4290      	cmpeq	r0, r2
 800c1f2:	d205      	bcs.n	800c200 <VL53LX_f_001+0x50c>
			tmp64 = 0x00FFFFFF;
 800c1f4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c1f8:	f04f 0300 	mov.w	r3, #0
 800c1fc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800c200:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c204:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800c206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c208:	69db      	ldr	r3, [r3, #28]
 800c20a:	021b      	lsls	r3, r3, #8
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7ff f8e2 	bl	800b3d6 <VL53LX_isqrt>
 800c212:	6578      	str	r0, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800c214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c216:	785b      	ldrb	r3, [r3, #1]
 800c218:	461a      	mov	r2, r3
 800c21a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c21c:	fb02 f303 	mul.w	r3, r2, r3
 800c220:	657b      	str	r3, [r7, #84]	; 0x54



		if (pdata->VL53LX_p_028 <
 800c222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c224:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800c226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c228:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d20f      	bcs.n	800c24e <VL53LX_f_001+0x55a>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800c22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800c234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c236:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800c238:	1ad3      	subs	r3, r2, r3
 800c23a:	63bb      	str	r3, [r7, #56]	; 0x38


			amb_thres_delta <<= 8;
 800c23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23e:	021b      	lsls	r3, r3, #8
 800c240:	63bb      	str	r3, [r7, #56]	; 0x38

			if (tmp32 < amb_thres_delta)
 800c242:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c246:	429a      	cmp	r2, r3
 800c248:	d201      	bcs.n	800c24e <VL53LX_f_001+0x55a>
				tmp32 = amb_thres_delta;
 800c24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24c:	657b      	str	r3, [r7, #84]	; 0x54
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800c24e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c250:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800c252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c254:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c256:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25a:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c25c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c25e:	f000 f83e 	bl	800c2de <VL53LX_f_002>
 800c262:	4603      	mov	r3, r0
 800c264:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800c266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c268:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800c26a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c26c:	6a1b      	ldr	r3, [r3, #32]
 800c26e:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800c270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c272:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800c276:	461a      	mov	r2, r3
 800c278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c27a:	fb02 f303 	mul.w	r3, r2, r3
 800c27e:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 += (1 << 3);
 800c280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c282:	3308      	adds	r3, #8
 800c284:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 /= (1 << 4);
 800c286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c288:	091b      	lsrs	r3, r3, #4
 800c28a:	657b      	str	r3, [r7, #84]	; 0x54

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800c28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28e:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800c290:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800c292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c294:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c296:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29a:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c29c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c29e:	f000 f81e 	bl	800c2de <VL53LX_f_002>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800c2a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2a8:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800c2aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2ac:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800c2b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2b2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	da05      	bge.n	800c2c6 <VL53LX_f_001+0x5d2>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800c2ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2bc:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800c2c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c2c2:	801a      	strh	r2, [r3, #0]
 800c2c4:	e004      	b.n	800c2d0 <VL53LX_f_001+0x5dc>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800c2c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2c8:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800c2cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c2ce:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800c2d0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47

}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3758      	adds	r7, #88	; 0x58
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c2de <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b086      	sub	sp, #24
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	60f8      	str	r0, [r7, #12]
 800c2e6:	60b9      	str	r1, [r7, #8]
 800c2e8:	607a      	str	r2, [r7, #4]
 800c2ea:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	fb03 f303 	mul.w	r3, r3, r3
 800c300:	693a      	ldr	r2, [r7, #16]
 800c302:	4413      	add	r3, r2
 800c304:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800c306:	6938      	ldr	r0, [r7, #16]
 800c308:	f7ff f865 	bl	800b3d6 <VL53LX_isqrt>
 800c30c:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800c30e:	693a      	ldr	r2, [r7, #16]
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	4413      	add	r3, r2
 800c314:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	011b      	lsls	r3, r3, #4
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7ff f85b 	bl	800b3d6 <VL53LX_isqrt>
 800c320:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	fb02 f303 	mul.w	r3, r2, r3
 800c32a:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d009      	beq.n	800c346 <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	4413      	add	r3, r2
 800c338:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	005b      	lsls	r3, r3, #1
 800c33e:	697a      	ldr	r2, [r7, #20]
 800c340:	fbb2 f3f3 	udiv	r3, r2, r3
 800c344:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800c346:	697b      	ldr	r3, [r7, #20]

}
 800c348:	4618      	mov	r0, r3
 800c34a:	3718      	adds	r7, #24
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800c358:	2300      	movs	r3, #0
 800c35a:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2218      	movs	r2, #24
 800c360:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2200      	movs	r2, #0
 800c37e:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	73fb      	strb	r3, [r7, #15]
 800c386:	e01f      	b.n	800c3c8 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800c388:	7bfb      	ldrb	r3, [r7, #15]
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	4413      	add	r3, r2
 800c38e:	2200      	movs	r2, #0
 800c390:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800c392:	7bfb      	ldrb	r3, [r7, #15]
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	4413      	add	r3, r2
 800c398:	2200      	movs	r2, #0
 800c39a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800c39e:	7bfb      	ldrb	r3, [r7, #15]
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800c3aa:	7bfa      	ldrb	r2, [r7, #15]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	322e      	adds	r2, #46	; 0x2e
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800c3b6:	7bfa      	ldrb	r2, [r7, #15]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	3246      	adds	r2, #70	; 0x46
 800c3bc:	2100      	movs	r1, #0
 800c3be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c3c2:	7bfb      	ldrb	r3, [r7, #15]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	73fb      	strb	r3, [r7, #15]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	785b      	ldrb	r3, [r3, #1]
 800c3cc:	7bfa      	ldrb	r2, [r7, #15]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d3da      	bcc.n	800c388 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2208      	movs	r2, #8
 800c3de:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53LX_p_046             = 0;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	2118      	movs	r1, #24
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	f7ff fb18 	bl	800ba2a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800c400:	461a      	mov	r2, r3
 800c402:	2118      	movs	r1, #24
 800c404:	2000      	movs	r0, #0
 800c406:	f7ff fb10 	bl	800ba2a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800c410:	461a      	mov	r2, r3
 800c412:	2118      	movs	r1, #24
 800c414:	2000      	movs	r0, #0
 800c416:	f7ff fb08 	bl	800ba2a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800c420:	461a      	mov	r2, r3
 800c422:	2118      	movs	r1, #24
 800c424:	2000      	movs	r0, #0
 800c426:	f7ff fb00 	bl	800ba2a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800c430:	461a      	mov	r2, r3
 800c432:	2118      	movs	r1, #24
 800c434:	2000      	movs	r0, #0
 800c436:	f7ff faf8 	bl	800ba2a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800c43a:	bf00      	nop
 800c43c:	3710      	adds	r7, #16
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c442:	b5b0      	push	{r4, r5, r7, lr}
 800c444:	b08c      	sub	sp, #48	; 0x30
 800c446:	af00      	add	r7, sp, #0
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	607a      	str	r2, [r7, #4]
 800c44c:	461a      	mov	r2, r3
 800c44e:	4603      	mov	r3, r0
 800c450:	81fb      	strh	r3, [r7, #14]
 800c452:	4613      	mov	r3, r2
 800c454:	737b      	strb	r3, [r7, #13]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c456:	2300      	movs	r3, #0
 800c458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  lb            = 0;
 800c45c:	2300      	movs	r3, #0
 800c45e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t  VL53LX_p_001            = 0;
 800c462:	2300      	movs	r3, #0
 800c464:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int64_t  tmp          = 0;
 800c468:	f04f 0200 	mov.w	r2, #0
 800c46c:	f04f 0300 	mov.w	r3, #0
 800c470:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int32_t  amb_events   = 0;
 800c474:	2300      	movs	r3, #0
 800c476:	617b      	str	r3, [r7, #20]
	int32_t  VL53LX_p_018       = 0;
 800c478:	2300      	movs	r3, #0
 800c47a:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  samples      = 0;
 800c47c:	2300      	movs	r3, #0
 800c47e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800c480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c482:	7a5a      	ldrb	r2, [r3, #9]
 800c484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c486:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800c488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c48a:	7a1a      	ldrb	r2, [r3, #8]
 800c48c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c48e:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800c490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c492:	7a9a      	ldrb	r2, [r3, #10]
 800c494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c496:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800c498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c49a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c49e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4a0:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800c4a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7ff fa6d 	bl	800b988 <VL53LX_decode_vcsel_period>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800c4b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4b4:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800c4b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c4bc:	461a      	mov	r2, r3
 800c4be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c4c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800c4c6:	89fa      	ldrh	r2, [r7, #14]
 800c4c8:	f04f 0300 	mov.w	r3, #0
 800c4cc:	69f9      	ldr	r1, [r7, #28]
 800c4ce:	fb02 f001 	mul.w	r0, r2, r1
 800c4d2:	69b9      	ldr	r1, [r7, #24]
 800c4d4:	fb03 f101 	mul.w	r1, r3, r1
 800c4d8:	4401      	add	r1, r0
 800c4da:	69b8      	ldr	r0, [r7, #24]
 800c4dc:	fba0 2302 	umull	r2, r3, r0, r2
 800c4e0:	4419      	add	r1, r3
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800c4e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp += 2048;
 800c4ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c4f0:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800c4f4:	f143 0500 	adc.w	r5, r3, #0
 800c4f8:	e9c7 4506 	strd	r4, r5, [r7, #24]
	tmp = do_division_s(tmp, 4096);
 800c4fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c500:	2a00      	cmp	r2, #0
 800c502:	f173 0100 	sbcs.w	r1, r3, #0
 800c506:	da06      	bge.n	800c516 <VL53LX_f_006+0xd4>
 800c508:	f640 70ff 	movw	r0, #4095	; 0xfff
 800c50c:	f04f 0100 	mov.w	r1, #0
 800c510:	1812      	adds	r2, r2, r0
 800c512:	eb41 0303 	adc.w	r3, r1, r3
 800c516:	f04f 0000 	mov.w	r0, #0
 800c51a:	f04f 0100 	mov.w	r1, #0
 800c51e:	0b10      	lsrs	r0, r2, #12
 800c520:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c524:	1319      	asrs	r1, r3, #12
 800c526:	e9c7 0106 	strd	r0, r1, [r7, #24]
	amb_events = (int32_t)tmp;
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	617b      	str	r3, [r7, #20]



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800c52e:	2300      	movs	r3, #0
 800c530:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c534:	e062      	b.n	800c5fc <VL53LX_f_006+0x1ba>

		VL53LX_p_001 = lb >> 2;
 800c536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c53a:	089b      	lsrs	r3, r3, #2
 800c53c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800c540:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c544:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c546:	4413      	add	r3, r2
 800c548:	7c9b      	ldrb	r3, [r3, #18]
 800c54a:	613b      	str	r3, [r7, #16]

		if (samples > 0) {
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	dd4f      	ble.n	800c5f2 <VL53LX_f_006+0x1b0>

			if (lb < pxtalk->VL53LX_p_021 &&
 800c552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c554:	7a9b      	ldrb	r3, [r3, #10]
 800c556:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d20f      	bcs.n	800c57e <VL53LX_f_006+0x13c>
 800c55e:	7b7b      	ldrb	r3, [r7, #13]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00c      	beq.n	800c57e <VL53LX_f_006+0x13c>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800c564:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c56a:	3206      	adds	r2, #6
 800c56c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	441a      	add	r2, r3
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	fb02 f303 	mul.w	r3, r2, r3
 800c57a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c57c:	e004      	b.n	800c588 <VL53LX_f_006+0x146>
			else
				VL53LX_p_018 = samples *  amb_events;
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	697a      	ldr	r2, [r7, #20]
 800c582:	fb02 f303 	mul.w	r3, r2, r3
 800c586:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800c588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7fe ff23 	bl	800b3d6 <VL53LX_isqrt>
 800c590:	4603      	mov	r3, r0
 800c592:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018 += (samples/2);
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	0fda      	lsrs	r2, r3, #31
 800c598:	4413      	add	r3, r2
 800c59a:	105b      	asrs	r3, r3, #1
 800c59c:	461a      	mov	r2, r3
 800c59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a0:	4413      	add	r3, r2
 800c5a2:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= samples;
 800c5a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	fb92 f3f3 	sdiv	r3, r2, r3
 800c5ac:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 *= ambient_threshold_sigma;
 800c5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b0:	68ba      	ldr	r2, [r7, #8]
 800c5b2:	fb02 f303 	mul.w	r3, r2, r3
 800c5b6:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += 8;
 800c5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ba:	3308      	adds	r3, #8
 800c5bc:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= 16;
 800c5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	da00      	bge.n	800c5c6 <VL53LX_f_006+0x184>
 800c5c4:	330f      	adds	r3, #15
 800c5c6:	111b      	asrs	r3, r3, #4
 800c5c8:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += amb_events;
 800c5ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	62bb      	str	r3, [r7, #40]	; 0x28

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800c5d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	da01      	bge.n	800c5de <VL53LX_f_006+0x19c>
				VL53LX_p_018 = min_ambient_threshold_events;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	62bb      	str	r3, [r7, #40]	; 0x28

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800c5de:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c5e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5e4:	3216      	adds	r2, #22
 800c5e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c5e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800c5ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5f0:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800c5f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c5fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5fe:	7a9b      	ldrb	r3, [r3, #10]
 800c600:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c604:	429a      	cmp	r2, r3
 800c606:	d396      	bcc.n	800c536 <VL53LX_f_006+0xf4>

	}



	palgo->VL53LX_p_039 = 0;
 800c608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c60a:	2200      	movs	r2, #0
 800c60c:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800c60e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c610:	7a1b      	ldrb	r3, [r3, #8]
 800c612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c616:	e033      	b.n	800c680 <VL53LX_f_006+0x23e>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800c618:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c61c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c61e:	3206      	adds	r2, #6
 800c620:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c624:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800c628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c62a:	3116      	adds	r1, #22
 800c62c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c630:	429a      	cmp	r2, r3
 800c632:	dd13      	ble.n	800c65c <VL53LX_f_006+0x21a>
			palgo->VL53LX_p_040[lb]      = 1;
 800c634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c63a:	4413      	add	r3, r2
 800c63c:	2201      	movs	r2, #1
 800c63e:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800c640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c644:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c646:	4413      	add	r3, r2
 800c648:	2201      	movs	r2, #1
 800c64a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53LX_p_039++;
 800c64e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c650:	791b      	ldrb	r3, [r3, #4]
 800c652:	3301      	adds	r3, #1
 800c654:	b2da      	uxtb	r2, r3
 800c656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c658:	711a      	strb	r2, [r3, #4]
 800c65a:	e00c      	b.n	800c676 <VL53LX_f_006+0x234>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800c65c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c662:	4413      	add	r3, r2
 800c664:	2200      	movs	r2, #0
 800c666:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800c668:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c66c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c66e:	4413      	add	r3, r2
 800c670:	2200      	movs	r2, #0
 800c672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800c676:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c67a:	3301      	adds	r3, #1
 800c67c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c682:	7a9b      	ldrb	r3, [r3, #10]
 800c684:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c688:	429a      	cmp	r2, r3
 800c68a:	d3c5      	bcc.n	800c618 <VL53LX_f_006+0x1d6>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800c68c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800c690:	4618      	mov	r0, r3
 800c692:	3730      	adds	r7, #48	; 0x30
 800c694:	46bd      	mov	sp, r7
 800c696:	bdb0      	pop	{r4, r5, r7, pc}

0800c698 <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c698:	b480      	push	{r7}
 800c69a:	b085      	sub	sp, #20
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	73fb      	strb	r3, [r7, #15]
 800c6bc:	e02d      	b.n	800c71a <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800c6be:	7bfb      	ldrb	r3, [r7, #15]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	78d2      	ldrb	r2, [r2, #3]
 800c6c6:	fb93 f1f2 	sdiv	r1, r3, r2
 800c6ca:	fb02 f201 	mul.w	r2, r2, r1
 800c6ce:	1a9b      	subs	r3, r3, r2
 800c6d0:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	789b      	ldrb	r3, [r3, #2]
 800c6d6:	7bfa      	ldrb	r2, [r7, #15]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d21b      	bcs.n	800c714 <VL53LX_f_007+0x7c>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	789b      	ldrb	r3, [r3, #2]
 800c6e0:	7b3a      	ldrb	r2, [r7, #12]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d216      	bcs.n	800c714 <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800c6e6:	7bfb      	ldrb	r3, [r7, #15]
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d10f      	bne.n	800c714 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800c6f4:	7b3b      	ldrb	r3, [r7, #12]
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d108      	bne.n	800c714 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800c702:	7bbb      	ldrb	r3, [r7, #14]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d105      	bne.n	800c714 <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	7bfa      	ldrb	r2, [r7, #15]
 800c70c:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800c710:	2301      	movs	r3, #1
 800c712:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800c714:	7bfb      	ldrb	r3, [r7, #15]
 800c716:	3301      	adds	r3, #1
 800c718:	73fb      	strb	r3, [r7, #15]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	78db      	ldrb	r3, [r3, #3]
 800c71e:	7bfa      	ldrb	r2, [r7, #15]
 800c720:	429a      	cmp	r2, r3
 800c722:	d3cc      	bcc.n	800c6be <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800c724:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3714      	adds	r7, #20
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c73c:	2300      	movs	r3, #0
 800c73e:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800c740:	2300      	movs	r3, #0
 800c742:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800c744:	2300      	movs	r3, #0
 800c746:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800c748:	2300      	movs	r3, #0
 800c74a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800c752:	73fb      	strb	r3, [r7, #15]
 800c754:	e05a      	b.n	800c80c <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	78da      	ldrb	r2, [r3, #3]
 800c75a:	7bfb      	ldrb	r3, [r7, #15]
 800c75c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c760:	fb02 f201 	mul.w	r2, r2, r1
 800c764:	1a9b      	subs	r3, r3, r2
 800c766:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800c768:	7bfb      	ldrb	r3, [r7, #15]
 800c76a:	3301      	adds	r3, #1
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	78d2      	ldrb	r2, [r2, #3]
 800c770:	fb93 f1f2 	sdiv	r1, r3, r2
 800c774:	fb02 f201 	mul.w	r2, r2, r1
 800c778:	1a9b      	subs	r3, r3, r2
 800c77a:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	789b      	ldrb	r3, [r3, #2]
 800c780:	7b7a      	ldrb	r2, [r7, #13]
 800c782:	429a      	cmp	r2, r3
 800c784:	d23f      	bcs.n	800c806 <VL53LX_f_008+0xd2>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	789b      	ldrb	r3, [r3, #2]
 800c78a:	7b3a      	ldrb	r2, [r7, #12]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d23a      	bcs.n	800c806 <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800c790:	7b7b      	ldrb	r3, [r7, #13]
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	4413      	add	r3, r2
 800c796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d10e      	bne.n	800c7bc <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800c79e:	7b3b      	ldrb	r3, [r7, #12]
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	4413      	add	r3, r2
 800c7a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d107      	bne.n	800c7bc <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	b2da      	uxtb	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d905      	bls.n	800c7d8 <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800c7d8:	7b7b      	ldrb	r3, [r7, #13]
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	4413      	add	r3, r2
 800c7de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d009      	beq.n	800c7fa <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800c7e6:	7b7b      	ldrb	r3, [r7, #13]
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	460a      	mov	r2, r1
 800c7f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c7f8:	e005      	b.n	800c806 <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800c7fa:	7b7b      	ldrb	r3, [r7, #13]
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	4413      	add	r3, r2
 800c800:	2200      	movs	r2, #0
 800c802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800c806:	7bfb      	ldrb	r3, [r7, #15]
 800c808:	3301      	adds	r3, #1
 800c80a:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800c80c:	7bfa      	ldrb	r2, [r7, #15]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800c814:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800c81a:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800c81c:	429a      	cmp	r2, r3
 800c81e:	db9a      	blt.n	800c756 <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800c820:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800c824:	4618      	mov	r0, r3
 800c826:	3714      	adds	r7, #20
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c830:	b480      	push	{r7}
 800c832:	b087      	sub	sp, #28
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c838:	2300      	movs	r3, #0
 800c83a:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800c83c:	2300      	movs	r3, #0
 800c83e:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800c840:	2300      	movs	r3, #0
 800c842:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800c844:	2300      	movs	r3, #0
 800c846:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800c848:	2300      	movs	r3, #0
 800c84a:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800c84c:	2300      	movs	r3, #0
 800c84e:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	78db      	ldrb	r3, [r3, #3]
 800c854:	3b01      	subs	r3, #1
 800c856:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800c858:	7cbb      	ldrb	r3, [r7, #18]
 800c85a:	085b      	lsrs	r3, r3, #1
 800c85c:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800c864:	75fb      	strb	r3, [r7, #23]
 800c866:	e0a2      	b.n	800c9ae <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	78da      	ldrb	r2, [r3, #3]
 800c86c:	7dfb      	ldrb	r3, [r7, #23]
 800c86e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c872:	fb02 f201 	mul.w	r2, r2, r1
 800c876:	1a9b      	subs	r3, r3, r2
 800c878:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800c87a:	7dfb      	ldrb	r3, [r7, #23]
 800c87c:	3301      	adds	r3, #1
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	78d2      	ldrb	r2, [r2, #3]
 800c882:	fb93 f1f2 	sdiv	r1, r3, r2
 800c886:	fb02 f201 	mul.w	r2, r2, r1
 800c88a:	1a9b      	subs	r3, r3, r2
 800c88c:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	789b      	ldrb	r3, [r3, #2]
 800c892:	7d7a      	ldrb	r2, [r7, #21]
 800c894:	429a      	cmp	r2, r3
 800c896:	f080 8087 	bcs.w	800c9a8 <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800c89e:	7d3a      	ldrb	r2, [r7, #20]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	f080 8081 	bcs.w	800c9a8 <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800c8a6:	7d7b      	ldrb	r3, [r7, #21]
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	4413      	add	r3, r2
 800c8ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d12f      	bne.n	800c914 <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800c8b4:	7d3b      	ldrb	r3, [r7, #20]
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d028      	beq.n	800c914 <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800c8c2:	7d3b      	ldrb	r3, [r7, #20]
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800c8d6:	7cfa      	ldrb	r2, [r7, #19]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d21b      	bcs.n	800c914 <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800c8dc:	7cfa      	ldrb	r2, [r7, #19]
 800c8de:	4613      	mov	r3, r2
 800c8e0:	00db      	lsls	r3, r3, #3
 800c8e2:	4413      	add	r3, r2
 800c8e4:	009b      	lsls	r3, r3, #2
 800c8e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	3304      	adds	r3, #4
 800c8f0:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	7dfa      	ldrb	r2, [r7, #23]
 800c8f6:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800c8f8:	7dfb      	ldrb	r3, [r7, #23]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	b2da      	uxtb	r2, r3
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	22ff      	movs	r2, #255	; 0xff
 800c906:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2200      	movs	r2, #0
 800c90c:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2200      	movs	r2, #0
 800c912:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800c914:	7d7b      	ldrb	r3, [r7, #21]
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	4413      	add	r3, r2
 800c91a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d042      	beq.n	800c9a8 <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800c922:	7d3b      	ldrb	r3, [r7, #20]
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	4413      	add	r3, r2
 800c928:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d13b      	bne.n	800c9a8 <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800c930:	7d7b      	ldrb	r3, [r7, #21]
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	4413      	add	r3, r2
 800c936:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c93a:	3b01      	subs	r3, #1
 800c93c:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800c944:	7cfa      	ldrb	r2, [r7, #19]
 800c946:	429a      	cmp	r2, r3
 800c948:	d22e      	bcs.n	800c9a8 <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800c94a:	7cfa      	ldrb	r2, [r7, #19]
 800c94c:	4613      	mov	r3, r2
 800c94e:	00db      	lsls	r3, r3, #3
 800c950:	4413      	add	r3, r2
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	4413      	add	r3, r2
 800c95c:	3304      	adds	r3, #4
 800c95e:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	7dfa      	ldrb	r2, [r7, #23]
 800c964:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800c966:	7dfb      	ldrb	r3, [r7, #23]
 800c968:	3301      	adds	r3, #1
 800c96a:	b2da      	uxtb	r2, r3
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800c978:	1ad3      	subs	r3, r2, r3
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	3301      	adds	r3, #1
 800c97e:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	3301      	adds	r3, #1
 800c992:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	799b      	ldrb	r3, [r3, #6]
 800c99c:	7cba      	ldrb	r2, [r7, #18]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d202      	bcs.n	800c9a8 <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	7cba      	ldrb	r2, [r7, #18]
 800c9a6:	719a      	strb	r2, [r3, #6]
		blb++) {
 800c9a8:	7dfb      	ldrb	r3, [r7, #23]
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800c9ae:	7dfa      	ldrb	r2, [r7, #23]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800c9b6:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800c9bc:	440b      	add	r3, r1
	for (blb = palgo->VL53LX_p_044;
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	f6ff af52 	blt.w	800c868 <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800c9c4:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	371c      	adds	r7, #28
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b090      	sub	sp, #64	; 0x40
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	4603      	mov	r3, r0
 800c9dc:	6039      	str	r1, [r7, #0]
 800c9de:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800c9e6:	f107 030c 	add.w	r3, r7, #12
 800c9ea:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d965      	bls.n	800cace <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800ca02:	e05f      	b.n	800cac4 <VL53LX_f_016+0xf0>

		swapped = 0;
 800ca04:	2300      	movs	r3, #0
 800ca06:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ca10:	e051      	b.n	800cab6 <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800ca12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca16:	1e5a      	subs	r2, r3, #1
 800ca18:	4613      	mov	r3, r2
 800ca1a:	00db      	lsls	r3, r3, #3
 800ca1c:	4413      	add	r3, r2
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ca24:	683a      	ldr	r2, [r7, #0]
 800ca26:	4413      	add	r3, r2
 800ca28:	3304      	adds	r3, #4
 800ca2a:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800ca2c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ca30:	4613      	mov	r3, r2
 800ca32:	00db      	lsls	r3, r3, #3
 800ca34:	4413      	add	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ca3c:	683a      	ldr	r2, [r7, #0]
 800ca3e:	4413      	add	r3, r2
 800ca40:	3304      	adds	r3, #4
 800ca42:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 800ca44:	79fb      	ldrb	r3, [r7, #7]
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	d118      	bne.n	800ca7c <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800ca4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca4c:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800ca4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca50:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800ca52:	429a      	cmp	r2, r3
 800ca54:	da2a      	bge.n	800caac <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800ca56:	2224      	movs	r2, #36	; 0x24
 800ca58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ca5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca5c:	f007 fac2 	bl	8013fe4 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800ca60:	2224      	movs	r2, #36	; 0x24
 800ca62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ca64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca66:	f007 fabd 	bl	8013fe4 <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800ca6a:	2224      	movs	r2, #36	; 0x24
 800ca6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ca70:	f007 fab8 	bl	8013fe4 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800ca74:	2301      	movs	r3, #1
 800ca76:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800ca7a:	e017      	b.n	800caac <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800ca7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca7e:	699a      	ldr	r2, [r3, #24]
 800ca80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca82:	699b      	ldr	r3, [r3, #24]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d911      	bls.n	800caac <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800ca88:	2224      	movs	r2, #36	; 0x24
 800ca8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ca8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca8e:	f007 faa9 	bl	8013fe4 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800ca92:	2224      	movs	r2, #36	; 0x24
 800ca94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ca96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca98:	f007 faa4 	bl	8013fe4 <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800ca9c:	2224      	movs	r2, #36	; 0x24
 800ca9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800caa0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800caa2:	f007 fa9f 	bl	8013fe4 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800caa6:	2301      	movs	r3, #1
 800caa8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800caac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cab0:	3301      	adds	r3, #1
 800cab2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800cabc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d3a6      	bcc.n	800ca12 <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800cac4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d19b      	bne.n	800ca04 <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800cacc:	e000      	b.n	800cad0 <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800cace:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800cad0:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3740      	adds	r7, #64	; 0x40
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cadc:	b480      	push	{r7}
 800cade:	b087      	sub	sp, #28
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	4603      	mov	r3, r0
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
 800cae8:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800caea:	2300      	movs	r3, #0
 800caec:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800caf2:	2300      	movs	r3, #0
 800caf4:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800caf6:	7bfa      	ldrb	r2, [r7, #15]
 800caf8:	4613      	mov	r3, r2
 800cafa:	00db      	lsls	r3, r3, #3
 800cafc:	4413      	add	r3, r2
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	4413      	add	r3, r2
 800cb08:	3304      	adds	r3, #4
 800cb0a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	2200      	movs	r2, #0
 800cb16:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	75fb      	strb	r3, [r7, #23]
 800cb1e:	e01c      	b.n	800cb5a <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	78da      	ldrb	r2, [r3, #3]
 800cb24:	7dfb      	ldrb	r3, [r7, #23]
 800cb26:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb2a:	fb02 f201 	mul.w	r2, r2, r1
 800cb2e:	1a9b      	subs	r3, r3, r2
 800cb30:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	68da      	ldr	r2, [r3, #12]
 800cb36:	7d79      	ldrb	r1, [r7, #21]
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	3106      	adds	r1, #6
 800cb3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cb40:	441a      	add	r2, r3
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	689a      	ldr	r2, [r3, #8]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	689b      	ldr	r3, [r3, #8]
 800cb4e:	441a      	add	r2, r3
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800cb54:	7dfb      	ldrb	r3, [r7, #23]
 800cb56:	3301      	adds	r3, #1
 800cb58:	75fb      	strb	r3, [r7, #23]
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	791b      	ldrb	r3, [r3, #4]
 800cb5e:	7dfa      	ldrb	r2, [r7, #23]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d9dd      	bls.n	800cb20 <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	68da      	ldr	r2, [r3, #12]
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800cb72:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	371c      	adds	r7, #28
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr

0800cb82 <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cb82:	b590      	push	{r4, r7, lr}
 800cb84:	b08d      	sub	sp, #52	; 0x34
 800cb86:	af02      	add	r7, sp, #8
 800cb88:	60ba      	str	r2, [r7, #8]
 800cb8a:	607b      	str	r3, [r7, #4]
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	73fb      	strb	r3, [r7, #15]
 800cb90:	460b      	mov	r3, r1
 800cb92:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cb94:	2300      	movs	r3, #0
 800cb96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53LX_p_012 = 0;
 800cba0:	2300      	movs	r3, #0
 800cba2:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 800cbac:	2300      	movs	r3, #0
 800cbae:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cbb0:	7bfa      	ldrb	r2, [r7, #15]
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	00db      	lsls	r3, r3, #3
 800cbb6:	4413      	add	r3, r2
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	3304      	adds	r3, #4
 800cbc4:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	789b      	ldrb	r3, [r3, #2]
 800cbca:	2bff      	cmp	r3, #255	; 0xff
 800cbcc:	d102      	bne.n	800cbd4 <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	789b      	ldrb	r3, [r3, #2]
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	78d2      	ldrb	r2, [r2, #3]
 800cbdc:	fbb3 f1f2 	udiv	r1, r3, r2
 800cbe0:	fb02 f201 	mul.w	r2, r2, r1
 800cbe4:	1a9b      	subs	r3, r3, r2
 800cbe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53LX_p_012  = (int16_t)i;
 800cbea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cbee:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	b29a      	uxth	r2, r3
 800cbf6:	8c3b      	ldrh	r3, [r7, #32]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800cbfe:	8c3a      	ldrh	r2, [r7, #32]
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	789b      	ldrb	r3, [r3, #2]
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	1ad3      	subs	r3, r2, r3
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800cc0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc10:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	791b      	ldrb	r3, [r3, #4]
 800cc16:	b29a      	uxth	r2, r3
 800cc18:	8bfb      	ldrh	r3, [r7, #30]
 800cc1a:	4413      	add	r3, r2
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800cc20:	8bfa      	ldrh	r2, [r7, #30]
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	789b      	ldrb	r3, [r3, #2]
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	1ad3      	subs	r3, r2, r3
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800cc2e:	8bfa      	ldrh	r2, [r7, #30]
 800cc30:	8c3b      	ldrh	r3, [r7, #32]
 800cc32:	1ad3      	subs	r3, r2, r3
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 800cc38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cc3c:	2b03      	cmp	r3, #3
 800cc3e:	dd01      	ble.n	800cc44 <VL53LX_f_015+0xc2>
		window_width = 3;
 800cc40:	2303      	movs	r3, #3
 800cc42:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800cc44:	8c3a      	ldrh	r2, [r7, #32]
 800cc46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc48:	4413      	add	r3, r2
 800cc4a:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800cc4c:	b219      	sxth	r1, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	78da      	ldrb	r2, [r3, #3]
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	3314      	adds	r3, #20
 800cc56:	7bbc      	ldrb	r4, [r7, #14]
 800cc58:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800cc5c:	9301      	str	r3, [sp, #4]
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	9300      	str	r3, [sp, #0]
 800cc62:	4623      	mov	r3, r4
 800cc64:	f000 f846 	bl	800ccf4 <VL53LX_f_020>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800cc6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d114      	bne.n	800cca0 <VL53LX_f_015+0x11e>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800cc76:	8bfa      	ldrh	r2, [r7, #30]
 800cc78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800cc7e:	b218      	sxth	r0, r3
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	78da      	ldrb	r2, [r3, #3]
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	331c      	adds	r3, #28
 800cc88:	7bbc      	ldrb	r4, [r7, #14]
 800cc8a:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800cc8e:	9301      	str	r3, [sp, #4]
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	9300      	str	r3, [sp, #0]
 800cc94:	4623      	mov	r3, r4
 800cc96:	f000 f82d 	bl	800ccf4 <VL53LX_f_020>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	695a      	ldr	r2, [r3, #20]
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	69db      	ldr	r3, [r3, #28]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d909      	bls.n	800ccc0 <VL53LX_f_015+0x13e>
		tmp_phase        = pdata->VL53LX_p_026;
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	695b      	ldr	r3, [r3, #20]
 800ccb0:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	69da      	ldr	r2, [r3, #28]
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	69ba      	ldr	r2, [r7, #24]
 800ccbe:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	699a      	ldr	r2, [r3, #24]
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	695b      	ldr	r3, [r3, #20]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d203      	bcs.n	800ccd4 <VL53LX_f_015+0x152>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	699a      	ldr	r2, [r3, #24]
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	699a      	ldr	r2, [r3, #24]
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	69db      	ldr	r3, [r3, #28]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d903      	bls.n	800cce8 <VL53LX_f_015+0x166>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	699a      	ldr	r2, [r3, #24]
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800cce8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	372c      	adds	r7, #44	; 0x2c
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd90      	pop	{r4, r7, pc}

0800ccf4 <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800ccf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf8:	b093      	sub	sp, #76	; 0x4c
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	4616      	mov	r6, r2
 800ccfe:	461a      	mov	r2, r3
 800cd00:	4603      	mov	r3, r0
 800cd02:	83fb      	strh	r3, [r7, #30]
 800cd04:	460b      	mov	r3, r1
 800cd06:	83bb      	strh	r3, [r7, #28]
 800cd08:	4633      	mov	r3, r6
 800cd0a:	76fb      	strb	r3, [r7, #27]
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	76bb      	strb	r3, [r7, #26]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cd10:	2300      	movs	r3, #0
 800cd12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	int16_t  i            = 0;
 800cd16:	2300      	movs	r3, #0
 800cd18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  lb            = 0;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	int64_t VL53LX_p_018        = 0;
 800cd22:	f04f 0200 	mov.w	r2, #0
 800cd26:	f04f 0300 	mov.w	r3, #0
 800cd2a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int64_t event_sum     = 0;
 800cd2e:	f04f 0200 	mov.w	r2, #0
 800cd32:	f04f 0300 	mov.w	r3, #0
 800cd36:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int64_t weighted_sum  = 0;
 800cd3a:	f04f 0200 	mov.w	r2, #0
 800cd3e:	f04f 0300 	mov.w	r3, #0
 800cd42:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800cd46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd4c:	601a      	str	r2, [r3, #0]

	if (VL53LX_p_030 != 0)
 800cd4e:	7efb      	ldrb	r3, [r7, #27]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f000 808b 	beq.w	800ce6c <VL53LX_f_020+0x178>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800cd56:	8bfb      	ldrh	r3, [r7, #30]
 800cd58:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800cd5c:	e07f      	b.n	800ce5e <VL53LX_f_020+0x16a>

		if (lb < 0)
 800cd5e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	da08      	bge.n	800cd78 <VL53LX_f_020+0x84>
			i = lb + (int16_t)VL53LX_p_030;
 800cd66:	7efb      	ldrb	r3, [r7, #27]
 800cd68:	b29a      	uxth	r2, r3
 800cd6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cd6e:	4413      	add	r3, r2
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800cd76:	e009      	b.n	800cd8c <VL53LX_f_020+0x98>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800cd78:	f9b7 1044 	ldrsh.w	r1, [r7, #68]	; 0x44
 800cd7c:	7efa      	ldrb	r2, [r7, #27]
 800cd7e:	fb91 f3f2 	sdiv	r3, r1, r2
 800cd82:	fb02 f303 	mul.w	r3, r2, r3
 800cd86:	1acb      	subs	r3, r1, r3
 800cd88:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800cd8c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	db5d      	blt.n	800ce50 <VL53LX_f_020+0x15c>
 800cd94:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800cd98:	2b17      	cmp	r3, #23
 800cd9a:	dc59      	bgt.n	800ce50 <VL53LX_f_020+0x15c>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800cd9c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800cda0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cda2:	3306      	adds	r3, #6
 800cda4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	ea4f 71e0 	mov.w	r1, r0, asr #31
				(int64_t)pbins->VL53LX_p_028;
 800cdae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cdb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	ea4f 73e2 	mov.w	r3, r2, asr #31
			VL53LX_p_018 =
 800cdba:	1a86      	subs	r6, r0, r2
 800cdbc:	613e      	str	r6, [r7, #16]
 800cdbe:	eb61 0303 	sbc.w	r3, r1, r3
 800cdc2:	617b      	str	r3, [r7, #20]
 800cdc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cdc8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800cdcc:	7ebb      	ldrb	r3, [r7, #26]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00b      	beq.n	800cdea <VL53LX_f_020+0xf6>
 800cdd2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cdd6:	2a00      	cmp	r2, #0
 800cdd8:	f173 0300 	sbcs.w	r3, r3, #0
 800cddc:	da05      	bge.n	800cdea <VL53LX_f_020+0xf6>
				VL53LX_p_018 = 0;
 800cdde:	f04f 0200 	mov.w	r2, #0
 800cde2:	f04f 0300 	mov.w	r3, #0
 800cde6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			event_sum += VL53LX_p_018;
 800cdea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cdee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cdf2:	1886      	adds	r6, r0, r2
 800cdf4:	60be      	str	r6, [r7, #8]
 800cdf6:	eb41 0303 	adc.w	r3, r1, r3
 800cdfa:	60fb      	str	r3, [r7, #12]
 800cdfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce00:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800ce04:	f9b7 0044 	ldrsh.w	r0, [r7, #68]	; 0x44
 800ce08:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800ce0c:	f04f 0200 	mov.w	r2, #0
 800ce10:	f04f 0300 	mov.w	r3, #0
 800ce14:	02cb      	lsls	r3, r1, #11
 800ce16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800ce1a:	02c2      	lsls	r2, r0, #11
 800ce1c:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 800ce20:	f143 0900 	adc.w	r9, r3, #0
 800ce24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce26:	fb09 f203 	mul.w	r2, r9, r3
 800ce2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce2c:	fb08 f303 	mul.w	r3, r8, r3
 800ce30:	441a      	add	r2, r3
 800ce32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce34:	fba3 0108 	umull	r0, r1, r3, r8
 800ce38:	1853      	adds	r3, r2, r1
 800ce3a:	4619      	mov	r1, r3
			weighted_sum +=
 800ce3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ce40:	1816      	adds	r6, r2, r0
 800ce42:	603e      	str	r6, [r7, #0]
 800ce44:	414b      	adcs	r3, r1
 800ce46:	607b      	str	r3, [r7, #4]
 800ce48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800ce50:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	3301      	adds	r3, #1
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ce5e:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800ce62:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	f77f af79 	ble.w	800cd5e <VL53LX_f_020+0x6a>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800ce6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ce70:	2a01      	cmp	r2, #1
 800ce72:	f173 0300 	sbcs.w	r3, r3, #0
 800ce76:	db33      	blt.n	800cee0 <VL53LX_f_020+0x1ec>
		weighted_sum += do_division_s(event_sum, 2);
 800ce78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ce7c:	0fd9      	lsrs	r1, r3, #31
 800ce7e:	4608      	mov	r0, r1
 800ce80:	f04f 0100 	mov.w	r1, #0
 800ce84:	1884      	adds	r4, r0, r2
 800ce86:	eb41 0503 	adc.w	r5, r1, r3
 800ce8a:	f04f 0200 	mov.w	r2, #0
 800ce8e:	f04f 0300 	mov.w	r3, #0
 800ce92:	0862      	lsrs	r2, r4, #1
 800ce94:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800ce98:	106b      	asrs	r3, r5, #1
 800ce9a:	4610      	mov	r0, r2
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cea2:	eb12 0a00 	adds.w	sl, r2, r0
 800cea6:	eb43 0b01 	adc.w	fp, r3, r1
 800ceaa:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800ceae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ceb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ceb6:	f7f3 f9e3 	bl	8000280 <__aeabi_ldivmod>
 800ceba:	4602      	mov	r2, r0
 800cebc:	460b      	mov	r3, r1
 800cebe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		if (weighted_sum < 0)
 800cec2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cec6:	2a00      	cmp	r2, #0
 800cec8:	f173 0300 	sbcs.w	r3, r3, #0
 800cecc:	da05      	bge.n	800ceda <VL53LX_f_020+0x1e6>
			weighted_sum = 0;
 800cece:	f04f 0200 	mov.w	r2, #0
 800ced2:	f04f 0300 	mov.w	r3, #0
 800ced6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		*pphase = (uint32_t)weighted_sum;
 800ceda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cedc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cede:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800cee0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	374c      	adds	r7, #76	; 0x4c
 800cee8:	46bd      	mov	sp, r7
 800ceea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ceee <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b086      	sub	sp, #24
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
 800cef8:	603b      	str	r3, [r7, #0]
 800cefa:	4603      	mov	r3, r0
 800cefc:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cefe:	2300      	movs	r3, #0
 800cf00:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800cf02:	2300      	movs	r3, #0
 800cf04:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800cf06:	2300      	movs	r3, #0
 800cf08:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cf0a:	7bfa      	ldrb	r2, [r7, #15]
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	00db      	lsls	r3, r3, #3
 800cf10:	4413      	add	r3, r2
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cf18:	687a      	ldr	r2, [r7, #4]
 800cf1a:	4413      	add	r3, r2
 800cf1c:	3304      	adds	r3, #4
 800cf1e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800cf20:	22ac      	movs	r2, #172	; 0xac
 800cf22:	68b9      	ldr	r1, [r7, #8]
 800cf24:	6a38      	ldr	r0, [r7, #32]
 800cf26:	f007 f85d 	bl	8013fe4 <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800cf30:	75fb      	strb	r3, [r7, #23]
 800cf32:	e020      	b.n	800cf76 <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	7dfa      	ldrb	r2, [r7, #23]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d304      	bcc.n	800cf48 <VL53LX_f_011+0x5a>
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	791b      	ldrb	r3, [r3, #4]
 800cf42:	7dfa      	ldrb	r2, [r7, #23]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d913      	bls.n	800cf70 <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	78da      	ldrb	r2, [r3, #3]
 800cf4c:	7dfb      	ldrb	r3, [r7, #23]
 800cf4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf52:	fb02 f201 	mul.w	r2, r2, r1
 800cf56:	1a9b      	subs	r3, r3, r2
 800cf58:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800cf5a:	6a3b      	ldr	r3, [r7, #32]
 800cf5c:	7a9b      	ldrb	r3, [r3, #10]
 800cf5e:	7d7a      	ldrb	r2, [r7, #21]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d205      	bcs.n	800cf70 <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800cf64:	7d7a      	ldrb	r2, [r7, #21]
 800cf66:	6a3b      	ldr	r3, [r7, #32]
 800cf68:	3206      	adds	r2, #6
 800cf6a:	6839      	ldr	r1, [r7, #0]
 800cf6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800cf70:	7dfb      	ldrb	r3, [r7, #23]
 800cf72:	3301      	adds	r3, #1
 800cf74:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800cf76:	7dfa      	ldrb	r2, [r7, #23]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800cf7e:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800cf84:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800cf86:	429a      	cmp	r2, r3
 800cf88:	dbd4      	blt.n	800cf34 <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cf8a:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3718      	adds	r7, #24
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800cf96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf9a:	b096      	sub	sp, #88	; 0x58
 800cf9c:	af08      	add	r7, sp, #32
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	4608      	mov	r0, r1
 800cfa2:	4611      	mov	r1, r2
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	4623      	mov	r3, r4
 800cfa8:	73fb      	strb	r3, [r7, #15]
 800cfaa:	4603      	mov	r3, r0
 800cfac:	73bb      	strb	r3, [r7, #14]
 800cfae:	460b      	mov	r3, r1
 800cfb0:	737b      	strb	r3, [r7, #13]
 800cfb2:	4613      	mov	r3, r2
 800cfb4:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53LX_p_007    = 0;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53LX_p_032    = 0;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53LX_p_001    = 0;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800cfe8:	7b7b      	ldrb	r3, [r7, #13]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d106      	bne.n	800cffc <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800cfee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cff4:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800cff6:	f06f 030e 	mvn.w	r3, #14
 800cffa:	e06f      	b.n	800d0dc <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800cffc:	7bfb      	ldrb	r3, [r7, #15]
 800cffe:	7b7a      	ldrb	r2, [r7, #13]
 800d000:	fbb3 f1f2 	udiv	r1, r3, r2
 800d004:	fb02 f201 	mul.w	r2, r2, r1
 800d008:	1a9b      	subs	r3, r3, r2
 800d00a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53LX_f_022(
 800d00e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d012:	7b39      	ldrb	r1, [r7, #12]
 800d014:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d018:	f107 0320 	add.w	r3, r7, #32
 800d01c:	9301      	str	r3, [sp, #4]
 800d01e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d022:	9300      	str	r3, [sp, #0]
 800d024:	4613      	mov	r3, r2
 800d026:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d028:	f000 fda8 	bl	800db7c <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800d02c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d030:	7b39      	ldrb	r1, [r7, #12]
 800d032:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d03a:	9301      	str	r3, [sp, #4]
 800d03c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d040:	9300      	str	r3, [sp, #0]
 800d042:	4613      	mov	r3, r2
 800d044:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d046:	f000 fd99 	bl	800db7c <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800d04a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d00e      	beq.n	800d070 <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800d052:	f107 021c 	add.w	r2, r7, #28
 800d056:	7b39      	ldrb	r1, [r7, #12]
 800d058:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d05c:	f107 0314 	add.w	r3, r7, #20
 800d060:	9301      	str	r3, [sp, #4]
 800d062:	f107 0318 	add.w	r3, r7, #24
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	4613      	mov	r3, r2
 800d06a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d06c:	f000 fd86 	bl	800db7c <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800d070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d072:	469c      	mov	ip, r3
 800d074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d076:	469e      	mov	lr, r3
 800d078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07a:	4698      	mov	r8, r3
 800d07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07e:	4619      	mov	r1, r3
 800d080:	6a3b      	ldr	r3, [r7, #32]
 800d082:	461c      	mov	r4, r3
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	461d      	mov	r5, r3
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	461e      	mov	r6, r3
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800d090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d092:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53LX_f_023(
 800d096:	607b      	str	r3, [r7, #4]
 800d098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d09a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d09e:	7bb8      	ldrb	r0, [r7, #14]
 800d0a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d0a2:	9207      	str	r2, [sp, #28]
 800d0a4:	9306      	str	r3, [sp, #24]
 800d0a6:	687a      	ldr	r2, [r7, #4]
 800d0a8:	9205      	str	r2, [sp, #20]
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	9304      	str	r3, [sp, #16]
 800d0ae:	9603      	str	r6, [sp, #12]
 800d0b0:	9502      	str	r5, [sp, #8]
 800d0b2:	9401      	str	r4, [sp, #4]
 800d0b4:	9100      	str	r1, [sp, #0]
 800d0b6:	4643      	mov	r3, r8
 800d0b8:	4672      	mov	r2, lr
 800d0ba:	4661      	mov	r1, ip
 800d0bc:	f002 fee6 	bl	800fe8c <VL53LX_f_023>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800d0c6:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800d0ca:	f113 0f0f 	cmn.w	r3, #15
 800d0ce:	d103      	bne.n	800d0d8 <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800d0d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d0d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0d6:	801a      	strh	r2, [r3, #0]


	return status;
 800d0d8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3738      	adds	r7, #56	; 0x38
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d0e6 <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800d0e6:	b490      	push	{r4, r7}
 800d0e8:	b084      	sub	sp, #16
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	4604      	mov	r4, r0
 800d0ee:	4608      	mov	r0, r1
 800d0f0:	4611      	mov	r1, r2
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	4623      	mov	r3, r4
 800d0f6:	71fb      	strb	r3, [r7, #7]
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	71bb      	strb	r3, [r7, #6]
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	717b      	strb	r3, [r7, #5]
 800d100:	4613      	mov	r3, r2
 800d102:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800d104:	2300      	movs	r3, #0
 800d106:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800d108:	2300      	movs	r3, #0
 800d10a:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800d10c:	6a3b      	ldr	r3, [r7, #32]
 800d10e:	79fa      	ldrb	r2, [r7, #7]
 800d110:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800d112:	6a3b      	ldr	r3, [r7, #32]
 800d114:	2200      	movs	r2, #0
 800d116:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	781a      	ldrb	r2, [r3, #0]
 800d11c:	6a3b      	ldr	r3, [r7, #32]
 800d11e:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800d120:	69fb      	ldr	r3, [r7, #28]
 800d122:	785a      	ldrb	r2, [r3, #1]
 800d124:	6a3b      	ldr	r3, [r7, #32]
 800d126:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	789a      	ldrb	r2, [r3, #2]
 800d12c:	6a3b      	ldr	r3, [r7, #32]
 800d12e:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800d130:	69fb      	ldr	r3, [r7, #28]
 800d132:	78da      	ldrb	r2, [r3, #3]
 800d134:	6a3b      	ldr	r3, [r7, #32]
 800d136:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	791a      	ldrb	r2, [r3, #4]
 800d13c:	6a3b      	ldr	r3, [r7, #32]
 800d13e:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800d140:	69fb      	ldr	r3, [r7, #28]
 800d142:	795a      	ldrb	r2, [r3, #5]
 800d144:	6a3b      	ldr	r3, [r7, #32]
 800d146:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	791a      	ldrb	r2, [r3, #4]
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	1ad3      	subs	r3, r2, r3
 800d152:	b2db      	uxtb	r3, r3
 800d154:	3301      	adds	r3, #1
 800d156:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800d158:	6a3b      	ldr	r3, [r7, #32]
 800d15a:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800d15c:	69bb      	ldr	r3, [r7, #24]
 800d15e:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800d162:	6a3b      	ldr	r3, [r7, #32]
 800d164:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800d166:	69fb      	ldr	r3, [r7, #28]
 800d168:	8c1a      	ldrh	r2, [r3, #32]
 800d16a:	6a3b      	ldr	r3, [r7, #32]
 800d16c:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	695b      	ldr	r3, [r3, #20]
 800d172:	b29a      	uxth	r2, r3
 800d174:	6a3b      	ldr	r3, [r7, #32]
 800d176:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800d178:	69fb      	ldr	r3, [r7, #28]
 800d17a:	699b      	ldr	r3, [r3, #24]
 800d17c:	b29a      	uxth	r2, r3
 800d17e:	6a3b      	ldr	r3, [r7, #32]
 800d180:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	69db      	ldr	r3, [r3, #28]
 800d188:	b29a      	uxth	r2, r3
 800d18a:	6a3b      	ldr	r3, [r7, #32]
 800d18c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800d190:	69fb      	ldr	r3, [r7, #28]
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	461a      	mov	r2, r3
 800d196:	6a3b      	ldr	r3, [r7, #32]
 800d198:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800d19a:	69fb      	ldr	r3, [r7, #28]
 800d19c:	691a      	ldr	r2, [r3, #16]
 800d19e:	6a3b      	ldr	r3, [r7, #32]
 800d1a0:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	689b      	ldr	r3, [r3, #8]
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	6a3b      	ldr	r3, [r7, #32]
 800d1aa:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800d1ac:	69bb      	ldr	r3, [r7, #24]
 800d1ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d1b2:	6a3b      	ldr	r3, [r7, #32]
 800d1b4:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800d1b6:	6a3b      	ldr	r3, [r7, #32]
 800d1b8:	2213      	movs	r2, #19
 800d1ba:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 800d1be:	887b      	ldrh	r3, [r7, #2]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00a      	beq.n	800d1da <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	8c1b      	ldrh	r3, [r3, #32]
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	887b      	ldrh	r3, [r7, #2]
 800d1cc:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d903      	bls.n	800d1da <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800d1d2:	6a3b      	ldr	r3, [r7, #32]
 800d1d4:	2206      	movs	r2, #6
 800d1d6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800d1da:	79bb      	ldrb	r3, [r7, #6]
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	021b      	lsls	r3, r3, #8
 800d1e0:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800d1e2:	6a3b      	ldr	r3, [r7, #32]
 800d1e4:	8a9b      	ldrh	r3, [r3, #20]
 800d1e6:	89fa      	ldrh	r2, [r7, #14]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d205      	bcs.n	800d1f8 <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800d1ec:	6a3b      	ldr	r3, [r7, #32]
 800d1ee:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800d1f0:	89fb      	ldrh	r3, [r7, #14]
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	81fb      	strh	r3, [r7, #14]
 800d1f6:	e001      	b.n	800d1fc <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800d1fc:	797b      	ldrb	r3, [r7, #5]
 800d1fe:	b29b      	uxth	r3, r3
 800d200:	021b      	lsls	r3, r3, #8
 800d202:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800d204:	69bb      	ldr	r3, [r7, #24]
 800d206:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800d20a:	89bb      	ldrh	r3, [r7, #12]
 800d20c:	4413      	add	r3, r2
 800d20e:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d210:	6a3b      	ldr	r3, [r7, #32]
 800d212:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d216:	89fa      	ldrh	r2, [r7, #14]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d805      	bhi.n	800d228 <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800d21c:	6a3b      	ldr	r3, [r7, #32]
 800d21e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d222:	89ba      	ldrh	r2, [r7, #12]
 800d224:	429a      	cmp	r2, r3
 800d226:	d203      	bcs.n	800d230 <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800d228:	6a3b      	ldr	r3, [r7, #32]
 800d22a:	2205      	movs	r2, #5
 800d22c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 800d230:	bf00      	nop
 800d232:	3710      	adds	r7, #16
 800d234:	46bd      	mov	sp, r7
 800d236:	bc90      	pop	{r4, r7}
 800d238:	4770      	bx	lr

0800d23a <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800d23a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d23c:	b08f      	sub	sp, #60	; 0x3c
 800d23e:	af06      	add	r7, sp, #24
 800d240:	60f8      	str	r0, [r7, #12]
 800d242:	60b9      	str	r1, [r7, #8]
 800d244:	607a      	str	r2, [r7, #4]
 800d246:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d248:	2300      	movs	r3, #0
 800d24a:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800d24c:	2300      	movs	r3, #0
 800d24e:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800d250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d252:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d256:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800d258:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d25a:	f7ff f879 	bl	800c350 <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800d25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d260:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 800d264:	22ac      	movs	r2, #172	; 0xac
 800d266:	6839      	ldr	r1, [r7, #0]
 800d268:	4618      	mov	r0, r3
 800d26a:	f006 febb 	bl	8013fe4 <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	781a      	ldrb	r2, [r3, #0]
 800d272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d274:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	785a      	ldrb	r2, [r3, #1]
 800d27a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d27c:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	789a      	ldrb	r2, [r3, #2]
 800d282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d284:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800d28c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d28e:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800d290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d292:	2200      	movs	r2, #0
 800d294:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800d296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d298:	2204      	movs	r2, #4
 800d29a:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800d29c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d29e:	2200      	movs	r2, #0
 800d2a0:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	77bb      	strb	r3, [r7, #30]
 800d2a6:	e008      	b.n	800d2ba <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800d2a8:	7fbb      	ldrb	r3, [r7, #30]
 800d2aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2ac:	005b      	lsls	r3, r3, #1
 800d2ae:	4413      	add	r3, r2
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d2b4:	7fbb      	ldrb	r3, [r7, #30]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	77bb      	strb	r3, [r7, #30]
 800d2ba:	7fbb      	ldrb	r3, [r7, #30]
 800d2bc:	2b04      	cmp	r3, #4
 800d2be:	d9f3      	bls.n	800d2a8 <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800d2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2c2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7fe f8b9 	bl	800b43e <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2d4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d2d8:	4619      	mov	r1, r3
 800d2da:	4610      	mov	r0, r2
 800d2dc:	f7fe f8ef 	bl	800b4be <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800d2e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2e2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7fe fcb9 	bl	800bc5e <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800d2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ee:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fe f95d 	bl	800b5b2 <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d009      	beq.n	800d316 <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800d302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d304:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d30a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800d30e:	461a      	mov	r2, r3
 800d310:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d312:	f000 fd7b 	bl	800de0c <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d31e:	2300      	movs	r3, #0
 800d320:	77bb      	strb	r3, [r7, #30]
 800d322:	e01e      	b.n	800d362 <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800d324:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d117      	bne.n	800d35c <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800d32c:	7fbb      	ldrb	r3, [r7, #30]
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	3304      	adds	r3, #4
 800d332:	005b      	lsls	r3, r3, #1
 800d334:	4413      	add	r3, r2
 800d336:	8898      	ldrh	r0, [r3, #4]
 800d338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d33a:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800d33e:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800d340:	005b      	lsls	r3, r3, #1
 800d342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d344:	4413      	add	r3, r2
 800d346:	3304      	adds	r3, #4
 800d348:	9301      	str	r3, [sp, #4]
 800d34a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d34c:	9300      	str	r3, [sp, #0]
 800d34e:	460b      	mov	r3, r1
 800d350:	68ba      	ldr	r2, [r7, #8]
 800d352:	68f9      	ldr	r1, [r7, #12]
 800d354:	f7fe fcce 	bl	800bcf4 <VL53LX_f_001>
 800d358:	4603      	mov	r3, r0
 800d35a:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d35c:	7fbb      	ldrb	r3, [r7, #30]
 800d35e:	3301      	adds	r3, #1
 800d360:	77bb      	strb	r3, [r7, #30]
 800d362:	7fbb      	ldrb	r3, [r7, #30]
 800d364:	2b04      	cmp	r3, #4
 800d366:	d9dd      	bls.n	800d324 <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800d368:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d11a      	bne.n	800d3a6 <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800d378:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 800d384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d386:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d38a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d38c:	f502 7252 	add.w	r2, r2, #840	; 0x348
 800d390:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d392:	9102      	str	r1, [sp, #8]
 800d394:	9201      	str	r2, [sp, #4]
 800d396:	9300      	str	r3, [sp, #0]
 800d398:	462b      	mov	r3, r5
 800d39a:	4622      	mov	r2, r4
 800d39c:	4631      	mov	r1, r6
 800d39e:	f7ff f850 	bl	800c442 <VL53LX_f_006>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800d3a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d104      	bne.n	800d3b8 <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800d3ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d3b0:	f7ff f972 	bl	800c698 <VL53LX_f_007>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d3b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d104      	bne.n	800d3ca <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800d3c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d3c2:	f7ff f9b7 	bl	800c734 <VL53LX_f_008>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d3ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d104      	bne.n	800d3dc <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800d3d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d3d4:	f7ff fa2c 	bl	800c830 <VL53LX_f_009>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d3dc:	2300      	movs	r3, #0
 800d3de:	77bb      	strb	r3, [r7, #30]
 800d3e0:	e0a6      	b.n	800d530 <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800d3e2:	7fba      	ldrb	r2, [r7, #30]
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	00db      	lsls	r3, r3, #3
 800d3e8:	4413      	add	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d3f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3f2:	4413      	add	r3, r2
 800d3f4:	3304      	adds	r3, #4
 800d3f6:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800d3f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d109      	bne.n	800d414 <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800d400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d402:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d406:	7fbb      	ldrb	r3, [r7, #30]
 800d408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7ff fb66 	bl	800cadc <VL53LX_f_010>
 800d410:	4603      	mov	r3, r0
 800d412:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800d414:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d110      	bne.n	800d43e <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800d41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d41e:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800d428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d42a:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800d42e:	7fb8      	ldrb	r0, [r7, #30]
 800d430:	9300      	str	r3, [sp, #0]
 800d432:	4613      	mov	r3, r2
 800d434:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d436:	f7ff fd5a 	bl	800ceee <VL53LX_f_011>
 800d43a:	4603      	mov	r3, r0
 800d43c:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800d43e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10d      	bne.n	800d462 <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800d446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d448:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d44c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d44e:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800d452:	7fb8      	ldrb	r0, [r7, #30]
 800d454:	9300      	str	r3, [sp, #0]
 800d456:	2300      	movs	r3, #0
 800d458:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d45a:	f7ff fd48 	bl	800ceee <VL53LX_f_011>
 800d45e:	4603      	mov	r3, r0
 800d460:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800d462:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d10d      	bne.n	800d486 <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800d46a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d46c:	f503 7152 	add.w	r1, r3, #840	; 0x348
 800d470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d472:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800d476:	7fb8      	ldrb	r0, [r7, #30]
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	2300      	movs	r3, #0
 800d47c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d47e:	f7ff fd36 	bl	800ceee <VL53LX_f_011>
 800d482:	4603      	mov	r3, r0
 800d484:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800d486:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d109      	bne.n	800d4a2 <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800d48e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d490:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 800d494:	7fb8      	ldrb	r0, [r7, #30]
 800d496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d498:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d49a:	f000 f8dd 	bl	800d658 <VL53LX_f_026>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800d4a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d108      	bne.n	800d4bc <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	8a19      	ldrh	r1, [r3, #16]
 800d4ae:	7fb8      	ldrb	r0, [r7, #30]
 800d4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4b4:	f000 f95c 	bl	800d770 <VL53LX_f_027>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800d4bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d124      	bne.n	800d50e <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	789d      	ldrb	r5, [r3, #2]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	7e1e      	ldrb	r6, [r3, #24]
 800d4cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4ce:	f893 c003 	ldrb.w	ip, [r3, #3]
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	f893 e006 	ldrb.w	lr, [r3, #6]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4e0:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 800d4e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d4e6:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 800d4ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d4ec:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 800d4f0:	697c      	ldr	r4, [r7, #20]
 800d4f2:	3420      	adds	r4, #32
 800d4f4:	9404      	str	r4, [sp, #16]
 800d4f6:	9003      	str	r0, [sp, #12]
 800d4f8:	9102      	str	r1, [sp, #8]
 800d4fa:	9201      	str	r2, [sp, #4]
 800d4fc:	9300      	str	r3, [sp, #0]
 800d4fe:	4673      	mov	r3, lr
 800d500:	4662      	mov	r2, ip
 800d502:	4631      	mov	r1, r6
 800d504:	4628      	mov	r0, r5
 800d506:	f7ff fd46 	bl	800cf96 <VL53LX_f_014>
 800d50a:	4603      	mov	r3, r0
 800d50c:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800d50e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d109      	bne.n	800d52a <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800d516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d518:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 800d51c:	7fb8      	ldrb	r0, [r7, #30]
 800d51e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d520:	2101      	movs	r1, #1
 800d522:	f7ff fb2e 	bl	800cb82 <VL53LX_f_015>
 800d526:	4603      	mov	r3, r0
 800d528:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d52a:	7fbb      	ldrb	r3, [r7, #30]
 800d52c:	3301      	adds	r3, #1
 800d52e:	77bb      	strb	r3, [r7, #30]
 800d530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d532:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d536:	7fba      	ldrb	r2, [r7, #30]
 800d538:	429a      	cmp	r2, r3
 800d53a:	f4ff af52 	bcc.w	800d3e2 <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800d53e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d107      	bne.n	800d556 <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	785b      	ldrb	r3, [r3, #1]
 800d54a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7ff fa41 	bl	800c9d4 <VL53LX_f_016>
 800d552:	4603      	mov	r3, r0
 800d554:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d556:	2300      	movs	r3, #0
 800d558:	77bb      	strb	r3, [r7, #30]
 800d55a:	e071      	b.n	800d640 <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800d55c:	7fba      	ldrb	r2, [r7, #30]
 800d55e:	4613      	mov	r3, r2
 800d560:	00db      	lsls	r3, r3, #3
 800d562:	4413      	add	r3, r2
 800d564:	009b      	lsls	r3, r3, #2
 800d566:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d56a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d56c:	4413      	add	r3, r2
 800d56e:	3304      	adds	r3, #4
 800d570:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800d572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d574:	7c9a      	ldrb	r2, [r3, #18]
 800d576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d578:	7c5b      	ldrb	r3, [r3, #17]
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d25c      	bcs.n	800d638 <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800d586:	429a      	cmp	r2, r3
 800d588:	dd57      	ble.n	800d63a <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800d58e:	2bff      	cmp	r3, #255	; 0xff
 800d590:	d053      	beq.n	800d63a <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800d592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d594:	7c9b      	ldrb	r3, [r3, #18]
 800d596:	461a      	mov	r2, r3
			prange_data =
 800d598:	234c      	movs	r3, #76	; 0x4c
 800d59a:	fb03 f302 	mul.w	r3, r3, r2
 800d59e:	3310      	adds	r3, #16
 800d5a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5a2:	4413      	add	r3, r2
 800d5a4:	3304      	adds	r3, #4
 800d5a6:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800d5a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d115      	bne.n	800d5dc <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800d5b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5b2:	7c98      	ldrb	r0, [r3, #18]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f893 1020 	ldrb.w	r1, [r3, #32]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	8b5d      	ldrh	r5, [r3, #26]
 800d5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5c6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d5ca:	693a      	ldr	r2, [r7, #16]
 800d5cc:	9202      	str	r2, [sp, #8]
 800d5ce:	697a      	ldr	r2, [r7, #20]
 800d5d0:	9201      	str	r2, [sp, #4]
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	462b      	mov	r3, r5
 800d5d6:	4622      	mov	r2, r4
 800d5d8:	f7ff fd85 	bl	800d0e6 <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800d5dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d115      	bne.n	800d610 <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800d5e4:	69bb      	ldr	r3, [r7, #24]
 800d5e6:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 800d5ea:	69bb      	ldr	r3, [r7, #24]
 800d5ec:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 800d5f0:	69bb      	ldr	r3, [r7, #24]
 800d5f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 800d5fc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d600:	9301      	str	r3, [sp, #4]
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	9300      	str	r3, [sp, #0]
 800d606:	4623      	mov	r3, r4
 800d608:	f000 fb11 	bl	800dc2e <VL53LX_f_018>
 800d60c:	4603      	mov	r3, r0
 800d60e:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800d610:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d108      	bne.n	800d62a <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	8bd8      	ldrh	r0, [r3, #30]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800d622:	693a      	ldr	r2, [r7, #16]
 800d624:	4619      	mov	r1, r3
 800d626:	f000 fba7 	bl	800dd78 <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800d62a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d62c:	7c9b      	ldrb	r3, [r3, #18]
 800d62e:	3301      	adds	r3, #1
 800d630:	b2da      	uxtb	r2, r3
 800d632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d634:	749a      	strb	r2, [r3, #18]
 800d636:	e000      	b.n	800d63a <VL53LX_f_025+0x400>
			continue;
 800d638:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d63a:	7fbb      	ldrb	r3, [r7, #30]
 800d63c:	3301      	adds	r3, #1
 800d63e:	77bb      	strb	r3, [r7, #30]
 800d640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d642:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d646:	7fba      	ldrb	r2, [r7, #30]
 800d648:	429a      	cmp	r2, r3
 800d64a:	d387      	bcc.n	800d55c <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800d64c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3724      	adds	r7, #36	; 0x24
 800d654:	46bd      	mov	sp, r7
 800d656:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d658 <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b08c      	sub	sp, #48	; 0x30
 800d65c:	af02      	add	r7, sp, #8
 800d65e:	60b9      	str	r1, [r7, #8]
 800d660:	607a      	str	r2, [r7, #4]
 800d662:	603b      	str	r3, [r7, #0]
 800d664:	4603      	mov	r3, r0
 800d666:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800d668:	2300      	movs	r3, #0
 800d66a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800d66e:	7bfa      	ldrb	r2, [r7, #15]
 800d670:	4613      	mov	r3, r2
 800d672:	00db      	lsls	r3, r3, #3
 800d674:	4413      	add	r3, r2
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	4413      	add	r3, r2
 800d680:	3304      	adds	r3, #4
 800d682:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800d684:	2300      	movs	r3, #0
 800d686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 800d68a:	2300      	movs	r3, #0
 800d68c:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800d68e:	2300      	movs	r3, #0
 800d690:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800d692:	2300      	movs	r3, #0
 800d694:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800d696:	2300      	movs	r3, #0
 800d698:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	785a      	ldrb	r2, [r3, #1]
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	781a      	ldrb	r2, [r3, #0]
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	789a      	ldrb	r2, [r3, #2]
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d6b2:	6a3b      	ldr	r3, [r7, #32]
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6ba:	e04d      	b.n	800d758 <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	78da      	ldrb	r2, [r3, #3]
 800d6c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6c8:	fb02 f201 	mul.w	r2, r2, r1
 800d6cc:	1a9b      	subs	r3, r3, r2
 800d6ce:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800d6d0:	6a3b      	ldr	r3, [r7, #32]
 800d6d2:	7999      	ldrb	r1, [r3, #6]
 800d6d4:	f107 0218 	add.w	r2, r7, #24
 800d6d8:	7ff8      	ldrb	r0, [r7, #31]
 800d6da:	f107 0310 	add.w	r3, r7, #16
 800d6de:	9301      	str	r3, [sp, #4]
 800d6e0:	f107 0314 	add.w	r3, r7, #20
 800d6e4:	9300      	str	r3, [sp, #0]
 800d6e6:	4613      	mov	r3, r2
 800d6e8:	68ba      	ldr	r2, [r7, #8]
 800d6ea:	f000 fa47 	bl	800db7c <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800d6ee:	7ffb      	ldrb	r3, [r7, #31]
 800d6f0:	69ba      	ldr	r2, [r7, #24]
 800d6f2:	6839      	ldr	r1, [r7, #0]
 800d6f4:	009b      	lsls	r3, r3, #2
 800d6f6:	440b      	add	r3, r1
 800d6f8:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800d6fa:	7ffb      	ldrb	r3, [r7, #31]
 800d6fc:	697a      	ldr	r2, [r7, #20]
 800d6fe:	6839      	ldr	r1, [r7, #0]
 800d700:	3318      	adds	r3, #24
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	440b      	add	r3, r1
 800d706:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800d708:	7ffb      	ldrb	r3, [r7, #31]
 800d70a:	693a      	ldr	r2, [r7, #16]
 800d70c:	6839      	ldr	r1, [r7, #0]
 800d70e:	3330      	adds	r3, #48	; 0x30
 800d710:	009b      	lsls	r3, r3, #2
 800d712:	440b      	add	r3, r1
 800d714:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800d716:	69ba      	ldr	r2, [r7, #24]
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	689a      	ldr	r2, [r3, #8]
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800d724:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800d726:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800d728:	6839      	ldr	r1, [r7, #0]
 800d72a:	3348      	adds	r3, #72	; 0x48
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	440b      	add	r3, r1
 800d730:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800d732:	697a      	ldr	r2, [r7, #20]
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	689a      	ldr	r2, [r3, #8]
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800d740:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800d742:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800d744:	6839      	ldr	r1, [r7, #0]
 800d746:	3360      	adds	r3, #96	; 0x60
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	440b      	add	r3, r1
 800d74c:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d74e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d752:	3301      	adds	r3, #1
 800d754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d758:	6a3b      	ldr	r3, [r7, #32]
 800d75a:	791b      	ldrb	r3, [r3, #4]
 800d75c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d760:	429a      	cmp	r2, r3
 800d762:	d9ab      	bls.n	800d6bc <VL53LX_f_026+0x64>
	}

	return status;
 800d764:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3728      	adds	r7, #40	; 0x28
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800d770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d772:	b08f      	sub	sp, #60	; 0x3c
 800d774:	af06      	add	r7, sp, #24
 800d776:	60ba      	str	r2, [r7, #8]
 800d778:	607b      	str	r3, [r7, #4]
 800d77a:	4603      	mov	r3, r0
 800d77c:	73fb      	strb	r3, [r7, #15]
 800d77e:	460b      	mov	r3, r1
 800d780:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800d782:	2300      	movs	r3, #0
 800d784:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800d786:	2300      	movs	r3, #0
 800d788:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800d78a:	7bfa      	ldrb	r2, [r7, #15]
 800d78c:	4613      	mov	r3, r2
 800d78e:	00db      	lsls	r3, r3, #3
 800d790:	4413      	add	r3, r2
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	4413      	add	r3, r2
 800d79c:	3304      	adds	r3, #4
 800d79e:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800d7ac:	69bb      	ldr	r3, [r7, #24]
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	77fb      	strb	r3, [r7, #31]
 800d7b2:	e0b9      	b.n	800d928 <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	78da      	ldrb	r2, [r3, #3]
 800d7b8:	7ffb      	ldrb	r3, [r7, #31]
 800d7ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7be:	fb02 f201 	mul.w	r2, r2, r1
 800d7c2:	1a9b      	subs	r3, r3, r2
 800d7c4:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800d7c6:	7ffb      	ldrb	r3, [r7, #31]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	78d2      	ldrb	r2, [r2, #3]
 800d7ce:	fb93 f1f2 	sdiv	r1, r3, r2
 800d7d2:	fb02 f201 	mul.w	r2, r2, r1
 800d7d6:	1a9b      	subs	r3, r3, r2
 800d7d8:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	789b      	ldrb	r3, [r3, #2]
 800d7de:	7dfa      	ldrb	r2, [r7, #23]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	f080 809e 	bcs.w	800d922 <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800d7ea:	7dba      	ldrb	r2, [r7, #22]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	f080 8098 	bcs.w	800d922 <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800d7f2:	7dfb      	ldrb	r3, [r7, #23]
 800d7f4:	68ba      	ldr	r2, [r7, #8]
 800d7f6:	3348      	adds	r3, #72	; 0x48
 800d7f8:	009b      	lsls	r3, r3, #2
 800d7fa:	4413      	add	r3, r2
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d10e      	bne.n	800d820 <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800d802:	7dfb      	ldrb	r3, [r7, #23]
 800d804:	68ba      	ldr	r2, [r7, #8]
 800d806:	3360      	adds	r3, #96	; 0x60
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	4413      	add	r3, r2
 800d80c:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d106      	bne.n	800d820 <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800d812:	7dfb      	ldrb	r3, [r7, #23]
 800d814:	68ba      	ldr	r2, [r7, #8]
 800d816:	4413      	add	r3, r2
 800d818:	2200      	movs	r2, #0
 800d81a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800d81e:	e043      	b.n	800d8a8 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800d820:	7dfb      	ldrb	r3, [r7, #23]
 800d822:	68ba      	ldr	r2, [r7, #8]
 800d824:	3348      	adds	r3, #72	; 0x48
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	4413      	add	r3, r2
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	db0e      	blt.n	800d84e <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800d830:	7dfb      	ldrb	r3, [r7, #23]
 800d832:	68ba      	ldr	r2, [r7, #8]
 800d834:	3360      	adds	r3, #96	; 0x60
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	4413      	add	r3, r2
 800d83a:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	db06      	blt.n	800d84e <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800d840:	7dfb      	ldrb	r3, [r7, #23]
 800d842:	68ba      	ldr	r2, [r7, #8]
 800d844:	4413      	add	r3, r2
 800d846:	2201      	movs	r2, #1
 800d848:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800d84c:	e02c      	b.n	800d8a8 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800d84e:	7dfb      	ldrb	r3, [r7, #23]
 800d850:	68ba      	ldr	r2, [r7, #8]
 800d852:	3348      	adds	r3, #72	; 0x48
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	4413      	add	r3, r2
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	da1e      	bge.n	800d89c <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800d85e:	7dfb      	ldrb	r3, [r7, #23]
 800d860:	68ba      	ldr	r2, [r7, #8]
 800d862:	3360      	adds	r3, #96	; 0x60
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	4413      	add	r3, r2
 800d868:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	db16      	blt.n	800d89c <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800d86e:	7dbb      	ldrb	r3, [r7, #22]
 800d870:	68ba      	ldr	r2, [r7, #8]
 800d872:	3348      	adds	r3, #72	; 0x48
 800d874:	009b      	lsls	r3, r3, #2
 800d876:	4413      	add	r3, r2
 800d878:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	db0e      	blt.n	800d89c <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800d87e:	7dbb      	ldrb	r3, [r7, #22]
 800d880:	68ba      	ldr	r2, [r7, #8]
 800d882:	3360      	adds	r3, #96	; 0x60
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	4413      	add	r3, r2
 800d888:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	da06      	bge.n	800d89c <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800d88e:	7dfb      	ldrb	r3, [r7, #23]
 800d890:	68ba      	ldr	r2, [r7, #8]
 800d892:	4413      	add	r3, r2
 800d894:	2201      	movs	r2, #1
 800d896:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800d89a:	e005      	b.n	800d8a8 <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800d89c:	7dfb      	ldrb	r3, [r7, #23]
 800d89e:	68ba      	ldr	r2, [r7, #8]
 800d8a0:	4413      	add	r3, r2
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800d8a8:	7dfb      	ldrb	r3, [r7, #23]
 800d8aa:	68ba      	ldr	r2, [r7, #8]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d035      	beq.n	800d922 <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	7ffa      	ldrb	r2, [r7, #31]
 800d8ba:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800d8bc:	7dfb      	ldrb	r3, [r7, #23]
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	4413      	add	r3, r2
 800d8c4:	685c      	ldr	r4, [r3, #4]
 800d8c6:	7dfb      	ldrb	r3, [r7, #23]
 800d8c8:	68ba      	ldr	r2, [r7, #8]
 800d8ca:	3318      	adds	r3, #24
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	4413      	add	r3, r2
 800d8d0:	685d      	ldr	r5, [r3, #4]
 800d8d2:	7dfb      	ldrb	r3, [r7, #23]
 800d8d4:	68ba      	ldr	r2, [r7, #8]
 800d8d6:	3330      	adds	r3, #48	; 0x30
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	4413      	add	r3, r2
 800d8dc:	685e      	ldr	r6, [r3, #4]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	689b      	ldr	r3, [r3, #8]
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	78d2      	ldrb	r2, [r2, #3]
 800d8e6:	69b9      	ldr	r1, [r7, #24]
 800d8e8:	3118      	adds	r1, #24
 800d8ea:	7ff8      	ldrb	r0, [r7, #31]
 800d8ec:	9105      	str	r1, [sp, #20]
 800d8ee:	9204      	str	r2, [sp, #16]
 800d8f0:	9303      	str	r3, [sp, #12]
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	9302      	str	r3, [sp, #8]
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	9301      	str	r3, [sp, #4]
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	9300      	str	r3, [sp, #0]
 800d8fe:	4633      	mov	r3, r6
 800d900:	462a      	mov	r2, r5
 800d902:	4621      	mov	r1, r4
 800d904:	f000 f81c 	bl	800d940 <VL53LX_f_028>
 800d908:	4603      	mov	r3, r0
 800d90a:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800d90c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d910:	f113 0f0f 	cmn.w	r3, #15
 800d914:	d105      	bne.n	800d922 <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800d916:	7dfb      	ldrb	r3, [r7, #23]
 800d918:	68ba      	ldr	r2, [r7, #8]
 800d91a:	4413      	add	r3, r2
 800d91c:	2200      	movs	r2, #0
 800d91e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800d922:	7ffb      	ldrb	r3, [r7, #31]
 800d924:	3301      	adds	r3, #1
 800d926:	77fb      	strb	r3, [r7, #31]
 800d928:	69bb      	ldr	r3, [r7, #24]
 800d92a:	791b      	ldrb	r3, [r3, #4]
 800d92c:	7ffa      	ldrb	r2, [r7, #31]
 800d92e:	429a      	cmp	r2, r3
 800d930:	f4ff af40 	bcc.w	800d7b4 <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800d934:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3724      	adds	r7, #36	; 0x24
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d940 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800d940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d944:	b09e      	sub	sp, #120	; 0x78
 800d946:	af00      	add	r7, sp, #0
 800d948:	64b9      	str	r1, [r7, #72]	; 0x48
 800d94a:	647a      	str	r2, [r7, #68]	; 0x44
 800d94c:	643b      	str	r3, [r7, #64]	; 0x40
 800d94e:	4603      	mov	r3, r0
 800d950:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800d954:	23f1      	movs	r3, #241	; 0xf1
 800d956:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800d95a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d95e:	f04f 0300 	mov.w	r3, #0
 800d962:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800d966:	f04f 0200 	mov.w	r2, #0
 800d96a:	f04f 0300 	mov.w	r3, #0
 800d96e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  half_b_minus_amb = 0;
 800d972:	f04f 0200 	mov.w	r2, #0
 800d976:	f04f 0300 	mov.w	r3, #0
 800d97a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800d97e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d980:	4618      	mov	r0, r3
 800d982:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800d986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d98a:	461a      	mov	r2, r3
 800d98c:	ea4f 73e2 	mov.w	r3, r2, asr #31
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800d990:	ebb0 0802 	subs.w	r8, r0, r2
 800d994:	eb61 0903 	sbc.w	r9, r1, r3
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800d998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d99a:	461a      	mov	r2, r3
 800d99c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d9a0:	ebb8 0a02 	subs.w	sl, r8, r2
 800d9a4:	eb69 0b03 	sbc.w	fp, r9, r3
 800d9a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d9b2:	ebba 0402 	subs.w	r4, sl, r2
 800d9b6:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800d9ba:	f04f 0200 	mov.w	r2, #0
 800d9be:	f04f 0300 	mov.w	r3, #0
 800d9c2:	032b      	lsls	r3, r5, #12
 800d9c4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800d9c8:	0322      	lsls	r2, r4, #12
 800d9ca:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800d9ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800d9d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d9da:	461a      	mov	r2, r3
 800d9dc:	ea4f 73e2 	mov.w	r3, r2, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800d9e0:	1a84      	subs	r4, r0, r2
 800d9e2:	63bc      	str	r4, [r7, #56]	; 0x38
 800d9e4:	eb61 0303 	sbc.w	r3, r1, r3
 800d9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800d9ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d9f4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800d9f8:	4621      	mov	r1, r4
 800d9fa:	1a89      	subs	r1, r1, r2
 800d9fc:	6339      	str	r1, [r7, #48]	; 0x30
 800d9fe:	4629      	mov	r1, r5
 800da00:	eb61 0303 	sbc.w	r3, r1, r3
 800da04:	637b      	str	r3, [r7, #52]	; 0x34
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800da06:	f04f 0200 	mov.w	r2, #0
 800da0a:	f04f 0300 	mov.w	r3, #0
 800da0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800da12:	4629      	mov	r1, r5
 800da14:	030b      	lsls	r3, r1, #12
 800da16:	4621      	mov	r1, r4
 800da18:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800da1c:	4621      	mov	r1, r4
 800da1e:	030a      	lsls	r2, r1, #12
 800da20:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	if (half_b_minus_amb != 0) {
 800da24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800da28:	4313      	orrs	r3, r2
 800da2a:	f000 809c 	beq.w	800db66 <VL53LX_f_028+0x226>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800da2e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800da32:	f04f 0000 	mov.w	r0, #0
 800da36:	f04f 0100 	mov.w	r1, #0
 800da3a:	0319      	lsls	r1, r3, #12
 800da3c:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800da40:	0310      	lsls	r0, r2, #12
 800da42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800da46:	1814      	adds	r4, r2, r0
 800da48:	623c      	str	r4, [r7, #32]
 800da4a:	414b      	adcs	r3, r1
 800da4c:	627b      	str	r3, [r7, #36]	; 0x24
 800da4e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800da52:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800da56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800da5a:	1891      	adds	r1, r2, r2
 800da5c:	61b9      	str	r1, [r7, #24]
 800da5e:	415b      	adcs	r3, r3
 800da60:	61fb      	str	r3, [r7, #28]
 800da62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800da66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800da6a:	f7f2 fc09 	bl	8000280 <__aeabi_ldivmod>
 800da6e:	4602      	mov	r2, r0
 800da70:	460b      	mov	r3, r1
 800da72:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		mean_phase  +=  2048;
 800da76:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800da7a:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800da7e:	6139      	str	r1, [r7, #16]
 800da80:	f143 0300 	adc.w	r3, r3, #0
 800da84:	617b      	str	r3, [r7, #20]
 800da86:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800da8a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase  += (4096 * (int64_t)bin);
 800da8e:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 800da92:	f04f 0100 	mov.w	r1, #0
 800da96:	f04f 0200 	mov.w	r2, #0
 800da9a:	f04f 0300 	mov.w	r3, #0
 800da9e:	030b      	lsls	r3, r1, #12
 800daa0:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800daa4:	0302      	lsls	r2, r0, #12
 800daa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800daaa:	1884      	adds	r4, r0, r2
 800daac:	60bc      	str	r4, [r7, #8]
 800daae:	eb41 0303 	adc.w	r3, r1, r3
 800dab2:	60fb      	str	r3, [r7, #12]
 800dab4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800dab8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800dabc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800dac0:	1c51      	adds	r1, r2, #1
 800dac2:	62b9      	str	r1, [r7, #40]	; 0x28
 800dac4:	f143 0300 	adc.w	r3, r3, #0
 800dac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800daca:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800dace:	462b      	mov	r3, r5
 800dad0:	0fdb      	lsrs	r3, r3, #31
 800dad2:	461a      	mov	r2, r3
 800dad4:	f04f 0300 	mov.w	r3, #0
 800dad8:	4621      	mov	r1, r4
 800dada:	1851      	adds	r1, r2, r1
 800dadc:	6039      	str	r1, [r7, #0]
 800dade:	4629      	mov	r1, r5
 800dae0:	eb43 0101 	adc.w	r1, r3, r1
 800dae4:	6079      	str	r1, [r7, #4]
 800dae6:	f04f 0200 	mov.w	r2, #0
 800daea:	f04f 0300 	mov.w	r3, #0
 800daee:	e9d7 4500 	ldrd	r4, r5, [r7]
 800daf2:	4621      	mov	r1, r4
 800daf4:	084a      	lsrs	r2, r1, #1
 800daf6:	4629      	mov	r1, r5
 800daf8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800dafc:	4629      	mov	r1, r5
 800dafe:	104b      	asrs	r3, r1, #1
 800db00:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		if (mean_phase  < 0)
 800db04:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800db08:	2a00      	cmp	r2, #0
 800db0a:	f173 0300 	sbcs.w	r3, r3, #0
 800db0e:	da05      	bge.n	800db1c <VL53LX_f_028+0x1dc>
			mean_phase = 0;
 800db10:	f04f 0200 	mov.w	r2, #0
 800db14:	f04f 0300 	mov.w	r3, #0
 800db18:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800db1c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800db20:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800db24:	f04f 0100 	mov.w	r1, #0
 800db28:	4290      	cmp	r0, r2
 800db2a:	eb71 0303 	sbcs.w	r3, r1, r3
 800db2e:	da05      	bge.n	800db3c <VL53LX_f_028+0x1fc>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800db30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db34:	f04f 0300 	mov.w	r3, #0
 800db38:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		mean_phase32 = (int32_t)mean_phase;
 800db3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db3e:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800db40:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800db44:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800db46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db48:	fb93 f1f2 	sdiv	r1, r3, r2
 800db4c:	fb02 f201 	mul.w	r2, r2, r1
 800db50:	1a9b      	subs	r3, r3, r2
 800db52:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase = mean_phase32;
 800db54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db56:	461a      	mov	r2, r3
 800db58:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800db5c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		status = VL53LX_ERROR_NONE;
 800db60:	2300      	movs	r3, #0
 800db62:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	}

	*pmean_phase = (uint32_t)mean_phase;
 800db66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800db6c:	601a      	str	r2, [r3, #0]

	return status;
 800db6e:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800db72:	4618      	mov	r0, r3
 800db74:	3778      	adds	r7, #120	; 0x78
 800db76:	46bd      	mov	sp, r7
 800db78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800db7c <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b087      	sub	sp, #28
 800db80:	af00      	add	r7, sp, #0
 800db82:	60ba      	str	r2, [r7, #8]
 800db84:	607b      	str	r3, [r7, #4]
 800db86:	4603      	mov	r3, r0
 800db88:	73fb      	strb	r3, [r7, #15]
 800db8a:	460b      	mov	r3, r1
 800db8c:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800db8e:	2300      	movs	r3, #0
 800db90:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800db92:	2300      	movs	r3, #0
 800db94:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800db9c:	7bfa      	ldrb	r2, [r7, #15]
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	3206      	adds	r2, #6
 800dba2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dba6:	6a3b      	ldr	r3, [r7, #32]
 800dba8:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800dbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbac:	2200      	movs	r2, #0
 800dbae:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	75fb      	strb	r3, [r7, #23]
 800dbb4:	e02f      	b.n	800dc16 <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800dbb6:	7bfa      	ldrb	r2, [r7, #15]
 800dbb8:	7dfb      	ldrb	r3, [r7, #23]
 800dbba:	4413      	add	r3, r2
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	7a92      	ldrb	r2, [r2, #10]
 800dbc0:	441a      	add	r2, r3
 800dbc2:	7bbb      	ldrb	r3, [r7, #14]
 800dbc4:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800dbc6:	68ba      	ldr	r2, [r7, #8]
 800dbc8:	7a92      	ldrb	r2, [r2, #10]
 800dbca:	fb93 f1f2 	sdiv	r1, r3, r2
 800dbce:	fb02 f201 	mul.w	r2, r2, r1
 800dbd2:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800dbd4:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800dbd6:	7dfa      	ldrb	r2, [r7, #23]
 800dbd8:	7bbb      	ldrb	r3, [r7, #14]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d20a      	bcs.n	800dbf4 <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	7db9      	ldrb	r1, [r7, #22]
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	3106      	adds	r1, #6
 800dbe8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dbec:	441a      	add	r2, r3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	601a      	str	r2, [r3, #0]
 800dbf2:	e00d      	b.n	800dc10 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800dbf4:	7dfa      	ldrb	r2, [r7, #23]
 800dbf6:	7bbb      	ldrb	r3, [r7, #14]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d909      	bls.n	800dc10 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800dbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	7db9      	ldrb	r1, [r7, #22]
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	3106      	adds	r1, #6
 800dc06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc0a:	441a      	add	r2, r3
 800dc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc0e:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800dc10:	7dfb      	ldrb	r3, [r7, #23]
 800dc12:	3301      	adds	r3, #1
 800dc14:	75fb      	strb	r3, [r7, #23]
 800dc16:	7bbb      	ldrb	r3, [r7, #14]
 800dc18:	005a      	lsls	r2, r3, #1
 800dc1a:	7dfb      	ldrb	r3, [r7, #23]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	daca      	bge.n	800dbb6 <VL53LX_f_022+0x3a>
	}
}
 800dc20:	bf00      	nop
 800dc22:	bf00      	nop
 800dc24:	371c      	adds	r7, #28
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr

0800dc2e <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b088      	sub	sp, #32
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	60ba      	str	r2, [r7, #8]
 800dc36:	461a      	mov	r2, r3
 800dc38:	4603      	mov	r3, r0
 800dc3a:	81fb      	strh	r3, [r7, #14]
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	81bb      	strh	r3, [r7, #12]
 800dc40:	4613      	mov	r3, r2
 800dc42:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800dc44:	2300      	movs	r3, #0
 800dc46:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800dc50:	2300      	movs	r3, #0
 800dc52:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800dc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc56:	89fa      	ldrh	r2, [r7, #14]
 800dc58:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800dc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5c:	89ba      	ldrh	r2, [r7, #12]
 800dc5e:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800dc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc62:	68ba      	ldr	r2, [r7, #8]
 800dc64:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800dc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc68:	88fa      	ldrh	r2, [r7, #6]
 800dc6a:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800dc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6e:	8a5b      	ldrh	r3, [r3, #18]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d101      	bne.n	800dc78 <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800dc74:	23f1      	movs	r3, #241	; 0xf1
 800dc76:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800dc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7a:	699b      	ldr	r3, [r3, #24]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d101      	bne.n	800dc84 <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800dc80:	23f1      	movs	r3, #241	; 0xf1
 800dc82:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800dc84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d16f      	bne.n	800dd6c <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800dc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8e:	8a5b      	ldrh	r3, [r3, #18]
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fd faa6 	bl	800b1e2 <VL53LX_calc_pll_period_us>
 800dc96:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800dc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9a:	699b      	ldr	r3, [r3, #24]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800dca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca2:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800dca4:	4619      	mov	r1, r3
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dcac:	6978      	ldr	r0, [r7, #20]
 800dcae:	f7fd faaf 	bl	800b210 <VL53LX_duration_maths>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb6:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800dcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcba:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800dcbc:	0119      	lsls	r1, r3, #4
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dcc4:	6978      	ldr	r0, [r7, #20]
 800dcc6:	f7fd faa3 	bl	800b210 <VL53LX_duration_maths>
 800dcca:	4602      	mov	r2, r0
 800dccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcce:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800dcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800dcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd6:	69db      	ldr	r3, [r3, #28]
 800dcd8:	4619      	mov	r1, r3
 800dcda:	4610      	mov	r0, r2
 800dcdc:	f7fd fd01 	bl	800b6e2 <VL53LX_rate_maths>
 800dce0:	4603      	mov	r3, r0
 800dce2:	461a      	mov	r2, r3
 800dce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce6:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800dce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800dcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcee:	6a1b      	ldr	r3, [r3, #32]
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	4610      	mov	r0, r2
 800dcf4:	f7fd fcf5 	bl	800b6e2 <VL53LX_rate_maths>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcfe:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800dd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800dd04:	461a      	mov	r2, r3
 800dd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd08:	6a1b      	ldr	r3, [r3, #32]
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	4610      	mov	r0, r2
 800dd0e:	f7fd fce8 	bl	800b6e2 <VL53LX_rate_maths>
 800dd12:	4603      	mov	r3, r0
 800dd14:	461a      	mov	r2, r3
 800dd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd18:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800dd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800dd1e:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800dd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd22:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 800dd24:	4413      	add	r3, r2
 800dd26:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800dd28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	d905      	bls.n	800dd3c <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800dd30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dd34:	69ba      	ldr	r2, [r7, #24]
 800dd36:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd3a:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800dd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3e:	8ada      	ldrh	r2, [r3, #22]
 800dd40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd44:	69b9      	ldr	r1, [r7, #24]
 800dd46:	2006      	movs	r0, #6
 800dd48:	f7fd fd10 	bl	800b76c <VL53LX_rate_per_spad_maths>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800dd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd52:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800dd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd56:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800dd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5a:	8ad9      	ldrh	r1, [r3, #22]
 800dd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5e:	69db      	ldr	r3, [r3, #28]
 800dd60:	461a      	mov	r2, r3
 800dd62:	f7fd faaf 	bl	800b2c4 <VL53LX_events_per_spad_maths>
 800dd66:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800dd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6a:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800dd6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3720      	adds	r7, #32
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800dd78:	b590      	push	{r4, r7, lr}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af02      	add	r7, sp, #8
 800dd7e:	4603      	mov	r3, r0
 800dd80:	603a      	str	r2, [r7, #0]
 800dd82:	80fb      	strh	r3, [r7, #6]
 800dd84:	460b      	mov	r3, r1
 800dd86:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	8a58      	ldrh	r0, [r3, #18]
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	8a9c      	ldrh	r4, [r3, #20]
 800dd94:	88fb      	ldrh	r3, [r7, #6]
 800dd96:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800dd9a:	9201      	str	r2, [sp, #4]
 800dd9c:	9300      	str	r3, [sp, #0]
 800dd9e:	2300      	movs	r3, #0
 800dda0:	4622      	mov	r2, r4
 800dda2:	f7fd fd17 	bl	800b7d4 <VL53LX_range_maths>
 800dda6:	4603      	mov	r3, r0
 800dda8:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	8a58      	ldrh	r0, [r3, #18]
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	8a9c      	ldrh	r4, [r3, #20]
 800ddbe:	88fb      	ldrh	r3, [r7, #6]
 800ddc0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800ddc4:	9201      	str	r2, [sp, #4]
 800ddc6:	9300      	str	r3, [sp, #0]
 800ddc8:	2300      	movs	r3, #0
 800ddca:	4622      	mov	r2, r4
 800ddcc:	f7fd fd02 	bl	800b7d4 <VL53LX_range_maths>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	8a58      	ldrh	r0, [r3, #18]
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	8a9c      	ldrh	r4, [r3, #20]
 800dde8:	88fb      	ldrh	r3, [r7, #6]
 800ddea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800ddee:	9201      	str	r2, [sp, #4]
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	4622      	mov	r2, r4
 800ddf6:	f7fd fced 	bl	800b7d4 <VL53LX_range_maths>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 800de04:	bf00      	nop
 800de06:	370c      	adds	r7, #12
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd90      	pop	{r4, r7, pc}

0800de0c <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b086      	sub	sp, #24
 800de10:	af00      	add	r7, sp, #0
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	60b9      	str	r1, [r7, #8]
 800de16:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800de18:	2300      	movs	r3, #0
 800de1a:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800de1c:	2300      	movs	r3, #0
 800de1e:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800de20:	2300      	movs	r3, #0
 800de22:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800de24:	2300      	movs	r3, #0
 800de26:	757b      	strb	r3, [r7, #21]





	memcpy(
 800de28:	22ac      	movs	r2, #172	; 0xac
 800de2a:	68b9      	ldr	r1, [r7, #8]
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f006 f8d9 	bl	8013fe4 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800de32:	2300      	movs	r3, #0
 800de34:	75fb      	strb	r3, [r7, #23]
 800de36:	e008      	b.n	800de4a <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800de38:	7dfa      	ldrb	r2, [r7, #23]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	3206      	adds	r2, #6
 800de3e:	2100      	movs	r1, #0
 800de40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800de44:	7dfb      	ldrb	r3, [r7, #23]
 800de46:	3301      	adds	r3, #1
 800de48:	75fb      	strb	r3, [r7, #23]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	7a5b      	ldrb	r3, [r3, #9]
 800de4e:	7dfa      	ldrb	r2, [r7, #23]
 800de50:	429a      	cmp	r2, r3
 800de52:	d3f1      	bcc.n	800de38 <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800de54:	68f9      	ldr	r1, [r7, #12]
 800de56:	68b8      	ldr	r0, [r7, #8]
 800de58:	f000 f878 	bl	800df4c <VL53LX_f_030>
 800de5c:	4603      	mov	r3, r0
 800de5e:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	7a9a      	ldrb	r2, [r3, #10]
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	7a9b      	ldrb	r3, [r3, #10]
 800de68:	429a      	cmp	r2, r3
 800de6a:	d203      	bcs.n	800de74 <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	7a9b      	ldrb	r3, [r3, #10]
 800de70:	75bb      	strb	r3, [r7, #22]
 800de72:	e002      	b.n	800de7a <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	7a9b      	ldrb	r3, [r3, #10]
 800de78:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800de7a:	2300      	movs	r3, #0
 800de7c:	75fb      	strb	r3, [r7, #23]
 800de7e:	e05c      	b.n	800df3a <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800de80:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800de84:	2b00      	cmp	r3, #0
 800de86:	db0f      	blt.n	800dea8 <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800de88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de8c:	461a      	mov	r2, r3
 800de8e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800de92:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800de94:	68ba      	ldr	r2, [r7, #8]
 800de96:	7a92      	ldrb	r2, [r2, #10]
 800de98:	b252      	sxtb	r2, r2
 800de9a:	fb93 f1f2 	sdiv	r1, r3, r2
 800de9e:	fb02 f201 	mul.w	r2, r2, r1
 800dea2:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800dea4:	757b      	strb	r3, [r7, #21]
 800dea6:	e013      	b.n	800ded0 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	7a9b      	ldrb	r3, [r3, #10]
 800deac:	b25b      	sxtb	r3, r3
 800deae:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800deb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800deb4:	4619      	mov	r1, r3
 800deb6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800deba:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800debc:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800debe:	68ba      	ldr	r2, [r7, #8]
 800dec0:	7a92      	ldrb	r2, [r2, #10]
 800dec2:	b252      	sxtb	r2, r2
 800dec4:	fb93 f1f2 	sdiv	r1, r3, r2
 800dec8:	fb02 f201 	mul.w	r2, r2, r1
 800decc:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800dece:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800ded0:	7d7b      	ldrb	r3, [r7, #21]
 800ded2:	461a      	mov	r2, r3
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	3206      	adds	r2, #6
 800ded8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800dedc:	7df9      	ldrb	r1, [r7, #23]
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	3106      	adds	r1, #6
 800dee2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800dee6:	429a      	cmp	r2, r3
 800dee8:	dd12      	ble.n	800df10 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800deea:	7d7b      	ldrb	r3, [r7, #21]
 800deec:	461a      	mov	r2, r3
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	3206      	adds	r2, #6
 800def2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800def6:	7df9      	ldrb	r1, [r7, #23]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	3106      	adds	r1, #6
 800defc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800df00:	7d79      	ldrb	r1, [r7, #21]
 800df02:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800df04:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	1d82      	adds	r2, r0, #6
 800df0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800df0e:	e006      	b.n	800df1e <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800df10:	7d7b      	ldrb	r3, [r7, #21]
 800df12:	461a      	mov	r2, r3
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	3206      	adds	r2, #6
 800df18:	2100      	movs	r1, #0
 800df1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800df1e:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800df20:	7d7b      	ldrb	r3, [r7, #21]
 800df22:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	3206      	adds	r2, #6
 800df28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	1d82      	adds	r2, r0, #6
 800df30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800df34:	7dfb      	ldrb	r3, [r7, #23]
 800df36:	3301      	adds	r3, #1
 800df38:	75fb      	strb	r3, [r7, #23]
 800df3a:	7dfa      	ldrb	r2, [r7, #23]
 800df3c:	7dbb      	ldrb	r3, [r7, #22]
 800df3e:	429a      	cmp	r2, r3
 800df40:	d39e      	bcc.n	800de80 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800df42:	bf00      	nop
 800df44:	bf00      	nop
 800df46:	3718      	adds	r7, #24
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b086      	sub	sp, #24
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800df5e:	2300      	movs	r3, #0
 800df60:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800df62:	2300      	movs	r3, #0
 800df64:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7fd fd0b 	bl	800b988 <VL53LX_decode_vcsel_period>
 800df72:	4603      	mov	r3, r0
	period = 2048 *
 800df74:	02db      	lsls	r3, r3, #11
 800df76:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00a      	beq.n	800df94 <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 800df84:	68ba      	ldr	r2, [r7, #8]
 800df86:	fbb3 f2f2 	udiv	r2, r3, r2
 800df8a:	68b9      	ldr	r1, [r7, #8]
 800df8c:	fb01 f202 	mul.w	r2, r1, r2
 800df90:	1a9b      	subs	r3, r3, r2
 800df92:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800df9a:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800df9c:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800df9e:	1ad3      	subs	r3, r2, r3
 800dfa0:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	dd09      	ble.n	800dfbc <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	da01      	bge.n	800dfb6 <VL53LX_f_030+0x6a>
 800dfb2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800dfb6:	12db      	asrs	r3, r3, #11
 800dfb8:	75fb      	strb	r3, [r7, #23]
 800dfba:	e008      	b.n	800dfce <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	da01      	bge.n	800dfca <VL53LX_f_030+0x7e>
 800dfc6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800dfca:	12db      	asrs	r3, r3, #11
 800dfcc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800dfce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3718      	adds	r7, #24
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}

0800dfda <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800dfda:	b580      	push	{r7, lr}
 800dfdc:	b08e      	sub	sp, #56	; 0x38
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
 800dfe2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800dfea:	2300      	movs	r3, #0
 800dfec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 800dff0:	2300      	movs	r3, #0
 800dff2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 800dff6:	2300      	movs	r3, #0
 800dff8:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800dffa:	2300      	movs	r3, #0
 800dffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 800e000:	2300      	movs	r3, #0
 800e002:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 800e006:	2300      	movs	r3, #0
 800e008:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800e00c:	22ac      	movs	r2, #172	; 0xac
 800e00e:	6879      	ldr	r1, [r7, #4]
 800e010:	6838      	ldr	r0, [r7, #0]
 800e012:	f005 ffe7 	bl	8013fe4 <memcpy>


	podata->VL53LX_p_021 = 0;
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	2200      	movs	r2, #0
 800e01a:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e01c:	2300      	movs	r3, #0
 800e01e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e022:	e00a      	b.n	800e03a <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800e024:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e028:	683a      	ldr	r2, [r7, #0]
 800e02a:	4413      	add	r3, r2
 800e02c:	2210      	movs	r2, #16
 800e02e:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e030:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e034:	3301      	adds	r3, #1
 800e036:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e03a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e03e:	2b05      	cmp	r3, #5
 800e040:	d9f0      	bls.n	800e024 <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e042:	2300      	movs	r3, #0
 800e044:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e048:	e00b      	b.n	800e062 <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800e04a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	3206      	adds	r2, #6
 800e052:	2100      	movs	r1, #0
 800e054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e058:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e05c:	3301      	adds	r3, #1
 800e05e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	7a5b      	ldrb	r3, [r3, #9]
 800e066:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d3ed      	bcc.n	800e04a <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e06e:	2300      	movs	r3, #0
 800e070:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e074:	e014      	b.n	800e0a0 <VL53LX_f_031+0xc6>
		bin_initial_index[lc] = 0x00;
 800e076:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e07a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e07e:	4413      	add	r3, r2
 800e080:	2200      	movs	r2, #0
 800e082:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800e086:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e08a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e08e:	4413      	add	r3, r2
 800e090:	2200      	movs	r2, #0
 800e092:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e096:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e09a:	3301      	adds	r3, #1
 800e09c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e0a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e0a4:	2b0f      	cmp	r3, #15
 800e0a6:	d9e6      	bls.n	800e076 <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e0b4:	e06c      	b.n	800e190 <VL53LX_f_031+0x1b6>

		bin_cfg = pidata->bin_seq[lc];
 800e0b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	4413      	add	r3, r2
 800e0be:	7b1b      	ldrb	r3, [r3, #12]
 800e0c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800e0c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e0c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e0cc:	4413      	add	r3, r2
 800e0ce:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d116      	bne.n	800e104 <VL53LX_f_031+0x12a>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800e0d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e0da:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e0de:	0092      	lsls	r2, r2, #2
 800e0e0:	b2d2      	uxtb	r2, r2
 800e0e2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e0e6:	440b      	add	r3, r1
 800e0e8:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800e0ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0f0:	683a      	ldr	r2, [r7, #0]
 800e0f2:	4413      	add	r3, r2
 800e0f4:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e0f8:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800e0fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0fe:	3301      	adds	r3, #1
 800e100:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800e104:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e108:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e10c:	441a      	add	r2, r3
 800e10e:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800e112:	3201      	adds	r2, #1
 800e114:	b2d2      	uxtb	r2, r2
 800e116:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e11a:	440b      	add	r3, r1
 800e11c:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800e120:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e124:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e128:	4413      	add	r3, r2
 800e12a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e12e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 800e132:	2300      	movs	r3, #0
 800e134:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e138:	e021      	b.n	800e17e <VL53LX_f_031+0x1a4>
			podata->bin_data[VL53LX_p_032+i] +=
 800e13a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e13e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e142:	441a      	add	r2, r3
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	3206      	adds	r2, #6
 800e148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800e14c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e150:	009a      	lsls	r2, r3, #2
 800e152:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e156:	441a      	add	r2, r3
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	3206      	adds	r2, #6
 800e15c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800e160:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 800e164:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e168:	4402      	add	r2, r0
 800e16a:	4419      	add	r1, r3
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	3206      	adds	r2, #6
 800e170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800e174:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e178:	3301      	adds	r3, #1
 800e17a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e17e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e182:	2b03      	cmp	r3, #3
 800e184:	d9d9      	bls.n	800e13a <VL53LX_f_031+0x160>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e186:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e18a:	3301      	adds	r3, #1
 800e18c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e190:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e194:	2b05      	cmp	r3, #5
 800e196:	d98e      	bls.n	800e0b6 <VL53LX_f_031+0xdc>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e198:	2300      	movs	r3, #0
 800e19a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e19e:	e023      	b.n	800e1e8 <VL53LX_f_031+0x20e>

		bin_cfg = podata->bin_seq[lc];
 800e1a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e1a4:	683a      	ldr	r2, [r7, #0]
 800e1a6:	4413      	add	r3, r2
 800e1a8:	7b1b      	ldrb	r3, [r3, #12]
 800e1aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800e1ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e1b2:	2b0f      	cmp	r3, #15
 800e1b4:	d80d      	bhi.n	800e1d2 <VL53LX_f_031+0x1f8>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800e1b6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 800e1ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 800e1be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e1c2:	440a      	add	r2, r1
 800e1c4:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800e1c8:	683a      	ldr	r2, [r7, #0]
 800e1ca:	4413      	add	r3, r2
 800e1cc:	460a      	mov	r2, r1
 800e1ce:	749a      	strb	r2, [r3, #18]
 800e1d0:	e005      	b.n	800e1de <VL53LX_f_031+0x204>
		else
			podata->bin_rep[lc] = 0;
 800e1d2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	4413      	add	r3, r2
 800e1da:	2200      	movs	r2, #0
 800e1dc:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e1de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e1e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e1ec:	2b05      	cmp	r3, #5
 800e1ee:	d9d7      	bls.n	800e1a0 <VL53LX_f_031+0x1c6>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800e1f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1f4:	009b      	lsls	r3, r3, #2
 800e1f6:	b2da      	uxtb	r2, r3
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e202:	e052      	b.n	800e2aa <VL53LX_f_031+0x2d0>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800e204:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e208:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e20c:	4413      	add	r3, r2
 800e20e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e212:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 800e214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e216:	2b00      	cmp	r3, #0
 800e218:	dd42      	ble.n	800e2a0 <VL53LX_f_031+0x2c6>

			VL53LX_p_032 = bin_initial_index[lc];
 800e21a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e21e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e222:	4413      	add	r3, r2
 800e224:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e228:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800e22c:	2300      	movs	r3, #0
 800e22e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e232:	e031      	b.n	800e298 <VL53LX_f_031+0x2be>
				podata->bin_data[VL53LX_p_032+i] +=
 800e234:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e238:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e23c:	441a      	add	r2, r3
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	3206      	adds	r2, #6
 800e242:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800e246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e248:	0fda      	lsrs	r2, r3, #31
 800e24a:	4413      	add	r3, r2
 800e24c:	105b      	asrs	r3, r3, #1
 800e24e:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800e250:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e254:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e258:	441a      	add	r2, r3
 800e25a:	4401      	add	r1, r0
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	3206      	adds	r2, #6
 800e260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800e264:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e268:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e26c:	441a      	add	r2, r3
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	3206      	adds	r2, #6
 800e272:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e276:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e27a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e27e:	441a      	add	r2, r3
 800e280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e282:	fb91 f1f3 	sdiv	r1, r1, r3
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	3206      	adds	r2, #6
 800e28a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800e28e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e292:	3301      	adds	r3, #1
 800e294:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e298:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e29c:	2b03      	cmp	r3, #3
 800e29e:	d9c9      	bls.n	800e234 <VL53LX_f_031+0x25a>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e2a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e2aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e2ae:	2b0f      	cmp	r3, #15
 800e2b0:	d9a8      	bls.n	800e204 <VL53LX_f_031+0x22a>
		}
	}



	podata->number_of_ambient_bins = 0;
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800e2b8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d102      	bne.n	800e2c4 <VL53LX_f_031+0x2ea>
		(bin_repeat_count[15] > 0))
 800e2be:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d002      	beq.n	800e2ca <VL53LX_f_031+0x2f0>
		podata->number_of_ambient_bins = 4;
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	2204      	movs	r2, #4
 800e2c8:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800e2ca:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3738      	adds	r7, #56	; 0x38
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}

0800e2d6 <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800e2d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2d8:	b0cb      	sub	sp, #300	; 0x12c
 800e2da:	af06      	add	r7, sp, #24
 800e2dc:	f107 040c 	add.w	r4, r7, #12
 800e2e0:	6020      	str	r0, [r4, #0]
 800e2e2:	f107 0008 	add.w	r0, r7, #8
 800e2e6:	6001      	str	r1, [r0, #0]
 800e2e8:	1d39      	adds	r1, r7, #4
 800e2ea:	600a      	str	r2, [r1, #0]
 800e2ec:	463a      	mov	r2, r7
 800e2ee:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800e2f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e2fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800e2fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e302:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800e306:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800e30a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800e30e:	f107 0318 	add.w	r3, r7, #24
 800e312:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800e316:	2300      	movs	r3, #0
 800e318:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800e31a:	2300      	movs	r3, #0
 800e31c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 800e320:	2300      	movs	r3, #0
 800e322:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 800e326:	2300      	movs	r3, #0
 800e328:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 800e32c:	2300      	movs	r3, #0
 800e32e:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800e332:	2300      	movs	r3, #0
 800e334:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 800e338:	2300      	movs	r3, #0
 800e33a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800e33e:	463b      	mov	r3, r7
 800e340:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800e344:	6818      	ldr	r0, [r3, #0]
 800e346:	f7ff fe48 	bl	800dfda <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800e34a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e34e:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800e350:	b299      	uxth	r1, r3
 800e352:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e356:	3348      	adds	r3, #72	; 0x48
 800e358:	461a      	mov	r2, r3
 800e35a:	2000      	movs	r0, #0
 800e35c:	f7fd fb65 	bl	800ba2a <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800e360:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e368:	3348      	adds	r3, #72	; 0x48
 800e36a:	4619      	mov	r1, r3
 800e36c:	4610      	mov	r0, r2
 800e36e:	f7fd fb1e 	bl	800b9ae <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800e372:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800e376:	2b00      	cmp	r3, #0
 800e378:	d12d      	bne.n	800e3d6 <VL53LX_hist_process_data+0x100>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800e37a:	1d3b      	adds	r3, r7, #4
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800e382:	2b00      	cmp	r3, #0
 800e384:	d027      	beq.n	800e3d6 <VL53LX_hist_process_data+0x100>
		status =
		VL53LX_f_032(
 800e386:	1d3b      	adds	r3, r7, #4
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e38c:	1d3b      	adds	r3, r7, #4
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 800e394:	1d3b      	adds	r3, r7, #4
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 800e39c:	463b      	mov	r3, r7
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800e3a4:	463a      	mov	r2, r7
 800e3a6:	6812      	ldr	r2, [r2, #0]
 800e3a8:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 800e3ac:	4639      	mov	r1, r7
 800e3ae:	6809      	ldr	r1, [r1, #0]
 800e3b0:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 800e3b4:	f107 0014 	add.w	r0, r7, #20
 800e3b8:	9004      	str	r0, [sp, #16]
 800e3ba:	9103      	str	r1, [sp, #12]
 800e3bc:	9202      	str	r2, [sp, #8]
 800e3be:	9301      	str	r3, [sp, #4]
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	9300      	str	r3, [sp, #0]
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	4632      	mov	r2, r6
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	f002 f8bf 	bl	801054e <VL53LX_f_032>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800e3d6:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d112      	bne.n	800e404 <VL53LX_hist_process_data+0x12e>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800e3de:	1d3b      	adds	r3, r7, #4
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d00c      	beq.n	800e404 <VL53LX_hist_process_data+0x12e>
		status =
			VL53LX_f_033(
 800e3ea:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800e3ee:	697a      	ldr	r2, [r7, #20]
 800e3f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3f4:	3348      	adds	r3, #72	; 0x48
 800e3f6:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800e3fa:	f002 faab 	bl	8010954 <VL53LX_f_033>
 800e3fe:	4603      	mov	r3, r0
 800e400:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800e404:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e408:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 800e40c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e410:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800e414:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e418:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800e41c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e420:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800e424:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e428:	2200      	movs	r2, #0
 800e42a:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800e42e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e432:	2200      	movs	r2, #0
 800e434:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 800e438:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e43c:	2200      	movs	r2, #0
 800e43e:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800e442:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e446:	2200      	movs	r2, #0
 800e448:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 800e44c:	2300      	movs	r3, #0
 800e44e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800e452:	1d3b      	adds	r3, r7, #4
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d002      	beq.n	800e464 <VL53LX_hist_process_data+0x18e>
		xtalk_enable = 1;
 800e45e:	2301      	movs	r3, #1
 800e460:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800e464:	2300      	movs	r3, #0
 800e466:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800e46a:	e0ef      	b.n	800e64c <VL53LX_hist_process_data+0x376>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800e46c:	1d3b      	adds	r3, r7, #4
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800e474:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53LX_f_025(
 800e478:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e47c:	3348      	adds	r3, #72	; 0x48
 800e47e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800e482:	7814      	ldrb	r4, [r2, #0]
 800e484:	1d3a      	adds	r2, r7, #4
 800e486:	f107 0108 	add.w	r1, r7, #8
 800e48a:	f107 000c 	add.w	r0, r7, #12
 800e48e:	9405      	str	r4, [sp, #20]
 800e490:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800e494:	9404      	str	r4, [sp, #16]
 800e496:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 800e49a:	9403      	str	r4, [sp, #12]
 800e49c:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800e4a0:	9402      	str	r4, [sp, #8]
 800e4a2:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800e4a6:	9401      	str	r4, [sp, #4]
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e4ae:	6812      	ldr	r2, [r2, #0]
 800e4b0:	6809      	ldr	r1, [r1, #0]
 800e4b2:	6800      	ldr	r0, [r0, #0]
 800e4b4:	f7fe fec1 	bl	800d23a <VL53LX_f_025>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800e4be:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	f040 80bc 	bne.w	800e640 <VL53LX_hist_process_data+0x36a>
 800e4c8:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	f040 80b7 	bne.w	800e640 <VL53LX_hist_process_data+0x36a>
			continue;



		if (presults->active_results == 0) {
 800e4d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e4d6:	7c9b      	ldrb	r3, [r3, #18]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d110      	bne.n	800e4fe <VL53LX_hist_process_data+0x228>
			pdata = &(presults->VL53LX_p_003[0]);
 800e4dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e4e0:	3314      	adds	r3, #20
 800e4e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800e4e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e4ea:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800e4ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e4f0:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800e4f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e4f6:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800e4f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e4fc:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800e4fe:	1d3b      	adds	r3, r7, #4
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800e504:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800e508:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e50c:	781b      	ldrb	r3, [r3, #0]
 800e50e:	461a      	mov	r2, r3
 800e510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e514:	fb02 f303 	mul.w	r3, r2, r3
 800e518:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800e51c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e520:	011b      	lsls	r3, r3, #4
 800e522:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800e526:	2300      	movs	r3, #0
 800e528:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800e52c:	e07f      	b.n	800e62e <VL53LX_hist_process_data+0x358>

			pdata = &(presults->VL53LX_p_003[t]);
 800e52e:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800e532:	224c      	movs	r2, #76	; 0x4c
 800e534:	fb02 f303 	mul.w	r3, r2, r3
 800e538:	3310      	adds	r3, #16
 800e53a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800e53e:	4413      	add	r3, r2
 800e540:	3304      	adds	r3, #4
 800e542:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800e546:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e54a:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800e54e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e552:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800e556:	429a      	cmp	r2, r3
 800e558:	dd0e      	ble.n	800e578 <VL53LX_hist_process_data+0x2a2>
				delta_mm =
					pdata->max_range_mm -
 800e55a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e55e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800e562:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800e564:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e568:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800e56c:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800e56e:	1ad3      	subs	r3, r2, r3
 800e570:	b29b      	uxth	r3, r3
				delta_mm =
 800e572:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800e576:	e00d      	b.n	800e594 <VL53LX_hist_process_data+0x2be>
			else
				delta_mm =
					pdata->min_range_mm -
 800e578:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e57c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800e580:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800e582:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e586:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800e58a:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800e58c:	1ad3      	subs	r3, r2, r3
 800e58e:	b29b      	uxth	r3, r3
				delta_mm =
 800e590:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800e594:	1d3b      	adds	r3, r7, #4
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 800e59a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800e59e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e5aa:	fb02 f303 	mul.w	r3, r2, r3
 800e5ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 800e5b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e5b6:	015b      	lsls	r3, r3, #5
 800e5b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 800e5bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e5c0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800e5c4:	1d3b      	adds	r3, r7, #4
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	dd29      	ble.n	800e624 <VL53LX_hist_process_data+0x34e>
			pdata->median_range_mm  <
 800e5d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e5d4:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800e5d8:	1d3b      	adds	r3, r7, #4
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	da1f      	bge.n	800e624 <VL53LX_hist_process_data+0x34e>
			pdata->VL53LX_p_009 <
 800e5e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800e5ea:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d918      	bls.n	800e624 <VL53LX_hist_process_data+0x34e>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800e5f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e5f6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e5f8:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800e5fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d910      	bls.n	800e624 <VL53LX_hist_process_data+0x34e>
			delta_mm <
 800e602:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800e606:	1d3a      	adds	r2, r7, #4
 800e608:	6812      	ldr	r2, [r2, #0]
 800e60a:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800e60c:	4293      	cmp	r3, r2
 800e60e:	da09      	bge.n	800e624 <VL53LX_hist_process_data+0x34e>



				memcpy(
					&(presults->xmonitor),
 800e610:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e614:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 800e618:	224c      	movs	r2, #76	; 0x4c
 800e61a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800e61e:	4618      	mov	r0, r3
 800e620:	f005 fce0 	bl	8013fe4 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800e624:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800e628:	3301      	adds	r3, #1
 800e62a:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800e62e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e632:	7c9b      	ldrb	r3, [r3, #18]
 800e634:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 800e638:	429a      	cmp	r2, r3
 800e63a:	f4ff af78 	bcc.w	800e52e <VL53LX_hist_process_data+0x258>
 800e63e:	e000      	b.n	800e642 <VL53LX_hist_process_data+0x36c>
			continue;
 800e640:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800e642:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800e646:	3301      	adds	r3, #1
 800e648:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800e64c:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800e650:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800e654:	429a      	cmp	r2, r3
 800e656:	f67f af09 	bls.w	800e46c <VL53LX_hist_process_data+0x196>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800e65a:	1d3b      	adds	r3, r7, #4
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800e662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 800e666:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800e670:	46bd      	mov	sp, r7
 800e672:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e674 <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b086      	sub	sp, #24
 800e678:	af00      	add	r7, sp, #0
 800e67a:	60f8      	str	r0, [r7, #12]
 800e67c:	460b      	mov	r3, r1
 800e67e:	607a      	str	r2, [r7, #4]
 800e680:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e682:	2300      	movs	r3, #0
 800e684:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800e686:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d104      	bne.n	800e698 <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800e68e:	68f8      	ldr	r0, [r7, #12]
 800e690:	f7f9 fe88 	bl	80083a4 <VL53LX_disable_firmware>
 800e694:	4603      	mov	r3, r0
 800e696:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800e698:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d104      	bne.n	800e6aa <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800e6a0:	68f8      	ldr	r0, [r7, #12]
 800e6a2:	f7f9 feb0 	bl	8008406 <VL53LX_enable_powerforce>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800e6aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d105      	bne.n	800e6be <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800e6b2:	21fa      	movs	r1, #250	; 0xfa
 800e6b4:	68f8      	ldr	r0, [r7, #12]
 800e6b6:	f002 fb9d 	bl	8010df4 <VL53LX_WaitUs>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800e6be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d107      	bne.n	800e6d6 <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	f240 7181 	movw	r1, #1921	; 0x781
 800e6cc:	68f8      	ldr	r0, [r7, #12]
 800e6ce:	f002 fa9d 	bl	8010c0c <VL53LX_WrByte>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800e6d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d107      	bne.n	800e6ee <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800e6de:	2205      	movs	r2, #5
 800e6e0:	f240 6183 	movw	r1, #1667	; 0x683
 800e6e4:	68f8      	ldr	r0, [r7, #12]
 800e6e6:	f002 fa91 	bl	8010c0c <VL53LX_WrByte>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800e6ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d105      	bne.n	800e702 <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800e6f6:	6879      	ldr	r1, [r7, #4]
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	f002 fb7b 	bl	8010df4 <VL53LX_WaitUs>
 800e6fe:	4603      	mov	r3, r0
 800e700:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800e702:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d107      	bne.n	800e71a <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800e70a:	2201      	movs	r2, #1
 800e70c:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800e710:	68f8      	ldr	r0, [r7, #12]
 800e712:	f002 fa7b 	bl	8010c0c <VL53LX_WrByte>
 800e716:	4603      	mov	r3, r0
 800e718:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800e71a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d108      	bne.n	800e734 <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800e722:	897b      	ldrh	r3, [r7, #10]
 800e724:	461a      	mov	r2, r3
 800e726:	f240 7184 	movw	r1, #1924	; 0x784
 800e72a:	68f8      	ldr	r0, [r7, #12]
 800e72c:	f002 fa98 	bl	8010c60 <VL53LX_WrWord>
 800e730:	4603      	mov	r3, r0
 800e732:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800e734:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800e738:	4618      	mov	r0, r3
 800e73a:	3718      	adds	r7, #24
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b086      	sub	sp, #24
 800e744:	af00      	add	r7, sp, #0
 800e746:	60f8      	str	r0, [r7, #12]
 800e748:	607b      	str	r3, [r7, #4]
 800e74a:	460b      	mov	r3, r1
 800e74c:	72fb      	strb	r3, [r7, #11]
 800e74e:	4613      	mov	r3, r2
 800e750:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800e752:	2300      	movs	r3, #0
 800e754:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800e756:	2300      	movs	r3, #0
 800e758:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800e75a:	7afb      	ldrb	r3, [r7, #11]
 800e75c:	75bb      	strb	r3, [r7, #22]
 800e75e:	e041      	b.n	800e7e4 <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800e760:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d108      	bne.n	800e77a <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800e768:	7dbb      	ldrb	r3, [r7, #22]
 800e76a:	461a      	mov	r2, r3
 800e76c:	f240 7194 	movw	r1, #1940	; 0x794
 800e770:	68f8      	ldr	r0, [r7, #12]
 800e772:	f002 fa4b 	bl	8010c0c <VL53LX_WrByte>
 800e776:	4603      	mov	r3, r0
 800e778:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800e77a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d107      	bne.n	800e792 <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800e782:	2200      	movs	r2, #0
 800e784:	f240 7183 	movw	r1, #1923	; 0x783
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	f002 fa3f 	bl	8010c0c <VL53LX_WrByte>
 800e78e:	4603      	mov	r3, r0
 800e790:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800e792:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d105      	bne.n	800e7a6 <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800e79a:	2105      	movs	r1, #5
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	f002 fb29 	bl	8010df4 <VL53LX_WaitUs>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800e7a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d107      	bne.n	800e7be <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	f240 7183 	movw	r1, #1923	; 0x783
 800e7b4:	68f8      	ldr	r0, [r7, #12]
 800e7b6:	f002 fa29 	bl	8010c0c <VL53LX_WrByte>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800e7be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d108      	bne.n	800e7d8 <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800e7c6:	2304      	movs	r3, #4
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 800e7ce:	68f8      	ldr	r0, [r7, #12]
 800e7d0:	f002 f9e6 	bl	8010ba0 <VL53LX_ReadMulti>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	3304      	adds	r3, #4
 800e7dc:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800e7de:	7dbb      	ldrb	r3, [r7, #22]
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	75bb      	strb	r3, [r7, #22]
 800e7e4:	7dba      	ldrb	r2, [r7, #22]
 800e7e6:	7af9      	ldrb	r1, [r7, #11]
 800e7e8:	7abb      	ldrb	r3, [r7, #10]
 800e7ea:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	dbb7      	blt.n	800e760 <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800e7f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3718      	adds	r7, #24
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e804:	2300      	movs	r3, #0
 800e806:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800e808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d107      	bne.n	800e820 <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800e810:	2201      	movs	r2, #1
 800e812:	f240 7183 	movw	r1, #1923	; 0x783
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f002 f9f8 	bl	8010c0c <VL53LX_WrByte>
 800e81c:	4603      	mov	r3, r0
 800e81e:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800e820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d107      	bne.n	800e838 <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800e828:	2200      	movs	r2, #0
 800e82a:	f240 7181 	movw	r1, #1921	; 0x781
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f002 f9ec 	bl	8010c0c <VL53LX_WrByte>
 800e834:	4603      	mov	r3, r0
 800e836:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800e838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d104      	bne.n	800e84a <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7f9 fdf2 	bl	800842a <VL53LX_disable_powerforce>
 800e846:	4603      	mov	r3, r0
 800e848:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800e84a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d104      	bne.n	800e85c <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f7f9 fd94 	bl	8008380 <VL53LX_enable_firmware>
 800e858:	4603      	mov	r3, r0
 800e85a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800e85c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800e860:	4618      	mov	r0, r3
 800e862:	3710      	adds	r7, #16
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800e868:	b480      	push	{r7}
 800e86a:	b087      	sub	sp, #28
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	4603      	mov	r3, r0
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	607a      	str	r2, [r7, #4]
 800e874:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800e876:	2300      	movs	r3, #0
 800e878:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800e87a:	2300      	movs	r3, #0
 800e87c:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800e87e:	89fb      	ldrh	r3, [r7, #14]
 800e880:	2b03      	cmp	r3, #3
 800e882:	d802      	bhi.n	800e88a <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800e884:	f06f 0308 	mvn.w	r3, #8
 800e888:	e018      	b.n	800e8bc <VL53LX_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 800e88a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e88e:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	3302      	adds	r3, #2
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	b29b      	uxth	r3, r3
 800e898:	8afa      	ldrh	r2, [r7, #22]
 800e89a:	1ad3      	subs	r3, r2, r3
 800e89c:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800e89e:	8afb      	ldrh	r3, [r7, #22]
 800e8a0:	2bff      	cmp	r3, #255	; 0xff
 800e8a2:	d901      	bls.n	800e8a8 <VL53LX_nvm_decode_optical_centre+0x40>
		tmp = 0;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800e8a8:	8afb      	ldrh	r3, [r7, #22]
 800e8aa:	b2da      	uxtb	r2, r3
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	78da      	ldrb	r2, [r3, #3]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	705a      	strb	r2, [r3, #1]

	return status;
 800e8b8:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	371c      	adds	r7, #28
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800e8c8:	b590      	push	{r4, r7, lr}
 800e8ca:	b087      	sub	sp, #28
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	60b9      	str	r1, [r7, #8]
 800e8d2:	607a      	str	r2, [r7, #4]
 800e8d4:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800e8e2:	89fb      	ldrh	r3, [r7, #14]
 800e8e4:	2b37      	cmp	r3, #55	; 0x37
 800e8e6:	d802      	bhi.n	800e8ee <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800e8e8:	f06f 0308 	mvn.w	r3, #8
 800e8ec:	e03e      	b.n	800e96c <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800e8ee:	68b9      	ldr	r1, [r7, #8]
 800e8f0:	2002      	movs	r0, #2
 800e8f2:	f7f9 fc2b 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	3302      	adds	r3, #2
 800e902:	4619      	mov	r1, r3
 800e904:	2002      	movs	r0, #2
 800e906:	f7f9 fc21 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800e90a:	4603      	mov	r3, r0
 800e90c:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800e916:	099b      	lsrs	r3, r3, #6
 800e918:	b29a      	uxth	r2, r3
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2219      	movs	r2, #25
 800e922:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2205      	movs	r2, #5
 800e928:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2205      	movs	r2, #5
 800e92e:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	3304      	adds	r3, #4
 800e934:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800e936:	2300      	movs	r3, #0
 800e938:	74fb      	strb	r3, [r7, #19]
 800e93a:	e012      	b.n	800e962 <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800e93c:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800e93e:	6979      	ldr	r1, [r7, #20]
 800e940:	2002      	movs	r0, #2
 800e942:	f7f9 fc03 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800e946:	4603      	mov	r3, r0
 800e948:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800e94a:	687a      	ldr	r2, [r7, #4]
 800e94c:	1d23      	adds	r3, r4, #4
 800e94e:	005b      	lsls	r3, r3, #1
 800e950:	4413      	add	r3, r2
 800e952:	460a      	mov	r2, r1
 800e954:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	3302      	adds	r3, #2
 800e95a:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800e95c:	7cfb      	ldrb	r3, [r7, #19]
 800e95e:	3301      	adds	r3, #1
 800e960:	74fb      	strb	r3, [r7, #19]
 800e962:	7cfb      	ldrb	r3, [r7, #19]
 800e964:	2b18      	cmp	r3, #24
 800e966:	d9e9      	bls.n	800e93c <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800e968:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	371c      	adds	r7, #28
 800e970:	46bd      	mov	sp, r7
 800e972:	bd90      	pop	{r4, r7, pc}

0800e974 <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b086      	sub	sp, #24
 800e978:	af00      	add	r7, sp, #0
 800e97a:	4603      	mov	r3, r0
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	607a      	str	r2, [r7, #4]
 800e980:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800e982:	2300      	movs	r3, #0
 800e984:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800e986:	89fb      	ldrh	r3, [r7, #14]
 800e988:	2b07      	cmp	r3, #7
 800e98a:	d802      	bhi.n	800e992 <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800e98c:	f06f 0308 	mvn.w	r3, #8
 800e990:	e027      	b.n	800e9e2 <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800e992:	68b9      	ldr	r1, [r7, #8]
 800e994:	2002      	movs	r0, #2
 800e996:	f7f9 fbd9 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800e99a:	4603      	mov	r3, r0
 800e99c:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	3302      	adds	r3, #2
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	2002      	movs	r0, #2
 800e9aa:	f7f9 fbcf 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	3304      	adds	r3, #4
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	2002      	movs	r0, #2
 800e9be:	f7f9 fbc5 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	3306      	adds	r3, #6
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	2002      	movs	r0, #2
 800e9d2:	f7f9 fbbb 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	80da      	strh	r2, [r3, #6]

	return status;
 800e9de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3718      	adds	r7, #24
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}

0800e9ea <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800e9ea:	b580      	push	{r7, lr}
 800e9ec:	b086      	sub	sp, #24
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	60b9      	str	r1, [r7, #8]
 800e9f4:	607a      	str	r2, [r7, #4]
 800e9f6:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800e9fc:	89fb      	ldrh	r3, [r7, #14]
 800e9fe:	2b0f      	cmp	r3, #15
 800ea00:	d802      	bhi.n	800ea08 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ea02:	f06f 0308 	mvn.w	r3, #8
 800ea06:	e04d      	b.n	800eaa4 <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800ea08:	68b9      	ldr	r1, [r7, #8]
 800ea0a:	2002      	movs	r0, #2
 800ea0c:	f7f9 fb9e 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800ea10:	4603      	mov	r3, r0
 800ea12:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	789a      	ldrb	r2, [r3, #2]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	78da      	ldrb	r2, [r3, #3]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	3304      	adds	r3, #4
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	2002      	movs	r0, #2
 800ea30:	f7f9 fb8c 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800ea34:	4603      	mov	r3, r0
 800ea36:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	3306      	adds	r3, #6
 800ea40:	4619      	mov	r1, r3
 800ea42:	2002      	movs	r0, #2
 800ea44:	f7f9 fb82 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	3308      	adds	r3, #8
 800ea54:	4619      	mov	r1, r3
 800ea56:	2002      	movs	r0, #2
 800ea58:	f7f9 fb78 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	330a      	adds	r3, #10
 800ea68:	4619      	mov	r1, r3
 800ea6a:	2002      	movs	r0, #2
 800ea6c:	f7f9 fb6e 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800ea70:	4603      	mov	r3, r0
 800ea72:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	330c      	adds	r3, #12
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	2002      	movs	r0, #2
 800ea80:	f7f9 fb64 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800ea84:	4603      	mov	r3, r0
 800ea86:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	330e      	adds	r3, #14
 800ea90:	4619      	mov	r1, r3
 800ea92:	2002      	movs	r0, #2
 800ea94:	f7f9 fb5a 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	81da      	strh	r2, [r3, #14]

	return status;
 800eaa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3718      	adds	r7, #24
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b086      	sub	sp, #24
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	607b      	str	r3, [r7, #4]
 800eab6:	460b      	mov	r3, r1
 800eab8:	72fb      	strb	r3, [r7, #11]
 800eaba:	4613      	mov	r3, r2
 800eabc:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800eabe:	2300      	movs	r3, #0
 800eac0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800eac2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d106      	bne.n	800ead8 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 800eaca:	2232      	movs	r2, #50	; 0x32
 800eacc:	2104      	movs	r1, #4
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f7ff fdd0 	bl	800e674 <VL53LX_nvm_enable>
 800ead4:	4603      	mov	r3, r0
 800ead6:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 800ead8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d107      	bne.n	800eaf0 <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 800eae0:	7aba      	ldrb	r2, [r7, #10]
 800eae2:	7af9      	ldrb	r1, [r7, #11]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	68f8      	ldr	r0, [r7, #12]
 800eae8:	f7ff fe2a 	bl	800e740 <VL53LX_nvm_read>
 800eaec:	4603      	mov	r3, r0
 800eaee:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 800eaf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d104      	bne.n	800eb02 <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	f7ff fe7f 	bl	800e7fc <VL53LX_nvm_disable>
 800eafe:	4603      	mov	r3, r0
 800eb00:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 800eb02:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3718      	adds	r7, #24
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}

0800eb0e <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 800eb0e:	b580      	push	{r7, lr}
 800eb10:	b084      	sub	sp, #16
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	6078      	str	r0, [r7, #4]
 800eb16:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800eb1c:	f107 0308 	add.w	r3, r7, #8
 800eb20:	2201      	movs	r2, #1
 800eb22:	212e      	movs	r1, #46	; 0x2e
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f7ff ffc1 	bl	800eaac <VL53LX_read_nvm_raw_data>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800eb2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d108      	bne.n	800eb48 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 800eb36:	f107 0308 	add.w	r3, r7, #8
 800eb3a:	683a      	ldr	r2, [r7, #0]
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	2004      	movs	r0, #4
 800eb40:	f7ff fe92 	bl	800e868 <VL53LX_nvm_decode_optical_centre>
 800eb44:	4603      	mov	r3, r0
 800eb46:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 800eb48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3710      	adds	r7, #16
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b092      	sub	sp, #72	; 0x48
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800eb64:	f107 030c 	add.w	r3, r7, #12
 800eb68:	220e      	movs	r2, #14
 800eb6a:	2157      	movs	r1, #87	; 0x57
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f7ff ff9d 	bl	800eaac <VL53LX_read_nvm_raw_data>
 800eb72:	4603      	mov	r3, r0
 800eb74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800eb78:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d109      	bne.n	800eb94 <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 800eb80:	f107 030c 	add.w	r3, r7, #12
 800eb84:	683a      	ldr	r2, [r7, #0]
 800eb86:	4619      	mov	r1, r3
 800eb88:	2038      	movs	r0, #56	; 0x38
 800eb8a:	f7ff fe9d 	bl	800e8c8 <VL53LX_nvm_decode_cal_peak_rate_map>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800eb94:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3748      	adds	r7, #72	; 0x48
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b086      	sub	sp, #24
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800ebae:	f107 030c 	add.w	r3, r7, #12
 800ebb2:	2202      	movs	r2, #2
 800ebb4:	2165      	movs	r1, #101	; 0x65
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f7ff ff78 	bl	800eaac <VL53LX_read_nvm_raw_data>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800ebc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d108      	bne.n	800ebda <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 800ebc8:	f107 030c 	add.w	r3, r7, #12
 800ebcc:	683a      	ldr	r2, [r7, #0]
 800ebce:	4619      	mov	r1, r3
 800ebd0:	2008      	movs	r0, #8
 800ebd2:	f7ff fecf 	bl	800e974 <VL53LX_nvm_decode_additional_offset_cal_data>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800ebda:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3718      	adds	r7, #24
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}

0800ebe6 <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 800ebe6:	b580      	push	{r7, lr}
 800ebe8:	b08a      	sub	sp, #40	; 0x28
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	60f8      	str	r0, [r7, #12]
 800ebee:	460b      	mov	r3, r1
 800ebf0:	607a      	str	r2, [r7, #4]
 800ebf2:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 800ebfa:	897b      	ldrh	r3, [r7, #10]
 800ebfc:	089b      	lsrs	r3, r3, #2
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	b2d9      	uxtb	r1, r3
 800ec02:	f107 0314 	add.w	r3, r7, #20
 800ec06:	2204      	movs	r2, #4
 800ec08:	68f8      	ldr	r0, [r7, #12]
 800ec0a:	f7ff ff4f 	bl	800eaac <VL53LX_read_nvm_raw_data>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800ec14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d109      	bne.n	800ec30 <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 800ec1c:	f107 0314 	add.w	r3, r7, #20
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	4619      	mov	r1, r3
 800ec24:	2010      	movs	r0, #16
 800ec26:	f7ff fee0 	bl	800e9ea <VL53LX_nvm_decode_fmt_range_results_data>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 800ec30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3728      	adds	r7, #40	; 0x28
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b086      	sub	sp, #24
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	460b      	mov	r3, r1
 800ec46:	607a      	str	r2, [r7, #4]
 800ec48:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800ec4e:	897b      	ldrh	r3, [r7, #10]
 800ec50:	2b0a      	cmp	r3, #10
 800ec52:	d802      	bhi.n	800ec5a <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ec54:	f06f 0309 	mvn.w	r3, #9
 800ec58:	e047      	b.n	800ecea <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec62:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800ec70:	f002 020f 	and.w	r2, r2, #15
 800ec74:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800ec76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800ec80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ec84:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ec86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800ec90:	f002 0203 	and.w	r2, r2, #3
 800ec94:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800ec96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800eca0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800eca4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800eca6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	88d8      	ldrh	r0, [r3, #6]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	3305      	adds	r3, #5
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	2102      	movs	r1, #2
 800ecb4:	f7f9 fa1f 	bl	80080f6 <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800ecbc:	68fa      	ldr	r2, [r7, #12]
 800ecbe:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800ecc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800ecc6:	68fa      	ldr	r2, [r7, #12]
 800ecc8:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800ecca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800ecd4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ecd8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800ecda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800ece0:	68fa      	ldr	r2, [r7, #12]
 800ece2:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800ece4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ece6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3718      	adds	r7, #24
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}

0800ecf2 <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800ecf2:	b580      	push	{r7, lr}
 800ecf4:	b086      	sub	sp, #24
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	60b9      	str	r1, [r7, #8]
 800ecfc:	607a      	str	r2, [r7, #4]
 800ecfe:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ed00:	2300      	movs	r3, #0
 800ed02:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800ed04:	89fb      	ldrh	r3, [r7, #14]
 800ed06:	2b0a      	cmp	r3, #10
 800ed08:	d802      	bhi.n	800ed10 <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ed0a:	f06f 0309 	mvn.w	r3, #9
 800ed0e:	e046      	b.n	800ed9e <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed18:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	3301      	adds	r3, #1
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	f003 030f 	and.w	r3, r3, #15
 800ed28:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	3302      	adds	r3, #2
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed38:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	3303      	adds	r3, #3
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	f003 0303 	and.w	r3, r3, #3
 800ed48:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	3304      	adds	r3, #4
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed58:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	3305      	adds	r3, #5
 800ed62:	4619      	mov	r1, r3
 800ed64:	2002      	movs	r0, #2
 800ed66:	f7f9 f9f1 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	79da      	ldrb	r2, [r3, #7]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	7a1a      	ldrb	r2, [r3, #8]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	3309      	adds	r3, #9
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed8c:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	7a9a      	ldrb	r2, [r3, #10]
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800ed9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3718      	adds	r7, #24
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800eda6:	b580      	push	{r7, lr}
 800eda8:	b086      	sub	sp, #24
 800edaa:	af00      	add	r7, sp, #0
 800edac:	6078      	str	r0, [r7, #4]
 800edae:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800edb0:	2300      	movs	r3, #0
 800edb2:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800edb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d108      	bne.n	800edce <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 800edbc:	f107 020c 	add.w	r2, r7, #12
 800edc0:	230b      	movs	r3, #11
 800edc2:	2101      	movs	r1, #1
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f001 feeb 	bl	8010ba0 <VL53LX_ReadMulti>
 800edca:	4603      	mov	r3, r0
 800edcc:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800edce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d108      	bne.n	800ede8 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 800edd6:	f107 030c 	add.w	r3, r7, #12
 800edda:	683a      	ldr	r2, [r7, #0]
 800eddc:	4619      	mov	r1, r3
 800edde:	200b      	movs	r0, #11
 800ede0:	f7ff ff87 	bl	800ecf2 <VL53LX_i2c_decode_static_nvm_managed>
 800ede4:	4603      	mov	r3, r0
 800ede6:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800ede8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800edec:	4618      	mov	r0, r3
 800edee:	3718      	adds	r7, #24
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b086      	sub	sp, #24
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	60f8      	str	r0, [r7, #12]
 800edfc:	460b      	mov	r3, r1
 800edfe:	607a      	str	r2, [r7, #4]
 800ee00:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ee02:	2300      	movs	r3, #0
 800ee04:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800ee06:	897b      	ldrh	r3, [r7, #10]
 800ee08:	2b16      	cmp	r3, #22
 800ee0a:	d802      	bhi.n	800ee12 <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ee0c:	f06f 0309 	mvn.w	r3, #9
 800ee10:	e076      	b.n	800ef00 <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800ee1e:	68fa      	ldr	r2, [r7, #12]
 800ee20:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ee22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800ee28:	68fa      	ldr	r2, [r7, #12]
 800ee2a:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800ee2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800ee32:	68fa      	ldr	r2, [r7, #12]
 800ee34:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800ee36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800ee40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800ee4a:	f002 020f 	and.w	r2, r2, #15
 800ee4e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ee50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800ee56:	68fa      	ldr	r2, [r7, #12]
 800ee58:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800ee5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800ee64:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ee68:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800ee6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800ee74:	f002 0203 	and.w	r2, r2, #3
 800ee78:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800ee7a:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	8958      	ldrh	r0, [r3, #10]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	3309      	adds	r3, #9
 800ee84:	461a      	mov	r2, r3
 800ee86:	2102      	movs	r1, #2
 800ee88:	f7f9 f935 	bl	80080f6 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	330b      	adds	r3, #11
 800ee96:	461a      	mov	r2, r3
 800ee98:	2102      	movs	r1, #2
 800ee9a:	f7f9 f977 	bl	800818c <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	330d      	adds	r3, #13
 800eea8:	461a      	mov	r2, r3
 800eeaa:	2102      	movs	r1, #2
 800eeac:	f7f9 f96e 	bl	800818c <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	8a18      	ldrh	r0, [r3, #16]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	330f      	adds	r3, #15
 800eeb8:	461a      	mov	r2, r3
 800eeba:	2102      	movs	r1, #2
 800eebc:	f7f9 f91b 	bl	80080f6 <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 800eec6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eeca:	b218      	sxth	r0, r3
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	3311      	adds	r3, #17
 800eed0:	461a      	mov	r2, r3
 800eed2:	2102      	movs	r1, #2
 800eed4:	f7f9 f95a 	bl	800818c <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	3313      	adds	r3, #19
 800eee2:	461a      	mov	r2, r3
 800eee4:	2102      	movs	r1, #2
 800eee6:	f7f9 f951 	bl	800818c <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	3315      	adds	r3, #21
 800eef4:	461a      	mov	r2, r3
 800eef6:	2102      	movs	r1, #2
 800eef8:	f7f9 f948 	bl	800818c <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800eefc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3718      	adds	r7, #24
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b086      	sub	sp, #24
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	4603      	mov	r3, r0
 800ef10:	60b9      	str	r1, [r7, #8]
 800ef12:	607a      	str	r2, [r7, #4]
 800ef14:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ef16:	2300      	movs	r3, #0
 800ef18:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800ef1a:	89fb      	ldrh	r3, [r7, #14]
 800ef1c:	2b16      	cmp	r3, #22
 800ef1e:	d802      	bhi.n	800ef26 <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ef20:	f06f 0309 	mvn.w	r3, #9
 800ef24:	e079      	b.n	800f01a <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	785a      	ldrb	r2, [r3, #1]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	789a      	ldrb	r2, [r3, #2]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	78da      	ldrb	r2, [r3, #3]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	791a      	ldrb	r2, [r3, #4]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	3305      	adds	r3, #5
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	f003 030f 	and.w	r3, r3, #15
 800ef58:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	799a      	ldrb	r2, [r3, #6]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	3307      	adds	r3, #7
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef70:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	3308      	adds	r3, #8
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	f003 0303 	and.w	r3, r3, #3
 800ef80:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	3309      	adds	r3, #9
 800ef8a:	4619      	mov	r1, r3
 800ef8c:	2002      	movs	r0, #2
 800ef8e:	f7f9 f8dd 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800ef92:	4603      	mov	r3, r0
 800ef94:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	330b      	adds	r3, #11
 800ef9e:	4619      	mov	r1, r3
 800efa0:	2002      	movs	r0, #2
 800efa2:	f7f9 f91f 	bl	80081e4 <VL53LX_i2c_decode_int16_t>
 800efa6:	4603      	mov	r3, r0
 800efa8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	330d      	adds	r3, #13
 800efb2:	4619      	mov	r1, r3
 800efb4:	2002      	movs	r0, #2
 800efb6:	f7f9 f915 	bl	80081e4 <VL53LX_i2c_decode_int16_t>
 800efba:	4603      	mov	r3, r0
 800efbc:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	330f      	adds	r3, #15
 800efc6:	4619      	mov	r1, r3
 800efc8:	2002      	movs	r0, #2
 800efca:	f7f9 f8bf 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800efce:	4603      	mov	r3, r0
 800efd0:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	3311      	adds	r3, #17
 800efda:	4619      	mov	r1, r3
 800efdc:	2002      	movs	r0, #2
 800efde:	f7f9 f901 	bl	80081e4 <VL53LX_i2c_decode_int16_t>
 800efe2:	4603      	mov	r3, r0
 800efe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800efe8:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	3313      	adds	r3, #19
 800eff2:	4619      	mov	r1, r3
 800eff4:	2002      	movs	r0, #2
 800eff6:	f7f9 f8f5 	bl	80081e4 <VL53LX_i2c_decode_int16_t>
 800effa:	4603      	mov	r3, r0
 800effc:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	3315      	adds	r3, #21
 800f006:	4619      	mov	r1, r3
 800f008:	2002      	movs	r0, #2
 800f00a:	f7f9 f8eb 	bl	80081e4 <VL53LX_i2c_decode_int16_t>
 800f00e:	4603      	mov	r3, r0
 800f010:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800f016:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3718      	adds	r7, #24
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}

0800f022 <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f022:	b580      	push	{r7, lr}
 800f024:	b08a      	sub	sp, #40	; 0x28
 800f026:	af00      	add	r7, sp, #0
 800f028:	6078      	str	r0, [r7, #4]
 800f02a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f02c:	2300      	movs	r3, #0
 800f02e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f032:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f036:	2b00      	cmp	r3, #0
 800f038:	d109      	bne.n	800f04e <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 800f03a:	f107 020c 	add.w	r2, r7, #12
 800f03e:	2317      	movs	r3, #23
 800f040:	210d      	movs	r1, #13
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f001 fdac 	bl	8010ba0 <VL53LX_ReadMulti>
 800f048:	4603      	mov	r3, r0
 800f04a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f04e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f052:	2b00      	cmp	r3, #0
 800f054:	d109      	bne.n	800f06a <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 800f056:	f107 030c 	add.w	r3, r7, #12
 800f05a:	683a      	ldr	r2, [r7, #0]
 800f05c:	4619      	mov	r1, r3
 800f05e:	2017      	movs	r0, #23
 800f060:	f7ff ff52 	bl	800ef08 <VL53LX_i2c_decode_customer_nvm_managed>
 800f064:	4603      	mov	r3, r0
 800f066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 800f06a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d11c      	bne.n	800f0ac <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	8a5b      	ldrh	r3, [r3, #18]
 800f076:	84bb      	strh	r3, [r7, #36]	; 0x24
		offset = offset / 4;
 800f078:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	da00      	bge.n	800f082 <VL53LX_get_customer_nvm_managed+0x60>
 800f080:	3303      	adds	r3, #3
 800f082:	109b      	asrs	r3, r3, #2
 800f084:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (offset >= 1024)
 800f086:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f08a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f08e:	db04      	blt.n	800f09a <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 800f090:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f092:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800f096:	b29b      	uxth	r3, r3
 800f098:	84bb      	strh	r3, [r7, #36]	; 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	2200      	movs	r2, #0
 800f09e:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f0a4:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f0aa:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f0ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3728      	adds	r7, #40	; 0x28
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b086      	sub	sp, #24
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	60f8      	str	r0, [r7, #12]
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	607a      	str	r2, [r7, #4]
 800f0c4:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 800f0ca:	897b      	ldrh	r3, [r7, #10]
 800f0cc:	2b1f      	cmp	r3, #31
 800f0ce:	d802      	bhi.n	800f0d6 <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f0d0:	f06f 0309 	mvn.w	r3, #9
 800f0d4:	e0cf      	b.n	800f276 <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	881b      	ldrh	r3, [r3, #0]
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	2102      	movs	r1, #2
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7f9 f809 	bl	80080f6 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800f0ec:	f002 0201 	and.w	r2, r2, #1
 800f0f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f0f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800f0fc:	f002 020f 	and.w	r2, r2, #15
 800f100:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f102:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800f10c:	f002 020f 	and.w	r2, r2, #15
 800f110:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f112:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800f11c:	f002 021f 	and.w	r2, r2, #31
 800f120:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f122:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f12c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f130:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f132:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800f13c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f140:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f142:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800f14c:	f002 0201 	and.w	r2, r2, #1
 800f150:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f152:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800f158:	68fa      	ldr	r2, [r7, #12]
 800f15a:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800f15c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f166:	f002 0201 	and.w	r2, r2, #1
 800f16a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f16c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f176:	f002 0203 	and.w	r2, r2, #3
 800f17a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f17c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f186:	f002 021f 	and.w	r2, r2, #31
 800f18a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f18c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800f196:	f002 0203 	and.w	r2, r2, #3
 800f19a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f19c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800f1a6:	f002 0203 	and.w	r2, r2, #3
 800f1aa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800f1ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f1b6:	f002 0207 	and.w	r2, r2, #7
 800f1ba:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800f1bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f1c6:	f002 021f 	and.w	r2, r2, #31
 800f1ca:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800f1cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f1d6:	f002 0201 	and.w	r2, r2, #1
 800f1da:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f1dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800f1e2:	68fa      	ldr	r2, [r7, #12]
 800f1e4:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f1e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800f1ec:	68fa      	ldr	r2, [r7, #12]
 800f1ee:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f1f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800f1f6:	68fa      	ldr	r2, [r7, #12]
 800f1f8:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f1fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800f200:	68fa      	ldr	r2, [r7, #12]
 800f202:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f204:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800f20a:	68fa      	ldr	r2, [r7, #12]
 800f20c:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800f20e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800f214:	68fa      	ldr	r2, [r7, #12]
 800f216:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800f218:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	8b18      	ldrh	r0, [r3, #24]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	3318      	adds	r3, #24
 800f222:	461a      	mov	r2, r3
 800f224:	2102      	movs	r1, #2
 800f226:	f7f8 ff66 	bl	80080f6 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800f22e:	68fa      	ldr	r2, [r7, #12]
 800f230:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800f232:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800f238:	68fa      	ldr	r2, [r7, #12]
 800f23a:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800f23c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800f246:	f002 020f 	and.w	r2, r2, #15
 800f24a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800f24c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800f252:	68fa      	ldr	r2, [r7, #12]
 800f254:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800f256:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800f260:	f002 020f 	and.w	r2, r2, #15
 800f264:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800f266:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800f26c:	68fa      	ldr	r2, [r7, #12]
 800f26e:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800f270:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f272:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f276:	4618      	mov	r0, r3
 800f278:	3718      	adds	r7, #24
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}

0800f27e <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f27e:	b580      	push	{r7, lr}
 800f280:	b086      	sub	sp, #24
 800f282:	af00      	add	r7, sp, #0
 800f284:	60f8      	str	r0, [r7, #12]
 800f286:	460b      	mov	r3, r1
 800f288:	607a      	str	r2, [r7, #4]
 800f28a:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f28c:	2300      	movs	r3, #0
 800f28e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 800f290:	897b      	ldrh	r3, [r7, #10]
 800f292:	2b15      	cmp	r3, #21
 800f294:	d802      	bhi.n	800f29c <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f296:	f06f 0309 	mvn.w	r3, #9
 800f29a:	e070      	b.n	800f37e <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800f2a8:	68fa      	ldr	r2, [r7, #12]
 800f2aa:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f2ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800f2b2:	68fa      	ldr	r2, [r7, #12]
 800f2b4:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f2b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800f2c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f2c4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f2c6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 800f2cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f2d0:	b298      	uxth	r0, r3
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	3304      	adds	r3, #4
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	2102      	movs	r1, #2
 800f2da:	f7f8 ff0c 	bl	80080f6 <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800f2e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f2ea:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f2ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800f2f2:	68fa      	ldr	r2, [r7, #12]
 800f2f4:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800f2f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800f2fc:	68fa      	ldr	r2, [r7, #12]
 800f2fe:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f300:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800f30a:	f002 0201 	and.w	r2, r2, #1
 800f30e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f310:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800f31a:	f002 0207 	and.w	r2, r2, #7
 800f31e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f320:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	8998      	ldrh	r0, [r3, #12]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	330c      	adds	r3, #12
 800f32a:	461a      	mov	r2, r3
 800f32c:	2102      	movs	r1, #2
 800f32e:	f7f8 fee2 	bl	80080f6 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	89d8      	ldrh	r0, [r3, #14]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	330e      	adds	r3, #14
 800f33a:	461a      	mov	r2, r3
 800f33c:	2102      	movs	r1, #2
 800f33e:	f7f8 feda 	bl	80080f6 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	8a18      	ldrh	r0, [r3, #16]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	3310      	adds	r3, #16
 800f34a:	461a      	mov	r2, r3
 800f34c:	2102      	movs	r1, #2
 800f34e:	f7f8 fed2 	bl	80080f6 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800f356:	68fa      	ldr	r2, [r7, #12]
 800f358:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f35a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800f360:	68fa      	ldr	r2, [r7, #12]
 800f362:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f364:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800f36a:	68fa      	ldr	r2, [r7, #12]
 800f36c:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f36e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800f374:	68fa      	ldr	r2, [r7, #12]
 800f376:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f378:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f37a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3718      	adds	r7, #24
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}

0800f386 <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f386:	b580      	push	{r7, lr}
 800f388:	b086      	sub	sp, #24
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	60f8      	str	r0, [r7, #12]
 800f38e:	460b      	mov	r3, r1
 800f390:	607a      	str	r2, [r7, #4]
 800f392:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f394:	2300      	movs	r3, #0
 800f396:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 800f398:	897b      	ldrh	r3, [r7, #10]
 800f39a:	2b16      	cmp	r3, #22
 800f39c:	d802      	bhi.n	800f3a4 <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f39e:	f06f 0309 	mvn.w	r3, #9
 800f3a2:	e06e      	b.n	800f482 <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	f003 030f 	and.w	r3, r3, #15
 800f3ac:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800f3b6:	68fa      	ldr	r2, [r7, #12]
 800f3b8:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f3ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800f3c4:	f002 020f 	and.w	r2, r2, #15
 800f3c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f3ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f3d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800f3de:	f002 020f 	and.w	r2, r2, #15
 800f3e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f3e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800f3ea:	68fa      	ldr	r2, [r7, #12]
 800f3ec:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800f3ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800f3f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f3fc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f3fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800f408:	f002 020f 	and.w	r2, r2, #15
 800f40c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f40e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800f414:	68fa      	ldr	r2, [r7, #12]
 800f416:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f418:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800f422:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f426:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f428:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	8958      	ldrh	r0, [r3, #10]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	330a      	adds	r3, #10
 800f432:	461a      	mov	r2, r3
 800f434:	2102      	movs	r1, #2
 800f436:	f7f8 fe5e 	bl	80080f6 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	8998      	ldrh	r0, [r3, #12]
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	330c      	adds	r3, #12
 800f442:	461a      	mov	r2, r3
 800f444:	2102      	movs	r1, #2
 800f446:	f7f8 fe56 	bl	80080f6 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800f44e:	68fa      	ldr	r2, [r7, #12]
 800f450:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800f452:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800f458:	68fa      	ldr	r2, [r7, #12]
 800f45a:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800f45c:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	6918      	ldr	r0, [r3, #16]
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	3312      	adds	r3, #18
 800f466:	461a      	mov	r2, r3
 800f468:	2104      	movs	r1, #4
 800f46a:	f7f8 fee4 	bl	8008236 <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800f476:	f002 0201 	and.w	r2, r2, #1
 800f47a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800f47c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f47e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f482:	4618      	mov	r0, r3
 800f484:	3718      	adds	r7, #24
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}

0800f48a <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f48a:	b580      	push	{r7, lr}
 800f48c:	b086      	sub	sp, #24
 800f48e:	af00      	add	r7, sp, #0
 800f490:	60f8      	str	r0, [r7, #12]
 800f492:	460b      	mov	r3, r1
 800f494:	607a      	str	r2, [r7, #4]
 800f496:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f498:	2300      	movs	r3, #0
 800f49a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 800f49c:	897b      	ldrh	r3, [r7, #10]
 800f49e:	2b11      	cmp	r3, #17
 800f4a0:	d802      	bhi.n	800f4a8 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f4a2:	f06f 0309 	mvn.w	r3, #9
 800f4a6:	e071      	b.n	800f58c <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	f003 0303 	and.w	r3, r3, #3
 800f4b0:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	8858      	ldrh	r0, [r3, #2]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	3301      	adds	r3, #1
 800f4be:	461a      	mov	r2, r3
 800f4c0:	2102      	movs	r1, #2
 800f4c2:	f7f8 fe18 	bl	80080f6 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	8898      	ldrh	r0, [r3, #4]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	3303      	adds	r3, #3
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	2102      	movs	r1, #2
 800f4d2:	f7f8 fe10 	bl	80080f6 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f4de:	f002 0201 	and.w	r2, r2, #1
 800f4e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f4e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800f4ee:	f002 0207 	and.w	r2, r2, #7
 800f4f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f4f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800f4fa:	68fa      	ldr	r2, [r7, #12]
 800f4fc:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f4fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800f504:	68fa      	ldr	r2, [r7, #12]
 800f506:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f508:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f512:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f516:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f518:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f522:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f526:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f528:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f532:	f002 0203 	and.w	r2, r2, #3
 800f536:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f538:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800f542:	f002 0203 	and.w	r2, r2, #3
 800f546:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f548:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800f552:	f002 020f 	and.w	r2, r2, #15
 800f556:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f558:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800f55e:	68fa      	ldr	r2, [r7, #12]
 800f560:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800f562:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800f568:	68fa      	ldr	r2, [r7, #12]
 800f56a:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800f56c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800f572:	68fa      	ldr	r2, [r7, #12]
 800f574:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800f576:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800f580:	f002 0203 	and.w	r2, r2, #3
 800f584:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f586:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f588:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3718      	adds	r7, #24
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f594:	b480      	push	{r7}
 800f596:	b087      	sub	sp, #28
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	460b      	mov	r3, r1
 800f59e:	607a      	str	r2, [r7, #4]
 800f5a0:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 800f5a6:	897b      	ldrh	r3, [r7, #10]
 800f5a8:	2b04      	cmp	r3, #4
 800f5aa:	d802      	bhi.n	800f5b2 <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f5ac:	f06f 0309 	mvn.w	r3, #9
 800f5b0:	e025      	b.n	800f5fe <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	f003 0301 	and.w	r3, r3, #1
 800f5ba:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800f5c8:	f002 0201 	and.w	r2, r2, #1
 800f5cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f5ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800f5d8:	f002 0201 	and.w	r2, r2, #1
 800f5dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f5de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800f5e8:	f002 0203 	and.w	r2, r2, #3
 800f5ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f5ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f5f8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f5fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	371c      	adds	r7, #28
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr

0800f60a <VL53LX_set_system_control>:


VL53LX_Error VL53LX_set_system_control(
	VL53LX_DEV                 Dev,
	VL53LX_system_control_t   *pdata)
{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b084      	sub	sp, #16
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
 800f612:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f614:	2300      	movs	r3, #0
 800f616:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d108      	bne.n	800f632 <VL53LX_set_system_control+0x28>
		status = VL53LX_i2c_encode_system_control(
 800f620:	f107 0308 	add.w	r3, r7, #8
 800f624:	461a      	mov	r2, r3
 800f626:	2105      	movs	r1, #5
 800f628:	6838      	ldr	r0, [r7, #0]
 800f62a:	f7ff ffb3 	bl	800f594 <VL53LX_i2c_encode_system_control>
 800f62e:	4603      	mov	r3, r0
 800f630:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 800f632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d108      	bne.n	800f64c <VL53LX_set_system_control+0x42>
		status = VL53LX_WriteMulti(
 800f63a:	f107 0208 	add.w	r2, r7, #8
 800f63e:	2305      	movs	r3, #5
 800f640:	2183      	movs	r1, #131	; 0x83
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f001 fa76 	bl	8010b34 <VL53LX_WriteMulti>
 800f648:	4603      	mov	r3, r0
 800f64a:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800f64c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f650:	4618      	mov	r0, r3
 800f652:	3710      	adds	r7, #16
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}

0800f658 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b086      	sub	sp, #24
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	4603      	mov	r3, r0
 800f660:	60b9      	str	r1, [r7, #8]
 800f662:	607a      	str	r2, [r7, #4]
 800f664:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f666:	2300      	movs	r3, #0
 800f668:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 800f66a:	89fb      	ldrh	r3, [r7, #14]
 800f66c:	2b2b      	cmp	r3, #43	; 0x2b
 800f66e:	d802      	bhi.n	800f676 <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f670:	f06f 0309 	mvn.w	r3, #9
 800f674:	e0e2      	b.n	800f83c <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f67e:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	785a      	ldrb	r2, [r3, #1]
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	3302      	adds	r3, #2
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	f003 030f 	and.w	r3, r3, #15
 800f696:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	78da      	ldrb	r2, [r3, #3]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	3304      	adds	r3, #4
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	2002      	movs	r0, #2
 800f6ac:	f7f8 fd4e 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	3306      	adds	r3, #6
 800f6bc:	4619      	mov	r1, r3
 800f6be:	2002      	movs	r0, #2
 800f6c0:	f7f8 fd44 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	3308      	adds	r3, #8
 800f6d0:	4619      	mov	r1, r3
 800f6d2:	2002      	movs	r0, #2
 800f6d4:	f7f8 fd3a 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	330a      	adds	r3, #10
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	2002      	movs	r0, #2
 800f6e8:	f7f8 fd30 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	330c      	adds	r3, #12
 800f6f8:	4619      	mov	r1, r3
 800f6fa:	2002      	movs	r0, #2
 800f6fc:	f7f8 fd26 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f700:	4603      	mov	r3, r0
 800f702:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	330e      	adds	r3, #14
 800f70c:	4619      	mov	r1, r3
 800f70e:	2002      	movs	r0, #2
 800f710:	f7f8 fd1c 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f714:	4603      	mov	r3, r0
 800f716:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	3310      	adds	r3, #16
 800f720:	4619      	mov	r1, r3
 800f722:	2002      	movs	r0, #2
 800f724:	f7f8 fd12 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f728:	4603      	mov	r3, r0
 800f72a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	3312      	adds	r3, #18
 800f734:	4619      	mov	r1, r3
 800f736:	2002      	movs	r0, #2
 800f738:	f7f8 fd08 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f73c:	4603      	mov	r3, r0
 800f73e:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	3314      	adds	r3, #20
 800f748:	4619      	mov	r1, r3
 800f74a:	2002      	movs	r0, #2
 800f74c:	f7f8 fcfe 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f750:	4603      	mov	r3, r0
 800f752:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	3316      	adds	r3, #22
 800f75c:	4619      	mov	r1, r3
 800f75e:	2002      	movs	r0, #2
 800f760:	f7f8 fcf4 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f764:	4603      	mov	r3, r0
 800f766:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	3318      	adds	r3, #24
 800f770:	4619      	mov	r1, r3
 800f772:	2002      	movs	r0, #2
 800f774:	f7f8 fcea 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f778:	4603      	mov	r3, r0
 800f77a:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	331a      	adds	r3, #26
 800f784:	4619      	mov	r1, r3
 800f786:	2002      	movs	r0, #2
 800f788:	f7f8 fce0 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f78c:	4603      	mov	r3, r0
 800f78e:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	331c      	adds	r3, #28
 800f798:	4619      	mov	r1, r3
 800f79a:	2002      	movs	r0, #2
 800f79c:	f7f8 fcd6 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	331e      	adds	r3, #30
 800f7ac:	4619      	mov	r1, r3
 800f7ae:	2002      	movs	r0, #2
 800f7b0:	f7f8 fccc 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	3320      	adds	r3, #32
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	2002      	movs	r0, #2
 800f7c4:	f7f8 fcc2 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	3322      	adds	r3, #34	; 0x22
 800f7d4:	4619      	mov	r1, r3
 800f7d6:	2002      	movs	r0, #2
 800f7d8:	f7f8 fcb8 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	3324      	adds	r3, #36	; 0x24
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	2002      	movs	r0, #2
 800f7ec:	f7f8 fcae 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	3326      	adds	r3, #38	; 0x26
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	2002      	movs	r0, #2
 800f800:	f7f8 fca4 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f804:	4603      	mov	r3, r0
 800f806:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	3328      	adds	r3, #40	; 0x28
 800f810:	4619      	mov	r1, r3
 800f812:	2002      	movs	r0, #2
 800f814:	f7f8 fc9a 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f818:	4603      	mov	r3, r0
 800f81a:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800f838:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3718      	adds	r7, #24
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b086      	sub	sp, #24
 800f848:	af00      	add	r7, sp, #0
 800f84a:	4603      	mov	r3, r0
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	607a      	str	r2, [r7, #4]
 800f850:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f852:	2300      	movs	r3, #0
 800f854:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 800f856:	89fb      	ldrh	r3, [r7, #14]
 800f858:	2b20      	cmp	r3, #32
 800f85a:	d802      	bhi.n	800f862 <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f85c:	f06f 0309 	mvn.w	r3, #9
 800f860:	e04d      	b.n	800f8fe <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 800f862:	68b9      	ldr	r1, [r7, #8]
 800f864:	2004      	movs	r0, #4
 800f866:	f7f8 fd10 	bl	800828a <VL53LX_i2c_decode_uint32_t>
 800f86a:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	3304      	adds	r3, #4
 800f874:	4619      	mov	r1, r3
 800f876:	2004      	movs	r0, #4
 800f878:	f7f8 fd07 	bl	800828a <VL53LX_i2c_decode_uint32_t>
 800f87c:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	3308      	adds	r3, #8
 800f886:	4619      	mov	r1, r3
 800f888:	2004      	movs	r0, #4
 800f88a:	f7f8 fd1b 	bl	80082c4 <VL53LX_i2c_decode_int32_t>
 800f88e:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	330c      	adds	r3, #12
 800f898:	4619      	mov	r1, r3
 800f89a:	2004      	movs	r0, #4
 800f89c:	f7f8 fcf5 	bl	800828a <VL53LX_i2c_decode_uint32_t>
 800f8a0:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	3310      	adds	r3, #16
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	2004      	movs	r0, #4
 800f8ae:	f7f8 fcec 	bl	800828a <VL53LX_i2c_decode_uint32_t>
 800f8b2:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	3314      	adds	r3, #20
 800f8bc:	4619      	mov	r1, r3
 800f8be:	2004      	movs	r0, #4
 800f8c0:	f7f8 fce3 	bl	800828a <VL53LX_i2c_decode_uint32_t>
 800f8c4:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	3318      	adds	r3, #24
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	2004      	movs	r0, #4
 800f8d2:	f7f8 fcf7 	bl	80082c4 <VL53LX_i2c_decode_int32_t>
 800f8d6:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	331c      	adds	r3, #28
 800f8e0:	4619      	mov	r1, r3
 800f8e2:	2004      	movs	r0, #4
 800f8e4:	f7f8 fcd1 	bl	800828a <VL53LX_i2c_decode_uint32_t>
 800f8e8:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800f8fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3718      	adds	r7, #24
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}

0800f906 <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 800f906:	b580      	push	{r7, lr}
 800f908:	b086      	sub	sp, #24
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	4603      	mov	r3, r0
 800f90e:	60b9      	str	r1, [r7, #8]
 800f910:	607a      	str	r2, [r7, #4]
 800f912:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f914:	2300      	movs	r3, #0
 800f916:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 800f918:	89fb      	ldrh	r3, [r7, #14]
 800f91a:	2b37      	cmp	r3, #55	; 0x37
 800f91c:	d802      	bhi.n	800f924 <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f91e:	f06f 0309 	mvn.w	r3, #9
 800f922:	e15e      	b.n	800fbe2 <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 800f924:	68b9      	ldr	r1, [r7, #8]
 800f926:	2002      	movs	r0, #2
 800f928:	f7f8 fc10 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f92c:	4603      	mov	r3, r0
 800f92e:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	3302      	adds	r3, #2
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f93e:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	3303      	adds	r3, #3
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f94e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	3304      	adds	r3, #4
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	f003 0303 	and.w	r3, r3, #3
 800f95e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	3305      	adds	r3, #5
 800f968:	781b      	ldrb	r3, [r3, #0]
 800f96a:	f003 0301 	and.w	r3, r3, #1
 800f96e:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	3306      	adds	r3, #6
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f97e:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	3307      	adds	r3, #7
 800f988:	781b      	ldrb	r3, [r3, #0]
 800f98a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f98e:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	3308      	adds	r3, #8
 800f998:	4619      	mov	r1, r3
 800f99a:	2002      	movs	r0, #2
 800f99c:	f7f8 fbd6 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f9a6:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	330a      	adds	r3, #10
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	f003 0303 	and.w	r3, r3, #3
 800f9b6:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	330b      	adds	r3, #11
 800f9c0:	781b      	ldrb	r3, [r3, #0]
 800f9c2:	f003 0303 	and.w	r3, r3, #3
 800f9c6:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	330c      	adds	r3, #12
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	f003 030f 	and.w	r3, r3, #15
 800f9d6:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	330d      	adds	r3, #13
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	f003 0307 	and.w	r3, r3, #7
 800f9e6:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	330e      	adds	r3, #14
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	f003 0301 	and.w	r3, r3, #1
 800f9f6:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	330f      	adds	r3, #15
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	f003 0303 	and.w	r3, r3, #3
 800fa06:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	7c1a      	ldrb	r2, [r3, #16]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	7c5a      	ldrb	r2, [r3, #17]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	3312      	adds	r3, #18
 800fa20:	4619      	mov	r1, r3
 800fa22:	2002      	movs	r0, #2
 800fa24:	f7f8 fb92 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fa2e:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	3316      	adds	r3, #22
 800fa38:	4619      	mov	r1, r3
 800fa3a:	2002      	movs	r0, #2
 800fa3c:	f7f8 fb86 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800fa40:	4603      	mov	r3, r0
 800fa42:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	3318      	adds	r3, #24
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	2002      	movs	r0, #2
 800fa50:	f7f8 fb7c 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800fa54:	4603      	mov	r3, r0
 800fa56:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	331a      	adds	r3, #26
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	f003 0301 	and.w	r3, r3, #1
 800fa66:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	331b      	adds	r3, #27
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	f003 0307 	and.w	r3, r3, #7
 800fa76:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	7f1a      	ldrb	r2, [r3, #28]
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	7f5a      	ldrb	r2, [r3, #29]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	331e      	adds	r3, #30
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa96:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	331f      	adds	r3, #31
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800faa6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	3320      	adds	r3, #32
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	f003 0303 	and.w	r3, r3, #3
 800fab6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	3321      	adds	r3, #33	; 0x21
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	f003 030f 	and.w	r3, r3, #15
 800fac6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	3325      	adds	r3, #37	; 0x25
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	f003 0301 	and.w	r3, r3, #1
 800fafa:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	3326      	adds	r3, #38	; 0x26
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	f003 0303 	and.w	r3, r3, #3
 800fb0c:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	3327      	adds	r3, #39	; 0x27
 800fb18:	781b      	ldrb	r3, [r3, #0]
 800fb1a:	f003 031f 	and.w	r3, r3, #31
 800fb1e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	3328      	adds	r3, #40	; 0x28
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	f003 031f 	and.w	r3, r3, #31
 800fb30:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	3329      	adds	r3, #41	; 0x29
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	f003 031f 	and.w	r3, r3, #31
 800fb42:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	332a      	adds	r3, #42	; 0x2a
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	f003 0301 	and.w	r3, r3, #1
 800fb54:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	332b      	adds	r3, #43	; 0x2b
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	f003 0301 	and.w	r3, r3, #1
 800fb66:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	332c      	adds	r3, #44	; 0x2c
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	f003 0303 	and.w	r3, r3, #3
 800fb78:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	332d      	adds	r3, #45	; 0x2d
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb8a:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	332e      	adds	r3, #46	; 0x2e
 800fb96:	4619      	mov	r1, r3
 800fb98:	2004      	movs	r0, #4
 800fb9a:	f7f8 fb76 	bl	800828a <VL53LX_i2c_decode_uint32_t>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	3332      	adds	r3, #50	; 0x32
 800fbac:	4619      	mov	r1, r3
 800fbae:	2004      	movs	r0, #4
 800fbb0:	f7f8 fb6b 	bl	800828a <VL53LX_i2c_decode_uint32_t>
 800fbb4:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	3336      	adds	r3, #54	; 0x36
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	f003 0301 	and.w	r3, r3, #1
 800fbc4:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	3337      	adds	r3, #55	; 0x37
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	f003 0301 	and.w	r3, r3, #1
 800fbd6:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800fbde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3718      	adds	r7, #24
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}

0800fbea <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 800fbea:	b580      	push	{r7, lr}
 800fbec:	b086      	sub	sp, #24
 800fbee:	af00      	add	r7, sp, #0
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	60b9      	str	r1, [r7, #8]
 800fbf4:	607a      	str	r2, [r7, #4]
 800fbf6:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 800fbfc:	89fb      	ldrh	r3, [r7, #14]
 800fbfe:	2b30      	cmp	r3, #48	; 0x30
 800fc00:	d802      	bhi.n	800fc08 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fc02:	f06f 0309 	mvn.w	r3, #9
 800fc06:	e112      	b.n	800fe2e <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	785a      	ldrb	r2, [r3, #1]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	789a      	ldrb	r2, [r3, #2]
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	3303      	adds	r3, #3
 800fc24:	4619      	mov	r1, r3
 800fc26:	2002      	movs	r0, #2
 800fc28:	f7f8 fa90 	bl	800814c <VL53LX_i2c_decode_uint16_t>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	3305      	adds	r3, #5
 800fc38:	781b      	ldrb	r3, [r3, #0]
 800fc3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc3e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	3306      	adds	r3, #6
 800fc48:	781b      	ldrb	r3, [r3, #0]
 800fc4a:	f003 0307 	and.w	r3, r3, #7
 800fc4e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	3307      	adds	r3, #7
 800fc58:	781b      	ldrb	r3, [r3, #0]
 800fc5a:	f003 0307 	and.w	r3, r3, #7
 800fc5e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	3308      	adds	r3, #8
 800fc68:	781b      	ldrb	r3, [r3, #0]
 800fc6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fc6e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800fc74:	68bb      	ldr	r3, [r7, #8]
 800fc76:	3309      	adds	r3, #9
 800fc78:	781b      	ldrb	r3, [r3, #0]
 800fc7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fc7e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	330a      	adds	r3, #10
 800fc88:	781b      	ldrb	r3, [r3, #0]
 800fc8a:	f003 0301 	and.w	r3, r3, #1
 800fc8e:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	330b      	adds	r3, #11
 800fc98:	781b      	ldrb	r3, [r3, #0]
 800fc9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc9e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	330c      	adds	r3, #12
 800fca8:	781b      	ldrb	r3, [r3, #0]
 800fcaa:	f003 0301 	and.w	r3, r3, #1
 800fcae:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	330d      	adds	r3, #13
 800fcb8:	781b      	ldrb	r3, [r3, #0]
 800fcba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fcbe:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	330e      	adds	r3, #14
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fcce:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	7bda      	ldrb	r2, [r3, #15]
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	7c1a      	ldrb	r2, [r3, #16]
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	7c5a      	ldrb	r2, [r3, #17]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	7c9a      	ldrb	r2, [r3, #18]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	7cda      	ldrb	r2, [r3, #19]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	7d1a      	ldrb	r2, [r3, #20]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	7d5a      	ldrb	r2, [r3, #21]
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	7d9a      	ldrb	r2, [r3, #22]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	7dda      	ldrb	r2, [r3, #23]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	7e1a      	ldrb	r2, [r3, #24]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	7e5a      	ldrb	r2, [r3, #25]
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	7e9a      	ldrb	r2, [r3, #26]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	7eda      	ldrb	r2, [r3, #27]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	7f1a      	ldrb	r2, [r3, #28]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	7f5a      	ldrb	r2, [r3, #29]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	7f9a      	ldrb	r2, [r3, #30]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	7fda      	ldrb	r2, [r3, #31]
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	f893 2020 	ldrb.w	r2, [r3, #32]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800fdbe:	68bb      	ldr	r3, [r7, #8]
 800fdc0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800fe2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3718      	adds	r7, #24
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}

0800fe36 <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 800fe36:	b580      	push	{r7, lr}
 800fe38:	b090      	sub	sp, #64	; 0x40
 800fe3a:	af00      	add	r7, sp, #0
 800fe3c:	6078      	str	r0, [r7, #4]
 800fe3e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fe40:	2300      	movs	r3, #0
 800fe42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800fe46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d10a      	bne.n	800fe64 <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 800fe4e:	f107 020c 	add.w	r2, r7, #12
 800fe52:	2331      	movs	r3, #49	; 0x31
 800fe54:	f240 110f 	movw	r1, #271	; 0x10f
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f000 fea1 	bl	8010ba0 <VL53LX_ReadMulti>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800fe64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d109      	bne.n	800fe80 <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 800fe6c:	f107 030c 	add.w	r3, r7, #12
 800fe70:	683a      	ldr	r2, [r7, #0]
 800fe72:	4619      	mov	r1, r3
 800fe74:	2031      	movs	r0, #49	; 0x31
 800fe76:	f7ff feb8 	bl	800fbea <VL53LX_i2c_decode_nvm_copy_data>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800fe80:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	3740      	adds	r7, #64	; 0x40
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}

0800fe8c <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 800fe8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe90:	b0a1      	sub	sp, #132	; 0x84
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	64b9      	str	r1, [r7, #72]	; 0x48
 800fe96:	647a      	str	r2, [r7, #68]	; 0x44
 800fe98:	643b      	str	r3, [r7, #64]	; 0x40
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800fea0:	23f1      	movs	r3, #241	; 0xf1
 800fea2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint32_t sigma_int  = VL53LX_D_002;
 800fea6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800feaa:	657b      	str	r3, [r7, #84]	; 0x54

	uint32_t pll_period_mm  = 0;
 800feac:	2300      	movs	r3, #0
 800feae:	653b      	str	r3, [r7, #80]	; 0x50

	uint64_t tmp0        = 0;
 800feb0:	f04f 0200 	mov.w	r2, #0
 800feb4:	f04f 0300 	mov.w	r3, #0
 800feb8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	uint64_t tmp1        = 0;
 800febc:	f04f 0200 	mov.w	r2, #0
 800fec0:	f04f 0300 	mov.w	r3, #0
 800fec4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	uint64_t b_minus_amb = 0;
 800fec8:	f04f 0200 	mov.w	r2, #0
 800fecc:	f04f 0300 	mov.w	r3, #0
 800fed0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t VL53LX_p_055   = 0;
 800fed4:	f04f 0200 	mov.w	r2, #0
 800fed8:	f04f 0300 	mov.w	r3, #0
 800fedc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	*psigma_est  = VL53LX_D_002;
 800fee0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fee4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fee8:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 800feea:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800feee:	2b00      	cmp	r3, #0
 800fef0:	f000 8259 	beq.w	80103a6 <VL53LX_f_023+0x51a>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 800fef4:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7fb fbd3 	bl	800b6a4 <VL53LX_calc_pll_period_mm>
 800fefe:	6538      	str	r0, [r7, #80]	; 0x50



		if (VL53LX_p_028 > VL53LX_p_032)
 800ff00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ff04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d90f      	bls.n	800ff2a <VL53LX_f_023+0x9e>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 800ff0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_032;
 800ff14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff16:	461a      	mov	r2, r3
 800ff18:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 800ff1c:	ebb0 0a02 	subs.w	sl, r0, r2
 800ff20:	eb61 0b03 	sbc.w	fp, r1, r3
 800ff24:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800ff28:	e00e      	b.n	800ff48 <VL53LX_f_023+0xbc>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 800ff2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_028;
 800ff32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ff36:	461a      	mov	r2, r3
 800ff38:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 800ff3c:	ebb0 0802 	subs.w	r8, r0, r2
 800ff40:	eb61 0903 	sbc.w	r9, r1, r3
 800ff44:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60



		if (VL53LX_p_007 > VL53LX_p_001)
 800ff48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d911      	bls.n	800ff74 <VL53LX_f_023+0xe8>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 800ff50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff52:	4618      	mov	r0, r3
 800ff54:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_001;
 800ff58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 800ff60:	1a86      	subs	r6, r0, r2
 800ff62:	62be      	str	r6, [r7, #40]	; 0x28
 800ff64:	eb61 0303 	sbc.w	r3, r1, r3
 800ff68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ff6e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800ff72:	e010      	b.n	800ff96 <VL53LX_f_023+0x10a>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 800ff74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff76:	4618      	mov	r0, r3
 800ff78:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_007;
 800ff7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff7e:	461a      	mov	r2, r3
 800ff80:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 800ff84:	1a86      	subs	r6, r0, r2
 800ff86:	623e      	str	r6, [r7, #32]
 800ff88:	eb61 0303 	sbc.w	r3, r1, r3
 800ff8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ff8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ff92:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58



		if (b_minus_amb != 0) {
 800ff96:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800ff9a:	4313      	orrs	r3, r2
 800ff9c:	f000 8203 	beq.w	80103a6 <VL53LX_f_023+0x51a>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 800ffa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f04f 0100 	mov.w	r1, #0
 800ffa8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ffac:	461a      	mov	r2, r3
 800ffae:	f04f 0300 	mov.w	r3, #0
 800ffb2:	1884      	adds	r4, r0, r2
 800ffb4:	eb41 0503 	adc.w	r5, r1, r3
					(uint64_t)VL53LX_p_028;
 800ffb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	f04f 0300 	mov.w	r3, #0
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 800ffc2:	18a1      	adds	r1, r4, r2
 800ffc4:	61b9      	str	r1, [r7, #24]
 800ffc6:	eb45 0303 	adc.w	r3, r5, r3
 800ffca:	61fb      	str	r3, [r7, #28]
 800ffcc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800ffd0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > VL53LX_D_003)
 800ffd4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800ffd8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800ffdc:	f04f 0100 	mov.w	r1, #0
 800ffe0:	4299      	cmp	r1, r3
 800ffe2:	bf08      	it	eq
 800ffe4:	4290      	cmpeq	r0, r2
 800ffe6:	d205      	bcs.n	800fff4 <VL53LX_f_023+0x168>
				tmp0 = VL53LX_D_003;
 800ffe8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800ffec:	f04f 0300 	mov.w	r3, #0
 800fff0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 800fff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fff6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fff8:	fb02 f203 	mul.w	r2, r2, r3
 800fffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fffe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010000:	fb01 f303 	mul.w	r3, r1, r3
 8010004:	18d1      	adds	r1, r2, r3
 8010006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010008:	fba3 2303 	umull	r2, r3, r3, r3
 801000c:	4419      	add	r1, r3
 801000e:	460b      	mov	r3, r1
 8010010:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8010014:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 << 8;
 8010018:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801001c:	f04f 0200 	mov.w	r2, #0
 8010020:	f04f 0300 	mov.w	r3, #0
 8010024:	020b      	lsls	r3, r1, #8
 8010026:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801002a:	0202      	lsls	r2, r0, #8
 801002c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > VL53LX_D_004)
 8010030:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010034:	f04f 30ff 	mov.w	r0, #4294967295
 8010038:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801003c:	4299      	cmp	r1, r3
 801003e:	bf08      	it	eq
 8010040:	4290      	cmpeq	r0, r2
 8010042:	d205      	bcs.n	8010050 <VL53LX_f_023+0x1c4>
				tmp1 = VL53LX_D_004;
 8010044:	f04f 32ff 	mov.w	r2, #4294967295
 8010048:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801004c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8010050:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010054:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010058:	f7f0 f962 	bl	8000320 <__aeabi_uldivmod>
 801005c:	4602      	mov	r2, r0
 801005e:	460b      	mov	r3, r1
 8010060:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8010064:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010068:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801006c:	f7f0 f958 	bl	8000320 <__aeabi_uldivmod>
 8010070:	4602      	mov	r2, r0
 8010072:	460b      	mov	r3, r1
 8010074:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_005)
 8010078:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801007c:	2b80      	cmp	r3, #128	; 0x80
 801007e:	bf08      	it	eq
 8010080:	2a00      	cmpeq	r2, #0
 8010082:	d305      	bcc.n	8010090 <VL53LX_f_023+0x204>
				tmp1 = (uint64_t)VL53LX_D_005;
 8010084:	f04f 32ff 	mov.w	r2, #4294967295
 8010088:	f04f 037f 	mov.w	r3, #127	; 0x7f
 801008c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 * tmp0;
 8010090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010092:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010094:	fb02 f203 	mul.w	r2, r2, r3
 8010098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801009a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801009c:	fb01 f303 	mul.w	r3, r1, r3
 80100a0:	18d1      	adds	r1, r2, r3
 80100a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80100a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80100a6:	fba2 2303 	umull	r2, r3, r2, r3
 80100aa:	4419      	add	r1, r3
 80100ac:	460b      	mov	r3, r1
 80100ae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80100b2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80100b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80100ba:	4618      	mov	r0, r3
 80100bc:	f04f 0100 	mov.w	r1, #0
 80100c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80100c4:	461a      	mov	r2, r3
 80100c6:	f04f 0300 	mov.w	r3, #0
 80100ca:	1884      	adds	r4, r0, r2
 80100cc:	63bc      	str	r4, [r7, #56]	; 0x38
 80100ce:	eb41 0303 	adc.w	r3, r1, r3
 80100d2:	63fb      	str	r3, [r7, #60]	; 0x3c
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80100d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80100d8:	461a      	mov	r2, r3
 80100da:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80100de:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80100e2:	4621      	mov	r1, r4
 80100e4:	1889      	adds	r1, r1, r2
 80100e6:	6339      	str	r1, [r7, #48]	; 0x30
 80100e8:	4629      	mov	r1, r5
 80100ea:	eb43 0101 	adc.w	r1, r3, r1
 80100ee:	6379      	str	r1, [r7, #52]	; 0x34
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80100f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80100f4:	461a      	mov	r2, r3
 80100f6:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80100fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80100fe:	4621      	mov	r1, r4
 8010100:	1889      	adds	r1, r1, r2
 8010102:	6139      	str	r1, [r7, #16]
 8010104:	4629      	mov	r1, r5
 8010106:	eb43 0101 	adc.w	r1, r3, r1
 801010a:	6179      	str	r1, [r7, #20]
 801010c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010110:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_003)
 8010114:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010118:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801011c:	f04f 0100 	mov.w	r1, #0
 8010120:	4299      	cmp	r1, r3
 8010122:	bf08      	it	eq
 8010124:	4290      	cmpeq	r0, r2
 8010126:	d205      	bcs.n	8010134 <VL53LX_f_023+0x2a8>
				tmp1 = (uint64_t)VL53LX_D_003;
 8010128:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801012c:	f04f 0300 	mov.w	r3, #0
 8010130:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			tmp1 = tmp1 << 8;
 8010134:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010138:	f04f 0200 	mov.w	r2, #0
 801013c:	f04f 0300 	mov.w	r3, #0
 8010140:	020b      	lsls	r3, r1, #8
 8010142:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010146:	0202      	lsls	r2, r0, #8
 8010148:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 + tmp0;
 801014c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010150:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010154:	1884      	adds	r4, r0, r2
 8010156:	60bc      	str	r4, [r7, #8]
 8010158:	eb41 0303 	adc.w	r3, r1, r3
 801015c:	60fb      	str	r3, [r7, #12]
 801015e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010162:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010166:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801016a:	2a00      	cmp	r2, #0
 801016c:	f173 0300 	sbcs.w	r3, r3, #0
 8010170:	da05      	bge.n	801017e <VL53LX_f_023+0x2f2>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010172:	f04f 32ff 	mov.w	r2, #4294967295
 8010176:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801017a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 801017e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010182:	2b01      	cmp	r3, #1
 8010184:	bf08      	it	eq
 8010186:	2a00      	cmpeq	r2, #0
 8010188:	d31e      	bcc.n	80101c8 <VL53LX_f_023+0x33c>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 801018a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801018e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010192:	f7f0 f8c5 	bl	8000320 <__aeabi_uldivmod>
 8010196:	4602      	mov	r2, r0
 8010198:	460b      	mov	r3, r1
 801019a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 801019e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101a0:	461a      	mov	r2, r3
 80101a2:	f04f 0300 	mov.w	r3, #0
 80101a6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80101a8:	fb02 f001 	mul.w	r0, r2, r1
 80101ac:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80101ae:	fb03 f101 	mul.w	r1, r3, r1
 80101b2:	4401      	add	r1, r0
 80101b4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80101b6:	fba0 2302 	umull	r2, r3, r0, r2
 80101ba:	4419      	add	r1, r3
 80101bc:	460b      	mov	r3, r1
 80101be:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80101c2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80101c6:	e01d      	b.n	8010204 <VL53LX_f_023+0x378>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 80101c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101ca:	461a      	mov	r2, r3
 80101cc:	f04f 0300 	mov.w	r3, #0
 80101d0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80101d2:	fb02 f001 	mul.w	r0, r2, r1
 80101d6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80101d8:	fb03 f101 	mul.w	r1, r3, r1
 80101dc:	4401      	add	r1, r0
 80101de:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80101e0:	fba0 2302 	umull	r2, r3, r0, r2
 80101e4:	4419      	add	r1, r3
 80101e6:	460b      	mov	r3, r1
 80101e8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80101ec:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80101f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80101f4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80101f8:	f7f0 f892 	bl	8000320 <__aeabi_uldivmod>
 80101fc:	4602      	mov	r2, r0
 80101fe:	460b      	mov	r3, r1
 8010200:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010204:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010208:	2a00      	cmp	r2, #0
 801020a:	f173 0300 	sbcs.w	r3, r3, #0
 801020e:	da05      	bge.n	801021c <VL53LX_f_023+0x390>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010210:	f04f 32ff 	mov.w	r2, #4294967295
 8010214:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010218:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 801021c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010220:	2b01      	cmp	r3, #1
 8010222:	bf08      	it	eq
 8010224:	2a00      	cmpeq	r2, #0
 8010226:	d32a      	bcc.n	801027e <VL53LX_f_023+0x3f2>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010228:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801022c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010230:	f7f0 f876 	bl	8000320 <__aeabi_uldivmod>
 8010234:	4602      	mov	r2, r0
 8010236:	460b      	mov	r3, r1
 8010238:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 801023c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010240:	f04f 0200 	mov.w	r2, #0
 8010244:	f04f 0300 	mov.w	r3, #0
 8010248:	0882      	lsrs	r2, r0, #2
 801024a:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 801024e:	088b      	lsrs	r3, r1, #2
 8010250:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 8010254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010256:	461a      	mov	r2, r3
 8010258:	f04f 0300 	mov.w	r3, #0
 801025c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801025e:	fb02 f001 	mul.w	r0, r2, r1
 8010262:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010264:	fb03 f101 	mul.w	r1, r3, r1
 8010268:	4401      	add	r1, r0
 801026a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801026c:	fba0 2302 	umull	r2, r3, r0, r2
 8010270:	4419      	add	r1, r3
 8010272:	460b      	mov	r3, r1
 8010274:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010278:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 801027c:	e029      	b.n	80102d2 <VL53LX_f_023+0x446>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 801027e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010280:	461a      	mov	r2, r3
 8010282:	f04f 0300 	mov.w	r3, #0
 8010286:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010288:	fb02 f001 	mul.w	r0, r2, r1
 801028c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801028e:	fb03 f101 	mul.w	r1, r3, r1
 8010292:	4401      	add	r1, r0
 8010294:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010296:	fba0 2302 	umull	r2, r3, r0, r2
 801029a:	4419      	add	r1, r3
 801029c:	460b      	mov	r3, r1
 801029e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80102a2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80102a6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80102aa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80102ae:	f7f0 f837 	bl	8000320 <__aeabi_uldivmod>
 80102b2:	4602      	mov	r2, r0
 80102b4:	460b      	mov	r3, r1
 80102b6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 80102ba:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80102be:	f04f 0200 	mov.w	r2, #0
 80102c2:	f04f 0300 	mov.w	r3, #0
 80102c6:	0882      	lsrs	r2, r0, #2
 80102c8:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80102cc:	088b      	lsrs	r3, r1, #2
 80102ce:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 80102d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80102d6:	2a00      	cmp	r2, #0
 80102d8:	f173 0300 	sbcs.w	r3, r3, #0
 80102dc:	da05      	bge.n	80102ea <VL53LX_f_023+0x45e>
				tmp0 = (uint64_t)VL53LX_D_006;
 80102de:	f04f 32ff 	mov.w	r2, #4294967295
 80102e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80102e6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp0 = tmp0 >> 2;
 80102ea:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80102ee:	f04f 0200 	mov.w	r2, #0
 80102f2:	f04f 0300 	mov.w	r3, #0
 80102f6:	0882      	lsrs	r2, r0, #2
 80102f8:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80102fc:	088b      	lsrs	r3, r1, #2
 80102fe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010302:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010306:	2b01      	cmp	r3, #1
 8010308:	bf08      	it	eq
 801030a:	2a00      	cmpeq	r2, #0
 801030c:	d305      	bcc.n	801031a <VL53LX_f_023+0x48e>
				tmp0 = (uint64_t)VL53LX_D_007;
 801030e:	f04f 32ff 	mov.w	r2, #4294967295
 8010312:	f04f 0300 	mov.w	r3, #0
 8010316:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 801031a:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 801031e:	f04f 0100 	mov.w	r1, #0
 8010322:	f04f 0200 	mov.w	r2, #0
 8010326:	f04f 0300 	mov.w	r3, #0
 801032a:	01cb      	lsls	r3, r1, #7
 801032c:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8010330:	01c2      	lsls	r2, r0, #7
 8010332:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 * tmp1;
 8010336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010338:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801033a:	fb02 f203 	mul.w	r2, r2, r3
 801033e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010340:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010342:	fb01 f303 	mul.w	r3, r1, r3
 8010346:	18d1      	adds	r1, r2, r3
 8010348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801034a:	fba3 2303 	umull	r2, r3, r3, r3
 801034e:	4419      	add	r1, r3
 8010350:	460b      	mov	r3, r1
 8010352:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8010356:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp0 = tmp0 + tmp1;
 801035a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801035e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010362:	1884      	adds	r4, r0, r2
 8010364:	603c      	str	r4, [r7, #0]
 8010366:	eb41 0303 	adc.w	r3, r1, r3
 801036a:	607b      	str	r3, [r7, #4]
 801036c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010370:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010374:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010378:	2b01      	cmp	r3, #1
 801037a:	bf08      	it	eq
 801037c:	2a00      	cmpeq	r2, #0
 801037e:	d305      	bcc.n	801038c <VL53LX_f_023+0x500>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010380:	f04f 32ff 	mov.w	r2, #4294967295
 8010384:	f04f 0300 	mov.w	r3, #0
 8010388:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 801038c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801038e:	4618      	mov	r0, r3
 8010390:	f7fb f821 	bl	800b3d6 <VL53LX_isqrt>
 8010394:	6578      	str	r0, [r7, #84]	; 0x54

			*psigma_est = (uint16_t)sigma_int;
 8010396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010398:	b29a      	uxth	r2, r3
 801039a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801039e:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 80103a0:	2300      	movs	r3, #0
 80103a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}

	}

	return status;
 80103a6:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3784      	adds	r7, #132	; 0x84
 80103ae:	46bd      	mov	sp, r7
 80103b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080103b4 <VL53LX_wait_for_test_completion>:
}


VL53LX_Error VL53LX_wait_for_test_completion(
	VL53LX_DEV     Dev)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b086      	sub	sp, #24
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 80103bc:	2300      	movs	r3, #0
 80103be:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	3318      	adds	r3, #24
 80103c4:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 80103c6:	2300      	movs	r3, #0
 80103c8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53LX_WAIT_METHOD_BLOCKING) {
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d107      	bne.n	80103e2 <VL53LX_wait_for_test_completion+0x2e>



		status =
			VL53LX_poll_for_range_completion(
 80103d2:	f64e 2160 	movw	r1, #60000	; 0xea60
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 f88b 	bl	80104f2 <VL53LX_poll_for_range_completion>
 80103dc:	4603      	mov	r3, r0
 80103de:	75fb      	strb	r3, [r7, #23]
 80103e0:	e01b      	b.n	801041a <VL53LX_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 80103e2:	2300      	movs	r3, #0
 80103e4:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 80103e6:	e011      	b.n	801040c <VL53LX_wait_for_test_completion+0x58>
			status = VL53LX_is_new_data_ready(
 80103e8:	f107 030f 	add.w	r3, r7, #15
 80103ec:	4619      	mov	r1, r3
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 f819 	bl	8010426 <VL53LX_is_new_data_ready>
 80103f4:	4603      	mov	r3, r0
 80103f6:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53LX_ERROR_NONE) {
 80103f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d105      	bne.n	801040c <VL53LX_wait_for_test_completion+0x58>
				status = VL53LX_WaitMs(
 8010400:	2101      	movs	r1, #1
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f000 fce6 	bl	8010dd4 <VL53LX_WaitMs>
 8010408:	4603      	mov	r3, r0
 801040a:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 801040c:	7bfb      	ldrb	r3, [r7, #15]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d103      	bne.n	801041a <VL53LX_wait_for_test_completion+0x66>
 8010412:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d0e6      	beq.n	80103e8 <VL53LX_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801041a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801041e:	4618      	mov	r0, r3
 8010420:	3718      	adds	r7, #24
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}

08010426 <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 8010426:	b580      	push	{r7, lr}
 8010428:	b086      	sub	sp, #24
 801042a:	af00      	add	r7, sp, #0
 801042c:	6078      	str	r0, [r7, #4]
 801042e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010430:	2300      	movs	r3, #0
 8010432:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	3318      	adds	r3, #24
 8010438:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 801043a:	2300      	movs	r3, #0
 801043c:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 801043e:	2300      	movs	r3, #0
 8010440:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8010442:	2300      	movs	r3, #0
 8010444:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 801044c:	f003 0310 	and.w	r3, r3, #16
 8010450:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8010452:	7bfb      	ldrb	r3, [r7, #15]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d102      	bne.n	801045e <VL53LX_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8010458:	2301      	movs	r3, #1
 801045a:	75fb      	strb	r3, [r7, #23]
 801045c:	e001      	b.n	8010462 <VL53LX_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 801045e:	2300      	movs	r3, #0
 8010460:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 8010462:	f107 030e 	add.w	r3, r7, #14
 8010466:	461a      	mov	r2, r3
 8010468:	2131      	movs	r1, #49	; 0x31
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f000 fc2a 	bl	8010cc4 <VL53LX_RdByte>
 8010470:	4603      	mov	r3, r0
 8010472:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8010474:	7bbb      	ldrb	r3, [r7, #14]
 8010476:	f003 0201 	and.w	r2, r3, #1
 801047a:	7dfb      	ldrb	r3, [r7, #23]
 801047c:	429a      	cmp	r2, r3
 801047e:	d103      	bne.n	8010488 <VL53LX_is_new_data_ready+0x62>
		*pready = 0x01;
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	2201      	movs	r2, #1
 8010484:	701a      	strb	r2, [r3, #0]
 8010486:	e002      	b.n	801048e <VL53LX_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	2200      	movs	r2, #0
 801048c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 801048e:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010492:	4618      	mov	r0, r3
 8010494:	3718      	adds	r7, #24
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}

0801049a <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 801049a:	b580      	push	{r7, lr}
 801049c:	b086      	sub	sp, #24
 801049e:	af02      	add	r7, sp, #8
 80104a0:	6078      	str	r0, [r7, #4]
 80104a2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80104a4:	2300      	movs	r3, #0
 80104a6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 80104a8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f000 fca1 	bl	8010df4 <VL53LX_WaitUs>
 80104b2:	4603      	mov	r3, r0
 80104b4:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 80104b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d10b      	bne.n	80104d6 <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 80104be:	2301      	movs	r3, #1
 80104c0:	9301      	str	r3, [sp, #4]
 80104c2:	2301      	movs	r3, #1
 80104c4:	9300      	str	r3, [sp, #0]
 80104c6:	2301      	movs	r3, #1
 80104c8:	22e5      	movs	r2, #229	; 0xe5
 80104ca:	6839      	ldr	r1, [r7, #0]
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f000 fca9 	bl	8010e24 <VL53LX_WaitValueMaskEx>
 80104d2:	4603      	mov	r3, r0
 80104d4:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 80104d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d103      	bne.n	80104e6 <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 80104de:	2103      	movs	r1, #3
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f7f7 f815 	bl	8007510 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 80104e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3710      	adds	r7, #16
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}

080104f2 <VL53LX_poll_for_range_completion>:


VL53LX_Error VL53LX_poll_for_range_completion(
	VL53LX_DEV     Dev,
	uint32_t       timeout_ms)
{
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b088      	sub	sp, #32
 80104f6:	af02      	add	r7, sp, #8
 80104f8:	6078      	str	r0, [r7, #4]
 80104fa:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80104fc:	2300      	movs	r3, #0
 80104fe:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	3318      	adds	r3, #24
 8010504:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8010506:	2300      	movs	r3, #0
 8010508:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 801050a:	2300      	movs	r3, #0
 801050c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 8010514:	f003 0310 	and.w	r3, r3, #16
 8010518:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 801051a:	7bfb      	ldrb	r3, [r7, #15]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d102      	bne.n	8010526 <VL53LX_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8010520:	2301      	movs	r3, #1
 8010522:	75fb      	strb	r3, [r7, #23]
 8010524:	e001      	b.n	801052a <VL53LX_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8010526:	2300      	movs	r3, #0
 8010528:	75fb      	strb	r3, [r7, #23]

	status =
		VL53LX_WaitValueMaskEx(
 801052a:	7dfb      	ldrb	r3, [r7, #23]
 801052c:	2201      	movs	r2, #1
 801052e:	9201      	str	r2, [sp, #4]
 8010530:	2201      	movs	r2, #1
 8010532:	9200      	str	r2, [sp, #0]
 8010534:	2231      	movs	r2, #49	; 0x31
 8010536:	6839      	ldr	r1, [r7, #0]
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f000 fc73 	bl	8010e24 <VL53LX_WaitValueMaskEx>
 801053e:	4603      	mov	r3, r0
 8010540:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53LX_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8010542:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010546:	4618      	mov	r0, r3
 8010548:	3718      	adds	r7, #24
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}

0801054e <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 801054e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010552:	b0a2      	sub	sp, #136	; 0x88
 8010554:	af00      	add	r7, sp, #0
 8010556:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010558:	4618      	mov	r0, r3
 801055a:	460b      	mov	r3, r1
 801055c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8010560:	4613      	mov	r3, r2
 8010562:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8010566:	4603      	mov	r3, r0
 8010568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



	VL53LX_Error status = VL53LX_ERROR_NONE;
 801056c:	2300      	movs	r3, #0
 801056e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	uint8_t row = 0;
 8010572:	2300      	movs	r3, #0
 8010574:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t col = 0;
 8010578:	2300      	movs	r3, #0
 801057a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65



	int16_t  bound_l_x = 0;
 801057e:	2300      	movs	r3, #0
 8010580:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	int16_t  bound_r_x = 0;
 8010584:	2300      	movs	r3, #0
 8010586:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	int16_t  bound_u_y = 0;
 801058a:	2300      	movs	r3, #0
 801058c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	int16_t  bound_d_y = 0;
 8010590:	2300      	movs	r3, #0
 8010592:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

	int64_t xtalk_rate_ll = 0;
 8010596:	f04f 0200 	mov.w	r2, #0
 801059a:	f04f 0300 	mov.w	r3, #0
 801059e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t xtalk_rate_ur = 0;
 80105a2:	f04f 0200 	mov.w	r2, #0
 80105a6:	f04f 0300 	mov.w	r3, #0
 80105aa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	int64_t xtalk_avg = 0;
 80105ae:	f04f 0200 	mov.w	r2, #0
 80105b2:	f04f 0300 	mov.w	r3, #0
 80105b6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	if (status == VL53LX_ERROR_NONE) {
 80105ba:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d108      	bne.n	80105d4 <VL53LX_f_032+0x86>
		VL53LX_decode_row_col(
 80105c2:	f107 0265 	add.w	r2, r7, #101	; 0x65
 80105c6:	f107 0166 	add.w	r1, r7, #102	; 0x66
 80105ca:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7fb fad4 	bl	800bb7c <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 80105d4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d165      	bne.n	80106a8 <VL53LX_f_032+0x15a>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 80105dc:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80105e0:	091b      	lsrs	r3, r3, #4
 80105e2:	b2db      	uxtb	r3, r3
 80105e4:	f003 0301 	and.w	r3, r3, #1
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d00e      	beq.n	801060a <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 80105ec:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80105f0:	b29a      	uxth	r2, r3
 80105f2:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80105f6:	095b      	lsrs	r3, r3, #5
 80105f8:	b2db      	uxtb	r3, r3
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	1ad3      	subs	r3, r2, r3
 80105fe:	b29b      	uxth	r3, r3
 8010600:	3b01      	subs	r3, #1
 8010602:	b29b      	uxth	r3, r3
 8010604:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8010608:	e00b      	b.n	8010622 <VL53LX_f_032+0xd4>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 801060a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 801060e:	b29a      	uxth	r2, r3
 8010610:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010614:	095b      	lsrs	r3, r3, #5
 8010616:	b2db      	uxtb	r3, r3
 8010618:	b29b      	uxth	r3, r3
 801061a:	1ad3      	subs	r3, r2, r3
 801061c:	b29b      	uxth	r3, r3
 801061e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8010622:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8010626:	b29a      	uxth	r2, r3
 8010628:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 801062c:	095b      	lsrs	r3, r3, #5
 801062e:	b2db      	uxtb	r3, r3
 8010630:	b29b      	uxth	r3, r3
 8010632:	4413      	add	r3, r2
 8010634:	b29b      	uxth	r3, r3
 8010636:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 801063a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 801063e:	f003 0301 	and.w	r3, r3, #1
 8010642:	2b00      	cmp	r3, #0
 8010644:	d011      	beq.n	801066a <VL53LX_f_032+0x11c>
			bound_d_y = (int16_t) row -
 8010646:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801064a:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 801064c:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010650:	f003 020f 	and.w	r2, r3, #15
 8010654:	0fd3      	lsrs	r3, r2, #31
 8010656:	4413      	add	r3, r2
 8010658:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 801065a:	b29b      	uxth	r3, r3
 801065c:	1acb      	subs	r3, r1, r3
 801065e:	b29b      	uxth	r3, r3
 8010660:	3b01      	subs	r3, #1
 8010662:	b29b      	uxth	r3, r3
 8010664:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8010668:	e00f      	b.n	801068a <VL53LX_f_032+0x13c>
		else
			bound_d_y = (int16_t) row -
 801066a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801066e:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8010670:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010674:	f003 020f 	and.w	r2, r3, #15
 8010678:	0fd3      	lsrs	r3, r2, #31
 801067a:	4413      	add	r3, r2
 801067c:	105b      	asrs	r3, r3, #1
 801067e:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8010680:	b29b      	uxth	r3, r3
 8010682:	440b      	add	r3, r1
 8010684:	b29b      	uxth	r3, r3
 8010686:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

		bound_u_y = (int16_t) row +
 801068a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801068e:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8010690:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010694:	f003 020f 	and.w	r2, r3, #15
 8010698:	0fd3      	lsrs	r3, r2, #31
 801069a:	4413      	add	r3, r2
 801069c:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 801069e:	b29b      	uxth	r3, r3
 80106a0:	440b      	add	r3, r1
 80106a2:	b29b      	uxth	r3, r3
 80106a4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 80106a8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d133      	bne.n	8010718 <VL53LX_f_032+0x1ca>
		bound_l_x =  (2 * bound_l_x) - 15 +
 80106b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80106b4:	b29a      	uxth	r2, r3
 80106b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80106ba:	4413      	add	r3, r2
 80106bc:	b29b      	uxth	r3, r3
 80106be:	005b      	lsls	r3, r3, #1
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	3b0f      	subs	r3, #15
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 80106ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80106ce:	b29a      	uxth	r2, r3
 80106d0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80106d4:	4413      	add	r3, r2
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	005b      	lsls	r3, r3, #1
 80106da:	b29b      	uxth	r3, r3
 80106dc:	3b0f      	subs	r3, #15
 80106de:	b29b      	uxth	r3, r3
 80106e0:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 80106e4:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 80106e8:	b29a      	uxth	r2, r3
 80106ea:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80106ee:	4413      	add	r3, r2
 80106f0:	b29b      	uxth	r3, r3
 80106f2:	005b      	lsls	r3, r3, #1
 80106f4:	b29b      	uxth	r3, r3
 80106f6:	3b0f      	subs	r3, #15
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 80106fe:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 8010702:	b29a      	uxth	r2, r3
 8010704:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8010708:	4413      	add	r3, r2
 801070a:	b29b      	uxth	r3, r3
 801070c:	005b      	lsls	r3, r3, #1
 801070e:	b29b      	uxth	r3, r3
 8010710:	3b0f      	subs	r3, #15
 8010712:	b29b      	uxth	r3, r3
 8010714:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010718:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 801071c:	2b00      	cmp	r3, #0
 801071e:	f040 80cb 	bne.w	80108b8 <VL53LX_f_032+0x36a>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010722:	f9b7 0086 	ldrsh.w	r0, [r7, #134]	; 0x86
 8010726:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 801072a:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801072e:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010732:	fb02 f501 	mul.w	r5, r2, r1
 8010736:	fb00 f403 	mul.w	r4, r0, r3
 801073a:	442c      	add	r4, r5
 801073c:	fba0 8902 	umull	r8, r9, r0, r2
 8010740:	eb04 0309 	add.w	r3, r4, r9
 8010744:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010746:	f9b7 0080 	ldrsh.w	r0, [r7, #128]	; 0x80
 801074a:	ea4f 71e0 	mov.w	r1, r0, asr #31
					((int64_t)ygradient));
 801074e:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8010752:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010756:	fb02 f501 	mul.w	r5, r2, r1
 801075a:	fb00 f403 	mul.w	r4, r0, r3
 801075e:	442c      	add	r4, r5
 8010760:	fba0 2302 	umull	r2, r3, r0, r2
 8010764:	18e1      	adds	r1, r4, r3
 8010766:	460b      	mov	r3, r1
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010768:	eb18 0102 	adds.w	r1, r8, r2
 801076c:	6339      	str	r1, [r7, #48]	; 0x30
 801076e:	eb49 0303 	adc.w	r3, r9, r3
 8010772:	637b      	str	r3, [r7, #52]	; 0x34
 8010774:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8010778:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 801077c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010780:	f112 0a01 	adds.w	sl, r2, #1
 8010784:	f143 0b00 	adc.w	fp, r3, #0
 8010788:	ea4f 73db 	mov.w	r3, fp, lsr #31
 801078c:	461a      	mov	r2, r3
 801078e:	f04f 0300 	mov.w	r3, #0
 8010792:	eb12 010a 	adds.w	r1, r2, sl
 8010796:	62b9      	str	r1, [r7, #40]	; 0x28
 8010798:	eb43 030b 	adc.w	r3, r3, fp
 801079c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801079e:	f04f 0200 	mov.w	r2, #0
 80107a2:	f04f 0300 	mov.w	r3, #0
 80107a6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80107aa:	4621      	mov	r1, r4
 80107ac:	084a      	lsrs	r2, r1, #1
 80107ae:	4629      	mov	r1, r5
 80107b0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80107b4:	4629      	mov	r1, r5
 80107b6:	104b      	asrs	r3, r1, #1
 80107b8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 80107bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107be:	461a      	mov	r2, r3
 80107c0:	f04f 0300 	mov.w	r3, #0
 80107c4:	f04f 0000 	mov.w	r0, #0
 80107c8:	f04f 0100 	mov.w	r1, #0
 80107cc:	0099      	lsls	r1, r3, #2
 80107ce:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80107d2:	0090      	lsls	r0, r2, #2
 80107d4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80107d8:	1814      	adds	r4, r2, r0
 80107da:	623c      	str	r4, [r7, #32]
 80107dc:	414b      	adcs	r3, r1
 80107de:	627b      	str	r3, [r7, #36]	; 0x24
 80107e0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80107e4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80107e8:	f9b7 0084 	ldrsh.w	r0, [r7, #132]	; 0x84
 80107ec:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80107f0:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80107f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80107f8:	fb02 f501 	mul.w	r5, r2, r1
 80107fc:	fb00 f403 	mul.w	r4, r0, r3
 8010800:	442c      	add	r4, r5
 8010802:	fba0 8902 	umull	r8, r9, r0, r2
 8010806:	eb04 0309 	add.w	r3, r4, r9
 801080a:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801080c:	f9b7 0082 	ldrsh.w	r0, [r7, #130]	; 0x82
 8010810:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)ygradient));
 8010814:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8010818:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801081c:	fb02 f501 	mul.w	r5, r2, r1
 8010820:	fb00 f403 	mul.w	r4, r0, r3
 8010824:	442c      	add	r4, r5
 8010826:	fba0 2302 	umull	r2, r3, r0, r2
 801082a:	18e1      	adds	r1, r4, r3
 801082c:	460b      	mov	r3, r1
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 801082e:	eb18 0102 	adds.w	r1, r8, r2
 8010832:	61b9      	str	r1, [r7, #24]
 8010834:	eb49 0303 	adc.w	r3, r9, r3
 8010838:	61fb      	str	r3, [r7, #28]
 801083a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801083e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8010842:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010846:	1c51      	adds	r1, r2, #1
 8010848:	64b9      	str	r1, [r7, #72]	; 0x48
 801084a:	f143 0300 	adc.w	r3, r3, #0
 801084e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010850:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8010854:	462b      	mov	r3, r5
 8010856:	0fdb      	lsrs	r3, r3, #31
 8010858:	461a      	mov	r2, r3
 801085a:	f04f 0300 	mov.w	r3, #0
 801085e:	4621      	mov	r1, r4
 8010860:	1851      	adds	r1, r2, r1
 8010862:	6139      	str	r1, [r7, #16]
 8010864:	4629      	mov	r1, r5
 8010866:	eb43 0101 	adc.w	r1, r3, r1
 801086a:	6179      	str	r1, [r7, #20]
 801086c:	f04f 0200 	mov.w	r2, #0
 8010870:	f04f 0300 	mov.w	r3, #0
 8010874:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010878:	4621      	mov	r1, r4
 801087a:	084a      	lsrs	r2, r1, #1
 801087c:	4629      	mov	r1, r5
 801087e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010882:	4629      	mov	r1, r5
 8010884:	104b      	asrs	r3, r1, #1
 8010886:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 801088a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801088c:	4618      	mov	r0, r3
 801088e:	f04f 0100 	mov.w	r1, #0
 8010892:	f04f 0200 	mov.w	r2, #0
 8010896:	f04f 0300 	mov.w	r3, #0
 801089a:	008b      	lsls	r3, r1, #2
 801089c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80108a0:	0082      	lsls	r2, r0, #2
 80108a2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80108a6:	1884      	adds	r4, r0, r2
 80108a8:	60bc      	str	r4, [r7, #8]
 80108aa:	eb41 0303 	adc.w	r3, r1, r3
 80108ae:	60fb      	str	r3, [r7, #12]
 80108b0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80108b4:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 80108b8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d12e      	bne.n	801091e <VL53LX_f_032+0x3d0>
		xtalk_avg = do_division_s(
 80108c0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80108c4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80108c8:	1884      	adds	r4, r0, r2
 80108ca:	643c      	str	r4, [r7, #64]	; 0x40
 80108cc:	eb41 0303 	adc.w	r3, r1, r3
 80108d0:	647b      	str	r3, [r7, #68]	; 0x44
 80108d2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80108d6:	460b      	mov	r3, r1
 80108d8:	3301      	adds	r3, #1
 80108da:	63bb      	str	r3, [r7, #56]	; 0x38
 80108dc:	4613      	mov	r3, r2
 80108de:	f143 0300 	adc.w	r3, r3, #0
 80108e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108e4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80108e8:	462b      	mov	r3, r5
 80108ea:	0fdb      	lsrs	r3, r3, #31
 80108ec:	461a      	mov	r2, r3
 80108ee:	f04f 0300 	mov.w	r3, #0
 80108f2:	4621      	mov	r1, r4
 80108f4:	1851      	adds	r1, r2, r1
 80108f6:	6039      	str	r1, [r7, #0]
 80108f8:	4629      	mov	r1, r5
 80108fa:	eb43 0101 	adc.w	r1, r3, r1
 80108fe:	6079      	str	r1, [r7, #4]
 8010900:	f04f 0200 	mov.w	r2, #0
 8010904:	f04f 0300 	mov.w	r3, #0
 8010908:	e9d7 4500 	ldrd	r4, r5, [r7]
 801090c:	4621      	mov	r1, r4
 801090e:	084a      	lsrs	r2, r1, #1
 8010910:	4629      	mov	r1, r5
 8010912:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010916:	4629      	mov	r1, r5
 8010918:	104b      	asrs	r3, r1, #1
 801091a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 801091e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010922:	2b00      	cmp	r3, #0
 8010924:	d10b      	bne.n	801093e <VL53LX_f_032+0x3f0>
		if (xtalk_avg < 0)
 8010926:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801092a:	2a00      	cmp	r2, #0
 801092c:	f173 0300 	sbcs.w	r3, r3, #0
 8010930:	da05      	bge.n	801093e <VL53LX_f_032+0x3f0>
			xtalk_avg = 0;
 8010932:	f04f 0200 	mov.w	r2, #0
 8010936:	f04f 0300 	mov.w	r3, #0
 801093a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 801093e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010940:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010944:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8010946:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 801094a:	4618      	mov	r0, r3
 801094c:	3788      	adds	r7, #136	; 0x88
 801094e:	46bd      	mov	sp, r7
 8010950:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010954 <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8010954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010958:	b08d      	sub	sp, #52	; 0x34
 801095a:	af00      	add	r7, sp, #0
 801095c:	60f8      	str	r0, [r7, #12]
 801095e:	60b9      	str	r1, [r7, #8]
 8010960:	607a      	str	r2, [r7, #4]
 8010962:	603b      	str	r3, [r7, #0]


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 8010964:	2300      	movs	r3, #0
 8010966:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	uint64_t xtalk_events_per_spad = 0;
 801096a:	f04f 0200 	mov.w	r2, #0
 801096e:	f04f 0300 	mov.w	r3, #0
 8010972:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint64_t xtalk_total_events = 0;
 8010976:	f04f 0200 	mov.w	r2, #0
 801097a:	f04f 0300 	mov.w	r3, #0
 801097e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t xtalk_temp_bin = 0;
 8010982:	f04f 0200 	mov.w	r2, #0
 8010986:	f04f 0300 	mov.w	r3, #0
 801098a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t  i = 0;
 801098e:	2300      	movs	r3, #0
 8010990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	4618      	mov	r0, r3
 8010998:	f04f 0100 	mov.w	r1, #0
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80109a2:	461a      	mov	r2, r3
 80109a4:	f04f 0300 	mov.w	r3, #0
 80109a8:	fb02 fc01 	mul.w	ip, r2, r1
 80109ac:	fb00 f603 	mul.w	r6, r0, r3
 80109b0:	4466      	add	r6, ip
 80109b2:	fba0 2302 	umull	r2, r3, r0, r2
 80109b6:	18f1      	adds	r1, r6, r3
 80109b8:	460b      	mov	r3, r1
 80109ba:	f512 7afa 	adds.w	sl, r2, #500	; 0x1f4
 80109be:	f143 0b00 	adc.w	fp, r3, #0
 80109c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80109c6:	f04f 0300 	mov.w	r3, #0
 80109ca:	4650      	mov	r0, sl
 80109cc:	4659      	mov	r1, fp
 80109ce:	f7ef fca7 	bl	8000320 <__aeabi_uldivmod>
 80109d2:	4602      	mov	r2, r0
 80109d4:	460b      	mov	r3, r1
 80109d6:	e9c7 2306 	strd	r2, r3, [r7, #24]




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80109e0:	b29a      	uxth	r2, r3
 80109e2:	f04f 0300 	mov.w	r3, #0
	xtalk_total_events = xtalk_events_per_spad *
 80109e6:	69f9      	ldr	r1, [r7, #28]
 80109e8:	fb02 f001 	mul.w	r0, r2, r1
 80109ec:	69b9      	ldr	r1, [r7, #24]
 80109ee:	fb03 f101 	mul.w	r1, r3, r1
 80109f2:	4401      	add	r1, r0
 80109f4:	69b8      	ldr	r0, [r7, #24]
 80109f6:	fba0 2302 	umull	r2, r3, r0, r2
 80109fa:	4419      	add	r1, r3
 80109fc:	460b      	mov	r3, r1
 80109fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8010a02:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8010a06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8010a0a:	f04f 0200 	mov.w	r2, #0
 8010a0e:	f04f 0300 	mov.w	r3, #0
 8010a12:	0a02      	lsrs	r2, r0, #8
 8010a14:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010a18:	0a0b      	lsrs	r3, r1, #8
 8010a1a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8010a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010a22:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 8010a26:	f143 0900 	adc.w	r9, r3, #0
 8010a2a:	f04f 0200 	mov.w	r2, #0
 8010a2e:	f04f 0300 	mov.w	r3, #0
 8010a32:	ea4f 22d8 	mov.w	r2, r8, lsr #11
 8010a36:	ea42 5249 	orr.w	r2, r2, r9, lsl #21
 8010a3a:	ea4f 23d9 	mov.w	r3, r9, lsr #11
 8010a3e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (xtalk_total_events > 0xFFFFFFFF)
 8010a42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010a46:	2b01      	cmp	r3, #1
 8010a48:	bf08      	it	eq
 8010a4a:	2a00      	cmpeq	r2, #0
 8010a4c:	d305      	bcc.n	8010a5a <VL53LX_f_033+0x106>
		xtalk_total_events = 0xFFFFFFFF;
 8010a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8010a52:	f04f 0300 	mov.w	r3, #0
 8010a56:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010a60:	e035      	b.n	8010ace <VL53LX_f_033+0x17a>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8010a62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a66:	68ba      	ldr	r2, [r7, #8]
 8010a68:	3302      	adds	r3, #2
 8010a6a:	009b      	lsls	r3, r3, #2
 8010a6c:	4413      	add	r3, r2
 8010a6e:	685b      	ldr	r3, [r3, #4]
 8010a70:	461a      	mov	r2, r3
 8010a72:	f04f 0300 	mov.w	r3, #0
 8010a76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a78:	fb02 f001 	mul.w	r0, r2, r1
 8010a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a7e:	fb03 f101 	mul.w	r1, r3, r1
 8010a82:	4401      	add	r1, r0
 8010a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a86:	fba0 2302 	umull	r2, r3, r0, r2
 8010a8a:	4419      	add	r1, r3
 8010a8c:	460b      	mov	r3, r1
 8010a8e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8010a92:	e9c7 2304 	strd	r2, r3, [r7, #16]
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8010a96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010a9a:	f512 7400 	adds.w	r4, r2, #512	; 0x200
 8010a9e:	f143 0500 	adc.w	r5, r3, #0
 8010aa2:	f04f 0200 	mov.w	r2, #0
 8010aa6:	f04f 0300 	mov.w	r3, #0
 8010aaa:	0aa2      	lsrs	r2, r4, #10
 8010aac:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
 8010ab0:	0aab      	lsrs	r3, r5, #10
 8010ab2:	e9c7 2304 	strd	r2, r3, [r7, #16]

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8010ab6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010aba:	6939      	ldr	r1, [r7, #16]
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	3206      	adds	r2, #6
 8010ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8010ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ac8:	3301      	adds	r3, #1
 8010aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	7a9b      	ldrb	r3, [r3, #10]
 8010ad2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d3c3      	bcc.n	8010a62 <VL53LX_f_033+0x10e>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8010ada:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3734      	adds	r7, #52	; 0x34
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010ae8 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b084      	sub	sp, #16
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	60f8      	str	r0, [r7, #12]
 8010af0:	60b9      	str	r1, [r7, #8]
 8010af2:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	68db      	ldr	r3, [r3, #12]
 8010af8:	68fa      	ldr	r2, [r7, #12]
 8010afa:	8910      	ldrh	r0, [r2, #8]
 8010afc:	687a      	ldr	r2, [r7, #4]
 8010afe:	b292      	uxth	r2, r2
 8010b00:	68b9      	ldr	r1, [r7, #8]
 8010b02:	4798      	blx	r3
 8010b04:	4603      	mov	r3, r0
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3710      	adds	r7, #16
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}

08010b0e <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8010b0e:	b580      	push	{r7, lr}
 8010b10:	b084      	sub	sp, #16
 8010b12:	af00      	add	r7, sp, #0
 8010b14:	60f8      	str	r0, [r7, #12]
 8010b16:	60b9      	str	r1, [r7, #8]
 8010b18:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	691b      	ldr	r3, [r3, #16]
 8010b1e:	68fa      	ldr	r2, [r7, #12]
 8010b20:	8910      	ldrh	r0, [r2, #8]
 8010b22:	687a      	ldr	r2, [r7, #4]
 8010b24:	b292      	uxth	r2, r2
 8010b26:	68b9      	ldr	r1, [r7, #8]
 8010b28:	4798      	blx	r3
 8010b2a:	4603      	mov	r3, r0
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	3710      	adds	r7, #16
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd80      	pop	{r7, pc}

08010b34 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b086      	sub	sp, #24
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	60f8      	str	r0, [r7, #12]
 8010b3c:	607a      	str	r2, [r7, #4]
 8010b3e:	603b      	str	r3, [r7, #0]
 8010b40:	460b      	mov	r3, r1
 8010b42:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010b44:	2300      	movs	r3, #0
 8010b46:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	2bff      	cmp	r3, #255	; 0xff
 8010b4c:	d902      	bls.n	8010b54 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 8010b4e:	f06f 0303 	mvn.w	r3, #3
 8010b52:	e01d      	b.n	8010b90 <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8010b54:	897b      	ldrh	r3, [r7, #10]
 8010b56:	0a1b      	lsrs	r3, r3, #8
 8010b58:	b29b      	uxth	r3, r3
 8010b5a:	b2da      	uxtb	r2, r3
 8010b5c:	4b0e      	ldr	r3, [pc, #56]	; (8010b98 <VL53LX_WriteMulti+0x64>)
 8010b5e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010b60:	897b      	ldrh	r3, [r7, #10]
 8010b62:	b2da      	uxtb	r2, r3
 8010b64:	4b0c      	ldr	r3, [pc, #48]	; (8010b98 <VL53LX_WriteMulti+0x64>)
 8010b66:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8010b68:	683a      	ldr	r2, [r7, #0]
 8010b6a:	6879      	ldr	r1, [r7, #4]
 8010b6c:	480b      	ldr	r0, [pc, #44]	; (8010b9c <VL53LX_WriteMulti+0x68>)
 8010b6e:	f003 fa39 	bl	8013fe4 <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	3302      	adds	r3, #2
 8010b76:	461a      	mov	r2, r3
 8010b78:	4907      	ldr	r1, [pc, #28]	; (8010b98 <VL53LX_WriteMulti+0x64>)
 8010b7a:	68f8      	ldr	r0, [r7, #12]
 8010b7c:	f7ff ffb4 	bl	8010ae8 <_I2CWrite>
 8010b80:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d001      	beq.n	8010b8c <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010b88:	23f3      	movs	r3, #243	; 0xf3
 8010b8a:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 8010b8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	3718      	adds	r7, #24
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	200070e4 	.word	0x200070e4
 8010b9c:	200070e6 	.word	0x200070e6

08010ba0 <VL53LX_ReadMulti>:

VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b086      	sub	sp, #24
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	60f8      	str	r0, [r7, #12]
 8010ba8:	607a      	str	r2, [r7, #4]
 8010baa:	603b      	str	r3, [r7, #0]
 8010bac:	460b      	mov	r3, r1
 8010bae:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010bb4:	897b      	ldrh	r3, [r7, #10]
 8010bb6:	0a1b      	lsrs	r3, r3, #8
 8010bb8:	b29b      	uxth	r3, r3
 8010bba:	b2da      	uxtb	r2, r3
 8010bbc:	4b12      	ldr	r3, [pc, #72]	; (8010c08 <VL53LX_ReadMulti+0x68>)
 8010bbe:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010bc0:	897b      	ldrh	r3, [r7, #10]
 8010bc2:	b2da      	uxtb	r2, r3
 8010bc4:	4b10      	ldr	r3, [pc, #64]	; (8010c08 <VL53LX_ReadMulti+0x68>)
 8010bc6:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010bc8:	2202      	movs	r2, #2
 8010bca:	490f      	ldr	r1, [pc, #60]	; (8010c08 <VL53LX_ReadMulti+0x68>)
 8010bcc:	68f8      	ldr	r0, [r7, #12]
 8010bce:	f7ff ff8b 	bl	8010ae8 <_I2CWrite>
 8010bd2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010bd4:	693b      	ldr	r3, [r7, #16]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d002      	beq.n	8010be0 <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010bda:	23f3      	movs	r3, #243	; 0xf3
 8010bdc:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010bde:	e00c      	b.n	8010bfa <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8010be0:	683a      	ldr	r2, [r7, #0]
 8010be2:	6879      	ldr	r1, [r7, #4]
 8010be4:	68f8      	ldr	r0, [r7, #12]
 8010be6:	f7ff ff92 	bl	8010b0e <_I2CRead>
 8010bea:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d002      	beq.n	8010bf8 <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010bf2:	23f3      	movs	r3, #243	; 0xf3
 8010bf4:	75fb      	strb	r3, [r7, #23]
 8010bf6:	e000      	b.n	8010bfa <VL53LX_ReadMulti+0x5a>
    }
done:
 8010bf8:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8010bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3718      	adds	r7, #24
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
 8010c06:	bf00      	nop
 8010c08:	200070e4 	.word	0x200070e4

08010c0c <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b084      	sub	sp, #16
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	460b      	mov	r3, r1
 8010c16:	807b      	strh	r3, [r7, #2]
 8010c18:	4613      	mov	r3, r2
 8010c1a:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010c20:	887b      	ldrh	r3, [r7, #2]
 8010c22:	0a1b      	lsrs	r3, r3, #8
 8010c24:	b29b      	uxth	r3, r3
 8010c26:	b2da      	uxtb	r2, r3
 8010c28:	4b0c      	ldr	r3, [pc, #48]	; (8010c5c <VL53LX_WrByte+0x50>)
 8010c2a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010c2c:	887b      	ldrh	r3, [r7, #2]
 8010c2e:	b2da      	uxtb	r2, r3
 8010c30:	4b0a      	ldr	r3, [pc, #40]	; (8010c5c <VL53LX_WrByte+0x50>)
 8010c32:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8010c34:	4a09      	ldr	r2, [pc, #36]	; (8010c5c <VL53LX_WrByte+0x50>)
 8010c36:	787b      	ldrb	r3, [r7, #1]
 8010c38:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8010c3a:	2203      	movs	r2, #3
 8010c3c:	4907      	ldr	r1, [pc, #28]	; (8010c5c <VL53LX_WrByte+0x50>)
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f7ff ff52 	bl	8010ae8 <_I2CWrite>
 8010c44:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8010c46:	68bb      	ldr	r3, [r7, #8]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d001      	beq.n	8010c50 <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010c4c:	23f3      	movs	r3, #243	; 0xf3
 8010c4e:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8010c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3710      	adds	r7, #16
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}
 8010c5c:	200070e4 	.word	0x200070e4

08010c60 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b084      	sub	sp, #16
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
 8010c68:	460b      	mov	r3, r1
 8010c6a:	807b      	strh	r3, [r7, #2]
 8010c6c:	4613      	mov	r3, r2
 8010c6e:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010c70:	2300      	movs	r3, #0
 8010c72:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010c74:	887b      	ldrh	r3, [r7, #2]
 8010c76:	0a1b      	lsrs	r3, r3, #8
 8010c78:	b29b      	uxth	r3, r3
 8010c7a:	b2da      	uxtb	r2, r3
 8010c7c:	4b10      	ldr	r3, [pc, #64]	; (8010cc0 <VL53LX_WrWord+0x60>)
 8010c7e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010c80:	887b      	ldrh	r3, [r7, #2]
 8010c82:	b2da      	uxtb	r2, r3
 8010c84:	4b0e      	ldr	r3, [pc, #56]	; (8010cc0 <VL53LX_WrWord+0x60>)
 8010c86:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8010c88:	883b      	ldrh	r3, [r7, #0]
 8010c8a:	0a1b      	lsrs	r3, r3, #8
 8010c8c:	b29b      	uxth	r3, r3
 8010c8e:	b2da      	uxtb	r2, r3
 8010c90:	4b0b      	ldr	r3, [pc, #44]	; (8010cc0 <VL53LX_WrWord+0x60>)
 8010c92:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8010c94:	883b      	ldrh	r3, [r7, #0]
 8010c96:	b2da      	uxtb	r2, r3
 8010c98:	4b09      	ldr	r3, [pc, #36]	; (8010cc0 <VL53LX_WrWord+0x60>)
 8010c9a:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8010c9c:	2204      	movs	r2, #4
 8010c9e:	4908      	ldr	r1, [pc, #32]	; (8010cc0 <VL53LX_WrWord+0x60>)
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f7ff ff21 	bl	8010ae8 <_I2CWrite>
 8010ca6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d001      	beq.n	8010cb2 <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010cae:	23f3      	movs	r3, #243	; 0xf3
 8010cb0:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8010cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3710      	adds	r7, #16
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}
 8010cbe:	bf00      	nop
 8010cc0:	200070e4 	.word	0x200070e4

08010cc4 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b086      	sub	sp, #24
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	60f8      	str	r0, [r7, #12]
 8010ccc:	460b      	mov	r3, r1
 8010cce:	607a      	str	r2, [r7, #4]
 8010cd0:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8010cd6:	897b      	ldrh	r3, [r7, #10]
 8010cd8:	0a1b      	lsrs	r3, r3, #8
 8010cda:	b29b      	uxth	r3, r3
 8010cdc:	b2da      	uxtb	r2, r3
 8010cde:	4b12      	ldr	r3, [pc, #72]	; (8010d28 <VL53LX_RdByte+0x64>)
 8010ce0:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8010ce2:	897b      	ldrh	r3, [r7, #10]
 8010ce4:	b2da      	uxtb	r2, r3
 8010ce6:	4b10      	ldr	r3, [pc, #64]	; (8010d28 <VL53LX_RdByte+0x64>)
 8010ce8:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010cea:	2202      	movs	r2, #2
 8010cec:	490e      	ldr	r1, [pc, #56]	; (8010d28 <VL53LX_RdByte+0x64>)
 8010cee:	68f8      	ldr	r0, [r7, #12]
 8010cf0:	f7ff fefa 	bl	8010ae8 <_I2CWrite>
 8010cf4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d002      	beq.n	8010d02 <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010cfc:	23f3      	movs	r3, #243	; 0xf3
 8010cfe:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010d00:	e00c      	b.n	8010d1c <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8010d02:	2201      	movs	r2, #1
 8010d04:	6879      	ldr	r1, [r7, #4]
 8010d06:	68f8      	ldr	r0, [r7, #12]
 8010d08:	f7ff ff01 	bl	8010b0e <_I2CRead>
 8010d0c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010d0e:	693b      	ldr	r3, [r7, #16]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d002      	beq.n	8010d1a <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010d14:	23f3      	movs	r3, #243	; 0xf3
 8010d16:	75fb      	strb	r3, [r7, #23]
 8010d18:	e000      	b.n	8010d1c <VL53LX_RdByte+0x58>
    }
done:
 8010d1a:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8010d1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d20:	4618      	mov	r0, r3
 8010d22:	3718      	adds	r7, #24
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}
 8010d28:	200070e4 	.word	0x200070e4

08010d2c <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b086      	sub	sp, #24
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	60f8      	str	r0, [r7, #12]
 8010d34:	460b      	mov	r3, r1
 8010d36:	607a      	str	r2, [r7, #4]
 8010d38:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010d3e:	897b      	ldrh	r3, [r7, #10]
 8010d40:	0a1b      	lsrs	r3, r3, #8
 8010d42:	b29b      	uxth	r3, r3
 8010d44:	b2da      	uxtb	r2, r3
 8010d46:	4b18      	ldr	r3, [pc, #96]	; (8010da8 <VL53LX_RdWord+0x7c>)
 8010d48:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8010d4a:	897b      	ldrh	r3, [r7, #10]
 8010d4c:	b2da      	uxtb	r2, r3
 8010d4e:	4b16      	ldr	r3, [pc, #88]	; (8010da8 <VL53LX_RdWord+0x7c>)
 8010d50:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010d52:	2202      	movs	r2, #2
 8010d54:	4914      	ldr	r1, [pc, #80]	; (8010da8 <VL53LX_RdWord+0x7c>)
 8010d56:	68f8      	ldr	r0, [r7, #12]
 8010d58:	f7ff fec6 	bl	8010ae8 <_I2CWrite>
 8010d5c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8010d5e:	693b      	ldr	r3, [r7, #16]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d002      	beq.n	8010d6a <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010d64:	23f3      	movs	r3, #243	; 0xf3
 8010d66:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010d68:	e017      	b.n	8010d9a <VL53LX_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8010d6a:	2202      	movs	r2, #2
 8010d6c:	490e      	ldr	r1, [pc, #56]	; (8010da8 <VL53LX_RdWord+0x7c>)
 8010d6e:	68f8      	ldr	r0, [r7, #12]
 8010d70:	f7ff fecd 	bl	8010b0e <_I2CRead>
 8010d74:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d002      	beq.n	8010d82 <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010d7c:	23f3      	movs	r3, #243	; 0xf3
 8010d7e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010d80:	e00b      	b.n	8010d9a <VL53LX_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8010d82:	4b09      	ldr	r3, [pc, #36]	; (8010da8 <VL53LX_RdWord+0x7c>)
 8010d84:	781b      	ldrb	r3, [r3, #0]
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	021b      	lsls	r3, r3, #8
 8010d8a:	b29a      	uxth	r2, r3
 8010d8c:	4b06      	ldr	r3, [pc, #24]	; (8010da8 <VL53LX_RdWord+0x7c>)
 8010d8e:	785b      	ldrb	r3, [r3, #1]
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	4413      	add	r3, r2
 8010d94:	b29a      	uxth	r2, r3
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 8010d9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	3718      	adds	r7, #24
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	200070e4 	.word	0x200070e4

08010dac <VL53LX_GetTickCount>:
    VL53LX_PutI2cBus();
    return Status;
}

VL53LX_Error VL53LX_GetTickCount(VL53LX_DEV Dev, uint32_t *ptick_count_ms)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
 8010db4:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 8010db6:	2300      	movs	r3, #0
 8010db8:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	695b      	ldr	r3, [r3, #20]
 8010dbe:	4798      	blx	r3
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	461a      	mov	r2, r3
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8010dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3710      	adds	r7, #16
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}

08010dd4 <VL53LX_WaitMs>:
	
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitMs(VL53LX_DEV Dev, int32_t wait_ms){
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b082      	sub	sp, #8
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_ms);
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	4619      	mov	r1, r3
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	f000 f8b8 	bl	8010f58 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8010de8:	2300      	movs	r3, #0
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	3708      	adds	r7, #8
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd80      	pop	{r7, pc}
	...

08010df4 <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_DEV Dev, int32_t wait_us){
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_us/1000);
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	4a07      	ldr	r2, [pc, #28]	; (8010e20 <VL53LX_WaitUs+0x2c>)
 8010e02:	fb82 1203 	smull	r1, r2, r2, r3
 8010e06:	1192      	asrs	r2, r2, #6
 8010e08:	17db      	asrs	r3, r3, #31
 8010e0a:	1ad3      	subs	r3, r2, r3
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f000 f8a2 	bl	8010f58 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8010e14:	2300      	movs	r3, #0
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	3708      	adds	r7, #8
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}
 8010e1e:	bf00      	nop
 8010e20:	10624dd3 	.word	0x10624dd3

08010e24 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8010e24:	b590      	push	{r4, r7, lr}
 8010e26:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	f107 040c 	add.w	r4, r7, #12
 8010e30:	6020      	str	r0, [r4, #0]
 8010e32:	f107 0008 	add.w	r0, r7, #8
 8010e36:	6001      	str	r1, [r0, #0]
 8010e38:	4619      	mov	r1, r3
 8010e3a:	1dbb      	adds	r3, r7, #6
 8010e3c:	801a      	strh	r2, [r3, #0]
 8010e3e:	1d7b      	adds	r3, r7, #5
 8010e40:	460a      	mov	r2, r1
 8010e42:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8010e44:	2300      	movs	r3, #0
 8010e46:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8010e50:	2300      	movs	r3, #0
 8010e52:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8010e56:	2300      	movs	r3, #0
 8010e58:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8010e62:	2300      	movs	r3, #0
 8010e64:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 8010e68:	f107 0310 	add.w	r3, r7, #16
 8010e6c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010e70:	4938      	ldr	r1, [pc, #224]	; (8010f54 <VL53LX_WaitValueMaskEx+0x130>)
 8010e72:	4618      	mov	r0, r3
 8010e74:	f003 f95a 	bl	801412c <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(Dev, &start_time_ms);
 8010e78:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8010e7c:	f107 030c 	add.w	r3, r7, #12
 8010e80:	4611      	mov	r1, r2
 8010e82:	6818      	ldr	r0, [r3, #0]
 8010e84:	f7ff ff92 	bl	8010dac <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 8010e88:	e042      	b.n	8010f10 <VL53LX_WaitValueMaskEx+0xec>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 8010e8a:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d10b      	bne.n	8010eaa <VL53LX_WaitValueMaskEx+0x86>
			status = VL53LX_RdByte(
 8010e92:	f207 2213 	addw	r2, r7, #531	; 0x213
 8010e96:	1dbb      	adds	r3, r7, #6
 8010e98:	8819      	ldrh	r1, [r3, #0]
 8010e9a:	f107 030c 	add.w	r3, r7, #12
 8010e9e:	6818      	ldr	r0, [r3, #0]
 8010ea0:	f7ff ff10 	bl	8010cc4 <VL53LX_RdByte>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8010eaa:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8010eae:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8010eb2:	4013      	ands	r3, r2
 8010eb4:	b2db      	uxtb	r3, r3
 8010eb6:	1d7a      	adds	r2, r7, #5
 8010eb8:	7812      	ldrb	r2, [r2, #0]
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d102      	bne.n	8010ec4 <VL53LX_WaitValueMaskEx+0xa0>
			found = 1;
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 8010ec4:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d112      	bne.n	8010ef2 <VL53LX_WaitValueMaskEx+0xce>
 8010ecc:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d10e      	bne.n	8010ef2 <VL53LX_WaitValueMaskEx+0xce>
			found == 0 &&
 8010ed4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d00a      	beq.n	8010ef2 <VL53LX_WaitValueMaskEx+0xce>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 8010edc:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8010ee0:	f107 030c 	add.w	r3, r7, #12
 8010ee4:	4611      	mov	r1, r2
 8010ee6:	6818      	ldr	r0, [r3, #0]
 8010ee8:	f7ff ff74 	bl	8010dd4 <VL53LX_WaitMs>
 8010eec:	4603      	mov	r3, r0
 8010eee:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(Dev, &current_time_ms);
 8010ef2:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8010ef6:	f107 030c 	add.w	r3, r7, #12
 8010efa:	4611      	mov	r1, r2
 8010efc:	6818      	ldr	r0, [r3, #0]
 8010efe:	f7ff ff55 	bl	8010dac <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8010f02:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8010f06:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8010f0a:	1ad3      	subs	r3, r2, r3
 8010f0c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53LX_ERROR_NONE) &&
 8010f10:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d10a      	bne.n	8010f2e <VL53LX_WaitValueMaskEx+0x10a>
 8010f18:	f107 0308 	add.w	r3, r7, #8
 8010f1c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d203      	bcs.n	8010f2e <VL53LX_WaitValueMaskEx+0x10a>
		   (polling_time_ms < timeout_ms) &&
 8010f26:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d0ad      	beq.n	8010e8a <VL53LX_WaitValueMaskEx+0x66>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 8010f2e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d106      	bne.n	8010f44 <VL53LX_WaitValueMaskEx+0x120>
 8010f36:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d102      	bne.n	8010f44 <VL53LX_WaitValueMaskEx+0x120>
		status = VL53LX_ERROR_TIME_OUT;
 8010f3e:	23f9      	movs	r3, #249	; 0xf9
 8010f40:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8010f44:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd90      	pop	{r4, r7, pc}
 8010f52:	bf00      	nop
 8010f54:	080150ac 	.word	0x080150ac

08010f58 <VL53LX_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53LX_Error
  */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b084      	sub	sp, #16
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
 8010f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	695b      	ldr	r3, [r3, #20]
 8010f66:	4798      	blx	r3
 8010f68:	4603      	mov	r3, r0
 8010f6a:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8010f6c:	bf00      	nop
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	695b      	ldr	r3, [r3, #20]
 8010f72:	4798      	blx	r3
 8010f74:	4603      	mov	r3, r0
 8010f76:	461a      	mov	r2, r3
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	1ad3      	subs	r3, r2, r3
 8010f7c:	683a      	ldr	r2, [r7, #0]
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d8f5      	bhi.n	8010f6e <VL53LX_Delay+0x16>
  {
  }

  return VL53LX_ERROR_NONE;
 8010f82:	2300      	movs	r3, #0
}
 8010f84:	4618      	mov	r0, r3
 8010f86:	3710      	adds	r7, #16
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}

08010f8c <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b08c      	sub	sp, #48	; 0x30
 8010f90:	af06      	add	r7, sp, #24
 8010f92:	60f8      	str	r0, [r7, #12]
 8010f94:	60b9      	str	r1, [r7, #8]
 8010f96:	607a      	str	r2, [r7, #4]
 8010f98:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 8010f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa0:	9304      	str	r3, [sp, #16]
 8010fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fa4:	9303      	str	r3, [sp, #12]
 8010fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa8:	9302      	str	r3, [sp, #8]
 8010faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fac:	9301      	str	r3, [sp, #4]
 8010fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb0:	9300      	str	r3, [sp, #0]
 8010fb2:	6a3b      	ldr	r3, [r7, #32]
 8010fb4:	683a      	ldr	r2, [r7, #0]
 8010fb6:	6879      	ldr	r1, [r7, #4]
 8010fb8:	68b8      	ldr	r0, [r7, #8]
 8010fba:	f7fd f98c 	bl	800e2d6 <VL53LX_hist_process_data>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8010fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	3718      	adds	r7, #24
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}

08010fce <VL53L3CX_RegisterBusIO>:
  * @param pObj    vl53l3cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_RegisterBusIO(VL53L3CX_Object_t *pObj, VL53L3CX_IO_t *pIO)
{
 8010fce:	b580      	push	{r7, lr}
 8010fd0:	b084      	sub	sp, #16
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	6078      	str	r0, [r7, #4]
 8010fd6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d103      	bne.n	8010fe6 <VL53L3CX_RegisterBusIO+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8010fde:	f06f 0301 	mvn.w	r3, #1
 8010fe2:	60fb      	str	r3, [r7, #12]
 8010fe4:	e023      	b.n	801102e <VL53L3CX_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	681a      	ldr	r2, [r3, #0]
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	685a      	ldr	r2, [r3, #4]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	891a      	ldrh	r2, [r3, #8]
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	68da      	ldr	r2, [r3, #12]
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8011006:	683b      	ldr	r3, [r7, #0]
 8011008:	691a      	ldr	r2, [r3, #16]
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	695a      	ldr	r2, [r3, #20]
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d004      	beq.n	8011028 <VL53L3CX_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	4798      	blx	r3
 8011024:	60f8      	str	r0, [r7, #12]
 8011026:	e002      	b.n	801102e <VL53L3CX_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L3CX_ERROR;
 8011028:	f04f 33ff 	mov.w	r3, #4294967295
 801102c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 801102e:	68fb      	ldr	r3, [r7, #12]
}
 8011030:	4618      	mov	r0, r3
 8011032:	3710      	adds	r7, #16
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <VL53L3CX_Init>:
  * @brief Initializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Init(VL53L3CX_Object_t *pObj)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b084      	sub	sp, #16
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011046:	3328      	adds	r3, #40	; 0x28
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d003      	beq.n	8011056 <VL53L3CX_Init+0x1e>
  {
    ret =  VL53L3CX_ERROR;
 801104e:	f04f 33ff 	mov.w	r3, #4294967295
 8011052:	60fb      	str	r3, [r7, #12]
 8011054:	e043      	b.n	80110de <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_WaitDeviceBooted(pObj) != VL53LX_ERROR_NONE)
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f7f0 fcb8 	bl	80019cc <VL53LX_WaitDeviceBooted>
 801105c:	4603      	mov	r3, r0
 801105e:	2b00      	cmp	r3, #0
 8011060:	d003      	beq.n	801106a <VL53L3CX_Init+0x32>
  {
    ret =  VL53L3CX_ERROR;
 8011062:	f04f 33ff 	mov.w	r3, #4294967295
 8011066:	60fb      	str	r3, [r7, #12]
 8011068:	e039      	b.n	80110de <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_DataInit(pObj) != VL53LX_ERROR_NONE)
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f7f0 fc53 	bl	8001916 <VL53LX_DataInit>
 8011070:	4603      	mov	r3, r0
 8011072:	2b00      	cmp	r3, #0
 8011074:	d003      	beq.n	801107e <VL53L3CX_Init+0x46>
  {
    ret = VL53L3CX_ERROR;
 8011076:	f04f 33ff 	mov.w	r3, #4294967295
 801107a:	60fb      	str	r3, [r7, #12]
 801107c:	e02f      	b.n	80110de <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_PerformRefSpadManagement(pObj) != VL53LX_ERROR_NONE)
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f7f1 fb46 	bl	8002710 <VL53LX_PerformRefSpadManagement>
 8011084:	4603      	mov	r3, r0
 8011086:	2b00      	cmp	r3, #0
 8011088:	d003      	beq.n	8011092 <VL53L3CX_Init+0x5a>
  {
    ret = VL53L3CX_ERROR;
 801108a:	f04f 33ff 	mov.w	r3, #4294967295
 801108e:	60fb      	str	r3, [r7, #12]
 8011090:	e025      	b.n	80110de <VL53L3CX_Init+0xa6>
  }
  else
  {
    pObj->IsRanging = 0;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011098:	3329      	adds	r3, #41	; 0x29
 801109a:	2200      	movs	r2, #0
 801109c:	701a      	strb	r2, [r3, #0]
    pObj->IsBlocking = 0;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80110a4:	332a      	adds	r3, #42	; 0x2a
 80110a6:	2200      	movs	r2, #0
 80110a8:	701a      	strb	r2, [r3, #0]
    pObj->IsContinuous = 0;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80110b0:	332b      	adds	r3, #43	; 0x2b
 80110b2:	2200      	movs	r2, #0
 80110b4:	701a      	strb	r2, [r3, #0]
    pObj->IsAmbientEnabled = 0;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80110bc:	332c      	adds	r3, #44	; 0x2c
 80110be:	2200      	movs	r2, #0
 80110c0:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = 0;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80110c8:	332d      	adds	r3, #45	; 0x2d
 80110ca:	2200      	movs	r2, #0
 80110cc:	701a      	strb	r2, [r3, #0]
    pObj->IsInitialized = 1;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80110d4:	3328      	adds	r3, #40	; 0x28
 80110d6:	2201      	movs	r2, #1
 80110d8:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 80110da:	2300      	movs	r3, #0
 80110dc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80110de:	68fb      	ldr	r3, [r7, #12]
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	3710      	adds	r7, #16
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}

080110e8 <VL53L3CX_DeInit>:
  * @brief Deinitializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_DeInit(VL53L3CX_Object_t *pObj)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b084      	sub	sp, #16
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L3CX_ERROR;
 80110f0:	f04f 33ff 	mov.w	r3, #4294967295
 80110f4:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80110fc:	3328      	adds	r3, #40	; 0x28
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	2b01      	cmp	r3, #1
 8011102:	d111      	bne.n	8011128 <VL53L3CX_DeInit+0x40>
  {
    /* De-initialize the vl53l3cx interface */
    if (pObj->IO.DeInit() != 0)
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	685b      	ldr	r3, [r3, #4]
 8011108:	4798      	blx	r3
 801110a:	4603      	mov	r3, r0
 801110c:	2b00      	cmp	r3, #0
 801110e:	d003      	beq.n	8011118 <VL53L3CX_DeInit+0x30>
    {
      ret = VL53L3CX_ERROR;
 8011110:	f04f 33ff 	mov.w	r3, #4294967295
 8011114:	60fb      	str	r3, [r7, #12]
 8011116:	e007      	b.n	8011128 <VL53L3CX_DeInit+0x40>
    }
    else
    {
      ret = VL53L3CX_OK;
 8011118:	2300      	movs	r3, #0
 801111a:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011122:	3328      	adds	r3, #40	; 0x28
 8011124:	2200      	movs	r2, #0
 8011126:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8011128:	68fb      	ldr	r3, [r7, #12]
}
 801112a:	4618      	mov	r0, r3
 801112c:	3710      	adds	r7, #16
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}

08011132 <VL53L3CX_ReadID>:
  * @param pObj    vl53l3cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ReadID(VL53L3CX_Object_t *pObj, uint32_t *pId)
{
 8011132:	b580      	push	{r7, lr}
 8011134:	b084      	sub	sp, #16
 8011136:	af00      	add	r7, sp, #0
 8011138:	6078      	str	r0, [r7, #4]
 801113a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d002      	beq.n	8011148 <VL53L3CX_ReadID+0x16>
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d103      	bne.n	8011150 <VL53L3CX_ReadID+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011148:	f06f 0301 	mvn.w	r3, #1
 801114c:	60fb      	str	r3, [r7, #12]
 801114e:	e00a      	b.n	8011166 <VL53L3CX_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	2200      	movs	r2, #0
 8011154:	601a      	str	r2, [r3, #0]
    ret = VL53LX_RdWord(pObj, VL53L3CX_ID_REG, (uint16_t *) pId);
 8011156:	683a      	ldr	r2, [r7, #0]
 8011158:	f240 110f 	movw	r1, #271	; 0x10f
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f7ff fde5 	bl	8010d2c <VL53LX_RdWord>
 8011162:	4603      	mov	r3, r0
 8011164:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011166:	68fb      	ldr	r3, [r7, #12]
}
 8011168:	4618      	mov	r0, r3
 801116a:	3710      	adds	r7, #16
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}

08011170 <VL53L3CX_GetCapabilities>:
  * @param pObj    vl53l3cx context object.
  * @param pCap    Pointer to the vl53l3cx capabilities.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetCapabilities(VL53L3CX_Object_t *pObj, VL53L3CX_Capabilities_t *pCap)
{
 8011170:	b480      	push	{r7}
 8011172:	b085      	sub	sp, #20
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d002      	beq.n	8011186 <VL53L3CX_GetCapabilities+0x16>
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d103      	bne.n	801118e <VL53L3CX_GetCapabilities+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011186:	f06f 0301 	mvn.w	r3, #1
 801118a:	60fb      	str	r3, [r7, #12]
 801118c:	e00d      	b.n	80111aa <VL53L3CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	2201      	movs	r2, #1
 8011192:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L3CX_NB_TARGET_PER_ZONE;
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	2204      	movs	r2, #4
 8011198:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	2201      	movs	r2, #1
 801119e:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	2200      	movs	r2, #0
 80111a4:	60da      	str	r2, [r3, #12]

    ret = VL53L3CX_OK;
 80111a6:	2300      	movs	r3, #0
 80111a8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80111aa:	68fb      	ldr	r3, [r7, #12]
}
 80111ac:	4618      	mov	r0, r3
 80111ae:	3714      	adds	r7, #20
 80111b0:	46bd      	mov	sp, r7
 80111b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b6:	4770      	bx	lr

080111b8 <VL53L3CX_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L3CX the profile corresponds to the distance modes.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigProfile(VL53L3CX_Object_t *pObj, VL53L3CX_ProfileConfig_t *pConfig)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b084      	sub	sp, #16
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
 80111c0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d009      	beq.n	80111dc <VL53L3CX_ConfigProfile+0x24>
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d006      	beq.n	80111dc <VL53L3CX_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L3CX_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 80111d4:	7afb      	ldrb	r3, [r7, #11]
 80111d6:	2b01      	cmp	r3, #1
 80111d8:	d103      	bne.n	80111e2 <VL53L3CX_ConfigProfile+0x2a>
 80111da:	e00c      	b.n	80111f6 <VL53L3CX_ConfigProfile+0x3e>
    return VL53L3CX_INVALID_PARAM;
 80111dc:	f06f 0301 	mvn.w	r3, #1
 80111e0:	e043      	b.n	801126a <VL53L3CX_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 80111e2:	7afb      	ldrb	r3, [r7, #11]
 80111e4:	2b02      	cmp	r3, #2
 80111e6:	d006      	beq.n	80111f6 <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_MEDIUM) &&
 80111e8:	7afb      	ldrb	r3, [r7, #11]
 80111ea:	2b03      	cmp	r3, #3
 80111ec:	d003      	beq.n	80111f6 <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_LONG))
  {
    ret = VL53L3CX_INVALID_PARAM;
 80111ee:	f06f 0301 	mvn.w	r3, #1
 80111f2:	60fb      	str	r3, [r7, #12]
 80111f4:	e038      	b.n	8011268 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetDistanceMode(pObj, ranging_profile) != VL53LX_ERROR_NONE)
 80111f6:	7afb      	ldrb	r3, [r7, #11]
 80111f8:	4619      	mov	r1, r3
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f7f0 fcc9 	bl	8001b92 <VL53LX_SetDistanceMode>
 8011200:	4603      	mov	r3, r0
 8011202:	2b00      	cmp	r3, #0
 8011204:	d003      	beq.n	801120e <VL53L3CX_ConfigProfile+0x56>
  {
    ret = VL53L3CX_ERROR;
 8011206:	f04f 33ff 	mov.w	r3, #4294967295
 801120a:	60fb      	str	r3, [r7, #12]
 801120c:	e02c      	b.n	8011268 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53LX_ERROR_NONE)
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	685b      	ldr	r3, [r3, #4]
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
 8011212:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011216:	fb02 f303 	mul.w	r3, r2, r3
 801121a:	4619      	mov	r1, r3
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f7f0 fd1f 	bl	8001c60 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8011222:	4603      	mov	r3, r0
 8011224:	2b00      	cmp	r3, #0
 8011226:	d003      	beq.n	8011230 <VL53L3CX_ConfigProfile+0x78>
  {
    ret = VL53L3CX_ERROR;
 8011228:	f04f 33ff 	mov.w	r3, #4294967295
 801122c:	60fb      	str	r3, [r7, #12]
 801122e:	e01b      	b.n	8011268 <VL53L3CX_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	68db      	ldr	r3, [r3, #12]
 8011234:	2b00      	cmp	r3, #0
 8011236:	bf14      	ite	ne
 8011238:	2301      	movne	r3, #1
 801123a:	2300      	moveq	r3, #0
 801123c:	b2db      	uxtb	r3, r3
 801123e:	461a      	mov	r2, r3
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011246:	332c      	adds	r3, #44	; 0x2c
 8011248:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	691b      	ldr	r3, [r3, #16]
 801124e:	2b00      	cmp	r3, #0
 8011250:	bf14      	ite	ne
 8011252:	2301      	movne	r3, #1
 8011254:	2300      	moveq	r3, #0
 8011256:	b2db      	uxtb	r3, r3
 8011258:	461a      	mov	r2, r3
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011260:	332d      	adds	r3, #45	; 0x2d
 8011262:	701a      	strb	r2, [r3, #0]

    ret = VL53L3CX_OK;
 8011264:	2300      	movs	r3, #0
 8011266:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011268:	68fb      	ldr	r3, [r7, #12]
}
 801126a:	4618      	mov	r0, r3
 801126c:	3710      	adds	r7, #16
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}

08011272 <VL53L3CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigROI(VL53L3CX_Object_t *pObj, VL53L3CX_ROIConfig_t *pROIConfig)
{
 8011272:	b580      	push	{r7, lr}
 8011274:	b084      	sub	sp, #16
 8011276:	af00      	add	r7, sp, #0
 8011278:	6078      	str	r0, [r7, #4]
 801127a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53LX_UserRoi_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d002      	beq.n	8011288 <VL53L3CX_ConfigROI+0x16>
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d103      	bne.n	8011290 <VL53L3CX_ConfigROI+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011288:	f06f 0301 	mvn.w	r3, #1
 801128c:	60fb      	str	r3, [r7, #12]
 801128e:	e01a      	b.n	80112c6 <VL53L3CX_ConfigROI+0x54>
  }
  else
  {
    roi_settings.BotRightX = pROIConfig->BotRightX;
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	789b      	ldrb	r3, [r3, #2]
 8011294:	72bb      	strb	r3, [r7, #10]
    roi_settings.BotRightY = pROIConfig->BotRightY;
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	78db      	ldrb	r3, [r3, #3]
 801129a:	72fb      	strb	r3, [r7, #11]
    roi_settings.TopLeftX = pROIConfig->TopLeftX;
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	723b      	strb	r3, [r7, #8]
    roi_settings.TopLeftY = pROIConfig->TopLeftY;
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	785b      	ldrb	r3, [r3, #1]
 80112a6:	727b      	strb	r3, [r7, #9]

    if (VL53LX_SetUserROI(pObj, &roi_settings) != VL53LX_ERROR_NONE)
 80112a8:	f107 0308 	add.w	r3, r7, #8
 80112ac:	4619      	mov	r1, r3
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f7f0 fd4e 	bl	8001d50 <VL53LX_SetUserROI>
 80112b4:	4603      	mov	r3, r0
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d003      	beq.n	80112c2 <VL53L3CX_ConfigROI+0x50>
    {
      ret = VL53L3CX_ERROR;
 80112ba:	f04f 33ff 	mov.w	r3, #4294967295
 80112be:	60fb      	str	r3, [r7, #12]
 80112c0:	e001      	b.n	80112c6 <VL53L3CX_ConfigROI+0x54>
    }
    else
    {
      ret = VL53L3CX_OK;
 80112c2:	2300      	movs	r3, #0
 80112c4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80112c6:	68fb      	ldr	r3, [r7, #12]
}
 80112c8:	4618      	mov	r0, r3
 80112ca:	3710      	adds	r7, #16
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}

080112d0 <VL53L3CX_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigIT(VL53L3CX_Object_t *pObj, VL53L3CX_ITConfig_t *pITConfig)
{
 80112d0:	b480      	push	{r7}
 80112d2:	b083      	sub	sp, #12
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
 80112d8:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L3CX_NOT_IMPLEMENTED;
 80112da:	f06f 0303 	mvn.w	r3, #3
}
 80112de:	4618      	mov	r0, r3
 80112e0:	370c      	adds	r7, #12
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr

080112ea <VL53L3CX_GetDistance>:
  * @param pObj    vl53l3cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetDistance(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 80112ea:	b580      	push	{r7, lr}
 80112ec:	b084      	sub	sp, #16
 80112ee:	af00      	add	r7, sp, #0
 80112f0:	6078      	str	r0, [r7, #4]
 80112f2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d002      	beq.n	8011300 <VL53L3CX_GetDistance+0x16>
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d103      	bne.n	8011308 <VL53L3CX_GetDistance+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011300:	f06f 0301 	mvn.w	r3, #1
 8011304:	60fb      	str	r3, [r7, #12]
 8011306:	e01d      	b.n	8011344 <VL53L3CX_GetDistance+0x5a>
  }
  else if (pObj->IsRanging == 0U)
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801130e:	3329      	adds	r3, #41	; 0x29
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d103      	bne.n	801131e <VL53L3CX_GetDistance+0x34>
  {
    ret = VL53L3CX_ERROR;
 8011316:	f04f 33ff 	mov.w	r3, #4294967295
 801131a:	60fb      	str	r3, [r7, #12]
 801131c:	e012      	b.n	8011344 <VL53L3CX_GetDistance+0x5a>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011324:	332a      	adds	r3, #42	; 0x2a
 8011326:	781b      	ldrb	r3, [r3, #0]
 8011328:	2b01      	cmp	r3, #1
 801132a:	d106      	bne.n	801133a <VL53L3CX_GetDistance+0x50>
    {
      ret = vl53l3cx_poll_for_measurement(pObj, V53L3CX_POLL_TIMEOUT);
 801132c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011330:	6878      	ldr	r0, [r7, #4]
 8011332:	f000 f92b 	bl	801158c <vl53l3cx_poll_for_measurement>
 8011336:	60f8      	str	r0, [r7, #12]
 8011338:	e004      	b.n	8011344 <VL53L3CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l3cx_poll_for_measurement(pObj, 0U);
 801133a:	2100      	movs	r1, #0
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	f000 f925 	bl	801158c <vl53l3cx_poll_for_measurement>
 8011342:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L3CX_OK)
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d119      	bne.n	801137e <VL53L3CX_GetDistance+0x94>
  {
    /* retrieve measurements and fill result structure */
    if (vl53l3cx_get_result(pObj, pResult) != VL53L3CX_OK)
 801134a:	6839      	ldr	r1, [r7, #0]
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f000 f94b 	bl	80115e8 <vl53l3cx_get_result>
 8011352:	4603      	mov	r3, r0
 8011354:	2b00      	cmp	r3, #0
 8011356:	d003      	beq.n	8011360 <VL53L3CX_GetDistance+0x76>
    {
      ret = VL53L3CX_ERROR;
 8011358:	f04f 33ff 	mov.w	r3, #4294967295
 801135c:	60fb      	str	r3, [r7, #12]
 801135e:	e00e      	b.n	801137e <VL53L3CX_GetDistance+0x94>
    }
    else if (pObj->IsContinuous == 1U)
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011366:	332b      	adds	r3, #43	; 0x2b
 8011368:	781b      	ldrb	r3, [r3, #0]
 801136a:	2b01      	cmp	r3, #1
 801136c:	d105      	bne.n	801137a <VL53L3CX_GetDistance+0x90>
    {
      /* trigger new measurement if device configured in continuous mode */
      ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f7f0 fdbe 	bl	8001ef0 <VL53LX_ClearInterruptAndStartMeasurement>
 8011374:	4603      	mov	r3, r0
 8011376:	60fb      	str	r3, [r7, #12]
 8011378:	e001      	b.n	801137e <VL53L3CX_GetDistance+0x94>
    }
    else
    {
      ret = VL53L3CX_OK;
 801137a:	2300      	movs	r3, #0
 801137c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 801137e:	68fb      	ldr	r3, [r7, #12]
}
 8011380:	4618      	mov	r0, r3
 8011382:	3710      	adds	r7, #16
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}

08011388 <VL53L3CX_Start>:
  * @param pObj    vl53l3cx context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Start(VL53L3CX_Object_t *pObj, uint32_t Mode)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b084      	sub	sp, #16
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
 8011390:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d103      	bne.n	80113a0 <VL53L3CX_Start+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011398:	f06f 0301 	mvn.w	r3, #1
 801139c:	60fb      	str	r3, [r7, #12]
 801139e:	e068      	b.n	8011472 <VL53L3CX_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80113a6:	3329      	adds	r3, #41	; 0x29
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	2b01      	cmp	r3, #1
 80113ac:	d103      	bne.n	80113b6 <VL53L3CX_Start+0x2e>
  {
    ret = VL53L3CX_ERROR;
 80113ae:	f04f 33ff 	mov.w	r3, #4294967295
 80113b2:	60fb      	str	r3, [r7, #12]
 80113b4:	e05d      	b.n	8011472 <VL53L3CX_Start+0xea>
  }
  else if (VL53LX_StartMeasurement(pObj) == VL53LX_ERROR_NONE)
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f7f0 fd38 	bl	8001e2c <VL53LX_StartMeasurement>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d154      	bne.n	801146c <VL53L3CX_Start+0xe4>
  {
    pObj->IsRanging = 1;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80113c8:	3329      	adds	r3, #41	; 0x29
 80113ca:	2201      	movs	r2, #1
 80113cc:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 80113ce:	2300      	movs	r3, #0
 80113d0:	60fb      	str	r3, [r7, #12]
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	3b01      	subs	r3, #1
 80113d6:	2b03      	cmp	r3, #3
 80113d8:	d83e      	bhi.n	8011458 <VL53L3CX_Start+0xd0>
 80113da:	a201      	add	r2, pc, #4	; (adr r2, 80113e0 <VL53L3CX_Start+0x58>)
 80113dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113e0:	080113f1 	.word	0x080113f1
 80113e4:	0801140b 	.word	0x0801140b
 80113e8:	08011425 	.word	0x08011425
 80113ec:	0801143f 	.word	0x0801143f

    switch (Mode)
    {
    case VL53L3CX_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80113f6:	332b      	adds	r3, #43	; 0x2b
 80113f8:	2201      	movs	r2, #1
 80113fa:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011402:	332a      	adds	r3, #42	; 0x2a
 8011404:	2201      	movs	r2, #1
 8011406:	701a      	strb	r2, [r3, #0]
      break;
 8011408:	e033      	b.n	8011472 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011410:	332b      	adds	r3, #43	; 0x2b
 8011412:	2200      	movs	r2, #0
 8011414:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801141c:	332a      	adds	r3, #42	; 0x2a
 801141e:	2201      	movs	r2, #1
 8011420:	701a      	strb	r2, [r3, #0]
      break;
 8011422:	e026      	b.n	8011472 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801142a:	332b      	adds	r3, #43	; 0x2b
 801142c:	2201      	movs	r2, #1
 801142e:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011436:	332a      	adds	r3, #42	; 0x2a
 8011438:	2200      	movs	r2, #0
 801143a:	701a      	strb	r2, [r3, #0]
      break;
 801143c:	e019      	b.n	8011472 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011444:	332b      	adds	r3, #43	; 0x2b
 8011446:	2200      	movs	r2, #0
 8011448:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011450:	332a      	adds	r3, #42	; 0x2a
 8011452:	2200      	movs	r2, #0
 8011454:	701a      	strb	r2, [r3, #0]
      break;
 8011456:	e00c      	b.n	8011472 <VL53L3CX_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801145e:	3329      	adds	r3, #41	; 0x29
 8011460:	2200      	movs	r2, #0
 8011462:	701a      	strb	r2, [r3, #0]
      ret = VL53L3CX_INVALID_PARAM;
 8011464:	f06f 0301 	mvn.w	r3, #1
 8011468:	60fb      	str	r3, [r7, #12]
      break;
 801146a:	e002      	b.n	8011472 <VL53L3CX_Start+0xea>
    }
  }
  else
  {
    ret = VL53L3CX_ERROR;
 801146c:	f04f 33ff 	mov.w	r3, #4294967295
 8011470:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011472:	68fb      	ldr	r3, [r7, #12]
}
 8011474:	4618      	mov	r0, r3
 8011476:	3710      	adds	r7, #16
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}

0801147c <VL53L3CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Stop(VL53L3CX_Object_t *pObj)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b084      	sub	sp, #16
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d103      	bne.n	8011492 <VL53L3CX_Stop+0x16>
  {
    ret = VL53L3CX_INVALID_PARAM;
 801148a:	f06f 0301 	mvn.w	r3, #1
 801148e:	60fb      	str	r3, [r7, #12]
 8011490:	e01c      	b.n	80114cc <VL53L3CX_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011498:	3329      	adds	r3, #41	; 0x29
 801149a:	781b      	ldrb	r3, [r3, #0]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d103      	bne.n	80114a8 <VL53L3CX_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L3CX_ERROR;
 80114a0:	f04f 33ff 	mov.w	r3, #4294967295
 80114a4:	60fb      	str	r3, [r7, #12]
 80114a6:	e011      	b.n	80114cc <VL53L3CX_Stop+0x50>
  }
  else if (VL53LX_StopMeasurement(pObj) == VL53LX_ERROR_NONE)
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	f7f0 fd0d 	bl	8001ec8 <VL53LX_StopMeasurement>
 80114ae:	4603      	mov	r3, r0
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d108      	bne.n	80114c6 <VL53L3CX_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80114ba:	3329      	adds	r3, #41	; 0x29
 80114bc:	2200      	movs	r2, #0
 80114be:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 80114c0:	2300      	movs	r3, #0
 80114c2:	60fb      	str	r3, [r7, #12]
 80114c4:	e002      	b.n	80114cc <VL53L3CX_Stop+0x50>
  }
  else
  {
    ret = VL53L3CX_ERROR;
 80114c6:	f04f 33ff 	mov.w	r3, #4294967295
 80114ca:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80114cc:	68fb      	ldr	r3, [r7, #12]
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3710      	adds	r7, #16
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}

080114d6 <VL53L3CX_SetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param Address     New I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetAddress(VL53L3CX_Object_t *pObj, uint32_t Address)
{
 80114d6:	b580      	push	{r7, lr}
 80114d8:	b084      	sub	sp, #16
 80114da:	af00      	add	r7, sp, #0
 80114dc:	6078      	str	r0, [r7, #4]
 80114de:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d103      	bne.n	80114ee <VL53L3CX_SetAddress+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80114e6:	f06f 0301 	mvn.w	r3, #1
 80114ea:	60fb      	str	r3, [r7, #12]
 80114ec:	e012      	b.n	8011514 <VL53L3CX_SetAddress+0x3e>
  }
  else if (VL53LX_SetDeviceAddress(pObj, (uint8_t)Address) != VL53LX_ERROR_NONE)
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	b2db      	uxtb	r3, r3
 80114f2:	4619      	mov	r1, r3
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f7f0 f9e7 	bl	80018c8 <VL53LX_SetDeviceAddress>
 80114fa:	4603      	mov	r3, r0
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d003      	beq.n	8011508 <VL53L3CX_SetAddress+0x32>
  {
    ret = VL53L3CX_ERROR;
 8011500:	f04f 33ff 	mov.w	r3, #4294967295
 8011504:	60fb      	str	r3, [r7, #12]
 8011506:	e005      	b.n	8011514 <VL53L3CX_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	b29a      	uxth	r2, r3
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	811a      	strh	r2, [r3, #8]
    ret = VL53L3CX_OK;
 8011510:	2300      	movs	r3, #0
 8011512:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011514:	68fb      	ldr	r3, [r7, #12]
}
 8011516:	4618      	mov	r0, r3
 8011518:	3710      	adds	r7, #16
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}

0801151e <VL53L3CX_GetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetAddress(VL53L3CX_Object_t *pObj, uint32_t *pAddress)
{
 801151e:	b480      	push	{r7}
 8011520:	b085      	sub	sp, #20
 8011522:	af00      	add	r7, sp, #0
 8011524:	6078      	str	r0, [r7, #4]
 8011526:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d002      	beq.n	8011534 <VL53L3CX_GetAddress+0x16>
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d103      	bne.n	801153c <VL53L3CX_GetAddress+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011534:	f06f 0301 	mvn.w	r3, #1
 8011538:	60fb      	str	r3, [r7, #12]
 801153a:	e006      	b.n	801154a <VL53L3CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	891b      	ldrh	r3, [r3, #8]
 8011540:	461a      	mov	r2, r3
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	601a      	str	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8011546:	2300      	movs	r3, #0
 8011548:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801154a:	68fb      	ldr	r3, [r7, #12]
}
 801154c:	4618      	mov	r0, r3
 801154e:	3714      	adds	r7, #20
 8011550:	46bd      	mov	sp, r7
 8011552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011556:	4770      	bx	lr

08011558 <VL53L3CX_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetPowerMode(VL53L3CX_Object_t *pObj, uint32_t PowerMode)
{
 8011558:	b480      	push	{r7}
 801155a:	b083      	sub	sp, #12
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 8011562:	f06f 0303 	mvn.w	r3, #3
}
 8011566:	4618      	mov	r0, r3
 8011568:	370c      	adds	r7, #12
 801156a:	46bd      	mov	sp, r7
 801156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011570:	4770      	bx	lr

08011572 <VL53L3CX_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetPowerMode(VL53L3CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8011572:	b480      	push	{r7}
 8011574:	b083      	sub	sp, #12
 8011576:	af00      	add	r7, sp, #0
 8011578:	6078      	str	r0, [r7, #4]
 801157a:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 801157c:	f06f 0303 	mvn.w	r3, #3
}
 8011580:	4618      	mov	r0, r3
 8011582:	370c      	adds	r7, #12
 8011584:	46bd      	mov	sp, r7
 8011586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158a:	4770      	bx	lr

0801158c <vl53l3cx_poll_for_measurement>:
/** @defgroup VL53L3CX_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l3cx_poll_for_measurement(VL53L3CX_Object_t *pObj, uint32_t Timeout)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b084      	sub	sp, #16
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
 8011594:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8011596:	2300      	movs	r3, #0
 8011598:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d102      	bne.n	80115a6 <vl53l3cx_poll_for_measurement+0x1a>
  {
    return VL53L3CX_INVALID_PARAM;
 80115a0:	f06f 0301 	mvn.w	r3, #1
 80115a4:	e01b      	b.n	80115de <vl53l3cx_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	695b      	ldr	r3, [r3, #20]
 80115aa:	4798      	blx	r3
 80115ac:	4603      	mov	r3, r0
 80115ae:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53LX_GetMeasurementDataReady(pObj, &NewDataReady);
 80115b0:	f107 030b 	add.w	r3, r7, #11
 80115b4:	4619      	mov	r1, r3
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	f7f0 fcb0 	bl	8001f1c <VL53LX_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 80115bc:	7afb      	ldrb	r3, [r7, #11]
 80115be:	2b01      	cmp	r3, #1
 80115c0:	d101      	bne.n	80115c6 <vl53l3cx_poll_for_measurement+0x3a>
    {
      return VL53L3CX_OK;
 80115c2:	2300      	movs	r3, #0
 80115c4:	e00b      	b.n	80115de <vl53l3cx_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	695b      	ldr	r3, [r3, #20]
 80115ca:	4798      	blx	r3
 80115cc:	4603      	mov	r3, r0
 80115ce:	461a      	mov	r2, r3
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	1ad3      	subs	r3, r2, r3
 80115d4:	683a      	ldr	r2, [r7, #0]
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d8ea      	bhi.n	80115b0 <vl53l3cx_poll_for_measurement+0x24>

  return VL53L3CX_TIMEOUT;
 80115da:	f06f 0302 	mvn.w	r3, #2
}
 80115de:	4618      	mov	r0, r3
 80115e0:	3710      	adds	r7, #16
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd80      	pop	{r7, pc}
	...

080115e8 <vl53l3cx_get_result>:

static int32_t vl53l3cx_get_result(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 80115e8:	b590      	push	{r4, r7, lr}
 80115ea:	b09f      	sub	sp, #124	; 0x7c
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
 80115f0:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53LX_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d002      	beq.n	80115fe <vl53l3cx_get_result+0x16>
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d103      	bne.n	8011606 <vl53l3cx_get_result+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80115fe:	f06f 0301 	mvn.w	r3, #1
 8011602:	677b      	str	r3, [r7, #116]	; 0x74
 8011604:	e126      	b.n	8011854 <vl53l3cx_get_result+0x26c>
  }
  else if (VL53LX_GetMultiRangingData(pObj, &data) != VL53LX_ERROR_NONE)
 8011606:	f107 0308 	add.w	r3, r7, #8
 801160a:	4619      	mov	r1, r3
 801160c:	6878      	ldr	r0, [r7, #4]
 801160e:	f7f1 f858 	bl	80026c2 <VL53LX_GetMultiRangingData>
 8011612:	4603      	mov	r3, r0
 8011614:	2b00      	cmp	r3, #0
 8011616:	d003      	beq.n	8011620 <vl53l3cx_get_result+0x38>
  {
    ret = VL53L3CX_ERROR;
 8011618:	f04f 33ff 	mov.w	r3, #4294967295
 801161c:	677b      	str	r3, [r7, #116]	; 0x74
 801161e:	e119      	b.n	8011854 <vl53l3cx_get_result+0x26c>
  }
  else
  {
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 8011620:	2300      	movs	r3, #0
 8011622:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8011626:	e10b      	b.n	8011840 <vl53l3cx_get_result+0x258>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8011628:	7b7b      	ldrb	r3, [r7, #13]
 801162a:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 801162e:	4618      	mov	r0, r3
 8011630:	6839      	ldr	r1, [r7, #0]
 8011632:	4613      	mov	r3, r2
 8011634:	011b      	lsls	r3, r3, #4
 8011636:	4413      	add	r3, r2
 8011638:	009b      	lsls	r3, r3, #2
 801163a:	440b      	add	r3, r1
 801163c:	3304      	adds	r3, #4
 801163e:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8011640:	2300      	movs	r3, #0
 8011642:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8011646:	e0f0      	b.n	801182a <vl53l3cx_get_result+0x242>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8011648:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 801164c:	4613      	mov	r3, r2
 801164e:	009b      	lsls	r3, r3, #2
 8011650:	4413      	add	r3, r2
 8011652:	009b      	lsls	r3, r3, #2
 8011654:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011658:	4413      	add	r3, r2
 801165a:	3b58      	subs	r3, #88	; 0x58
 801165c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011660:	2b00      	cmp	r3, #0
 8011662:	da0d      	bge.n	8011680 <vl53l3cx_get_result+0x98>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8011664:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011668:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 801166c:	6839      	ldr	r1, [r7, #0]
 801166e:	4613      	mov	r3, r2
 8011670:	011b      	lsls	r3, r3, #4
 8011672:	4413      	add	r3, r2
 8011674:	4403      	add	r3, r0
 8011676:	009b      	lsls	r3, r3, #2
 8011678:	440b      	add	r3, r1
 801167a:	2200      	movs	r2, #0
 801167c:	609a      	str	r2, [r3, #8]
 801167e:	e018      	b.n	80116b2 <vl53l3cx_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8011680:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011684:	4613      	mov	r3, r2
 8011686:	009b      	lsls	r3, r3, #2
 8011688:	4413      	add	r3, r2
 801168a:	009b      	lsls	r3, r3, #2
 801168c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011690:	4413      	add	r3, r2
 8011692:	3b58      	subs	r3, #88	; 0x58
 8011694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011698:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 801169c:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 80116a0:	461c      	mov	r4, r3
 80116a2:	6839      	ldr	r1, [r7, #0]
 80116a4:	4613      	mov	r3, r2
 80116a6:	011b      	lsls	r3, r3, #4
 80116a8:	4413      	add	r3, r2
 80116aa:	4403      	add	r3, r0
 80116ac:	009b      	lsls	r3, r3, #2
 80116ae:	440b      	add	r3, r1
 80116b0:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80116b8:	332c      	adds	r3, #44	; 0x2c
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	2b01      	cmp	r3, #1
 80116be:	d137      	bne.n	8011730 <vl53l3cx_get_result+0x148>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 80116c0:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80116c4:	4613      	mov	r3, r2
 80116c6:	009b      	lsls	r3, r3, #2
 80116c8:	4413      	add	r3, r2
 80116ca:	009b      	lsls	r3, r3, #2
 80116cc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80116d0:	4413      	add	r3, r2
 80116d2:	3b60      	subs	r3, #96	; 0x60
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	ee07 3a90 	vmov	s15, r3
 80116da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80116de:	eddf 6a60 	vldr	s13, [pc, #384]	; 8011860 <vl53l3cx_get_result+0x278>
 80116e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80116e6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8011864 <vl53l3cx_get_result+0x27c>
 80116ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116ee:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80116f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80116f6:	0a1b      	lsrs	r3, r3, #8
 80116f8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 80116fc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8011700:	ee07 3a90 	vmov	s15, r3
 8011704:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011708:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 801170c:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011710:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8011714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011718:	6839      	ldr	r1, [r7, #0]
 801171a:	4613      	mov	r3, r2
 801171c:	011b      	lsls	r3, r3, #4
 801171e:	4413      	add	r3, r2
 8011720:	4403      	add	r3, r0
 8011722:	3308      	adds	r3, #8
 8011724:	009b      	lsls	r3, r3, #2
 8011726:	440b      	add	r3, r1
 8011728:	3308      	adds	r3, #8
 801172a:	edc3 7a00 	vstr	s15, [r3]
 801172e:	e00f      	b.n	8011750 <vl53l3cx_get_result+0x168>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8011730:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011734:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011738:	6839      	ldr	r1, [r7, #0]
 801173a:	4613      	mov	r3, r2
 801173c:	011b      	lsls	r3, r3, #4
 801173e:	4413      	add	r3, r2
 8011740:	4403      	add	r3, r0
 8011742:	3308      	adds	r3, #8
 8011744:	009b      	lsls	r3, r3, #2
 8011746:	440b      	add	r3, r1
 8011748:	3308      	adds	r3, #8
 801174a:	f04f 0200 	mov.w	r2, #0
 801174e:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011756:	332d      	adds	r3, #45	; 0x2d
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	2b01      	cmp	r3, #1
 801175c:	d137      	bne.n	80117ce <vl53l3cx_get_result+0x1e6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 801175e:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011762:	4613      	mov	r3, r2
 8011764:	009b      	lsls	r3, r3, #2
 8011766:	4413      	add	r3, r2
 8011768:	009b      	lsls	r3, r3, #2
 801176a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801176e:	4413      	add	r3, r2
 8011770:	3b64      	subs	r3, #100	; 0x64
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	ee07 3a90 	vmov	s15, r3
 8011778:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801177c:	eddf 6a38 	vldr	s13, [pc, #224]	; 8011860 <vl53l3cx_get_result+0x278>
 8011780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011784:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8011864 <vl53l3cx_get_result+0x27c>
 8011788:	ee67 7a87 	vmul.f32	s15, s15, s14
 801178c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8011790:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011794:	0a1b      	lsrs	r3, r3, #8
 8011796:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 801179a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801179e:	ee07 3a90 	vmov	s15, r3
 80117a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80117a6:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80117aa:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 80117ae:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80117b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80117b6:	6839      	ldr	r1, [r7, #0]
 80117b8:	4613      	mov	r3, r2
 80117ba:	011b      	lsls	r3, r3, #4
 80117bc:	4413      	add	r3, r2
 80117be:	4403      	add	r3, r0
 80117c0:	330c      	adds	r3, #12
 80117c2:	009b      	lsls	r3, r3, #2
 80117c4:	440b      	add	r3, r1
 80117c6:	3308      	adds	r3, #8
 80117c8:	edc3 7a00 	vstr	s15, [r3]
 80117cc:	e00f      	b.n	80117ee <vl53l3cx_get_result+0x206>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 80117ce:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80117d2:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 80117d6:	6839      	ldr	r1, [r7, #0]
 80117d8:	4613      	mov	r3, r2
 80117da:	011b      	lsls	r3, r3, #4
 80117dc:	4413      	add	r3, r2
 80117de:	4403      	add	r3, r0
 80117e0:	330c      	adds	r3, #12
 80117e2:	009b      	lsls	r3, r3, #2
 80117e4:	440b      	add	r3, r1
 80117e6:	3308      	adds	r3, #8
 80117e8:	f04f 0200 	mov.w	r2, #0
 80117ec:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 80117ee:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80117f2:	4613      	mov	r3, r2
 80117f4:	009b      	lsls	r3, r3, #2
 80117f6:	4413      	add	r3, r2
 80117f8:	009b      	lsls	r3, r3, #2
 80117fa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80117fe:	4413      	add	r3, r2
 8011800:	3b56      	subs	r3, #86	; 0x56
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011808:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 801180c:	461c      	mov	r4, r3
 801180e:	6839      	ldr	r1, [r7, #0]
 8011810:	4613      	mov	r3, r2
 8011812:	011b      	lsls	r3, r3, #4
 8011814:	4413      	add	r3, r2
 8011816:	4403      	add	r3, r0
 8011818:	3304      	adds	r3, #4
 801181a:	009b      	lsls	r3, r3, #2
 801181c:	440b      	add	r3, r1
 801181e:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8011820:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8011824:	3301      	adds	r3, #1
 8011826:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 801182a:	7b7b      	ldrb	r3, [r7, #13]
 801182c:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011830:	429a      	cmp	r2, r3
 8011832:	f4ff af09 	bcc.w	8011648 <vl53l3cx_get_result+0x60>
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 8011836:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801183a:	3301      	adds	r3, #1
 801183c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8011840:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8011844:	2b00      	cmp	r3, #0
 8011846:	f43f aeef 	beq.w	8011628 <vl53l3cx_get_result+0x40>
      }
    }

    pResult->NumberOfZones = VL53L3CX_MAX_NB_ZONES;
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	2201      	movs	r2, #1
 801184e:	601a      	str	r2, [r3, #0]

    ret = VL53L3CX_OK;
 8011850:	2300      	movs	r3, #0
 8011852:	677b      	str	r3, [r7, #116]	; 0x74
  }

  return ret;
 8011854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8011856:	4618      	mov	r0, r3
 8011858:	377c      	adds	r7, #124	; 0x7c
 801185a:	46bd      	mov	sp, r7
 801185c:	bd90      	pop	{r4, r7, pc}
 801185e:	bf00      	nop
 8011860:	47800000 	.word	0x47800000
 8011864:	447a0000 	.word	0x447a0000

08011868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011868:	b580      	push	{r7, lr}
 801186a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801186c:	4b0e      	ldr	r3, [pc, #56]	; (80118a8 <HAL_Init+0x40>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	4a0d      	ldr	r2, [pc, #52]	; (80118a8 <HAL_Init+0x40>)
 8011872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011876:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8011878:	4b0b      	ldr	r3, [pc, #44]	; (80118a8 <HAL_Init+0x40>)
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	4a0a      	ldr	r2, [pc, #40]	; (80118a8 <HAL_Init+0x40>)
 801187e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011882:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011884:	4b08      	ldr	r3, [pc, #32]	; (80118a8 <HAL_Init+0x40>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	4a07      	ldr	r2, [pc, #28]	; (80118a8 <HAL_Init+0x40>)
 801188a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801188e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011890:	2003      	movs	r0, #3
 8011892:	f000 f931 	bl	8011af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8011896:	2000      	movs	r0, #0
 8011898:	f000 f808 	bl	80118ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801189c:	f7ef f8e2 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80118a0:	2300      	movs	r3, #0
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	bd80      	pop	{r7, pc}
 80118a6:	bf00      	nop
 80118a8:	40023c00 	.word	0x40023c00

080118ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b082      	sub	sp, #8
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80118b4:	4b12      	ldr	r3, [pc, #72]	; (8011900 <HAL_InitTick+0x54>)
 80118b6:	681a      	ldr	r2, [r3, #0]
 80118b8:	4b12      	ldr	r3, [pc, #72]	; (8011904 <HAL_InitTick+0x58>)
 80118ba:	781b      	ldrb	r3, [r3, #0]
 80118bc:	4619      	mov	r1, r3
 80118be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80118c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80118c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80118ca:	4618      	mov	r0, r3
 80118cc:	f000 f93b 	bl	8011b46 <HAL_SYSTICK_Config>
 80118d0:	4603      	mov	r3, r0
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d001      	beq.n	80118da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80118d6:	2301      	movs	r3, #1
 80118d8:	e00e      	b.n	80118f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2b0f      	cmp	r3, #15
 80118de:	d80a      	bhi.n	80118f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80118e0:	2200      	movs	r2, #0
 80118e2:	6879      	ldr	r1, [r7, #4]
 80118e4:	f04f 30ff 	mov.w	r0, #4294967295
 80118e8:	f000 f911 	bl	8011b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80118ec:	4a06      	ldr	r2, [pc, #24]	; (8011908 <HAL_InitTick+0x5c>)
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80118f2:	2300      	movs	r3, #0
 80118f4:	e000      	b.n	80118f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80118f6:	2301      	movs	r3, #1
}
 80118f8:	4618      	mov	r0, r3
 80118fa:	3708      	adds	r7, #8
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}
 8011900:	20000004 	.word	0x20000004
 8011904:	20000070 	.word	0x20000070
 8011908:	2000006c 	.word	0x2000006c

0801190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801190c:	b480      	push	{r7}
 801190e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011910:	4b06      	ldr	r3, [pc, #24]	; (801192c <HAL_IncTick+0x20>)
 8011912:	781b      	ldrb	r3, [r3, #0]
 8011914:	461a      	mov	r2, r3
 8011916:	4b06      	ldr	r3, [pc, #24]	; (8011930 <HAL_IncTick+0x24>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	4413      	add	r3, r2
 801191c:	4a04      	ldr	r2, [pc, #16]	; (8011930 <HAL_IncTick+0x24>)
 801191e:	6013      	str	r3, [r2, #0]
}
 8011920:	bf00      	nop
 8011922:	46bd      	mov	sp, r7
 8011924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011928:	4770      	bx	lr
 801192a:	bf00      	nop
 801192c:	20000070 	.word	0x20000070
 8011930:	200072e4 	.word	0x200072e4

08011934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011934:	b480      	push	{r7}
 8011936:	af00      	add	r7, sp, #0
  return uwTick;
 8011938:	4b03      	ldr	r3, [pc, #12]	; (8011948 <HAL_GetTick+0x14>)
 801193a:	681b      	ldr	r3, [r3, #0]
}
 801193c:	4618      	mov	r0, r3
 801193e:	46bd      	mov	sp, r7
 8011940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011944:	4770      	bx	lr
 8011946:	bf00      	nop
 8011948:	200072e4 	.word	0x200072e4

0801194c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b084      	sub	sp, #16
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011954:	f7ff ffee 	bl	8011934 <HAL_GetTick>
 8011958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011964:	d005      	beq.n	8011972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011966:	4b0a      	ldr	r3, [pc, #40]	; (8011990 <HAL_Delay+0x44>)
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	461a      	mov	r2, r3
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	4413      	add	r3, r2
 8011970:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8011972:	bf00      	nop
 8011974:	f7ff ffde 	bl	8011934 <HAL_GetTick>
 8011978:	4602      	mov	r2, r0
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	1ad3      	subs	r3, r2, r3
 801197e:	68fa      	ldr	r2, [r7, #12]
 8011980:	429a      	cmp	r2, r3
 8011982:	d8f7      	bhi.n	8011974 <HAL_Delay+0x28>
  {
  }
}
 8011984:	bf00      	nop
 8011986:	bf00      	nop
 8011988:	3710      	adds	r7, #16
 801198a:	46bd      	mov	sp, r7
 801198c:	bd80      	pop	{r7, pc}
 801198e:	bf00      	nop
 8011990:	20000070 	.word	0x20000070

08011994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011994:	b480      	push	{r7}
 8011996:	b085      	sub	sp, #20
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f003 0307 	and.w	r3, r3, #7
 80119a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80119a4:	4b0c      	ldr	r3, [pc, #48]	; (80119d8 <__NVIC_SetPriorityGrouping+0x44>)
 80119a6:	68db      	ldr	r3, [r3, #12]
 80119a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80119aa:	68ba      	ldr	r2, [r7, #8]
 80119ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80119b0:	4013      	ands	r3, r2
 80119b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80119bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80119c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80119c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80119c6:	4a04      	ldr	r2, [pc, #16]	; (80119d8 <__NVIC_SetPriorityGrouping+0x44>)
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	60d3      	str	r3, [r2, #12]
}
 80119cc:	bf00      	nop
 80119ce:	3714      	adds	r7, #20
 80119d0:	46bd      	mov	sp, r7
 80119d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d6:	4770      	bx	lr
 80119d8:	e000ed00 	.word	0xe000ed00

080119dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80119dc:	b480      	push	{r7}
 80119de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80119e0:	4b04      	ldr	r3, [pc, #16]	; (80119f4 <__NVIC_GetPriorityGrouping+0x18>)
 80119e2:	68db      	ldr	r3, [r3, #12]
 80119e4:	0a1b      	lsrs	r3, r3, #8
 80119e6:	f003 0307 	and.w	r3, r3, #7
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	46bd      	mov	sp, r7
 80119ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f2:	4770      	bx	lr
 80119f4:	e000ed00 	.word	0xe000ed00

080119f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80119f8:	b480      	push	{r7}
 80119fa:	b083      	sub	sp, #12
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	4603      	mov	r3, r0
 8011a00:	6039      	str	r1, [r7, #0]
 8011a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	db0a      	blt.n	8011a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	b2da      	uxtb	r2, r3
 8011a10:	490c      	ldr	r1, [pc, #48]	; (8011a44 <__NVIC_SetPriority+0x4c>)
 8011a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a16:	0112      	lsls	r2, r2, #4
 8011a18:	b2d2      	uxtb	r2, r2
 8011a1a:	440b      	add	r3, r1
 8011a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011a20:	e00a      	b.n	8011a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	b2da      	uxtb	r2, r3
 8011a26:	4908      	ldr	r1, [pc, #32]	; (8011a48 <__NVIC_SetPriority+0x50>)
 8011a28:	79fb      	ldrb	r3, [r7, #7]
 8011a2a:	f003 030f 	and.w	r3, r3, #15
 8011a2e:	3b04      	subs	r3, #4
 8011a30:	0112      	lsls	r2, r2, #4
 8011a32:	b2d2      	uxtb	r2, r2
 8011a34:	440b      	add	r3, r1
 8011a36:	761a      	strb	r2, [r3, #24]
}
 8011a38:	bf00      	nop
 8011a3a:	370c      	adds	r7, #12
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a42:	4770      	bx	lr
 8011a44:	e000e100 	.word	0xe000e100
 8011a48:	e000ed00 	.word	0xe000ed00

08011a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011a4c:	b480      	push	{r7}
 8011a4e:	b089      	sub	sp, #36	; 0x24
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	60f8      	str	r0, [r7, #12]
 8011a54:	60b9      	str	r1, [r7, #8]
 8011a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	f003 0307 	and.w	r3, r3, #7
 8011a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011a60:	69fb      	ldr	r3, [r7, #28]
 8011a62:	f1c3 0307 	rsb	r3, r3, #7
 8011a66:	2b04      	cmp	r3, #4
 8011a68:	bf28      	it	cs
 8011a6a:	2304      	movcs	r3, #4
 8011a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011a6e:	69fb      	ldr	r3, [r7, #28]
 8011a70:	3304      	adds	r3, #4
 8011a72:	2b06      	cmp	r3, #6
 8011a74:	d902      	bls.n	8011a7c <NVIC_EncodePriority+0x30>
 8011a76:	69fb      	ldr	r3, [r7, #28]
 8011a78:	3b03      	subs	r3, #3
 8011a7a:	e000      	b.n	8011a7e <NVIC_EncodePriority+0x32>
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011a80:	f04f 32ff 	mov.w	r2, #4294967295
 8011a84:	69bb      	ldr	r3, [r7, #24]
 8011a86:	fa02 f303 	lsl.w	r3, r2, r3
 8011a8a:	43da      	mvns	r2, r3
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	401a      	ands	r2, r3
 8011a90:	697b      	ldr	r3, [r7, #20]
 8011a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011a94:	f04f 31ff 	mov.w	r1, #4294967295
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8011a9e:	43d9      	mvns	r1, r3
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011aa4:	4313      	orrs	r3, r2
         );
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3724      	adds	r7, #36	; 0x24
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab0:	4770      	bx	lr
	...

08011ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	3b01      	subs	r3, #1
 8011ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011ac4:	d301      	bcc.n	8011aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	e00f      	b.n	8011aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011aca:	4a0a      	ldr	r2, [pc, #40]	; (8011af4 <SysTick_Config+0x40>)
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	3b01      	subs	r3, #1
 8011ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011ad2:	210f      	movs	r1, #15
 8011ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ad8:	f7ff ff8e 	bl	80119f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011adc:	4b05      	ldr	r3, [pc, #20]	; (8011af4 <SysTick_Config+0x40>)
 8011ade:	2200      	movs	r2, #0
 8011ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011ae2:	4b04      	ldr	r3, [pc, #16]	; (8011af4 <SysTick_Config+0x40>)
 8011ae4:	2207      	movs	r2, #7
 8011ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011ae8:	2300      	movs	r3, #0
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3708      	adds	r7, #8
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}
 8011af2:	bf00      	nop
 8011af4:	e000e010 	.word	0xe000e010

08011af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b082      	sub	sp, #8
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f7ff ff47 	bl	8011994 <__NVIC_SetPriorityGrouping>
}
 8011b06:	bf00      	nop
 8011b08:	3708      	adds	r7, #8
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b086      	sub	sp, #24
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	4603      	mov	r3, r0
 8011b16:	60b9      	str	r1, [r7, #8]
 8011b18:	607a      	str	r2, [r7, #4]
 8011b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011b20:	f7ff ff5c 	bl	80119dc <__NVIC_GetPriorityGrouping>
 8011b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011b26:	687a      	ldr	r2, [r7, #4]
 8011b28:	68b9      	ldr	r1, [r7, #8]
 8011b2a:	6978      	ldr	r0, [r7, #20]
 8011b2c:	f7ff ff8e 	bl	8011a4c <NVIC_EncodePriority>
 8011b30:	4602      	mov	r2, r0
 8011b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b36:	4611      	mov	r1, r2
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7ff ff5d 	bl	80119f8 <__NVIC_SetPriority>
}
 8011b3e:	bf00      	nop
 8011b40:	3718      	adds	r7, #24
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}

08011b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011b46:	b580      	push	{r7, lr}
 8011b48:	b082      	sub	sp, #8
 8011b4a:	af00      	add	r7, sp, #0
 8011b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f7ff ffb0 	bl	8011ab4 <SysTick_Config>
 8011b54:	4603      	mov	r3, r0
}
 8011b56:	4618      	mov	r0, r3
 8011b58:	3708      	adds	r7, #8
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}
	...

08011b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011b60:	b480      	push	{r7}
 8011b62:	b089      	sub	sp, #36	; 0x24
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
 8011b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8011b72:	2300      	movs	r3, #0
 8011b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011b76:	2300      	movs	r3, #0
 8011b78:	61fb      	str	r3, [r7, #28]
 8011b7a:	e159      	b.n	8011e30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011b7c:	2201      	movs	r2, #1
 8011b7e:	69fb      	ldr	r3, [r7, #28]
 8011b80:	fa02 f303 	lsl.w	r3, r2, r3
 8011b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	697a      	ldr	r2, [r7, #20]
 8011b8c:	4013      	ands	r3, r2
 8011b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011b90:	693a      	ldr	r2, [r7, #16]
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	429a      	cmp	r2, r3
 8011b96:	f040 8148 	bne.w	8011e2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011b9a:	683b      	ldr	r3, [r7, #0]
 8011b9c:	685b      	ldr	r3, [r3, #4]
 8011b9e:	f003 0303 	and.w	r3, r3, #3
 8011ba2:	2b01      	cmp	r3, #1
 8011ba4:	d005      	beq.n	8011bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	685b      	ldr	r3, [r3, #4]
 8011baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011bae:	2b02      	cmp	r3, #2
 8011bb0:	d130      	bne.n	8011c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	689b      	ldr	r3, [r3, #8]
 8011bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011bb8:	69fb      	ldr	r3, [r7, #28]
 8011bba:	005b      	lsls	r3, r3, #1
 8011bbc:	2203      	movs	r2, #3
 8011bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8011bc2:	43db      	mvns	r3, r3
 8011bc4:	69ba      	ldr	r2, [r7, #24]
 8011bc6:	4013      	ands	r3, r2
 8011bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	68da      	ldr	r2, [r3, #12]
 8011bce:	69fb      	ldr	r3, [r7, #28]
 8011bd0:	005b      	lsls	r3, r3, #1
 8011bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8011bd6:	69ba      	ldr	r2, [r7, #24]
 8011bd8:	4313      	orrs	r3, r2
 8011bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	69ba      	ldr	r2, [r7, #24]
 8011be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	685b      	ldr	r3, [r3, #4]
 8011be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011be8:	2201      	movs	r2, #1
 8011bea:	69fb      	ldr	r3, [r7, #28]
 8011bec:	fa02 f303 	lsl.w	r3, r2, r3
 8011bf0:	43db      	mvns	r3, r3
 8011bf2:	69ba      	ldr	r2, [r7, #24]
 8011bf4:	4013      	ands	r3, r2
 8011bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	685b      	ldr	r3, [r3, #4]
 8011bfc:	091b      	lsrs	r3, r3, #4
 8011bfe:	f003 0201 	and.w	r2, r3, #1
 8011c02:	69fb      	ldr	r3, [r7, #28]
 8011c04:	fa02 f303 	lsl.w	r3, r2, r3
 8011c08:	69ba      	ldr	r2, [r7, #24]
 8011c0a:	4313      	orrs	r3, r2
 8011c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	69ba      	ldr	r2, [r7, #24]
 8011c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	685b      	ldr	r3, [r3, #4]
 8011c18:	f003 0303 	and.w	r3, r3, #3
 8011c1c:	2b03      	cmp	r3, #3
 8011c1e:	d017      	beq.n	8011c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	68db      	ldr	r3, [r3, #12]
 8011c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011c26:	69fb      	ldr	r3, [r7, #28]
 8011c28:	005b      	lsls	r3, r3, #1
 8011c2a:	2203      	movs	r2, #3
 8011c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8011c30:	43db      	mvns	r3, r3
 8011c32:	69ba      	ldr	r2, [r7, #24]
 8011c34:	4013      	ands	r3, r2
 8011c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011c38:	683b      	ldr	r3, [r7, #0]
 8011c3a:	689a      	ldr	r2, [r3, #8]
 8011c3c:	69fb      	ldr	r3, [r7, #28]
 8011c3e:	005b      	lsls	r3, r3, #1
 8011c40:	fa02 f303 	lsl.w	r3, r2, r3
 8011c44:	69ba      	ldr	r2, [r7, #24]
 8011c46:	4313      	orrs	r3, r2
 8011c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	69ba      	ldr	r2, [r7, #24]
 8011c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	685b      	ldr	r3, [r3, #4]
 8011c54:	f003 0303 	and.w	r3, r3, #3
 8011c58:	2b02      	cmp	r3, #2
 8011c5a:	d123      	bne.n	8011ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011c5c:	69fb      	ldr	r3, [r7, #28]
 8011c5e:	08da      	lsrs	r2, r3, #3
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	3208      	adds	r2, #8
 8011c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011c6a:	69fb      	ldr	r3, [r7, #28]
 8011c6c:	f003 0307 	and.w	r3, r3, #7
 8011c70:	009b      	lsls	r3, r3, #2
 8011c72:	220f      	movs	r2, #15
 8011c74:	fa02 f303 	lsl.w	r3, r2, r3
 8011c78:	43db      	mvns	r3, r3
 8011c7a:	69ba      	ldr	r2, [r7, #24]
 8011c7c:	4013      	ands	r3, r2
 8011c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	691a      	ldr	r2, [r3, #16]
 8011c84:	69fb      	ldr	r3, [r7, #28]
 8011c86:	f003 0307 	and.w	r3, r3, #7
 8011c8a:	009b      	lsls	r3, r3, #2
 8011c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8011c90:	69ba      	ldr	r2, [r7, #24]
 8011c92:	4313      	orrs	r3, r2
 8011c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011c96:	69fb      	ldr	r3, [r7, #28]
 8011c98:	08da      	lsrs	r2, r3, #3
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	3208      	adds	r2, #8
 8011c9e:	69b9      	ldr	r1, [r7, #24]
 8011ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011caa:	69fb      	ldr	r3, [r7, #28]
 8011cac:	005b      	lsls	r3, r3, #1
 8011cae:	2203      	movs	r2, #3
 8011cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8011cb4:	43db      	mvns	r3, r3
 8011cb6:	69ba      	ldr	r2, [r7, #24]
 8011cb8:	4013      	ands	r3, r2
 8011cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	f003 0203 	and.w	r2, r3, #3
 8011cc4:	69fb      	ldr	r3, [r7, #28]
 8011cc6:	005b      	lsls	r3, r3, #1
 8011cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8011ccc:	69ba      	ldr	r2, [r7, #24]
 8011cce:	4313      	orrs	r3, r2
 8011cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	69ba      	ldr	r2, [r7, #24]
 8011cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	f000 80a2 	beq.w	8011e2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	60fb      	str	r3, [r7, #12]
 8011cea:	4b57      	ldr	r3, [pc, #348]	; (8011e48 <HAL_GPIO_Init+0x2e8>)
 8011cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cee:	4a56      	ldr	r2, [pc, #344]	; (8011e48 <HAL_GPIO_Init+0x2e8>)
 8011cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8011cf6:	4b54      	ldr	r3, [pc, #336]	; (8011e48 <HAL_GPIO_Init+0x2e8>)
 8011cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011cfe:	60fb      	str	r3, [r7, #12]
 8011d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8011d02:	4a52      	ldr	r2, [pc, #328]	; (8011e4c <HAL_GPIO_Init+0x2ec>)
 8011d04:	69fb      	ldr	r3, [r7, #28]
 8011d06:	089b      	lsrs	r3, r3, #2
 8011d08:	3302      	adds	r3, #2
 8011d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8011d10:	69fb      	ldr	r3, [r7, #28]
 8011d12:	f003 0303 	and.w	r3, r3, #3
 8011d16:	009b      	lsls	r3, r3, #2
 8011d18:	220f      	movs	r2, #15
 8011d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8011d1e:	43db      	mvns	r3, r3
 8011d20:	69ba      	ldr	r2, [r7, #24]
 8011d22:	4013      	ands	r3, r2
 8011d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	4a49      	ldr	r2, [pc, #292]	; (8011e50 <HAL_GPIO_Init+0x2f0>)
 8011d2a:	4293      	cmp	r3, r2
 8011d2c:	d019      	beq.n	8011d62 <HAL_GPIO_Init+0x202>
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	4a48      	ldr	r2, [pc, #288]	; (8011e54 <HAL_GPIO_Init+0x2f4>)
 8011d32:	4293      	cmp	r3, r2
 8011d34:	d013      	beq.n	8011d5e <HAL_GPIO_Init+0x1fe>
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	4a47      	ldr	r2, [pc, #284]	; (8011e58 <HAL_GPIO_Init+0x2f8>)
 8011d3a:	4293      	cmp	r3, r2
 8011d3c:	d00d      	beq.n	8011d5a <HAL_GPIO_Init+0x1fa>
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	4a46      	ldr	r2, [pc, #280]	; (8011e5c <HAL_GPIO_Init+0x2fc>)
 8011d42:	4293      	cmp	r3, r2
 8011d44:	d007      	beq.n	8011d56 <HAL_GPIO_Init+0x1f6>
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	4a45      	ldr	r2, [pc, #276]	; (8011e60 <HAL_GPIO_Init+0x300>)
 8011d4a:	4293      	cmp	r3, r2
 8011d4c:	d101      	bne.n	8011d52 <HAL_GPIO_Init+0x1f2>
 8011d4e:	2304      	movs	r3, #4
 8011d50:	e008      	b.n	8011d64 <HAL_GPIO_Init+0x204>
 8011d52:	2307      	movs	r3, #7
 8011d54:	e006      	b.n	8011d64 <HAL_GPIO_Init+0x204>
 8011d56:	2303      	movs	r3, #3
 8011d58:	e004      	b.n	8011d64 <HAL_GPIO_Init+0x204>
 8011d5a:	2302      	movs	r3, #2
 8011d5c:	e002      	b.n	8011d64 <HAL_GPIO_Init+0x204>
 8011d5e:	2301      	movs	r3, #1
 8011d60:	e000      	b.n	8011d64 <HAL_GPIO_Init+0x204>
 8011d62:	2300      	movs	r3, #0
 8011d64:	69fa      	ldr	r2, [r7, #28]
 8011d66:	f002 0203 	and.w	r2, r2, #3
 8011d6a:	0092      	lsls	r2, r2, #2
 8011d6c:	4093      	lsls	r3, r2
 8011d6e:	69ba      	ldr	r2, [r7, #24]
 8011d70:	4313      	orrs	r3, r2
 8011d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011d74:	4935      	ldr	r1, [pc, #212]	; (8011e4c <HAL_GPIO_Init+0x2ec>)
 8011d76:	69fb      	ldr	r3, [r7, #28]
 8011d78:	089b      	lsrs	r3, r3, #2
 8011d7a:	3302      	adds	r3, #2
 8011d7c:	69ba      	ldr	r2, [r7, #24]
 8011d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011d82:	4b38      	ldr	r3, [pc, #224]	; (8011e64 <HAL_GPIO_Init+0x304>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	43db      	mvns	r3, r3
 8011d8c:	69ba      	ldr	r2, [r7, #24]
 8011d8e:	4013      	ands	r3, r2
 8011d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d003      	beq.n	8011da6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8011d9e:	69ba      	ldr	r2, [r7, #24]
 8011da0:	693b      	ldr	r3, [r7, #16]
 8011da2:	4313      	orrs	r3, r2
 8011da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8011da6:	4a2f      	ldr	r2, [pc, #188]	; (8011e64 <HAL_GPIO_Init+0x304>)
 8011da8:	69bb      	ldr	r3, [r7, #24]
 8011daa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8011dac:	4b2d      	ldr	r3, [pc, #180]	; (8011e64 <HAL_GPIO_Init+0x304>)
 8011dae:	685b      	ldr	r3, [r3, #4]
 8011db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011db2:	693b      	ldr	r3, [r7, #16]
 8011db4:	43db      	mvns	r3, r3
 8011db6:	69ba      	ldr	r2, [r7, #24]
 8011db8:	4013      	ands	r3, r2
 8011dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d003      	beq.n	8011dd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8011dc8:	69ba      	ldr	r2, [r7, #24]
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	4313      	orrs	r3, r2
 8011dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8011dd0:	4a24      	ldr	r2, [pc, #144]	; (8011e64 <HAL_GPIO_Init+0x304>)
 8011dd2:	69bb      	ldr	r3, [r7, #24]
 8011dd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011dd6:	4b23      	ldr	r3, [pc, #140]	; (8011e64 <HAL_GPIO_Init+0x304>)
 8011dd8:	689b      	ldr	r3, [r3, #8]
 8011dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011ddc:	693b      	ldr	r3, [r7, #16]
 8011dde:	43db      	mvns	r3, r3
 8011de0:	69ba      	ldr	r2, [r7, #24]
 8011de2:	4013      	ands	r3, r2
 8011de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	685b      	ldr	r3, [r3, #4]
 8011dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d003      	beq.n	8011dfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8011df2:	69ba      	ldr	r2, [r7, #24]
 8011df4:	693b      	ldr	r3, [r7, #16]
 8011df6:	4313      	orrs	r3, r2
 8011df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8011dfa:	4a1a      	ldr	r2, [pc, #104]	; (8011e64 <HAL_GPIO_Init+0x304>)
 8011dfc:	69bb      	ldr	r3, [r7, #24]
 8011dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011e00:	4b18      	ldr	r3, [pc, #96]	; (8011e64 <HAL_GPIO_Init+0x304>)
 8011e02:	68db      	ldr	r3, [r3, #12]
 8011e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	43db      	mvns	r3, r3
 8011e0a:	69ba      	ldr	r2, [r7, #24]
 8011e0c:	4013      	ands	r3, r2
 8011e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	685b      	ldr	r3, [r3, #4]
 8011e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d003      	beq.n	8011e24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8011e1c:	69ba      	ldr	r2, [r7, #24]
 8011e1e:	693b      	ldr	r3, [r7, #16]
 8011e20:	4313      	orrs	r3, r2
 8011e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011e24:	4a0f      	ldr	r2, [pc, #60]	; (8011e64 <HAL_GPIO_Init+0x304>)
 8011e26:	69bb      	ldr	r3, [r7, #24]
 8011e28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011e2a:	69fb      	ldr	r3, [r7, #28]
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	61fb      	str	r3, [r7, #28]
 8011e30:	69fb      	ldr	r3, [r7, #28]
 8011e32:	2b0f      	cmp	r3, #15
 8011e34:	f67f aea2 	bls.w	8011b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011e38:	bf00      	nop
 8011e3a:	bf00      	nop
 8011e3c:	3724      	adds	r7, #36	; 0x24
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e44:	4770      	bx	lr
 8011e46:	bf00      	nop
 8011e48:	40023800 	.word	0x40023800
 8011e4c:	40013800 	.word	0x40013800
 8011e50:	40020000 	.word	0x40020000
 8011e54:	40020400 	.word	0x40020400
 8011e58:	40020800 	.word	0x40020800
 8011e5c:	40020c00 	.word	0x40020c00
 8011e60:	40021000 	.word	0x40021000
 8011e64:	40013c00 	.word	0x40013c00

08011e68 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011e68:	b480      	push	{r7}
 8011e6a:	b087      	sub	sp, #28
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
 8011e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011e72:	2300      	movs	r3, #0
 8011e74:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8011e76:	2300      	movs	r3, #0
 8011e78:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011e7e:	2300      	movs	r3, #0
 8011e80:	617b      	str	r3, [r7, #20]
 8011e82:	e0bb      	b.n	8011ffc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011e84:	2201      	movs	r2, #1
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	fa02 f303 	lsl.w	r3, r2, r3
 8011e8c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8011e8e:	683a      	ldr	r2, [r7, #0]
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	4013      	ands	r3, r2
 8011e94:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8011e96:	68fa      	ldr	r2, [r7, #12]
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	f040 80ab 	bne.w	8011ff6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8011ea0:	4a5c      	ldr	r2, [pc, #368]	; (8012014 <HAL_GPIO_DeInit+0x1ac>)
 8011ea2:	697b      	ldr	r3, [r7, #20]
 8011ea4:	089b      	lsrs	r3, r3, #2
 8011ea6:	3302      	adds	r3, #2
 8011ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011eac:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8011eae:	697b      	ldr	r3, [r7, #20]
 8011eb0:	f003 0303 	and.w	r3, r3, #3
 8011eb4:	009b      	lsls	r3, r3, #2
 8011eb6:	220f      	movs	r2, #15
 8011eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8011ebc:	68ba      	ldr	r2, [r7, #8]
 8011ebe:	4013      	ands	r3, r2
 8011ec0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	4a54      	ldr	r2, [pc, #336]	; (8012018 <HAL_GPIO_DeInit+0x1b0>)
 8011ec6:	4293      	cmp	r3, r2
 8011ec8:	d019      	beq.n	8011efe <HAL_GPIO_DeInit+0x96>
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	4a53      	ldr	r2, [pc, #332]	; (801201c <HAL_GPIO_DeInit+0x1b4>)
 8011ece:	4293      	cmp	r3, r2
 8011ed0:	d013      	beq.n	8011efa <HAL_GPIO_DeInit+0x92>
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	4a52      	ldr	r2, [pc, #328]	; (8012020 <HAL_GPIO_DeInit+0x1b8>)
 8011ed6:	4293      	cmp	r3, r2
 8011ed8:	d00d      	beq.n	8011ef6 <HAL_GPIO_DeInit+0x8e>
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	4a51      	ldr	r2, [pc, #324]	; (8012024 <HAL_GPIO_DeInit+0x1bc>)
 8011ede:	4293      	cmp	r3, r2
 8011ee0:	d007      	beq.n	8011ef2 <HAL_GPIO_DeInit+0x8a>
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	4a50      	ldr	r2, [pc, #320]	; (8012028 <HAL_GPIO_DeInit+0x1c0>)
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	d101      	bne.n	8011eee <HAL_GPIO_DeInit+0x86>
 8011eea:	2304      	movs	r3, #4
 8011eec:	e008      	b.n	8011f00 <HAL_GPIO_DeInit+0x98>
 8011eee:	2307      	movs	r3, #7
 8011ef0:	e006      	b.n	8011f00 <HAL_GPIO_DeInit+0x98>
 8011ef2:	2303      	movs	r3, #3
 8011ef4:	e004      	b.n	8011f00 <HAL_GPIO_DeInit+0x98>
 8011ef6:	2302      	movs	r3, #2
 8011ef8:	e002      	b.n	8011f00 <HAL_GPIO_DeInit+0x98>
 8011efa:	2301      	movs	r3, #1
 8011efc:	e000      	b.n	8011f00 <HAL_GPIO_DeInit+0x98>
 8011efe:	2300      	movs	r3, #0
 8011f00:	697a      	ldr	r2, [r7, #20]
 8011f02:	f002 0203 	and.w	r2, r2, #3
 8011f06:	0092      	lsls	r2, r2, #2
 8011f08:	4093      	lsls	r3, r2
 8011f0a:	68ba      	ldr	r2, [r7, #8]
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d132      	bne.n	8011f76 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8011f10:	4b46      	ldr	r3, [pc, #280]	; (801202c <HAL_GPIO_DeInit+0x1c4>)
 8011f12:	681a      	ldr	r2, [r3, #0]
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	43db      	mvns	r3, r3
 8011f18:	4944      	ldr	r1, [pc, #272]	; (801202c <HAL_GPIO_DeInit+0x1c4>)
 8011f1a:	4013      	ands	r3, r2
 8011f1c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8011f1e:	4b43      	ldr	r3, [pc, #268]	; (801202c <HAL_GPIO_DeInit+0x1c4>)
 8011f20:	685a      	ldr	r2, [r3, #4]
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	43db      	mvns	r3, r3
 8011f26:	4941      	ldr	r1, [pc, #260]	; (801202c <HAL_GPIO_DeInit+0x1c4>)
 8011f28:	4013      	ands	r3, r2
 8011f2a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8011f2c:	4b3f      	ldr	r3, [pc, #252]	; (801202c <HAL_GPIO_DeInit+0x1c4>)
 8011f2e:	689a      	ldr	r2, [r3, #8]
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	43db      	mvns	r3, r3
 8011f34:	493d      	ldr	r1, [pc, #244]	; (801202c <HAL_GPIO_DeInit+0x1c4>)
 8011f36:	4013      	ands	r3, r2
 8011f38:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8011f3a:	4b3c      	ldr	r3, [pc, #240]	; (801202c <HAL_GPIO_DeInit+0x1c4>)
 8011f3c:	68da      	ldr	r2, [r3, #12]
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	43db      	mvns	r3, r3
 8011f42:	493a      	ldr	r1, [pc, #232]	; (801202c <HAL_GPIO_DeInit+0x1c4>)
 8011f44:	4013      	ands	r3, r2
 8011f46:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8011f48:	697b      	ldr	r3, [r7, #20]
 8011f4a:	f003 0303 	and.w	r3, r3, #3
 8011f4e:	009b      	lsls	r3, r3, #2
 8011f50:	220f      	movs	r2, #15
 8011f52:	fa02 f303 	lsl.w	r3, r2, r3
 8011f56:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8011f58:	4a2e      	ldr	r2, [pc, #184]	; (8012014 <HAL_GPIO_DeInit+0x1ac>)
 8011f5a:	697b      	ldr	r3, [r7, #20]
 8011f5c:	089b      	lsrs	r3, r3, #2
 8011f5e:	3302      	adds	r3, #2
 8011f60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	43da      	mvns	r2, r3
 8011f68:	482a      	ldr	r0, [pc, #168]	; (8012014 <HAL_GPIO_DeInit+0x1ac>)
 8011f6a:	697b      	ldr	r3, [r7, #20]
 8011f6c:	089b      	lsrs	r3, r3, #2
 8011f6e:	400a      	ands	r2, r1
 8011f70:	3302      	adds	r3, #2
 8011f72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681a      	ldr	r2, [r3, #0]
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	005b      	lsls	r3, r3, #1
 8011f7e:	2103      	movs	r1, #3
 8011f80:	fa01 f303 	lsl.w	r3, r1, r3
 8011f84:	43db      	mvns	r3, r3
 8011f86:	401a      	ands	r2, r3
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	08da      	lsrs	r2, r3, #3
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	3208      	adds	r2, #8
 8011f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011f98:	697b      	ldr	r3, [r7, #20]
 8011f9a:	f003 0307 	and.w	r3, r3, #7
 8011f9e:	009b      	lsls	r3, r3, #2
 8011fa0:	220f      	movs	r2, #15
 8011fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8011fa6:	43db      	mvns	r3, r3
 8011fa8:	697a      	ldr	r2, [r7, #20]
 8011faa:	08d2      	lsrs	r2, r2, #3
 8011fac:	4019      	ands	r1, r3
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	3208      	adds	r2, #8
 8011fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	68da      	ldr	r2, [r3, #12]
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	005b      	lsls	r3, r3, #1
 8011fbe:	2103      	movs	r1, #3
 8011fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8011fc4:	43db      	mvns	r3, r3
 8011fc6:	401a      	ands	r2, r3
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	685a      	ldr	r2, [r3, #4]
 8011fd0:	2101      	movs	r1, #1
 8011fd2:	697b      	ldr	r3, [r7, #20]
 8011fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8011fd8:	43db      	mvns	r3, r3
 8011fda:	401a      	ands	r2, r3
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	689a      	ldr	r2, [r3, #8]
 8011fe4:	697b      	ldr	r3, [r7, #20]
 8011fe6:	005b      	lsls	r3, r3, #1
 8011fe8:	2103      	movs	r1, #3
 8011fea:	fa01 f303 	lsl.w	r3, r1, r3
 8011fee:	43db      	mvns	r3, r3
 8011ff0:	401a      	ands	r2, r3
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	3301      	adds	r3, #1
 8011ffa:	617b      	str	r3, [r7, #20]
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	2b0f      	cmp	r3, #15
 8012000:	f67f af40 	bls.w	8011e84 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8012004:	bf00      	nop
 8012006:	bf00      	nop
 8012008:	371c      	adds	r7, #28
 801200a:	46bd      	mov	sp, r7
 801200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012010:	4770      	bx	lr
 8012012:	bf00      	nop
 8012014:	40013800 	.word	0x40013800
 8012018:	40020000 	.word	0x40020000
 801201c:	40020400 	.word	0x40020400
 8012020:	40020800 	.word	0x40020800
 8012024:	40020c00 	.word	0x40020c00
 8012028:	40021000 	.word	0x40021000
 801202c:	40013c00 	.word	0x40013c00

08012030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012030:	b480      	push	{r7}
 8012032:	b085      	sub	sp, #20
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
 8012038:	460b      	mov	r3, r1
 801203a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	691a      	ldr	r2, [r3, #16]
 8012040:	887b      	ldrh	r3, [r7, #2]
 8012042:	4013      	ands	r3, r2
 8012044:	2b00      	cmp	r3, #0
 8012046:	d002      	beq.n	801204e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012048:	2301      	movs	r3, #1
 801204a:	73fb      	strb	r3, [r7, #15]
 801204c:	e001      	b.n	8012052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801204e:	2300      	movs	r3, #0
 8012050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012052:	7bfb      	ldrb	r3, [r7, #15]
}
 8012054:	4618      	mov	r0, r3
 8012056:	3714      	adds	r7, #20
 8012058:	46bd      	mov	sp, r7
 801205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205e:	4770      	bx	lr

08012060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012060:	b480      	push	{r7}
 8012062:	b083      	sub	sp, #12
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	460b      	mov	r3, r1
 801206a:	807b      	strh	r3, [r7, #2]
 801206c:	4613      	mov	r3, r2
 801206e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012070:	787b      	ldrb	r3, [r7, #1]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d003      	beq.n	801207e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012076:	887a      	ldrh	r2, [r7, #2]
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801207c:	e003      	b.n	8012086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801207e:	887b      	ldrh	r3, [r7, #2]
 8012080:	041a      	lsls	r2, r3, #16
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	619a      	str	r2, [r3, #24]
}
 8012086:	bf00      	nop
 8012088:	370c      	adds	r7, #12
 801208a:	46bd      	mov	sp, r7
 801208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012090:	4770      	bx	lr
	...

08012094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d101      	bne.n	80120a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80120a2:	2301      	movs	r3, #1
 80120a4:	e12b      	b.n	80122fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80120ac:	b2db      	uxtb	r3, r3
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d106      	bne.n	80120c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2200      	movs	r2, #0
 80120b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f000 f95d 	bl	801237a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2224      	movs	r2, #36	; 0x24
 80120c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	681a      	ldr	r2, [r3, #0]
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	f022 0201 	bic.w	r2, r2, #1
 80120d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	681a      	ldr	r2, [r3, #0]
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80120e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	681a      	ldr	r2, [r3, #0]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80120f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80120f8:	f001 fc0c 	bl	8013914 <HAL_RCC_GetPCLK1Freq>
 80120fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	4a81      	ldr	r2, [pc, #516]	; (8012308 <HAL_I2C_Init+0x274>)
 8012104:	4293      	cmp	r3, r2
 8012106:	d807      	bhi.n	8012118 <HAL_I2C_Init+0x84>
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	4a80      	ldr	r2, [pc, #512]	; (801230c <HAL_I2C_Init+0x278>)
 801210c:	4293      	cmp	r3, r2
 801210e:	bf94      	ite	ls
 8012110:	2301      	movls	r3, #1
 8012112:	2300      	movhi	r3, #0
 8012114:	b2db      	uxtb	r3, r3
 8012116:	e006      	b.n	8012126 <HAL_I2C_Init+0x92>
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	4a7d      	ldr	r2, [pc, #500]	; (8012310 <HAL_I2C_Init+0x27c>)
 801211c:	4293      	cmp	r3, r2
 801211e:	bf94      	ite	ls
 8012120:	2301      	movls	r3, #1
 8012122:	2300      	movhi	r3, #0
 8012124:	b2db      	uxtb	r3, r3
 8012126:	2b00      	cmp	r3, #0
 8012128:	d001      	beq.n	801212e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801212a:	2301      	movs	r3, #1
 801212c:	e0e7      	b.n	80122fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	4a78      	ldr	r2, [pc, #480]	; (8012314 <HAL_I2C_Init+0x280>)
 8012132:	fba2 2303 	umull	r2, r3, r2, r3
 8012136:	0c9b      	lsrs	r3, r3, #18
 8012138:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	685b      	ldr	r3, [r3, #4]
 8012140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	68ba      	ldr	r2, [r7, #8]
 801214a:	430a      	orrs	r2, r1
 801214c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	6a1b      	ldr	r3, [r3, #32]
 8012154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	685b      	ldr	r3, [r3, #4]
 801215c:	4a6a      	ldr	r2, [pc, #424]	; (8012308 <HAL_I2C_Init+0x274>)
 801215e:	4293      	cmp	r3, r2
 8012160:	d802      	bhi.n	8012168 <HAL_I2C_Init+0xd4>
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	3301      	adds	r3, #1
 8012166:	e009      	b.n	801217c <HAL_I2C_Init+0xe8>
 8012168:	68bb      	ldr	r3, [r7, #8]
 801216a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801216e:	fb02 f303 	mul.w	r3, r2, r3
 8012172:	4a69      	ldr	r2, [pc, #420]	; (8012318 <HAL_I2C_Init+0x284>)
 8012174:	fba2 2303 	umull	r2, r3, r2, r3
 8012178:	099b      	lsrs	r3, r3, #6
 801217a:	3301      	adds	r3, #1
 801217c:	687a      	ldr	r2, [r7, #4]
 801217e:	6812      	ldr	r2, [r2, #0]
 8012180:	430b      	orrs	r3, r1
 8012182:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	69db      	ldr	r3, [r3, #28]
 801218a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801218e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	685b      	ldr	r3, [r3, #4]
 8012196:	495c      	ldr	r1, [pc, #368]	; (8012308 <HAL_I2C_Init+0x274>)
 8012198:	428b      	cmp	r3, r1
 801219a:	d819      	bhi.n	80121d0 <HAL_I2C_Init+0x13c>
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	1e59      	subs	r1, r3, #1
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	685b      	ldr	r3, [r3, #4]
 80121a4:	005b      	lsls	r3, r3, #1
 80121a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80121aa:	1c59      	adds	r1, r3, #1
 80121ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80121b0:	400b      	ands	r3, r1
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d00a      	beq.n	80121cc <HAL_I2C_Init+0x138>
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	1e59      	subs	r1, r3, #1
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	685b      	ldr	r3, [r3, #4]
 80121be:	005b      	lsls	r3, r3, #1
 80121c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80121c4:	3301      	adds	r3, #1
 80121c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80121ca:	e051      	b.n	8012270 <HAL_I2C_Init+0x1dc>
 80121cc:	2304      	movs	r3, #4
 80121ce:	e04f      	b.n	8012270 <HAL_I2C_Init+0x1dc>
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	689b      	ldr	r3, [r3, #8]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d111      	bne.n	80121fc <HAL_I2C_Init+0x168>
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	1e58      	subs	r0, r3, #1
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	6859      	ldr	r1, [r3, #4]
 80121e0:	460b      	mov	r3, r1
 80121e2:	005b      	lsls	r3, r3, #1
 80121e4:	440b      	add	r3, r1
 80121e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80121ea:	3301      	adds	r3, #1
 80121ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	bf0c      	ite	eq
 80121f4:	2301      	moveq	r3, #1
 80121f6:	2300      	movne	r3, #0
 80121f8:	b2db      	uxtb	r3, r3
 80121fa:	e012      	b.n	8012222 <HAL_I2C_Init+0x18e>
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	1e58      	subs	r0, r3, #1
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6859      	ldr	r1, [r3, #4]
 8012204:	460b      	mov	r3, r1
 8012206:	009b      	lsls	r3, r3, #2
 8012208:	440b      	add	r3, r1
 801220a:	0099      	lsls	r1, r3, #2
 801220c:	440b      	add	r3, r1
 801220e:	fbb0 f3f3 	udiv	r3, r0, r3
 8012212:	3301      	adds	r3, #1
 8012214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012218:	2b00      	cmp	r3, #0
 801221a:	bf0c      	ite	eq
 801221c:	2301      	moveq	r3, #1
 801221e:	2300      	movne	r3, #0
 8012220:	b2db      	uxtb	r3, r3
 8012222:	2b00      	cmp	r3, #0
 8012224:	d001      	beq.n	801222a <HAL_I2C_Init+0x196>
 8012226:	2301      	movs	r3, #1
 8012228:	e022      	b.n	8012270 <HAL_I2C_Init+0x1dc>
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	689b      	ldr	r3, [r3, #8]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d10e      	bne.n	8012250 <HAL_I2C_Init+0x1bc>
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	1e58      	subs	r0, r3, #1
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	6859      	ldr	r1, [r3, #4]
 801223a:	460b      	mov	r3, r1
 801223c:	005b      	lsls	r3, r3, #1
 801223e:	440b      	add	r3, r1
 8012240:	fbb0 f3f3 	udiv	r3, r0, r3
 8012244:	3301      	adds	r3, #1
 8012246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801224a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801224e:	e00f      	b.n	8012270 <HAL_I2C_Init+0x1dc>
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	1e58      	subs	r0, r3, #1
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6859      	ldr	r1, [r3, #4]
 8012258:	460b      	mov	r3, r1
 801225a:	009b      	lsls	r3, r3, #2
 801225c:	440b      	add	r3, r1
 801225e:	0099      	lsls	r1, r3, #2
 8012260:	440b      	add	r3, r1
 8012262:	fbb0 f3f3 	udiv	r3, r0, r3
 8012266:	3301      	adds	r3, #1
 8012268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801226c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012270:	6879      	ldr	r1, [r7, #4]
 8012272:	6809      	ldr	r1, [r1, #0]
 8012274:	4313      	orrs	r3, r2
 8012276:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	69da      	ldr	r2, [r3, #28]
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	6a1b      	ldr	r3, [r3, #32]
 801228a:	431a      	orrs	r2, r3
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	430a      	orrs	r2, r1
 8012292:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	689b      	ldr	r3, [r3, #8]
 801229a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801229e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80122a2:	687a      	ldr	r2, [r7, #4]
 80122a4:	6911      	ldr	r1, [r2, #16]
 80122a6:	687a      	ldr	r2, [r7, #4]
 80122a8:	68d2      	ldr	r2, [r2, #12]
 80122aa:	4311      	orrs	r1, r2
 80122ac:	687a      	ldr	r2, [r7, #4]
 80122ae:	6812      	ldr	r2, [r2, #0]
 80122b0:	430b      	orrs	r3, r1
 80122b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	68db      	ldr	r3, [r3, #12]
 80122ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	695a      	ldr	r2, [r3, #20]
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	699b      	ldr	r3, [r3, #24]
 80122c6:	431a      	orrs	r2, r3
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	430a      	orrs	r2, r1
 80122ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	681a      	ldr	r2, [r3, #0]
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	f042 0201 	orr.w	r2, r2, #1
 80122de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2200      	movs	r2, #0
 80122e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	2220      	movs	r2, #32
 80122ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2200      	movs	r2, #0
 80122f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2200      	movs	r2, #0
 80122f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80122fc:	2300      	movs	r3, #0
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3710      	adds	r7, #16
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
 8012306:	bf00      	nop
 8012308:	000186a0 	.word	0x000186a0
 801230c:	001e847f 	.word	0x001e847f
 8012310:	003d08ff 	.word	0x003d08ff
 8012314:	431bde83 	.word	0x431bde83
 8012318:	10624dd3 	.word	0x10624dd3

0801231c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b082      	sub	sp, #8
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d101      	bne.n	801232e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 801232a:	2301      	movs	r3, #1
 801232c:	e021      	b.n	8012372 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2224      	movs	r2, #36	; 0x24
 8012332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	681a      	ldr	r2, [r3, #0]
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	f022 0201 	bic.w	r2, r2, #1
 8012344:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8012346:	6878      	ldr	r0, [r7, #4]
 8012348:	f000 f821 	bl	801238e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2200      	movs	r2, #0
 8012350:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2200      	movs	r2, #0
 8012356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	2200      	movs	r2, #0
 801235e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2200      	movs	r2, #0
 8012364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	2200      	movs	r2, #0
 801236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012370:	2300      	movs	r3, #0
}
 8012372:	4618      	mov	r0, r3
 8012374:	3708      	adds	r7, #8
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}

0801237a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 801237a:	b480      	push	{r7}
 801237c:	b083      	sub	sp, #12
 801237e:	af00      	add	r7, sp, #0
 8012380:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8012382:	bf00      	nop
 8012384:	370c      	adds	r7, #12
 8012386:	46bd      	mov	sp, r7
 8012388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238c:	4770      	bx	lr

0801238e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 801238e:	b480      	push	{r7}
 8012390:	b083      	sub	sp, #12
 8012392:	af00      	add	r7, sp, #0
 8012394:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8012396:	bf00      	nop
 8012398:	370c      	adds	r7, #12
 801239a:	46bd      	mov	sp, r7
 801239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a0:	4770      	bx	lr
	...

080123a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b088      	sub	sp, #32
 80123a8:	af02      	add	r7, sp, #8
 80123aa:	60f8      	str	r0, [r7, #12]
 80123ac:	607a      	str	r2, [r7, #4]
 80123ae:	461a      	mov	r2, r3
 80123b0:	460b      	mov	r3, r1
 80123b2:	817b      	strh	r3, [r7, #10]
 80123b4:	4613      	mov	r3, r2
 80123b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80123b8:	f7ff fabc 	bl	8011934 <HAL_GetTick>
 80123bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	2b20      	cmp	r3, #32
 80123c8:	f040 80e0 	bne.w	801258c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	9300      	str	r3, [sp, #0]
 80123d0:	2319      	movs	r3, #25
 80123d2:	2201      	movs	r2, #1
 80123d4:	4970      	ldr	r1, [pc, #448]	; (8012598 <HAL_I2C_Master_Transmit+0x1f4>)
 80123d6:	68f8      	ldr	r0, [r7, #12]
 80123d8:	f000 fc72 	bl	8012cc0 <I2C_WaitOnFlagUntilTimeout>
 80123dc:	4603      	mov	r3, r0
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d001      	beq.n	80123e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80123e2:	2302      	movs	r3, #2
 80123e4:	e0d3      	b.n	801258e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	d101      	bne.n	80123f4 <HAL_I2C_Master_Transmit+0x50>
 80123f0:	2302      	movs	r3, #2
 80123f2:	e0cc      	b.n	801258e <HAL_I2C_Master_Transmit+0x1ea>
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	2201      	movs	r2, #1
 80123f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	f003 0301 	and.w	r3, r3, #1
 8012406:	2b01      	cmp	r3, #1
 8012408:	d007      	beq.n	801241a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	681a      	ldr	r2, [r3, #0]
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	f042 0201 	orr.w	r2, r2, #1
 8012418:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	681a      	ldr	r2, [r3, #0]
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012428:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	2221      	movs	r2, #33	; 0x21
 801242e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	2210      	movs	r2, #16
 8012436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	2200      	movs	r2, #0
 801243e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	687a      	ldr	r2, [r7, #4]
 8012444:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	893a      	ldrh	r2, [r7, #8]
 801244a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012450:	b29a      	uxth	r2, r3
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	4a50      	ldr	r2, [pc, #320]	; (801259c <HAL_I2C_Master_Transmit+0x1f8>)
 801245a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 801245c:	8979      	ldrh	r1, [r7, #10]
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	6a3a      	ldr	r2, [r7, #32]
 8012462:	68f8      	ldr	r0, [r7, #12]
 8012464:	f000 fadc 	bl	8012a20 <I2C_MasterRequestWrite>
 8012468:	4603      	mov	r3, r0
 801246a:	2b00      	cmp	r3, #0
 801246c:	d001      	beq.n	8012472 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 801246e:	2301      	movs	r3, #1
 8012470:	e08d      	b.n	801258e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012472:	2300      	movs	r3, #0
 8012474:	613b      	str	r3, [r7, #16]
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	695b      	ldr	r3, [r3, #20]
 801247c:	613b      	str	r3, [r7, #16]
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	699b      	ldr	r3, [r3, #24]
 8012484:	613b      	str	r3, [r7, #16]
 8012486:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8012488:	e066      	b.n	8012558 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801248a:	697a      	ldr	r2, [r7, #20]
 801248c:	6a39      	ldr	r1, [r7, #32]
 801248e:	68f8      	ldr	r0, [r7, #12]
 8012490:	f000 fcec 	bl	8012e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8012494:	4603      	mov	r3, r0
 8012496:	2b00      	cmp	r3, #0
 8012498:	d00d      	beq.n	80124b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801249e:	2b04      	cmp	r3, #4
 80124a0:	d107      	bne.n	80124b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	681a      	ldr	r2, [r3, #0]
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80124b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80124b2:	2301      	movs	r3, #1
 80124b4:	e06b      	b.n	801258e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ba:	781a      	ldrb	r2, [r3, #0]
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124c6:	1c5a      	adds	r2, r3, #1
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80124d0:	b29b      	uxth	r3, r3
 80124d2:	3b01      	subs	r3, #1
 80124d4:	b29a      	uxth	r2, r3
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80124de:	3b01      	subs	r3, #1
 80124e0:	b29a      	uxth	r2, r3
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	695b      	ldr	r3, [r3, #20]
 80124ec:	f003 0304 	and.w	r3, r3, #4
 80124f0:	2b04      	cmp	r3, #4
 80124f2:	d11b      	bne.n	801252c <HAL_I2C_Master_Transmit+0x188>
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d017      	beq.n	801252c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012500:	781a      	ldrb	r2, [r3, #0]
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801250c:	1c5a      	adds	r2, r3, #1
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012516:	b29b      	uxth	r3, r3
 8012518:	3b01      	subs	r3, #1
 801251a:	b29a      	uxth	r2, r3
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012524:	3b01      	subs	r3, #1
 8012526:	b29a      	uxth	r2, r3
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801252c:	697a      	ldr	r2, [r7, #20]
 801252e:	6a39      	ldr	r1, [r7, #32]
 8012530:	68f8      	ldr	r0, [r7, #12]
 8012532:	f000 fcdc 	bl	8012eee <I2C_WaitOnBTFFlagUntilTimeout>
 8012536:	4603      	mov	r3, r0
 8012538:	2b00      	cmp	r3, #0
 801253a:	d00d      	beq.n	8012558 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012540:	2b04      	cmp	r3, #4
 8012542:	d107      	bne.n	8012554 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	681a      	ldr	r2, [r3, #0]
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012552:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8012554:	2301      	movs	r3, #1
 8012556:	e01a      	b.n	801258e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801255c:	2b00      	cmp	r3, #0
 801255e:	d194      	bne.n	801248a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	681a      	ldr	r2, [r3, #0]
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801256e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	2220      	movs	r2, #32
 8012574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	2200      	movs	r2, #0
 801257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	2200      	movs	r2, #0
 8012584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8012588:	2300      	movs	r3, #0
 801258a:	e000      	b.n	801258e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801258c:	2302      	movs	r3, #2
  }
}
 801258e:	4618      	mov	r0, r3
 8012590:	3718      	adds	r7, #24
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}
 8012596:	bf00      	nop
 8012598:	00100002 	.word	0x00100002
 801259c:	ffff0000 	.word	0xffff0000

080125a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b08c      	sub	sp, #48	; 0x30
 80125a4:	af02      	add	r7, sp, #8
 80125a6:	60f8      	str	r0, [r7, #12]
 80125a8:	607a      	str	r2, [r7, #4]
 80125aa:	461a      	mov	r2, r3
 80125ac:	460b      	mov	r3, r1
 80125ae:	817b      	strh	r3, [r7, #10]
 80125b0:	4613      	mov	r3, r2
 80125b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80125b4:	f7ff f9be 	bl	8011934 <HAL_GetTick>
 80125b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80125c0:	b2db      	uxtb	r3, r3
 80125c2:	2b20      	cmp	r3, #32
 80125c4:	f040 820b 	bne.w	80129de <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80125c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ca:	9300      	str	r3, [sp, #0]
 80125cc:	2319      	movs	r3, #25
 80125ce:	2201      	movs	r2, #1
 80125d0:	497c      	ldr	r1, [pc, #496]	; (80127c4 <HAL_I2C_Master_Receive+0x224>)
 80125d2:	68f8      	ldr	r0, [r7, #12]
 80125d4:	f000 fb74 	bl	8012cc0 <I2C_WaitOnFlagUntilTimeout>
 80125d8:	4603      	mov	r3, r0
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d001      	beq.n	80125e2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80125de:	2302      	movs	r3, #2
 80125e0:	e1fe      	b.n	80129e0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80125e8:	2b01      	cmp	r3, #1
 80125ea:	d101      	bne.n	80125f0 <HAL_I2C_Master_Receive+0x50>
 80125ec:	2302      	movs	r3, #2
 80125ee:	e1f7      	b.n	80129e0 <HAL_I2C_Master_Receive+0x440>
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	2201      	movs	r2, #1
 80125f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	f003 0301 	and.w	r3, r3, #1
 8012602:	2b01      	cmp	r3, #1
 8012604:	d007      	beq.n	8012616 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	681a      	ldr	r2, [r3, #0]
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	f042 0201 	orr.w	r2, r2, #1
 8012614:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	681a      	ldr	r2, [r3, #0]
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012624:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	2222      	movs	r2, #34	; 0x22
 801262a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	2210      	movs	r2, #16
 8012632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	2200      	movs	r2, #0
 801263a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	687a      	ldr	r2, [r7, #4]
 8012640:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	893a      	ldrh	r2, [r7, #8]
 8012646:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801264c:	b29a      	uxth	r2, r3
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	4a5c      	ldr	r2, [pc, #368]	; (80127c8 <HAL_I2C_Master_Receive+0x228>)
 8012656:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8012658:	8979      	ldrh	r1, [r7, #10]
 801265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801265c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801265e:	68f8      	ldr	r0, [r7, #12]
 8012660:	f000 fa60 	bl	8012b24 <I2C_MasterRequestRead>
 8012664:	4603      	mov	r3, r0
 8012666:	2b00      	cmp	r3, #0
 8012668:	d001      	beq.n	801266e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 801266a:	2301      	movs	r3, #1
 801266c:	e1b8      	b.n	80129e0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012672:	2b00      	cmp	r3, #0
 8012674:	d113      	bne.n	801269e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012676:	2300      	movs	r3, #0
 8012678:	623b      	str	r3, [r7, #32]
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	695b      	ldr	r3, [r3, #20]
 8012680:	623b      	str	r3, [r7, #32]
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	699b      	ldr	r3, [r3, #24]
 8012688:	623b      	str	r3, [r7, #32]
 801268a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	681a      	ldr	r2, [r3, #0]
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801269a:	601a      	str	r2, [r3, #0]
 801269c:	e18c      	b.n	80129b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80126a2:	2b01      	cmp	r3, #1
 80126a4:	d11b      	bne.n	80126de <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	681a      	ldr	r2, [r3, #0]
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80126b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80126b6:	2300      	movs	r3, #0
 80126b8:	61fb      	str	r3, [r7, #28]
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	695b      	ldr	r3, [r3, #20]
 80126c0:	61fb      	str	r3, [r7, #28]
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	699b      	ldr	r3, [r3, #24]
 80126c8:	61fb      	str	r3, [r7, #28]
 80126ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	681a      	ldr	r2, [r3, #0]
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80126da:	601a      	str	r2, [r3, #0]
 80126dc:	e16c      	b.n	80129b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80126e2:	2b02      	cmp	r3, #2
 80126e4:	d11b      	bne.n	801271e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	681a      	ldr	r2, [r3, #0]
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80126f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	681a      	ldr	r2, [r3, #0]
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012704:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012706:	2300      	movs	r3, #0
 8012708:	61bb      	str	r3, [r7, #24]
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	695b      	ldr	r3, [r3, #20]
 8012710:	61bb      	str	r3, [r7, #24]
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	699b      	ldr	r3, [r3, #24]
 8012718:	61bb      	str	r3, [r7, #24]
 801271a:	69bb      	ldr	r3, [r7, #24]
 801271c:	e14c      	b.n	80129b8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	681a      	ldr	r2, [r3, #0]
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801272c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801272e:	2300      	movs	r3, #0
 8012730:	617b      	str	r3, [r7, #20]
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	695b      	ldr	r3, [r3, #20]
 8012738:	617b      	str	r3, [r7, #20]
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	699b      	ldr	r3, [r3, #24]
 8012740:	617b      	str	r3, [r7, #20]
 8012742:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8012744:	e138      	b.n	80129b8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801274a:	2b03      	cmp	r3, #3
 801274c:	f200 80f1 	bhi.w	8012932 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012754:	2b01      	cmp	r3, #1
 8012756:	d123      	bne.n	80127a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801275a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801275c:	68f8      	ldr	r0, [r7, #12]
 801275e:	f000 fc07 	bl	8012f70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012762:	4603      	mov	r3, r0
 8012764:	2b00      	cmp	r3, #0
 8012766:	d001      	beq.n	801276c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8012768:	2301      	movs	r3, #1
 801276a:	e139      	b.n	80129e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	691a      	ldr	r2, [r3, #16]
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012776:	b2d2      	uxtb	r2, r2
 8012778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801277e:	1c5a      	adds	r2, r3, #1
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012788:	3b01      	subs	r3, #1
 801278a:	b29a      	uxth	r2, r3
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012794:	b29b      	uxth	r3, r3
 8012796:	3b01      	subs	r3, #1
 8012798:	b29a      	uxth	r2, r3
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801279e:	e10b      	b.n	80129b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127a4:	2b02      	cmp	r3, #2
 80127a6:	d14e      	bne.n	8012846 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80127a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127aa:	9300      	str	r3, [sp, #0]
 80127ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ae:	2200      	movs	r2, #0
 80127b0:	4906      	ldr	r1, [pc, #24]	; (80127cc <HAL_I2C_Master_Receive+0x22c>)
 80127b2:	68f8      	ldr	r0, [r7, #12]
 80127b4:	f000 fa84 	bl	8012cc0 <I2C_WaitOnFlagUntilTimeout>
 80127b8:	4603      	mov	r3, r0
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d008      	beq.n	80127d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80127be:	2301      	movs	r3, #1
 80127c0:	e10e      	b.n	80129e0 <HAL_I2C_Master_Receive+0x440>
 80127c2:	bf00      	nop
 80127c4:	00100002 	.word	0x00100002
 80127c8:	ffff0000 	.word	0xffff0000
 80127cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	681a      	ldr	r2, [r3, #0]
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80127de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	691a      	ldr	r2, [r3, #16]
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127ea:	b2d2      	uxtb	r2, r2
 80127ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127f2:	1c5a      	adds	r2, r3, #1
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127fc:	3b01      	subs	r3, #1
 80127fe:	b29a      	uxth	r2, r3
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012808:	b29b      	uxth	r3, r3
 801280a:	3b01      	subs	r3, #1
 801280c:	b29a      	uxth	r2, r3
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	691a      	ldr	r2, [r3, #16]
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801281c:	b2d2      	uxtb	r2, r2
 801281e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012824:	1c5a      	adds	r2, r3, #1
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801282e:	3b01      	subs	r3, #1
 8012830:	b29a      	uxth	r2, r3
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801283a:	b29b      	uxth	r3, r3
 801283c:	3b01      	subs	r3, #1
 801283e:	b29a      	uxth	r2, r3
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012844:	e0b8      	b.n	80129b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012848:	9300      	str	r3, [sp, #0]
 801284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801284c:	2200      	movs	r2, #0
 801284e:	4966      	ldr	r1, [pc, #408]	; (80129e8 <HAL_I2C_Master_Receive+0x448>)
 8012850:	68f8      	ldr	r0, [r7, #12]
 8012852:	f000 fa35 	bl	8012cc0 <I2C_WaitOnFlagUntilTimeout>
 8012856:	4603      	mov	r3, r0
 8012858:	2b00      	cmp	r3, #0
 801285a:	d001      	beq.n	8012860 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 801285c:	2301      	movs	r3, #1
 801285e:	e0bf      	b.n	80129e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	681a      	ldr	r2, [r3, #0]
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801286e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	691a      	ldr	r2, [r3, #16]
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801287a:	b2d2      	uxtb	r2, r2
 801287c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012882:	1c5a      	adds	r2, r3, #1
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801288c:	3b01      	subs	r3, #1
 801288e:	b29a      	uxth	r2, r3
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012898:	b29b      	uxth	r3, r3
 801289a:	3b01      	subs	r3, #1
 801289c:	b29a      	uxth	r2, r3
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80128a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a4:	9300      	str	r3, [sp, #0]
 80128a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128a8:	2200      	movs	r2, #0
 80128aa:	494f      	ldr	r1, [pc, #316]	; (80129e8 <HAL_I2C_Master_Receive+0x448>)
 80128ac:	68f8      	ldr	r0, [r7, #12]
 80128ae:	f000 fa07 	bl	8012cc0 <I2C_WaitOnFlagUntilTimeout>
 80128b2:	4603      	mov	r3, r0
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d001      	beq.n	80128bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80128b8:	2301      	movs	r3, #1
 80128ba:	e091      	b.n	80129e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	681a      	ldr	r2, [r3, #0]
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80128ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	691a      	ldr	r2, [r3, #16]
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128d6:	b2d2      	uxtb	r2, r2
 80128d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128de:	1c5a      	adds	r2, r3, #1
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80128e8:	3b01      	subs	r3, #1
 80128ea:	b29a      	uxth	r2, r3
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80128f4:	b29b      	uxth	r3, r3
 80128f6:	3b01      	subs	r3, #1
 80128f8:	b29a      	uxth	r2, r3
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	691a      	ldr	r2, [r3, #16]
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012908:	b2d2      	uxtb	r2, r2
 801290a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012910:	1c5a      	adds	r2, r3, #1
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801291a:	3b01      	subs	r3, #1
 801291c:	b29a      	uxth	r2, r3
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012926:	b29b      	uxth	r3, r3
 8012928:	3b01      	subs	r3, #1
 801292a:	b29a      	uxth	r2, r3
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012930:	e042      	b.n	80129b8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012934:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012936:	68f8      	ldr	r0, [r7, #12]
 8012938:	f000 fb1a 	bl	8012f70 <I2C_WaitOnRXNEFlagUntilTimeout>
 801293c:	4603      	mov	r3, r0
 801293e:	2b00      	cmp	r3, #0
 8012940:	d001      	beq.n	8012946 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8012942:	2301      	movs	r3, #1
 8012944:	e04c      	b.n	80129e0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	691a      	ldr	r2, [r3, #16]
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012950:	b2d2      	uxtb	r2, r2
 8012952:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012958:	1c5a      	adds	r2, r3, #1
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012962:	3b01      	subs	r3, #1
 8012964:	b29a      	uxth	r2, r3
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801296e:	b29b      	uxth	r3, r3
 8012970:	3b01      	subs	r3, #1
 8012972:	b29a      	uxth	r2, r3
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	695b      	ldr	r3, [r3, #20]
 801297e:	f003 0304 	and.w	r3, r3, #4
 8012982:	2b04      	cmp	r3, #4
 8012984:	d118      	bne.n	80129b8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	691a      	ldr	r2, [r3, #16]
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012990:	b2d2      	uxtb	r2, r2
 8012992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012998:	1c5a      	adds	r2, r3, #1
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80129a2:	3b01      	subs	r3, #1
 80129a4:	b29a      	uxth	r2, r3
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80129ae:	b29b      	uxth	r3, r3
 80129b0:	3b01      	subs	r3, #1
 80129b2:	b29a      	uxth	r2, r3
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80129bc:	2b00      	cmp	r3, #0
 80129be:	f47f aec2 	bne.w	8012746 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	2220      	movs	r2, #32
 80129c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	2200      	movs	r2, #0
 80129ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	2200      	movs	r2, #0
 80129d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80129da:	2300      	movs	r3, #0
 80129dc:	e000      	b.n	80129e0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80129de:	2302      	movs	r3, #2
  }
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	3728      	adds	r7, #40	; 0x28
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}
 80129e8:	00010004 	.word	0x00010004

080129ec <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80129ec:	b480      	push	{r7}
 80129ee:	b083      	sub	sp, #12
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80129fa:	b2db      	uxtb	r3, r3
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	370c      	adds	r7, #12
 8012a00:	46bd      	mov	sp, r7
 8012a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a06:	4770      	bx	lr

08012a08 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b083      	sub	sp, #12
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8012a14:	4618      	mov	r0, r3
 8012a16:	370c      	adds	r7, #12
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1e:	4770      	bx	lr

08012a20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b088      	sub	sp, #32
 8012a24:	af02      	add	r7, sp, #8
 8012a26:	60f8      	str	r0, [r7, #12]
 8012a28:	607a      	str	r2, [r7, #4]
 8012a2a:	603b      	str	r3, [r7, #0]
 8012a2c:	460b      	mov	r3, r1
 8012a2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	2b08      	cmp	r3, #8
 8012a3a:	d006      	beq.n	8012a4a <I2C_MasterRequestWrite+0x2a>
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	2b01      	cmp	r3, #1
 8012a40:	d003      	beq.n	8012a4a <I2C_MasterRequestWrite+0x2a>
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012a48:	d108      	bne.n	8012a5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	681a      	ldr	r2, [r3, #0]
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012a58:	601a      	str	r2, [r3, #0]
 8012a5a:	e00b      	b.n	8012a74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a60:	2b12      	cmp	r3, #18
 8012a62:	d107      	bne.n	8012a74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	681a      	ldr	r2, [r3, #0]
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012a72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	9300      	str	r3, [sp, #0]
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012a80:	68f8      	ldr	r0, [r7, #12]
 8012a82:	f000 f91d 	bl	8012cc0 <I2C_WaitOnFlagUntilTimeout>
 8012a86:	4603      	mov	r3, r0
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d00d      	beq.n	8012aa8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012a9a:	d103      	bne.n	8012aa4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012aa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8012aa4:	2303      	movs	r3, #3
 8012aa6:	e035      	b.n	8012b14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	691b      	ldr	r3, [r3, #16]
 8012aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012ab0:	d108      	bne.n	8012ac4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8012ab2:	897b      	ldrh	r3, [r7, #10]
 8012ab4:	b2db      	uxtb	r3, r3
 8012ab6:	461a      	mov	r2, r3
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8012ac0:	611a      	str	r2, [r3, #16]
 8012ac2:	e01b      	b.n	8012afc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8012ac4:	897b      	ldrh	r3, [r7, #10]
 8012ac6:	11db      	asrs	r3, r3, #7
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	f003 0306 	and.w	r3, r3, #6
 8012ace:	b2db      	uxtb	r3, r3
 8012ad0:	f063 030f 	orn	r3, r3, #15
 8012ad4:	b2da      	uxtb	r2, r3
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	687a      	ldr	r2, [r7, #4]
 8012ae0:	490e      	ldr	r1, [pc, #56]	; (8012b1c <I2C_MasterRequestWrite+0xfc>)
 8012ae2:	68f8      	ldr	r0, [r7, #12]
 8012ae4:	f000 f943 	bl	8012d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d001      	beq.n	8012af2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8012aee:	2301      	movs	r3, #1
 8012af0:	e010      	b.n	8012b14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8012af2:	897b      	ldrh	r3, [r7, #10]
 8012af4:	b2da      	uxtb	r2, r3
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	687a      	ldr	r2, [r7, #4]
 8012b00:	4907      	ldr	r1, [pc, #28]	; (8012b20 <I2C_MasterRequestWrite+0x100>)
 8012b02:	68f8      	ldr	r0, [r7, #12]
 8012b04:	f000 f933 	bl	8012d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d001      	beq.n	8012b12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8012b0e:	2301      	movs	r3, #1
 8012b10:	e000      	b.n	8012b14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8012b12:	2300      	movs	r3, #0
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	3718      	adds	r7, #24
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}
 8012b1c:	00010008 	.word	0x00010008
 8012b20:	00010002 	.word	0x00010002

08012b24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b088      	sub	sp, #32
 8012b28:	af02      	add	r7, sp, #8
 8012b2a:	60f8      	str	r0, [r7, #12]
 8012b2c:	607a      	str	r2, [r7, #4]
 8012b2e:	603b      	str	r3, [r7, #0]
 8012b30:	460b      	mov	r3, r1
 8012b32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	681a      	ldr	r2, [r3, #0]
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012b48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	2b08      	cmp	r3, #8
 8012b4e:	d006      	beq.n	8012b5e <I2C_MasterRequestRead+0x3a>
 8012b50:	697b      	ldr	r3, [r7, #20]
 8012b52:	2b01      	cmp	r3, #1
 8012b54:	d003      	beq.n	8012b5e <I2C_MasterRequestRead+0x3a>
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012b5c:	d108      	bne.n	8012b70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	681a      	ldr	r2, [r3, #0]
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012b6c:	601a      	str	r2, [r3, #0]
 8012b6e:	e00b      	b.n	8012b88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b74:	2b11      	cmp	r3, #17
 8012b76:	d107      	bne.n	8012b88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	681a      	ldr	r2, [r3, #0]
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012b86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012b88:	683b      	ldr	r3, [r7, #0]
 8012b8a:	9300      	str	r3, [sp, #0]
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	2200      	movs	r2, #0
 8012b90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012b94:	68f8      	ldr	r0, [r7, #12]
 8012b96:	f000 f893 	bl	8012cc0 <I2C_WaitOnFlagUntilTimeout>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d00d      	beq.n	8012bbc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012bae:	d103      	bne.n	8012bb8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8012bb8:	2303      	movs	r3, #3
 8012bba:	e079      	b.n	8012cb0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	691b      	ldr	r3, [r3, #16]
 8012bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012bc4:	d108      	bne.n	8012bd8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8012bc6:	897b      	ldrh	r3, [r7, #10]
 8012bc8:	b2db      	uxtb	r3, r3
 8012bca:	f043 0301 	orr.w	r3, r3, #1
 8012bce:	b2da      	uxtb	r2, r3
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	611a      	str	r2, [r3, #16]
 8012bd6:	e05f      	b.n	8012c98 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8012bd8:	897b      	ldrh	r3, [r7, #10]
 8012bda:	11db      	asrs	r3, r3, #7
 8012bdc:	b2db      	uxtb	r3, r3
 8012bde:	f003 0306 	and.w	r3, r3, #6
 8012be2:	b2db      	uxtb	r3, r3
 8012be4:	f063 030f 	orn	r3, r3, #15
 8012be8:	b2da      	uxtb	r2, r3
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	687a      	ldr	r2, [r7, #4]
 8012bf4:	4930      	ldr	r1, [pc, #192]	; (8012cb8 <I2C_MasterRequestRead+0x194>)
 8012bf6:	68f8      	ldr	r0, [r7, #12]
 8012bf8:	f000 f8b9 	bl	8012d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d001      	beq.n	8012c06 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8012c02:	2301      	movs	r3, #1
 8012c04:	e054      	b.n	8012cb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8012c06:	897b      	ldrh	r3, [r7, #10]
 8012c08:	b2da      	uxtb	r2, r3
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	687a      	ldr	r2, [r7, #4]
 8012c14:	4929      	ldr	r1, [pc, #164]	; (8012cbc <I2C_MasterRequestRead+0x198>)
 8012c16:	68f8      	ldr	r0, [r7, #12]
 8012c18:	f000 f8a9 	bl	8012d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d001      	beq.n	8012c26 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8012c22:	2301      	movs	r3, #1
 8012c24:	e044      	b.n	8012cb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012c26:	2300      	movs	r3, #0
 8012c28:	613b      	str	r3, [r7, #16]
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	695b      	ldr	r3, [r3, #20]
 8012c30:	613b      	str	r3, [r7, #16]
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	699b      	ldr	r3, [r3, #24]
 8012c38:	613b      	str	r3, [r7, #16]
 8012c3a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	681a      	ldr	r2, [r3, #0]
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012c4a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	9300      	str	r3, [sp, #0]
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	2200      	movs	r2, #0
 8012c54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012c58:	68f8      	ldr	r0, [r7, #12]
 8012c5a:	f000 f831 	bl	8012cc0 <I2C_WaitOnFlagUntilTimeout>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d00d      	beq.n	8012c80 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c72:	d103      	bne.n	8012c7c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012c7a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8012c7c:	2303      	movs	r3, #3
 8012c7e:	e017      	b.n	8012cb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8012c80:	897b      	ldrh	r3, [r7, #10]
 8012c82:	11db      	asrs	r3, r3, #7
 8012c84:	b2db      	uxtb	r3, r3
 8012c86:	f003 0306 	and.w	r3, r3, #6
 8012c8a:	b2db      	uxtb	r3, r3
 8012c8c:	f063 030e 	orn	r3, r3, #14
 8012c90:	b2da      	uxtb	r2, r3
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	687a      	ldr	r2, [r7, #4]
 8012c9c:	4907      	ldr	r1, [pc, #28]	; (8012cbc <I2C_MasterRequestRead+0x198>)
 8012c9e:	68f8      	ldr	r0, [r7, #12]
 8012ca0:	f000 f865 	bl	8012d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d001      	beq.n	8012cae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8012caa:	2301      	movs	r3, #1
 8012cac:	e000      	b.n	8012cb0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8012cae:	2300      	movs	r3, #0
}
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	3718      	adds	r7, #24
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd80      	pop	{r7, pc}
 8012cb8:	00010008 	.word	0x00010008
 8012cbc:	00010002 	.word	0x00010002

08012cc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b084      	sub	sp, #16
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	60f8      	str	r0, [r7, #12]
 8012cc8:	60b9      	str	r1, [r7, #8]
 8012cca:	603b      	str	r3, [r7, #0]
 8012ccc:	4613      	mov	r3, r2
 8012cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012cd0:	e025      	b.n	8012d1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012cd2:	683b      	ldr	r3, [r7, #0]
 8012cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cd8:	d021      	beq.n	8012d1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012cda:	f7fe fe2b 	bl	8011934 <HAL_GetTick>
 8012cde:	4602      	mov	r2, r0
 8012ce0:	69bb      	ldr	r3, [r7, #24]
 8012ce2:	1ad3      	subs	r3, r2, r3
 8012ce4:	683a      	ldr	r2, [r7, #0]
 8012ce6:	429a      	cmp	r2, r3
 8012ce8:	d302      	bcc.n	8012cf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d116      	bne.n	8012d1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	2220      	movs	r2, #32
 8012cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	2200      	movs	r2, #0
 8012d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d0a:	f043 0220 	orr.w	r2, r3, #32
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	2200      	movs	r2, #0
 8012d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	e023      	b.n	8012d66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	0c1b      	lsrs	r3, r3, #16
 8012d22:	b2db      	uxtb	r3, r3
 8012d24:	2b01      	cmp	r3, #1
 8012d26:	d10d      	bne.n	8012d44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	695b      	ldr	r3, [r3, #20]
 8012d2e:	43da      	mvns	r2, r3
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	4013      	ands	r3, r2
 8012d34:	b29b      	uxth	r3, r3
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	bf0c      	ite	eq
 8012d3a:	2301      	moveq	r3, #1
 8012d3c:	2300      	movne	r3, #0
 8012d3e:	b2db      	uxtb	r3, r3
 8012d40:	461a      	mov	r2, r3
 8012d42:	e00c      	b.n	8012d5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	699b      	ldr	r3, [r3, #24]
 8012d4a:	43da      	mvns	r2, r3
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	4013      	ands	r3, r2
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	bf0c      	ite	eq
 8012d56:	2301      	moveq	r3, #1
 8012d58:	2300      	movne	r3, #0
 8012d5a:	b2db      	uxtb	r3, r3
 8012d5c:	461a      	mov	r2, r3
 8012d5e:	79fb      	ldrb	r3, [r7, #7]
 8012d60:	429a      	cmp	r2, r3
 8012d62:	d0b6      	beq.n	8012cd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012d64:	2300      	movs	r3, #0
}
 8012d66:	4618      	mov	r0, r3
 8012d68:	3710      	adds	r7, #16
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}

08012d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8012d6e:	b580      	push	{r7, lr}
 8012d70:	b084      	sub	sp, #16
 8012d72:	af00      	add	r7, sp, #0
 8012d74:	60f8      	str	r0, [r7, #12]
 8012d76:	60b9      	str	r1, [r7, #8]
 8012d78:	607a      	str	r2, [r7, #4]
 8012d7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8012d7c:	e051      	b.n	8012e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	695b      	ldr	r3, [r3, #20]
 8012d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012d8c:	d123      	bne.n	8012dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	681a      	ldr	r2, [r3, #0]
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012d9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8012da6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	2200      	movs	r2, #0
 8012dac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	2220      	movs	r2, #32
 8012db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	2200      	movs	r2, #0
 8012dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dc2:	f043 0204 	orr.w	r2, r3, #4
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8012dd2:	2301      	movs	r3, #1
 8012dd4:	e046      	b.n	8012e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ddc:	d021      	beq.n	8012e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012dde:	f7fe fda9 	bl	8011934 <HAL_GetTick>
 8012de2:	4602      	mov	r2, r0
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	1ad3      	subs	r3, r2, r3
 8012de8:	687a      	ldr	r2, [r7, #4]
 8012dea:	429a      	cmp	r2, r3
 8012dec:	d302      	bcc.n	8012df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d116      	bne.n	8012e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	2200      	movs	r2, #0
 8012df8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	2220      	movs	r2, #32
 8012dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	2200      	movs	r2, #0
 8012e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e0e:	f043 0220 	orr.w	r2, r3, #32
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	2200      	movs	r2, #0
 8012e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8012e1e:	2301      	movs	r3, #1
 8012e20:	e020      	b.n	8012e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8012e22:	68bb      	ldr	r3, [r7, #8]
 8012e24:	0c1b      	lsrs	r3, r3, #16
 8012e26:	b2db      	uxtb	r3, r3
 8012e28:	2b01      	cmp	r3, #1
 8012e2a:	d10c      	bne.n	8012e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	695b      	ldr	r3, [r3, #20]
 8012e32:	43da      	mvns	r2, r3
 8012e34:	68bb      	ldr	r3, [r7, #8]
 8012e36:	4013      	ands	r3, r2
 8012e38:	b29b      	uxth	r3, r3
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	bf14      	ite	ne
 8012e3e:	2301      	movne	r3, #1
 8012e40:	2300      	moveq	r3, #0
 8012e42:	b2db      	uxtb	r3, r3
 8012e44:	e00b      	b.n	8012e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	699b      	ldr	r3, [r3, #24]
 8012e4c:	43da      	mvns	r2, r3
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	4013      	ands	r3, r2
 8012e52:	b29b      	uxth	r3, r3
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	bf14      	ite	ne
 8012e58:	2301      	movne	r3, #1
 8012e5a:	2300      	moveq	r3, #0
 8012e5c:	b2db      	uxtb	r3, r3
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d18d      	bne.n	8012d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8012e62:	2300      	movs	r3, #0
}
 8012e64:	4618      	mov	r0, r3
 8012e66:	3710      	adds	r7, #16
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	bd80      	pop	{r7, pc}

08012e6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b084      	sub	sp, #16
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	60f8      	str	r0, [r7, #12]
 8012e74:	60b9      	str	r1, [r7, #8]
 8012e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012e78:	e02d      	b.n	8012ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8012e7a:	68f8      	ldr	r0, [r7, #12]
 8012e7c:	f000 f8ce 	bl	801301c <I2C_IsAcknowledgeFailed>
 8012e80:	4603      	mov	r3, r0
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d001      	beq.n	8012e8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8012e86:	2301      	movs	r3, #1
 8012e88:	e02d      	b.n	8012ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e90:	d021      	beq.n	8012ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012e92:	f7fe fd4f 	bl	8011934 <HAL_GetTick>
 8012e96:	4602      	mov	r2, r0
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	1ad3      	subs	r3, r2, r3
 8012e9c:	68ba      	ldr	r2, [r7, #8]
 8012e9e:	429a      	cmp	r2, r3
 8012ea0:	d302      	bcc.n	8012ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d116      	bne.n	8012ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	2220      	movs	r2, #32
 8012eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	2200      	movs	r2, #0
 8012eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ec2:	f043 0220 	orr.w	r2, r3, #32
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	2200      	movs	r2, #0
 8012ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	e007      	b.n	8012ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	695b      	ldr	r3, [r3, #20]
 8012edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ee0:	2b80      	cmp	r3, #128	; 0x80
 8012ee2:	d1ca      	bne.n	8012e7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012ee4:	2300      	movs	r3, #0
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3710      	adds	r7, #16
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}

08012eee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012eee:	b580      	push	{r7, lr}
 8012ef0:	b084      	sub	sp, #16
 8012ef2:	af00      	add	r7, sp, #0
 8012ef4:	60f8      	str	r0, [r7, #12]
 8012ef6:	60b9      	str	r1, [r7, #8]
 8012ef8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8012efa:	e02d      	b.n	8012f58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8012efc:	68f8      	ldr	r0, [r7, #12]
 8012efe:	f000 f88d 	bl	801301c <I2C_IsAcknowledgeFailed>
 8012f02:	4603      	mov	r3, r0
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d001      	beq.n	8012f0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8012f08:	2301      	movs	r3, #1
 8012f0a:	e02d      	b.n	8012f68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012f0c:	68bb      	ldr	r3, [r7, #8]
 8012f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f12:	d021      	beq.n	8012f58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012f14:	f7fe fd0e 	bl	8011934 <HAL_GetTick>
 8012f18:	4602      	mov	r2, r0
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	1ad3      	subs	r3, r2, r3
 8012f1e:	68ba      	ldr	r2, [r7, #8]
 8012f20:	429a      	cmp	r2, r3
 8012f22:	d302      	bcc.n	8012f2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d116      	bne.n	8012f58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	2220      	movs	r2, #32
 8012f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f44:	f043 0220 	orr.w	r2, r3, #32
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	2200      	movs	r2, #0
 8012f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8012f54:	2301      	movs	r3, #1
 8012f56:	e007      	b.n	8012f68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	695b      	ldr	r3, [r3, #20]
 8012f5e:	f003 0304 	and.w	r3, r3, #4
 8012f62:	2b04      	cmp	r3, #4
 8012f64:	d1ca      	bne.n	8012efc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012f66:	2300      	movs	r3, #0
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	3710      	adds	r7, #16
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}

08012f70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b084      	sub	sp, #16
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	60f8      	str	r0, [r7, #12]
 8012f78:	60b9      	str	r1, [r7, #8]
 8012f7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012f7c:	e042      	b.n	8013004 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	695b      	ldr	r3, [r3, #20]
 8012f84:	f003 0310 	and.w	r3, r3, #16
 8012f88:	2b10      	cmp	r3, #16
 8012f8a:	d119      	bne.n	8012fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	f06f 0210 	mvn.w	r2, #16
 8012f94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	2200      	movs	r2, #0
 8012f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2220      	movs	r2, #32
 8012fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8012fbc:	2301      	movs	r3, #1
 8012fbe:	e029      	b.n	8013014 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012fc0:	f7fe fcb8 	bl	8011934 <HAL_GetTick>
 8012fc4:	4602      	mov	r2, r0
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	1ad3      	subs	r3, r2, r3
 8012fca:	68ba      	ldr	r2, [r7, #8]
 8012fcc:	429a      	cmp	r2, r3
 8012fce:	d302      	bcc.n	8012fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d116      	bne.n	8013004 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	2200      	movs	r2, #0
 8012fda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	2220      	movs	r2, #32
 8012fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ff0:	f043 0220 	orr.w	r2, r3, #32
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8013000:	2301      	movs	r3, #1
 8013002:	e007      	b.n	8013014 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	695b      	ldr	r3, [r3, #20]
 801300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801300e:	2b40      	cmp	r3, #64	; 0x40
 8013010:	d1b5      	bne.n	8012f7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8013012:	2300      	movs	r3, #0
}
 8013014:	4618      	mov	r0, r3
 8013016:	3710      	adds	r7, #16
 8013018:	46bd      	mov	sp, r7
 801301a:	bd80      	pop	{r7, pc}

0801301c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801301c:	b480      	push	{r7}
 801301e:	b083      	sub	sp, #12
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	695b      	ldr	r3, [r3, #20]
 801302a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801302e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013032:	d11b      	bne.n	801306c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801303c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2200      	movs	r2, #0
 8013042:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2220      	movs	r2, #32
 8013048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2200      	movs	r2, #0
 8013050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013058:	f043 0204 	orr.w	r2, r3, #4
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2200      	movs	r2, #0
 8013064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8013068:	2301      	movs	r3, #1
 801306a:	e000      	b.n	801306e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801306c:	2300      	movs	r3, #0
}
 801306e:	4618      	mov	r0, r3
 8013070:	370c      	adds	r7, #12
 8013072:	46bd      	mov	sp, r7
 8013074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013078:	4770      	bx	lr
	...

0801307c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b086      	sub	sp, #24
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d101      	bne.n	801308e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801308a:	2301      	movs	r3, #1
 801308c:	e264      	b.n	8013558 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	f003 0301 	and.w	r3, r3, #1
 8013096:	2b00      	cmp	r3, #0
 8013098:	d075      	beq.n	8013186 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801309a:	4ba3      	ldr	r3, [pc, #652]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 801309c:	689b      	ldr	r3, [r3, #8]
 801309e:	f003 030c 	and.w	r3, r3, #12
 80130a2:	2b04      	cmp	r3, #4
 80130a4:	d00c      	beq.n	80130c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80130a6:	4ba0      	ldr	r3, [pc, #640]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 80130a8:	689b      	ldr	r3, [r3, #8]
 80130aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80130ae:	2b08      	cmp	r3, #8
 80130b0:	d112      	bne.n	80130d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80130b2:	4b9d      	ldr	r3, [pc, #628]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 80130b4:	685b      	ldr	r3, [r3, #4]
 80130b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80130ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80130be:	d10b      	bne.n	80130d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80130c0:	4b99      	ldr	r3, [pc, #612]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d05b      	beq.n	8013184 <HAL_RCC_OscConfig+0x108>
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	685b      	ldr	r3, [r3, #4]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d157      	bne.n	8013184 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80130d4:	2301      	movs	r3, #1
 80130d6:	e23f      	b.n	8013558 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	685b      	ldr	r3, [r3, #4]
 80130dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80130e0:	d106      	bne.n	80130f0 <HAL_RCC_OscConfig+0x74>
 80130e2:	4b91      	ldr	r3, [pc, #580]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	4a90      	ldr	r2, [pc, #576]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 80130e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80130ec:	6013      	str	r3, [r2, #0]
 80130ee:	e01d      	b.n	801312c <HAL_RCC_OscConfig+0xb0>
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	685b      	ldr	r3, [r3, #4]
 80130f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80130f8:	d10c      	bne.n	8013114 <HAL_RCC_OscConfig+0x98>
 80130fa:	4b8b      	ldr	r3, [pc, #556]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	4a8a      	ldr	r2, [pc, #552]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 8013100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013104:	6013      	str	r3, [r2, #0]
 8013106:	4b88      	ldr	r3, [pc, #544]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	4a87      	ldr	r2, [pc, #540]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 801310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013110:	6013      	str	r3, [r2, #0]
 8013112:	e00b      	b.n	801312c <HAL_RCC_OscConfig+0xb0>
 8013114:	4b84      	ldr	r3, [pc, #528]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	4a83      	ldr	r2, [pc, #524]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 801311a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801311e:	6013      	str	r3, [r2, #0]
 8013120:	4b81      	ldr	r3, [pc, #516]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	4a80      	ldr	r2, [pc, #512]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 8013126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801312a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	685b      	ldr	r3, [r3, #4]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d013      	beq.n	801315c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013134:	f7fe fbfe 	bl	8011934 <HAL_GetTick>
 8013138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801313a:	e008      	b.n	801314e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801313c:	f7fe fbfa 	bl	8011934 <HAL_GetTick>
 8013140:	4602      	mov	r2, r0
 8013142:	693b      	ldr	r3, [r7, #16]
 8013144:	1ad3      	subs	r3, r2, r3
 8013146:	2b64      	cmp	r3, #100	; 0x64
 8013148:	d901      	bls.n	801314e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801314a:	2303      	movs	r3, #3
 801314c:	e204      	b.n	8013558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801314e:	4b76      	ldr	r3, [pc, #472]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013156:	2b00      	cmp	r3, #0
 8013158:	d0f0      	beq.n	801313c <HAL_RCC_OscConfig+0xc0>
 801315a:	e014      	b.n	8013186 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801315c:	f7fe fbea 	bl	8011934 <HAL_GetTick>
 8013160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013162:	e008      	b.n	8013176 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013164:	f7fe fbe6 	bl	8011934 <HAL_GetTick>
 8013168:	4602      	mov	r2, r0
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	1ad3      	subs	r3, r2, r3
 801316e:	2b64      	cmp	r3, #100	; 0x64
 8013170:	d901      	bls.n	8013176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013172:	2303      	movs	r3, #3
 8013174:	e1f0      	b.n	8013558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013176:	4b6c      	ldr	r3, [pc, #432]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801317e:	2b00      	cmp	r3, #0
 8013180:	d1f0      	bne.n	8013164 <HAL_RCC_OscConfig+0xe8>
 8013182:	e000      	b.n	8013186 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	f003 0302 	and.w	r3, r3, #2
 801318e:	2b00      	cmp	r3, #0
 8013190:	d063      	beq.n	801325a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013192:	4b65      	ldr	r3, [pc, #404]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 8013194:	689b      	ldr	r3, [r3, #8]
 8013196:	f003 030c 	and.w	r3, r3, #12
 801319a:	2b00      	cmp	r3, #0
 801319c:	d00b      	beq.n	80131b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801319e:	4b62      	ldr	r3, [pc, #392]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 80131a0:	689b      	ldr	r3, [r3, #8]
 80131a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80131a6:	2b08      	cmp	r3, #8
 80131a8:	d11c      	bne.n	80131e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80131aa:	4b5f      	ldr	r3, [pc, #380]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 80131ac:	685b      	ldr	r3, [r3, #4]
 80131ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d116      	bne.n	80131e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80131b6:	4b5c      	ldr	r3, [pc, #368]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	f003 0302 	and.w	r3, r3, #2
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d005      	beq.n	80131ce <HAL_RCC_OscConfig+0x152>
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	68db      	ldr	r3, [r3, #12]
 80131c6:	2b01      	cmp	r3, #1
 80131c8:	d001      	beq.n	80131ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80131ca:	2301      	movs	r3, #1
 80131cc:	e1c4      	b.n	8013558 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80131ce:	4b56      	ldr	r3, [pc, #344]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	691b      	ldr	r3, [r3, #16]
 80131da:	00db      	lsls	r3, r3, #3
 80131dc:	4952      	ldr	r1, [pc, #328]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 80131de:	4313      	orrs	r3, r2
 80131e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80131e2:	e03a      	b.n	801325a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	68db      	ldr	r3, [r3, #12]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d020      	beq.n	801322e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80131ec:	4b4f      	ldr	r3, [pc, #316]	; (801332c <HAL_RCC_OscConfig+0x2b0>)
 80131ee:	2201      	movs	r2, #1
 80131f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80131f2:	f7fe fb9f 	bl	8011934 <HAL_GetTick>
 80131f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80131f8:	e008      	b.n	801320c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80131fa:	f7fe fb9b 	bl	8011934 <HAL_GetTick>
 80131fe:	4602      	mov	r2, r0
 8013200:	693b      	ldr	r3, [r7, #16]
 8013202:	1ad3      	subs	r3, r2, r3
 8013204:	2b02      	cmp	r3, #2
 8013206:	d901      	bls.n	801320c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013208:	2303      	movs	r3, #3
 801320a:	e1a5      	b.n	8013558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801320c:	4b46      	ldr	r3, [pc, #280]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	f003 0302 	and.w	r3, r3, #2
 8013214:	2b00      	cmp	r3, #0
 8013216:	d0f0      	beq.n	80131fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013218:	4b43      	ldr	r3, [pc, #268]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	691b      	ldr	r3, [r3, #16]
 8013224:	00db      	lsls	r3, r3, #3
 8013226:	4940      	ldr	r1, [pc, #256]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 8013228:	4313      	orrs	r3, r2
 801322a:	600b      	str	r3, [r1, #0]
 801322c:	e015      	b.n	801325a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801322e:	4b3f      	ldr	r3, [pc, #252]	; (801332c <HAL_RCC_OscConfig+0x2b0>)
 8013230:	2200      	movs	r2, #0
 8013232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013234:	f7fe fb7e 	bl	8011934 <HAL_GetTick>
 8013238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801323a:	e008      	b.n	801324e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801323c:	f7fe fb7a 	bl	8011934 <HAL_GetTick>
 8013240:	4602      	mov	r2, r0
 8013242:	693b      	ldr	r3, [r7, #16]
 8013244:	1ad3      	subs	r3, r2, r3
 8013246:	2b02      	cmp	r3, #2
 8013248:	d901      	bls.n	801324e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801324a:	2303      	movs	r3, #3
 801324c:	e184      	b.n	8013558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801324e:	4b36      	ldr	r3, [pc, #216]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	f003 0302 	and.w	r3, r3, #2
 8013256:	2b00      	cmp	r3, #0
 8013258:	d1f0      	bne.n	801323c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	f003 0308 	and.w	r3, r3, #8
 8013262:	2b00      	cmp	r3, #0
 8013264:	d030      	beq.n	80132c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	695b      	ldr	r3, [r3, #20]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d016      	beq.n	801329c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801326e:	4b30      	ldr	r3, [pc, #192]	; (8013330 <HAL_RCC_OscConfig+0x2b4>)
 8013270:	2201      	movs	r2, #1
 8013272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013274:	f7fe fb5e 	bl	8011934 <HAL_GetTick>
 8013278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801327a:	e008      	b.n	801328e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801327c:	f7fe fb5a 	bl	8011934 <HAL_GetTick>
 8013280:	4602      	mov	r2, r0
 8013282:	693b      	ldr	r3, [r7, #16]
 8013284:	1ad3      	subs	r3, r2, r3
 8013286:	2b02      	cmp	r3, #2
 8013288:	d901      	bls.n	801328e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801328a:	2303      	movs	r3, #3
 801328c:	e164      	b.n	8013558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801328e:	4b26      	ldr	r3, [pc, #152]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 8013290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013292:	f003 0302 	and.w	r3, r3, #2
 8013296:	2b00      	cmp	r3, #0
 8013298:	d0f0      	beq.n	801327c <HAL_RCC_OscConfig+0x200>
 801329a:	e015      	b.n	80132c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801329c:	4b24      	ldr	r3, [pc, #144]	; (8013330 <HAL_RCC_OscConfig+0x2b4>)
 801329e:	2200      	movs	r2, #0
 80132a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80132a2:	f7fe fb47 	bl	8011934 <HAL_GetTick>
 80132a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80132a8:	e008      	b.n	80132bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80132aa:	f7fe fb43 	bl	8011934 <HAL_GetTick>
 80132ae:	4602      	mov	r2, r0
 80132b0:	693b      	ldr	r3, [r7, #16]
 80132b2:	1ad3      	subs	r3, r2, r3
 80132b4:	2b02      	cmp	r3, #2
 80132b6:	d901      	bls.n	80132bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80132b8:	2303      	movs	r3, #3
 80132ba:	e14d      	b.n	8013558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80132bc:	4b1a      	ldr	r3, [pc, #104]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 80132be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80132c0:	f003 0302 	and.w	r3, r3, #2
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d1f0      	bne.n	80132aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	f003 0304 	and.w	r3, r3, #4
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	f000 80a0 	beq.w	8013416 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80132d6:	2300      	movs	r3, #0
 80132d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80132da:	4b13      	ldr	r3, [pc, #76]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 80132dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d10f      	bne.n	8013306 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80132e6:	2300      	movs	r3, #0
 80132e8:	60bb      	str	r3, [r7, #8]
 80132ea:	4b0f      	ldr	r3, [pc, #60]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 80132ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132ee:	4a0e      	ldr	r2, [pc, #56]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 80132f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80132f4:	6413      	str	r3, [r2, #64]	; 0x40
 80132f6:	4b0c      	ldr	r3, [pc, #48]	; (8013328 <HAL_RCC_OscConfig+0x2ac>)
 80132f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80132fe:	60bb      	str	r3, [r7, #8]
 8013300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013302:	2301      	movs	r3, #1
 8013304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013306:	4b0b      	ldr	r3, [pc, #44]	; (8013334 <HAL_RCC_OscConfig+0x2b8>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801330e:	2b00      	cmp	r3, #0
 8013310:	d121      	bne.n	8013356 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013312:	4b08      	ldr	r3, [pc, #32]	; (8013334 <HAL_RCC_OscConfig+0x2b8>)
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	4a07      	ldr	r2, [pc, #28]	; (8013334 <HAL_RCC_OscConfig+0x2b8>)
 8013318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801331c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801331e:	f7fe fb09 	bl	8011934 <HAL_GetTick>
 8013322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013324:	e011      	b.n	801334a <HAL_RCC_OscConfig+0x2ce>
 8013326:	bf00      	nop
 8013328:	40023800 	.word	0x40023800
 801332c:	42470000 	.word	0x42470000
 8013330:	42470e80 	.word	0x42470e80
 8013334:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013338:	f7fe fafc 	bl	8011934 <HAL_GetTick>
 801333c:	4602      	mov	r2, r0
 801333e:	693b      	ldr	r3, [r7, #16]
 8013340:	1ad3      	subs	r3, r2, r3
 8013342:	2b02      	cmp	r3, #2
 8013344:	d901      	bls.n	801334a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8013346:	2303      	movs	r3, #3
 8013348:	e106      	b.n	8013558 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801334a:	4b85      	ldr	r3, [pc, #532]	; (8013560 <HAL_RCC_OscConfig+0x4e4>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013352:	2b00      	cmp	r3, #0
 8013354:	d0f0      	beq.n	8013338 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	689b      	ldr	r3, [r3, #8]
 801335a:	2b01      	cmp	r3, #1
 801335c:	d106      	bne.n	801336c <HAL_RCC_OscConfig+0x2f0>
 801335e:	4b81      	ldr	r3, [pc, #516]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 8013360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013362:	4a80      	ldr	r2, [pc, #512]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 8013364:	f043 0301 	orr.w	r3, r3, #1
 8013368:	6713      	str	r3, [r2, #112]	; 0x70
 801336a:	e01c      	b.n	80133a6 <HAL_RCC_OscConfig+0x32a>
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	689b      	ldr	r3, [r3, #8]
 8013370:	2b05      	cmp	r3, #5
 8013372:	d10c      	bne.n	801338e <HAL_RCC_OscConfig+0x312>
 8013374:	4b7b      	ldr	r3, [pc, #492]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 8013376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013378:	4a7a      	ldr	r2, [pc, #488]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 801337a:	f043 0304 	orr.w	r3, r3, #4
 801337e:	6713      	str	r3, [r2, #112]	; 0x70
 8013380:	4b78      	ldr	r3, [pc, #480]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 8013382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013384:	4a77      	ldr	r2, [pc, #476]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 8013386:	f043 0301 	orr.w	r3, r3, #1
 801338a:	6713      	str	r3, [r2, #112]	; 0x70
 801338c:	e00b      	b.n	80133a6 <HAL_RCC_OscConfig+0x32a>
 801338e:	4b75      	ldr	r3, [pc, #468]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 8013390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013392:	4a74      	ldr	r2, [pc, #464]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 8013394:	f023 0301 	bic.w	r3, r3, #1
 8013398:	6713      	str	r3, [r2, #112]	; 0x70
 801339a:	4b72      	ldr	r3, [pc, #456]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 801339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801339e:	4a71      	ldr	r2, [pc, #452]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 80133a0:	f023 0304 	bic.w	r3, r3, #4
 80133a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	689b      	ldr	r3, [r3, #8]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d015      	beq.n	80133da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80133ae:	f7fe fac1 	bl	8011934 <HAL_GetTick>
 80133b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80133b4:	e00a      	b.n	80133cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80133b6:	f7fe fabd 	bl	8011934 <HAL_GetTick>
 80133ba:	4602      	mov	r2, r0
 80133bc:	693b      	ldr	r3, [r7, #16]
 80133be:	1ad3      	subs	r3, r2, r3
 80133c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80133c4:	4293      	cmp	r3, r2
 80133c6:	d901      	bls.n	80133cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80133c8:	2303      	movs	r3, #3
 80133ca:	e0c5      	b.n	8013558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80133cc:	4b65      	ldr	r3, [pc, #404]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 80133ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133d0:	f003 0302 	and.w	r3, r3, #2
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d0ee      	beq.n	80133b6 <HAL_RCC_OscConfig+0x33a>
 80133d8:	e014      	b.n	8013404 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80133da:	f7fe faab 	bl	8011934 <HAL_GetTick>
 80133de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80133e0:	e00a      	b.n	80133f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80133e2:	f7fe faa7 	bl	8011934 <HAL_GetTick>
 80133e6:	4602      	mov	r2, r0
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	1ad3      	subs	r3, r2, r3
 80133ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80133f0:	4293      	cmp	r3, r2
 80133f2:	d901      	bls.n	80133f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80133f4:	2303      	movs	r3, #3
 80133f6:	e0af      	b.n	8013558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80133f8:	4b5a      	ldr	r3, [pc, #360]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 80133fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133fc:	f003 0302 	and.w	r3, r3, #2
 8013400:	2b00      	cmp	r3, #0
 8013402:	d1ee      	bne.n	80133e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013404:	7dfb      	ldrb	r3, [r7, #23]
 8013406:	2b01      	cmp	r3, #1
 8013408:	d105      	bne.n	8013416 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801340a:	4b56      	ldr	r3, [pc, #344]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 801340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801340e:	4a55      	ldr	r2, [pc, #340]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 8013410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013414:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	699b      	ldr	r3, [r3, #24]
 801341a:	2b00      	cmp	r3, #0
 801341c:	f000 809b 	beq.w	8013556 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013420:	4b50      	ldr	r3, [pc, #320]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 8013422:	689b      	ldr	r3, [r3, #8]
 8013424:	f003 030c 	and.w	r3, r3, #12
 8013428:	2b08      	cmp	r3, #8
 801342a:	d05c      	beq.n	80134e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	699b      	ldr	r3, [r3, #24]
 8013430:	2b02      	cmp	r3, #2
 8013432:	d141      	bne.n	80134b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013434:	4b4c      	ldr	r3, [pc, #304]	; (8013568 <HAL_RCC_OscConfig+0x4ec>)
 8013436:	2200      	movs	r2, #0
 8013438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801343a:	f7fe fa7b 	bl	8011934 <HAL_GetTick>
 801343e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013440:	e008      	b.n	8013454 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013442:	f7fe fa77 	bl	8011934 <HAL_GetTick>
 8013446:	4602      	mov	r2, r0
 8013448:	693b      	ldr	r3, [r7, #16]
 801344a:	1ad3      	subs	r3, r2, r3
 801344c:	2b02      	cmp	r3, #2
 801344e:	d901      	bls.n	8013454 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8013450:	2303      	movs	r3, #3
 8013452:	e081      	b.n	8013558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013454:	4b43      	ldr	r3, [pc, #268]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801345c:	2b00      	cmp	r3, #0
 801345e:	d1f0      	bne.n	8013442 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	69da      	ldr	r2, [r3, #28]
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	6a1b      	ldr	r3, [r3, #32]
 8013468:	431a      	orrs	r2, r3
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801346e:	019b      	lsls	r3, r3, #6
 8013470:	431a      	orrs	r2, r3
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013476:	085b      	lsrs	r3, r3, #1
 8013478:	3b01      	subs	r3, #1
 801347a:	041b      	lsls	r3, r3, #16
 801347c:	431a      	orrs	r2, r3
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013482:	061b      	lsls	r3, r3, #24
 8013484:	4937      	ldr	r1, [pc, #220]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 8013486:	4313      	orrs	r3, r2
 8013488:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801348a:	4b37      	ldr	r3, [pc, #220]	; (8013568 <HAL_RCC_OscConfig+0x4ec>)
 801348c:	2201      	movs	r2, #1
 801348e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013490:	f7fe fa50 	bl	8011934 <HAL_GetTick>
 8013494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013496:	e008      	b.n	80134aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013498:	f7fe fa4c 	bl	8011934 <HAL_GetTick>
 801349c:	4602      	mov	r2, r0
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	1ad3      	subs	r3, r2, r3
 80134a2:	2b02      	cmp	r3, #2
 80134a4:	d901      	bls.n	80134aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80134a6:	2303      	movs	r3, #3
 80134a8:	e056      	b.n	8013558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80134aa:	4b2e      	ldr	r3, [pc, #184]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d0f0      	beq.n	8013498 <HAL_RCC_OscConfig+0x41c>
 80134b6:	e04e      	b.n	8013556 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80134b8:	4b2b      	ldr	r3, [pc, #172]	; (8013568 <HAL_RCC_OscConfig+0x4ec>)
 80134ba:	2200      	movs	r2, #0
 80134bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80134be:	f7fe fa39 	bl	8011934 <HAL_GetTick>
 80134c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80134c4:	e008      	b.n	80134d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80134c6:	f7fe fa35 	bl	8011934 <HAL_GetTick>
 80134ca:	4602      	mov	r2, r0
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	1ad3      	subs	r3, r2, r3
 80134d0:	2b02      	cmp	r3, #2
 80134d2:	d901      	bls.n	80134d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80134d4:	2303      	movs	r3, #3
 80134d6:	e03f      	b.n	8013558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80134d8:	4b22      	ldr	r3, [pc, #136]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d1f0      	bne.n	80134c6 <HAL_RCC_OscConfig+0x44a>
 80134e4:	e037      	b.n	8013556 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	699b      	ldr	r3, [r3, #24]
 80134ea:	2b01      	cmp	r3, #1
 80134ec:	d101      	bne.n	80134f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80134ee:	2301      	movs	r3, #1
 80134f0:	e032      	b.n	8013558 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80134f2:	4b1c      	ldr	r3, [pc, #112]	; (8013564 <HAL_RCC_OscConfig+0x4e8>)
 80134f4:	685b      	ldr	r3, [r3, #4]
 80134f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	699b      	ldr	r3, [r3, #24]
 80134fc:	2b01      	cmp	r3, #1
 80134fe:	d028      	beq.n	8013552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801350a:	429a      	cmp	r2, r3
 801350c:	d121      	bne.n	8013552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013518:	429a      	cmp	r2, r3
 801351a:	d11a      	bne.n	8013552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801351c:	68fa      	ldr	r2, [r7, #12]
 801351e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013522:	4013      	ands	r3, r2
 8013524:	687a      	ldr	r2, [r7, #4]
 8013526:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013528:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801352a:	4293      	cmp	r3, r2
 801352c:	d111      	bne.n	8013552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013538:	085b      	lsrs	r3, r3, #1
 801353a:	3b01      	subs	r3, #1
 801353c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801353e:	429a      	cmp	r2, r3
 8013540:	d107      	bne.n	8013552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801354c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801354e:	429a      	cmp	r2, r3
 8013550:	d001      	beq.n	8013556 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8013552:	2301      	movs	r3, #1
 8013554:	e000      	b.n	8013558 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8013556:	2300      	movs	r3, #0
}
 8013558:	4618      	mov	r0, r3
 801355a:	3718      	adds	r7, #24
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}
 8013560:	40007000 	.word	0x40007000
 8013564:	40023800 	.word	0x40023800
 8013568:	42470060 	.word	0x42470060

0801356c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b084      	sub	sp, #16
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
 8013574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d101      	bne.n	8013580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801357c:	2301      	movs	r3, #1
 801357e:	e0cc      	b.n	801371a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013580:	4b68      	ldr	r3, [pc, #416]	; (8013724 <HAL_RCC_ClockConfig+0x1b8>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	f003 0307 	and.w	r3, r3, #7
 8013588:	683a      	ldr	r2, [r7, #0]
 801358a:	429a      	cmp	r2, r3
 801358c:	d90c      	bls.n	80135a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801358e:	4b65      	ldr	r3, [pc, #404]	; (8013724 <HAL_RCC_ClockConfig+0x1b8>)
 8013590:	683a      	ldr	r2, [r7, #0]
 8013592:	b2d2      	uxtb	r2, r2
 8013594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013596:	4b63      	ldr	r3, [pc, #396]	; (8013724 <HAL_RCC_ClockConfig+0x1b8>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	f003 0307 	and.w	r3, r3, #7
 801359e:	683a      	ldr	r2, [r7, #0]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d001      	beq.n	80135a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80135a4:	2301      	movs	r3, #1
 80135a6:	e0b8      	b.n	801371a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	f003 0302 	and.w	r3, r3, #2
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d020      	beq.n	80135f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	f003 0304 	and.w	r3, r3, #4
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d005      	beq.n	80135cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80135c0:	4b59      	ldr	r3, [pc, #356]	; (8013728 <HAL_RCC_ClockConfig+0x1bc>)
 80135c2:	689b      	ldr	r3, [r3, #8]
 80135c4:	4a58      	ldr	r2, [pc, #352]	; (8013728 <HAL_RCC_ClockConfig+0x1bc>)
 80135c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80135ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	f003 0308 	and.w	r3, r3, #8
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d005      	beq.n	80135e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80135d8:	4b53      	ldr	r3, [pc, #332]	; (8013728 <HAL_RCC_ClockConfig+0x1bc>)
 80135da:	689b      	ldr	r3, [r3, #8]
 80135dc:	4a52      	ldr	r2, [pc, #328]	; (8013728 <HAL_RCC_ClockConfig+0x1bc>)
 80135de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80135e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80135e4:	4b50      	ldr	r3, [pc, #320]	; (8013728 <HAL_RCC_ClockConfig+0x1bc>)
 80135e6:	689b      	ldr	r3, [r3, #8]
 80135e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	689b      	ldr	r3, [r3, #8]
 80135f0:	494d      	ldr	r1, [pc, #308]	; (8013728 <HAL_RCC_ClockConfig+0x1bc>)
 80135f2:	4313      	orrs	r3, r2
 80135f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	f003 0301 	and.w	r3, r3, #1
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d044      	beq.n	801368c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	685b      	ldr	r3, [r3, #4]
 8013606:	2b01      	cmp	r3, #1
 8013608:	d107      	bne.n	801361a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801360a:	4b47      	ldr	r3, [pc, #284]	; (8013728 <HAL_RCC_ClockConfig+0x1bc>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013612:	2b00      	cmp	r3, #0
 8013614:	d119      	bne.n	801364a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013616:	2301      	movs	r3, #1
 8013618:	e07f      	b.n	801371a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	685b      	ldr	r3, [r3, #4]
 801361e:	2b02      	cmp	r3, #2
 8013620:	d003      	beq.n	801362a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013626:	2b03      	cmp	r3, #3
 8013628:	d107      	bne.n	801363a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801362a:	4b3f      	ldr	r3, [pc, #252]	; (8013728 <HAL_RCC_ClockConfig+0x1bc>)
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013632:	2b00      	cmp	r3, #0
 8013634:	d109      	bne.n	801364a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013636:	2301      	movs	r3, #1
 8013638:	e06f      	b.n	801371a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801363a:	4b3b      	ldr	r3, [pc, #236]	; (8013728 <HAL_RCC_ClockConfig+0x1bc>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	f003 0302 	and.w	r3, r3, #2
 8013642:	2b00      	cmp	r3, #0
 8013644:	d101      	bne.n	801364a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013646:	2301      	movs	r3, #1
 8013648:	e067      	b.n	801371a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801364a:	4b37      	ldr	r3, [pc, #220]	; (8013728 <HAL_RCC_ClockConfig+0x1bc>)
 801364c:	689b      	ldr	r3, [r3, #8]
 801364e:	f023 0203 	bic.w	r2, r3, #3
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	4934      	ldr	r1, [pc, #208]	; (8013728 <HAL_RCC_ClockConfig+0x1bc>)
 8013658:	4313      	orrs	r3, r2
 801365a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801365c:	f7fe f96a 	bl	8011934 <HAL_GetTick>
 8013660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013662:	e00a      	b.n	801367a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013664:	f7fe f966 	bl	8011934 <HAL_GetTick>
 8013668:	4602      	mov	r2, r0
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	1ad3      	subs	r3, r2, r3
 801366e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013672:	4293      	cmp	r3, r2
 8013674:	d901      	bls.n	801367a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8013676:	2303      	movs	r3, #3
 8013678:	e04f      	b.n	801371a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801367a:	4b2b      	ldr	r3, [pc, #172]	; (8013728 <HAL_RCC_ClockConfig+0x1bc>)
 801367c:	689b      	ldr	r3, [r3, #8]
 801367e:	f003 020c 	and.w	r2, r3, #12
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	685b      	ldr	r3, [r3, #4]
 8013686:	009b      	lsls	r3, r3, #2
 8013688:	429a      	cmp	r2, r3
 801368a:	d1eb      	bne.n	8013664 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801368c:	4b25      	ldr	r3, [pc, #148]	; (8013724 <HAL_RCC_ClockConfig+0x1b8>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	f003 0307 	and.w	r3, r3, #7
 8013694:	683a      	ldr	r2, [r7, #0]
 8013696:	429a      	cmp	r2, r3
 8013698:	d20c      	bcs.n	80136b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801369a:	4b22      	ldr	r3, [pc, #136]	; (8013724 <HAL_RCC_ClockConfig+0x1b8>)
 801369c:	683a      	ldr	r2, [r7, #0]
 801369e:	b2d2      	uxtb	r2, r2
 80136a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80136a2:	4b20      	ldr	r3, [pc, #128]	; (8013724 <HAL_RCC_ClockConfig+0x1b8>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	f003 0307 	and.w	r3, r3, #7
 80136aa:	683a      	ldr	r2, [r7, #0]
 80136ac:	429a      	cmp	r2, r3
 80136ae:	d001      	beq.n	80136b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80136b0:	2301      	movs	r3, #1
 80136b2:	e032      	b.n	801371a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	f003 0304 	and.w	r3, r3, #4
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d008      	beq.n	80136d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80136c0:	4b19      	ldr	r3, [pc, #100]	; (8013728 <HAL_RCC_ClockConfig+0x1bc>)
 80136c2:	689b      	ldr	r3, [r3, #8]
 80136c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	68db      	ldr	r3, [r3, #12]
 80136cc:	4916      	ldr	r1, [pc, #88]	; (8013728 <HAL_RCC_ClockConfig+0x1bc>)
 80136ce:	4313      	orrs	r3, r2
 80136d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	f003 0308 	and.w	r3, r3, #8
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d009      	beq.n	80136f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80136de:	4b12      	ldr	r3, [pc, #72]	; (8013728 <HAL_RCC_ClockConfig+0x1bc>)
 80136e0:	689b      	ldr	r3, [r3, #8]
 80136e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	691b      	ldr	r3, [r3, #16]
 80136ea:	00db      	lsls	r3, r3, #3
 80136ec:	490e      	ldr	r1, [pc, #56]	; (8013728 <HAL_RCC_ClockConfig+0x1bc>)
 80136ee:	4313      	orrs	r3, r2
 80136f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80136f2:	f000 f821 	bl	8013738 <HAL_RCC_GetSysClockFreq>
 80136f6:	4602      	mov	r2, r0
 80136f8:	4b0b      	ldr	r3, [pc, #44]	; (8013728 <HAL_RCC_ClockConfig+0x1bc>)
 80136fa:	689b      	ldr	r3, [r3, #8]
 80136fc:	091b      	lsrs	r3, r3, #4
 80136fe:	f003 030f 	and.w	r3, r3, #15
 8013702:	490a      	ldr	r1, [pc, #40]	; (801372c <HAL_RCC_ClockConfig+0x1c0>)
 8013704:	5ccb      	ldrb	r3, [r1, r3]
 8013706:	fa22 f303 	lsr.w	r3, r2, r3
 801370a:	4a09      	ldr	r2, [pc, #36]	; (8013730 <HAL_RCC_ClockConfig+0x1c4>)
 801370c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801370e:	4b09      	ldr	r3, [pc, #36]	; (8013734 <HAL_RCC_ClockConfig+0x1c8>)
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	4618      	mov	r0, r3
 8013714:	f7fe f8ca 	bl	80118ac <HAL_InitTick>

  return HAL_OK;
 8013718:	2300      	movs	r3, #0
}
 801371a:	4618      	mov	r0, r3
 801371c:	3710      	adds	r7, #16
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}
 8013722:	bf00      	nop
 8013724:	40023c00 	.word	0x40023c00
 8013728:	40023800 	.word	0x40023800
 801372c:	080150b0 	.word	0x080150b0
 8013730:	20000004 	.word	0x20000004
 8013734:	2000006c 	.word	0x2000006c

08013738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013738:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801373c:	b084      	sub	sp, #16
 801373e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013740:	2300      	movs	r3, #0
 8013742:	607b      	str	r3, [r7, #4]
 8013744:	2300      	movs	r3, #0
 8013746:	60fb      	str	r3, [r7, #12]
 8013748:	2300      	movs	r3, #0
 801374a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801374c:	2300      	movs	r3, #0
 801374e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013750:	4b67      	ldr	r3, [pc, #412]	; (80138f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013752:	689b      	ldr	r3, [r3, #8]
 8013754:	f003 030c 	and.w	r3, r3, #12
 8013758:	2b08      	cmp	r3, #8
 801375a:	d00d      	beq.n	8013778 <HAL_RCC_GetSysClockFreq+0x40>
 801375c:	2b08      	cmp	r3, #8
 801375e:	f200 80bd 	bhi.w	80138dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8013762:	2b00      	cmp	r3, #0
 8013764:	d002      	beq.n	801376c <HAL_RCC_GetSysClockFreq+0x34>
 8013766:	2b04      	cmp	r3, #4
 8013768:	d003      	beq.n	8013772 <HAL_RCC_GetSysClockFreq+0x3a>
 801376a:	e0b7      	b.n	80138dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801376c:	4b61      	ldr	r3, [pc, #388]	; (80138f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 801376e:	60bb      	str	r3, [r7, #8]
       break;
 8013770:	e0b7      	b.n	80138e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013772:	4b61      	ldr	r3, [pc, #388]	; (80138f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8013774:	60bb      	str	r3, [r7, #8]
      break;
 8013776:	e0b4      	b.n	80138e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013778:	4b5d      	ldr	r3, [pc, #372]	; (80138f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013780:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013782:	4b5b      	ldr	r3, [pc, #364]	; (80138f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013784:	685b      	ldr	r3, [r3, #4]
 8013786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801378a:	2b00      	cmp	r3, #0
 801378c:	d04d      	beq.n	801382a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801378e:	4b58      	ldr	r3, [pc, #352]	; (80138f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013790:	685b      	ldr	r3, [r3, #4]
 8013792:	099b      	lsrs	r3, r3, #6
 8013794:	461a      	mov	r2, r3
 8013796:	f04f 0300 	mov.w	r3, #0
 801379a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801379e:	f04f 0100 	mov.w	r1, #0
 80137a2:	ea02 0800 	and.w	r8, r2, r0
 80137a6:	ea03 0901 	and.w	r9, r3, r1
 80137aa:	4640      	mov	r0, r8
 80137ac:	4649      	mov	r1, r9
 80137ae:	f04f 0200 	mov.w	r2, #0
 80137b2:	f04f 0300 	mov.w	r3, #0
 80137b6:	014b      	lsls	r3, r1, #5
 80137b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80137bc:	0142      	lsls	r2, r0, #5
 80137be:	4610      	mov	r0, r2
 80137c0:	4619      	mov	r1, r3
 80137c2:	ebb0 0008 	subs.w	r0, r0, r8
 80137c6:	eb61 0109 	sbc.w	r1, r1, r9
 80137ca:	f04f 0200 	mov.w	r2, #0
 80137ce:	f04f 0300 	mov.w	r3, #0
 80137d2:	018b      	lsls	r3, r1, #6
 80137d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80137d8:	0182      	lsls	r2, r0, #6
 80137da:	1a12      	subs	r2, r2, r0
 80137dc:	eb63 0301 	sbc.w	r3, r3, r1
 80137e0:	f04f 0000 	mov.w	r0, #0
 80137e4:	f04f 0100 	mov.w	r1, #0
 80137e8:	00d9      	lsls	r1, r3, #3
 80137ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80137ee:	00d0      	lsls	r0, r2, #3
 80137f0:	4602      	mov	r2, r0
 80137f2:	460b      	mov	r3, r1
 80137f4:	eb12 0208 	adds.w	r2, r2, r8
 80137f8:	eb43 0309 	adc.w	r3, r3, r9
 80137fc:	f04f 0000 	mov.w	r0, #0
 8013800:	f04f 0100 	mov.w	r1, #0
 8013804:	0259      	lsls	r1, r3, #9
 8013806:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 801380a:	0250      	lsls	r0, r2, #9
 801380c:	4602      	mov	r2, r0
 801380e:	460b      	mov	r3, r1
 8013810:	4610      	mov	r0, r2
 8013812:	4619      	mov	r1, r3
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	461a      	mov	r2, r3
 8013818:	f04f 0300 	mov.w	r3, #0
 801381c:	f7ec fd80 	bl	8000320 <__aeabi_uldivmod>
 8013820:	4602      	mov	r2, r0
 8013822:	460b      	mov	r3, r1
 8013824:	4613      	mov	r3, r2
 8013826:	60fb      	str	r3, [r7, #12]
 8013828:	e04a      	b.n	80138c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801382a:	4b31      	ldr	r3, [pc, #196]	; (80138f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801382c:	685b      	ldr	r3, [r3, #4]
 801382e:	099b      	lsrs	r3, r3, #6
 8013830:	461a      	mov	r2, r3
 8013832:	f04f 0300 	mov.w	r3, #0
 8013836:	f240 10ff 	movw	r0, #511	; 0x1ff
 801383a:	f04f 0100 	mov.w	r1, #0
 801383e:	ea02 0400 	and.w	r4, r2, r0
 8013842:	ea03 0501 	and.w	r5, r3, r1
 8013846:	4620      	mov	r0, r4
 8013848:	4629      	mov	r1, r5
 801384a:	f04f 0200 	mov.w	r2, #0
 801384e:	f04f 0300 	mov.w	r3, #0
 8013852:	014b      	lsls	r3, r1, #5
 8013854:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8013858:	0142      	lsls	r2, r0, #5
 801385a:	4610      	mov	r0, r2
 801385c:	4619      	mov	r1, r3
 801385e:	1b00      	subs	r0, r0, r4
 8013860:	eb61 0105 	sbc.w	r1, r1, r5
 8013864:	f04f 0200 	mov.w	r2, #0
 8013868:	f04f 0300 	mov.w	r3, #0
 801386c:	018b      	lsls	r3, r1, #6
 801386e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8013872:	0182      	lsls	r2, r0, #6
 8013874:	1a12      	subs	r2, r2, r0
 8013876:	eb63 0301 	sbc.w	r3, r3, r1
 801387a:	f04f 0000 	mov.w	r0, #0
 801387e:	f04f 0100 	mov.w	r1, #0
 8013882:	00d9      	lsls	r1, r3, #3
 8013884:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013888:	00d0      	lsls	r0, r2, #3
 801388a:	4602      	mov	r2, r0
 801388c:	460b      	mov	r3, r1
 801388e:	1912      	adds	r2, r2, r4
 8013890:	eb45 0303 	adc.w	r3, r5, r3
 8013894:	f04f 0000 	mov.w	r0, #0
 8013898:	f04f 0100 	mov.w	r1, #0
 801389c:	0299      	lsls	r1, r3, #10
 801389e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80138a2:	0290      	lsls	r0, r2, #10
 80138a4:	4602      	mov	r2, r0
 80138a6:	460b      	mov	r3, r1
 80138a8:	4610      	mov	r0, r2
 80138aa:	4619      	mov	r1, r3
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	461a      	mov	r2, r3
 80138b0:	f04f 0300 	mov.w	r3, #0
 80138b4:	f7ec fd34 	bl	8000320 <__aeabi_uldivmod>
 80138b8:	4602      	mov	r2, r0
 80138ba:	460b      	mov	r3, r1
 80138bc:	4613      	mov	r3, r2
 80138be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80138c0:	4b0b      	ldr	r3, [pc, #44]	; (80138f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80138c2:	685b      	ldr	r3, [r3, #4]
 80138c4:	0c1b      	lsrs	r3, r3, #16
 80138c6:	f003 0303 	and.w	r3, r3, #3
 80138ca:	3301      	adds	r3, #1
 80138cc:	005b      	lsls	r3, r3, #1
 80138ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80138d0:	68fa      	ldr	r2, [r7, #12]
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80138d8:	60bb      	str	r3, [r7, #8]
      break;
 80138da:	e002      	b.n	80138e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80138dc:	4b05      	ldr	r3, [pc, #20]	; (80138f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80138de:	60bb      	str	r3, [r7, #8]
      break;
 80138e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80138e2:	68bb      	ldr	r3, [r7, #8]
}
 80138e4:	4618      	mov	r0, r3
 80138e6:	3710      	adds	r7, #16
 80138e8:	46bd      	mov	sp, r7
 80138ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80138ee:	bf00      	nop
 80138f0:	40023800 	.word	0x40023800
 80138f4:	00f42400 	.word	0x00f42400
 80138f8:	007a1200 	.word	0x007a1200

080138fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80138fc:	b480      	push	{r7}
 80138fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013900:	4b03      	ldr	r3, [pc, #12]	; (8013910 <HAL_RCC_GetHCLKFreq+0x14>)
 8013902:	681b      	ldr	r3, [r3, #0]
}
 8013904:	4618      	mov	r0, r3
 8013906:	46bd      	mov	sp, r7
 8013908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390c:	4770      	bx	lr
 801390e:	bf00      	nop
 8013910:	20000004 	.word	0x20000004

08013914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013914:	b580      	push	{r7, lr}
 8013916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013918:	f7ff fff0 	bl	80138fc <HAL_RCC_GetHCLKFreq>
 801391c:	4602      	mov	r2, r0
 801391e:	4b05      	ldr	r3, [pc, #20]	; (8013934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013920:	689b      	ldr	r3, [r3, #8]
 8013922:	0a9b      	lsrs	r3, r3, #10
 8013924:	f003 0307 	and.w	r3, r3, #7
 8013928:	4903      	ldr	r1, [pc, #12]	; (8013938 <HAL_RCC_GetPCLK1Freq+0x24>)
 801392a:	5ccb      	ldrb	r3, [r1, r3]
 801392c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013930:	4618      	mov	r0, r3
 8013932:	bd80      	pop	{r7, pc}
 8013934:	40023800 	.word	0x40023800
 8013938:	080150c0 	.word	0x080150c0

0801393c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8013940:	f7ff ffdc 	bl	80138fc <HAL_RCC_GetHCLKFreq>
 8013944:	4602      	mov	r2, r0
 8013946:	4b05      	ldr	r3, [pc, #20]	; (801395c <HAL_RCC_GetPCLK2Freq+0x20>)
 8013948:	689b      	ldr	r3, [r3, #8]
 801394a:	0b5b      	lsrs	r3, r3, #13
 801394c:	f003 0307 	and.w	r3, r3, #7
 8013950:	4903      	ldr	r1, [pc, #12]	; (8013960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013952:	5ccb      	ldrb	r3, [r1, r3]
 8013954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013958:	4618      	mov	r0, r3
 801395a:	bd80      	pop	{r7, pc}
 801395c:	40023800 	.word	0x40023800
 8013960:	080150c0 	.word	0x080150c0

08013964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b082      	sub	sp, #8
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d101      	bne.n	8013976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013972:	2301      	movs	r3, #1
 8013974:	e03f      	b.n	80139f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801397c:	b2db      	uxtb	r3, r3
 801397e:	2b00      	cmp	r3, #0
 8013980:	d106      	bne.n	8013990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	2200      	movs	r2, #0
 8013986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801398a:	6878      	ldr	r0, [r7, #4]
 801398c:	f7ed f892 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	2224      	movs	r2, #36	; 0x24
 8013994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	68da      	ldr	r2, [r3, #12]
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80139a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f000 f929 	bl	8013c00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	691a      	ldr	r2, [r3, #16]
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80139bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	695a      	ldr	r2, [r3, #20]
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80139cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	68da      	ldr	r2, [r3, #12]
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80139dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2200      	movs	r2, #0
 80139e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2220      	movs	r2, #32
 80139e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	2220      	movs	r2, #32
 80139f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80139f4:	2300      	movs	r3, #0
}
 80139f6:	4618      	mov	r0, r3
 80139f8:	3708      	adds	r7, #8
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}

080139fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80139fe:	b580      	push	{r7, lr}
 8013a00:	b08a      	sub	sp, #40	; 0x28
 8013a02:	af02      	add	r7, sp, #8
 8013a04:	60f8      	str	r0, [r7, #12]
 8013a06:	60b9      	str	r1, [r7, #8]
 8013a08:	603b      	str	r3, [r7, #0]
 8013a0a:	4613      	mov	r3, r2
 8013a0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8013a0e:	2300      	movs	r3, #0
 8013a10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013a18:	b2db      	uxtb	r3, r3
 8013a1a:	2b20      	cmp	r3, #32
 8013a1c:	d17c      	bne.n	8013b18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8013a1e:	68bb      	ldr	r3, [r7, #8]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d002      	beq.n	8013a2a <HAL_UART_Transmit+0x2c>
 8013a24:	88fb      	ldrh	r3, [r7, #6]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d101      	bne.n	8013a2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8013a2a:	2301      	movs	r3, #1
 8013a2c:	e075      	b.n	8013b1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013a34:	2b01      	cmp	r3, #1
 8013a36:	d101      	bne.n	8013a3c <HAL_UART_Transmit+0x3e>
 8013a38:	2302      	movs	r3, #2
 8013a3a:	e06e      	b.n	8013b1a <HAL_UART_Transmit+0x11c>
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	2201      	movs	r2, #1
 8013a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	2200      	movs	r2, #0
 8013a48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	2221      	movs	r2, #33	; 0x21
 8013a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013a52:	f7fd ff6f 	bl	8011934 <HAL_GetTick>
 8013a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	88fa      	ldrh	r2, [r7, #6]
 8013a5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	88fa      	ldrh	r2, [r7, #6]
 8013a62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	689b      	ldr	r3, [r3, #8]
 8013a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013a6c:	d108      	bne.n	8013a80 <HAL_UART_Transmit+0x82>
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	691b      	ldr	r3, [r3, #16]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d104      	bne.n	8013a80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8013a76:	2300      	movs	r3, #0
 8013a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8013a7a:	68bb      	ldr	r3, [r7, #8]
 8013a7c:	61bb      	str	r3, [r7, #24]
 8013a7e:	e003      	b.n	8013a88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013a84:	2300      	movs	r3, #0
 8013a86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8013a90:	e02a      	b.n	8013ae8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	9300      	str	r3, [sp, #0]
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	2200      	movs	r2, #0
 8013a9a:	2180      	movs	r1, #128	; 0x80
 8013a9c:	68f8      	ldr	r0, [r7, #12]
 8013a9e:	f000 f840 	bl	8013b22 <UART_WaitOnFlagUntilTimeout>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d001      	beq.n	8013aac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8013aa8:	2303      	movs	r3, #3
 8013aaa:	e036      	b.n	8013b1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8013aac:	69fb      	ldr	r3, [r7, #28]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d10b      	bne.n	8013aca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013ab2:	69bb      	ldr	r3, [r7, #24]
 8013ab4:	881b      	ldrh	r3, [r3, #0]
 8013ab6:	461a      	mov	r2, r3
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013ac0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8013ac2:	69bb      	ldr	r3, [r7, #24]
 8013ac4:	3302      	adds	r3, #2
 8013ac6:	61bb      	str	r3, [r7, #24]
 8013ac8:	e007      	b.n	8013ada <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8013aca:	69fb      	ldr	r3, [r7, #28]
 8013acc:	781a      	ldrb	r2, [r3, #0]
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8013ad4:	69fb      	ldr	r3, [r7, #28]
 8013ad6:	3301      	adds	r3, #1
 8013ad8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013ade:	b29b      	uxth	r3, r3
 8013ae0:	3b01      	subs	r3, #1
 8013ae2:	b29a      	uxth	r2, r3
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d1cf      	bne.n	8013a92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	9300      	str	r3, [sp, #0]
 8013af6:	697b      	ldr	r3, [r7, #20]
 8013af8:	2200      	movs	r2, #0
 8013afa:	2140      	movs	r1, #64	; 0x40
 8013afc:	68f8      	ldr	r0, [r7, #12]
 8013afe:	f000 f810 	bl	8013b22 <UART_WaitOnFlagUntilTimeout>
 8013b02:	4603      	mov	r3, r0
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d001      	beq.n	8013b0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8013b08:	2303      	movs	r3, #3
 8013b0a:	e006      	b.n	8013b1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	2220      	movs	r2, #32
 8013b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8013b14:	2300      	movs	r3, #0
 8013b16:	e000      	b.n	8013b1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8013b18:	2302      	movs	r3, #2
  }
}
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	3720      	adds	r7, #32
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bd80      	pop	{r7, pc}

08013b22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8013b22:	b580      	push	{r7, lr}
 8013b24:	b090      	sub	sp, #64	; 0x40
 8013b26:	af00      	add	r7, sp, #0
 8013b28:	60f8      	str	r0, [r7, #12]
 8013b2a:	60b9      	str	r1, [r7, #8]
 8013b2c:	603b      	str	r3, [r7, #0]
 8013b2e:	4613      	mov	r3, r2
 8013b30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013b32:	e050      	b.n	8013bd6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b3a:	d04c      	beq.n	8013bd6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8013b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d007      	beq.n	8013b52 <UART_WaitOnFlagUntilTimeout+0x30>
 8013b42:	f7fd fef7 	bl	8011934 <HAL_GetTick>
 8013b46:	4602      	mov	r2, r0
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	1ad3      	subs	r3, r2, r3
 8013b4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013b4e:	429a      	cmp	r2, r3
 8013b50:	d241      	bcs.n	8013bd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	330c      	adds	r3, #12
 8013b58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b5c:	e853 3f00 	ldrex	r3, [r3]
 8013b60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	330c      	adds	r3, #12
 8013b70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b72:	637a      	str	r2, [r7, #52]	; 0x34
 8013b74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013b78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b7a:	e841 2300 	strex	r3, r2, [r1]
 8013b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d1e5      	bne.n	8013b52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	3314      	adds	r3, #20
 8013b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	e853 3f00 	ldrex	r3, [r3]
 8013b94:	613b      	str	r3, [r7, #16]
   return(result);
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	f023 0301 	bic.w	r3, r3, #1
 8013b9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	3314      	adds	r3, #20
 8013ba4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ba6:	623a      	str	r2, [r7, #32]
 8013ba8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013baa:	69f9      	ldr	r1, [r7, #28]
 8013bac:	6a3a      	ldr	r2, [r7, #32]
 8013bae:	e841 2300 	strex	r3, r2, [r1]
 8013bb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8013bb4:	69bb      	ldr	r3, [r7, #24]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d1e5      	bne.n	8013b86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	2220      	movs	r2, #32
 8013bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	2220      	movs	r2, #32
 8013bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	2200      	movs	r2, #0
 8013bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8013bd2:	2303      	movs	r3, #3
 8013bd4:	e00f      	b.n	8013bf6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	681a      	ldr	r2, [r3, #0]
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	4013      	ands	r3, r2
 8013be0:	68ba      	ldr	r2, [r7, #8]
 8013be2:	429a      	cmp	r2, r3
 8013be4:	bf0c      	ite	eq
 8013be6:	2301      	moveq	r3, #1
 8013be8:	2300      	movne	r3, #0
 8013bea:	b2db      	uxtb	r3, r3
 8013bec:	461a      	mov	r2, r3
 8013bee:	79fb      	ldrb	r3, [r7, #7]
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	d09f      	beq.n	8013b34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013bf4:	2300      	movs	r3, #0
}
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	3740      	adds	r7, #64	; 0x40
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd80      	pop	{r7, pc}
	...

08013c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c04:	b09f      	sub	sp, #124	; 0x7c
 8013c06:	af00      	add	r7, sp, #0
 8013c08:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	691b      	ldr	r3, [r3, #16]
 8013c10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8013c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c16:	68d9      	ldr	r1, [r3, #12]
 8013c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c1a:	681a      	ldr	r2, [r3, #0]
 8013c1c:	ea40 0301 	orr.w	r3, r0, r1
 8013c20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8013c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c24:	689a      	ldr	r2, [r3, #8]
 8013c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c28:	691b      	ldr	r3, [r3, #16]
 8013c2a:	431a      	orrs	r2, r3
 8013c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c2e:	695b      	ldr	r3, [r3, #20]
 8013c30:	431a      	orrs	r2, r3
 8013c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c34:	69db      	ldr	r3, [r3, #28]
 8013c36:	4313      	orrs	r3, r2
 8013c38:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8013c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	68db      	ldr	r3, [r3, #12]
 8013c40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8013c44:	f021 010c 	bic.w	r1, r1, #12
 8013c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c4a:	681a      	ldr	r2, [r3, #0]
 8013c4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013c4e:	430b      	orrs	r3, r1
 8013c50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8013c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	695b      	ldr	r3, [r3, #20]
 8013c58:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8013c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c5e:	6999      	ldr	r1, [r3, #24]
 8013c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c62:	681a      	ldr	r2, [r3, #0]
 8013c64:	ea40 0301 	orr.w	r3, r0, r1
 8013c68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8013c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c6c:	681a      	ldr	r2, [r3, #0]
 8013c6e:	4bc5      	ldr	r3, [pc, #788]	; (8013f84 <UART_SetConfig+0x384>)
 8013c70:	429a      	cmp	r2, r3
 8013c72:	d004      	beq.n	8013c7e <UART_SetConfig+0x7e>
 8013c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c76:	681a      	ldr	r2, [r3, #0]
 8013c78:	4bc3      	ldr	r3, [pc, #780]	; (8013f88 <UART_SetConfig+0x388>)
 8013c7a:	429a      	cmp	r2, r3
 8013c7c:	d103      	bne.n	8013c86 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8013c7e:	f7ff fe5d 	bl	801393c <HAL_RCC_GetPCLK2Freq>
 8013c82:	6778      	str	r0, [r7, #116]	; 0x74
 8013c84:	e002      	b.n	8013c8c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8013c86:	f7ff fe45 	bl	8013914 <HAL_RCC_GetPCLK1Freq>
 8013c8a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c8e:	69db      	ldr	r3, [r3, #28]
 8013c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c94:	f040 80b6 	bne.w	8013e04 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013c9a:	461c      	mov	r4, r3
 8013c9c:	f04f 0500 	mov.w	r5, #0
 8013ca0:	4622      	mov	r2, r4
 8013ca2:	462b      	mov	r3, r5
 8013ca4:	1891      	adds	r1, r2, r2
 8013ca6:	6439      	str	r1, [r7, #64]	; 0x40
 8013ca8:	415b      	adcs	r3, r3
 8013caa:	647b      	str	r3, [r7, #68]	; 0x44
 8013cac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013cb0:	1912      	adds	r2, r2, r4
 8013cb2:	eb45 0303 	adc.w	r3, r5, r3
 8013cb6:	f04f 0000 	mov.w	r0, #0
 8013cba:	f04f 0100 	mov.w	r1, #0
 8013cbe:	00d9      	lsls	r1, r3, #3
 8013cc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013cc4:	00d0      	lsls	r0, r2, #3
 8013cc6:	4602      	mov	r2, r0
 8013cc8:	460b      	mov	r3, r1
 8013cca:	1911      	adds	r1, r2, r4
 8013ccc:	6639      	str	r1, [r7, #96]	; 0x60
 8013cce:	416b      	adcs	r3, r5
 8013cd0:	667b      	str	r3, [r7, #100]	; 0x64
 8013cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013cd4:	685b      	ldr	r3, [r3, #4]
 8013cd6:	461a      	mov	r2, r3
 8013cd8:	f04f 0300 	mov.w	r3, #0
 8013cdc:	1891      	adds	r1, r2, r2
 8013cde:	63b9      	str	r1, [r7, #56]	; 0x38
 8013ce0:	415b      	adcs	r3, r3
 8013ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013ce4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8013ce8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8013cec:	f7ec fb18 	bl	8000320 <__aeabi_uldivmod>
 8013cf0:	4602      	mov	r2, r0
 8013cf2:	460b      	mov	r3, r1
 8013cf4:	4ba5      	ldr	r3, [pc, #660]	; (8013f8c <UART_SetConfig+0x38c>)
 8013cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8013cfa:	095b      	lsrs	r3, r3, #5
 8013cfc:	011e      	lsls	r6, r3, #4
 8013cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013d00:	461c      	mov	r4, r3
 8013d02:	f04f 0500 	mov.w	r5, #0
 8013d06:	4622      	mov	r2, r4
 8013d08:	462b      	mov	r3, r5
 8013d0a:	1891      	adds	r1, r2, r2
 8013d0c:	6339      	str	r1, [r7, #48]	; 0x30
 8013d0e:	415b      	adcs	r3, r3
 8013d10:	637b      	str	r3, [r7, #52]	; 0x34
 8013d12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8013d16:	1912      	adds	r2, r2, r4
 8013d18:	eb45 0303 	adc.w	r3, r5, r3
 8013d1c:	f04f 0000 	mov.w	r0, #0
 8013d20:	f04f 0100 	mov.w	r1, #0
 8013d24:	00d9      	lsls	r1, r3, #3
 8013d26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013d2a:	00d0      	lsls	r0, r2, #3
 8013d2c:	4602      	mov	r2, r0
 8013d2e:	460b      	mov	r3, r1
 8013d30:	1911      	adds	r1, r2, r4
 8013d32:	65b9      	str	r1, [r7, #88]	; 0x58
 8013d34:	416b      	adcs	r3, r5
 8013d36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d3a:	685b      	ldr	r3, [r3, #4]
 8013d3c:	461a      	mov	r2, r3
 8013d3e:	f04f 0300 	mov.w	r3, #0
 8013d42:	1891      	adds	r1, r2, r2
 8013d44:	62b9      	str	r1, [r7, #40]	; 0x28
 8013d46:	415b      	adcs	r3, r3
 8013d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013d4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013d4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8013d52:	f7ec fae5 	bl	8000320 <__aeabi_uldivmod>
 8013d56:	4602      	mov	r2, r0
 8013d58:	460b      	mov	r3, r1
 8013d5a:	4b8c      	ldr	r3, [pc, #560]	; (8013f8c <UART_SetConfig+0x38c>)
 8013d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8013d60:	095b      	lsrs	r3, r3, #5
 8013d62:	2164      	movs	r1, #100	; 0x64
 8013d64:	fb01 f303 	mul.w	r3, r1, r3
 8013d68:	1ad3      	subs	r3, r2, r3
 8013d6a:	00db      	lsls	r3, r3, #3
 8013d6c:	3332      	adds	r3, #50	; 0x32
 8013d6e:	4a87      	ldr	r2, [pc, #540]	; (8013f8c <UART_SetConfig+0x38c>)
 8013d70:	fba2 2303 	umull	r2, r3, r2, r3
 8013d74:	095b      	lsrs	r3, r3, #5
 8013d76:	005b      	lsls	r3, r3, #1
 8013d78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013d7c:	441e      	add	r6, r3
 8013d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013d80:	4618      	mov	r0, r3
 8013d82:	f04f 0100 	mov.w	r1, #0
 8013d86:	4602      	mov	r2, r0
 8013d88:	460b      	mov	r3, r1
 8013d8a:	1894      	adds	r4, r2, r2
 8013d8c:	623c      	str	r4, [r7, #32]
 8013d8e:	415b      	adcs	r3, r3
 8013d90:	627b      	str	r3, [r7, #36]	; 0x24
 8013d92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8013d96:	1812      	adds	r2, r2, r0
 8013d98:	eb41 0303 	adc.w	r3, r1, r3
 8013d9c:	f04f 0400 	mov.w	r4, #0
 8013da0:	f04f 0500 	mov.w	r5, #0
 8013da4:	00dd      	lsls	r5, r3, #3
 8013da6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8013daa:	00d4      	lsls	r4, r2, #3
 8013dac:	4622      	mov	r2, r4
 8013dae:	462b      	mov	r3, r5
 8013db0:	1814      	adds	r4, r2, r0
 8013db2:	653c      	str	r4, [r7, #80]	; 0x50
 8013db4:	414b      	adcs	r3, r1
 8013db6:	657b      	str	r3, [r7, #84]	; 0x54
 8013db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013dba:	685b      	ldr	r3, [r3, #4]
 8013dbc:	461a      	mov	r2, r3
 8013dbe:	f04f 0300 	mov.w	r3, #0
 8013dc2:	1891      	adds	r1, r2, r2
 8013dc4:	61b9      	str	r1, [r7, #24]
 8013dc6:	415b      	adcs	r3, r3
 8013dc8:	61fb      	str	r3, [r7, #28]
 8013dca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013dce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8013dd2:	f7ec faa5 	bl	8000320 <__aeabi_uldivmod>
 8013dd6:	4602      	mov	r2, r0
 8013dd8:	460b      	mov	r3, r1
 8013dda:	4b6c      	ldr	r3, [pc, #432]	; (8013f8c <UART_SetConfig+0x38c>)
 8013ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8013de0:	095b      	lsrs	r3, r3, #5
 8013de2:	2164      	movs	r1, #100	; 0x64
 8013de4:	fb01 f303 	mul.w	r3, r1, r3
 8013de8:	1ad3      	subs	r3, r2, r3
 8013dea:	00db      	lsls	r3, r3, #3
 8013dec:	3332      	adds	r3, #50	; 0x32
 8013dee:	4a67      	ldr	r2, [pc, #412]	; (8013f8c <UART_SetConfig+0x38c>)
 8013df0:	fba2 2303 	umull	r2, r3, r2, r3
 8013df4:	095b      	lsrs	r3, r3, #5
 8013df6:	f003 0207 	and.w	r2, r3, #7
 8013dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	4432      	add	r2, r6
 8013e00:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8013e02:	e0b9      	b.n	8013f78 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e06:	461c      	mov	r4, r3
 8013e08:	f04f 0500 	mov.w	r5, #0
 8013e0c:	4622      	mov	r2, r4
 8013e0e:	462b      	mov	r3, r5
 8013e10:	1891      	adds	r1, r2, r2
 8013e12:	6139      	str	r1, [r7, #16]
 8013e14:	415b      	adcs	r3, r3
 8013e16:	617b      	str	r3, [r7, #20]
 8013e18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013e1c:	1912      	adds	r2, r2, r4
 8013e1e:	eb45 0303 	adc.w	r3, r5, r3
 8013e22:	f04f 0000 	mov.w	r0, #0
 8013e26:	f04f 0100 	mov.w	r1, #0
 8013e2a:	00d9      	lsls	r1, r3, #3
 8013e2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013e30:	00d0      	lsls	r0, r2, #3
 8013e32:	4602      	mov	r2, r0
 8013e34:	460b      	mov	r3, r1
 8013e36:	eb12 0804 	adds.w	r8, r2, r4
 8013e3a:	eb43 0905 	adc.w	r9, r3, r5
 8013e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e40:	685b      	ldr	r3, [r3, #4]
 8013e42:	4618      	mov	r0, r3
 8013e44:	f04f 0100 	mov.w	r1, #0
 8013e48:	f04f 0200 	mov.w	r2, #0
 8013e4c:	f04f 0300 	mov.w	r3, #0
 8013e50:	008b      	lsls	r3, r1, #2
 8013e52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8013e56:	0082      	lsls	r2, r0, #2
 8013e58:	4640      	mov	r0, r8
 8013e5a:	4649      	mov	r1, r9
 8013e5c:	f7ec fa60 	bl	8000320 <__aeabi_uldivmod>
 8013e60:	4602      	mov	r2, r0
 8013e62:	460b      	mov	r3, r1
 8013e64:	4b49      	ldr	r3, [pc, #292]	; (8013f8c <UART_SetConfig+0x38c>)
 8013e66:	fba3 2302 	umull	r2, r3, r3, r2
 8013e6a:	095b      	lsrs	r3, r3, #5
 8013e6c:	011e      	lsls	r6, r3, #4
 8013e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e70:	4618      	mov	r0, r3
 8013e72:	f04f 0100 	mov.w	r1, #0
 8013e76:	4602      	mov	r2, r0
 8013e78:	460b      	mov	r3, r1
 8013e7a:	1894      	adds	r4, r2, r2
 8013e7c:	60bc      	str	r4, [r7, #8]
 8013e7e:	415b      	adcs	r3, r3
 8013e80:	60fb      	str	r3, [r7, #12]
 8013e82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013e86:	1812      	adds	r2, r2, r0
 8013e88:	eb41 0303 	adc.w	r3, r1, r3
 8013e8c:	f04f 0400 	mov.w	r4, #0
 8013e90:	f04f 0500 	mov.w	r5, #0
 8013e94:	00dd      	lsls	r5, r3, #3
 8013e96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8013e9a:	00d4      	lsls	r4, r2, #3
 8013e9c:	4622      	mov	r2, r4
 8013e9e:	462b      	mov	r3, r5
 8013ea0:	1814      	adds	r4, r2, r0
 8013ea2:	64bc      	str	r4, [r7, #72]	; 0x48
 8013ea4:	414b      	adcs	r3, r1
 8013ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013eaa:	685b      	ldr	r3, [r3, #4]
 8013eac:	4618      	mov	r0, r3
 8013eae:	f04f 0100 	mov.w	r1, #0
 8013eb2:	f04f 0200 	mov.w	r2, #0
 8013eb6:	f04f 0300 	mov.w	r3, #0
 8013eba:	008b      	lsls	r3, r1, #2
 8013ebc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8013ec0:	0082      	lsls	r2, r0, #2
 8013ec2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8013ec6:	f7ec fa2b 	bl	8000320 <__aeabi_uldivmod>
 8013eca:	4602      	mov	r2, r0
 8013ecc:	460b      	mov	r3, r1
 8013ece:	4b2f      	ldr	r3, [pc, #188]	; (8013f8c <UART_SetConfig+0x38c>)
 8013ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8013ed4:	095b      	lsrs	r3, r3, #5
 8013ed6:	2164      	movs	r1, #100	; 0x64
 8013ed8:	fb01 f303 	mul.w	r3, r1, r3
 8013edc:	1ad3      	subs	r3, r2, r3
 8013ede:	011b      	lsls	r3, r3, #4
 8013ee0:	3332      	adds	r3, #50	; 0x32
 8013ee2:	4a2a      	ldr	r2, [pc, #168]	; (8013f8c <UART_SetConfig+0x38c>)
 8013ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8013ee8:	095b      	lsrs	r3, r3, #5
 8013eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013eee:	441e      	add	r6, r3
 8013ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f04f 0100 	mov.w	r1, #0
 8013ef8:	4602      	mov	r2, r0
 8013efa:	460b      	mov	r3, r1
 8013efc:	1894      	adds	r4, r2, r2
 8013efe:	603c      	str	r4, [r7, #0]
 8013f00:	415b      	adcs	r3, r3
 8013f02:	607b      	str	r3, [r7, #4]
 8013f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013f08:	1812      	adds	r2, r2, r0
 8013f0a:	eb41 0303 	adc.w	r3, r1, r3
 8013f0e:	f04f 0400 	mov.w	r4, #0
 8013f12:	f04f 0500 	mov.w	r5, #0
 8013f16:	00dd      	lsls	r5, r3, #3
 8013f18:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8013f1c:	00d4      	lsls	r4, r2, #3
 8013f1e:	4622      	mov	r2, r4
 8013f20:	462b      	mov	r3, r5
 8013f22:	eb12 0a00 	adds.w	sl, r2, r0
 8013f26:	eb43 0b01 	adc.w	fp, r3, r1
 8013f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013f2c:	685b      	ldr	r3, [r3, #4]
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f04f 0100 	mov.w	r1, #0
 8013f34:	f04f 0200 	mov.w	r2, #0
 8013f38:	f04f 0300 	mov.w	r3, #0
 8013f3c:	008b      	lsls	r3, r1, #2
 8013f3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8013f42:	0082      	lsls	r2, r0, #2
 8013f44:	4650      	mov	r0, sl
 8013f46:	4659      	mov	r1, fp
 8013f48:	f7ec f9ea 	bl	8000320 <__aeabi_uldivmod>
 8013f4c:	4602      	mov	r2, r0
 8013f4e:	460b      	mov	r3, r1
 8013f50:	4b0e      	ldr	r3, [pc, #56]	; (8013f8c <UART_SetConfig+0x38c>)
 8013f52:	fba3 1302 	umull	r1, r3, r3, r2
 8013f56:	095b      	lsrs	r3, r3, #5
 8013f58:	2164      	movs	r1, #100	; 0x64
 8013f5a:	fb01 f303 	mul.w	r3, r1, r3
 8013f5e:	1ad3      	subs	r3, r2, r3
 8013f60:	011b      	lsls	r3, r3, #4
 8013f62:	3332      	adds	r3, #50	; 0x32
 8013f64:	4a09      	ldr	r2, [pc, #36]	; (8013f8c <UART_SetConfig+0x38c>)
 8013f66:	fba2 2303 	umull	r2, r3, r2, r3
 8013f6a:	095b      	lsrs	r3, r3, #5
 8013f6c:	f003 020f 	and.w	r2, r3, #15
 8013f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	4432      	add	r2, r6
 8013f76:	609a      	str	r2, [r3, #8]
}
 8013f78:	bf00      	nop
 8013f7a:	377c      	adds	r7, #124	; 0x7c
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f82:	bf00      	nop
 8013f84:	40011000 	.word	0x40011000
 8013f88:	40011400 	.word	0x40011400
 8013f8c:	51eb851f 	.word	0x51eb851f

08013f90 <__errno>:
 8013f90:	4b01      	ldr	r3, [pc, #4]	; (8013f98 <__errno+0x8>)
 8013f92:	6818      	ldr	r0, [r3, #0]
 8013f94:	4770      	bx	lr
 8013f96:	bf00      	nop
 8013f98:	20000074 	.word	0x20000074

08013f9c <__libc_init_array>:
 8013f9c:	b570      	push	{r4, r5, r6, lr}
 8013f9e:	4d0d      	ldr	r5, [pc, #52]	; (8013fd4 <__libc_init_array+0x38>)
 8013fa0:	4c0d      	ldr	r4, [pc, #52]	; (8013fd8 <__libc_init_array+0x3c>)
 8013fa2:	1b64      	subs	r4, r4, r5
 8013fa4:	10a4      	asrs	r4, r4, #2
 8013fa6:	2600      	movs	r6, #0
 8013fa8:	42a6      	cmp	r6, r4
 8013faa:	d109      	bne.n	8013fc0 <__libc_init_array+0x24>
 8013fac:	4d0b      	ldr	r5, [pc, #44]	; (8013fdc <__libc_init_array+0x40>)
 8013fae:	4c0c      	ldr	r4, [pc, #48]	; (8013fe0 <__libc_init_array+0x44>)
 8013fb0:	f001 f80e 	bl	8014fd0 <_init>
 8013fb4:	1b64      	subs	r4, r4, r5
 8013fb6:	10a4      	asrs	r4, r4, #2
 8013fb8:	2600      	movs	r6, #0
 8013fba:	42a6      	cmp	r6, r4
 8013fbc:	d105      	bne.n	8013fca <__libc_init_array+0x2e>
 8013fbe:	bd70      	pop	{r4, r5, r6, pc}
 8013fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8013fc4:	4798      	blx	r3
 8013fc6:	3601      	adds	r6, #1
 8013fc8:	e7ee      	b.n	8013fa8 <__libc_init_array+0xc>
 8013fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8013fce:	4798      	blx	r3
 8013fd0:	3601      	adds	r6, #1
 8013fd2:	e7f2      	b.n	8013fba <__libc_init_array+0x1e>
 8013fd4:	08015168 	.word	0x08015168
 8013fd8:	08015168 	.word	0x08015168
 8013fdc:	08015168 	.word	0x08015168
 8013fe0:	0801516c 	.word	0x0801516c

08013fe4 <memcpy>:
 8013fe4:	440a      	add	r2, r1
 8013fe6:	4291      	cmp	r1, r2
 8013fe8:	f100 33ff 	add.w	r3, r0, #4294967295
 8013fec:	d100      	bne.n	8013ff0 <memcpy+0xc>
 8013fee:	4770      	bx	lr
 8013ff0:	b510      	push	{r4, lr}
 8013ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013ff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013ffa:	4291      	cmp	r1, r2
 8013ffc:	d1f9      	bne.n	8013ff2 <memcpy+0xe>
 8013ffe:	bd10      	pop	{r4, pc}

08014000 <memset>:
 8014000:	4402      	add	r2, r0
 8014002:	4603      	mov	r3, r0
 8014004:	4293      	cmp	r3, r2
 8014006:	d100      	bne.n	801400a <memset+0xa>
 8014008:	4770      	bx	lr
 801400a:	f803 1b01 	strb.w	r1, [r3], #1
 801400e:	e7f9      	b.n	8014004 <memset+0x4>

08014010 <iprintf>:
 8014010:	b40f      	push	{r0, r1, r2, r3}
 8014012:	4b0a      	ldr	r3, [pc, #40]	; (801403c <iprintf+0x2c>)
 8014014:	b513      	push	{r0, r1, r4, lr}
 8014016:	681c      	ldr	r4, [r3, #0]
 8014018:	b124      	cbz	r4, 8014024 <iprintf+0x14>
 801401a:	69a3      	ldr	r3, [r4, #24]
 801401c:	b913      	cbnz	r3, 8014024 <iprintf+0x14>
 801401e:	4620      	mov	r0, r4
 8014020:	f000 fa72 	bl	8014508 <__sinit>
 8014024:	ab05      	add	r3, sp, #20
 8014026:	9a04      	ldr	r2, [sp, #16]
 8014028:	68a1      	ldr	r1, [r4, #8]
 801402a:	9301      	str	r3, [sp, #4]
 801402c:	4620      	mov	r0, r4
 801402e:	f000 fc43 	bl	80148b8 <_vfiprintf_r>
 8014032:	b002      	add	sp, #8
 8014034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014038:	b004      	add	sp, #16
 801403a:	4770      	bx	lr
 801403c:	20000074 	.word	0x20000074

08014040 <_puts_r>:
 8014040:	b570      	push	{r4, r5, r6, lr}
 8014042:	460e      	mov	r6, r1
 8014044:	4605      	mov	r5, r0
 8014046:	b118      	cbz	r0, 8014050 <_puts_r+0x10>
 8014048:	6983      	ldr	r3, [r0, #24]
 801404a:	b90b      	cbnz	r3, 8014050 <_puts_r+0x10>
 801404c:	f000 fa5c 	bl	8014508 <__sinit>
 8014050:	69ab      	ldr	r3, [r5, #24]
 8014052:	68ac      	ldr	r4, [r5, #8]
 8014054:	b913      	cbnz	r3, 801405c <_puts_r+0x1c>
 8014056:	4628      	mov	r0, r5
 8014058:	f000 fa56 	bl	8014508 <__sinit>
 801405c:	4b2c      	ldr	r3, [pc, #176]	; (8014110 <_puts_r+0xd0>)
 801405e:	429c      	cmp	r4, r3
 8014060:	d120      	bne.n	80140a4 <_puts_r+0x64>
 8014062:	686c      	ldr	r4, [r5, #4]
 8014064:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014066:	07db      	lsls	r3, r3, #31
 8014068:	d405      	bmi.n	8014076 <_puts_r+0x36>
 801406a:	89a3      	ldrh	r3, [r4, #12]
 801406c:	0598      	lsls	r0, r3, #22
 801406e:	d402      	bmi.n	8014076 <_puts_r+0x36>
 8014070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014072:	f000 fae7 	bl	8014644 <__retarget_lock_acquire_recursive>
 8014076:	89a3      	ldrh	r3, [r4, #12]
 8014078:	0719      	lsls	r1, r3, #28
 801407a:	d51d      	bpl.n	80140b8 <_puts_r+0x78>
 801407c:	6923      	ldr	r3, [r4, #16]
 801407e:	b1db      	cbz	r3, 80140b8 <_puts_r+0x78>
 8014080:	3e01      	subs	r6, #1
 8014082:	68a3      	ldr	r3, [r4, #8]
 8014084:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014088:	3b01      	subs	r3, #1
 801408a:	60a3      	str	r3, [r4, #8]
 801408c:	bb39      	cbnz	r1, 80140de <_puts_r+0x9e>
 801408e:	2b00      	cmp	r3, #0
 8014090:	da38      	bge.n	8014104 <_puts_r+0xc4>
 8014092:	4622      	mov	r2, r4
 8014094:	210a      	movs	r1, #10
 8014096:	4628      	mov	r0, r5
 8014098:	f000 f85c 	bl	8014154 <__swbuf_r>
 801409c:	3001      	adds	r0, #1
 801409e:	d011      	beq.n	80140c4 <_puts_r+0x84>
 80140a0:	250a      	movs	r5, #10
 80140a2:	e011      	b.n	80140c8 <_puts_r+0x88>
 80140a4:	4b1b      	ldr	r3, [pc, #108]	; (8014114 <_puts_r+0xd4>)
 80140a6:	429c      	cmp	r4, r3
 80140a8:	d101      	bne.n	80140ae <_puts_r+0x6e>
 80140aa:	68ac      	ldr	r4, [r5, #8]
 80140ac:	e7da      	b.n	8014064 <_puts_r+0x24>
 80140ae:	4b1a      	ldr	r3, [pc, #104]	; (8014118 <_puts_r+0xd8>)
 80140b0:	429c      	cmp	r4, r3
 80140b2:	bf08      	it	eq
 80140b4:	68ec      	ldreq	r4, [r5, #12]
 80140b6:	e7d5      	b.n	8014064 <_puts_r+0x24>
 80140b8:	4621      	mov	r1, r4
 80140ba:	4628      	mov	r0, r5
 80140bc:	f000 f89c 	bl	80141f8 <__swsetup_r>
 80140c0:	2800      	cmp	r0, #0
 80140c2:	d0dd      	beq.n	8014080 <_puts_r+0x40>
 80140c4:	f04f 35ff 	mov.w	r5, #4294967295
 80140c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80140ca:	07da      	lsls	r2, r3, #31
 80140cc:	d405      	bmi.n	80140da <_puts_r+0x9a>
 80140ce:	89a3      	ldrh	r3, [r4, #12]
 80140d0:	059b      	lsls	r3, r3, #22
 80140d2:	d402      	bmi.n	80140da <_puts_r+0x9a>
 80140d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140d6:	f000 fab6 	bl	8014646 <__retarget_lock_release_recursive>
 80140da:	4628      	mov	r0, r5
 80140dc:	bd70      	pop	{r4, r5, r6, pc}
 80140de:	2b00      	cmp	r3, #0
 80140e0:	da04      	bge.n	80140ec <_puts_r+0xac>
 80140e2:	69a2      	ldr	r2, [r4, #24]
 80140e4:	429a      	cmp	r2, r3
 80140e6:	dc06      	bgt.n	80140f6 <_puts_r+0xb6>
 80140e8:	290a      	cmp	r1, #10
 80140ea:	d004      	beq.n	80140f6 <_puts_r+0xb6>
 80140ec:	6823      	ldr	r3, [r4, #0]
 80140ee:	1c5a      	adds	r2, r3, #1
 80140f0:	6022      	str	r2, [r4, #0]
 80140f2:	7019      	strb	r1, [r3, #0]
 80140f4:	e7c5      	b.n	8014082 <_puts_r+0x42>
 80140f6:	4622      	mov	r2, r4
 80140f8:	4628      	mov	r0, r5
 80140fa:	f000 f82b 	bl	8014154 <__swbuf_r>
 80140fe:	3001      	adds	r0, #1
 8014100:	d1bf      	bne.n	8014082 <_puts_r+0x42>
 8014102:	e7df      	b.n	80140c4 <_puts_r+0x84>
 8014104:	6823      	ldr	r3, [r4, #0]
 8014106:	250a      	movs	r5, #10
 8014108:	1c5a      	adds	r2, r3, #1
 801410a:	6022      	str	r2, [r4, #0]
 801410c:	701d      	strb	r5, [r3, #0]
 801410e:	e7db      	b.n	80140c8 <_puts_r+0x88>
 8014110:	080150ec 	.word	0x080150ec
 8014114:	0801510c 	.word	0x0801510c
 8014118:	080150cc 	.word	0x080150cc

0801411c <puts>:
 801411c:	4b02      	ldr	r3, [pc, #8]	; (8014128 <puts+0xc>)
 801411e:	4601      	mov	r1, r0
 8014120:	6818      	ldr	r0, [r3, #0]
 8014122:	f7ff bf8d 	b.w	8014040 <_puts_r>
 8014126:	bf00      	nop
 8014128:	20000074 	.word	0x20000074

0801412c <strncpy>:
 801412c:	b510      	push	{r4, lr}
 801412e:	3901      	subs	r1, #1
 8014130:	4603      	mov	r3, r0
 8014132:	b132      	cbz	r2, 8014142 <strncpy+0x16>
 8014134:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014138:	f803 4b01 	strb.w	r4, [r3], #1
 801413c:	3a01      	subs	r2, #1
 801413e:	2c00      	cmp	r4, #0
 8014140:	d1f7      	bne.n	8014132 <strncpy+0x6>
 8014142:	441a      	add	r2, r3
 8014144:	2100      	movs	r1, #0
 8014146:	4293      	cmp	r3, r2
 8014148:	d100      	bne.n	801414c <strncpy+0x20>
 801414a:	bd10      	pop	{r4, pc}
 801414c:	f803 1b01 	strb.w	r1, [r3], #1
 8014150:	e7f9      	b.n	8014146 <strncpy+0x1a>
	...

08014154 <__swbuf_r>:
 8014154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014156:	460e      	mov	r6, r1
 8014158:	4614      	mov	r4, r2
 801415a:	4605      	mov	r5, r0
 801415c:	b118      	cbz	r0, 8014166 <__swbuf_r+0x12>
 801415e:	6983      	ldr	r3, [r0, #24]
 8014160:	b90b      	cbnz	r3, 8014166 <__swbuf_r+0x12>
 8014162:	f000 f9d1 	bl	8014508 <__sinit>
 8014166:	4b21      	ldr	r3, [pc, #132]	; (80141ec <__swbuf_r+0x98>)
 8014168:	429c      	cmp	r4, r3
 801416a:	d12b      	bne.n	80141c4 <__swbuf_r+0x70>
 801416c:	686c      	ldr	r4, [r5, #4]
 801416e:	69a3      	ldr	r3, [r4, #24]
 8014170:	60a3      	str	r3, [r4, #8]
 8014172:	89a3      	ldrh	r3, [r4, #12]
 8014174:	071a      	lsls	r2, r3, #28
 8014176:	d52f      	bpl.n	80141d8 <__swbuf_r+0x84>
 8014178:	6923      	ldr	r3, [r4, #16]
 801417a:	b36b      	cbz	r3, 80141d8 <__swbuf_r+0x84>
 801417c:	6923      	ldr	r3, [r4, #16]
 801417e:	6820      	ldr	r0, [r4, #0]
 8014180:	1ac0      	subs	r0, r0, r3
 8014182:	6963      	ldr	r3, [r4, #20]
 8014184:	b2f6      	uxtb	r6, r6
 8014186:	4283      	cmp	r3, r0
 8014188:	4637      	mov	r7, r6
 801418a:	dc04      	bgt.n	8014196 <__swbuf_r+0x42>
 801418c:	4621      	mov	r1, r4
 801418e:	4628      	mov	r0, r5
 8014190:	f000 f926 	bl	80143e0 <_fflush_r>
 8014194:	bb30      	cbnz	r0, 80141e4 <__swbuf_r+0x90>
 8014196:	68a3      	ldr	r3, [r4, #8]
 8014198:	3b01      	subs	r3, #1
 801419a:	60a3      	str	r3, [r4, #8]
 801419c:	6823      	ldr	r3, [r4, #0]
 801419e:	1c5a      	adds	r2, r3, #1
 80141a0:	6022      	str	r2, [r4, #0]
 80141a2:	701e      	strb	r6, [r3, #0]
 80141a4:	6963      	ldr	r3, [r4, #20]
 80141a6:	3001      	adds	r0, #1
 80141a8:	4283      	cmp	r3, r0
 80141aa:	d004      	beq.n	80141b6 <__swbuf_r+0x62>
 80141ac:	89a3      	ldrh	r3, [r4, #12]
 80141ae:	07db      	lsls	r3, r3, #31
 80141b0:	d506      	bpl.n	80141c0 <__swbuf_r+0x6c>
 80141b2:	2e0a      	cmp	r6, #10
 80141b4:	d104      	bne.n	80141c0 <__swbuf_r+0x6c>
 80141b6:	4621      	mov	r1, r4
 80141b8:	4628      	mov	r0, r5
 80141ba:	f000 f911 	bl	80143e0 <_fflush_r>
 80141be:	b988      	cbnz	r0, 80141e4 <__swbuf_r+0x90>
 80141c0:	4638      	mov	r0, r7
 80141c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141c4:	4b0a      	ldr	r3, [pc, #40]	; (80141f0 <__swbuf_r+0x9c>)
 80141c6:	429c      	cmp	r4, r3
 80141c8:	d101      	bne.n	80141ce <__swbuf_r+0x7a>
 80141ca:	68ac      	ldr	r4, [r5, #8]
 80141cc:	e7cf      	b.n	801416e <__swbuf_r+0x1a>
 80141ce:	4b09      	ldr	r3, [pc, #36]	; (80141f4 <__swbuf_r+0xa0>)
 80141d0:	429c      	cmp	r4, r3
 80141d2:	bf08      	it	eq
 80141d4:	68ec      	ldreq	r4, [r5, #12]
 80141d6:	e7ca      	b.n	801416e <__swbuf_r+0x1a>
 80141d8:	4621      	mov	r1, r4
 80141da:	4628      	mov	r0, r5
 80141dc:	f000 f80c 	bl	80141f8 <__swsetup_r>
 80141e0:	2800      	cmp	r0, #0
 80141e2:	d0cb      	beq.n	801417c <__swbuf_r+0x28>
 80141e4:	f04f 37ff 	mov.w	r7, #4294967295
 80141e8:	e7ea      	b.n	80141c0 <__swbuf_r+0x6c>
 80141ea:	bf00      	nop
 80141ec:	080150ec 	.word	0x080150ec
 80141f0:	0801510c 	.word	0x0801510c
 80141f4:	080150cc 	.word	0x080150cc

080141f8 <__swsetup_r>:
 80141f8:	4b32      	ldr	r3, [pc, #200]	; (80142c4 <__swsetup_r+0xcc>)
 80141fa:	b570      	push	{r4, r5, r6, lr}
 80141fc:	681d      	ldr	r5, [r3, #0]
 80141fe:	4606      	mov	r6, r0
 8014200:	460c      	mov	r4, r1
 8014202:	b125      	cbz	r5, 801420e <__swsetup_r+0x16>
 8014204:	69ab      	ldr	r3, [r5, #24]
 8014206:	b913      	cbnz	r3, 801420e <__swsetup_r+0x16>
 8014208:	4628      	mov	r0, r5
 801420a:	f000 f97d 	bl	8014508 <__sinit>
 801420e:	4b2e      	ldr	r3, [pc, #184]	; (80142c8 <__swsetup_r+0xd0>)
 8014210:	429c      	cmp	r4, r3
 8014212:	d10f      	bne.n	8014234 <__swsetup_r+0x3c>
 8014214:	686c      	ldr	r4, [r5, #4]
 8014216:	89a3      	ldrh	r3, [r4, #12]
 8014218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801421c:	0719      	lsls	r1, r3, #28
 801421e:	d42c      	bmi.n	801427a <__swsetup_r+0x82>
 8014220:	06dd      	lsls	r5, r3, #27
 8014222:	d411      	bmi.n	8014248 <__swsetup_r+0x50>
 8014224:	2309      	movs	r3, #9
 8014226:	6033      	str	r3, [r6, #0]
 8014228:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801422c:	81a3      	strh	r3, [r4, #12]
 801422e:	f04f 30ff 	mov.w	r0, #4294967295
 8014232:	e03e      	b.n	80142b2 <__swsetup_r+0xba>
 8014234:	4b25      	ldr	r3, [pc, #148]	; (80142cc <__swsetup_r+0xd4>)
 8014236:	429c      	cmp	r4, r3
 8014238:	d101      	bne.n	801423e <__swsetup_r+0x46>
 801423a:	68ac      	ldr	r4, [r5, #8]
 801423c:	e7eb      	b.n	8014216 <__swsetup_r+0x1e>
 801423e:	4b24      	ldr	r3, [pc, #144]	; (80142d0 <__swsetup_r+0xd8>)
 8014240:	429c      	cmp	r4, r3
 8014242:	bf08      	it	eq
 8014244:	68ec      	ldreq	r4, [r5, #12]
 8014246:	e7e6      	b.n	8014216 <__swsetup_r+0x1e>
 8014248:	0758      	lsls	r0, r3, #29
 801424a:	d512      	bpl.n	8014272 <__swsetup_r+0x7a>
 801424c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801424e:	b141      	cbz	r1, 8014262 <__swsetup_r+0x6a>
 8014250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014254:	4299      	cmp	r1, r3
 8014256:	d002      	beq.n	801425e <__swsetup_r+0x66>
 8014258:	4630      	mov	r0, r6
 801425a:	f000 fa59 	bl	8014710 <_free_r>
 801425e:	2300      	movs	r3, #0
 8014260:	6363      	str	r3, [r4, #52]	; 0x34
 8014262:	89a3      	ldrh	r3, [r4, #12]
 8014264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014268:	81a3      	strh	r3, [r4, #12]
 801426a:	2300      	movs	r3, #0
 801426c:	6063      	str	r3, [r4, #4]
 801426e:	6923      	ldr	r3, [r4, #16]
 8014270:	6023      	str	r3, [r4, #0]
 8014272:	89a3      	ldrh	r3, [r4, #12]
 8014274:	f043 0308 	orr.w	r3, r3, #8
 8014278:	81a3      	strh	r3, [r4, #12]
 801427a:	6923      	ldr	r3, [r4, #16]
 801427c:	b94b      	cbnz	r3, 8014292 <__swsetup_r+0x9a>
 801427e:	89a3      	ldrh	r3, [r4, #12]
 8014280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014288:	d003      	beq.n	8014292 <__swsetup_r+0x9a>
 801428a:	4621      	mov	r1, r4
 801428c:	4630      	mov	r0, r6
 801428e:	f000 f9ff 	bl	8014690 <__smakebuf_r>
 8014292:	89a0      	ldrh	r0, [r4, #12]
 8014294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014298:	f010 0301 	ands.w	r3, r0, #1
 801429c:	d00a      	beq.n	80142b4 <__swsetup_r+0xbc>
 801429e:	2300      	movs	r3, #0
 80142a0:	60a3      	str	r3, [r4, #8]
 80142a2:	6963      	ldr	r3, [r4, #20]
 80142a4:	425b      	negs	r3, r3
 80142a6:	61a3      	str	r3, [r4, #24]
 80142a8:	6923      	ldr	r3, [r4, #16]
 80142aa:	b943      	cbnz	r3, 80142be <__swsetup_r+0xc6>
 80142ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80142b0:	d1ba      	bne.n	8014228 <__swsetup_r+0x30>
 80142b2:	bd70      	pop	{r4, r5, r6, pc}
 80142b4:	0781      	lsls	r1, r0, #30
 80142b6:	bf58      	it	pl
 80142b8:	6963      	ldrpl	r3, [r4, #20]
 80142ba:	60a3      	str	r3, [r4, #8]
 80142bc:	e7f4      	b.n	80142a8 <__swsetup_r+0xb0>
 80142be:	2000      	movs	r0, #0
 80142c0:	e7f7      	b.n	80142b2 <__swsetup_r+0xba>
 80142c2:	bf00      	nop
 80142c4:	20000074 	.word	0x20000074
 80142c8:	080150ec 	.word	0x080150ec
 80142cc:	0801510c 	.word	0x0801510c
 80142d0:	080150cc 	.word	0x080150cc

080142d4 <__sflush_r>:
 80142d4:	898a      	ldrh	r2, [r1, #12]
 80142d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142da:	4605      	mov	r5, r0
 80142dc:	0710      	lsls	r0, r2, #28
 80142de:	460c      	mov	r4, r1
 80142e0:	d458      	bmi.n	8014394 <__sflush_r+0xc0>
 80142e2:	684b      	ldr	r3, [r1, #4]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	dc05      	bgt.n	80142f4 <__sflush_r+0x20>
 80142e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	dc02      	bgt.n	80142f4 <__sflush_r+0x20>
 80142ee:	2000      	movs	r0, #0
 80142f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80142f6:	2e00      	cmp	r6, #0
 80142f8:	d0f9      	beq.n	80142ee <__sflush_r+0x1a>
 80142fa:	2300      	movs	r3, #0
 80142fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014300:	682f      	ldr	r7, [r5, #0]
 8014302:	602b      	str	r3, [r5, #0]
 8014304:	d032      	beq.n	801436c <__sflush_r+0x98>
 8014306:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014308:	89a3      	ldrh	r3, [r4, #12]
 801430a:	075a      	lsls	r2, r3, #29
 801430c:	d505      	bpl.n	801431a <__sflush_r+0x46>
 801430e:	6863      	ldr	r3, [r4, #4]
 8014310:	1ac0      	subs	r0, r0, r3
 8014312:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014314:	b10b      	cbz	r3, 801431a <__sflush_r+0x46>
 8014316:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014318:	1ac0      	subs	r0, r0, r3
 801431a:	2300      	movs	r3, #0
 801431c:	4602      	mov	r2, r0
 801431e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014320:	6a21      	ldr	r1, [r4, #32]
 8014322:	4628      	mov	r0, r5
 8014324:	47b0      	blx	r6
 8014326:	1c43      	adds	r3, r0, #1
 8014328:	89a3      	ldrh	r3, [r4, #12]
 801432a:	d106      	bne.n	801433a <__sflush_r+0x66>
 801432c:	6829      	ldr	r1, [r5, #0]
 801432e:	291d      	cmp	r1, #29
 8014330:	d82c      	bhi.n	801438c <__sflush_r+0xb8>
 8014332:	4a2a      	ldr	r2, [pc, #168]	; (80143dc <__sflush_r+0x108>)
 8014334:	40ca      	lsrs	r2, r1
 8014336:	07d6      	lsls	r6, r2, #31
 8014338:	d528      	bpl.n	801438c <__sflush_r+0xb8>
 801433a:	2200      	movs	r2, #0
 801433c:	6062      	str	r2, [r4, #4]
 801433e:	04d9      	lsls	r1, r3, #19
 8014340:	6922      	ldr	r2, [r4, #16]
 8014342:	6022      	str	r2, [r4, #0]
 8014344:	d504      	bpl.n	8014350 <__sflush_r+0x7c>
 8014346:	1c42      	adds	r2, r0, #1
 8014348:	d101      	bne.n	801434e <__sflush_r+0x7a>
 801434a:	682b      	ldr	r3, [r5, #0]
 801434c:	b903      	cbnz	r3, 8014350 <__sflush_r+0x7c>
 801434e:	6560      	str	r0, [r4, #84]	; 0x54
 8014350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014352:	602f      	str	r7, [r5, #0]
 8014354:	2900      	cmp	r1, #0
 8014356:	d0ca      	beq.n	80142ee <__sflush_r+0x1a>
 8014358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801435c:	4299      	cmp	r1, r3
 801435e:	d002      	beq.n	8014366 <__sflush_r+0x92>
 8014360:	4628      	mov	r0, r5
 8014362:	f000 f9d5 	bl	8014710 <_free_r>
 8014366:	2000      	movs	r0, #0
 8014368:	6360      	str	r0, [r4, #52]	; 0x34
 801436a:	e7c1      	b.n	80142f0 <__sflush_r+0x1c>
 801436c:	6a21      	ldr	r1, [r4, #32]
 801436e:	2301      	movs	r3, #1
 8014370:	4628      	mov	r0, r5
 8014372:	47b0      	blx	r6
 8014374:	1c41      	adds	r1, r0, #1
 8014376:	d1c7      	bne.n	8014308 <__sflush_r+0x34>
 8014378:	682b      	ldr	r3, [r5, #0]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d0c4      	beq.n	8014308 <__sflush_r+0x34>
 801437e:	2b1d      	cmp	r3, #29
 8014380:	d001      	beq.n	8014386 <__sflush_r+0xb2>
 8014382:	2b16      	cmp	r3, #22
 8014384:	d101      	bne.n	801438a <__sflush_r+0xb6>
 8014386:	602f      	str	r7, [r5, #0]
 8014388:	e7b1      	b.n	80142ee <__sflush_r+0x1a>
 801438a:	89a3      	ldrh	r3, [r4, #12]
 801438c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014390:	81a3      	strh	r3, [r4, #12]
 8014392:	e7ad      	b.n	80142f0 <__sflush_r+0x1c>
 8014394:	690f      	ldr	r7, [r1, #16]
 8014396:	2f00      	cmp	r7, #0
 8014398:	d0a9      	beq.n	80142ee <__sflush_r+0x1a>
 801439a:	0793      	lsls	r3, r2, #30
 801439c:	680e      	ldr	r6, [r1, #0]
 801439e:	bf08      	it	eq
 80143a0:	694b      	ldreq	r3, [r1, #20]
 80143a2:	600f      	str	r7, [r1, #0]
 80143a4:	bf18      	it	ne
 80143a6:	2300      	movne	r3, #0
 80143a8:	eba6 0807 	sub.w	r8, r6, r7
 80143ac:	608b      	str	r3, [r1, #8]
 80143ae:	f1b8 0f00 	cmp.w	r8, #0
 80143b2:	dd9c      	ble.n	80142ee <__sflush_r+0x1a>
 80143b4:	6a21      	ldr	r1, [r4, #32]
 80143b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80143b8:	4643      	mov	r3, r8
 80143ba:	463a      	mov	r2, r7
 80143bc:	4628      	mov	r0, r5
 80143be:	47b0      	blx	r6
 80143c0:	2800      	cmp	r0, #0
 80143c2:	dc06      	bgt.n	80143d2 <__sflush_r+0xfe>
 80143c4:	89a3      	ldrh	r3, [r4, #12]
 80143c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143ca:	81a3      	strh	r3, [r4, #12]
 80143cc:	f04f 30ff 	mov.w	r0, #4294967295
 80143d0:	e78e      	b.n	80142f0 <__sflush_r+0x1c>
 80143d2:	4407      	add	r7, r0
 80143d4:	eba8 0800 	sub.w	r8, r8, r0
 80143d8:	e7e9      	b.n	80143ae <__sflush_r+0xda>
 80143da:	bf00      	nop
 80143dc:	20400001 	.word	0x20400001

080143e0 <_fflush_r>:
 80143e0:	b538      	push	{r3, r4, r5, lr}
 80143e2:	690b      	ldr	r3, [r1, #16]
 80143e4:	4605      	mov	r5, r0
 80143e6:	460c      	mov	r4, r1
 80143e8:	b913      	cbnz	r3, 80143f0 <_fflush_r+0x10>
 80143ea:	2500      	movs	r5, #0
 80143ec:	4628      	mov	r0, r5
 80143ee:	bd38      	pop	{r3, r4, r5, pc}
 80143f0:	b118      	cbz	r0, 80143fa <_fflush_r+0x1a>
 80143f2:	6983      	ldr	r3, [r0, #24]
 80143f4:	b90b      	cbnz	r3, 80143fa <_fflush_r+0x1a>
 80143f6:	f000 f887 	bl	8014508 <__sinit>
 80143fa:	4b14      	ldr	r3, [pc, #80]	; (801444c <_fflush_r+0x6c>)
 80143fc:	429c      	cmp	r4, r3
 80143fe:	d11b      	bne.n	8014438 <_fflush_r+0x58>
 8014400:	686c      	ldr	r4, [r5, #4]
 8014402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d0ef      	beq.n	80143ea <_fflush_r+0xa>
 801440a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801440c:	07d0      	lsls	r0, r2, #31
 801440e:	d404      	bmi.n	801441a <_fflush_r+0x3a>
 8014410:	0599      	lsls	r1, r3, #22
 8014412:	d402      	bmi.n	801441a <_fflush_r+0x3a>
 8014414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014416:	f000 f915 	bl	8014644 <__retarget_lock_acquire_recursive>
 801441a:	4628      	mov	r0, r5
 801441c:	4621      	mov	r1, r4
 801441e:	f7ff ff59 	bl	80142d4 <__sflush_r>
 8014422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014424:	07da      	lsls	r2, r3, #31
 8014426:	4605      	mov	r5, r0
 8014428:	d4e0      	bmi.n	80143ec <_fflush_r+0xc>
 801442a:	89a3      	ldrh	r3, [r4, #12]
 801442c:	059b      	lsls	r3, r3, #22
 801442e:	d4dd      	bmi.n	80143ec <_fflush_r+0xc>
 8014430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014432:	f000 f908 	bl	8014646 <__retarget_lock_release_recursive>
 8014436:	e7d9      	b.n	80143ec <_fflush_r+0xc>
 8014438:	4b05      	ldr	r3, [pc, #20]	; (8014450 <_fflush_r+0x70>)
 801443a:	429c      	cmp	r4, r3
 801443c:	d101      	bne.n	8014442 <_fflush_r+0x62>
 801443e:	68ac      	ldr	r4, [r5, #8]
 8014440:	e7df      	b.n	8014402 <_fflush_r+0x22>
 8014442:	4b04      	ldr	r3, [pc, #16]	; (8014454 <_fflush_r+0x74>)
 8014444:	429c      	cmp	r4, r3
 8014446:	bf08      	it	eq
 8014448:	68ec      	ldreq	r4, [r5, #12]
 801444a:	e7da      	b.n	8014402 <_fflush_r+0x22>
 801444c:	080150ec 	.word	0x080150ec
 8014450:	0801510c 	.word	0x0801510c
 8014454:	080150cc 	.word	0x080150cc

08014458 <std>:
 8014458:	2300      	movs	r3, #0
 801445a:	b510      	push	{r4, lr}
 801445c:	4604      	mov	r4, r0
 801445e:	e9c0 3300 	strd	r3, r3, [r0]
 8014462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014466:	6083      	str	r3, [r0, #8]
 8014468:	8181      	strh	r1, [r0, #12]
 801446a:	6643      	str	r3, [r0, #100]	; 0x64
 801446c:	81c2      	strh	r2, [r0, #14]
 801446e:	6183      	str	r3, [r0, #24]
 8014470:	4619      	mov	r1, r3
 8014472:	2208      	movs	r2, #8
 8014474:	305c      	adds	r0, #92	; 0x5c
 8014476:	f7ff fdc3 	bl	8014000 <memset>
 801447a:	4b05      	ldr	r3, [pc, #20]	; (8014490 <std+0x38>)
 801447c:	6263      	str	r3, [r4, #36]	; 0x24
 801447e:	4b05      	ldr	r3, [pc, #20]	; (8014494 <std+0x3c>)
 8014480:	62a3      	str	r3, [r4, #40]	; 0x28
 8014482:	4b05      	ldr	r3, [pc, #20]	; (8014498 <std+0x40>)
 8014484:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014486:	4b05      	ldr	r3, [pc, #20]	; (801449c <std+0x44>)
 8014488:	6224      	str	r4, [r4, #32]
 801448a:	6323      	str	r3, [r4, #48]	; 0x30
 801448c:	bd10      	pop	{r4, pc}
 801448e:	bf00      	nop
 8014490:	08014e61 	.word	0x08014e61
 8014494:	08014e83 	.word	0x08014e83
 8014498:	08014ebb 	.word	0x08014ebb
 801449c:	08014edf 	.word	0x08014edf

080144a0 <_cleanup_r>:
 80144a0:	4901      	ldr	r1, [pc, #4]	; (80144a8 <_cleanup_r+0x8>)
 80144a2:	f000 b8af 	b.w	8014604 <_fwalk_reent>
 80144a6:	bf00      	nop
 80144a8:	080143e1 	.word	0x080143e1

080144ac <__sfmoreglue>:
 80144ac:	b570      	push	{r4, r5, r6, lr}
 80144ae:	1e4a      	subs	r2, r1, #1
 80144b0:	2568      	movs	r5, #104	; 0x68
 80144b2:	4355      	muls	r5, r2
 80144b4:	460e      	mov	r6, r1
 80144b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80144ba:	f000 f979 	bl	80147b0 <_malloc_r>
 80144be:	4604      	mov	r4, r0
 80144c0:	b140      	cbz	r0, 80144d4 <__sfmoreglue+0x28>
 80144c2:	2100      	movs	r1, #0
 80144c4:	e9c0 1600 	strd	r1, r6, [r0]
 80144c8:	300c      	adds	r0, #12
 80144ca:	60a0      	str	r0, [r4, #8]
 80144cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80144d0:	f7ff fd96 	bl	8014000 <memset>
 80144d4:	4620      	mov	r0, r4
 80144d6:	bd70      	pop	{r4, r5, r6, pc}

080144d8 <__sfp_lock_acquire>:
 80144d8:	4801      	ldr	r0, [pc, #4]	; (80144e0 <__sfp_lock_acquire+0x8>)
 80144da:	f000 b8b3 	b.w	8014644 <__retarget_lock_acquire_recursive>
 80144de:	bf00      	nop
 80144e0:	200072f0 	.word	0x200072f0

080144e4 <__sfp_lock_release>:
 80144e4:	4801      	ldr	r0, [pc, #4]	; (80144ec <__sfp_lock_release+0x8>)
 80144e6:	f000 b8ae 	b.w	8014646 <__retarget_lock_release_recursive>
 80144ea:	bf00      	nop
 80144ec:	200072f0 	.word	0x200072f0

080144f0 <__sinit_lock_acquire>:
 80144f0:	4801      	ldr	r0, [pc, #4]	; (80144f8 <__sinit_lock_acquire+0x8>)
 80144f2:	f000 b8a7 	b.w	8014644 <__retarget_lock_acquire_recursive>
 80144f6:	bf00      	nop
 80144f8:	200072eb 	.word	0x200072eb

080144fc <__sinit_lock_release>:
 80144fc:	4801      	ldr	r0, [pc, #4]	; (8014504 <__sinit_lock_release+0x8>)
 80144fe:	f000 b8a2 	b.w	8014646 <__retarget_lock_release_recursive>
 8014502:	bf00      	nop
 8014504:	200072eb 	.word	0x200072eb

08014508 <__sinit>:
 8014508:	b510      	push	{r4, lr}
 801450a:	4604      	mov	r4, r0
 801450c:	f7ff fff0 	bl	80144f0 <__sinit_lock_acquire>
 8014510:	69a3      	ldr	r3, [r4, #24]
 8014512:	b11b      	cbz	r3, 801451c <__sinit+0x14>
 8014514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014518:	f7ff bff0 	b.w	80144fc <__sinit_lock_release>
 801451c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014520:	6523      	str	r3, [r4, #80]	; 0x50
 8014522:	4b13      	ldr	r3, [pc, #76]	; (8014570 <__sinit+0x68>)
 8014524:	4a13      	ldr	r2, [pc, #76]	; (8014574 <__sinit+0x6c>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	62a2      	str	r2, [r4, #40]	; 0x28
 801452a:	42a3      	cmp	r3, r4
 801452c:	bf04      	itt	eq
 801452e:	2301      	moveq	r3, #1
 8014530:	61a3      	streq	r3, [r4, #24]
 8014532:	4620      	mov	r0, r4
 8014534:	f000 f820 	bl	8014578 <__sfp>
 8014538:	6060      	str	r0, [r4, #4]
 801453a:	4620      	mov	r0, r4
 801453c:	f000 f81c 	bl	8014578 <__sfp>
 8014540:	60a0      	str	r0, [r4, #8]
 8014542:	4620      	mov	r0, r4
 8014544:	f000 f818 	bl	8014578 <__sfp>
 8014548:	2200      	movs	r2, #0
 801454a:	60e0      	str	r0, [r4, #12]
 801454c:	2104      	movs	r1, #4
 801454e:	6860      	ldr	r0, [r4, #4]
 8014550:	f7ff ff82 	bl	8014458 <std>
 8014554:	68a0      	ldr	r0, [r4, #8]
 8014556:	2201      	movs	r2, #1
 8014558:	2109      	movs	r1, #9
 801455a:	f7ff ff7d 	bl	8014458 <std>
 801455e:	68e0      	ldr	r0, [r4, #12]
 8014560:	2202      	movs	r2, #2
 8014562:	2112      	movs	r1, #18
 8014564:	f7ff ff78 	bl	8014458 <std>
 8014568:	2301      	movs	r3, #1
 801456a:	61a3      	str	r3, [r4, #24]
 801456c:	e7d2      	b.n	8014514 <__sinit+0xc>
 801456e:	bf00      	nop
 8014570:	080150c8 	.word	0x080150c8
 8014574:	080144a1 	.word	0x080144a1

08014578 <__sfp>:
 8014578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801457a:	4607      	mov	r7, r0
 801457c:	f7ff ffac 	bl	80144d8 <__sfp_lock_acquire>
 8014580:	4b1e      	ldr	r3, [pc, #120]	; (80145fc <__sfp+0x84>)
 8014582:	681e      	ldr	r6, [r3, #0]
 8014584:	69b3      	ldr	r3, [r6, #24]
 8014586:	b913      	cbnz	r3, 801458e <__sfp+0x16>
 8014588:	4630      	mov	r0, r6
 801458a:	f7ff ffbd 	bl	8014508 <__sinit>
 801458e:	3648      	adds	r6, #72	; 0x48
 8014590:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014594:	3b01      	subs	r3, #1
 8014596:	d503      	bpl.n	80145a0 <__sfp+0x28>
 8014598:	6833      	ldr	r3, [r6, #0]
 801459a:	b30b      	cbz	r3, 80145e0 <__sfp+0x68>
 801459c:	6836      	ldr	r6, [r6, #0]
 801459e:	e7f7      	b.n	8014590 <__sfp+0x18>
 80145a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80145a4:	b9d5      	cbnz	r5, 80145dc <__sfp+0x64>
 80145a6:	4b16      	ldr	r3, [pc, #88]	; (8014600 <__sfp+0x88>)
 80145a8:	60e3      	str	r3, [r4, #12]
 80145aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80145ae:	6665      	str	r5, [r4, #100]	; 0x64
 80145b0:	f000 f847 	bl	8014642 <__retarget_lock_init_recursive>
 80145b4:	f7ff ff96 	bl	80144e4 <__sfp_lock_release>
 80145b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80145bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80145c0:	6025      	str	r5, [r4, #0]
 80145c2:	61a5      	str	r5, [r4, #24]
 80145c4:	2208      	movs	r2, #8
 80145c6:	4629      	mov	r1, r5
 80145c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80145cc:	f7ff fd18 	bl	8014000 <memset>
 80145d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80145d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80145d8:	4620      	mov	r0, r4
 80145da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145dc:	3468      	adds	r4, #104	; 0x68
 80145de:	e7d9      	b.n	8014594 <__sfp+0x1c>
 80145e0:	2104      	movs	r1, #4
 80145e2:	4638      	mov	r0, r7
 80145e4:	f7ff ff62 	bl	80144ac <__sfmoreglue>
 80145e8:	4604      	mov	r4, r0
 80145ea:	6030      	str	r0, [r6, #0]
 80145ec:	2800      	cmp	r0, #0
 80145ee:	d1d5      	bne.n	801459c <__sfp+0x24>
 80145f0:	f7ff ff78 	bl	80144e4 <__sfp_lock_release>
 80145f4:	230c      	movs	r3, #12
 80145f6:	603b      	str	r3, [r7, #0]
 80145f8:	e7ee      	b.n	80145d8 <__sfp+0x60>
 80145fa:	bf00      	nop
 80145fc:	080150c8 	.word	0x080150c8
 8014600:	ffff0001 	.word	0xffff0001

08014604 <_fwalk_reent>:
 8014604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014608:	4606      	mov	r6, r0
 801460a:	4688      	mov	r8, r1
 801460c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014610:	2700      	movs	r7, #0
 8014612:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014616:	f1b9 0901 	subs.w	r9, r9, #1
 801461a:	d505      	bpl.n	8014628 <_fwalk_reent+0x24>
 801461c:	6824      	ldr	r4, [r4, #0]
 801461e:	2c00      	cmp	r4, #0
 8014620:	d1f7      	bne.n	8014612 <_fwalk_reent+0xe>
 8014622:	4638      	mov	r0, r7
 8014624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014628:	89ab      	ldrh	r3, [r5, #12]
 801462a:	2b01      	cmp	r3, #1
 801462c:	d907      	bls.n	801463e <_fwalk_reent+0x3a>
 801462e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014632:	3301      	adds	r3, #1
 8014634:	d003      	beq.n	801463e <_fwalk_reent+0x3a>
 8014636:	4629      	mov	r1, r5
 8014638:	4630      	mov	r0, r6
 801463a:	47c0      	blx	r8
 801463c:	4307      	orrs	r7, r0
 801463e:	3568      	adds	r5, #104	; 0x68
 8014640:	e7e9      	b.n	8014616 <_fwalk_reent+0x12>

08014642 <__retarget_lock_init_recursive>:
 8014642:	4770      	bx	lr

08014644 <__retarget_lock_acquire_recursive>:
 8014644:	4770      	bx	lr

08014646 <__retarget_lock_release_recursive>:
 8014646:	4770      	bx	lr

08014648 <__swhatbuf_r>:
 8014648:	b570      	push	{r4, r5, r6, lr}
 801464a:	460e      	mov	r6, r1
 801464c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014650:	2900      	cmp	r1, #0
 8014652:	b096      	sub	sp, #88	; 0x58
 8014654:	4614      	mov	r4, r2
 8014656:	461d      	mov	r5, r3
 8014658:	da07      	bge.n	801466a <__swhatbuf_r+0x22>
 801465a:	2300      	movs	r3, #0
 801465c:	602b      	str	r3, [r5, #0]
 801465e:	89b3      	ldrh	r3, [r6, #12]
 8014660:	061a      	lsls	r2, r3, #24
 8014662:	d410      	bmi.n	8014686 <__swhatbuf_r+0x3e>
 8014664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014668:	e00e      	b.n	8014688 <__swhatbuf_r+0x40>
 801466a:	466a      	mov	r2, sp
 801466c:	f000 fc5e 	bl	8014f2c <_fstat_r>
 8014670:	2800      	cmp	r0, #0
 8014672:	dbf2      	blt.n	801465a <__swhatbuf_r+0x12>
 8014674:	9a01      	ldr	r2, [sp, #4]
 8014676:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801467a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801467e:	425a      	negs	r2, r3
 8014680:	415a      	adcs	r2, r3
 8014682:	602a      	str	r2, [r5, #0]
 8014684:	e7ee      	b.n	8014664 <__swhatbuf_r+0x1c>
 8014686:	2340      	movs	r3, #64	; 0x40
 8014688:	2000      	movs	r0, #0
 801468a:	6023      	str	r3, [r4, #0]
 801468c:	b016      	add	sp, #88	; 0x58
 801468e:	bd70      	pop	{r4, r5, r6, pc}

08014690 <__smakebuf_r>:
 8014690:	898b      	ldrh	r3, [r1, #12]
 8014692:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014694:	079d      	lsls	r5, r3, #30
 8014696:	4606      	mov	r6, r0
 8014698:	460c      	mov	r4, r1
 801469a:	d507      	bpl.n	80146ac <__smakebuf_r+0x1c>
 801469c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80146a0:	6023      	str	r3, [r4, #0]
 80146a2:	6123      	str	r3, [r4, #16]
 80146a4:	2301      	movs	r3, #1
 80146a6:	6163      	str	r3, [r4, #20]
 80146a8:	b002      	add	sp, #8
 80146aa:	bd70      	pop	{r4, r5, r6, pc}
 80146ac:	ab01      	add	r3, sp, #4
 80146ae:	466a      	mov	r2, sp
 80146b0:	f7ff ffca 	bl	8014648 <__swhatbuf_r>
 80146b4:	9900      	ldr	r1, [sp, #0]
 80146b6:	4605      	mov	r5, r0
 80146b8:	4630      	mov	r0, r6
 80146ba:	f000 f879 	bl	80147b0 <_malloc_r>
 80146be:	b948      	cbnz	r0, 80146d4 <__smakebuf_r+0x44>
 80146c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146c4:	059a      	lsls	r2, r3, #22
 80146c6:	d4ef      	bmi.n	80146a8 <__smakebuf_r+0x18>
 80146c8:	f023 0303 	bic.w	r3, r3, #3
 80146cc:	f043 0302 	orr.w	r3, r3, #2
 80146d0:	81a3      	strh	r3, [r4, #12]
 80146d2:	e7e3      	b.n	801469c <__smakebuf_r+0xc>
 80146d4:	4b0d      	ldr	r3, [pc, #52]	; (801470c <__smakebuf_r+0x7c>)
 80146d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80146d8:	89a3      	ldrh	r3, [r4, #12]
 80146da:	6020      	str	r0, [r4, #0]
 80146dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146e0:	81a3      	strh	r3, [r4, #12]
 80146e2:	9b00      	ldr	r3, [sp, #0]
 80146e4:	6163      	str	r3, [r4, #20]
 80146e6:	9b01      	ldr	r3, [sp, #4]
 80146e8:	6120      	str	r0, [r4, #16]
 80146ea:	b15b      	cbz	r3, 8014704 <__smakebuf_r+0x74>
 80146ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146f0:	4630      	mov	r0, r6
 80146f2:	f000 fc2d 	bl	8014f50 <_isatty_r>
 80146f6:	b128      	cbz	r0, 8014704 <__smakebuf_r+0x74>
 80146f8:	89a3      	ldrh	r3, [r4, #12]
 80146fa:	f023 0303 	bic.w	r3, r3, #3
 80146fe:	f043 0301 	orr.w	r3, r3, #1
 8014702:	81a3      	strh	r3, [r4, #12]
 8014704:	89a0      	ldrh	r0, [r4, #12]
 8014706:	4305      	orrs	r5, r0
 8014708:	81a5      	strh	r5, [r4, #12]
 801470a:	e7cd      	b.n	80146a8 <__smakebuf_r+0x18>
 801470c:	080144a1 	.word	0x080144a1

08014710 <_free_r>:
 8014710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014712:	2900      	cmp	r1, #0
 8014714:	d048      	beq.n	80147a8 <_free_r+0x98>
 8014716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801471a:	9001      	str	r0, [sp, #4]
 801471c:	2b00      	cmp	r3, #0
 801471e:	f1a1 0404 	sub.w	r4, r1, #4
 8014722:	bfb8      	it	lt
 8014724:	18e4      	addlt	r4, r4, r3
 8014726:	f000 fc35 	bl	8014f94 <__malloc_lock>
 801472a:	4a20      	ldr	r2, [pc, #128]	; (80147ac <_free_r+0x9c>)
 801472c:	9801      	ldr	r0, [sp, #4]
 801472e:	6813      	ldr	r3, [r2, #0]
 8014730:	4615      	mov	r5, r2
 8014732:	b933      	cbnz	r3, 8014742 <_free_r+0x32>
 8014734:	6063      	str	r3, [r4, #4]
 8014736:	6014      	str	r4, [r2, #0]
 8014738:	b003      	add	sp, #12
 801473a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801473e:	f000 bc2f 	b.w	8014fa0 <__malloc_unlock>
 8014742:	42a3      	cmp	r3, r4
 8014744:	d90b      	bls.n	801475e <_free_r+0x4e>
 8014746:	6821      	ldr	r1, [r4, #0]
 8014748:	1862      	adds	r2, r4, r1
 801474a:	4293      	cmp	r3, r2
 801474c:	bf04      	itt	eq
 801474e:	681a      	ldreq	r2, [r3, #0]
 8014750:	685b      	ldreq	r3, [r3, #4]
 8014752:	6063      	str	r3, [r4, #4]
 8014754:	bf04      	itt	eq
 8014756:	1852      	addeq	r2, r2, r1
 8014758:	6022      	streq	r2, [r4, #0]
 801475a:	602c      	str	r4, [r5, #0]
 801475c:	e7ec      	b.n	8014738 <_free_r+0x28>
 801475e:	461a      	mov	r2, r3
 8014760:	685b      	ldr	r3, [r3, #4]
 8014762:	b10b      	cbz	r3, 8014768 <_free_r+0x58>
 8014764:	42a3      	cmp	r3, r4
 8014766:	d9fa      	bls.n	801475e <_free_r+0x4e>
 8014768:	6811      	ldr	r1, [r2, #0]
 801476a:	1855      	adds	r5, r2, r1
 801476c:	42a5      	cmp	r5, r4
 801476e:	d10b      	bne.n	8014788 <_free_r+0x78>
 8014770:	6824      	ldr	r4, [r4, #0]
 8014772:	4421      	add	r1, r4
 8014774:	1854      	adds	r4, r2, r1
 8014776:	42a3      	cmp	r3, r4
 8014778:	6011      	str	r1, [r2, #0]
 801477a:	d1dd      	bne.n	8014738 <_free_r+0x28>
 801477c:	681c      	ldr	r4, [r3, #0]
 801477e:	685b      	ldr	r3, [r3, #4]
 8014780:	6053      	str	r3, [r2, #4]
 8014782:	4421      	add	r1, r4
 8014784:	6011      	str	r1, [r2, #0]
 8014786:	e7d7      	b.n	8014738 <_free_r+0x28>
 8014788:	d902      	bls.n	8014790 <_free_r+0x80>
 801478a:	230c      	movs	r3, #12
 801478c:	6003      	str	r3, [r0, #0]
 801478e:	e7d3      	b.n	8014738 <_free_r+0x28>
 8014790:	6825      	ldr	r5, [r4, #0]
 8014792:	1961      	adds	r1, r4, r5
 8014794:	428b      	cmp	r3, r1
 8014796:	bf04      	itt	eq
 8014798:	6819      	ldreq	r1, [r3, #0]
 801479a:	685b      	ldreq	r3, [r3, #4]
 801479c:	6063      	str	r3, [r4, #4]
 801479e:	bf04      	itt	eq
 80147a0:	1949      	addeq	r1, r1, r5
 80147a2:	6021      	streq	r1, [r4, #0]
 80147a4:	6054      	str	r4, [r2, #4]
 80147a6:	e7c7      	b.n	8014738 <_free_r+0x28>
 80147a8:	b003      	add	sp, #12
 80147aa:	bd30      	pop	{r4, r5, pc}
 80147ac:	20007000 	.word	0x20007000

080147b0 <_malloc_r>:
 80147b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147b2:	1ccd      	adds	r5, r1, #3
 80147b4:	f025 0503 	bic.w	r5, r5, #3
 80147b8:	3508      	adds	r5, #8
 80147ba:	2d0c      	cmp	r5, #12
 80147bc:	bf38      	it	cc
 80147be:	250c      	movcc	r5, #12
 80147c0:	2d00      	cmp	r5, #0
 80147c2:	4606      	mov	r6, r0
 80147c4:	db01      	blt.n	80147ca <_malloc_r+0x1a>
 80147c6:	42a9      	cmp	r1, r5
 80147c8:	d903      	bls.n	80147d2 <_malloc_r+0x22>
 80147ca:	230c      	movs	r3, #12
 80147cc:	6033      	str	r3, [r6, #0]
 80147ce:	2000      	movs	r0, #0
 80147d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147d2:	f000 fbdf 	bl	8014f94 <__malloc_lock>
 80147d6:	4921      	ldr	r1, [pc, #132]	; (801485c <_malloc_r+0xac>)
 80147d8:	680a      	ldr	r2, [r1, #0]
 80147da:	4614      	mov	r4, r2
 80147dc:	b99c      	cbnz	r4, 8014806 <_malloc_r+0x56>
 80147de:	4f20      	ldr	r7, [pc, #128]	; (8014860 <_malloc_r+0xb0>)
 80147e0:	683b      	ldr	r3, [r7, #0]
 80147e2:	b923      	cbnz	r3, 80147ee <_malloc_r+0x3e>
 80147e4:	4621      	mov	r1, r4
 80147e6:	4630      	mov	r0, r6
 80147e8:	f000 fb2a 	bl	8014e40 <_sbrk_r>
 80147ec:	6038      	str	r0, [r7, #0]
 80147ee:	4629      	mov	r1, r5
 80147f0:	4630      	mov	r0, r6
 80147f2:	f000 fb25 	bl	8014e40 <_sbrk_r>
 80147f6:	1c43      	adds	r3, r0, #1
 80147f8:	d123      	bne.n	8014842 <_malloc_r+0x92>
 80147fa:	230c      	movs	r3, #12
 80147fc:	6033      	str	r3, [r6, #0]
 80147fe:	4630      	mov	r0, r6
 8014800:	f000 fbce 	bl	8014fa0 <__malloc_unlock>
 8014804:	e7e3      	b.n	80147ce <_malloc_r+0x1e>
 8014806:	6823      	ldr	r3, [r4, #0]
 8014808:	1b5b      	subs	r3, r3, r5
 801480a:	d417      	bmi.n	801483c <_malloc_r+0x8c>
 801480c:	2b0b      	cmp	r3, #11
 801480e:	d903      	bls.n	8014818 <_malloc_r+0x68>
 8014810:	6023      	str	r3, [r4, #0]
 8014812:	441c      	add	r4, r3
 8014814:	6025      	str	r5, [r4, #0]
 8014816:	e004      	b.n	8014822 <_malloc_r+0x72>
 8014818:	6863      	ldr	r3, [r4, #4]
 801481a:	42a2      	cmp	r2, r4
 801481c:	bf0c      	ite	eq
 801481e:	600b      	streq	r3, [r1, #0]
 8014820:	6053      	strne	r3, [r2, #4]
 8014822:	4630      	mov	r0, r6
 8014824:	f000 fbbc 	bl	8014fa0 <__malloc_unlock>
 8014828:	f104 000b 	add.w	r0, r4, #11
 801482c:	1d23      	adds	r3, r4, #4
 801482e:	f020 0007 	bic.w	r0, r0, #7
 8014832:	1ac2      	subs	r2, r0, r3
 8014834:	d0cc      	beq.n	80147d0 <_malloc_r+0x20>
 8014836:	1a1b      	subs	r3, r3, r0
 8014838:	50a3      	str	r3, [r4, r2]
 801483a:	e7c9      	b.n	80147d0 <_malloc_r+0x20>
 801483c:	4622      	mov	r2, r4
 801483e:	6864      	ldr	r4, [r4, #4]
 8014840:	e7cc      	b.n	80147dc <_malloc_r+0x2c>
 8014842:	1cc4      	adds	r4, r0, #3
 8014844:	f024 0403 	bic.w	r4, r4, #3
 8014848:	42a0      	cmp	r0, r4
 801484a:	d0e3      	beq.n	8014814 <_malloc_r+0x64>
 801484c:	1a21      	subs	r1, r4, r0
 801484e:	4630      	mov	r0, r6
 8014850:	f000 faf6 	bl	8014e40 <_sbrk_r>
 8014854:	3001      	adds	r0, #1
 8014856:	d1dd      	bne.n	8014814 <_malloc_r+0x64>
 8014858:	e7cf      	b.n	80147fa <_malloc_r+0x4a>
 801485a:	bf00      	nop
 801485c:	20007000 	.word	0x20007000
 8014860:	20007004 	.word	0x20007004

08014864 <__sfputc_r>:
 8014864:	6893      	ldr	r3, [r2, #8]
 8014866:	3b01      	subs	r3, #1
 8014868:	2b00      	cmp	r3, #0
 801486a:	b410      	push	{r4}
 801486c:	6093      	str	r3, [r2, #8]
 801486e:	da08      	bge.n	8014882 <__sfputc_r+0x1e>
 8014870:	6994      	ldr	r4, [r2, #24]
 8014872:	42a3      	cmp	r3, r4
 8014874:	db01      	blt.n	801487a <__sfputc_r+0x16>
 8014876:	290a      	cmp	r1, #10
 8014878:	d103      	bne.n	8014882 <__sfputc_r+0x1e>
 801487a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801487e:	f7ff bc69 	b.w	8014154 <__swbuf_r>
 8014882:	6813      	ldr	r3, [r2, #0]
 8014884:	1c58      	adds	r0, r3, #1
 8014886:	6010      	str	r0, [r2, #0]
 8014888:	7019      	strb	r1, [r3, #0]
 801488a:	4608      	mov	r0, r1
 801488c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014890:	4770      	bx	lr

08014892 <__sfputs_r>:
 8014892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014894:	4606      	mov	r6, r0
 8014896:	460f      	mov	r7, r1
 8014898:	4614      	mov	r4, r2
 801489a:	18d5      	adds	r5, r2, r3
 801489c:	42ac      	cmp	r4, r5
 801489e:	d101      	bne.n	80148a4 <__sfputs_r+0x12>
 80148a0:	2000      	movs	r0, #0
 80148a2:	e007      	b.n	80148b4 <__sfputs_r+0x22>
 80148a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148a8:	463a      	mov	r2, r7
 80148aa:	4630      	mov	r0, r6
 80148ac:	f7ff ffda 	bl	8014864 <__sfputc_r>
 80148b0:	1c43      	adds	r3, r0, #1
 80148b2:	d1f3      	bne.n	801489c <__sfputs_r+0xa>
 80148b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080148b8 <_vfiprintf_r>:
 80148b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148bc:	460d      	mov	r5, r1
 80148be:	b09d      	sub	sp, #116	; 0x74
 80148c0:	4614      	mov	r4, r2
 80148c2:	4698      	mov	r8, r3
 80148c4:	4606      	mov	r6, r0
 80148c6:	b118      	cbz	r0, 80148d0 <_vfiprintf_r+0x18>
 80148c8:	6983      	ldr	r3, [r0, #24]
 80148ca:	b90b      	cbnz	r3, 80148d0 <_vfiprintf_r+0x18>
 80148cc:	f7ff fe1c 	bl	8014508 <__sinit>
 80148d0:	4b89      	ldr	r3, [pc, #548]	; (8014af8 <_vfiprintf_r+0x240>)
 80148d2:	429d      	cmp	r5, r3
 80148d4:	d11b      	bne.n	801490e <_vfiprintf_r+0x56>
 80148d6:	6875      	ldr	r5, [r6, #4]
 80148d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80148da:	07d9      	lsls	r1, r3, #31
 80148dc:	d405      	bmi.n	80148ea <_vfiprintf_r+0x32>
 80148de:	89ab      	ldrh	r3, [r5, #12]
 80148e0:	059a      	lsls	r2, r3, #22
 80148e2:	d402      	bmi.n	80148ea <_vfiprintf_r+0x32>
 80148e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80148e6:	f7ff fead 	bl	8014644 <__retarget_lock_acquire_recursive>
 80148ea:	89ab      	ldrh	r3, [r5, #12]
 80148ec:	071b      	lsls	r3, r3, #28
 80148ee:	d501      	bpl.n	80148f4 <_vfiprintf_r+0x3c>
 80148f0:	692b      	ldr	r3, [r5, #16]
 80148f2:	b9eb      	cbnz	r3, 8014930 <_vfiprintf_r+0x78>
 80148f4:	4629      	mov	r1, r5
 80148f6:	4630      	mov	r0, r6
 80148f8:	f7ff fc7e 	bl	80141f8 <__swsetup_r>
 80148fc:	b1c0      	cbz	r0, 8014930 <_vfiprintf_r+0x78>
 80148fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014900:	07dc      	lsls	r4, r3, #31
 8014902:	d50e      	bpl.n	8014922 <_vfiprintf_r+0x6a>
 8014904:	f04f 30ff 	mov.w	r0, #4294967295
 8014908:	b01d      	add	sp, #116	; 0x74
 801490a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801490e:	4b7b      	ldr	r3, [pc, #492]	; (8014afc <_vfiprintf_r+0x244>)
 8014910:	429d      	cmp	r5, r3
 8014912:	d101      	bne.n	8014918 <_vfiprintf_r+0x60>
 8014914:	68b5      	ldr	r5, [r6, #8]
 8014916:	e7df      	b.n	80148d8 <_vfiprintf_r+0x20>
 8014918:	4b79      	ldr	r3, [pc, #484]	; (8014b00 <_vfiprintf_r+0x248>)
 801491a:	429d      	cmp	r5, r3
 801491c:	bf08      	it	eq
 801491e:	68f5      	ldreq	r5, [r6, #12]
 8014920:	e7da      	b.n	80148d8 <_vfiprintf_r+0x20>
 8014922:	89ab      	ldrh	r3, [r5, #12]
 8014924:	0598      	lsls	r0, r3, #22
 8014926:	d4ed      	bmi.n	8014904 <_vfiprintf_r+0x4c>
 8014928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801492a:	f7ff fe8c 	bl	8014646 <__retarget_lock_release_recursive>
 801492e:	e7e9      	b.n	8014904 <_vfiprintf_r+0x4c>
 8014930:	2300      	movs	r3, #0
 8014932:	9309      	str	r3, [sp, #36]	; 0x24
 8014934:	2320      	movs	r3, #32
 8014936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801493a:	f8cd 800c 	str.w	r8, [sp, #12]
 801493e:	2330      	movs	r3, #48	; 0x30
 8014940:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014b04 <_vfiprintf_r+0x24c>
 8014944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014948:	f04f 0901 	mov.w	r9, #1
 801494c:	4623      	mov	r3, r4
 801494e:	469a      	mov	sl, r3
 8014950:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014954:	b10a      	cbz	r2, 801495a <_vfiprintf_r+0xa2>
 8014956:	2a25      	cmp	r2, #37	; 0x25
 8014958:	d1f9      	bne.n	801494e <_vfiprintf_r+0x96>
 801495a:	ebba 0b04 	subs.w	fp, sl, r4
 801495e:	d00b      	beq.n	8014978 <_vfiprintf_r+0xc0>
 8014960:	465b      	mov	r3, fp
 8014962:	4622      	mov	r2, r4
 8014964:	4629      	mov	r1, r5
 8014966:	4630      	mov	r0, r6
 8014968:	f7ff ff93 	bl	8014892 <__sfputs_r>
 801496c:	3001      	adds	r0, #1
 801496e:	f000 80aa 	beq.w	8014ac6 <_vfiprintf_r+0x20e>
 8014972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014974:	445a      	add	r2, fp
 8014976:	9209      	str	r2, [sp, #36]	; 0x24
 8014978:	f89a 3000 	ldrb.w	r3, [sl]
 801497c:	2b00      	cmp	r3, #0
 801497e:	f000 80a2 	beq.w	8014ac6 <_vfiprintf_r+0x20e>
 8014982:	2300      	movs	r3, #0
 8014984:	f04f 32ff 	mov.w	r2, #4294967295
 8014988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801498c:	f10a 0a01 	add.w	sl, sl, #1
 8014990:	9304      	str	r3, [sp, #16]
 8014992:	9307      	str	r3, [sp, #28]
 8014994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014998:	931a      	str	r3, [sp, #104]	; 0x68
 801499a:	4654      	mov	r4, sl
 801499c:	2205      	movs	r2, #5
 801499e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149a2:	4858      	ldr	r0, [pc, #352]	; (8014b04 <_vfiprintf_r+0x24c>)
 80149a4:	f7eb fc1c 	bl	80001e0 <memchr>
 80149a8:	9a04      	ldr	r2, [sp, #16]
 80149aa:	b9d8      	cbnz	r0, 80149e4 <_vfiprintf_r+0x12c>
 80149ac:	06d1      	lsls	r1, r2, #27
 80149ae:	bf44      	itt	mi
 80149b0:	2320      	movmi	r3, #32
 80149b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80149b6:	0713      	lsls	r3, r2, #28
 80149b8:	bf44      	itt	mi
 80149ba:	232b      	movmi	r3, #43	; 0x2b
 80149bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80149c0:	f89a 3000 	ldrb.w	r3, [sl]
 80149c4:	2b2a      	cmp	r3, #42	; 0x2a
 80149c6:	d015      	beq.n	80149f4 <_vfiprintf_r+0x13c>
 80149c8:	9a07      	ldr	r2, [sp, #28]
 80149ca:	4654      	mov	r4, sl
 80149cc:	2000      	movs	r0, #0
 80149ce:	f04f 0c0a 	mov.w	ip, #10
 80149d2:	4621      	mov	r1, r4
 80149d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80149d8:	3b30      	subs	r3, #48	; 0x30
 80149da:	2b09      	cmp	r3, #9
 80149dc:	d94e      	bls.n	8014a7c <_vfiprintf_r+0x1c4>
 80149de:	b1b0      	cbz	r0, 8014a0e <_vfiprintf_r+0x156>
 80149e0:	9207      	str	r2, [sp, #28]
 80149e2:	e014      	b.n	8014a0e <_vfiprintf_r+0x156>
 80149e4:	eba0 0308 	sub.w	r3, r0, r8
 80149e8:	fa09 f303 	lsl.w	r3, r9, r3
 80149ec:	4313      	orrs	r3, r2
 80149ee:	9304      	str	r3, [sp, #16]
 80149f0:	46a2      	mov	sl, r4
 80149f2:	e7d2      	b.n	801499a <_vfiprintf_r+0xe2>
 80149f4:	9b03      	ldr	r3, [sp, #12]
 80149f6:	1d19      	adds	r1, r3, #4
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	9103      	str	r1, [sp, #12]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	bfbb      	ittet	lt
 8014a00:	425b      	neglt	r3, r3
 8014a02:	f042 0202 	orrlt.w	r2, r2, #2
 8014a06:	9307      	strge	r3, [sp, #28]
 8014a08:	9307      	strlt	r3, [sp, #28]
 8014a0a:	bfb8      	it	lt
 8014a0c:	9204      	strlt	r2, [sp, #16]
 8014a0e:	7823      	ldrb	r3, [r4, #0]
 8014a10:	2b2e      	cmp	r3, #46	; 0x2e
 8014a12:	d10c      	bne.n	8014a2e <_vfiprintf_r+0x176>
 8014a14:	7863      	ldrb	r3, [r4, #1]
 8014a16:	2b2a      	cmp	r3, #42	; 0x2a
 8014a18:	d135      	bne.n	8014a86 <_vfiprintf_r+0x1ce>
 8014a1a:	9b03      	ldr	r3, [sp, #12]
 8014a1c:	1d1a      	adds	r2, r3, #4
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	9203      	str	r2, [sp, #12]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	bfb8      	it	lt
 8014a26:	f04f 33ff 	movlt.w	r3, #4294967295
 8014a2a:	3402      	adds	r4, #2
 8014a2c:	9305      	str	r3, [sp, #20]
 8014a2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014b14 <_vfiprintf_r+0x25c>
 8014a32:	7821      	ldrb	r1, [r4, #0]
 8014a34:	2203      	movs	r2, #3
 8014a36:	4650      	mov	r0, sl
 8014a38:	f7eb fbd2 	bl	80001e0 <memchr>
 8014a3c:	b140      	cbz	r0, 8014a50 <_vfiprintf_r+0x198>
 8014a3e:	2340      	movs	r3, #64	; 0x40
 8014a40:	eba0 000a 	sub.w	r0, r0, sl
 8014a44:	fa03 f000 	lsl.w	r0, r3, r0
 8014a48:	9b04      	ldr	r3, [sp, #16]
 8014a4a:	4303      	orrs	r3, r0
 8014a4c:	3401      	adds	r4, #1
 8014a4e:	9304      	str	r3, [sp, #16]
 8014a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a54:	482c      	ldr	r0, [pc, #176]	; (8014b08 <_vfiprintf_r+0x250>)
 8014a56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a5a:	2206      	movs	r2, #6
 8014a5c:	f7eb fbc0 	bl	80001e0 <memchr>
 8014a60:	2800      	cmp	r0, #0
 8014a62:	d03f      	beq.n	8014ae4 <_vfiprintf_r+0x22c>
 8014a64:	4b29      	ldr	r3, [pc, #164]	; (8014b0c <_vfiprintf_r+0x254>)
 8014a66:	bb1b      	cbnz	r3, 8014ab0 <_vfiprintf_r+0x1f8>
 8014a68:	9b03      	ldr	r3, [sp, #12]
 8014a6a:	3307      	adds	r3, #7
 8014a6c:	f023 0307 	bic.w	r3, r3, #7
 8014a70:	3308      	adds	r3, #8
 8014a72:	9303      	str	r3, [sp, #12]
 8014a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a76:	443b      	add	r3, r7
 8014a78:	9309      	str	r3, [sp, #36]	; 0x24
 8014a7a:	e767      	b.n	801494c <_vfiprintf_r+0x94>
 8014a7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a80:	460c      	mov	r4, r1
 8014a82:	2001      	movs	r0, #1
 8014a84:	e7a5      	b.n	80149d2 <_vfiprintf_r+0x11a>
 8014a86:	2300      	movs	r3, #0
 8014a88:	3401      	adds	r4, #1
 8014a8a:	9305      	str	r3, [sp, #20]
 8014a8c:	4619      	mov	r1, r3
 8014a8e:	f04f 0c0a 	mov.w	ip, #10
 8014a92:	4620      	mov	r0, r4
 8014a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a98:	3a30      	subs	r2, #48	; 0x30
 8014a9a:	2a09      	cmp	r2, #9
 8014a9c:	d903      	bls.n	8014aa6 <_vfiprintf_r+0x1ee>
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d0c5      	beq.n	8014a2e <_vfiprintf_r+0x176>
 8014aa2:	9105      	str	r1, [sp, #20]
 8014aa4:	e7c3      	b.n	8014a2e <_vfiprintf_r+0x176>
 8014aa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8014aaa:	4604      	mov	r4, r0
 8014aac:	2301      	movs	r3, #1
 8014aae:	e7f0      	b.n	8014a92 <_vfiprintf_r+0x1da>
 8014ab0:	ab03      	add	r3, sp, #12
 8014ab2:	9300      	str	r3, [sp, #0]
 8014ab4:	462a      	mov	r2, r5
 8014ab6:	4b16      	ldr	r3, [pc, #88]	; (8014b10 <_vfiprintf_r+0x258>)
 8014ab8:	a904      	add	r1, sp, #16
 8014aba:	4630      	mov	r0, r6
 8014abc:	f3af 8000 	nop.w
 8014ac0:	4607      	mov	r7, r0
 8014ac2:	1c78      	adds	r0, r7, #1
 8014ac4:	d1d6      	bne.n	8014a74 <_vfiprintf_r+0x1bc>
 8014ac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ac8:	07d9      	lsls	r1, r3, #31
 8014aca:	d405      	bmi.n	8014ad8 <_vfiprintf_r+0x220>
 8014acc:	89ab      	ldrh	r3, [r5, #12]
 8014ace:	059a      	lsls	r2, r3, #22
 8014ad0:	d402      	bmi.n	8014ad8 <_vfiprintf_r+0x220>
 8014ad2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ad4:	f7ff fdb7 	bl	8014646 <__retarget_lock_release_recursive>
 8014ad8:	89ab      	ldrh	r3, [r5, #12]
 8014ada:	065b      	lsls	r3, r3, #25
 8014adc:	f53f af12 	bmi.w	8014904 <_vfiprintf_r+0x4c>
 8014ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ae2:	e711      	b.n	8014908 <_vfiprintf_r+0x50>
 8014ae4:	ab03      	add	r3, sp, #12
 8014ae6:	9300      	str	r3, [sp, #0]
 8014ae8:	462a      	mov	r2, r5
 8014aea:	4b09      	ldr	r3, [pc, #36]	; (8014b10 <_vfiprintf_r+0x258>)
 8014aec:	a904      	add	r1, sp, #16
 8014aee:	4630      	mov	r0, r6
 8014af0:	f000 f880 	bl	8014bf4 <_printf_i>
 8014af4:	e7e4      	b.n	8014ac0 <_vfiprintf_r+0x208>
 8014af6:	bf00      	nop
 8014af8:	080150ec 	.word	0x080150ec
 8014afc:	0801510c 	.word	0x0801510c
 8014b00:	080150cc 	.word	0x080150cc
 8014b04:	0801512c 	.word	0x0801512c
 8014b08:	08015136 	.word	0x08015136
 8014b0c:	00000000 	.word	0x00000000
 8014b10:	08014893 	.word	0x08014893
 8014b14:	08015132 	.word	0x08015132

08014b18 <_printf_common>:
 8014b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b1c:	4616      	mov	r6, r2
 8014b1e:	4699      	mov	r9, r3
 8014b20:	688a      	ldr	r2, [r1, #8]
 8014b22:	690b      	ldr	r3, [r1, #16]
 8014b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014b28:	4293      	cmp	r3, r2
 8014b2a:	bfb8      	it	lt
 8014b2c:	4613      	movlt	r3, r2
 8014b2e:	6033      	str	r3, [r6, #0]
 8014b30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014b34:	4607      	mov	r7, r0
 8014b36:	460c      	mov	r4, r1
 8014b38:	b10a      	cbz	r2, 8014b3e <_printf_common+0x26>
 8014b3a:	3301      	adds	r3, #1
 8014b3c:	6033      	str	r3, [r6, #0]
 8014b3e:	6823      	ldr	r3, [r4, #0]
 8014b40:	0699      	lsls	r1, r3, #26
 8014b42:	bf42      	ittt	mi
 8014b44:	6833      	ldrmi	r3, [r6, #0]
 8014b46:	3302      	addmi	r3, #2
 8014b48:	6033      	strmi	r3, [r6, #0]
 8014b4a:	6825      	ldr	r5, [r4, #0]
 8014b4c:	f015 0506 	ands.w	r5, r5, #6
 8014b50:	d106      	bne.n	8014b60 <_printf_common+0x48>
 8014b52:	f104 0a19 	add.w	sl, r4, #25
 8014b56:	68e3      	ldr	r3, [r4, #12]
 8014b58:	6832      	ldr	r2, [r6, #0]
 8014b5a:	1a9b      	subs	r3, r3, r2
 8014b5c:	42ab      	cmp	r3, r5
 8014b5e:	dc26      	bgt.n	8014bae <_printf_common+0x96>
 8014b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014b64:	1e13      	subs	r3, r2, #0
 8014b66:	6822      	ldr	r2, [r4, #0]
 8014b68:	bf18      	it	ne
 8014b6a:	2301      	movne	r3, #1
 8014b6c:	0692      	lsls	r2, r2, #26
 8014b6e:	d42b      	bmi.n	8014bc8 <_printf_common+0xb0>
 8014b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014b74:	4649      	mov	r1, r9
 8014b76:	4638      	mov	r0, r7
 8014b78:	47c0      	blx	r8
 8014b7a:	3001      	adds	r0, #1
 8014b7c:	d01e      	beq.n	8014bbc <_printf_common+0xa4>
 8014b7e:	6823      	ldr	r3, [r4, #0]
 8014b80:	68e5      	ldr	r5, [r4, #12]
 8014b82:	6832      	ldr	r2, [r6, #0]
 8014b84:	f003 0306 	and.w	r3, r3, #6
 8014b88:	2b04      	cmp	r3, #4
 8014b8a:	bf08      	it	eq
 8014b8c:	1aad      	subeq	r5, r5, r2
 8014b8e:	68a3      	ldr	r3, [r4, #8]
 8014b90:	6922      	ldr	r2, [r4, #16]
 8014b92:	bf0c      	ite	eq
 8014b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014b98:	2500      	movne	r5, #0
 8014b9a:	4293      	cmp	r3, r2
 8014b9c:	bfc4      	itt	gt
 8014b9e:	1a9b      	subgt	r3, r3, r2
 8014ba0:	18ed      	addgt	r5, r5, r3
 8014ba2:	2600      	movs	r6, #0
 8014ba4:	341a      	adds	r4, #26
 8014ba6:	42b5      	cmp	r5, r6
 8014ba8:	d11a      	bne.n	8014be0 <_printf_common+0xc8>
 8014baa:	2000      	movs	r0, #0
 8014bac:	e008      	b.n	8014bc0 <_printf_common+0xa8>
 8014bae:	2301      	movs	r3, #1
 8014bb0:	4652      	mov	r2, sl
 8014bb2:	4649      	mov	r1, r9
 8014bb4:	4638      	mov	r0, r7
 8014bb6:	47c0      	blx	r8
 8014bb8:	3001      	adds	r0, #1
 8014bba:	d103      	bne.n	8014bc4 <_printf_common+0xac>
 8014bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8014bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bc4:	3501      	adds	r5, #1
 8014bc6:	e7c6      	b.n	8014b56 <_printf_common+0x3e>
 8014bc8:	18e1      	adds	r1, r4, r3
 8014bca:	1c5a      	adds	r2, r3, #1
 8014bcc:	2030      	movs	r0, #48	; 0x30
 8014bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014bd2:	4422      	add	r2, r4
 8014bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014bd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014bdc:	3302      	adds	r3, #2
 8014bde:	e7c7      	b.n	8014b70 <_printf_common+0x58>
 8014be0:	2301      	movs	r3, #1
 8014be2:	4622      	mov	r2, r4
 8014be4:	4649      	mov	r1, r9
 8014be6:	4638      	mov	r0, r7
 8014be8:	47c0      	blx	r8
 8014bea:	3001      	adds	r0, #1
 8014bec:	d0e6      	beq.n	8014bbc <_printf_common+0xa4>
 8014bee:	3601      	adds	r6, #1
 8014bf0:	e7d9      	b.n	8014ba6 <_printf_common+0x8e>
	...

08014bf4 <_printf_i>:
 8014bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014bf8:	460c      	mov	r4, r1
 8014bfa:	4691      	mov	r9, r2
 8014bfc:	7e27      	ldrb	r7, [r4, #24]
 8014bfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014c00:	2f78      	cmp	r7, #120	; 0x78
 8014c02:	4680      	mov	r8, r0
 8014c04:	469a      	mov	sl, r3
 8014c06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014c0a:	d807      	bhi.n	8014c1c <_printf_i+0x28>
 8014c0c:	2f62      	cmp	r7, #98	; 0x62
 8014c0e:	d80a      	bhi.n	8014c26 <_printf_i+0x32>
 8014c10:	2f00      	cmp	r7, #0
 8014c12:	f000 80d8 	beq.w	8014dc6 <_printf_i+0x1d2>
 8014c16:	2f58      	cmp	r7, #88	; 0x58
 8014c18:	f000 80a3 	beq.w	8014d62 <_printf_i+0x16e>
 8014c1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014c24:	e03a      	b.n	8014c9c <_printf_i+0xa8>
 8014c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014c2a:	2b15      	cmp	r3, #21
 8014c2c:	d8f6      	bhi.n	8014c1c <_printf_i+0x28>
 8014c2e:	a001      	add	r0, pc, #4	; (adr r0, 8014c34 <_printf_i+0x40>)
 8014c30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014c34:	08014c8d 	.word	0x08014c8d
 8014c38:	08014ca1 	.word	0x08014ca1
 8014c3c:	08014c1d 	.word	0x08014c1d
 8014c40:	08014c1d 	.word	0x08014c1d
 8014c44:	08014c1d 	.word	0x08014c1d
 8014c48:	08014c1d 	.word	0x08014c1d
 8014c4c:	08014ca1 	.word	0x08014ca1
 8014c50:	08014c1d 	.word	0x08014c1d
 8014c54:	08014c1d 	.word	0x08014c1d
 8014c58:	08014c1d 	.word	0x08014c1d
 8014c5c:	08014c1d 	.word	0x08014c1d
 8014c60:	08014dad 	.word	0x08014dad
 8014c64:	08014cd1 	.word	0x08014cd1
 8014c68:	08014d8f 	.word	0x08014d8f
 8014c6c:	08014c1d 	.word	0x08014c1d
 8014c70:	08014c1d 	.word	0x08014c1d
 8014c74:	08014dcf 	.word	0x08014dcf
 8014c78:	08014c1d 	.word	0x08014c1d
 8014c7c:	08014cd1 	.word	0x08014cd1
 8014c80:	08014c1d 	.word	0x08014c1d
 8014c84:	08014c1d 	.word	0x08014c1d
 8014c88:	08014d97 	.word	0x08014d97
 8014c8c:	680b      	ldr	r3, [r1, #0]
 8014c8e:	1d1a      	adds	r2, r3, #4
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	600a      	str	r2, [r1, #0]
 8014c94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014c9c:	2301      	movs	r3, #1
 8014c9e:	e0a3      	b.n	8014de8 <_printf_i+0x1f4>
 8014ca0:	6825      	ldr	r5, [r4, #0]
 8014ca2:	6808      	ldr	r0, [r1, #0]
 8014ca4:	062e      	lsls	r6, r5, #24
 8014ca6:	f100 0304 	add.w	r3, r0, #4
 8014caa:	d50a      	bpl.n	8014cc2 <_printf_i+0xce>
 8014cac:	6805      	ldr	r5, [r0, #0]
 8014cae:	600b      	str	r3, [r1, #0]
 8014cb0:	2d00      	cmp	r5, #0
 8014cb2:	da03      	bge.n	8014cbc <_printf_i+0xc8>
 8014cb4:	232d      	movs	r3, #45	; 0x2d
 8014cb6:	426d      	negs	r5, r5
 8014cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014cbc:	485e      	ldr	r0, [pc, #376]	; (8014e38 <_printf_i+0x244>)
 8014cbe:	230a      	movs	r3, #10
 8014cc0:	e019      	b.n	8014cf6 <_printf_i+0x102>
 8014cc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014cc6:	6805      	ldr	r5, [r0, #0]
 8014cc8:	600b      	str	r3, [r1, #0]
 8014cca:	bf18      	it	ne
 8014ccc:	b22d      	sxthne	r5, r5
 8014cce:	e7ef      	b.n	8014cb0 <_printf_i+0xbc>
 8014cd0:	680b      	ldr	r3, [r1, #0]
 8014cd2:	6825      	ldr	r5, [r4, #0]
 8014cd4:	1d18      	adds	r0, r3, #4
 8014cd6:	6008      	str	r0, [r1, #0]
 8014cd8:	0628      	lsls	r0, r5, #24
 8014cda:	d501      	bpl.n	8014ce0 <_printf_i+0xec>
 8014cdc:	681d      	ldr	r5, [r3, #0]
 8014cde:	e002      	b.n	8014ce6 <_printf_i+0xf2>
 8014ce0:	0669      	lsls	r1, r5, #25
 8014ce2:	d5fb      	bpl.n	8014cdc <_printf_i+0xe8>
 8014ce4:	881d      	ldrh	r5, [r3, #0]
 8014ce6:	4854      	ldr	r0, [pc, #336]	; (8014e38 <_printf_i+0x244>)
 8014ce8:	2f6f      	cmp	r7, #111	; 0x6f
 8014cea:	bf0c      	ite	eq
 8014cec:	2308      	moveq	r3, #8
 8014cee:	230a      	movne	r3, #10
 8014cf0:	2100      	movs	r1, #0
 8014cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014cf6:	6866      	ldr	r6, [r4, #4]
 8014cf8:	60a6      	str	r6, [r4, #8]
 8014cfa:	2e00      	cmp	r6, #0
 8014cfc:	bfa2      	ittt	ge
 8014cfe:	6821      	ldrge	r1, [r4, #0]
 8014d00:	f021 0104 	bicge.w	r1, r1, #4
 8014d04:	6021      	strge	r1, [r4, #0]
 8014d06:	b90d      	cbnz	r5, 8014d0c <_printf_i+0x118>
 8014d08:	2e00      	cmp	r6, #0
 8014d0a:	d04d      	beq.n	8014da8 <_printf_i+0x1b4>
 8014d0c:	4616      	mov	r6, r2
 8014d0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8014d12:	fb03 5711 	mls	r7, r3, r1, r5
 8014d16:	5dc7      	ldrb	r7, [r0, r7]
 8014d18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014d1c:	462f      	mov	r7, r5
 8014d1e:	42bb      	cmp	r3, r7
 8014d20:	460d      	mov	r5, r1
 8014d22:	d9f4      	bls.n	8014d0e <_printf_i+0x11a>
 8014d24:	2b08      	cmp	r3, #8
 8014d26:	d10b      	bne.n	8014d40 <_printf_i+0x14c>
 8014d28:	6823      	ldr	r3, [r4, #0]
 8014d2a:	07df      	lsls	r7, r3, #31
 8014d2c:	d508      	bpl.n	8014d40 <_printf_i+0x14c>
 8014d2e:	6923      	ldr	r3, [r4, #16]
 8014d30:	6861      	ldr	r1, [r4, #4]
 8014d32:	4299      	cmp	r1, r3
 8014d34:	bfde      	ittt	le
 8014d36:	2330      	movle	r3, #48	; 0x30
 8014d38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014d3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014d40:	1b92      	subs	r2, r2, r6
 8014d42:	6122      	str	r2, [r4, #16]
 8014d44:	f8cd a000 	str.w	sl, [sp]
 8014d48:	464b      	mov	r3, r9
 8014d4a:	aa03      	add	r2, sp, #12
 8014d4c:	4621      	mov	r1, r4
 8014d4e:	4640      	mov	r0, r8
 8014d50:	f7ff fee2 	bl	8014b18 <_printf_common>
 8014d54:	3001      	adds	r0, #1
 8014d56:	d14c      	bne.n	8014df2 <_printf_i+0x1fe>
 8014d58:	f04f 30ff 	mov.w	r0, #4294967295
 8014d5c:	b004      	add	sp, #16
 8014d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d62:	4835      	ldr	r0, [pc, #212]	; (8014e38 <_printf_i+0x244>)
 8014d64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014d68:	6823      	ldr	r3, [r4, #0]
 8014d6a:	680e      	ldr	r6, [r1, #0]
 8014d6c:	061f      	lsls	r7, r3, #24
 8014d6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8014d72:	600e      	str	r6, [r1, #0]
 8014d74:	d514      	bpl.n	8014da0 <_printf_i+0x1ac>
 8014d76:	07d9      	lsls	r1, r3, #31
 8014d78:	bf44      	itt	mi
 8014d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8014d7e:	6023      	strmi	r3, [r4, #0]
 8014d80:	b91d      	cbnz	r5, 8014d8a <_printf_i+0x196>
 8014d82:	6823      	ldr	r3, [r4, #0]
 8014d84:	f023 0320 	bic.w	r3, r3, #32
 8014d88:	6023      	str	r3, [r4, #0]
 8014d8a:	2310      	movs	r3, #16
 8014d8c:	e7b0      	b.n	8014cf0 <_printf_i+0xfc>
 8014d8e:	6823      	ldr	r3, [r4, #0]
 8014d90:	f043 0320 	orr.w	r3, r3, #32
 8014d94:	6023      	str	r3, [r4, #0]
 8014d96:	2378      	movs	r3, #120	; 0x78
 8014d98:	4828      	ldr	r0, [pc, #160]	; (8014e3c <_printf_i+0x248>)
 8014d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014d9e:	e7e3      	b.n	8014d68 <_printf_i+0x174>
 8014da0:	065e      	lsls	r6, r3, #25
 8014da2:	bf48      	it	mi
 8014da4:	b2ad      	uxthmi	r5, r5
 8014da6:	e7e6      	b.n	8014d76 <_printf_i+0x182>
 8014da8:	4616      	mov	r6, r2
 8014daa:	e7bb      	b.n	8014d24 <_printf_i+0x130>
 8014dac:	680b      	ldr	r3, [r1, #0]
 8014dae:	6826      	ldr	r6, [r4, #0]
 8014db0:	6960      	ldr	r0, [r4, #20]
 8014db2:	1d1d      	adds	r5, r3, #4
 8014db4:	600d      	str	r5, [r1, #0]
 8014db6:	0635      	lsls	r5, r6, #24
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	d501      	bpl.n	8014dc0 <_printf_i+0x1cc>
 8014dbc:	6018      	str	r0, [r3, #0]
 8014dbe:	e002      	b.n	8014dc6 <_printf_i+0x1d2>
 8014dc0:	0671      	lsls	r1, r6, #25
 8014dc2:	d5fb      	bpl.n	8014dbc <_printf_i+0x1c8>
 8014dc4:	8018      	strh	r0, [r3, #0]
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	6123      	str	r3, [r4, #16]
 8014dca:	4616      	mov	r6, r2
 8014dcc:	e7ba      	b.n	8014d44 <_printf_i+0x150>
 8014dce:	680b      	ldr	r3, [r1, #0]
 8014dd0:	1d1a      	adds	r2, r3, #4
 8014dd2:	600a      	str	r2, [r1, #0]
 8014dd4:	681e      	ldr	r6, [r3, #0]
 8014dd6:	6862      	ldr	r2, [r4, #4]
 8014dd8:	2100      	movs	r1, #0
 8014dda:	4630      	mov	r0, r6
 8014ddc:	f7eb fa00 	bl	80001e0 <memchr>
 8014de0:	b108      	cbz	r0, 8014de6 <_printf_i+0x1f2>
 8014de2:	1b80      	subs	r0, r0, r6
 8014de4:	6060      	str	r0, [r4, #4]
 8014de6:	6863      	ldr	r3, [r4, #4]
 8014de8:	6123      	str	r3, [r4, #16]
 8014dea:	2300      	movs	r3, #0
 8014dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014df0:	e7a8      	b.n	8014d44 <_printf_i+0x150>
 8014df2:	6923      	ldr	r3, [r4, #16]
 8014df4:	4632      	mov	r2, r6
 8014df6:	4649      	mov	r1, r9
 8014df8:	4640      	mov	r0, r8
 8014dfa:	47d0      	blx	sl
 8014dfc:	3001      	adds	r0, #1
 8014dfe:	d0ab      	beq.n	8014d58 <_printf_i+0x164>
 8014e00:	6823      	ldr	r3, [r4, #0]
 8014e02:	079b      	lsls	r3, r3, #30
 8014e04:	d413      	bmi.n	8014e2e <_printf_i+0x23a>
 8014e06:	68e0      	ldr	r0, [r4, #12]
 8014e08:	9b03      	ldr	r3, [sp, #12]
 8014e0a:	4298      	cmp	r0, r3
 8014e0c:	bfb8      	it	lt
 8014e0e:	4618      	movlt	r0, r3
 8014e10:	e7a4      	b.n	8014d5c <_printf_i+0x168>
 8014e12:	2301      	movs	r3, #1
 8014e14:	4632      	mov	r2, r6
 8014e16:	4649      	mov	r1, r9
 8014e18:	4640      	mov	r0, r8
 8014e1a:	47d0      	blx	sl
 8014e1c:	3001      	adds	r0, #1
 8014e1e:	d09b      	beq.n	8014d58 <_printf_i+0x164>
 8014e20:	3501      	adds	r5, #1
 8014e22:	68e3      	ldr	r3, [r4, #12]
 8014e24:	9903      	ldr	r1, [sp, #12]
 8014e26:	1a5b      	subs	r3, r3, r1
 8014e28:	42ab      	cmp	r3, r5
 8014e2a:	dcf2      	bgt.n	8014e12 <_printf_i+0x21e>
 8014e2c:	e7eb      	b.n	8014e06 <_printf_i+0x212>
 8014e2e:	2500      	movs	r5, #0
 8014e30:	f104 0619 	add.w	r6, r4, #25
 8014e34:	e7f5      	b.n	8014e22 <_printf_i+0x22e>
 8014e36:	bf00      	nop
 8014e38:	0801513d 	.word	0x0801513d
 8014e3c:	0801514e 	.word	0x0801514e

08014e40 <_sbrk_r>:
 8014e40:	b538      	push	{r3, r4, r5, lr}
 8014e42:	4d06      	ldr	r5, [pc, #24]	; (8014e5c <_sbrk_r+0x1c>)
 8014e44:	2300      	movs	r3, #0
 8014e46:	4604      	mov	r4, r0
 8014e48:	4608      	mov	r0, r1
 8014e4a:	602b      	str	r3, [r5, #0]
 8014e4c:	f7ec f932 	bl	80010b4 <_sbrk>
 8014e50:	1c43      	adds	r3, r0, #1
 8014e52:	d102      	bne.n	8014e5a <_sbrk_r+0x1a>
 8014e54:	682b      	ldr	r3, [r5, #0]
 8014e56:	b103      	cbz	r3, 8014e5a <_sbrk_r+0x1a>
 8014e58:	6023      	str	r3, [r4, #0]
 8014e5a:	bd38      	pop	{r3, r4, r5, pc}
 8014e5c:	200072f4 	.word	0x200072f4

08014e60 <__sread>:
 8014e60:	b510      	push	{r4, lr}
 8014e62:	460c      	mov	r4, r1
 8014e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e68:	f000 f8a0 	bl	8014fac <_read_r>
 8014e6c:	2800      	cmp	r0, #0
 8014e6e:	bfab      	itete	ge
 8014e70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014e72:	89a3      	ldrhlt	r3, [r4, #12]
 8014e74:	181b      	addge	r3, r3, r0
 8014e76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014e7a:	bfac      	ite	ge
 8014e7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8014e7e:	81a3      	strhlt	r3, [r4, #12]
 8014e80:	bd10      	pop	{r4, pc}

08014e82 <__swrite>:
 8014e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e86:	461f      	mov	r7, r3
 8014e88:	898b      	ldrh	r3, [r1, #12]
 8014e8a:	05db      	lsls	r3, r3, #23
 8014e8c:	4605      	mov	r5, r0
 8014e8e:	460c      	mov	r4, r1
 8014e90:	4616      	mov	r6, r2
 8014e92:	d505      	bpl.n	8014ea0 <__swrite+0x1e>
 8014e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e98:	2302      	movs	r3, #2
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	f000 f868 	bl	8014f70 <_lseek_r>
 8014ea0:	89a3      	ldrh	r3, [r4, #12]
 8014ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014eaa:	81a3      	strh	r3, [r4, #12]
 8014eac:	4632      	mov	r2, r6
 8014eae:	463b      	mov	r3, r7
 8014eb0:	4628      	mov	r0, r5
 8014eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014eb6:	f000 b817 	b.w	8014ee8 <_write_r>

08014eba <__sseek>:
 8014eba:	b510      	push	{r4, lr}
 8014ebc:	460c      	mov	r4, r1
 8014ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ec2:	f000 f855 	bl	8014f70 <_lseek_r>
 8014ec6:	1c43      	adds	r3, r0, #1
 8014ec8:	89a3      	ldrh	r3, [r4, #12]
 8014eca:	bf15      	itete	ne
 8014ecc:	6560      	strne	r0, [r4, #84]	; 0x54
 8014ece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014ed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014ed6:	81a3      	strheq	r3, [r4, #12]
 8014ed8:	bf18      	it	ne
 8014eda:	81a3      	strhne	r3, [r4, #12]
 8014edc:	bd10      	pop	{r4, pc}

08014ede <__sclose>:
 8014ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ee2:	f000 b813 	b.w	8014f0c <_close_r>
	...

08014ee8 <_write_r>:
 8014ee8:	b538      	push	{r3, r4, r5, lr}
 8014eea:	4d07      	ldr	r5, [pc, #28]	; (8014f08 <_write_r+0x20>)
 8014eec:	4604      	mov	r4, r0
 8014eee:	4608      	mov	r0, r1
 8014ef0:	4611      	mov	r1, r2
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	602a      	str	r2, [r5, #0]
 8014ef6:	461a      	mov	r2, r3
 8014ef8:	f7ec f88b 	bl	8001012 <_write>
 8014efc:	1c43      	adds	r3, r0, #1
 8014efe:	d102      	bne.n	8014f06 <_write_r+0x1e>
 8014f00:	682b      	ldr	r3, [r5, #0]
 8014f02:	b103      	cbz	r3, 8014f06 <_write_r+0x1e>
 8014f04:	6023      	str	r3, [r4, #0]
 8014f06:	bd38      	pop	{r3, r4, r5, pc}
 8014f08:	200072f4 	.word	0x200072f4

08014f0c <_close_r>:
 8014f0c:	b538      	push	{r3, r4, r5, lr}
 8014f0e:	4d06      	ldr	r5, [pc, #24]	; (8014f28 <_close_r+0x1c>)
 8014f10:	2300      	movs	r3, #0
 8014f12:	4604      	mov	r4, r0
 8014f14:	4608      	mov	r0, r1
 8014f16:	602b      	str	r3, [r5, #0]
 8014f18:	f7ec f897 	bl	800104a <_close>
 8014f1c:	1c43      	adds	r3, r0, #1
 8014f1e:	d102      	bne.n	8014f26 <_close_r+0x1a>
 8014f20:	682b      	ldr	r3, [r5, #0]
 8014f22:	b103      	cbz	r3, 8014f26 <_close_r+0x1a>
 8014f24:	6023      	str	r3, [r4, #0]
 8014f26:	bd38      	pop	{r3, r4, r5, pc}
 8014f28:	200072f4 	.word	0x200072f4

08014f2c <_fstat_r>:
 8014f2c:	b538      	push	{r3, r4, r5, lr}
 8014f2e:	4d07      	ldr	r5, [pc, #28]	; (8014f4c <_fstat_r+0x20>)
 8014f30:	2300      	movs	r3, #0
 8014f32:	4604      	mov	r4, r0
 8014f34:	4608      	mov	r0, r1
 8014f36:	4611      	mov	r1, r2
 8014f38:	602b      	str	r3, [r5, #0]
 8014f3a:	f7ec f892 	bl	8001062 <_fstat>
 8014f3e:	1c43      	adds	r3, r0, #1
 8014f40:	d102      	bne.n	8014f48 <_fstat_r+0x1c>
 8014f42:	682b      	ldr	r3, [r5, #0]
 8014f44:	b103      	cbz	r3, 8014f48 <_fstat_r+0x1c>
 8014f46:	6023      	str	r3, [r4, #0]
 8014f48:	bd38      	pop	{r3, r4, r5, pc}
 8014f4a:	bf00      	nop
 8014f4c:	200072f4 	.word	0x200072f4

08014f50 <_isatty_r>:
 8014f50:	b538      	push	{r3, r4, r5, lr}
 8014f52:	4d06      	ldr	r5, [pc, #24]	; (8014f6c <_isatty_r+0x1c>)
 8014f54:	2300      	movs	r3, #0
 8014f56:	4604      	mov	r4, r0
 8014f58:	4608      	mov	r0, r1
 8014f5a:	602b      	str	r3, [r5, #0]
 8014f5c:	f7ec f891 	bl	8001082 <_isatty>
 8014f60:	1c43      	adds	r3, r0, #1
 8014f62:	d102      	bne.n	8014f6a <_isatty_r+0x1a>
 8014f64:	682b      	ldr	r3, [r5, #0]
 8014f66:	b103      	cbz	r3, 8014f6a <_isatty_r+0x1a>
 8014f68:	6023      	str	r3, [r4, #0]
 8014f6a:	bd38      	pop	{r3, r4, r5, pc}
 8014f6c:	200072f4 	.word	0x200072f4

08014f70 <_lseek_r>:
 8014f70:	b538      	push	{r3, r4, r5, lr}
 8014f72:	4d07      	ldr	r5, [pc, #28]	; (8014f90 <_lseek_r+0x20>)
 8014f74:	4604      	mov	r4, r0
 8014f76:	4608      	mov	r0, r1
 8014f78:	4611      	mov	r1, r2
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	602a      	str	r2, [r5, #0]
 8014f7e:	461a      	mov	r2, r3
 8014f80:	f7ec f88a 	bl	8001098 <_lseek>
 8014f84:	1c43      	adds	r3, r0, #1
 8014f86:	d102      	bne.n	8014f8e <_lseek_r+0x1e>
 8014f88:	682b      	ldr	r3, [r5, #0]
 8014f8a:	b103      	cbz	r3, 8014f8e <_lseek_r+0x1e>
 8014f8c:	6023      	str	r3, [r4, #0]
 8014f8e:	bd38      	pop	{r3, r4, r5, pc}
 8014f90:	200072f4 	.word	0x200072f4

08014f94 <__malloc_lock>:
 8014f94:	4801      	ldr	r0, [pc, #4]	; (8014f9c <__malloc_lock+0x8>)
 8014f96:	f7ff bb55 	b.w	8014644 <__retarget_lock_acquire_recursive>
 8014f9a:	bf00      	nop
 8014f9c:	200072ec 	.word	0x200072ec

08014fa0 <__malloc_unlock>:
 8014fa0:	4801      	ldr	r0, [pc, #4]	; (8014fa8 <__malloc_unlock+0x8>)
 8014fa2:	f7ff bb50 	b.w	8014646 <__retarget_lock_release_recursive>
 8014fa6:	bf00      	nop
 8014fa8:	200072ec 	.word	0x200072ec

08014fac <_read_r>:
 8014fac:	b538      	push	{r3, r4, r5, lr}
 8014fae:	4d07      	ldr	r5, [pc, #28]	; (8014fcc <_read_r+0x20>)
 8014fb0:	4604      	mov	r4, r0
 8014fb2:	4608      	mov	r0, r1
 8014fb4:	4611      	mov	r1, r2
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	602a      	str	r2, [r5, #0]
 8014fba:	461a      	mov	r2, r3
 8014fbc:	f7ec f80c 	bl	8000fd8 <_read>
 8014fc0:	1c43      	adds	r3, r0, #1
 8014fc2:	d102      	bne.n	8014fca <_read_r+0x1e>
 8014fc4:	682b      	ldr	r3, [r5, #0]
 8014fc6:	b103      	cbz	r3, 8014fca <_read_r+0x1e>
 8014fc8:	6023      	str	r3, [r4, #0]
 8014fca:	bd38      	pop	{r3, r4, r5, pc}
 8014fcc:	200072f4 	.word	0x200072f4

08014fd0 <_init>:
 8014fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fd2:	bf00      	nop
 8014fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014fd6:	bc08      	pop	{r3}
 8014fd8:	469e      	mov	lr, r3
 8014fda:	4770      	bx	lr

08014fdc <_fini>:
 8014fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fde:	bf00      	nop
 8014fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014fe2:	bc08      	pop	{r3}
 8014fe4:	469e      	mov	lr, r3
 8014fe6:	4770      	bx	lr
